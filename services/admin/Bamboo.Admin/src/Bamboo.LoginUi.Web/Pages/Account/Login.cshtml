@page
@using Bamboo.Abp.LoginUi.Web.Localization
@using Bamboo.Abp.LoginUi.Web.Pages.Components.ExternalLoginWidget
@using Microsoft.AspNetCore.Mvc.Localization
@using Volo.Abp.Account.Settings
@using Volo.Abp.Settings
@model Bamboo.Abp.LoginUi.Web.Pages.Account.LoginUiLoginModel
@inject IHtmlLocalizer<AbpLoginUiResource> L
@inject ISettingProvider SettingProvider

@*<abp-style-bundle>
    <abp-style src="/Pages/Account/Login.cshtml.css" />
</abp-style-bundle>*@

<div class="card mt-3 shadow-sm rounded">
    <div class="card-body p-5">
        <h4>@L["Login"]</h4>
        @*@if (await SettingProvider.IsTrueAsync(AccountSettingNames.IsSelfRegistrationEnabled))
        {
            <strong>
                @L["AreYouANewUser"]
                <a href="@Url.Page("./Register", new {returnUrl = Model.ReturnUrl, returnUrlHash = Model.ReturnUrlHash})" class="text-decoration-none">@L["Register"]</a>
            </strong>
        }*@
        @if (Model.EnableLocalLogin)
        {
            <form method="post" class="mt-4">
                <div class="mb-3">
                    <label asp-for="LoginInput.UserNameOrEmailAddress" class="form-label">Phone / Email</label>
                    <input asp-for="LoginInput.UserNameOrEmailAddress" class="form-control"/>
                    <span asp-validation-for="LoginInput.UserNameOrEmailAddress" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="LoginInput.Password" class="form-label"></label>
                    <input asp-for="LoginInput.Password" class="form-control"/>
                    <span asp-validation-for="LoginInput.Password" class="text-danger"></span>
                </div>
                <abp-row>
                    <abp-column>
                        <abp-input asp-for="LoginInput.RememberMe" class="mb-4"/>
                    </abp-column>
                    <abp-column class="text-end">
                        <a href="@Url.Page("./ForgotPassword", new {returnUrl = Model.ReturnUrl, returnUrlHash = Model.ReturnUrlHash})">@L["ForgotPassword"]</a>
                    </abp-column>
                </abp-row>
                <div class="d-grid gap-2">
                    <abp-button type="submit" button-type="Primary" name="Action" value="Login" class="btn-lg mt-3">@L["Login"]</abp-button>
                    @if (Model.ShowCancelButton)
                    {
                        <abp-button type="submit" button-type="Secondary" formnovalidate="formnovalidate" name="Action" value="Cancel" class="btn-lg mt-3">@L["Cancel"]</abp-button>
                    }
                </div>
            </form>
        }

        @if (Model.VisibleExternalProviders.Any())
        {
            <div class="d-flex block-center mt-4" style="align-items: center;">
                <div class="divider"></div>
                <span class="divider-text text-caption mx-4">@L["OrLoginWith"]</span>
                <div class="divider"></div>
            </div>
            <div class="mt-3">
                @await Component.InvokeAsync("ExternalLoginWidget", new ExternalLoginWidgetModel(Model.VisibleExternalProviders, Model.ReturnUrl, Model.ReturnUrlHash))
            </div>
        }

        @if (!Model.EnableLocalLogin && !Model.VisibleExternalProviders.Any())
        {
            <div class="alert alert-warning">
                <strong>@L["InvalidLoginRequest"]</strong>
                @L["ThereAreNoLoginSchemesConfiguredForThisClient"]
            </div>
        }

    </div>
</div>

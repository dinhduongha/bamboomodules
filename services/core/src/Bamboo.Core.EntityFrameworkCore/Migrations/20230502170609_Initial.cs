using System;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bamboo.Core.Migrations
{
    /// <inheritdoc />
    public partial class Initial : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterDatabase()
                .Annotation("Npgsql:PostgresExtension:pg_trgm", ",,");

            migrationBuilder.CreateTable(
                name: "ir_logging",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    type = table.Column<string>(type: "text", nullable: true),
                    dbname = table.Column<string>(type: "text", nullable: true),
                    level = table.Column<string>(type: "text", nullable: true),
                    path = table.Column<string>(type: "text", nullable: true),
                    func = table.Column<string>(type: "text", nullable: true),
                    line = table.Column<string>(type: "text", nullable: true),
                    message = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_logging_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "ir_profile",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sqlcount = table.Column<long>(name: "sql_count", type: "bigint", nullable: true),
                    entrycount = table.Column<long>(name: "entry_count", type: "bigint", nullable: true),
                    session = table.Column<string>(type: "text", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    initstacktrace = table.Column<string>(name: "init_stack_trace", type: "text", nullable: true),
                    sql = table.Column<string>(type: "text", nullable: true),
                    tracesasync = table.Column<string>(name: "traces_async", type: "text", nullable: true),
                    tracessync = table.Column<string>(name: "traces_sync", type: "text", nullable: true),
                    qweb = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    duration = table.Column<double>(type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_profile_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_account",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    groupid = table.Column<Guid>(name: "group_id", type: "uuid", nullable: true),
                    rootid = table.Column<Guid>(name: "root_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    accounttype = table.Column<string>(name: "account_type", type: "text", nullable: true),
                    internalgroup = table.Column<string>(name: "internal_group", type: "text", nullable: true),
                    note = table.Column<string>(type: "text", nullable: true),
                    deprecated = table.Column<bool>(type: "boolean", nullable: true),
                    includeinitialbalance = table.Column<bool>(name: "include_initial_balance", type: "boolean", nullable: true),
                    reconcile = table.Column<bool>(type: "boolean", nullable: true),
                    isoffbalance = table.Column<bool>(name: "is_off_balance", type: "boolean", nullable: true),
                    nontrade = table.Column<bool>(name: "non_trade", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_account_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_account_account_balance_report_rel",
                columns: table => new
                {
                    accountbalancereportid = table.Column<Guid>(name: "account_balance_report_id", type: "uuid", nullable: false),
                    accountaccountid = table.Column<Guid>(name: "account_account_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_account_account_balance_report_rel_pkey", x => new { x.accountbalancereportid, x.accountaccountid });
                    table.ForeignKey(
                        name: "account_account_account_balance_report__account_account_id_fkey",
                        column: x => x.accountaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_account_account_common_account_report_rel",
                columns: table => new
                {
                    accountcommonaccountreportid = table.Column<Guid>(name: "account_common_account_report_id", type: "uuid", nullable: false),
                    accountaccountid = table.Column<Guid>(name: "account_account_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_account_account_common_account_report_rel_pkey", x => new { x.accountcommonaccountreportid, x.accountaccountid });
                    table.ForeignKey(
                        name: "account_account_account_common_account__account_account_id_fkey",
                        column: x => x.accountaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_account_account_journal_rel",
                columns: table => new
                {
                    accountaccountid = table.Column<Guid>(name: "account_account_id", type: "uuid", nullable: false),
                    accountjournalid = table.Column<Guid>(name: "account_journal_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_account_account_journal_rel_pkey", x => new { x.accountaccountid, x.accountjournalid });
                    table.ForeignKey(
                        name: "account_account_account_journal_rel_account_account_id_fkey",
                        column: x => x.accountaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_account_account_report_general_ledger_rel",
                columns: table => new
                {
                    accountreportgeneralledgerid = table.Column<Guid>(name: "account_report_general_ledger_id", type: "uuid", nullable: false),
                    accountaccountid = table.Column<Guid>(name: "account_account_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_account_account_report_general_ledger_rel_pkey", x => new { x.accountreportgeneralledgerid, x.accountaccountid });
                    table.ForeignKey(
                        name: "account_account_account_report_general__account_account_id_fkey",
                        column: x => x.accountaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_account_account_tag",
                columns: table => new
                {
                    accountaccountid = table.Column<Guid>(name: "account_account_id", type: "uuid", nullable: false),
                    accountaccounttagid = table.Column<long>(name: "account_account_tag_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_account_account_tag_pkey", x => new { x.accountaccountid, x.accountaccounttagid });
                    table.ForeignKey(
                        name: "account_account_account_tag_account_account_id_fkey",
                        column: x => x.accountaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_account_bankbook_report",
                columns: table => new
                {
                    reportlineid = table.Column<Guid>(name: "report_line_id", type: "uuid", nullable: false),
                    accountid = table.Column<Guid>(name: "account_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_account_bankbook_report_pkey", x => new { x.reportlineid, x.accountid });
                    table.ForeignKey(
                        name: "account_account_bankbook_report_account_id_fkey",
                        column: x => x.accountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_account_cashbook_report",
                columns: table => new
                {
                    reportlineid = table.Column<Guid>(name: "report_line_id", type: "uuid", nullable: false),
                    accountid = table.Column<Guid>(name: "account_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_account_cashbook_report_pkey", x => new { x.reportlineid, x.accountid });
                    table.ForeignKey(
                        name: "account_account_cashbook_report_account_id_fkey",
                        column: x => x.accountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_account_daybook_report",
                columns: table => new
                {
                    reportlineid = table.Column<Guid>(name: "report_line_id", type: "uuid", nullable: false),
                    accountid = table.Column<Guid>(name: "account_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_account_daybook_report_pkey", x => new { x.reportlineid, x.accountid });
                    table.ForeignKey(
                        name: "account_account_daybook_report_account_id_fkey",
                        column: x => x.accountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_account_financial_report",
                columns: table => new
                {
                    reportlineid = table.Column<Guid>(name: "report_line_id", type: "uuid", nullable: false),
                    accountid = table.Column<Guid>(name: "account_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_account_financial_report_pkey", x => new { x.reportlineid, x.accountid });
                    table.ForeignKey(
                        name: "account_account_financial_report_account_id_fkey",
                        column: x => x.accountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_account_financial_report_type",
                columns: table => new
                {
                    reportid = table.Column<Guid>(name: "report_id", type: "uuid", nullable: false),
                    accounttypeid = table.Column<long>(name: "account_type_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_account_financial_report_type_pkey", x => new { x.reportid, x.accounttypeid });
                });

            migrationBuilder.CreateTable(
                name: "account_account_tag",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    countryid = table.Column<long>(name: "country_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    applicability = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    taxnegate = table.Column<bool>(name: "tax_negate", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_account_tag_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_account_tag_account_move_line_rel",
                columns: table => new
                {
                    accountmovelineid = table.Column<Guid>(name: "account_move_line_id", type: "uuid", nullable: false),
                    accountaccounttagid = table.Column<long>(name: "account_account_tag_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_account_tag_account_move_line_rel_pkey", x => new { x.accountmovelineid, x.accountaccounttagid });
                    table.ForeignKey(
                        name: "account_account_tag_account_move_li_account_account_tag_id_fkey",
                        column: x => x.accountaccounttagid,
                        principalTable: "account_account_tag",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "account_account_tag_account_tax_repartition_line_rel",
                columns: table => new
                {
                    accounttaxrepartitionlineid = table.Column<Guid>(name: "account_tax_repartition_line_id", type: "uuid", nullable: false),
                    accountaccounttagid = table.Column<long>(name: "account_account_tag_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_account_tag_account_tax_repartition_line_rel_pkey", x => new { x.accounttaxrepartitionlineid, x.accountaccounttagid });
                    table.ForeignKey(
                        name: "account_account_tag_account_tax_rep_account_account_tag_id_fkey",
                        column: x => x.accountaccounttagid,
                        principalTable: "account_account_tag",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_account_tag_product_template_rel",
                columns: table => new
                {
                    producttemplateid = table.Column<Guid>(name: "product_template_id", type: "uuid", nullable: false),
                    accountaccounttagid = table.Column<long>(name: "account_account_tag_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_account_tag_product_template_rel_pkey", x => new { x.producttemplateid, x.accountaccounttagid });
                    table.ForeignKey(
                        name: "account_account_tag_product_templat_account_account_tag_id_fkey",
                        column: x => x.accountaccounttagid,
                        principalTable: "account_account_tag",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_account_tax_default_rel",
                columns: table => new
                {
                    accountid = table.Column<Guid>(name: "account_id", type: "uuid", nullable: false),
                    taxid = table.Column<Guid>(name: "tax_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_account_tax_default_rel_pkey", x => new { x.accountid, x.taxid });
                    table.ForeignKey(
                        name: "account_account_tax_default_rel_account_id_fkey",
                        column: x => x.accountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_account_template",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    charttemplateid = table.Column<Guid>(name: "chart_template_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    accounttype = table.Column<string>(name: "account_type", type: "text", nullable: true),
                    note = table.Column<string>(type: "text", nullable: true),
                    reconcile = table.Column<bool>(type: "boolean", nullable: true),
                    nocreate = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_account_template_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_account_template_account_tag",
                columns: table => new
                {
                    accountaccounttemplateid = table.Column<Guid>(name: "account_account_template_id", type: "uuid", nullable: false),
                    accountaccounttagid = table.Column<long>(name: "account_account_tag_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_account_template_account_tag_pkey", x => new { x.accountaccounttemplateid, x.accountaccounttagid });
                    table.ForeignKey(
                        name: "account_account_template_accou_account_account_template_id_fkey",
                        column: x => x.accountaccounttemplateid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "account_account_template_account_ta_account_account_tag_id_fkey",
                        column: x => x.accountaccounttagid,
                        principalTable: "account_account_tag",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_account_template_tax_rel",
                columns: table => new
                {
                    accountid = table.Column<Guid>(name: "account_id", type: "uuid", nullable: false),
                    taxid = table.Column<Guid>(name: "tax_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_account_template_tax_rel_pkey", x => new { x.accountid, x.taxid });
                    table.ForeignKey(
                        name: "account_account_template_tax_rel_account_id_fkey",
                        column: x => x.accountid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_account_type",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    type = table.Column<string>(type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_account_type_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_accrued_orders_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    accountid = table.Column<Guid>(name: "account_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    reversaldate = table.Column<DateTime>(name: "reversal_date", type: "timestamp without time zone", nullable: true),
                    amount = table.Column<decimal>(type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_accrued_orders_wizard_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_accrued_orders_wizard_account_id_fkey",
                        column: x => x.accountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_aged_trial_balance",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    periodlength = table.Column<long>(name: "period_length", type: "bigint", nullable: true),
                    targetmove = table.Column<string>(name: "target_move", type: "text", nullable: true),
                    resultselection = table.Column<string>(name: "result_selection", type: "text", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    dateto = table.Column<DateTime>(name: "date_to", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_aged_trial_balance_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_aged_trial_balance_account_journal_rel",
                columns: table => new
                {
                    accountagedtrialbalanceid = table.Column<Guid>(name: "account_aged_trial_balance_id", type: "uuid", nullable: false),
                    accountjournalid = table.Column<Guid>(name: "account_journal_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_aged_trial_balance_account_journal_rel_pkey", x => new { x.accountagedtrialbalanceid, x.accountjournalid });
                    table.ForeignKey(
                        name: "account_aged_trial_balance_ac_account_aged_trial_balance_i_fkey",
                        column: x => x.accountagedtrialbalanceid,
                        principalTable: "account_aged_trial_balance",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_aged_trial_balance_res_partner_rel",
                columns: table => new
                {
                    accountagedtrialbalanceid = table.Column<Guid>(name: "account_aged_trial_balance_id", type: "uuid", nullable: false),
                    respartnerid = table.Column<Guid>(name: "res_partner_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_aged_trial_balance_res_partner_rel_pkey", x => new { x.accountagedtrialbalanceid, x.respartnerid });
                    table.ForeignKey(
                        name: "account_aged_trial_balance_re_account_aged_trial_balance_i_fkey",
                        column: x => x.accountagedtrialbalanceid,
                        principalTable: "account_aged_trial_balance",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_analytic_account",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    planid = table.Column<Guid>(name: "plan_id", type: "uuid", nullable: true),
                    rootplanid = table.Column<Guid>(name: "root_plan_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_analytic_account_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_analytic_account_account_common_account_report_rel",
                columns: table => new
                {
                    accountcommonaccountreportid = table.Column<Guid>(name: "account_common_account_report_id", type: "uuid", nullable: false),
                    accountanalyticaccountid = table.Column<Guid>(name: "account_analytic_account_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_analytic_account_account_common_account_report_rel_pkey", x => new { x.accountcommonaccountreportid, x.accountanalyticaccountid });
                    table.ForeignKey(
                        name: "account_analytic_account_accou_account_analytic_account_id_fkey",
                        column: x => x.accountanalyticaccountid,
                        principalTable: "account_analytic_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_analytic_account_account_report_general_ledger_rel",
                columns: table => new
                {
                    accountreportgeneralledgerid = table.Column<Guid>(name: "account_report_general_ledger_id", type: "uuid", nullable: false),
                    accountanalyticaccountid = table.Column<Guid>(name: "account_analytic_account_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_analytic_account_account_report_general_ledger_rel_pkey", x => new { x.accountreportgeneralledgerid, x.accountanalyticaccountid });
                    table.ForeignKey(
                        name: "account_analytic_account_acco_account_analytic_account_id_fkey1",
                        column: x => x.accountanalyticaccountid,
                        principalTable: "account_analytic_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_analytic_applicability",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    analyticplanid = table.Column<Guid>(name: "analytic_plan_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    businessdomain = table.Column<string>(name: "business_domain", type: "text", nullable: true),
                    applicability = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    productcategid = table.Column<long>(name: "product_categ_id", type: "bigint", nullable: true),
                    accountprefix = table.Column<string>(name: "account_prefix", type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_analytic_applicability_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_analytic_distribution_model",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    partnercategoryid = table.Column<long>(name: "partner_category_id", type: "bigint", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    analyticdistribution = table.Column<string>(name: "analytic_distribution", type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    productcategid = table.Column<long>(name: "product_categ_id", type: "bigint", nullable: true),
                    accountprefix = table.Column<string>(name: "account_prefix", type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_analytic_distribution_model_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_analytic_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    productuomid = table.Column<Guid>(name: "product_uom_id", type: "uuid", nullable: true),
                    accountid = table.Column<Guid>(name: "account_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    planid = table.Column<Guid>(name: "plan_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    category = table.Column<string>(type: "text", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    amount = table.Column<decimal>(type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    unitamount = table.Column<double>(name: "unit_amount", type: "double precision", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    generalaccountid = table.Column<Guid>(name: "general_account_id", type: "uuid", nullable: true),
                    journalid = table.Column<Guid>(name: "journal_id", type: "uuid", nullable: true),
                    movelineid = table.Column<Guid>(name: "move_line_id", type: "uuid", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    @ref = table.Column<string>(name: "ref", type: "text", nullable: true),
                    soline = table.Column<Guid>(name: "so_line", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_analytic_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_analytic_line_account_id_fkey",
                        column: x => x.accountid,
                        principalTable: "account_analytic_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "account_analytic_line_general_account_id_fkey",
                        column: x => x.generalaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "account_analytic_plan",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    parentid = table.Column<Guid>(name: "parent_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    parentpath = table.Column<string>(name: "parent_path", type: "text", nullable: true),
                    completename = table.Column<string>(name: "complete_name", type: "text", nullable: true),
                    defaultapplicability = table.Column<string>(name: "default_applicability", type: "text", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_analytic_plan_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_analytic_plan_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "account_analytic_plan",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_asset_asset",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    categoryid = table.Column<Guid>(name: "category_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    methodnumber = table.Column<long>(name: "method_number", type: "bigint", nullable: true),
                    methodperiod = table.Column<long>(name: "method_period", type: "bigint", nullable: true),
                    invoiceid = table.Column<Guid>(name: "invoice_id", type: "uuid", nullable: true),
                    accountanalyticid = table.Column<Guid>(name: "account_analytic_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    method = table.Column<string>(type: "text", nullable: true),
                    methodtime = table.Column<string>(name: "method_time", type: "text", nullable: true),
                    datefirstdepreciation = table.Column<string>(name: "date_first_depreciation", type: "text", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    methodend = table.Column<DateTime>(name: "method_end", type: "timestamp without time zone", nullable: true),
                    firstdepreciationmanualdate = table.Column<DateTime>(name: "first_depreciation_manual_date", type: "timestamp without time zone", nullable: true),
                    analyticdistribution = table.Column<string>(name: "analytic_distribution", type: "jsonb", nullable: true),
                    note = table.Column<string>(type: "text", nullable: true),
                    value = table.Column<decimal>(type: "numeric", nullable: true),
                    salvagevalue = table.Column<decimal>(name: "salvage_value", type: "numeric", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    prorata = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    methodprogressfactor = table.Column<double>(name: "method_progress_factor", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_asset_asset_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_asset_asset_account_analytic_id_fkey",
                        column: x => x.accountanalyticid,
                        principalTable: "account_analytic_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "account_asset_category",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    accountanalyticid = table.Column<Guid>(name: "account_analytic_id", type: "uuid", nullable: true),
                    accountassetid = table.Column<Guid>(name: "account_asset_id", type: "uuid", nullable: true),
                    accountdepreciationid = table.Column<Guid>(name: "account_depreciation_id", type: "uuid", nullable: true),
                    accountdepreciationexpenseid = table.Column<Guid>(name: "account_depreciation_expense_id", type: "uuid", nullable: true),
                    journalid = table.Column<Guid>(name: "journal_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    methodnumber = table.Column<long>(name: "method_number", type: "bigint", nullable: true),
                    methodperiod = table.Column<long>(name: "method_period", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    method = table.Column<string>(type: "text", nullable: true),
                    methodtime = table.Column<string>(name: "method_time", type: "text", nullable: true),
                    type = table.Column<string>(type: "text", nullable: true),
                    datefirstdepreciation = table.Column<string>(name: "date_first_depreciation", type: "text", nullable: true),
                    methodend = table.Column<DateTime>(name: "method_end", type: "timestamp without time zone", nullable: true),
                    analyticdistribution = table.Column<string>(name: "analytic_distribution", type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    prorata = table.Column<bool>(type: "boolean", nullable: true),
                    openasset = table.Column<bool>(name: "open_asset", type: "boolean", nullable: true),
                    groupentries = table.Column<bool>(name: "group_entries", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    methodprogressfactor = table.Column<double>(name: "method_progress_factor", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_asset_category_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_asset_category_account_analytic_id_fkey",
                        column: x => x.accountanalyticid,
                        principalTable: "account_analytic_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_asset_category_account_asset_id_fkey",
                        column: x => x.accountassetid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "account_asset_category_account_depreciation_expense_id_fkey",
                        column: x => x.accountdepreciationexpenseid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "account_asset_category_account_depreciation_id_fkey",
                        column: x => x.accountdepreciationid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "account_asset_depreciation_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    assetid = table.Column<Guid>(name: "asset_id", type: "uuid", nullable: true),
                    moveid = table.Column<Guid>(name: "move_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    depreciationdate = table.Column<DateTime>(name: "depreciation_date", type: "timestamp without time zone", nullable: true),
                    amount = table.Column<decimal>(type: "numeric", nullable: true),
                    remainingvalue = table.Column<decimal>(name: "remaining_value", type: "numeric", nullable: true),
                    depreciatedvalue = table.Column<decimal>(name: "depreciated_value", type: "numeric", nullable: true),
                    movecheck = table.Column<bool>(name: "move_check", type: "boolean", nullable: true),
                    movepostedcheck = table.Column<bool>(name: "move_posted_check", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_asset_depreciation_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_asset_depreciation_line_asset_id_fkey",
                        column: x => x.assetid,
                        principalTable: "account_asset_asset",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_automatic_entry_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    destinationaccountid = table.Column<Guid>(name: "destination_account_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    action = table.Column<string>(type: "text", nullable: true),
                    accounttype = table.Column<string>(name: "account_type", type: "text", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    totalamount = table.Column<decimal>(name: "total_amount", type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    percentage = table.Column<double>(type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_automatic_entry_wizard_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_automatic_entry_wizard_destination_account_id_fkey",
                        column: x => x.destinationaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "account_automatic_entry_wizard_account_move_line_rel",
                columns: table => new
                {
                    accountautomaticentrywizardid = table.Column<Guid>(name: "account_automatic_entry_wizard_id", type: "uuid", nullable: false),
                    accountmovelineid = table.Column<Guid>(name: "account_move_line_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_automatic_entry_wizard_account_move_line_rel_pkey", x => new { x.accountautomaticentrywizardid, x.accountmovelineid });
                    table.ForeignKey(
                        name: "account_automatic_entry_wizar_account_automatic_entry_wiza_fkey",
                        column: x => x.accountautomaticentrywizardid,
                        principalTable: "account_automatic_entry_wizard",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_balance_report",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    targetmove = table.Column<string>(name: "target_move", type: "text", nullable: true),
                    displayaccount = table.Column<string>(name: "display_account", type: "text", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    dateto = table.Column<DateTime>(name: "date_to", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_balance_report_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_trial_balance_analytic_rel",
                columns: table => new
                {
                    accountbalancereportid = table.Column<Guid>(name: "account_balance_report_id", type: "uuid", nullable: false),
                    accountanalyticaccountid = table.Column<Guid>(name: "account_analytic_account_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_trial_balance_analytic_rel_pkey", x => new { x.accountbalancereportid, x.accountanalyticaccountid });
                    table.ForeignKey(
                        name: "account_trial_balance_analytic_account_analytic_account_id_fkey",
                        column: x => x.accountanalyticaccountid,
                        principalTable: "account_analytic_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "account_trial_balance_analytic_r_account_balance_report_id_fkey",
                        column: x => x.accountbalancereportid,
                        principalTable: "account_balance_report",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_balance_report_journal_rel",
                columns: table => new
                {
                    accountid = table.Column<Guid>(name: "account_id", type: "uuid", nullable: false),
                    journalid = table.Column<Guid>(name: "journal_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_balance_report_journal_rel_pkey", x => new { x.accountid, x.journalid });
                    table.ForeignKey(
                        name: "account_balance_report_journal_rel_account_id_fkey",
                        column: x => x.accountid,
                        principalTable: "account_balance_report",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_balance_report_res_partner_rel",
                columns: table => new
                {
                    accountbalancereportid = table.Column<Guid>(name: "account_balance_report_id", type: "uuid", nullable: false),
                    respartnerid = table.Column<Guid>(name: "res_partner_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_balance_report_res_partner_rel_pkey", x => new { x.accountbalancereportid, x.respartnerid });
                    table.ForeignKey(
                        name: "account_balance_report_res_partn_account_balance_report_id_fkey",
                        column: x => x.accountbalancereportid,
                        principalTable: "account_balance_report",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_bank_statement",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    journalid = table.Column<Guid>(name: "journal_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    reference = table.Column<string>(type: "text", nullable: true),
                    firstlineindex = table.Column<string>(name: "first_line_index", type: "text", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    balancestart = table.Column<decimal>(name: "balance_start", type: "numeric", nullable: true),
                    balanceend = table.Column<decimal>(name: "balance_end", type: "numeric", nullable: true),
                    balanceendreal = table.Column<decimal>(name: "balance_end_real", type: "numeric", nullable: true),
                    iscomplete = table.Column<bool>(name: "is_complete", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_bank_statement_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_bank_statement_import",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_bank_statement_import_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_bank_statement_import_ir_attachment_rel",
                columns: table => new
                {
                    accountbankstatementimportid = table.Column<Guid>(name: "account_bank_statement_import_id", type: "uuid", nullable: false),
                    irattachmentid = table.Column<Guid>(name: "ir_attachment_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_bank_statement_import_ir_attachment_rel_pkey", x => new { x.accountbankstatementimportid, x.irattachmentid });
                    table.ForeignKey(
                        name: "account_bank_statement_import_account_bank_statement_impor_fkey",
                        column: x => x.accountbankstatementimportid,
                        principalTable: "account_bank_statement_import",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_bank_statement_import_journal_creation",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    journalid = table.Column<Guid>(name: "journal_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_bank_statement_import_journal_creation_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_bank_statement_ir_attachment_rel",
                columns: table => new
                {
                    accountbankstatementid = table.Column<Guid>(name: "account_bank_statement_id", type: "uuid", nullable: false),
                    irattachmentid = table.Column<Guid>(name: "ir_attachment_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_bank_statement_ir_attachment_rel_pkey", x => new { x.accountbankstatementid, x.irattachmentid });
                    table.ForeignKey(
                        name: "account_bank_statement_ir_attach_account_bank_statement_id_fkey",
                        column: x => x.accountbankstatementid,
                        principalTable: "account_bank_statement",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_bank_statement_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    moveid = table.Column<Guid>(name: "move_id", type: "uuid", nullable: true),
                    statementid = table.Column<Guid>(name: "statement_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    foreigncurrencyid = table.Column<long>(name: "foreign_currency_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    accountnumber = table.Column<string>(name: "account_number", type: "text", nullable: true),
                    partnername = table.Column<string>(name: "partner_name", type: "text", nullable: true),
                    transactiontype = table.Column<string>(name: "transaction_type", type: "text", nullable: true),
                    paymentref = table.Column<string>(name: "payment_ref", type: "text", nullable: true),
                    internalindex = table.Column<string>(name: "internal_index", type: "text", nullable: true),
                    amount = table.Column<decimal>(type: "numeric", nullable: true),
                    amountcurrency = table.Column<decimal>(name: "amount_currency", type: "numeric", nullable: true),
                    isreconciled = table.Column<bool>(name: "is_reconciled", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    amountresidual = table.Column<double>(name: "amount_residual", type: "double precision", nullable: true),
                    possessionid = table.Column<Guid>(name: "pos_session_id", type: "uuid", nullable: true),
                    uniqueimportid = table.Column<string>(name: "unique_import_id", type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_bank_statement_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_bank_statement_line_statement_id_fkey",
                        column: x => x.statementid,
                        principalTable: "account_bank_statement",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "account_bankbook_report",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    targetmove = table.Column<string>(name: "target_move", type: "text", nullable: true),
                    displayaccount = table.Column<string>(name: "display_account", type: "text", nullable: true),
                    sortby = table.Column<string>(type: "text", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    dateto = table.Column<DateTime>(name: "date_to", type: "timestamp without time zone", nullable: true),
                    initialbalance = table.Column<bool>(name: "initial_balance", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_bankbook_report_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_bankbook_report_account_journal_rel",
                columns: table => new
                {
                    accountbankbookreportid = table.Column<Guid>(name: "account_bankbook_report_id", type: "uuid", nullable: false),
                    accountjournalid = table.Column<Guid>(name: "account_journal_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_bankbook_report_account_journal_rel_pkey", x => new { x.accountbankbookreportid, x.accountjournalid });
                    table.ForeignKey(
                        name: "account_bankbook_report_account_account_bankbook_report_id_fkey",
                        column: x => x.accountbankbookreportid,
                        principalTable: "account_bankbook_report",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_budget_post",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_budget_post_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_budget_rel",
                columns: table => new
                {
                    budgetid = table.Column<Guid>(name: "budget_id", type: "uuid", nullable: false),
                    accountid = table.Column<Guid>(name: "account_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_budget_rel_pkey", x => new { x.budgetid, x.accountid });
                    table.ForeignKey(
                        name: "account_budget_rel_account_id_fkey",
                        column: x => x.accountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "account_budget_rel_budget_id_fkey",
                        column: x => x.budgetid,
                        principalTable: "account_budget_post",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_cash_rounding",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    strategy = table.Column<string>(type: "text", nullable: true),
                    roundingmethod = table.Column<string>(name: "rounding_method", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    rounding = table.Column<double>(type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_cash_rounding_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_cashbook_report",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    targetmove = table.Column<string>(name: "target_move", type: "text", nullable: true),
                    displayaccount = table.Column<string>(name: "display_account", type: "text", nullable: true),
                    sortby = table.Column<string>(type: "text", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    dateto = table.Column<DateTime>(name: "date_to", type: "timestamp without time zone", nullable: true),
                    initialbalance = table.Column<bool>(name: "initial_balance", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_cashbook_report_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_cashbook_report_account_journal_rel",
                columns: table => new
                {
                    accountcashbookreportid = table.Column<Guid>(name: "account_cashbook_report_id", type: "uuid", nullable: false),
                    accountjournalid = table.Column<Guid>(name: "account_journal_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_cashbook_report_account_journal_rel_pkey", x => new { x.accountcashbookreportid, x.accountjournalid });
                    table.ForeignKey(
                        name: "account_cashbook_report_account_account_cashbook_report_id_fkey",
                        column: x => x.accountcashbookreportid,
                        principalTable: "account_cashbook_report",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_chart_template",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    parentid = table.Column<Guid>(name: "parent_id", type: "uuid", nullable: true),
                    codedigits = table.Column<long>(name: "code_digits", type: "bigint", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    incomecurrencyexchangeaccountid = table.Column<Guid>(name: "income_currency_exchange_account_id", type: "uuid", nullable: true),
                    expensecurrencyexchangeaccountid = table.Column<Guid>(name: "expense_currency_exchange_account_id", type: "uuid", nullable: true),
                    countryid = table.Column<long>(name: "country_id", type: "bigint", nullable: true),
                    accountjournalsuspenseaccountid = table.Column<Guid>(name: "account_journal_suspense_account_id", type: "uuid", nullable: true),
                    accountjournalpaymentdebitaccountid = table.Column<Guid>(name: "account_journal_payment_debit_account_id", type: "uuid", nullable: true),
                    accountjournalpaymentcreditaccountid = table.Column<Guid>(name: "account_journal_payment_credit_account_id", type: "uuid", nullable: true),
                    defaultcashdifferenceincomeaccountid = table.Column<Guid>(name: "default_cash_difference_income_account_id", type: "uuid", nullable: true),
                    defaultcashdifferenceexpenseaccountid = table.Column<Guid>(name: "default_cash_difference_expense_account_id", type: "uuid", nullable: true),
                    defaultposreceivableaccountid = table.Column<Guid>(name: "default_pos_receivable_account_id", type: "uuid", nullable: true),
                    accountjournalearlypaydiscountlossaccountid = table.Column<Guid>(name: "account_journal_early_pay_discount_loss_account_id", type: "uuid", nullable: true),
                    accountjournalearlypaydiscountgainaccountid = table.Column<Guid>(name: "account_journal_early_pay_discount_gain_account_id", type: "uuid", nullable: true),
                    propertyaccountreceivableid = table.Column<Guid>(name: "property_account_receivable_id", type: "uuid", nullable: true),
                    propertyaccountpayableid = table.Column<Guid>(name: "property_account_payable_id", type: "uuid", nullable: true),
                    propertyaccountexpensecategid = table.Column<Guid>(name: "property_account_expense_categ_id", type: "uuid", nullable: true),
                    propertyaccountincomecategid = table.Column<Guid>(name: "property_account_income_categ_id", type: "uuid", nullable: true),
                    propertyaccountexpenseid = table.Column<Guid>(name: "property_account_expense_id", type: "uuid", nullable: true),
                    propertyaccountincomeid = table.Column<Guid>(name: "property_account_income_id", type: "uuid", nullable: true),
                    propertystockaccountinputcategid = table.Column<Guid>(name: "property_stock_account_input_categ_id", type: "uuid", nullable: true),
                    propertystockaccountoutputcategid = table.Column<Guid>(name: "property_stock_account_output_categ_id", type: "uuid", nullable: true),
                    propertystockvaluationaccountid = table.Column<Guid>(name: "property_stock_valuation_account_id", type: "uuid", nullable: true),
                    propertytaxpayableaccountid = table.Column<Guid>(name: "property_tax_payable_account_id", type: "uuid", nullable: true),
                    propertytaxreceivableaccountid = table.Column<Guid>(name: "property_tax_receivable_account_id", type: "uuid", nullable: true),
                    propertyadvancetaxpaymentaccountid = table.Column<Guid>(name: "property_advance_tax_payment_account_id", type: "uuid", nullable: true),
                    propertycashbasisbaseaccountid = table.Column<Guid>(name: "property_cash_basis_base_account_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    bankaccountcodeprefix = table.Column<string>(name: "bank_account_code_prefix", type: "text", nullable: true),
                    cashaccountcodeprefix = table.Column<string>(name: "cash_account_code_prefix", type: "text", nullable: true),
                    transferaccountcodeprefix = table.Column<string>(name: "transfer_account_code_prefix", type: "text", nullable: true),
                    visible = table.Column<bool>(type: "boolean", nullable: true),
                    useanglosaxon = table.Column<bool>(name: "use_anglo_saxon", type: "boolean", nullable: true),
                    usestornoaccounting = table.Column<bool>(name: "use_storno_accounting", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    spokenlanguages = table.Column<string>(name: "spoken_languages", type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_chart_template_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_chart_template_account_journal_early_pay_discount__fkey",
                        column: x => x.accountjournalearlypaydiscountlossaccountid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_account_journal_early_pay_discount_fkey1",
                        column: x => x.accountjournalearlypaydiscountgainaccountid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_account_journal_payment_credit_acco_fkey",
                        column: x => x.accountjournalpaymentcreditaccountid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_account_journal_payment_debit_accou_fkey",
                        column: x => x.accountjournalpaymentdebitaccountid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_account_journal_suspense_account_id_fkey",
                        column: x => x.accountjournalsuspenseaccountid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_default_cash_difference_expense_acc_fkey",
                        column: x => x.defaultcashdifferenceexpenseaccountid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_default_cash_difference_income_acco_fkey",
                        column: x => x.defaultcashdifferenceincomeaccountid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_default_pos_receivable_account_id_fkey",
                        column: x => x.defaultposreceivableaccountid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_expense_currency_exchange_account_i_fkey",
                        column: x => x.expensecurrencyexchangeaccountid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_income_currency_exchange_account_id_fkey",
                        column: x => x.incomecurrencyexchangeaccountid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "account_chart_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_property_account_expense_categ_id_fkey",
                        column: x => x.propertyaccountexpensecategid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_property_account_expense_id_fkey",
                        column: x => x.propertyaccountexpenseid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_property_account_income_categ_id_fkey",
                        column: x => x.propertyaccountincomecategid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_property_account_income_id_fkey",
                        column: x => x.propertyaccountincomeid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_property_account_payable_id_fkey",
                        column: x => x.propertyaccountpayableid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_property_account_receivable_id_fkey",
                        column: x => x.propertyaccountreceivableid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_property_advance_tax_payment_accoun_fkey",
                        column: x => x.propertyadvancetaxpaymentaccountid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_property_cash_basis_base_account_id_fkey",
                        column: x => x.propertycashbasisbaseaccountid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_property_stock_account_input_categ__fkey",
                        column: x => x.propertystockaccountinputcategid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_property_stock_account_output_categ_fkey",
                        column: x => x.propertystockaccountoutputcategid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_property_stock_valuation_account_id_fkey",
                        column: x => x.propertystockvaluationaccountid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_property_tax_payable_account_id_fkey",
                        column: x => x.propertytaxpayableaccountid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_chart_template_property_tax_receivable_account_id_fkey",
                        column: x => x.propertytaxreceivableaccountid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "account_common_account_report",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    targetmove = table.Column<string>(name: "target_move", type: "text", nullable: true),
                    displayaccount = table.Column<string>(name: "display_account", type: "text", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    dateto = table.Column<DateTime>(name: "date_to", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_common_account_report_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_common_account_report_account_journal_rel",
                columns: table => new
                {
                    accountcommonaccountreportid = table.Column<Guid>(name: "account_common_account_report_id", type: "uuid", nullable: false),
                    accountjournalid = table.Column<Guid>(name: "account_journal_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_common_account_report_account_journal_rel_pkey", x => new { x.accountcommonaccountreportid, x.accountjournalid });
                    table.ForeignKey(
                        name: "account_common_account_report_account_common_account_repor_fkey",
                        column: x => x.accountcommonaccountreportid,
                        principalTable: "account_common_account_report",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_common_account_report_res_partner_rel",
                columns: table => new
                {
                    accountcommonaccountreportid = table.Column<Guid>(name: "account_common_account_report_id", type: "uuid", nullable: false),
                    respartnerid = table.Column<Guid>(name: "res_partner_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_common_account_report_res_partner_rel_pkey", x => new { x.accountcommonaccountreportid, x.respartnerid });
                    table.ForeignKey(
                        name: "account_common_account_repor_account_common_account_repor_fkey1",
                        column: x => x.accountcommonaccountreportid,
                        principalTable: "account_common_account_report",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_common_journal_report",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    targetmove = table.Column<string>(name: "target_move", type: "text", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    dateto = table.Column<DateTime>(name: "date_to", type: "timestamp without time zone", nullable: true),
                    amountcurrency = table.Column<bool>(name: "amount_currency", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_common_journal_report_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_common_journal_report_account_journal_rel",
                columns: table => new
                {
                    accountcommonjournalreportid = table.Column<Guid>(name: "account_common_journal_report_id", type: "uuid", nullable: false),
                    accountjournalid = table.Column<Guid>(name: "account_journal_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_common_journal_report_account_journal_rel_pkey", x => new { x.accountcommonjournalreportid, x.accountjournalid });
                    table.ForeignKey(
                        name: "account_common_journal_report_account_common_journal_repor_fkey",
                        column: x => x.accountcommonjournalreportid,
                        principalTable: "account_common_journal_report",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_common_partner_report",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    targetmove = table.Column<string>(name: "target_move", type: "text", nullable: true),
                    resultselection = table.Column<string>(name: "result_selection", type: "text", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    dateto = table.Column<DateTime>(name: "date_to", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_common_partner_report_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_common_partner_report_account_journal_rel",
                columns: table => new
                {
                    accountcommonpartnerreportid = table.Column<Guid>(name: "account_common_partner_report_id", type: "uuid", nullable: false),
                    accountjournalid = table.Column<Guid>(name: "account_journal_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_common_partner_report_account_journal_rel_pkey", x => new { x.accountcommonpartnerreportid, x.accountjournalid });
                    table.ForeignKey(
                        name: "account_common_partner_report_account_common_partner_repor_fkey",
                        column: x => x.accountcommonpartnerreportid,
                        principalTable: "account_common_partner_report",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_common_partner_report_res_partner_rel",
                columns: table => new
                {
                    accountcommonpartnerreportid = table.Column<Guid>(name: "account_common_partner_report_id", type: "uuid", nullable: false),
                    respartnerid = table.Column<Guid>(name: "res_partner_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_common_partner_report_res_partner_rel_pkey", x => new { x.accountcommonpartnerreportid, x.respartnerid });
                    table.ForeignKey(
                        name: "account_common_partner_repor_account_common_partner_repor_fkey1",
                        column: x => x.accountcommonpartnerreportid,
                        principalTable: "account_common_partner_report",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_common_report",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    targetmove = table.Column<string>(name: "target_move", type: "text", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    dateto = table.Column<DateTime>(name: "date_to", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_common_report_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_common_report_account_journal_rel",
                columns: table => new
                {
                    accountcommonreportid = table.Column<Guid>(name: "account_common_report_id", type: "uuid", nullable: false),
                    accountjournalid = table.Column<Guid>(name: "account_journal_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_common_report_account_journal_rel_pkey", x => new { x.accountcommonreportid, x.accountjournalid });
                    table.ForeignKey(
                        name: "account_common_report_account_jou_account_common_report_id_fkey",
                        column: x => x.accountcommonreportid,
                        principalTable: "account_common_report",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_daybook_report",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    targetmove = table.Column<string>(name: "target_move", type: "text", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    dateto = table.Column<DateTime>(name: "date_to", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_daybook_report_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_daybook_report_account_journal_rel",
                columns: table => new
                {
                    accountdaybookreportid = table.Column<Guid>(name: "account_daybook_report_id", type: "uuid", nullable: false),
                    accountjournalid = table.Column<Guid>(name: "account_journal_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_daybook_report_account_journal_rel_pkey", x => new { x.accountdaybookreportid, x.accountjournalid });
                    table.ForeignKey(
                        name: "account_daybook_report_account_j_account_daybook_report_id_fkey",
                        column: x => x.accountdaybookreportid,
                        principalTable: "account_daybook_report",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_edi_document",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    moveid = table.Column<Guid>(name: "move_id", type: "uuid", nullable: true),
                    ediformatid = table.Column<long>(name: "edi_format_id", type: "bigint", nullable: true),
                    attachmentid = table.Column<Guid>(name: "attachment_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    blockinglevel = table.Column<string>(name: "blocking_level", type: "text", nullable: true),
                    error = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_edi_document_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_edi_format",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_edi_format_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_edi_format_account_journal_rel",
                columns: table => new
                {
                    accountjournalid = table.Column<Guid>(name: "account_journal_id", type: "uuid", nullable: false),
                    accountediformatid = table.Column<long>(name: "account_edi_format_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_edi_format_account_journal_rel_pkey", x => new { x.accountjournalid, x.accountediformatid });
                    table.ForeignKey(
                        name: "account_edi_format_account_journal_r_account_edi_format_id_fkey",
                        column: x => x.accountediformatid,
                        principalTable: "account_edi_format",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_financial_report",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    parentid = table.Column<Guid>(name: "parent_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: true),
                    level = table.Column<long>(type: "bigint", nullable: true),
                    accountreportid = table.Column<Guid>(name: "account_report_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    type = table.Column<string>(type: "text", nullable: true),
                    reportdomain = table.Column<string>(name: "report_domain", type: "text", nullable: true),
                    sign = table.Column<string>(type: "text", nullable: true),
                    displaydetail = table.Column<string>(name: "display_detail", type: "text", nullable: true),
                    styleoverwrite = table.Column<string>(name: "style_overwrite", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_financial_report_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_financial_report_account_report_id_fkey",
                        column: x => x.accountreportid,
                        principalTable: "account_financial_report",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_financial_report_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "account_financial_report",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "account_financial_year_op",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_financial_year_op_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_fiscal_position",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    countryid = table.Column<long>(name: "country_id", type: "bigint", nullable: true),
                    countrygroupid = table.Column<long>(name: "country_group_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    zipfrom = table.Column<string>(name: "zip_from", type: "text", nullable: true),
                    zipto = table.Column<string>(name: "zip_to", type: "text", nullable: true),
                    foreignvat = table.Column<string>(name: "foreign_vat", type: "text", nullable: true),
                    note = table.Column<string>(type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    autoapply = table.Column<bool>(name: "auto_apply", type: "boolean", nullable: true),
                    vatrequired = table.Column<bool>(name: "vat_required", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_fiscal_position_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_fiscal_position_account",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    positionid = table.Column<Guid>(name: "position_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    accountsrcid = table.Column<Guid>(name: "account_src_id", type: "uuid", nullable: true),
                    accountdestid = table.Column<Guid>(name: "account_dest_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_fiscal_position_account_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_fiscal_position_account_account_dest_id_fkey",
                        column: x => x.accountdestid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "account_fiscal_position_account_account_src_id_fkey",
                        column: x => x.accountsrcid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "account_fiscal_position_account_position_id_fkey",
                        column: x => x.positionid,
                        principalTable: "account_fiscal_position",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_fiscal_position_account_template",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    positionid = table.Column<Guid>(name: "position_id", type: "uuid", nullable: true),
                    accountsrcid = table.Column<Guid>(name: "account_src_id", type: "uuid", nullable: true),
                    accountdestid = table.Column<Guid>(name: "account_dest_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_fiscal_position_account_template_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_fiscal_position_account_template_account_dest_id_fkey",
                        column: x => x.accountdestid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "account_fiscal_position_account_template_account_src_id_fkey",
                        column: x => x.accountsrcid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "account_fiscal_position_pos_config_rel",
                columns: table => new
                {
                    posconfigid = table.Column<Guid>(name: "pos_config_id", type: "uuid", nullable: false),
                    accountfiscalpositionid = table.Column<Guid>(name: "account_fiscal_position_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_fiscal_position_pos_config_rel_pkey", x => new { x.posconfigid, x.accountfiscalpositionid });
                    table.ForeignKey(
                        name: "account_fiscal_position_pos_con_account_fiscal_position_id_fkey",
                        column: x => x.accountfiscalpositionid,
                        principalTable: "account_fiscal_position",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_fiscal_position_res_config_settings_rel",
                columns: table => new
                {
                    resconfigsettingsid = table.Column<Guid>(name: "res_config_settings_id", type: "uuid", nullable: false),
                    accountfiscalpositionid = table.Column<Guid>(name: "account_fiscal_position_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_fiscal_position_res_config_settings_rel_pkey", x => new { x.resconfigsettingsid, x.accountfiscalpositionid });
                    table.ForeignKey(
                        name: "account_fiscal_position_res_con_account_fiscal_position_id_fkey",
                        column: x => x.accountfiscalpositionid,
                        principalTable: "account_fiscal_position",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_fiscal_position_res_country_state_rel",
                columns: table => new
                {
                    accountfiscalpositionid = table.Column<Guid>(name: "account_fiscal_position_id", type: "uuid", nullable: false),
                    rescountrystateid = table.Column<long>(name: "res_country_state_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_fiscal_position_res_country_state_rel_pkey", x => new { x.accountfiscalpositionid, x.rescountrystateid });
                    table.ForeignKey(
                        name: "account_fiscal_position_res_cou_account_fiscal_position_id_fkey",
                        column: x => x.accountfiscalpositionid,
                        principalTable: "account_fiscal_position",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_fiscal_position_tax",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    positionid = table.Column<Guid>(name: "position_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    taxsrcid = table.Column<Guid>(name: "tax_src_id", type: "uuid", nullable: true),
                    taxdestid = table.Column<Guid>(name: "tax_dest_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_fiscal_position_tax_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_fiscal_position_tax_position_id_fkey",
                        column: x => x.positionid,
                        principalTable: "account_fiscal_position",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_fiscal_position_tax_template",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    positionid = table.Column<Guid>(name: "position_id", type: "uuid", nullable: true),
                    taxsrcid = table.Column<Guid>(name: "tax_src_id", type: "uuid", nullable: true),
                    taxdestid = table.Column<Guid>(name: "tax_dest_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_fiscal_position_tax_template_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_fiscal_position_template",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    charttemplateid = table.Column<Guid>(name: "chart_template_id", type: "uuid", nullable: true),
                    countryid = table.Column<long>(name: "country_id", type: "bigint", nullable: true),
                    countrygroupid = table.Column<long>(name: "country_group_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    zipfrom = table.Column<string>(name: "zip_from", type: "text", nullable: true),
                    zipto = table.Column<string>(name: "zip_to", type: "text", nullable: true),
                    note = table.Column<string>(type: "jsonb", nullable: true),
                    autoapply = table.Column<bool>(name: "auto_apply", type: "boolean", nullable: true),
                    vatrequired = table.Column<bool>(name: "vat_required", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_fiscal_position_template_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_fiscal_position_template_chart_template_id_fkey",
                        column: x => x.charttemplateid,
                        principalTable: "account_chart_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "account_fiscal_position_template_res_country_state_rel",
                columns: table => new
                {
                    accountfiscalpositiontemplateid = table.Column<Guid>(name: "account_fiscal_position_template_id", type: "uuid", nullable: false),
                    rescountrystateid = table.Column<long>(name: "res_country_state_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_fiscal_position_template_res_country_state_rel_pkey", x => new { x.accountfiscalpositiontemplateid, x.rescountrystateid });
                    table.ForeignKey(
                        name: "account_fiscal_position_templ_account_fiscal_position_temp_fkey",
                        column: x => x.accountfiscalpositiontemplateid,
                        principalTable: "account_fiscal_position_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_fiscal_year",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    dateto = table.Column<DateTime>(name: "date_to", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_fiscal_year_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_full_reconcile",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    exchangemoveid = table.Column<Guid>(name: "exchange_move_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_full_reconcile_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_group",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    parentid = table.Column<Guid>(name: "parent_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    parentpath = table.Column<string>(name: "parent_path", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    codeprefixstart = table.Column<string>(name: "code_prefix_start", type: "text", nullable: true),
                    codeprefixend = table.Column<string>(name: "code_prefix_end", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_group_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_group_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "account_group",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_group_template",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    parentid = table.Column<Guid>(name: "parent_id", type: "uuid", nullable: true),
                    charttemplateid = table.Column<Guid>(name: "chart_template_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    codeprefixstart = table.Column<string>(name: "code_prefix_start", type: "text", nullable: true),
                    codeprefixend = table.Column<string>(name: "code_prefix_end", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_group_template_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_group_template_chart_template_id_fkey",
                        column: x => x.charttemplateid,
                        principalTable: "account_chart_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "account_group_template_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "account_group_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_incoterms",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_incoterms_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_invoice_send",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    composerid = table.Column<Guid>(name: "composer_id", type: "uuid", nullable: true),
                    templateid = table.Column<Guid>(name: "template_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    isemail = table.Column<bool>(name: "is_email", type: "boolean", nullable: true),
                    isprint = table.Column<bool>(name: "is_print", type: "boolean", nullable: true),
                    printed = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    snailmailisletter = table.Column<bool>(name: "snailmail_is_letter", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_invoice_send_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_invoice_transaction_rel",
                columns: table => new
                {
                    invoiceid = table.Column<Guid>(name: "invoice_id", type: "uuid", nullable: false),
                    transactionid = table.Column<Guid>(name: "transaction_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_invoice_transaction_rel_pkey", x => new { x.invoiceid, x.transactionid });
                });

            migrationBuilder.CreateTable(
                name: "account_journal",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    defaultaccountid = table.Column<Guid>(name: "default_account_id", type: "uuid", nullable: true),
                    suspenseaccountid = table.Column<Guid>(name: "suspense_account_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    profitaccountid = table.Column<Guid>(name: "profit_account_id", type: "uuid", nullable: true),
                    lossaccountid = table.Column<Guid>(name: "loss_account_id", type: "uuid", nullable: true),
                    bankaccountid = table.Column<Guid>(name: "bank_account_id", type: "uuid", nullable: true),
                    saleactivitytypeid = table.Column<long>(name: "sale_activity_type_id", type: "bigint", nullable: true),
                    saleactivityuserid = table.Column<Guid>(name: "sale_activity_user_id", type: "uuid", nullable: true),
                    aliasid = table.Column<Guid>(name: "alias_id", type: "uuid", nullable: true),
                    securesequenceid = table.Column<Guid>(name: "secure_sequence_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    type = table.Column<string>(type: "text", nullable: true),
                    invoicereferencetype = table.Column<string>(name: "invoice_reference_type", type: "text", nullable: true),
                    invoicereferencemodel = table.Column<string>(name: "invoice_reference_model", type: "text", nullable: true),
                    bankstatementssource = table.Column<string>(name: "bank_statements_source", type: "text", nullable: true),
                    sequenceoverrideregex = table.Column<string>(name: "sequence_override_regex", type: "text", nullable: true),
                    saleactivitynote = table.Column<string>(name: "sale_activity_note", type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    restrictmodehashtable = table.Column<bool>(name: "restrict_mode_hash_table", type: "boolean", nullable: true),
                    refundsequence = table.Column<bool>(name: "refund_sequence", type: "boolean", nullable: true),
                    paymentsequence = table.Column<bool>(name: "payment_sequence", type: "boolean", nullable: true),
                    showondashboard = table.Column<bool>(name: "show_on_dashboard", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_journal_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_journal_default_account_id_fkey",
                        column: x => x.defaultaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "account_journal_loss_account_id_fkey",
                        column: x => x.lossaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_journal_profit_account_id_fkey",
                        column: x => x.profitaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_journal_suspense_account_id_fkey",
                        column: x => x.suspenseaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "journal_account_control_rel",
                columns: table => new
                {
                    journalid = table.Column<Guid>(name: "journal_id", type: "uuid", nullable: false),
                    accountid = table.Column<Guid>(name: "account_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("journal_account_control_rel_pkey", x => new { x.journalid, x.accountid });
                    table.ForeignKey(
                        name: "journal_account_control_rel_account_id_fkey",
                        column: x => x.accountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "journal_account_control_rel_journal_id_fkey",
                        column: x => x.journalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_journal_account_journal_group_rel",
                columns: table => new
                {
                    accountjournalgroupid = table.Column<Guid>(name: "account_journal_group_id", type: "uuid", nullable: false),
                    accountjournalid = table.Column<Guid>(name: "account_journal_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_journal_account_journal_group_rel_pkey", x => new { x.accountjournalgroupid, x.accountjournalid });
                    table.ForeignKey(
                        name: "account_journal_account_journal_group_r_account_journal_id_fkey",
                        column: x => x.accountjournalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_journal_account_print_journal_rel",
                columns: table => new
                {
                    accountprintjournalid = table.Column<Guid>(name: "account_print_journal_id", type: "uuid", nullable: false),
                    accountjournalid = table.Column<Guid>(name: "account_journal_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_journal_account_print_journal_rel_pkey", x => new { x.accountprintjournalid, x.accountjournalid });
                    table.ForeignKey(
                        name: "account_journal_account_print_journal_r_account_journal_id_fkey",
                        column: x => x.accountjournalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_journal_account_reconcile_model_rel",
                columns: table => new
                {
                    accountreconcilemodelid = table.Column<Guid>(name: "account_reconcile_model_id", type: "uuid", nullable: false),
                    accountjournalid = table.Column<Guid>(name: "account_journal_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_journal_account_reconcile_model_rel_pkey", x => new { x.accountreconcilemodelid, x.accountjournalid });
                    table.ForeignKey(
                        name: "account_journal_account_reconcile_model_account_journal_id_fkey",
                        column: x => x.accountjournalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_journal_account_reconcile_model_template_rel",
                columns: table => new
                {
                    accountreconcilemodeltemplateid = table.Column<Guid>(name: "account_reconcile_model_template_id", type: "uuid", nullable: false),
                    accountjournalid = table.Column<Guid>(name: "account_journal_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_journal_account_reconcile_model_template_rel_pkey", x => new { x.accountreconcilemodeltemplateid, x.accountjournalid });
                    table.ForeignKey(
                        name: "account_journal_account_reconcile_mode_account_journal_id_fkey1",
                        column: x => x.accountjournalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_journal_account_report_partner_ledger_rel",
                columns: table => new
                {
                    accountreportpartnerledgerid = table.Column<Guid>(name: "account_report_partner_ledger_id", type: "uuid", nullable: false),
                    accountjournalid = table.Column<Guid>(name: "account_journal_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_journal_account_report_partner_ledger_rel_pkey", x => new { x.accountreportpartnerledgerid, x.accountjournalid });
                    table.ForeignKey(
                        name: "account_journal_account_report_partner__account_journal_id_fkey",
                        column: x => x.accountjournalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_journal_account_tax_report_wizard_rel",
                columns: table => new
                {
                    accounttaxreportwizardid = table.Column<Guid>(name: "account_tax_report_wizard_id", type: "uuid", nullable: false),
                    accountjournalid = table.Column<Guid>(name: "account_journal_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_journal_account_tax_report_wizard_rel_pkey", x => new { x.accounttaxreportwizardid, x.accountjournalid });
                    table.ForeignKey(
                        name: "account_journal_account_tax_report_wiza_account_journal_id_fkey",
                        column: x => x.accountjournalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_journal_accounting_report_rel",
                columns: table => new
                {
                    accountingreportid = table.Column<Guid>(name: "accounting_report_id", type: "uuid", nullable: false),
                    accountjournalid = table.Column<Guid>(name: "account_journal_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_journal_accounting_report_rel_pkey", x => new { x.accountingreportid, x.accountjournalid });
                    table.ForeignKey(
                        name: "account_journal_accounting_report_rel_account_journal_id_fkey",
                        column: x => x.accountjournalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_journal_group",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_journal_group_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_move",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequencenumber = table.Column<long>(name: "sequence_number", type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    journalid = table.Column<Guid>(name: "journal_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    paymentid = table.Column<Guid>(name: "payment_id", type: "uuid", nullable: true),
                    statementlineid = table.Column<Guid>(name: "statement_line_id", type: "uuid", nullable: true),
                    taxcashbasisrecid = table.Column<Guid>(name: "tax_cash_basis_rec_id", type: "uuid", nullable: true),
                    taxcashbasisoriginmoveid = table.Column<Guid>(name: "tax_cash_basis_origin_move_id", type: "uuid", nullable: true),
                    autopostoriginid = table.Column<Guid>(name: "auto_post_origin_id", type: "uuid", nullable: true),
                    securesequencenumber = table.Column<long>(name: "secure_sequence_number", type: "bigint", nullable: true),
                    invoicepaymenttermid = table.Column<Guid>(name: "invoice_payment_term_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    commercialpartnerid = table.Column<Guid>(name: "commercial_partner_id", type: "uuid", nullable: true),
                    partnershippingid = table.Column<Guid>(name: "partner_shipping_id", type: "uuid", nullable: true),
                    partnerbankid = table.Column<Guid>(name: "partner_bank_id", type: "uuid", nullable: true),
                    fiscalpositionid = table.Column<Guid>(name: "fiscal_position_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    reversedentryid = table.Column<Guid>(name: "reversed_entry_id", type: "uuid", nullable: true),
                    invoiceuserid = table.Column<Guid>(name: "invoice_user_id", type: "uuid", nullable: true),
                    invoiceincotermid = table.Column<Guid>(name: "invoice_incoterm_id", type: "uuid", nullable: true),
                    invoicecashroundingid = table.Column<Guid>(name: "invoice_cash_rounding_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    sequenceprefix = table.Column<string>(name: "sequence_prefix", type: "text", nullable: true),
                    accesstoken = table.Column<string>(name: "access_token", type: "text", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    @ref = table.Column<string>(name: "ref", type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    movetype = table.Column<string>(name: "move_type", type: "text", nullable: true),
                    autopost = table.Column<string>(name: "auto_post", type: "text", nullable: true),
                    inalterablehash = table.Column<string>(name: "inalterable_hash", type: "text", nullable: true),
                    paymentreference = table.Column<string>(name: "payment_reference", type: "text", nullable: true),
                    qrcodemethod = table.Column<string>(name: "qr_code_method", type: "text", nullable: true),
                    paymentstate = table.Column<string>(name: "payment_state", type: "text", nullable: true),
                    invoicesourceemail = table.Column<string>(name: "invoice_source_email", type: "text", nullable: true),
                    invoicepartnerdisplayname = table.Column<string>(name: "invoice_partner_display_name", type: "text", nullable: true),
                    invoiceorigin = table.Column<string>(name: "invoice_origin", type: "text", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    autopostuntil = table.Column<DateTime>(name: "auto_post_until", type: "timestamp without time zone", nullable: true),
                    invoicedate = table.Column<DateTime>(name: "invoice_date", type: "timestamp without time zone", nullable: true),
                    invoicedatedue = table.Column<DateTime>(name: "invoice_date_due", type: "timestamp without time zone", nullable: true),
                    narration = table.Column<string>(type: "text", nullable: true),
                    amountuntaxed = table.Column<decimal>(name: "amount_untaxed", type: "numeric", nullable: true),
                    amounttax = table.Column<decimal>(name: "amount_tax", type: "numeric", nullable: true),
                    amounttotal = table.Column<decimal>(name: "amount_total", type: "numeric", nullable: true),
                    amountresidual = table.Column<decimal>(name: "amount_residual", type: "numeric", nullable: true),
                    amountuntaxedsigned = table.Column<decimal>(name: "amount_untaxed_signed", type: "numeric", nullable: true),
                    amounttaxsigned = table.Column<decimal>(name: "amount_tax_signed", type: "numeric", nullable: true),
                    amounttotalsigned = table.Column<decimal>(name: "amount_total_signed", type: "numeric", nullable: true),
                    amounttotalincurrencysigned = table.Column<decimal>(name: "amount_total_in_currency_signed", type: "numeric", nullable: true),
                    amountresidualsigned = table.Column<decimal>(name: "amount_residual_signed", type: "numeric", nullable: true),
                    quickedittotalamount = table.Column<decimal>(name: "quick_edit_total_amount", type: "numeric", nullable: true),
                    isstorno = table.Column<bool>(name: "is_storno", type: "boolean", nullable: true),
                    alwaystaxexigible = table.Column<bool>(name: "always_tax_exigible", type: "boolean", nullable: true),
                    tocheck = table.Column<bool>(name: "to_check", type: "boolean", nullable: true),
                    postedbefore = table.Column<bool>(name: "posted_before", type: "boolean", nullable: true),
                    ismovesent = table.Column<bool>(name: "is_move_sent", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    edistate = table.Column<string>(name: "edi_state", type: "text", nullable: true),
                    campaignid = table.Column<Guid>(name: "campaign_id", type: "uuid", nullable: true),
                    sourceid = table.Column<Guid>(name: "source_id", type: "uuid", nullable: true),
                    mediumid = table.Column<Guid>(name: "medium_id", type: "uuid", nullable: true),
                    teamid = table.Column<Guid>(name: "team_id", type: "uuid", nullable: true),
                    stockmoveid = table.Column<Guid>(name: "stock_move_id", type: "uuid", nullable: true),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_move_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_move_auto_post_origin_id_fkey",
                        column: x => x.autopostoriginid,
                        principalTable: "account_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_move_fiscal_position_id_fkey",
                        column: x => x.fiscalpositionid,
                        principalTable: "account_fiscal_position",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "account_move_invoice_cash_rounding_id_fkey",
                        column: x => x.invoicecashroundingid,
                        principalTable: "account_cash_rounding",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_move_invoice_incoterm_id_fkey",
                        column: x => x.invoiceincotermid,
                        principalTable: "account_incoterms",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_move_journal_id_fkey",
                        column: x => x.journalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "account_move_reversed_entry_id_fkey",
                        column: x => x.reversedentryid,
                        principalTable: "account_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_move_statement_line_id_fkey",
                        column: x => x.statementlineid,
                        principalTable: "account_bank_statement_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_move_tax_cash_basis_origin_move_id_fkey",
                        column: x => x.taxcashbasisoriginmoveid,
                        principalTable: "account_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "account_move_account_invoice_send_rel",
                columns: table => new
                {
                    accountinvoicesendid = table.Column<Guid>(name: "account_invoice_send_id", type: "uuid", nullable: false),
                    accountmoveid = table.Column<Guid>(name: "account_move_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_move_account_invoice_send_rel_pkey", x => new { x.accountinvoicesendid, x.accountmoveid });
                    table.ForeignKey(
                        name: "account_move_account_invoice_send__account_invoice_send_id_fkey",
                        column: x => x.accountinvoicesendid,
                        principalTable: "account_invoice_send",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "account_move_account_invoice_send_rel_account_move_id_fkey",
                        column: x => x.accountmoveid,
                        principalTable: "account_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_move_account_resequence_wizard_rel",
                columns: table => new
                {
                    accountresequencewizardid = table.Column<Guid>(name: "account_resequence_wizard_id", type: "uuid", nullable: false),
                    accountmoveid = table.Column<Guid>(name: "account_move_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_move_account_resequence_wizard_rel_pkey", x => new { x.accountresequencewizardid, x.accountmoveid });
                    table.ForeignKey(
                        name: "account_move_account_resequence_wizard_rel_account_move_id_fkey",
                        column: x => x.accountmoveid,
                        principalTable: "account_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_move_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    moveid = table.Column<Guid>(name: "move_id", type: "uuid", nullable: true),
                    journalid = table.Column<Guid>(name: "journal_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    companycurrencyid = table.Column<long>(name: "company_currency_id", type: "bigint", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    accountid = table.Column<Guid>(name: "account_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    reconcilemodelid = table.Column<Guid>(name: "reconcile_model_id", type: "uuid", nullable: true),
                    paymentid = table.Column<Guid>(name: "payment_id", type: "uuid", nullable: true),
                    statementlineid = table.Column<Guid>(name: "statement_line_id", type: "uuid", nullable: true),
                    statementid = table.Column<Guid>(name: "statement_id", type: "uuid", nullable: true),
                    grouptaxid = table.Column<Guid>(name: "group_tax_id", type: "uuid", nullable: true),
                    taxlineid = table.Column<Guid>(name: "tax_line_id", type: "uuid", nullable: true),
                    taxgroupid = table.Column<Guid>(name: "tax_group_id", type: "uuid", nullable: true),
                    taxrepartitionlineid = table.Column<Guid>(name: "tax_repartition_line_id", type: "uuid", nullable: true),
                    fullreconcileid = table.Column<Guid>(name: "full_reconcile_id", type: "uuid", nullable: true),
                    accountrootid = table.Column<Guid>(name: "account_root_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    productuomid = table.Column<Guid>(name: "product_uom_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    movename = table.Column<string>(name: "move_name", type: "text", nullable: true),
                    parentstate = table.Column<string>(name: "parent_state", type: "text", nullable: true),
                    @ref = table.Column<string>(name: "ref", type: "text", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    taxaudit = table.Column<string>(name: "tax_audit", type: "text", nullable: true),
                    matchingnumber = table.Column<string>(name: "matching_number", type: "text", nullable: true),
                    displaytype = table.Column<string>(name: "display_type", type: "text", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    datematurity = table.Column<DateTime>(name: "date_maturity", type: "timestamp without time zone", nullable: true),
                    discountdate = table.Column<DateTime>(name: "discount_date", type: "timestamp without time zone", nullable: true),
                    analyticdistribution = table.Column<string>(name: "analytic_distribution", type: "jsonb", nullable: true),
                    debit = table.Column<decimal>(type: "numeric", nullable: true),
                    credit = table.Column<decimal>(type: "numeric", nullable: true),
                    balance = table.Column<decimal>(type: "numeric", nullable: true),
                    amountcurrency = table.Column<decimal>(name: "amount_currency", type: "numeric", nullable: true),
                    taxbaseamount = table.Column<decimal>(name: "tax_base_amount", type: "numeric", nullable: true),
                    amountresidual = table.Column<decimal>(name: "amount_residual", type: "numeric", nullable: true),
                    amountresidualcurrency = table.Column<decimal>(name: "amount_residual_currency", type: "numeric", nullable: true),
                    quantity = table.Column<decimal>(type: "numeric", nullable: true),
                    priceunit = table.Column<decimal>(name: "price_unit", type: "numeric", nullable: true),
                    pricesubtotal = table.Column<decimal>(name: "price_subtotal", type: "numeric", nullable: true),
                    pricetotal = table.Column<decimal>(name: "price_total", type: "numeric", nullable: true),
                    discount = table.Column<decimal>(type: "numeric", nullable: true),
                    discountamountcurrency = table.Column<decimal>(name: "discount_amount_currency", type: "numeric", nullable: true),
                    discountbalance = table.Column<decimal>(name: "discount_balance", type: "numeric", nullable: true),
                    taxtaginvert = table.Column<bool>(name: "tax_tag_invert", type: "boolean", nullable: true),
                    reconciled = table.Column<bool>(type: "boolean", nullable: true),
                    blocked = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    discountpercentage = table.Column<double>(name: "discount_percentage", type: "double precision", nullable: true),
                    isdownpayment = table.Column<bool>(name: "is_downpayment", type: "boolean", nullable: true),
                    purchaselineid = table.Column<Guid>(name: "purchase_line_id", type: "uuid", nullable: true),
                    assetcategoryid = table.Column<Guid>(name: "asset_category_id", type: "uuid", nullable: true),
                    assetstartdate = table.Column<DateTime>(name: "asset_start_date", type: "timestamp without time zone", nullable: true),
                    assetenddate = table.Column<DateTime>(name: "asset_end_date", type: "timestamp without time zone", nullable: true),
                    assetmrr = table.Column<double>(name: "asset_mrr", type: "double precision", nullable: true),
                    followuplineid = table.Column<Guid>(name: "followup_line_id", type: "uuid", nullable: true),
                    followupdate = table.Column<DateTime>(name: "followup_date", type: "timestamp without time zone", nullable: true),
                    expenseid = table.Column<Guid>(name: "expense_id", type: "uuid", nullable: true),
                    vehicleid = table.Column<Guid>(name: "vehicle_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_move_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_move_line_account_id_fkey",
                        column: x => x.accountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "account_move_line_asset_category_id_fkey",
                        column: x => x.assetcategoryid,
                        principalTable: "account_asset_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_move_line_full_reconcile_id_fkey",
                        column: x => x.fullreconcileid,
                        principalTable: "account_full_reconcile",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_move_line_journal_id_fkey",
                        column: x => x.journalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_move_line_move_id_fkey",
                        column: x => x.moveid,
                        principalTable: "account_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "account_move_line_statement_id_fkey",
                        column: x => x.statementid,
                        principalTable: "account_bank_statement",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_move_line_statement_line_id_fkey",
                        column: x => x.statementlineid,
                        principalTable: "account_bank_statement_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "account_move_line_account_tax_rel",
                columns: table => new
                {
                    accountmovelineid = table.Column<Guid>(name: "account_move_line_id", type: "uuid", nullable: false),
                    accounttaxid = table.Column<Guid>(name: "account_tax_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_move_line_account_tax_rel_pkey", x => new { x.accountmovelineid, x.accounttaxid });
                    table.ForeignKey(
                        name: "account_move_line_account_tax_rel_account_move_line_id_fkey",
                        column: x => x.accountmovelineid,
                        principalTable: "account_move_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_move_purchase_order_rel",
                columns: table => new
                {
                    purchaseorderid = table.Column<Guid>(name: "purchase_order_id", type: "uuid", nullable: false),
                    accountmoveid = table.Column<Guid>(name: "account_move_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_move_purchase_order_rel_pkey", x => new { x.purchaseorderid, x.accountmoveid });
                    table.ForeignKey(
                        name: "account_move_purchase_order_rel_account_move_id_fkey",
                        column: x => x.accountmoveid,
                        principalTable: "account_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_move_reversal",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    journalid = table.Column<Guid>(name: "journal_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    datemode = table.Column<string>(name: "date_mode", type: "text", nullable: true),
                    reason = table.Column<string>(type: "text", nullable: true),
                    refundmethod = table.Column<string>(name: "refund_method", type: "text", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_move_reversal_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_move_reversal_journal_id_fkey",
                        column: x => x.journalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_move_reversal_move",
                columns: table => new
                {
                    reversalid = table.Column<Guid>(name: "reversal_id", type: "uuid", nullable: false),
                    moveid = table.Column<Guid>(name: "move_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_move_reversal_move_pkey", x => new { x.reversalid, x.moveid });
                    table.ForeignKey(
                        name: "account_move_reversal_move_move_id_fkey",
                        column: x => x.moveid,
                        principalTable: "account_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "account_move_reversal_move_reversal_id_fkey",
                        column: x => x.reversalid,
                        principalTable: "account_move_reversal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_move_reversal_new_move",
                columns: table => new
                {
                    reversalid = table.Column<Guid>(name: "reversal_id", type: "uuid", nullable: false),
                    newmoveid = table.Column<Guid>(name: "new_move_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_move_reversal_new_move_pkey", x => new { x.reversalid, x.newmoveid });
                    table.ForeignKey(
                        name: "account_move_reversal_new_move_new_move_id_fkey",
                        column: x => x.newmoveid,
                        principalTable: "account_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "account_move_reversal_new_move_reversal_id_fkey",
                        column: x => x.reversalid,
                        principalTable: "account_move_reversal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_partial_reconcile",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    debitmoveid = table.Column<Guid>(name: "debit_move_id", type: "uuid", nullable: true),
                    creditmoveid = table.Column<Guid>(name: "credit_move_id", type: "uuid", nullable: true),
                    fullreconcileid = table.Column<Guid>(name: "full_reconcile_id", type: "uuid", nullable: true),
                    exchangemoveid = table.Column<Guid>(name: "exchange_move_id", type: "uuid", nullable: true),
                    debitcurrencyid = table.Column<long>(name: "debit_currency_id", type: "bigint", nullable: true),
                    creditcurrencyid = table.Column<long>(name: "credit_currency_id", type: "bigint", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    maxdate = table.Column<DateTime>(name: "max_date", type: "timestamp without time zone", nullable: true),
                    amount = table.Column<decimal>(type: "numeric", nullable: true),
                    debitamountcurrency = table.Column<decimal>(name: "debit_amount_currency", type: "numeric", nullable: true),
                    creditamountcurrency = table.Column<decimal>(name: "credit_amount_currency", type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_partial_reconcile_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_partial_reconcile_credit_move_id_fkey",
                        column: x => x.creditmoveid,
                        principalTable: "account_move_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "account_partial_reconcile_debit_move_id_fkey",
                        column: x => x.debitmoveid,
                        principalTable: "account_move_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "account_partial_reconcile_exchange_move_id_fkey",
                        column: x => x.exchangemoveid,
                        principalTable: "account_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_partial_reconcile_full_reconcile_id_fkey",
                        column: x => x.fullreconcileid,
                        principalTable: "account_full_reconcile",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "account_payment",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    moveid = table.Column<Guid>(name: "move_id", type: "uuid", nullable: true),
                    partnerbankid = table.Column<Guid>(name: "partner_bank_id", type: "uuid", nullable: true),
                    pairedinternaltransferpaymentid = table.Column<Guid>(name: "paired_internal_transfer_payment_id", type: "uuid", nullable: true),
                    paymentmethodlineid = table.Column<Guid>(name: "payment_method_line_id", type: "uuid", nullable: true),
                    paymentmethodid = table.Column<Guid>(name: "payment_method_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    outstandingaccountid = table.Column<Guid>(name: "outstanding_account_id", type: "uuid", nullable: true),
                    destinationaccountid = table.Column<Guid>(name: "destination_account_id", type: "uuid", nullable: true),
                    destinationjournalid = table.Column<Guid>(name: "destination_journal_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    paymenttype = table.Column<string>(name: "payment_type", type: "text", nullable: true),
                    partnertype = table.Column<string>(name: "partner_type", type: "text", nullable: true),
                    paymentreference = table.Column<string>(name: "payment_reference", type: "text", nullable: true),
                    amount = table.Column<decimal>(type: "numeric", nullable: true),
                    amountcompanycurrencysigned = table.Column<decimal>(name: "amount_company_currency_signed", type: "numeric", nullable: true),
                    isreconciled = table.Column<bool>(name: "is_reconciled", type: "boolean", nullable: true),
                    ismatched = table.Column<bool>(name: "is_matched", type: "boolean", nullable: true),
                    isinternaltransfer = table.Column<bool>(name: "is_internal_transfer", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    paymenttransactionid = table.Column<Guid>(name: "payment_transaction_id", type: "uuid", nullable: true),
                    paymenttokenid = table.Column<Guid>(name: "payment_token_id", type: "uuid", nullable: true),
                    sourcepaymentid = table.Column<Guid>(name: "source_payment_id", type: "uuid", nullable: true),
                    pospaymentmethodid = table.Column<Guid>(name: "pos_payment_method_id", type: "uuid", nullable: true),
                    forceoutstandingaccountid = table.Column<Guid>(name: "force_outstanding_account_id", type: "uuid", nullable: true),
                    possessionid = table.Column<Guid>(name: "pos_session_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_payment_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_payment_destination_account_id_fkey",
                        column: x => x.destinationaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_payment_destination_journal_id_fkey",
                        column: x => x.destinationjournalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_payment_force_outstanding_account_id_fkey",
                        column: x => x.forceoutstandingaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_payment_move_id_fkey",
                        column: x => x.moveid,
                        principalTable: "account_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "account_payment_outstanding_account_id_fkey",
                        column: x => x.outstandingaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_payment_paired_internal_transfer_payment_id_fkey",
                        column: x => x.pairedinternaltransferpaymentid,
                        principalTable: "account_payment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_payment_source_payment_id_fkey",
                        column: x => x.sourcepaymentid,
                        principalTable: "account_payment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "account_payment_account_bank_statement_line_rel",
                columns: table => new
                {
                    accountbankstatementlineid = table.Column<Guid>(name: "account_bank_statement_line_id", type: "uuid", nullable: false),
                    accountpaymentid = table.Column<Guid>(name: "account_payment_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_payment_account_bank_statement_line_rel_pkey", x => new { x.accountbankstatementlineid, x.accountpaymentid });
                    table.ForeignKey(
                        name: "account_payment_account_bank__account_bank_statement_line__fkey",
                        column: x => x.accountbankstatementlineid,
                        principalTable: "account_bank_statement_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "account_payment_account_bank_statement__account_payment_id_fkey",
                        column: x => x.accountpaymentid,
                        principalTable: "account_payment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_payment_method",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    paymenttype = table.Column<string>(name: "payment_type", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_payment_method_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_payment_method_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    paymentmethodid = table.Column<Guid>(name: "payment_method_id", type: "uuid", nullable: true),
                    paymentaccountid = table.Column<Guid>(name: "payment_account_id", type: "uuid", nullable: true),
                    journalid = table.Column<Guid>(name: "journal_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    paymentproviderid = table.Column<Guid>(name: "payment_provider_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_payment_method_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_payment_method_line_journal_id_fkey",
                        column: x => x.journalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "account_payment_method_line_payment_account_id_fkey",
                        column: x => x.paymentaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "account_payment_method_line_payment_method_id_fkey",
                        column: x => x.paymentmethodid,
                        principalTable: "account_payment_method",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "account_payment_register",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    journalid = table.Column<Guid>(name: "journal_id", type: "uuid", nullable: true),
                    partnerbankid = table.Column<Guid>(name: "partner_bank_id", type: "uuid", nullable: true),
                    sourcecurrencyid = table.Column<long>(name: "source_currency_id", type: "bigint", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    paymentmethodlineid = table.Column<Guid>(name: "payment_method_line_id", type: "uuid", nullable: true),
                    writeoffaccountid = table.Column<Guid>(name: "writeoff_account_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    communication = table.Column<string>(type: "text", nullable: true),
                    paymenttype = table.Column<string>(name: "payment_type", type: "text", nullable: true),
                    partnertype = table.Column<string>(name: "partner_type", type: "text", nullable: true),
                    paymentdifferencehandling = table.Column<string>(name: "payment_difference_handling", type: "text", nullable: true),
                    writeofflabel = table.Column<string>(name: "writeoff_label", type: "text", nullable: true),
                    paymentdate = table.Column<DateTime>(name: "payment_date", type: "timestamp without time zone", nullable: true),
                    amount = table.Column<decimal>(type: "numeric", nullable: true),
                    sourceamount = table.Column<decimal>(name: "source_amount", type: "numeric", nullable: true),
                    sourceamountcurrency = table.Column<decimal>(name: "source_amount_currency", type: "numeric", nullable: true),
                    grouppayment = table.Column<bool>(name: "group_payment", type: "boolean", nullable: true),
                    caneditwizard = table.Column<bool>(name: "can_edit_wizard", type: "boolean", nullable: true),
                    cangrouppayments = table.Column<bool>(name: "can_group_payments", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    paymenttokenid = table.Column<Guid>(name: "payment_token_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_payment_register_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_payment_register_journal_id_fkey",
                        column: x => x.journalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_payment_register_payment_method_line_id_fkey",
                        column: x => x.paymentmethodlineid,
                        principalTable: "account_payment_method_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_payment_register_writeoff_account_id_fkey",
                        column: x => x.writeoffaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "account_payment_register_move_line_rel",
                columns: table => new
                {
                    wizardid = table.Column<Guid>(name: "wizard_id", type: "uuid", nullable: false),
                    lineid = table.Column<Guid>(name: "line_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_payment_register_move_line_rel_pkey", x => new { x.wizardid, x.lineid });
                    table.ForeignKey(
                        name: "account_payment_register_move_line_rel_line_id_fkey",
                        column: x => x.lineid,
                        principalTable: "account_move_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "account_payment_register_move_line_rel_wizard_id_fkey",
                        column: x => x.wizardid,
                        principalTable: "account_payment_register",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_payment_term",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    note = table.Column<string>(type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    displayoninvoice = table.Column<bool>(name: "display_on_invoice", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_payment_term_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_payment_term_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    months = table.Column<long>(type: "bigint", nullable: true),
                    days = table.Column<long>(type: "bigint", nullable: true),
                    daysafter = table.Column<long>(name: "days_after", type: "bigint", nullable: true),
                    discountdays = table.Column<long>(name: "discount_days", type: "bigint", nullable: true),
                    paymentid = table.Column<Guid>(name: "payment_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    value = table.Column<string>(type: "text", nullable: true),
                    valueamount = table.Column<decimal>(name: "value_amount", type: "numeric", nullable: true),
                    endmonth = table.Column<bool>(name: "end_month", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    discountpercentage = table.Column<double>(name: "discount_percentage", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_payment_term_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_payment_term_line_payment_id_fkey",
                        column: x => x.paymentid,
                        principalTable: "account_payment_term",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_print_journal",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    targetmove = table.Column<string>(name: "target_move", type: "text", nullable: true),
                    sortselection = table.Column<string>(name: "sort_selection", type: "text", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    dateto = table.Column<DateTime>(name: "date_to", type: "timestamp without time zone", nullable: true),
                    amountcurrency = table.Column<bool>(name: "amount_currency", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_print_journal_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_reconcile_model",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    pastmonthslimit = table.Column<long>(name: "past_months_limit", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    ruletype = table.Column<string>(name: "rule_type", type: "text", nullable: true),
                    matchingorder = table.Column<string>(name: "matching_order", type: "text", nullable: true),
                    matchnature = table.Column<string>(name: "match_nature", type: "text", nullable: true),
                    matchamount = table.Column<string>(name: "match_amount", type: "text", nullable: true),
                    matchlabel = table.Column<string>(name: "match_label", type: "text", nullable: true),
                    matchlabelparam = table.Column<string>(name: "match_label_param", type: "text", nullable: true),
                    matchnote = table.Column<string>(name: "match_note", type: "text", nullable: true),
                    matchnoteparam = table.Column<string>(name: "match_note_param", type: "text", nullable: true),
                    matchtransactiontype = table.Column<string>(name: "match_transaction_type", type: "text", nullable: true),
                    matchtransactiontypeparam = table.Column<string>(name: "match_transaction_type_param", type: "text", nullable: true),
                    paymenttolerancetype = table.Column<string>(name: "payment_tolerance_type", type: "text", nullable: true),
                    decimalseparator = table.Column<string>(name: "decimal_separator", type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    autoreconcile = table.Column<bool>(name: "auto_reconcile", type: "boolean", nullable: true),
                    tocheck = table.Column<bool>(name: "to_check", type: "boolean", nullable: true),
                    matchtextlocationlabel = table.Column<bool>(name: "match_text_location_label", type: "boolean", nullable: true),
                    matchtextlocationnote = table.Column<bool>(name: "match_text_location_note", type: "boolean", nullable: true),
                    matchtextlocationreference = table.Column<bool>(name: "match_text_location_reference", type: "boolean", nullable: true),
                    matchsamecurrency = table.Column<bool>(name: "match_same_currency", type: "boolean", nullable: true),
                    allowpaymenttolerance = table.Column<bool>(name: "allow_payment_tolerance", type: "boolean", nullable: true),
                    matchpartner = table.Column<bool>(name: "match_partner", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    matchamountmin = table.Column<double>(name: "match_amount_min", type: "double precision", nullable: true),
                    matchamountmax = table.Column<double>(name: "match_amount_max", type: "double precision", nullable: true),
                    paymenttoleranceparam = table.Column<double>(name: "payment_tolerance_param", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_reconcile_model_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_reconcile_model_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    modelid = table.Column<Guid>(name: "model_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    accountid = table.Column<Guid>(name: "account_id", type: "uuid", nullable: true),
                    journalid = table.Column<Guid>(name: "journal_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    label = table.Column<string>(type: "text", nullable: true),
                    amounttype = table.Column<string>(name: "amount_type", type: "text", nullable: true),
                    amountstring = table.Column<string>(name: "amount_string", type: "text", nullable: true),
                    analyticdistribution = table.Column<string>(name: "analytic_distribution", type: "jsonb", nullable: true),
                    forcetaxincluded = table.Column<bool>(name: "force_tax_included", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    amount = table.Column<double>(type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_reconcile_model_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_reconcile_model_line_account_id_fkey",
                        column: x => x.accountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "account_reconcile_model_line_journal_id_fkey",
                        column: x => x.journalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "account_reconcile_model_line_model_id_fkey",
                        column: x => x.modelid,
                        principalTable: "account_reconcile_model",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_reconcile_model_line_account_tax_rel",
                columns: table => new
                {
                    accountreconcilemodellineid = table.Column<Guid>(name: "account_reconcile_model_line_id", type: "uuid", nullable: false),
                    accounttaxid = table.Column<Guid>(name: "account_tax_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_reconcile_model_line_account_tax_rel_pkey", x => new { x.accountreconcilemodellineid, x.accounttaxid });
                    table.ForeignKey(
                        name: "account_reconcile_model_line__account_reconcile_model_line_fkey",
                        column: x => x.accountreconcilemodellineid,
                        principalTable: "account_reconcile_model_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_reconcile_model_line_template",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    modelid = table.Column<Guid>(name: "model_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    accountid = table.Column<Guid>(name: "account_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    label = table.Column<string>(type: "text", nullable: true),
                    amounttype = table.Column<string>(name: "amount_type", type: "text", nullable: true),
                    amountstring = table.Column<string>(name: "amount_string", type: "text", nullable: true),
                    forcetaxincluded = table.Column<bool>(name: "force_tax_included", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_reconcile_model_line_template_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_reconcile_model_line_template_account_id_fkey",
                        column: x => x.accountid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_reconcile_model_line_template_account_tax_template_rel",
                columns: table => new
                {
                    accountreconcilemodellinetemplateid = table.Column<Guid>(name: "account_reconcile_model_line_template_id", type: "uuid", nullable: false),
                    accounttaxtemplateid = table.Column<Guid>(name: "account_tax_template_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_reconcile_model_line_template_account_tax_template_pkey", x => new { x.accountreconcilemodellinetemplateid, x.accounttaxtemplateid });
                    table.ForeignKey(
                        name: "account_reconcile_model_line_account_reconcile_model_line_fkey1",
                        column: x => x.accountreconcilemodellinetemplateid,
                        principalTable: "account_reconcile_model_line_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_reconcile_model_partner_mapping",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    modelid = table.Column<Guid>(name: "model_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    paymentrefregex = table.Column<string>(name: "payment_ref_regex", type: "text", nullable: true),
                    narrationregex = table.Column<string>(name: "narration_regex", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_reconcile_model_partner_mapping_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_reconcile_model_partner_mapping_model_id_fkey",
                        column: x => x.modelid,
                        principalTable: "account_reconcile_model",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_reconcile_model_res_partner_category_rel",
                columns: table => new
                {
                    accountreconcilemodelid = table.Column<Guid>(name: "account_reconcile_model_id", type: "uuid", nullable: false),
                    respartnercategoryid = table.Column<long>(name: "res_partner_category_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_reconcile_model_res_partner_category_rel_pkey", x => new { x.accountreconcilemodelid, x.respartnercategoryid });
                    table.ForeignKey(
                        name: "account_reconcile_model_res_pa_account_reconcile_model_id_fkey1",
                        column: x => x.accountreconcilemodelid,
                        principalTable: "account_reconcile_model",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_reconcile_model_res_partner_rel",
                columns: table => new
                {
                    accountreconcilemodelid = table.Column<Guid>(name: "account_reconcile_model_id", type: "uuid", nullable: false),
                    respartnerid = table.Column<Guid>(name: "res_partner_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_reconcile_model_res_partner_rel_pkey", x => new { x.accountreconcilemodelid, x.respartnerid });
                    table.ForeignKey(
                        name: "account_reconcile_model_res_par_account_reconcile_model_id_fkey",
                        column: x => x.accountreconcilemodelid,
                        principalTable: "account_reconcile_model",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_reconcile_model_template",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    charttemplateid = table.Column<Guid>(name: "chart_template_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    ruletype = table.Column<string>(name: "rule_type", type: "text", nullable: true),
                    matchingorder = table.Column<string>(name: "matching_order", type: "text", nullable: true),
                    matchnature = table.Column<string>(name: "match_nature", type: "text", nullable: true),
                    matchamount = table.Column<string>(name: "match_amount", type: "text", nullable: true),
                    matchlabel = table.Column<string>(name: "match_label", type: "text", nullable: true),
                    matchlabelparam = table.Column<string>(name: "match_label_param", type: "text", nullable: true),
                    matchnote = table.Column<string>(name: "match_note", type: "text", nullable: true),
                    matchnoteparam = table.Column<string>(name: "match_note_param", type: "text", nullable: true),
                    matchtransactiontype = table.Column<string>(name: "match_transaction_type", type: "text", nullable: true),
                    matchtransactiontypeparam = table.Column<string>(name: "match_transaction_type_param", type: "text", nullable: true),
                    paymenttolerancetype = table.Column<string>(name: "payment_tolerance_type", type: "text", nullable: true),
                    decimalseparator = table.Column<string>(name: "decimal_separator", type: "text", nullable: true),
                    autoreconcile = table.Column<bool>(name: "auto_reconcile", type: "boolean", nullable: true),
                    tocheck = table.Column<bool>(name: "to_check", type: "boolean", nullable: true),
                    matchtextlocationlabel = table.Column<bool>(name: "match_text_location_label", type: "boolean", nullable: true),
                    matchtextlocationnote = table.Column<bool>(name: "match_text_location_note", type: "boolean", nullable: true),
                    matchtextlocationreference = table.Column<bool>(name: "match_text_location_reference", type: "boolean", nullable: true),
                    matchsamecurrency = table.Column<bool>(name: "match_same_currency", type: "boolean", nullable: true),
                    allowpaymenttolerance = table.Column<bool>(name: "allow_payment_tolerance", type: "boolean", nullable: true),
                    matchpartner = table.Column<bool>(name: "match_partner", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    matchamountmin = table.Column<double>(name: "match_amount_min", type: "double precision", nullable: true),
                    matchamountmax = table.Column<double>(name: "match_amount_max", type: "double precision", nullable: true),
                    paymenttoleranceparam = table.Column<double>(name: "payment_tolerance_param", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_reconcile_model_template_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_reconcile_model_template_chart_template_id_fkey",
                        column: x => x.charttemplateid,
                        principalTable: "account_chart_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "account_reconcile_model_template_res_partner_category_rel",
                columns: table => new
                {
                    accountreconcilemodeltemplateid = table.Column<Guid>(name: "account_reconcile_model_template_id", type: "uuid", nullable: false),
                    respartnercategoryid = table.Column<long>(name: "res_partner_category_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_reconcile_model_template_res_partner_category_rel_pkey", x => new { x.accountreconcilemodeltemplateid, x.respartnercategoryid });
                    table.ForeignKey(
                        name: "account_reconcile_model_temp_account_reconcile_model_temp_fkey1",
                        column: x => x.accountreconcilemodeltemplateid,
                        principalTable: "account_reconcile_model_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_reconcile_model_template_res_partner_rel",
                columns: table => new
                {
                    accountreconcilemodeltemplateid = table.Column<Guid>(name: "account_reconcile_model_template_id", type: "uuid", nullable: false),
                    respartnerid = table.Column<Guid>(name: "res_partner_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_reconcile_model_template_res_partner_rel_pkey", x => new { x.accountreconcilemodeltemplateid, x.respartnerid });
                    table.ForeignKey(
                        name: "account_reconcile_model_templ_account_reconcile_model_temp_fkey",
                        column: x => x.accountreconcilemodeltemplateid,
                        principalTable: "account_reconcile_model_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_recurring_template",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    journalid = table.Column<Guid>(name: "journal_id", type: "uuid", nullable: true),
                    recurringinterval = table.Column<long>(name: "recurring_interval", type: "bigint", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    recurringperiod = table.Column<string>(name: "recurring_period", type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    journalstate = table.Column<string>(name: "journal_state", type: "text", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_recurring_template_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_recurring_template_journal_id_fkey",
                        column: x => x.journalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "account_report",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    rootreportid = table.Column<Guid>(name: "root_report_id", type: "uuid", nullable: true),
                    charttemplateid = table.Column<Guid>(name: "chart_template_id", type: "uuid", nullable: true),
                    countryid = table.Column<long>(name: "country_id", type: "bigint", nullable: true),
                    loadmorelimit = table.Column<long>(name: "load_more_limit", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    availabilitycondition = table.Column<string>(name: "availability_condition", type: "text", nullable: true),
                    defaultopeningdatefilter = table.Column<string>(name: "default_opening_date_filter", type: "text", nullable: true),
                    filtermulticompany = table.Column<string>(name: "filter_multi_company", type: "text", nullable: true),
                    filterhierarchy = table.Column<string>(name: "filter_hierarchy", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    onlytaxexigible = table.Column<bool>(name: "only_tax_exigible", type: "boolean", nullable: true),
                    searchbar = table.Column<bool>(name: "search_bar", type: "boolean", nullable: true),
                    filterdaterange = table.Column<bool>(name: "filter_date_range", type: "boolean", nullable: true),
                    filtershowdraft = table.Column<bool>(name: "filter_show_draft", type: "boolean", nullable: true),
                    filterunreconciled = table.Column<bool>(name: "filter_unreconciled", type: "boolean", nullable: true),
                    filterunfoldall = table.Column<bool>(name: "filter_unfold_all", type: "boolean", nullable: true),
                    filterperiodcomparison = table.Column<bool>(name: "filter_period_comparison", type: "boolean", nullable: true),
                    filtergrowthcomparison = table.Column<bool>(name: "filter_growth_comparison", type: "boolean", nullable: true),
                    filterjournals = table.Column<bool>(name: "filter_journals", type: "boolean", nullable: true),
                    filteranalytic = table.Column<bool>(name: "filter_analytic", type: "boolean", nullable: true),
                    filteraccounttype = table.Column<bool>(name: "filter_account_type", type: "boolean", nullable: true),
                    filterpartner = table.Column<bool>(name: "filter_partner", type: "boolean", nullable: true),
                    filterfiscalposition = table.Column<bool>(name: "filter_fiscal_position", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_report_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_report_chart_template_id_fkey",
                        column: x => x.charttemplateid,
                        principalTable: "account_chart_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_report_root_report_id_fkey",
                        column: x => x.rootreportid,
                        principalTable: "account_report",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "account_report_column",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigint", nullable: true),
                    reportid = table.Column<Guid>(name: "report_id", type: "uuid", nullable: true),
                    customauditactionid = table.Column<Guid>(name: "custom_audit_action_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    expressionlabel = table.Column<string>(name: "expression_label", type: "text", nullable: true),
                    figuretype = table.Column<string>(name: "figure_type", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    sortable = table.Column<bool>(type: "boolean", nullable: true),
                    blankifzero = table.Column<bool>(name: "blank_if_zero", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_report_column_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_report_column_report_id_fkey",
                        column: x => x.reportid,
                        principalTable: "account_report",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "account_report_expression",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    reportlineid = table.Column<Guid>(name: "report_line_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    label = table.Column<string>(type: "text", nullable: true),
                    engine = table.Column<string>(type: "text", nullable: true),
                    formula = table.Column<string>(type: "text", nullable: true),
                    subformula = table.Column<string>(type: "text", nullable: true),
                    datescope = table.Column<string>(name: "date_scope", type: "text", nullable: true),
                    figuretype = table.Column<string>(name: "figure_type", type: "text", nullable: true),
                    carryovertarget = table.Column<string>(name: "carryover_target", type: "text", nullable: true),
                    greenonpositive = table.Column<bool>(name: "green_on_positive", type: "boolean", nullable: true),
                    blankifzero = table.Column<bool>(name: "blank_if_zero", type: "boolean", nullable: true),
                    auditable = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_report_expression_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_report_external_value",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    targetreportexpressionid = table.Column<Guid>(name: "target_report_expression_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    foreignvatfiscalpositionid = table.Column<Guid>(name: "foreign_vat_fiscal_position_id", type: "uuid", nullable: true),
                    carryoveroriginreportlineid = table.Column<Guid>(name: "carryover_origin_report_line_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    carryoveroriginexpressionlabel = table.Column<string>(name: "carryover_origin_expression_label", type: "text", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    value = table.Column<double>(type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_report_external_value_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_report_external_value_foreign_vat_fiscal_position__fkey",
                        column: x => x.foreignvatfiscalpositionid,
                        principalTable: "account_fiscal_position",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_report_external_value_target_report_expression_id_fkey",
                        column: x => x.targetreportexpressionid,
                        principalTable: "account_report_expression",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "account_report_general_ledger",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    targetmove = table.Column<string>(name: "target_move", type: "text", nullable: true),
                    displayaccount = table.Column<string>(name: "display_account", type: "text", nullable: true),
                    sortby = table.Column<string>(type: "text", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    dateto = table.Column<DateTime>(name: "date_to", type: "timestamp without time zone", nullable: true),
                    initialbalance = table.Column<bool>(name: "initial_balance", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_report_general_ledger_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_report_general_ledger_journal_rel",
                columns: table => new
                {
                    accountid = table.Column<Guid>(name: "account_id", type: "uuid", nullable: false),
                    journalid = table.Column<Guid>(name: "journal_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_report_general_ledger_journal_rel_pkey", x => new { x.accountid, x.journalid });
                    table.ForeignKey(
                        name: "account_report_general_ledger_journal_rel_account_id_fkey",
                        column: x => x.accountid,
                        principalTable: "account_report_general_ledger",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "account_report_general_ledger_journal_rel_journal_id_fkey",
                        column: x => x.journalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_report_general_ledger_res_partner_rel",
                columns: table => new
                {
                    accountreportgeneralledgerid = table.Column<Guid>(name: "account_report_general_ledger_id", type: "uuid", nullable: false),
                    respartnerid = table.Column<Guid>(name: "res_partner_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_report_general_ledger_res_partner_rel_pkey", x => new { x.accountreportgeneralledgerid, x.respartnerid });
                    table.ForeignKey(
                        name: "account_report_general_ledger_account_report_general_ledge_fkey",
                        column: x => x.accountreportgeneralledgerid,
                        principalTable: "account_report_general_ledger",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_report_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    reportid = table.Column<Guid>(name: "report_id", type: "uuid", nullable: true),
                    hierarchylevel = table.Column<long>(name: "hierarchy_level", type: "bigint", nullable: true),
                    parentid = table.Column<Guid>(name: "parent_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: true),
                    actionid = table.Column<Guid>(name: "action_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    groupby = table.Column<string>(type: "text", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    foldable = table.Column<bool>(type: "boolean", nullable: true),
                    printonnewpage = table.Column<bool>(name: "print_on_new_page", type: "boolean", nullable: true),
                    hideifzero = table.Column<bool>(name: "hide_if_zero", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_report_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_report_line_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "account_report_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_report_line_report_id_fkey",
                        column: x => x.reportid,
                        principalTable: "account_report",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_report_partner_ledger",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    targetmove = table.Column<string>(name: "target_move", type: "text", nullable: true),
                    resultselection = table.Column<string>(name: "result_selection", type: "text", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    dateto = table.Column<DateTime>(name: "date_to", type: "timestamp without time zone", nullable: true),
                    amountcurrency = table.Column<bool>(name: "amount_currency", type: "boolean", nullable: true),
                    reconciled = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_report_partner_ledger_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_report_partner_ledger_res_partner_rel",
                columns: table => new
                {
                    accountreportpartnerledgerid = table.Column<Guid>(name: "account_report_partner_ledger_id", type: "uuid", nullable: false),
                    respartnerid = table.Column<Guid>(name: "res_partner_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_report_partner_ledger_res_partner_rel_pkey", x => new { x.accountreportpartnerledgerid, x.respartnerid });
                    table.ForeignKey(
                        name: "account_report_partner_ledger_account_report_partner_ledge_fkey",
                        column: x => x.accountreportpartnerledgerid,
                        principalTable: "account_report_partner_ledger",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_resequence_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    firstname = table.Column<string>(name: "first_name", type: "text", nullable: true),
                    ordering = table.Column<string>(type: "text", nullable: true),
                    firstdate = table.Column<DateTime>(name: "first_date", type: "timestamp without time zone", nullable: true),
                    enddate = table.Column<DateTime>(name: "end_date", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_resequence_wizard_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_setup_bank_manual_config",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    respartnerbankid = table.Column<Guid>(name: "res_partner_bank_id", type: "uuid", nullable: true),
                    numjournalswithoutaccount = table.Column<long>(name: "num_journals_without_account", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    newjournalname = table.Column<string>(name: "new_journal_name", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_setup_bank_manual_config_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_tax",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    taxgroupid = table.Column<Guid>(name: "tax_group_id", type: "uuid", nullable: true),
                    cashbasistransitionaccountid = table.Column<Guid>(name: "cash_basis_transition_account_id", type: "uuid", nullable: true),
                    countryid = table.Column<long>(name: "country_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    typetaxuse = table.Column<string>(name: "type_tax_use", type: "text", nullable: true),
                    taxscope = table.Column<string>(name: "tax_scope", type: "text", nullable: true),
                    amounttype = table.Column<string>(name: "amount_type", type: "text", nullable: true),
                    description = table.Column<string>(type: "jsonb", nullable: true),
                    taxexigibility = table.Column<string>(name: "tax_exigibility", type: "text", nullable: true),
                    amount = table.Column<decimal>(type: "numeric", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    priceinclude = table.Column<bool>(name: "price_include", type: "boolean", nullable: true),
                    includebaseamount = table.Column<bool>(name: "include_base_amount", type: "boolean", nullable: true),
                    isbaseaffected = table.Column<bool>(name: "is_base_affected", type: "boolean", nullable: true),
                    analytic = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    realamount = table.Column<double>(name: "real_amount", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_tax_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_tax_cash_basis_transition_account_id_fkey",
                        column: x => x.cashbasistransitionaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "account_tax_filiation_rel",
                columns: table => new
                {
                    parenttax = table.Column<Guid>(name: "parent_tax", type: "uuid", nullable: false),
                    childtax = table.Column<Guid>(name: "child_tax", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_tax_filiation_rel_pkey", x => new { x.parenttax, x.childtax });
                    table.ForeignKey(
                        name: "account_tax_filiation_rel_child_tax_fkey",
                        column: x => x.childtax,
                        principalTable: "account_tax",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "account_tax_filiation_rel_parent_tax_fkey",
                        column: x => x.parenttax,
                        principalTable: "account_tax",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_tax_group",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    countryid = table.Column<long>(name: "country_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    precedingsubtotal = table.Column<string>(name: "preceding_subtotal", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_tax_group_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_tax_hr_expense_split_rel",
                columns: table => new
                {
                    hrexpensesplitid = table.Column<Guid>(name: "hr_expense_split_id", type: "uuid", nullable: false),
                    accounttaxid = table.Column<Guid>(name: "account_tax_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_tax_hr_expense_split_rel_pkey", x => new { x.hrexpensesplitid, x.accounttaxid });
                    table.ForeignKey(
                        name: "account_tax_hr_expense_split_rel_account_tax_id_fkey",
                        column: x => x.accounttaxid,
                        principalTable: "account_tax",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_tax_pos_order_line_rel",
                columns: table => new
                {
                    posorderlineid = table.Column<Guid>(name: "pos_order_line_id", type: "uuid", nullable: false),
                    accounttaxid = table.Column<Guid>(name: "account_tax_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_tax_pos_order_line_rel_pkey", x => new { x.posorderlineid, x.accounttaxid });
                    table.ForeignKey(
                        name: "account_tax_pos_order_line_rel_account_tax_id_fkey",
                        column: x => x.accounttaxid,
                        principalTable: "account_tax",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_tax_purchase_order_line_rel",
                columns: table => new
                {
                    purchaseorderlineid = table.Column<Guid>(name: "purchase_order_line_id", type: "uuid", nullable: false),
                    accounttaxid = table.Column<Guid>(name: "account_tax_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_tax_purchase_order_line_rel_pkey", x => new { x.purchaseorderlineid, x.accounttaxid });
                    table.ForeignKey(
                        name: "account_tax_purchase_order_line_rel_account_tax_id_fkey",
                        column: x => x.accounttaxid,
                        principalTable: "account_tax",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_tax_rep_template_minus",
                columns: table => new
                {
                    accounttaxrepartitionlinetemplateid = table.Column<Guid>(name: "account_tax_repartition_line_template_id", type: "uuid", nullable: false),
                    accountreportexpressionid = table.Column<Guid>(name: "account_report_expression_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_tax_rep_template_minus_pkey", x => new { x.accounttaxrepartitionlinetemplateid, x.accountreportexpressionid });
                    table.ForeignKey(
                        name: "account_tax_rep_template_minu_account_report_expression_id_fkey",
                        column: x => x.accountreportexpressionid,
                        principalTable: "account_report_expression",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_tax_rep_template_plus",
                columns: table => new
                {
                    accounttaxrepartitionlinetemplateid = table.Column<Guid>(name: "account_tax_repartition_line_template_id", type: "uuid", nullable: false),
                    accountreportexpressionid = table.Column<Guid>(name: "account_report_expression_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_tax_rep_template_plus_pkey", x => new { x.accounttaxrepartitionlinetemplateid, x.accountreportexpressionid });
                    table.ForeignKey(
                        name: "account_tax_rep_template_plus_account_report_expression_id_fkey",
                        column: x => x.accountreportexpressionid,
                        principalTable: "account_report_expression",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_tax_repartition_financial_tags",
                columns: table => new
                {
                    accounttaxrepartitionlinetemplateid = table.Column<Guid>(name: "account_tax_repartition_line_template_id", type: "uuid", nullable: false),
                    accountaccounttagid = table.Column<long>(name: "account_account_tag_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_tax_repartition_financial_tags_pkey", x => new { x.accounttaxrepartitionlinetemplateid, x.accountaccounttagid });
                    table.ForeignKey(
                        name: "account_tax_repartition_financial_t_account_account_tag_id_fkey",
                        column: x => x.accountaccounttagid,
                        principalTable: "account_account_tag",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_tax_repartition_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    accountid = table.Column<Guid>(name: "account_id", type: "uuid", nullable: true),
                    invoicetaxid = table.Column<Guid>(name: "invoice_tax_id", type: "uuid", nullable: true),
                    refundtaxid = table.Column<Guid>(name: "refund_tax_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    repartitiontype = table.Column<string>(name: "repartition_type", type: "text", nullable: true),
                    useintaxclosing = table.Column<bool>(name: "use_in_tax_closing", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    factorpercent = table.Column<double>(name: "factor_percent", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_tax_repartition_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_tax_repartition_line_account_id_fkey",
                        column: x => x.accountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_tax_repartition_line_invoice_tax_id_fkey",
                        column: x => x.invoicetaxid,
                        principalTable: "account_tax",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "account_tax_repartition_line_refund_tax_id_fkey",
                        column: x => x.refundtaxid,
                        principalTable: "account_tax",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_tax_repartition_line_template",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    accountid = table.Column<Guid>(name: "account_id", type: "uuid", nullable: true),
                    invoicetaxid = table.Column<Guid>(name: "invoice_tax_id", type: "uuid", nullable: true),
                    refundtaxid = table.Column<Guid>(name: "refund_tax_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    repartitiontype = table.Column<string>(name: "repartition_type", type: "text", nullable: true),
                    useintaxclosing = table.Column<bool>(name: "use_in_tax_closing", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    factorpercent = table.Column<double>(name: "factor_percent", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_tax_repartition_line_template_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_tax_repartition_line_template_account_id_fkey",
                        column: x => x.accountid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "account_tax_report_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    targetmove = table.Column<string>(name: "target_move", type: "text", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    dateto = table.Column<DateTime>(name: "date_to", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_tax_report_wizard_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_tax_sale_advance_payment_inv_rel",
                columns: table => new
                {
                    saleadvancepaymentinvid = table.Column<Guid>(name: "sale_advance_payment_inv_id", type: "uuid", nullable: false),
                    accounttaxid = table.Column<Guid>(name: "account_tax_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_tax_sale_advance_payment_inv_rel_pkey", x => new { x.saleadvancepaymentinvid, x.accounttaxid });
                    table.ForeignKey(
                        name: "account_tax_sale_advance_payment_inv_rel_account_tax_id_fkey",
                        column: x => x.accounttaxid,
                        principalTable: "account_tax",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_tax_sale_order_line_rel",
                columns: table => new
                {
                    saleorderlineid = table.Column<Guid>(name: "sale_order_line_id", type: "uuid", nullable: false),
                    accounttaxid = table.Column<Guid>(name: "account_tax_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_tax_sale_order_line_rel_pkey", x => new { x.saleorderlineid, x.accounttaxid });
                    table.ForeignKey(
                        name: "account_tax_sale_order_line_rel_account_tax_id_fkey",
                        column: x => x.accounttaxid,
                        principalTable: "account_tax",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_tax_template",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    charttemplateid = table.Column<Guid>(name: "chart_template_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    taxgroupid = table.Column<Guid>(name: "tax_group_id", type: "uuid", nullable: true),
                    cashbasistransitionaccountid = table.Column<Guid>(name: "cash_basis_transition_account_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    typetaxuse = table.Column<string>(name: "type_tax_use", type: "text", nullable: true),
                    taxscope = table.Column<string>(name: "tax_scope", type: "text", nullable: true),
                    amounttype = table.Column<string>(name: "amount_type", type: "text", nullable: true),
                    description = table.Column<string>(type: "jsonb", nullable: true),
                    taxexigibility = table.Column<string>(name: "tax_exigibility", type: "text", nullable: true),
                    amount = table.Column<decimal>(type: "numeric", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    priceinclude = table.Column<bool>(name: "price_include", type: "boolean", nullable: true),
                    includebaseamount = table.Column<bool>(name: "include_base_amount", type: "boolean", nullable: true),
                    isbaseaffected = table.Column<bool>(name: "is_base_affected", type: "boolean", nullable: true),
                    analytic = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_tax_template_pkey", x => x.id);
                    table.ForeignKey(
                        name: "account_tax_template_cash_basis_transition_account_id_fkey",
                        column: x => x.cashbasistransitionaccountid,
                        principalTable: "account_account_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "account_tax_template_chart_template_id_fkey",
                        column: x => x.charttemplateid,
                        principalTable: "account_chart_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "account_tax_template_tax_group_id_fkey",
                        column: x => x.taxgroupid,
                        principalTable: "account_tax_group",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "account_tax_template_filiation_rel",
                columns: table => new
                {
                    parenttax = table.Column<Guid>(name: "parent_tax", type: "uuid", nullable: false),
                    childtax = table.Column<Guid>(name: "child_tax", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_tax_template_filiation_rel_pkey", x => new { x.parenttax, x.childtax });
                    table.ForeignKey(
                        name: "account_tax_template_filiation_rel_child_tax_fkey",
                        column: x => x.childtax,
                        principalTable: "account_tax_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "account_tax_template_filiation_rel_parent_tax_fkey",
                        column: x => x.parenttax,
                        principalTable: "account_tax_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_tour_upload_bill",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    selection = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_tour_upload_bill_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_tour_upload_bill_email_confirm",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    emailalias = table.Column<string>(name: "email_alias", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_tour_upload_bill_email_confirm_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "account_tour_upload_bill_ir_attachments_rel",
                columns: table => new
                {
                    accounttouruploadbillid = table.Column<Guid>(name: "account_tour_upload_bill_id", type: "uuid", nullable: false),
                    irattachmentid = table.Column<Guid>(name: "ir_attachment_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_tour_upload_bill_ir_attachments_rel_pkey", x => new { x.accounttouruploadbillid, x.irattachmentid });
                    table.ForeignKey(
                        name: "account_tour_upload_bill_ir_at_account_tour_upload_bill_id_fkey",
                        column: x => x.accounttouruploadbillid,
                        principalTable: "account_tour_upload_bill",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "account_unreconcile",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("account_unreconcile_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "accounting_report",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    accountreportid = table.Column<Guid>(name: "account_report_id", type: "uuid", nullable: true),
                    targetmove = table.Column<string>(name: "target_move", type: "text", nullable: true),
                    labelfilter = table.Column<string>(name: "label_filter", type: "text", nullable: true),
                    filtercmp = table.Column<string>(name: "filter_cmp", type: "text", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    dateto = table.Column<DateTime>(name: "date_to", type: "timestamp without time zone", nullable: true),
                    datefromcmp = table.Column<DateTime>(name: "date_from_cmp", type: "timestamp without time zone", nullable: true),
                    datetocmp = table.Column<DateTime>(name: "date_to_cmp", type: "timestamp without time zone", nullable: true),
                    enablefilter = table.Column<bool>(name: "enable_filter", type: "boolean", nullable: true),
                    debitcredit = table.Column<bool>(name: "debit_credit", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("accounting_report_pkey", x => x.id);
                    table.ForeignKey(
                        name: "accounting_report_account_report_id_fkey",
                        column: x => x.accountreportid,
                        principalTable: "account_financial_report",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "applicant_get_refuse_reason",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    refusereasonid = table.Column<Guid>(name: "refuse_reason_id", type: "uuid", nullable: true),
                    templateid = table.Column<Guid>(name: "template_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    sendmail = table.Column<bool>(name: "send_mail", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("applicant_get_refuse_reason_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "applicant_get_refuse_reason_hr_applicant_rel",
                columns: table => new
                {
                    applicantgetrefusereasonid = table.Column<Guid>(name: "applicant_get_refuse_reason_id", type: "uuid", nullable: false),
                    hrapplicantid = table.Column<Guid>(name: "hr_applicant_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("applicant_get_refuse_reason_hr_applicant_rel_pkey", x => new { x.applicantgetrefusereasonid, x.hrapplicantid });
                    table.ForeignKey(
                        name: "applicant_get_refuse_reason_h_applicant_get_refuse_reason__fkey",
                        column: x => x.applicantgetrefusereasonid,
                        principalTable: "applicant_get_refuse_reason",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "applicant_send_mail",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    templateid = table.Column<Guid>(name: "template_id", type: "uuid", nullable: true),
                    authorid = table.Column<Guid>(name: "author_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    lang = table.Column<string>(type: "text", nullable: true),
                    subject = table.Column<string>(type: "text", nullable: true),
                    body = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("applicant_send_mail_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "applicant_send_mail_hr_applicant_rel",
                columns: table => new
                {
                    applicantsendmailid = table.Column<Guid>(name: "applicant_send_mail_id", type: "uuid", nullable: false),
                    hrapplicantid = table.Column<Guid>(name: "hr_applicant_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("applicant_send_mail_hr_applicant_rel_pkey", x => new { x.applicantsendmailid, x.hrapplicantid });
                    table.ForeignKey(
                        name: "applicant_send_mail_hr_applicant_re_applicant_send_mail_id_fkey",
                        column: x => x.applicantsendmailid,
                        principalTable: "applicant_send_mail",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "asset_depreciation_confirmation_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("asset_depreciation_confirmation_wizard_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "asset_modify",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    methodnumber = table.Column<long>(name: "method_number", type: "bigint", nullable: true),
                    methodperiod = table.Column<long>(name: "method_period", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    methodend = table.Column<DateTime>(name: "method_end", type: "timestamp without time zone", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("asset_modify_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "auth_totp_device",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    name = table.Column<string>(type: "text", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    scope = table.Column<string>(type: "text", nullable: true),
                    index = table.Column<string>(type: "text", nullable: true),
                    key = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true, defaultValueSql: "(now() AT TIME ZONE 'utc'::text)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("auth_totp_device_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "auth_totp_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    secret = table.Column<string>(type: "text", nullable: true),
                    url = table.Column<string>(type: "text", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    qrcode = table.Column<byte[]>(type: "bytea", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("auth_totp_wizard_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "barcode_nomenclature",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    upceanconv = table.Column<string>(name: "upc_ean_conv", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    gs1separatorfnc1 = table.Column<string>(name: "gs1_separator_fnc1", type: "text", nullable: true),
                    isgs1nomenclature = table.Column<bool>(name: "is_gs1_nomenclature", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("barcode_nomenclature_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "barcode_rule",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    barcodenomenclatureid = table.Column<long>(name: "barcode_nomenclature_id", type: "bigint", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    encoding = table.Column<string>(type: "text", nullable: true),
                    type = table.Column<string>(type: "text", nullable: true),
                    pattern = table.Column<string>(type: "text", nullable: true),
                    alias = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    associateduomid = table.Column<Guid>(name: "associated_uom_id", type: "uuid", nullable: true),
                    gs1contenttype = table.Column<string>(name: "gs1_content_type", type: "text", nullable: true),
                    gs1decimalusage = table.Column<bool>(name: "gs1_decimal_usage", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("barcode_rule_pkey", x => x.id);
                    table.ForeignKey(
                        name: "barcode_rule_barcode_nomenclature_id_fkey",
                        column: x => x.barcodenomenclatureid,
                        principalTable: "barcode_nomenclature",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "base_document_layout",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    reportlayoutid = table.Column<long>(name: "report_layout_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_document_layout_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_enable_profiling_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    duration = table.Column<string>(type: "text", nullable: true),
                    expiration = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_enable_profiling_wizard_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_import_import",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    resmodel = table.Column<string>(name: "res_model", type: "text", nullable: true),
                    filename = table.Column<string>(name: "file_name", type: "text", nullable: true),
                    filetype = table.Column<string>(name: "file_type", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    file = table.Column<byte[]>(type: "bytea", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_import_import_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_import_mapping",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    resmodel = table.Column<string>(name: "res_model", type: "text", nullable: true),
                    columnname = table.Column<string>(name: "column_name", type: "text", nullable: true),
                    fieldname = table.Column<string>(name: "field_name", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_import_mapping_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_import_tests_models_char",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    value = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_import_tests_models_char_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_import_tests_models_char_noreadonly",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    value = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_import_tests_models_char_noreadonly_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_import_tests_models_char_readonly",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    value = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_import_tests_models_char_readonly_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_import_tests_models_char_required",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    value = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_import_tests_models_char_required_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_import_tests_models_char_states",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    value = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_import_tests_models_char_states_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_import_tests_models_char_stillreadonly",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    value = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_import_tests_models_char_stillreadonly_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_import_tests_models_complex",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    c = table.Column<string>(type: "text", nullable: true),
                    d = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    m = table.Column<decimal>(type: "numeric", nullable: true),
                    dt = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    f = table.Column<double>(type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_import_tests_models_complex_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_import_tests_models_float",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    value2 = table.Column<decimal>(type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    value = table.Column<double>(type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_import_tests_models_float_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_import_tests_models_m2o",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    value = table.Column<Guid>(type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_import_tests_models_m2o_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_import_tests_models_m2o_related",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    value = table.Column<Guid>(type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_import_tests_models_m2o_related_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_import_tests_models_m2o_required",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    value = table.Column<Guid>(type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_import_tests_models_m2o_required_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_import_tests_models_m2o_required_related",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    value = table.Column<Guid>(type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_import_tests_models_m2o_required_related_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_import_tests_models_o2m",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_import_tests_models_o2m_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_import_tests_models_o2m_child",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    parentid = table.Column<Guid>(name: "parent_id", type: "uuid", nullable: true),
                    value = table.Column<Guid>(type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_import_tests_models_o2m_child_pkey", x => x.id);
                    table.ForeignKey(
                        name: "base_import_tests_models_o2m_child_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "base_import_tests_models_o2m",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "base_import_tests_models_preview",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    somevalue = table.Column<Guid>(type: "uuid", nullable: true),
                    othervalue = table.Column<Guid>(type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_import_tests_models_preview_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_language_export",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    lang = table.Column<string>(type: "text", nullable: true),
                    format = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    data = table.Column<byte[]>(type: "bytea", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_language_export_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_language_import",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    filename = table.Column<string>(type: "text", nullable: true),
                    overwrite = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    data = table.Column<byte[]>(type: "bytea", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_language_import_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_language_install",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    overwrite = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_language_install_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_language_install_website_rel",
                columns: table => new
                {
                    baselanguageinstallid = table.Column<Guid>(name: "base_language_install_id", type: "uuid", nullable: false),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_language_install_website_rel_pkey", x => new { x.baselanguageinstallid, x.websiteid });
                    table.ForeignKey(
                        name: "base_language_install_website_rel_base_language_install_id_fkey",
                        column: x => x.baselanguageinstallid,
                        principalTable: "base_language_install",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "base_module_install_request",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    moduleid = table.Column<Guid>(name: "module_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    bodyhtml = table.Column<string>(name: "body_html", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_module_install_request_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_module_install_review",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    moduleid = table.Column<Guid>(name: "module_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_module_install_review_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_module_uninstall",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    moduleid = table.Column<Guid>(name: "module_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    showall = table.Column<bool>(name: "show_all", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_module_uninstall_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_module_update",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    updated = table.Column<long>(type: "bigint", nullable: true),
                    added = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_module_update_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_module_upgrade",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    moduleinfo = table.Column<string>(name: "module_info", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_module_upgrade_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_partner_merge_automatic_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    numbergroup = table.Column<long>(name: "number_group", type: "bigint", nullable: true),
                    currentlineid = table.Column<Guid>(name: "current_line_id", type: "uuid", nullable: true),
                    dstpartnerid = table.Column<Guid>(name: "dst_partner_id", type: "uuid", nullable: true),
                    maximumgroup = table.Column<long>(name: "maximum_group", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    groupbyemail = table.Column<bool>(name: "group_by_email", type: "boolean", nullable: true),
                    groupbyname = table.Column<bool>(name: "group_by_name", type: "boolean", nullable: true),
                    groupbyiscompany = table.Column<bool>(name: "group_by_is_company", type: "boolean", nullable: true),
                    groupbyvat = table.Column<bool>(name: "group_by_vat", type: "boolean", nullable: true),
                    groupbyparentid = table.Column<bool>(name: "group_by_parent_id", type: "boolean", nullable: true),
                    excludecontact = table.Column<bool>(name: "exclude_contact", type: "boolean", nullable: true),
                    excludejournalitem = table.Column<bool>(name: "exclude_journal_item", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_partner_merge_automatic_wizard_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "base_partner_merge_automatic_wizard_res_partner_rel",
                columns: table => new
                {
                    basepartnermergeautomaticwizardid = table.Column<Guid>(name: "base_partner_merge_automatic_wizard_id", type: "uuid", nullable: false),
                    respartnerid = table.Column<Guid>(name: "res_partner_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_partner_merge_automatic_wizard_res_partner_rel_pkey", x => new { x.basepartnermergeautomaticwizardid, x.respartnerid });
                    table.ForeignKey(
                        name: "base_partner_merge_automatic__base_partner_merge_automatic_fkey",
                        column: x => x.basepartnermergeautomaticwizardid,
                        principalTable: "base_partner_merge_automatic_wizard",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "base_partner_merge_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    wizardid = table.Column<Guid>(name: "wizard_id", type: "uuid", nullable: true),
                    minid = table.Column<Guid>(name: "min_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    aggrids = table.Column<string>(name: "aggr_ids", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("base_partner_merge_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "base_partner_merge_line_wizard_id_fkey",
                        column: x => x.wizardid,
                        principalTable: "base_partner_merge_automatic_wizard",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "bus_bus",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    channel = table.Column<string>(type: "text", nullable: true),
                    message = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("bus_bus_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "bus_presence",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    status = table.Column<string>(type: "text", nullable: true),
                    lastpoll = table.Column<DateTime>(name: "last_poll", type: "timestamp without time zone", nullable: true),
                    lastpresence = table.Column<DateTime>(name: "last_presence", type: "timestamp without time zone", nullable: true),
                    guestid = table.Column<Guid>(name: "guest_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("bus_presence_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "calendar_alarm",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    duration = table.Column<long>(type: "bigint", nullable: true),
                    durationminutes = table.Column<long>(name: "duration_minutes", type: "bigint", nullable: true),
                    mailtemplateid = table.Column<Guid>(name: "mail_template_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    alarmtype = table.Column<string>(name: "alarm_type", type: "text", nullable: true),
                    interval = table.Column<string>(type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    body = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    smstemplateid = table.Column<Guid>(name: "sms_template_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("calendar_alarm_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "calendar_alarm_calendar_event_rel",
                columns: table => new
                {
                    calendareventid = table.Column<Guid>(name: "calendar_event_id", type: "uuid", nullable: false),
                    calendaralarmid = table.Column<Guid>(name: "calendar_alarm_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("calendar_alarm_calendar_event_rel_pkey", x => new { x.calendareventid, x.calendaralarmid });
                    table.ForeignKey(
                        name: "calendar_alarm_calendar_event_rel_calendar_alarm_id_fkey",
                        column: x => x.calendaralarmid,
                        principalTable: "calendar_alarm",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "calendar_attendee",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    eventid = table.Column<Guid>(name: "event_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    commonname = table.Column<string>(name: "common_name", type: "text", nullable: true),
                    accesstoken = table.Column<string>(name: "access_token", type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    availability = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("calendar_attendee_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "calendar_event",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    videocallchannelid = table.Column<Guid>(name: "videocall_channel_id", type: "uuid", nullable: true),
                    resid = table.Column<Guid>(name: "res_id", type: "uuid", nullable: true),
                    resmodelid = table.Column<Guid>(name: "res_model_id", type: "uuid", nullable: true),
                    recurrenceid = table.Column<Guid>(name: "recurrence_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    location = table.Column<string>(type: "text", nullable: true),
                    videocalllocation = table.Column<string>(name: "videocall_location", type: "text", nullable: true),
                    accesstoken = table.Column<string>(name: "access_token", type: "text", nullable: true),
                    privacy = table.Column<string>(type: "text", nullable: true),
                    showas = table.Column<string>(name: "show_as", type: "text", nullable: true),
                    resmodel = table.Column<string>(name: "res_model", type: "text", nullable: true),
                    startdate = table.Column<DateTime>(name: "start_date", type: "timestamp without time zone", nullable: true),
                    stopdate = table.Column<DateTime>(name: "stop_date", type: "timestamp without time zone", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    allday = table.Column<bool>(type: "boolean", nullable: true),
                    recurrency = table.Column<bool>(type: "boolean", nullable: true),
                    followrecurrence = table.Column<bool>(name: "follow_recurrence", type: "boolean", nullable: true),
                    start = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    stop = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    duration = table.Column<double>(type: "double precision", nullable: true),
                    opportunityid = table.Column<Guid>(name: "opportunity_id", type: "uuid", nullable: true),
                    applicantid = table.Column<Guid>(name: "applicant_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("calendar_event_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "calendar_event_res_partner_rel",
                columns: table => new
                {
                    respartnerid = table.Column<Guid>(name: "res_partner_id", type: "uuid", nullable: false),
                    calendareventid = table.Column<Guid>(name: "calendar_event_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("calendar_event_res_partner_rel_pkey", x => new { x.respartnerid, x.calendareventid });
                    table.ForeignKey(
                        name: "calendar_event_res_partner_rel_calendar_event_id_fkey",
                        column: x => x.calendareventid,
                        principalTable: "calendar_event",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "calendar_event_type",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("calendar_event_type_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "meeting_category_rel",
                columns: table => new
                {
                    eventid = table.Column<Guid>(name: "event_id", type: "uuid", nullable: false),
                    typeid = table.Column<long>(name: "type_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("meeting_category_rel_pkey", x => new { x.eventid, x.typeid });
                    table.ForeignKey(
                        name: "meeting_category_rel_event_id_fkey",
                        column: x => x.eventid,
                        principalTable: "calendar_event",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "meeting_category_rel_type_id_fkey",
                        column: x => x.typeid,
                        principalTable: "calendar_event_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "calendar_filters",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    partnerchecked = table.Column<bool>(name: "partner_checked", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("calendar_filters_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "calendar_provider_config",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    externalcalendarprovider = table.Column<string>(name: "external_calendar_provider", type: "text", nullable: true),
                    calclientid = table.Column<string>(name: "cal_client_id", type: "text", nullable: true),
                    calclientsecret = table.Column<string>(name: "cal_client_secret", type: "text", nullable: true),
                    microsoftoutlookclientidentifier = table.Column<string>(name: "microsoft_outlook_client_identifier", type: "text", nullable: true),
                    microsoftoutlookclientsecret = table.Column<string>(name: "microsoft_outlook_client_secret", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("calendar_provider_config_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "calendar_recurrence",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    baseeventid = table.Column<Guid>(name: "base_event_id", type: "uuid", nullable: true),
                    interval = table.Column<long>(type: "bigint", nullable: true),
                    count = table.Column<long>(type: "bigint", nullable: true),
                    day = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    eventtz = table.Column<string>(name: "event_tz", type: "text", nullable: true),
                    rrule = table.Column<string>(type: "text", nullable: true),
                    rruletype = table.Column<string>(name: "rrule_type", type: "text", nullable: true),
                    endtype = table.Column<string>(name: "end_type", type: "text", nullable: true),
                    monthby = table.Column<string>(name: "month_by", type: "text", nullable: true),
                    weekday = table.Column<string>(type: "text", nullable: true),
                    byday = table.Column<string>(type: "text", nullable: true),
                    until = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    mon = table.Column<bool>(type: "boolean", nullable: true),
                    tue = table.Column<bool>(type: "boolean", nullable: true),
                    wed = table.Column<bool>(type: "boolean", nullable: true),
                    thu = table.Column<bool>(type: "boolean", nullable: true),
                    fri = table.Column<bool>(type: "boolean", nullable: true),
                    sat = table.Column<bool>(type: "boolean", nullable: true),
                    sun = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("calendar_recurrence_pkey", x => x.id);
                    table.ForeignKey(
                        name: "calendar_recurrence_base_event_id_fkey",
                        column: x => x.baseeventid,
                        principalTable: "calendar_event",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "change_lock_date",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    periodlockdate = table.Column<DateTime>(name: "period_lock_date", type: "timestamp without time zone", nullable: true),
                    fiscalyearlockdate = table.Column<DateTime>(name: "fiscalyear_lock_date", type: "timestamp without time zone", nullable: true),
                    taxlockdate = table.Column<DateTime>(name: "tax_lock_date", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("change_lock_date_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "change_password_own",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    newpassword = table.Column<string>(name: "new_password", type: "text", nullable: true),
                    confirmpassword = table.Column<string>(name: "confirm_password", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("change_password_own_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "change_password_user",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    wizardid = table.Column<Guid>(name: "wizard_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    userlogin = table.Column<string>(name: "user_login", type: "text", nullable: true),
                    newpasswd = table.Column<string>(name: "new_passwd", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("change_password_user_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "change_password_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("change_password_wizard_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "change_production_qty",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    moid = table.Column<Guid>(name: "mo_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    productqty = table.Column<decimal>(name: "product_qty", type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("change_production_qty_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "confirm_stock_sms",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("confirm_stock_sms_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "crm_convert_lead_mass_lead_rel",
                columns: table => new
                {
                    crmlead2opportunitypartnermassid = table.Column<Guid>(name: "crm_lead2opportunity_partner_mass_id", type: "uuid", nullable: false),
                    crmleadid = table.Column<Guid>(name: "crm_lead_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_convert_lead_mass_lead_rel_pkey", x => new { x.crmlead2opportunitypartnermassid, x.crmleadid });
                });

            migrationBuilder.CreateTable(
                name: "crm_iap_lead_helpers",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_iap_lead_helpers_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "crm_iap_lead_industry",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    revealids = table.Column<string>(name: "reveal_ids", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_iap_lead_industry_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "crm_iap_lead_industry_crm_iap_lead_mining_request_rel",
                columns: table => new
                {
                    crmiapleadminingrequestid = table.Column<Guid>(name: "crm_iap_lead_mining_request_id", type: "uuid", nullable: false),
                    crmiapleadindustryid = table.Column<long>(name: "crm_iap_lead_industry_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_iap_lead_industry_crm_iap_lead_mining_request_rel_pkey", x => new { x.crmiapleadminingrequestid, x.crmiapleadindustryid });
                    table.ForeignKey(
                        name: "crm_iap_lead_industry_crm_iap_lea_crm_iap_lead_industry_id_fkey",
                        column: x => x.crmiapleadindustryid,
                        principalTable: "crm_iap_lead_industry",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "crm_iap_lead_mining_request",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    leadnumber = table.Column<long>(name: "lead_number", type: "bigint", nullable: true),
                    teamid = table.Column<Guid>(name: "team_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    companysizemin = table.Column<long>(name: "company_size_min", type: "bigint", nullable: true),
                    companysizemax = table.Column<long>(name: "company_size_max", type: "bigint", nullable: true),
                    contactnumber = table.Column<long>(name: "contact_number", type: "bigint", nullable: true),
                    preferredroleid = table.Column<long>(name: "preferred_role_id", type: "bigint", nullable: true),
                    seniorityid = table.Column<long>(name: "seniority_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    searchtype = table.Column<string>(name: "search_type", type: "text", nullable: true),
                    errortype = table.Column<string>(name: "error_type", type: "text", nullable: true),
                    leadtype = table.Column<string>(name: "lead_type", type: "text", nullable: true),
                    contactfiltertype = table.Column<string>(name: "contact_filter_type", type: "text", nullable: true),
                    filteronsize = table.Column<bool>(name: "filter_on_size", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_iap_lead_mining_request_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "crm_iap_lead_mining_request_crm_iap_lead_role_rel",
                columns: table => new
                {
                    crmiapleadminingrequestid = table.Column<Guid>(name: "crm_iap_lead_mining_request_id", type: "uuid", nullable: false),
                    crmiapleadroleid = table.Column<long>(name: "crm_iap_lead_role_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_iap_lead_mining_request_crm_iap_lead_role_rel_pkey", x => new { x.crmiapleadminingrequestid, x.crmiapleadroleid });
                    table.ForeignKey(
                        name: "crm_iap_lead_mining_request__crm_iap_lead_mining_request__fkey2",
                        column: x => x.crmiapleadminingrequestid,
                        principalTable: "crm_iap_lead_mining_request",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "crm_iap_lead_mining_request_crm_tag_rel",
                columns: table => new
                {
                    crmiapleadminingrequestid = table.Column<Guid>(name: "crm_iap_lead_mining_request_id", type: "uuid", nullable: false),
                    crmtagid = table.Column<long>(name: "crm_tag_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_iap_lead_mining_request_crm_tag_rel_pkey", x => new { x.crmiapleadminingrequestid, x.crmtagid });
                    table.ForeignKey(
                        name: "crm_iap_lead_mining_request_c_crm_iap_lead_mining_request__fkey",
                        column: x => x.crmiapleadminingrequestid,
                        principalTable: "crm_iap_lead_mining_request",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "crm_iap_lead_mining_request_res_country_rel",
                columns: table => new
                {
                    crmiapleadminingrequestid = table.Column<Guid>(name: "crm_iap_lead_mining_request_id", type: "uuid", nullable: false),
                    rescountryid = table.Column<long>(name: "res_country_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_iap_lead_mining_request_res_country_rel_pkey", x => new { x.crmiapleadminingrequestid, x.rescountryid });
                    table.ForeignKey(
                        name: "crm_iap_lead_mining_request_r_crm_iap_lead_mining_request__fkey",
                        column: x => x.crmiapleadminingrequestid,
                        principalTable: "crm_iap_lead_mining_request",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "crm_iap_lead_mining_request_res_country_state_rel",
                columns: table => new
                {
                    crmiapleadminingrequestid = table.Column<Guid>(name: "crm_iap_lead_mining_request_id", type: "uuid", nullable: false),
                    rescountrystateid = table.Column<long>(name: "res_country_state_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_iap_lead_mining_request_res_country_state_rel_pkey", x => new { x.crmiapleadminingrequestid, x.rescountrystateid });
                    table.ForeignKey(
                        name: "crm_iap_lead_mining_request__crm_iap_lead_mining_request__fkey1",
                        column: x => x.crmiapleadminingrequestid,
                        principalTable: "crm_iap_lead_mining_request",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "crm_iap_lead_role",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    revealid = table.Column<string>(name: "reveal_id", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_iap_lead_role_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "crm_iap_lead_seniority",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    revealid = table.Column<string>(name: "reveal_id", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_iap_lead_seniority_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "crm_lead",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    campaignid = table.Column<Guid>(name: "campaign_id", type: "uuid", nullable: true),
                    sourceid = table.Column<Guid>(name: "source_id", type: "uuid", nullable: true),
                    mediumid = table.Column<Guid>(name: "medium_id", type: "uuid", nullable: true),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    messagebounce = table.Column<long>(name: "message_bounce", type: "bigint", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    teamid = table.Column<Guid>(name: "team_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    stageid = table.Column<long>(name: "stage_id", type: "bigint", nullable: true),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    recurringplan = table.Column<Guid>(name: "recurring_plan", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    title = table.Column<long>(type: "bigint", nullable: true),
                    langid = table.Column<long>(name: "lang_id", type: "bigint", nullable: true),
                    stateid = table.Column<long>(name: "state_id", type: "bigint", nullable: true),
                    countryid = table.Column<long>(name: "country_id", type: "bigint", nullable: true),
                    lostreasonid = table.Column<long>(name: "lost_reason_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    phonesanitized = table.Column<string>(name: "phone_sanitized", type: "text", nullable: true),
                    emailnormalized = table.Column<string>(name: "email_normalized", type: "text", nullable: true),
                    emailcc = table.Column<string>(name: "email_cc", type: "text", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    referred = table.Column<string>(type: "text", nullable: true),
                    type = table.Column<string>(type: "text", nullable: true),
                    priority = table.Column<string>(type: "text", nullable: true),
                    contactname = table.Column<string>(name: "contact_name", type: "text", nullable: true),
                    partnername = table.Column<string>(name: "partner_name", type: "text", nullable: true),
                    function = table.Column<string>(type: "text", nullable: true),
                    emailfrom = table.Column<string>(name: "email_from", type: "text", nullable: true),
                    phone = table.Column<string>(type: "text", nullable: true),
                    mobile = table.Column<string>(type: "text", nullable: true),
                    phonestate = table.Column<string>(name: "phone_state", type: "text", nullable: true),
                    emailstate = table.Column<string>(name: "email_state", type: "text", nullable: true),
                    website = table.Column<string>(type: "text", nullable: true),
                    street = table.Column<string>(type: "text", nullable: true),
                    street2 = table.Column<string>(type: "text", nullable: true),
                    zip = table.Column<string>(type: "text", nullable: true),
                    city = table.Column<string>(type: "text", nullable: true),
                    datedeadline = table.Column<DateTime>(name: "date_deadline", type: "timestamp without time zone", nullable: true),
                    leadproperties = table.Column<string>(name: "lead_properties", type: "jsonb", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    expectedrevenue = table.Column<decimal>(name: "expected_revenue", type: "numeric", nullable: true),
                    proratedrevenue = table.Column<decimal>(name: "prorated_revenue", type: "numeric", nullable: true),
                    recurringrevenue = table.Column<decimal>(name: "recurring_revenue", type: "numeric", nullable: true),
                    recurringrevenuemonthly = table.Column<decimal>(name: "recurring_revenue_monthly", type: "numeric", nullable: true),
                    recurringrevenuemonthlyprorated = table.Column<decimal>(name: "recurring_revenue_monthly_prorated", type: "numeric", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    dateclosed = table.Column<DateTime>(name: "date_closed", type: "timestamp without time zone", nullable: true),
                    dateactionlast = table.Column<DateTime>(name: "date_action_last", type: "timestamp without time zone", nullable: true),
                    dateopen = table.Column<DateTime>(name: "date_open", type: "timestamp without time zone", nullable: true),
                    datelaststageupdate = table.Column<DateTime>(name: "date_last_stage_update", type: "timestamp without time zone", nullable: true),
                    dateconversion = table.Column<DateTime>(name: "date_conversion", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    dayopen = table.Column<double>(name: "day_open", type: "double precision", nullable: true),
                    dayclose = table.Column<double>(name: "day_close", type: "double precision", nullable: true),
                    probability = table.Column<double>(type: "double precision", nullable: true),
                    automatedprobability = table.Column<double>(name: "automated_probability", type: "double precision", nullable: true),
                    revealid = table.Column<string>(name: "reveal_id", type: "text", nullable: true),
                    iapenrichdone = table.Column<bool>(name: "iap_enrich_done", type: "boolean", nullable: true),
                    leadminingrequestid = table.Column<Guid>(name: "lead_mining_request_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_lead_pkey", x => x.id);
                    table.ForeignKey(
                        name: "crm_lead_lead_mining_request_id_fkey",
                        column: x => x.leadminingrequestid,
                        principalTable: "crm_iap_lead_mining_request",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "crm_lead_crm_lead2opportunity_partner_mass_rel",
                columns: table => new
                {
                    crmlead2opportunitypartnermassid = table.Column<Guid>(name: "crm_lead2opportunity_partner_mass_id", type: "uuid", nullable: false),
                    crmleadid = table.Column<Guid>(name: "crm_lead_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_lead_crm_lead2opportunity_partner_mass_rel_pkey", x => new { x.crmlead2opportunitypartnermassid, x.crmleadid });
                    table.ForeignKey(
                        name: "crm_lead_crm_lead2opportunity_partner_mass_rel_crm_lead_id_fkey",
                        column: x => x.crmleadid,
                        principalTable: "crm_lead",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "crm_lead_crm_lead2opportunity_partner_rel",
                columns: table => new
                {
                    crmlead2opportunitypartnerid = table.Column<Guid>(name: "crm_lead2opportunity_partner_id", type: "uuid", nullable: false),
                    crmleadid = table.Column<Guid>(name: "crm_lead_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_lead_crm_lead2opportunity_partner_rel_pkey", x => new { x.crmlead2opportunitypartnerid, x.crmleadid });
                    table.ForeignKey(
                        name: "crm_lead_crm_lead2opportunity_partner_rel_crm_lead_id_fkey",
                        column: x => x.crmleadid,
                        principalTable: "crm_lead",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "crm_lead_lost",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    lostreasonid = table.Column<long>(name: "lost_reason_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    lostfeedback = table.Column<string>(name: "lost_feedback", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_lead_lost_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "crm_lead_pls_update",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    plsstartdate = table.Column<DateTime>(name: "pls_start_date", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_lead_pls_update_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "crm_lead_pls_update_crm_lead_scoring_frequency_field_rel",
                columns: table => new
                {
                    crmleadplsupdateid = table.Column<Guid>(name: "crm_lead_pls_update_id", type: "uuid", nullable: false),
                    crmleadscoringfrequencyfieldid = table.Column<Guid>(name: "crm_lead_scoring_frequency_field_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_lead_pls_update_crm_lead_scoring_frequency_field_rel_pkey", x => new { x.crmleadplsupdateid, x.crmleadscoringfrequencyfieldid });
                    table.ForeignKey(
                        name: "crm_lead_pls_update_crm_lead_scorin_crm_lead_pls_update_id_fkey",
                        column: x => x.crmleadplsupdateid,
                        principalTable: "crm_lead_pls_update",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "crm_lead_scoring_frequency",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    teamid = table.Column<Guid>(name: "team_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    variable = table.Column<string>(type: "text", nullable: true),
                    value = table.Column<string>(type: "text", nullable: true),
                    woncount = table.Column<decimal>(name: "won_count", type: "numeric", nullable: true),
                    lostcount = table.Column<decimal>(name: "lost_count", type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_lead_scoring_frequency_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "crm_lead_scoring_frequency_field",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    fieldid = table.Column<Guid>(name: "field_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_lead_scoring_frequency_field_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "crm_lead_website_visitor_rel",
                columns: table => new
                {
                    crmleadid = table.Column<Guid>(name: "crm_lead_id", type: "uuid", nullable: false),
                    websitevisitorid = table.Column<Guid>(name: "website_visitor_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_lead_website_visitor_rel_pkey", x => new { x.crmleadid, x.websitevisitorid });
                    table.ForeignKey(
                        name: "crm_lead_website_visitor_rel_crm_lead_id_fkey",
                        column: x => x.crmleadid,
                        principalTable: "crm_lead",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "crm_lead2opportunity_partner",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    leadid = table.Column<Guid>(name: "lead_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    teamid = table.Column<Guid>(name: "team_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    action = table.Column<string>(type: "text", nullable: true),
                    forceassignment = table.Column<bool>(name: "force_assignment", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_lead2opportunity_partner_pkey", x => x.id);
                    table.ForeignKey(
                        name: "crm_lead2opportunity_partner_lead_id_fkey",
                        column: x => x.leadid,
                        principalTable: "crm_lead",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "crm_lead2opportunity_partner_mass",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    leadid = table.Column<Guid>(name: "lead_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    teamid = table.Column<Guid>(name: "team_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    action = table.Column<string>(type: "text", nullable: true),
                    forceassignment = table.Column<bool>(name: "force_assignment", type: "boolean", nullable: true),
                    deduplicate = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_lead2opportunity_partner_mass_pkey", x => x.id);
                    table.ForeignKey(
                        name: "crm_lead2opportunity_partner_mass_lead_id_fkey",
                        column: x => x.leadid,
                        principalTable: "crm_lead",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "crm_lead2opportunity_partner_mass_res_users_rel",
                columns: table => new
                {
                    crmlead2opportunitypartnermassid = table.Column<Guid>(name: "crm_lead2opportunity_partner_mass_id", type: "uuid", nullable: false),
                    resusersid = table.Column<Guid>(name: "res_users_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_lead2opportunity_partner_mass_res_users_rel_pkey", x => new { x.crmlead2opportunitypartnermassid, x.resusersid });
                    table.ForeignKey(
                        name: "crm_lead2opportunity_partner__crm_lead2opportunity_partner_fkey",
                        column: x => x.crmlead2opportunitypartnermassid,
                        principalTable: "crm_lead2opportunity_partner_mass",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "crm_lost_reason",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_lost_reason_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "crm_merge_opportunity",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    teamid = table.Column<Guid>(name: "team_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_merge_opportunity_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "merge_opportunity_rel",
                columns: table => new
                {
                    mergeid = table.Column<Guid>(name: "merge_id", type: "uuid", nullable: false),
                    opportunityid = table.Column<Guid>(name: "opportunity_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("merge_opportunity_rel_pkey", x => new { x.mergeid, x.opportunityid });
                    table.ForeignKey(
                        name: "merge_opportunity_rel_merge_id_fkey",
                        column: x => x.mergeid,
                        principalTable: "crm_merge_opportunity",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "merge_opportunity_rel_opportunity_id_fkey",
                        column: x => x.opportunityid,
                        principalTable: "crm_lead",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "crm_quotation_partner",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    leadid = table.Column<Guid>(name: "lead_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    action = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_quotation_partner_pkey", x => x.id);
                    table.ForeignKey(
                        name: "crm_quotation_partner_lead_id_fkey",
                        column: x => x.leadid,
                        principalTable: "crm_lead",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "crm_recurring_plan",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    numberofmonths = table.Column<long>(name: "number_of_months", type: "bigint", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_recurring_plan_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "crm_stage",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    teamid = table.Column<Guid>(name: "team_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    requirements = table.Column<string>(type: "text", nullable: true),
                    iswon = table.Column<bool>(name: "is_won", type: "boolean", nullable: true),
                    fold = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_stage_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "crm_tag",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_tag_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "crm_tag_rel",
                columns: table => new
                {
                    leadid = table.Column<Guid>(name: "lead_id", type: "uuid", nullable: false),
                    tagid = table.Column<long>(name: "tag_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_tag_rel_pkey", x => new { x.leadid, x.tagid });
                    table.ForeignKey(
                        name: "crm_tag_rel_lead_id_fkey",
                        column: x => x.leadid,
                        principalTable: "crm_lead",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "crm_tag_rel_tag_id_fkey",
                        column: x => x.tagid,
                        principalTable: "crm_tag",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "crm_team",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    usequotations = table.Column<bool>(name: "use_quotations", type: "boolean", nullable: true),
                    invoicedtarget = table.Column<double>(name: "invoiced_target", type: "double precision", nullable: true),
                    aliasid = table.Column<Guid>(name: "alias_id", type: "uuid", nullable: true),
                    assignmentdomain = table.Column<string>(name: "assignment_domain", type: "text", nullable: true),
                    leadpropertiesdefinition = table.Column<string>(name: "lead_properties_definition", type: "jsonb", nullable: true),
                    useleads = table.Column<bool>(name: "use_leads", type: "boolean", nullable: true),
                    useopportunities = table.Column<bool>(name: "use_opportunities", type: "boolean", nullable: true),
                    assignmentoptout = table.Column<bool>(name: "assignment_optout", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_team_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "crm_team_member",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    crmteamid = table.Column<Guid>(name: "crm_team_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    assignmentmax = table.Column<long>(name: "assignment_max", type: "bigint", nullable: true),
                    assignmentdomain = table.Column<string>(name: "assignment_domain", type: "text", nullable: true),
                    assignmentoptout = table.Column<bool>(name: "assignment_optout", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crm_team_member_pkey", x => x.id);
                    table.ForeignKey(
                        name: "crm_team_member_crm_team_id_fkey",
                        column: x => x.crmteamid,
                        principalTable: "crm_team",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "crossovered_budget",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    dateto = table.Column<DateTime>(name: "date_to", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crossovered_budget_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "crossovered_budget_lines",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    crossoveredbudgetid = table.Column<Guid>(name: "crossovered_budget_id", type: "uuid", nullable: true),
                    analyticaccountid = table.Column<Guid>(name: "analytic_account_id", type: "uuid", nullable: true),
                    generalbudgetid = table.Column<Guid>(name: "general_budget_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    crossoveredbudgetstate = table.Column<string>(name: "crossovered_budget_state", type: "text", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    dateto = table.Column<DateTime>(name: "date_to", type: "timestamp without time zone", nullable: true),
                    paiddate = table.Column<DateTime>(name: "paid_date", type: "timestamp without time zone", nullable: true),
                    plannedamount = table.Column<decimal>(name: "planned_amount", type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("crossovered_budget_lines_pkey", x => x.id);
                    table.ForeignKey(
                        name: "crossovered_budget_lines_analytic_account_id_fkey",
                        column: x => x.analyticaccountid,
                        principalTable: "account_analytic_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "crossovered_budget_lines_crossovered_budget_id_fkey",
                        column: x => x.crossoveredbudgetid,
                        principalTable: "crossovered_budget",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "crossovered_budget_lines_general_budget_id_fkey",
                        column: x => x.generalbudgetid,
                        principalTable: "account_budget_post",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "decimal_precision",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    digits = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("decimal_precision_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "digest_digest",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    periodicity = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    nextrundate = table.Column<DateTime>(name: "next_run_date", type: "timestamp without time zone", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    kpiresusersconnected = table.Column<bool>(name: "kpi_res_users_connected", type: "boolean", nullable: true),
                    kpimailmessagetotal = table.Column<bool>(name: "kpi_mail_message_total", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    kpiaccounttotalrevenue = table.Column<bool>(name: "kpi_account_total_revenue", type: "boolean", nullable: true),
                    kpiallsaletotal = table.Column<bool>(name: "kpi_all_sale_total", type: "boolean", nullable: true),
                    kpipostotal = table.Column<bool>(name: "kpi_pos_total", type: "boolean", nullable: true),
                    kpicrmleadcreated = table.Column<bool>(name: "kpi_crm_lead_created", type: "boolean", nullable: true),
                    kpicrmopportunitieswon = table.Column<bool>(name: "kpi_crm_opportunities_won", type: "boolean", nullable: true),
                    kpiprojecttaskopened = table.Column<bool>(name: "kpi_project_task_opened", type: "boolean", nullable: true),
                    kpihrrecruitmentnewcolleagues = table.Column<bool>(name: "kpi_hr_recruitment_new_colleagues", type: "boolean", nullable: true),
                    kpiwebsitesaletotal = table.Column<bool>(name: "kpi_website_sale_total", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("digest_digest_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "digest_digest_res_users_rel",
                columns: table => new
                {
                    digestdigestid = table.Column<Guid>(name: "digest_digest_id", type: "uuid", nullable: false),
                    resusersid = table.Column<Guid>(name: "res_users_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("digest_digest_res_users_rel_pkey", x => new { x.digestdigestid, x.resusersid });
                    table.ForeignKey(
                        name: "digest_digest_res_users_rel_digest_digest_id_fkey",
                        column: x => x.digestdigestid,
                        principalTable: "digest_digest",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "digest_tip",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    groupid = table.Column<Guid>(name: "group_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    tipdescription = table.Column<string>(name: "tip_description", type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("digest_tip_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "digest_tip_res_users_rel",
                columns: table => new
                {
                    digesttipid = table.Column<Guid>(name: "digest_tip_id", type: "uuid", nullable: false),
                    resusersid = table.Column<Guid>(name: "res_users_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("digest_tip_res_users_rel_pkey", x => new { x.digesttipid, x.resusersid });
                    table.ForeignKey(
                        name: "digest_tip_res_users_rel_digest_tip_id_fkey",
                        column: x => x.digesttipid,
                        principalTable: "digest_tip",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "email_template_attachment_rel",
                columns: table => new
                {
                    emailtemplateid = table.Column<Guid>(name: "email_template_id", type: "uuid", nullable: false),
                    attachmentid = table.Column<Guid>(name: "attachment_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("email_template_attachment_rel_pkey", x => new { x.emailtemplateid, x.attachmentid });
                });

            migrationBuilder.CreateTable(
                name: "employee_category_rel",
                columns: table => new
                {
                    empid = table.Column<Guid>(name: "emp_id", type: "uuid", nullable: false),
                    categoryid = table.Column<long>(name: "category_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("employee_category_rel_pkey", x => new { x.empid, x.categoryid });
                });

            migrationBuilder.CreateTable(
                name: "expense_tax",
                columns: table => new
                {
                    expenseid = table.Column<Guid>(name: "expense_id", type: "uuid", nullable: false),
                    taxid = table.Column<Guid>(name: "tax_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("expense_tax_pkey", x => new { x.expenseid, x.taxid });
                    table.ForeignKey(
                        name: "expense_tax_tax_id_fkey",
                        column: x => x.taxid,
                        principalTable: "account_tax",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "fetchmail_server",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    port = table.Column<long>(type: "bigint", nullable: true),
                    objectid = table.Column<Guid>(name: "object_id", type: "uuid", nullable: true),
                    priority = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    server = table.Column<string>(type: "text", nullable: true),
                    servertype = table.Column<string>(name: "server_type", type: "text", nullable: true),
                    user = table.Column<string>(type: "text", nullable: true),
                    password = table.Column<string>(type: "text", nullable: true),
                    script = table.Column<string>(type: "text", nullable: true),
                    configuration = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    isssl = table.Column<bool>(name: "is_ssl", type: "boolean", nullable: true),
                    attach = table.Column<bool>(type: "boolean", nullable: true),
                    original = table.Column<bool>(type: "boolean", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    googlegmailaccesstokenexpiration = table.Column<long>(name: "google_gmail_access_token_expiration", type: "bigint", nullable: true),
                    googlegmailauthorizationcode = table.Column<string>(name: "google_gmail_authorization_code", type: "text", nullable: true),
                    googlegmailrefreshtoken = table.Column<string>(name: "google_gmail_refresh_token", type: "text", nullable: true),
                    googlegmailaccesstoken = table.Column<string>(name: "google_gmail_access_token", type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("fetchmail_server_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "fleet_service_type",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    category = table.Column<string>(type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("fleet_service_type_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "fleet_service_type_fleet_vehicle_log_contract_rel",
                columns: table => new
                {
                    fleetvehiclelogcontractid = table.Column<Guid>(name: "fleet_vehicle_log_contract_id", type: "uuid", nullable: false),
                    fleetservicetypeid = table.Column<long>(name: "fleet_service_type_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("fleet_service_type_fleet_vehicle_log_contract_rel_pkey", x => new { x.fleetvehiclelogcontractid, x.fleetservicetypeid });
                    table.ForeignKey(
                        name: "fleet_service_type_fleet_vehicle_log_fleet_service_type_id_fkey",
                        column: x => x.fleetservicetypeid,
                        principalTable: "fleet_service_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "fleet_vehicle",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    managerid = table.Column<Guid>(name: "manager_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    driverid = table.Column<Guid>(name: "driver_id", type: "uuid", nullable: true),
                    futuredriverid = table.Column<Guid>(name: "future_driver_id", type: "uuid", nullable: true),
                    modelid = table.Column<Guid>(name: "model_id", type: "uuid", nullable: true),
                    brandid = table.Column<long>(name: "brand_id", type: "bigint", nullable: true),
                    stateid = table.Column<long>(name: "state_id", type: "bigint", nullable: true),
                    seats = table.Column<long>(type: "bigint", nullable: true),
                    doors = table.Column<long>(type: "bigint", nullable: true),
                    horsepower = table.Column<long>(type: "bigint", nullable: true),
                    power = table.Column<long>(type: "bigint", nullable: true),
                    categoryid = table.Column<long>(name: "category_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    licenseplate = table.Column<string>(name: "license_plate", type: "text", nullable: true),
                    vinsn = table.Column<string>(name: "vin_sn", type: "text", nullable: true),
                    color = table.Column<string>(type: "text", nullable: true),
                    location = table.Column<string>(type: "text", nullable: true),
                    modelyear = table.Column<string>(name: "model_year", type: "text", nullable: true),
                    odometerunit = table.Column<string>(name: "odometer_unit", type: "text", nullable: true),
                    transmission = table.Column<string>(type: "text", nullable: true),
                    fueltype = table.Column<string>(name: "fuel_type", type: "text", nullable: true),
                    co2standard = table.Column<string>(name: "co2_standard", type: "text", nullable: true),
                    frametype = table.Column<string>(name: "frame_type", type: "text", nullable: true),
                    nextassignationdate = table.Column<DateTime>(name: "next_assignation_date", type: "timestamp without time zone", nullable: true),
                    acquisitiondate = table.Column<DateTime>(name: "acquisition_date", type: "timestamp without time zone", nullable: true),
                    writeoffdate = table.Column<DateTime>(name: "write_off_date", type: "timestamp without time zone", nullable: true),
                    firstcontractdate = table.Column<DateTime>(name: "first_contract_date", type: "timestamp without time zone", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    trailerhook = table.Column<bool>(name: "trailer_hook", type: "boolean", nullable: true),
                    plantochangecar = table.Column<bool>(name: "plan_to_change_car", type: "boolean", nullable: true),
                    plantochangebike = table.Column<bool>(name: "plan_to_change_bike", type: "boolean", nullable: true),
                    electricassistance = table.Column<bool>(name: "electric_assistance", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    horsepowertax = table.Column<double>(name: "horsepower_tax", type: "double precision", nullable: true),
                    co2 = table.Column<double>(type: "double precision", nullable: true),
                    carvalue = table.Column<double>(name: "car_value", type: "double precision", nullable: true),
                    netcarvalue = table.Column<double>(name: "net_car_value", type: "double precision", nullable: true),
                    residualvalue = table.Column<double>(name: "residual_value", type: "double precision", nullable: true),
                    framesize = table.Column<double>(name: "frame_size", type: "double precision", nullable: true),
                    driveremployeeid = table.Column<Guid>(name: "driver_employee_id", type: "uuid", nullable: true),
                    futuredriveremployeeid = table.Column<Guid>(name: "future_driver_employee_id", type: "uuid", nullable: true),
                    mobilitycard = table.Column<string>(name: "mobility_card", type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("fleet_vehicle_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "fleet_vehicle_assignation_log",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    vehicleid = table.Column<Guid>(name: "vehicle_id", type: "uuid", nullable: true),
                    driverid = table.Column<Guid>(name: "driver_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    datestart = table.Column<DateTime>(name: "date_start", type: "timestamp without time zone", nullable: true),
                    dateend = table.Column<DateTime>(name: "date_end", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    driveremployeeid = table.Column<Guid>(name: "driver_employee_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("fleet_vehicle_assignation_log_pkey", x => x.id);
                    table.ForeignKey(
                        name: "fleet_vehicle_assignation_log_vehicle_id_fkey",
                        column: x => x.vehicleid,
                        principalTable: "fleet_vehicle",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "fleet_vehicle_log_contract",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    vehicleid = table.Column<Guid>(name: "vehicle_id", type: "uuid", nullable: true),
                    costsubtypeid = table.Column<long>(name: "cost_subtype_id", type: "bigint", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    insurerid = table.Column<Guid>(name: "insurer_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    insref = table.Column<string>(name: "ins_ref", type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    costfrequency = table.Column<string>(name: "cost_frequency", type: "text", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    startdate = table.Column<DateTime>(name: "start_date", type: "timestamp without time zone", nullable: true),
                    expirationdate = table.Column<DateTime>(name: "expiration_date", type: "timestamp without time zone", nullable: true),
                    notes = table.Column<string>(type: "text", nullable: true),
                    amount = table.Column<decimal>(type: "numeric", nullable: true),
                    costgenerated = table.Column<decimal>(name: "cost_generated", type: "numeric", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("fleet_vehicle_log_contract_pkey", x => x.id);
                    table.ForeignKey(
                        name: "fleet_vehicle_log_contract_cost_subtype_id_fkey",
                        column: x => x.costsubtypeid,
                        principalTable: "fleet_service_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "fleet_vehicle_log_contract_vehicle_id_fkey",
                        column: x => x.vehicleid,
                        principalTable: "fleet_vehicle",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "fleet_vehicle_log_services",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    vehicleid = table.Column<Guid>(name: "vehicle_id", type: "uuid", nullable: false),
                    managerid = table.Column<Guid>(name: "manager_id", type: "uuid", nullable: true),
                    odometerid = table.Column<Guid>(name: "odometer_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    purchaserid = table.Column<Guid>(name: "purchaser_id", type: "uuid", nullable: true),
                    vendorid = table.Column<Guid>(name: "vendor_id", type: "uuid", nullable: true),
                    servicetypeid = table.Column<long>(name: "service_type_id", type: "bigint", nullable: false),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    invref = table.Column<string>(name: "inv_ref", type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    notes = table.Column<string>(type: "text", nullable: true),
                    amount = table.Column<decimal>(type: "numeric", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    purchaseremployeeid = table.Column<Guid>(name: "purchaser_employee_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("fleet_vehicle_log_services_pkey", x => x.id);
                    table.ForeignKey(
                        name: "fleet_vehicle_log_services_service_type_id_fkey",
                        column: x => x.servicetypeid,
                        principalTable: "fleet_service_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "fleet_vehicle_log_services_vehicle_id_fkey",
                        column: x => x.vehicleid,
                        principalTable: "fleet_vehicle",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "fleet_vehicle_model",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    brandid = table.Column<long>(name: "brand_id", type: "bigint", nullable: false),
                    categoryid = table.Column<long>(name: "category_id", type: "bigint", nullable: true),
                    modelyear = table.Column<long>(name: "model_year", type: "bigint", nullable: true),
                    seats = table.Column<long>(type: "bigint", nullable: true),
                    doors = table.Column<long>(type: "bigint", nullable: true),
                    power = table.Column<long>(type: "bigint", nullable: true),
                    horsepower = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    vehicletype = table.Column<string>(name: "vehicle_type", type: "text", nullable: true),
                    transmission = table.Column<string>(type: "text", nullable: true),
                    color = table.Column<string>(type: "text", nullable: true),
                    co2standard = table.Column<string>(name: "co2_standard", type: "text", nullable: true),
                    defaultfueltype = table.Column<string>(name: "default_fuel_type", type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    trailerhook = table.Column<bool>(name: "trailer_hook", type: "boolean", nullable: true),
                    electricassistance = table.Column<bool>(name: "electric_assistance", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    defaultco2 = table.Column<double>(name: "default_co2", type: "double precision", nullable: true),
                    horsepowertax = table.Column<double>(name: "horsepower_tax", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("fleet_vehicle_model_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "fleet_vehicle_model_brand",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    modelcount = table.Column<long>(name: "model_count", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("fleet_vehicle_model_brand_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "fleet_vehicle_model_category",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    sequence = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("fleet_vehicle_model_category_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "fleet_vehicle_model_vendors",
                columns: table => new
                {
                    modelid = table.Column<Guid>(name: "model_id", type: "uuid", nullable: false),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("fleet_vehicle_model_vendors_pkey", x => new { x.modelid, x.partnerid });
                    table.ForeignKey(
                        name: "fleet_vehicle_model_vendors_model_id_fkey",
                        column: x => x.modelid,
                        principalTable: "fleet_vehicle_model",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "fleet_vehicle_odometer",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    vehicleid = table.Column<Guid>(name: "vehicle_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    value = table.Column<double>(type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("fleet_vehicle_odometer_pkey", x => x.id);
                    table.ForeignKey(
                        name: "fleet_vehicle_odometer_vehicle_id_fkey",
                        column: x => x.vehicleid,
                        principalTable: "fleet_vehicle",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "fleet_vehicle_state",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("fleet_vehicle_state_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "fleet_vehicle_tag",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("fleet_vehicle_tag_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "fleet_vehicle_vehicle_tag_rel",
                columns: table => new
                {
                    vehicletagid = table.Column<Guid>(name: "vehicle_tag_id", type: "uuid", nullable: false),
                    tagid = table.Column<long>(name: "tag_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("fleet_vehicle_vehicle_tag_rel_pkey", x => new { x.vehicletagid, x.tagid });
                    table.ForeignKey(
                        name: "fleet_vehicle_vehicle_tag_rel_tag_id_fkey",
                        column: x => x.tagid,
                        principalTable: "fleet_vehicle_tag",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "fleet_vehicle_vehicle_tag_rel_vehicle_tag_id_fkey",
                        column: x => x.vehicletagid,
                        principalTable: "fleet_vehicle",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "followup_followup",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("followup_followup_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "followup_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    followupid = table.Column<Guid>(name: "followup_id", type: "uuid", nullable: true),
                    delay = table.Column<long>(type: "bigint", nullable: true),
                    manualactionresponsibleid = table.Column<Guid>(name: "manual_action_responsible_id", type: "uuid", nullable: true),
                    emailtemplateid = table.Column<Guid>(name: "email_template_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    description = table.Column<string>(type: "jsonb", nullable: true),
                    manualactionnote = table.Column<string>(name: "manual_action_note", type: "text", nullable: true),
                    sendemail = table.Column<bool>(name: "send_email", type: "boolean", nullable: true),
                    sendletter = table.Column<bool>(name: "send_letter", type: "boolean", nullable: true),
                    manualaction = table.Column<bool>(name: "manual_action", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("followup_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "followup_line_followup_id_fkey",
                        column: x => x.followupid,
                        principalTable: "followup_followup",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "followup_print",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    followupid = table.Column<Guid>(name: "followup_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    emailsubject = table.Column<string>(name: "email_subject", type: "text", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    emailbody = table.Column<string>(name: "email_body", type: "text", nullable: true),
                    summary = table.Column<string>(type: "text", nullable: true),
                    emailconf = table.Column<bool>(name: "email_conf", type: "boolean", nullable: true),
                    partnerlang = table.Column<bool>(name: "partner_lang", type: "boolean", nullable: true),
                    testprint = table.Column<bool>(name: "test_print", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("followup_print_pkey", x => x.id);
                    table.ForeignKey(
                        name: "followup_print_followup_id_fkey",
                        column: x => x.followupid,
                        principalTable: "followup_followup",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "partner_stat_rel",
                columns: table => new
                {
                    osvmemoryid = table.Column<Guid>(name: "osv_memory_id", type: "uuid", nullable: false),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("partner_stat_rel_pkey", x => new { x.osvmemoryid, x.partnerid });
                    table.ForeignKey(
                        name: "partner_stat_rel_osv_memory_id_fkey",
                        column: x => x.osvmemoryid,
                        principalTable: "followup_print",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "followup_sending_results",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    needprinting = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("followup_sending_results_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_applicant",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    campaignid = table.Column<Guid>(name: "campaign_id", type: "uuid", nullable: true),
                    sourceid = table.Column<Guid>(name: "source_id", type: "uuid", nullable: true),
                    mediumid = table.Column<Guid>(name: "medium_id", type: "uuid", nullable: true),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    stageid = table.Column<long>(name: "stage_id", type: "bigint", nullable: true),
                    laststageid = table.Column<long>(name: "last_stage_id", type: "bigint", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    jobid = table.Column<Guid>(name: "job_id", type: "uuid", nullable: true),
                    typeid = table.Column<long>(name: "type_id", type: "bigint", nullable: true),
                    departmentid = table.Column<Guid>(name: "department_id", type: "uuid", nullable: true),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    empid = table.Column<Guid>(name: "emp_id", type: "uuid", nullable: true),
                    refusereasonid = table.Column<Guid>(name: "refuse_reason_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    emailcc = table.Column<string>(name: "email_cc", type: "text", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    emailfrom = table.Column<string>(name: "email_from", type: "text", nullable: true),
                    priority = table.Column<string>(type: "text", nullable: true),
                    salaryproposedextra = table.Column<string>(name: "salary_proposed_extra", type: "text", nullable: true),
                    salaryexpectedextra = table.Column<string>(name: "salary_expected_extra", type: "text", nullable: true),
                    partnername = table.Column<string>(name: "partner_name", type: "text", nullable: true),
                    partnerphone = table.Column<string>(name: "partner_phone", type: "text", nullable: true),
                    partnermobile = table.Column<string>(name: "partner_mobile", type: "text", nullable: true),
                    kanbanstate = table.Column<string>(name: "kanban_state", type: "text", nullable: true),
                    linkedinprofile = table.Column<string>(name: "linkedin_profile", type: "text", nullable: true),
                    availability = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    dateclosed = table.Column<DateTime>(name: "date_closed", type: "timestamp without time zone", nullable: true),
                    dateopen = table.Column<DateTime>(name: "date_open", type: "timestamp without time zone", nullable: true),
                    datelaststageupdate = table.Column<DateTime>(name: "date_last_stage_update", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    probability = table.Column<double>(type: "double precision", nullable: true),
                    salaryproposed = table.Column<double>(name: "salary_proposed", type: "double precision", nullable: true),
                    salaryexpected = table.Column<double>(name: "salary_expected", type: "double precision", nullable: true),
                    delayclose = table.Column<double>(name: "delay_close", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_applicant_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_applicant_category",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_applicant_category_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_applicant_hr_applicant_category_rel",
                columns: table => new
                {
                    hrapplicantid = table.Column<Guid>(name: "hr_applicant_id", type: "uuid", nullable: false),
                    hrapplicantcategoryid = table.Column<long>(name: "hr_applicant_category_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_applicant_hr_applicant_category_rel_pkey", x => new { x.hrapplicantid, x.hrapplicantcategoryid });
                    table.ForeignKey(
                        name: "hr_applicant_hr_applicant_categor_hr_applicant_category_id_fkey",
                        column: x => x.hrapplicantcategoryid,
                        principalTable: "hr_applicant_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "hr_applicant_hr_applicant_category_rel_hr_applicant_id_fkey",
                        column: x => x.hrapplicantid,
                        principalTable: "hr_applicant",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_applicant_hr_skill_rel",
                columns: table => new
                {
                    hrapplicantid = table.Column<Guid>(name: "hr_applicant_id", type: "uuid", nullable: false),
                    hrskillid = table.Column<Guid>(name: "hr_skill_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_applicant_hr_skill_rel_pkey", x => new { x.hrapplicantid, x.hrskillid });
                    table.ForeignKey(
                        name: "hr_applicant_hr_skill_rel_hr_applicant_id_fkey",
                        column: x => x.hrapplicantid,
                        principalTable: "hr_applicant",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_applicant_refuse_reason",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    templateid = table.Column<Guid>(name: "template_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_applicant_refuse_reason_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_applicant_res_users_interviewers_rel",
                columns: table => new
                {
                    hrapplicantid = table.Column<Guid>(name: "hr_applicant_id", type: "uuid", nullable: false),
                    resusersid = table.Column<Guid>(name: "res_users_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_applicant_res_users_interviewers_rel_pkey", x => new { x.hrapplicantid, x.resusersid });
                    table.ForeignKey(
                        name: "hr_applicant_res_users_interviewers_rel_hr_applicant_id_fkey",
                        column: x => x.hrapplicantid,
                        principalTable: "hr_applicant",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_applicant_skill",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    applicantid = table.Column<Guid>(name: "applicant_id", type: "uuid", nullable: true),
                    skillid = table.Column<Guid>(name: "skill_id", type: "uuid", nullable: true),
                    skilllevelid = table.Column<long>(name: "skill_level_id", type: "bigint", nullable: true),
                    skilltypeid = table.Column<long>(name: "skill_type_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_applicant_skill_pkey", x => x.id);
                    table.ForeignKey(
                        name: "hr_applicant_skill_applicant_id_fkey",
                        column: x => x.applicantid,
                        principalTable: "hr_applicant",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_attendance",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    employeeid = table.Column<Guid>(name: "employee_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    checkin = table.Column<DateTime>(name: "check_in", type: "timestamp without time zone", nullable: true),
                    checkout = table.Column<DateTime>(name: "check_out", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    workedhours = table.Column<double>(name: "worked_hours", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_attendance_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_attendance_overtime",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    employeeid = table.Column<Guid>(name: "employee_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    adjustment = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    duration = table.Column<double>(type: "double precision", nullable: true),
                    durationreal = table.Column<double>(name: "duration_real", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_attendance_overtime_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_contract",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    structuretypeid = table.Column<long>(name: "structure_type_id", type: "bigint", nullable: true),
                    employeeid = table.Column<Guid>(name: "employee_id", type: "uuid", nullable: true),
                    departmentid = table.Column<Guid>(name: "department_id", type: "uuid", nullable: true),
                    jobid = table.Column<Guid>(name: "job_id", type: "uuid", nullable: true),
                    resourcecalendarid = table.Column<Guid>(name: "resource_calendar_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    contracttypeid = table.Column<long>(name: "contract_type_id", type: "bigint", nullable: true),
                    hrresponsibleid = table.Column<Guid>(name: "hr_responsible_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    kanbanstate = table.Column<string>(name: "kanban_state", type: "text", nullable: true),
                    datestart = table.Column<DateTime>(name: "date_start", type: "timestamp without time zone", nullable: true),
                    dateend = table.Column<DateTime>(name: "date_end", type: "timestamp without time zone", nullable: true),
                    trialdateend = table.Column<DateTime>(name: "trial_date_end", type: "timestamp without time zone", nullable: true),
                    notes = table.Column<string>(type: "text", nullable: true),
                    wage = table.Column<decimal>(type: "numeric", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_contract_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_contract_type",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_contract_type_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_department",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    parentid = table.Column<Guid>(name: "parent_id", type: "uuid", nullable: true),
                    managerid = table.Column<Guid>(name: "manager_id", type: "uuid", nullable: true),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    masterdepartmentid = table.Column<Guid>(name: "master_department_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    completename = table.Column<string>(name: "complete_name", type: "text", nullable: true),
                    parentpath = table.Column<string>(name: "parent_path", type: "text", nullable: true),
                    note = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_department_pkey", x => x.id);
                    table.ForeignKey(
                        name: "hr_department_master_department_id_fkey",
                        column: x => x.masterdepartmentid,
                        principalTable: "hr_department",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "hr_department_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "hr_department",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "hr_department_hr_leave_stress_day_rel",
                columns: table => new
                {
                    hrleavestressdayid = table.Column<Guid>(name: "hr_leave_stress_day_id", type: "uuid", nullable: false),
                    hrdepartmentid = table.Column<Guid>(name: "hr_department_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_department_hr_leave_stress_day_rel_pkey", x => new { x.hrleavestressdayid, x.hrdepartmentid });
                    table.ForeignKey(
                        name: "hr_department_hr_leave_stress_day_rel_hr_department_id_fkey",
                        column: x => x.hrdepartmentid,
                        principalTable: "hr_department",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_department_mail_channel_rel",
                columns: table => new
                {
                    mailchannelid = table.Column<Guid>(name: "mail_channel_id", type: "uuid", nullable: false),
                    hrdepartmentid = table.Column<Guid>(name: "hr_department_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_department_mail_channel_rel_pkey", x => new { x.mailchannelid, x.hrdepartmentid });
                    table.ForeignKey(
                        name: "hr_department_mail_channel_rel_hr_department_id_fkey",
                        column: x => x.hrdepartmentid,
                        principalTable: "hr_department",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_departure_reason",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_departure_reason_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_departure_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    departurereasonid = table.Column<long>(name: "departure_reason_id", type: "bigint", nullable: true),
                    employeeid = table.Column<Guid>(name: "employee_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    departuredate = table.Column<DateTime>(name: "departure_date", type: "timestamp without time zone", nullable: true),
                    departuredescription = table.Column<string>(name: "departure_description", type: "text", nullable: true),
                    archiveprivateaddress = table.Column<bool>(name: "archive_private_address", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    setdateend = table.Column<bool>(name: "set_date_end", type: "boolean", nullable: true),
                    cancelleaves = table.Column<bool>(name: "cancel_leaves", type: "boolean", nullable: true),
                    archiveallocation = table.Column<bool>(name: "archive_allocation", type: "boolean", nullable: true),
                    releasecampanycar = table.Column<bool>(name: "release_campany_car", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_departure_wizard_pkey", x => x.id);
                    table.ForeignKey(
                        name: "hr_departure_wizard_departure_reason_id_fkey",
                        column: x => x.departurereasonid,
                        principalTable: "hr_departure_reason",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_employee",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    resourceid = table.Column<Guid>(name: "resource_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    resourcecalendarid = table.Column<Guid>(name: "resource_calendar_id", type: "uuid", nullable: true),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    departmentid = table.Column<Guid>(name: "department_id", type: "uuid", nullable: true),
                    jobid = table.Column<Guid>(name: "job_id", type: "uuid", nullable: true),
                    addressid = table.Column<Guid>(name: "address_id", type: "uuid", nullable: true),
                    workcontactid = table.Column<Guid>(name: "work_contact_id", type: "uuid", nullable: true),
                    worklocationid = table.Column<Guid>(name: "work_location_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    parentid = table.Column<Guid>(name: "parent_id", type: "uuid", nullable: true),
                    coachid = table.Column<Guid>(name: "coach_id", type: "uuid", nullable: true),
                    addresshomeid = table.Column<Guid>(name: "address_home_id", type: "uuid", nullable: true),
                    countryid = table.Column<long>(name: "country_id", type: "bigint", nullable: true),
                    children = table.Column<long>(type: "bigint", nullable: true),
                    countryofbirth = table.Column<long>(name: "country_of_birth", type: "bigint", nullable: true),
                    bankaccountid = table.Column<Guid>(name: "bank_account_id", type: "uuid", nullable: true),
                    kmhomework = table.Column<long>(name: "km_home_work", type: "bigint", nullable: true),
                    departurereasonid = table.Column<long>(name: "departure_reason_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    jobtitle = table.Column<string>(name: "job_title", type: "text", nullable: true),
                    workphone = table.Column<string>(name: "work_phone", type: "text", nullable: true),
                    mobilephone = table.Column<string>(name: "mobile_phone", type: "text", nullable: true),
                    workemail = table.Column<string>(name: "work_email", type: "text", nullable: true),
                    employeetype = table.Column<string>(name: "employee_type", type: "text", nullable: true),
                    gender = table.Column<string>(type: "text", nullable: true),
                    marital = table.Column<string>(type: "text", nullable: true),
                    spousecompletename = table.Column<string>(name: "spouse_complete_name", type: "text", nullable: true),
                    placeofbirth = table.Column<string>(name: "place_of_birth", type: "text", nullable: true),
                    ssnid = table.Column<string>(type: "text", nullable: true),
                    sinid = table.Column<string>(type: "text", nullable: true),
                    identificationid = table.Column<string>(name: "identification_id", type: "text", nullable: true),
                    passportid = table.Column<string>(name: "passport_id", type: "text", nullable: true),
                    permitno = table.Column<string>(name: "permit_no", type: "text", nullable: true),
                    visano = table.Column<string>(name: "visa_no", type: "text", nullable: true),
                    certificate = table.Column<string>(type: "text", nullable: true),
                    studyfield = table.Column<string>(name: "study_field", type: "text", nullable: true),
                    studyschool = table.Column<string>(name: "study_school", type: "text", nullable: true),
                    emergencycontact = table.Column<string>(name: "emergency_contact", type: "text", nullable: true),
                    emergencyphone = table.Column<string>(name: "emergency_phone", type: "text", nullable: true),
                    barcode = table.Column<string>(type: "text", nullable: true),
                    pin = table.Column<string>(type: "text", nullable: true),
                    spousebirthdate = table.Column<DateTime>(name: "spouse_birthdate", type: "timestamp without time zone", nullable: true),
                    birthday = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    visaexpire = table.Column<DateTime>(name: "visa_expire", type: "timestamp without time zone", nullable: true),
                    workpermitexpirationdate = table.Column<DateTime>(name: "work_permit_expiration_date", type: "timestamp without time zone", nullable: true),
                    departuredate = table.Column<DateTime>(name: "departure_date", type: "timestamp without time zone", nullable: true),
                    additionalnote = table.Column<string>(name: "additional_note", type: "text", nullable: true),
                    notes = table.Column<string>(type: "text", nullable: true),
                    departuredescription = table.Column<string>(name: "departure_description", type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    workpermitscheduledactivity = table.Column<bool>(name: "work_permit_scheduled_activity", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    contractid = table.Column<Guid>(name: "contract_id", type: "uuid", nullable: true),
                    vehicle = table.Column<string>(type: "text", nullable: true),
                    firstcontractdate = table.Column<DateTime>(name: "first_contract_date", type: "timestamp without time zone", nullable: true),
                    contractwarning = table.Column<bool>(name: "contract_warning", type: "boolean", nullable: true),
                    expensemanagerid = table.Column<Guid>(name: "expense_manager_id", type: "uuid", nullable: true),
                    lastattendanceid = table.Column<Guid>(name: "last_attendance_id", type: "uuid", nullable: true),
                    lastcheckin = table.Column<DateTime>(name: "last_check_in", type: "timestamp without time zone", nullable: true),
                    lastcheckout = table.Column<DateTime>(name: "last_check_out", type: "timestamp without time zone", nullable: true),
                    leavemanagerid = table.Column<Guid>(name: "leave_manager_id", type: "uuid", nullable: true),
                    mobilitycard = table.Column<string>(name: "mobility_card", type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_employee_pkey", x => x.id);
                    table.ForeignKey(
                        name: "hr_employee_coach_id_fkey",
                        column: x => x.coachid,
                        principalTable: "hr_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "hr_employee_contract_id_fkey",
                        column: x => x.contractid,
                        principalTable: "hr_contract",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "hr_employee_department_id_fkey",
                        column: x => x.departmentid,
                        principalTable: "hr_department",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "hr_employee_departure_reason_id_fkey",
                        column: x => x.departurereasonid,
                        principalTable: "hr_departure_reason",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "hr_employee_last_attendance_id_fkey",
                        column: x => x.lastattendanceid,
                        principalTable: "hr_attendance",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "hr_employee_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "hr_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "hr_employee_category",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_employee_category_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_employee_hr_leave_allocation_rel",
                columns: table => new
                {
                    hrleaveallocationid = table.Column<Guid>(name: "hr_leave_allocation_id", type: "uuid", nullable: false),
                    hremployeeid = table.Column<Guid>(name: "hr_employee_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_employee_hr_leave_allocation_rel_pkey", x => new { x.hrleaveallocationid, x.hremployeeid });
                    table.ForeignKey(
                        name: "hr_employee_hr_leave_allocation_rel_hr_employee_id_fkey",
                        column: x => x.hremployeeid,
                        principalTable: "hr_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_employee_hr_leave_rel",
                columns: table => new
                {
                    hrleaveid = table.Column<Guid>(name: "hr_leave_id", type: "uuid", nullable: false),
                    hremployeeid = table.Column<Guid>(name: "hr_employee_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_employee_hr_leave_rel_pkey", x => new { x.hrleaveid, x.hremployeeid });
                    table.ForeignKey(
                        name: "hr_employee_hr_leave_rel_hr_employee_id_fkey",
                        column: x => x.hremployeeid,
                        principalTable: "hr_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_employee_hr_plan_wizard_rel",
                columns: table => new
                {
                    employeeid = table.Column<Guid>(name: "employee_id", type: "uuid", nullable: false),
                    planwizardid = table.Column<Guid>(name: "plan_wizard_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_employee_hr_plan_wizard_rel_pkey", x => new { x.employeeid, x.planwizardid });
                    table.ForeignKey(
                        name: "hr_employee_hr_plan_wizard_rel_plan_wizard_id_fkey",
                        column: x => x.planwizardid,
                        principalTable: "hr_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_employee_hr_skill_rel",
                columns: table => new
                {
                    hremployeeid = table.Column<Guid>(name: "hr_employee_id", type: "uuid", nullable: false),
                    hrskillid = table.Column<Guid>(name: "hr_skill_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_employee_hr_skill_rel_pkey", x => new { x.hremployeeid, x.hrskillid });
                    table.ForeignKey(
                        name: "hr_employee_hr_skill_rel_hr_employee_id_fkey",
                        column: x => x.hremployeeid,
                        principalTable: "hr_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_employee_pos_config_rel",
                columns: table => new
                {
                    posconfigid = table.Column<Guid>(name: "pos_config_id", type: "uuid", nullable: false),
                    hremployeeid = table.Column<Guid>(name: "hr_employee_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_employee_pos_config_rel_pkey", x => new { x.posconfigid, x.hremployeeid });
                    table.ForeignKey(
                        name: "hr_employee_pos_config_rel_hr_employee_id_fkey",
                        column: x => x.hremployeeid,
                        principalTable: "hr_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_employee_skill",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    employeeid = table.Column<Guid>(name: "employee_id", type: "uuid", nullable: true),
                    skillid = table.Column<Guid>(name: "skill_id", type: "uuid", nullable: true),
                    skilllevelid = table.Column<long>(name: "skill_level_id", type: "bigint", nullable: true),
                    skilltypeid = table.Column<long>(name: "skill_type_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_employee_skill_pkey", x => x.id);
                    table.ForeignKey(
                        name: "hr_employee_skill_employee_id_fkey",
                        column: x => x.employeeid,
                        principalTable: "hr_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_employee_skill_log",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    employeeid = table.Column<Guid>(name: "employee_id", type: "uuid", nullable: true),
                    departmentid = table.Column<Guid>(name: "department_id", type: "uuid", nullable: true),
                    skillid = table.Column<Guid>(name: "skill_id", type: "uuid", nullable: true),
                    skilllevelid = table.Column<long>(name: "skill_level_id", type: "bigint", nullable: true),
                    skilltypeid = table.Column<long>(name: "skill_type_id", type: "bigint", nullable: true),
                    levelprogress = table.Column<long>(name: "level_progress", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_employee_skill_log_pkey", x => x.id);
                    table.ForeignKey(
                        name: "hr_employee_skill_log_department_id_fkey",
                        column: x => x.departmentid,
                        principalTable: "hr_department",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "hr_employee_skill_log_employee_id_fkey",
                        column: x => x.employeeid,
                        principalTable: "hr_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_expense",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    employeeid = table.Column<Guid>(name: "employee_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    productuomid = table.Column<Guid>(name: "product_uom_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    accountid = table.Column<Guid>(name: "account_id", type: "uuid", nullable: true),
                    sheetid = table.Column<Guid>(name: "sheet_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    paymentmode = table.Column<string>(name: "payment_mode", type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    reference = table.Column<string>(type: "text", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    accountingdate = table.Column<DateTime>(name: "accounting_date", type: "timestamp without time zone", nullable: true),
                    analyticdistribution = table.Column<string>(name: "analytic_distribution", type: "jsonb", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    unitamount = table.Column<decimal>(name: "unit_amount", type: "numeric", nullable: true),
                    quantity = table.Column<decimal>(type: "numeric", nullable: true),
                    amounttax = table.Column<decimal>(name: "amount_tax", type: "numeric", nullable: true),
                    amounttaxcompany = table.Column<decimal>(name: "amount_tax_company", type: "numeric", nullable: true),
                    totalamount = table.Column<decimal>(name: "total_amount", type: "numeric", nullable: true),
                    untaxedamount = table.Column<decimal>(name: "untaxed_amount", type: "numeric", nullable: true),
                    totalamountcompany = table.Column<decimal>(name: "total_amount_company", type: "numeric", nullable: true),
                    isrefused = table.Column<bool>(name: "is_refused", type: "boolean", nullable: true),
                    sample = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    saleorderid = table.Column<Guid>(name: "sale_order_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_expense_pkey", x => x.id);
                    table.ForeignKey(
                        name: "hr_expense_account_id_fkey",
                        column: x => x.accountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "hr_expense_employee_id_fkey",
                        column: x => x.employeeid,
                        principalTable: "hr_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "hr_expense_approve_duplicate",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_expense_approve_duplicate_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_expense_hr_expense_approve_duplicate_rel",
                columns: table => new
                {
                    hrexpenseapproveduplicateid = table.Column<Guid>(name: "hr_expense_approve_duplicate_id", type: "uuid", nullable: false),
                    hrexpenseid = table.Column<Guid>(name: "hr_expense_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_expense_hr_expense_approve_duplicate_rel_pkey", x => new { x.hrexpenseapproveduplicateid, x.hrexpenseid });
                    table.ForeignKey(
                        name: "hr_expense_hr_expense_approve_duplicate_rel_hr_expense_id_fkey",
                        column: x => x.hrexpenseid,
                        principalTable: "hr_expense",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "hr_expense_hr_expense_approve_hr_expense_approve_duplicate_fkey",
                        column: x => x.hrexpenseapproveduplicateid,
                        principalTable: "hr_expense_approve_duplicate",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_expense_approve_duplicate_hr_expense_sheet_rel",
                columns: table => new
                {
                    hrexpenseapproveduplicateid = table.Column<Guid>(name: "hr_expense_approve_duplicate_id", type: "uuid", nullable: false),
                    hrexpensesheetid = table.Column<Guid>(name: "hr_expense_sheet_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_expense_approve_duplicate_hr_expense_sheet_rel_pkey", x => new { x.hrexpenseapproveduplicateid, x.hrexpensesheetid });
                    table.ForeignKey(
                        name: "hr_expense_approve_duplicate__hr_expense_approve_duplicate_fkey",
                        column: x => x.hrexpenseapproveduplicateid,
                        principalTable: "hr_expense_approve_duplicate",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_expense_hr_expense_refuse_wizard_rel",
                columns: table => new
                {
                    hrexpenserefusewizardid = table.Column<Guid>(name: "hr_expense_refuse_wizard_id", type: "uuid", nullable: false),
                    hrexpenseid = table.Column<Guid>(name: "hr_expense_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_expense_hr_expense_refuse_wizard_rel_pkey", x => new { x.hrexpenserefusewizardid, x.hrexpenseid });
                    table.ForeignKey(
                        name: "hr_expense_hr_expense_refuse_wizard_rel_hr_expense_id_fkey",
                        column: x => x.hrexpenseid,
                        principalTable: "hr_expense",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_expense_refuse_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    hrexpensesheetid = table.Column<Guid>(name: "hr_expense_sheet_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    reason = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_expense_refuse_wizard_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_expense_sheet",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    employeeid = table.Column<Guid>(name: "employee_id", type: "uuid", nullable: true),
                    addressid = table.Column<Guid>(name: "address_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    journalid = table.Column<Guid>(name: "journal_id", type: "uuid", nullable: true),
                    bankjournalid = table.Column<Guid>(name: "bank_journal_id", type: "uuid", nullable: true),
                    accountmoveid = table.Column<Guid>(name: "account_move_id", type: "uuid", nullable: true),
                    departmentid = table.Column<Guid>(name: "department_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    paymentstate = table.Column<string>(name: "payment_state", type: "text", nullable: true),
                    accountingdate = table.Column<DateTime>(name: "accounting_date", type: "timestamp without time zone", nullable: true),
                    totalamount = table.Column<decimal>(name: "total_amount", type: "numeric", nullable: true),
                    untaxedamount = table.Column<decimal>(name: "untaxed_amount", type: "numeric", nullable: true),
                    totalamounttaxes = table.Column<decimal>(name: "total_amount_taxes", type: "numeric", nullable: true),
                    amountresidual = table.Column<decimal>(name: "amount_residual", type: "numeric", nullable: true),
                    approvaldate = table.Column<DateTime>(name: "approval_date", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_expense_sheet_pkey", x => x.id);
                    table.ForeignKey(
                        name: "hr_expense_sheet_account_move_id_fkey",
                        column: x => x.accountmoveid,
                        principalTable: "account_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "hr_expense_sheet_bank_journal_id_fkey",
                        column: x => x.bankjournalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "hr_expense_sheet_department_id_fkey",
                        column: x => x.departmentid,
                        principalTable: "hr_department",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "hr_expense_sheet_employee_id_fkey",
                        column: x => x.employeeid,
                        principalTable: "hr_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "hr_expense_sheet_journal_id_fkey",
                        column: x => x.journalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "hr_expense_split",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    wizardid = table.Column<Guid>(name: "wizard_id", type: "uuid", nullable: true),
                    expenseid = table.Column<Guid>(name: "expense_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    employeeid = table.Column<Guid>(name: "employee_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    analyticdistribution = table.Column<string>(name: "analytic_distribution", type: "jsonb", nullable: true),
                    totalamount = table.Column<decimal>(name: "total_amount", type: "numeric", nullable: true),
                    producthascost = table.Column<bool>(name: "product_has_cost", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    saleorderid = table.Column<Guid>(name: "sale_order_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_expense_split_pkey", x => x.id);
                    table.ForeignKey(
                        name: "hr_expense_split_employee_id_fkey",
                        column: x => x.employeeid,
                        principalTable: "hr_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "hr_expense_split_expense_id_fkey",
                        column: x => x.expenseid,
                        principalTable: "hr_expense",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "hr_expense_split_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    expenseid = table.Column<Guid>(name: "expense_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_expense_split_wizard_pkey", x => x.id);
                    table.ForeignKey(
                        name: "hr_expense_split_wizard_expense_id_fkey",
                        column: x => x.expenseid,
                        principalTable: "hr_expense",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_holidays_cancel_leave",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    leaveid = table.Column<Guid>(name: "leave_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    reason = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_holidays_cancel_leave_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_holidays_summary_employee",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    holidaytype = table.Column<string>(name: "holiday_type", type: "text", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_holidays_summary_employee_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "summary_emp_rel",
                columns: table => new
                {
                    sumid = table.Column<Guid>(name: "sum_id", type: "uuid", nullable: false),
                    empid = table.Column<Guid>(name: "emp_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("summary_emp_rel_pkey", x => new { x.sumid, x.empid });
                    table.ForeignKey(
                        name: "summary_emp_rel_emp_id_fkey",
                        column: x => x.empid,
                        principalTable: "hr_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "summary_emp_rel_sum_id_fkey",
                        column: x => x.sumid,
                        principalTable: "hr_holidays_summary_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_job",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    expectedemployees = table.Column<long>(name: "expected_employees", type: "bigint", nullable: true),
                    noofemployee = table.Column<long>(name: "no_of_employee", type: "bigint", nullable: true),
                    noofrecruitment = table.Column<long>(name: "no_of_recruitment", type: "bigint", nullable: true),
                    noofhiredemployee = table.Column<long>(name: "no_of_hired_employee", type: "bigint", nullable: true),
                    departmentid = table.Column<Guid>(name: "department_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    contracttypeid = table.Column<long>(name: "contract_type_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    requirements = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    aliasid = table.Column<Guid>(name: "alias_id", type: "uuid", nullable: true),
                    addressid = table.Column<Guid>(name: "address_id", type: "uuid", nullable: true),
                    managerid = table.Column<Guid>(name: "manager_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    hrresponsibleid = table.Column<Guid>(name: "hr_responsible_id", type: "uuid", nullable: true),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: true),
                    websitemetaogimg = table.Column<string>(name: "website_meta_og_img", type: "text", nullable: true),
                    websitemetatitle = table.Column<string>(name: "website_meta_title", type: "jsonb", nullable: true),
                    websitemetadescription = table.Column<string>(name: "website_meta_description", type: "jsonb", nullable: true),
                    websitemetakeywords = table.Column<string>(name: "website_meta_keywords", type: "jsonb", nullable: true),
                    seoname = table.Column<string>(name: "seo_name", type: "jsonb", nullable: true),
                    websitedescription = table.Column<string>(name: "website_description", type: "jsonb", nullable: true),
                    jobdetails = table.Column<string>(name: "job_details", type: "jsonb", nullable: true),
                    ispublished = table.Column<bool>(name: "is_published", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_job_pkey", x => x.id);
                    table.ForeignKey(
                        name: "hr_job_contract_type_id_fkey",
                        column: x => x.contracttypeid,
                        principalTable: "hr_contract_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "hr_job_department_id_fkey",
                        column: x => x.departmentid,
                        principalTable: "hr_department",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "hr_job_extended_interviewer_res_users",
                columns: table => new
                {
                    hrjobid = table.Column<Guid>(name: "hr_job_id", type: "uuid", nullable: false),
                    resusersid = table.Column<Guid>(name: "res_users_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_job_extended_interviewer_res_users_pkey", x => new { x.hrjobid, x.resusersid });
                    table.ForeignKey(
                        name: "hr_job_extended_interviewer_res_users_hr_job_id_fkey",
                        column: x => x.hrjobid,
                        principalTable: "hr_job",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_job_hr_recruitment_stage_rel",
                columns: table => new
                {
                    hrrecruitmentstageid = table.Column<long>(name: "hr_recruitment_stage_id", type: "bigint", nullable: false),
                    hrjobid = table.Column<Guid>(name: "hr_job_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_job_hr_recruitment_stage_rel_pkey", x => new { x.hrrecruitmentstageid, x.hrjobid });
                    table.ForeignKey(
                        name: "hr_job_hr_recruitment_stage_rel_hr_job_id_fkey",
                        column: x => x.hrjobid,
                        principalTable: "hr_job",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_job_res_users_rel",
                columns: table => new
                {
                    hrjobid = table.Column<Guid>(name: "hr_job_id", type: "uuid", nullable: false),
                    resusersid = table.Column<Guid>(name: "res_users_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_job_res_users_rel_pkey", x => new { x.hrjobid, x.resusersid });
                    table.ForeignKey(
                        name: "hr_job_res_users_rel_hr_job_id_fkey",
                        column: x => x.hrjobid,
                        principalTable: "hr_job",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_leave",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    managerid = table.Column<Guid>(name: "manager_id", type: "uuid", nullable: true),
                    holidaystatusid = table.Column<Guid>(name: "holiday_status_id", type: "uuid", nullable: true),
                    holidayallocationid = table.Column<Guid>(name: "holiday_allocation_id", type: "uuid", nullable: true),
                    employeeid = table.Column<Guid>(name: "employee_id", type: "uuid", nullable: true),
                    employeecompanyid = table.Column<Guid>(name: "employee_company_id", type: "uuid", nullable: true),
                    departmentid = table.Column<Guid>(name: "department_id", type: "uuid", nullable: true),
                    meetingid = table.Column<Guid>(name: "meeting_id", type: "uuid", nullable: true),
                    parentid = table.Column<Guid>(name: "parent_id", type: "uuid", nullable: true),
                    categoryid = table.Column<long>(name: "category_id", type: "bigint", nullable: true),
                    modecompanyid = table.Column<Guid>(name: "mode_company_id", type: "uuid", nullable: true),
                    firstapproverid = table.Column<Guid>(name: "first_approver_id", type: "uuid", nullable: true),
                    secondapproverid = table.Column<Guid>(name: "second_approver_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    privatename = table.Column<string>(name: "private_name", type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    durationdisplay = table.Column<string>(name: "duration_display", type: "text", nullable: true),
                    holidaytype = table.Column<string>(name: "holiday_type", type: "text", nullable: true),
                    requesthourfrom = table.Column<string>(name: "request_hour_from", type: "text", nullable: true),
                    requesthourto = table.Column<string>(name: "request_hour_to", type: "text", nullable: true),
                    requestdatefromperiod = table.Column<string>(name: "request_date_from_period", type: "text", nullable: true),
                    requestdatefrom = table.Column<DateTime>(name: "request_date_from", type: "timestamp without time zone", nullable: true),
                    requestdateto = table.Column<DateTime>(name: "request_date_to", type: "timestamp without time zone", nullable: true),
                    reportnote = table.Column<string>(name: "report_note", type: "text", nullable: true),
                    notes = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    multiemployee = table.Column<bool>(name: "multi_employee", type: "boolean", nullable: true),
                    requestunithalf = table.Column<bool>(name: "request_unit_half", type: "boolean", nullable: true),
                    requestunithours = table.Column<bool>(name: "request_unit_hours", type: "boolean", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    dateto = table.Column<DateTime>(name: "date_to", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    numberofdays = table.Column<double>(name: "number_of_days", type: "double precision", nullable: true),
                    overtimeid = table.Column<Guid>(name: "overtime_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_leave_pkey", x => x.id);
                    table.ForeignKey(
                        name: "hr_leave_category_id_fkey",
                        column: x => x.categoryid,
                        principalTable: "hr_employee_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "hr_leave_department_id_fkey",
                        column: x => x.departmentid,
                        principalTable: "hr_department",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "hr_leave_employee_id_fkey",
                        column: x => x.employeeid,
                        principalTable: "hr_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "hr_leave_first_approver_id_fkey",
                        column: x => x.firstapproverid,
                        principalTable: "hr_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "hr_leave_meeting_id_fkey",
                        column: x => x.meetingid,
                        principalTable: "calendar_event",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "hr_leave_overtime_id_fkey",
                        column: x => x.overtimeid,
                        principalTable: "hr_attendance_overtime",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "hr_leave_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "hr_leave",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "hr_leave_second_approver_id_fkey",
                        column: x => x.secondapproverid,
                        principalTable: "hr_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "hr_leave_accrual_level",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    accrualplanid = table.Column<Guid>(name: "accrual_plan_id", type: "uuid", nullable: true),
                    startcount = table.Column<long>(name: "start_count", type: "bigint", nullable: true),
                    firstday = table.Column<long>(name: "first_day", type: "bigint", nullable: true),
                    secondday = table.Column<long>(name: "second_day", type: "bigint", nullable: true),
                    firstmonthday = table.Column<long>(name: "first_month_day", type: "bigint", nullable: true),
                    secondmonthday = table.Column<long>(name: "second_month_day", type: "bigint", nullable: true),
                    yearlyday = table.Column<long>(name: "yearly_day", type: "bigint", nullable: true),
                    parentid = table.Column<long>(name: "parent_id", type: "bigint", nullable: true),
                    postponemaxdays = table.Column<long>(name: "postpone_max_days", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    starttype = table.Column<string>(name: "start_type", type: "text", nullable: true),
                    addedvaluetype = table.Column<string>(name: "added_value_type", type: "text", nullable: true),
                    frequency = table.Column<string>(type: "text", nullable: true),
                    weekday = table.Column<string>(name: "week_day", type: "text", nullable: true),
                    firstmonth = table.Column<string>(name: "first_month", type: "text", nullable: true),
                    secondmonth = table.Column<string>(name: "second_month", type: "text", nullable: true),
                    yearlymonth = table.Column<string>(name: "yearly_month", type: "text", nullable: true),
                    actionwithunusedaccruals = table.Column<string>(name: "action_with_unused_accruals", type: "text", nullable: true),
                    isbasedonworkedtime = table.Column<bool>(name: "is_based_on_worked_time", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    addedvalue = table.Column<double>(name: "added_value", type: "double precision", nullable: true),
                    maximumleave = table.Column<double>(name: "maximum_leave", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_leave_accrual_level_pkey", x => x.id);
                    table.ForeignKey(
                        name: "hr_leave_accrual_level_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "hr_leave_accrual_level",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "hr_leave_accrual_plan",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    timeofftypeid = table.Column<Guid>(name: "time_off_type_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    transitionmode = table.Column<string>(name: "transition_mode", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_leave_accrual_plan_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_leave_allocation",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    holidaystatusid = table.Column<Guid>(name: "holiday_status_id", type: "uuid", nullable: true),
                    employeeid = table.Column<Guid>(name: "employee_id", type: "uuid", nullable: true),
                    employeecompanyid = table.Column<Guid>(name: "employee_company_id", type: "uuid", nullable: true),
                    managerid = table.Column<Guid>(name: "manager_id", type: "uuid", nullable: true),
                    parentid = table.Column<Guid>(name: "parent_id", type: "uuid", nullable: true),
                    approverid = table.Column<Guid>(name: "approver_id", type: "uuid", nullable: true),
                    modecompanyid = table.Column<Guid>(name: "mode_company_id", type: "uuid", nullable: true),
                    departmentid = table.Column<Guid>(name: "department_id", type: "uuid", nullable: true),
                    categoryid = table.Column<long>(name: "category_id", type: "bigint", nullable: true),
                    accrualplanid = table.Column<Guid>(name: "accrual_plan_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    privatename = table.Column<string>(name: "private_name", type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    holidaytype = table.Column<string>(name: "holiday_type", type: "text", nullable: true),
                    allocationtype = table.Column<string>(name: "allocation_type", type: "text", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    dateto = table.Column<DateTime>(name: "date_to", type: "timestamp without time zone", nullable: true),
                    lastcall = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    nextcall = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    notes = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    multiemployee = table.Column<bool>(name: "multi_employee", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    numberofdays = table.Column<double>(name: "number_of_days", type: "double precision", nullable: true),
                    overtimeid = table.Column<Guid>(name: "overtime_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_leave_allocation_pkey", x => x.id);
                    table.ForeignKey(
                        name: "hr_leave_allocation_accrual_plan_id_fkey",
                        column: x => x.accrualplanid,
                        principalTable: "hr_leave_accrual_plan",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "hr_leave_allocation_approver_id_fkey",
                        column: x => x.approverid,
                        principalTable: "hr_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "hr_leave_allocation_category_id_fkey",
                        column: x => x.categoryid,
                        principalTable: "hr_employee_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "hr_leave_allocation_department_id_fkey",
                        column: x => x.departmentid,
                        principalTable: "hr_department",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "hr_leave_allocation_employee_id_fkey",
                        column: x => x.employeeid,
                        principalTable: "hr_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "hr_leave_allocation_overtime_id_fkey",
                        column: x => x.overtimeid,
                        principalTable: "hr_attendance_overtime",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "hr_leave_allocation_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "hr_leave_allocation",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "hr_leave_stress_day",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    resourcecalendarid = table.Column<Guid>(name: "resource_calendar_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    startdate = table.Column<DateTime>(name: "start_date", type: "timestamp without time zone", nullable: true),
                    enddate = table.Column<DateTime>(name: "end_date", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_leave_stress_day_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_leave_type",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    iconid = table.Column<Guid>(name: "icon_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    responsibleid = table.Column<Guid>(name: "responsible_id", type: "uuid", nullable: true),
                    leavenotifsubtypeid = table.Column<long>(name: "leave_notif_subtype_id", type: "bigint", nullable: true),
                    allocationnotifsubtypeid = table.Column<long>(name: "allocation_notif_subtype_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    colorname = table.Column<string>(name: "color_name", type: "text", nullable: true),
                    leavevalidationtype = table.Column<string>(name: "leave_validation_type", type: "text", nullable: true),
                    requiresallocation = table.Column<string>(name: "requires_allocation", type: "text", nullable: true),
                    employeerequests = table.Column<string>(name: "employee_requests", type: "text", nullable: true),
                    allocationvalidationtype = table.Column<string>(name: "allocation_validation_type", type: "text", nullable: true),
                    timetype = table.Column<string>(name: "time_type", type: "text", nullable: true),
                    requestunit = table.Column<string>(name: "request_unit", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createcalendarmeeting = table.Column<bool>(name: "create_calendar_meeting", type: "boolean", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    unpaid = table.Column<bool>(type: "boolean", nullable: true),
                    supportdocument = table.Column<bool>(name: "support_document", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    overtimedeductible = table.Column<bool>(name: "overtime_deductible", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_leave_type_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_payroll_structure_type",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    defaultresourcecalendarid = table.Column<Guid>(name: "default_resource_calendar_id", type: "uuid", nullable: true),
                    countryid = table.Column<long>(name: "country_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_payroll_structure_type_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_plan",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    departmentid = table.Column<Guid>(name: "department_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_plan_pkey", x => x.id);
                    table.ForeignKey(
                        name: "hr_plan_department_id_fkey",
                        column: x => x.departmentid,
                        principalTable: "hr_department",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "hr_plan_activity_type",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    activitytypeid = table.Column<long>(name: "activity_type_id", type: "bigint", nullable: true),
                    responsibleid = table.Column<Guid>(name: "responsible_id", type: "uuid", nullable: true),
                    planid = table.Column<Guid>(name: "plan_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    summary = table.Column<string>(type: "text", nullable: true),
                    responsible = table.Column<string>(type: "text", nullable: true),
                    note = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_plan_activity_type_pkey", x => x.id);
                    table.ForeignKey(
                        name: "hr_plan_activity_type_plan_id_fkey",
                        column: x => x.planid,
                        principalTable: "hr_plan",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "hr_plan_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    planid = table.Column<Guid>(name: "plan_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_plan_wizard_pkey", x => x.id);
                    table.ForeignKey(
                        name: "hr_plan_wizard_plan_id_fkey",
                        column: x => x.planid,
                        principalTable: "hr_plan",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "hr_recruitment_degree",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_recruitment_degree_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_recruitment_source",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sourceid = table.Column<Guid>(name: "source_id", type: "uuid", nullable: true),
                    jobid = table.Column<Guid>(name: "job_id", type: "uuid", nullable: true),
                    aliasid = table.Column<Guid>(name: "alias_id", type: "uuid", nullable: true),
                    mediumid = table.Column<Guid>(name: "medium_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_recruitment_source_pkey", x => x.id);
                    table.ForeignKey(
                        name: "hr_recruitment_source_job_id_fkey",
                        column: x => x.jobid,
                        principalTable: "hr_job",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_recruitment_stage",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    templateid = table.Column<Guid>(name: "template_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    legendblocked = table.Column<string>(name: "legend_blocked", type: "jsonb", nullable: true),
                    legenddone = table.Column<string>(name: "legend_done", type: "jsonb", nullable: true),
                    legendnormal = table.Column<string>(name: "legend_normal", type: "jsonb", nullable: true),
                    requirements = table.Column<string>(type: "text", nullable: true),
                    fold = table.Column<bool>(type: "boolean", nullable: true),
                    hiredstage = table.Column<bool>(name: "hired_stage", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_recruitment_stage_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_resume_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    employeeid = table.Column<Guid>(name: "employee_id", type: "uuid", nullable: true),
                    linetypeid = table.Column<long>(name: "line_type_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    displaytype = table.Column<string>(name: "display_type", type: "text", nullable: true),
                    datestart = table.Column<DateTime>(name: "date_start", type: "timestamp without time zone", nullable: true),
                    dateend = table.Column<DateTime>(name: "date_end", type: "timestamp without time zone", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_resume_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "hr_resume_line_employee_id_fkey",
                        column: x => x.employeeid,
                        principalTable: "hr_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "hr_resume_line_type",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_resume_line_type_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_skill",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    skilltypeid = table.Column<long>(name: "skill_type_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_skill_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_skill_level",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    skilltypeid = table.Column<long>(name: "skill_type_id", type: "bigint", nullable: true),
                    levelprogress = table.Column<long>(name: "level_progress", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    defaultlevel = table.Column<bool>(name: "default_level", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_skill_level_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_skill_type",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_skill_type_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "hr_work_location",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    addressid = table.Column<Guid>(name: "address_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    locationnumber = table.Column<string>(name: "location_number", type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("hr_work_location_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "iap_account",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    servicename = table.Column<string>(name: "service_name", type: "text", nullable: true),
                    accounttoken = table.Column<string>(name: "account_token", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("iap_account_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "iap_account_res_company_rel",
                columns: table => new
                {
                    iapaccountid = table.Column<Guid>(name: "iap_account_id", type: "uuid", nullable: false),
                    rescompanyid = table.Column<Guid>(name: "res_company_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("iap_account_res_company_rel_pkey", x => new { x.iapaccountid, x.rescompanyid });
                    table.ForeignKey(
                        name: "iap_account_res_company_rel_iap_account_id_fkey",
                        column: x => x.iapaccountid,
                        principalTable: "iap_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ir_act_client",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    bindingmodelid = table.Column<Guid>(name: "binding_model_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    type = table.Column<string>(type: "text", nullable: true),
                    bindingtype = table.Column<string>(name: "binding_type", type: "text", nullable: true),
                    bindingviewtypes = table.Column<string>(name: "binding_view_types", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    help = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    tag = table.Column<string>(type: "text", nullable: true),
                    target = table.Column<string>(type: "text", nullable: true),
                    resmodel = table.Column<string>(name: "res_model", type: "text", nullable: true),
                    context = table.Column<string>(type: "text", nullable: true),
                    paramsstore = table.Column<byte[]>(name: "params_store", type: "bytea", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_act_client_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "ir_act_report_xml",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    bindingmodelid = table.Column<Guid>(name: "binding_model_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    type = table.Column<string>(type: "text", nullable: true),
                    bindingtype = table.Column<string>(name: "binding_type", type: "text", nullable: true),
                    bindingviewtypes = table.Column<string>(name: "binding_view_types", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    help = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    paperformatid = table.Column<long>(name: "paperformat_id", type: "bigint", nullable: true),
                    model = table.Column<string>(type: "text", nullable: true),
                    reporttype = table.Column<string>(name: "report_type", type: "text", nullable: true),
                    reportname = table.Column<string>(name: "report_name", type: "text", nullable: true),
                    reportfile = table.Column<string>(name: "report_file", type: "text", nullable: true),
                    attachment = table.Column<string>(type: "text", nullable: true),
                    printreportname = table.Column<string>(name: "print_report_name", type: "jsonb", nullable: true),
                    multi = table.Column<bool>(type: "boolean", nullable: true),
                    attachmentuse = table.Column<bool>(name: "attachment_use", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_act_report_xml_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "ir_act_server",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    bindingmodelid = table.Column<Guid>(name: "binding_model_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    type = table.Column<string>(type: "text", nullable: true),
                    bindingtype = table.Column<string>(name: "binding_type", type: "text", nullable: true),
                    bindingviewtypes = table.Column<string>(name: "binding_view_types", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    help = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    modelid = table.Column<Guid>(name: "model_id", type: "uuid", nullable: true),
                    crudmodelid = table.Column<Guid>(name: "crud_model_id", type: "uuid", nullable: true),
                    linkfieldid = table.Column<Guid>(name: "link_field_id", type: "uuid", nullable: true),
                    usage = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    modelname = table.Column<string>(name: "model_name", type: "text", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    templateid = table.Column<Guid>(name: "template_id", type: "uuid", nullable: true),
                    activitytypeid = table.Column<long>(name: "activity_type_id", type: "bigint", nullable: true),
                    activitydatedeadlinerange = table.Column<long>(name: "activity_date_deadline_range", type: "bigint", nullable: true),
                    activityuserid = table.Column<Guid>(name: "activity_user_id", type: "uuid", nullable: true),
                    mailpostmethod = table.Column<string>(name: "mail_post_method", type: "text", nullable: true),
                    activitysummary = table.Column<string>(name: "activity_summary", type: "text", nullable: true),
                    activitydatedeadlinerangetype = table.Column<string>(name: "activity_date_deadline_range_type", type: "text", nullable: true),
                    activityusertype = table.Column<string>(name: "activity_user_type", type: "text", nullable: true),
                    activityuserfieldname = table.Column<string>(name: "activity_user_field_name", type: "text", nullable: true),
                    activitynote = table.Column<string>(name: "activity_note", type: "text", nullable: true),
                    mailpostautofollow = table.Column<bool>(name: "mail_post_autofollow", type: "boolean", nullable: true),
                    smstemplateid = table.Column<Guid>(name: "sms_template_id", type: "uuid", nullable: true),
                    smsmethod = table.Column<string>(name: "sms_method", type: "text", nullable: true),
                    websitepath = table.Column<string>(name: "website_path", type: "text", nullable: true),
                    websitepublished = table.Column<bool>(name: "website_published", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_act_server_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "rel_server_actions",
                columns: table => new
                {
                    serverid = table.Column<Guid>(name: "server_id", type: "uuid", nullable: false),
                    actionid = table.Column<Guid>(name: "action_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("rel_server_actions_pkey", x => new { x.serverid, x.actionid });
                    table.ForeignKey(
                        name: "rel_server_actions_action_id_fkey",
                        column: x => x.actionid,
                        principalTable: "ir_act_server",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "rel_server_actions_server_id_fkey",
                        column: x => x.serverid,
                        principalTable: "ir_act_server",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ir_act_server_group_rel",
                columns: table => new
                {
                    actid = table.Column<Guid>(name: "act_id", type: "uuid", nullable: false),
                    gid = table.Column<Guid>(type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_act_server_group_rel_pkey", x => new { x.actid, x.gid });
                    table.ForeignKey(
                        name: "ir_act_server_group_rel_act_id_fkey",
                        column: x => x.actid,
                        principalTable: "ir_act_server",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ir_act_server_res_partner_rel",
                columns: table => new
                {
                    iractserverid = table.Column<Guid>(name: "ir_act_server_id", type: "uuid", nullable: false),
                    respartnerid = table.Column<Guid>(name: "res_partner_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_act_server_res_partner_rel_pkey", x => new { x.iractserverid, x.respartnerid });
                    table.ForeignKey(
                        name: "ir_act_server_res_partner_rel_ir_act_server_id_fkey",
                        column: x => x.iractserverid,
                        principalTable: "ir_act_server",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ir_act_url",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    bindingmodelid = table.Column<Guid>(name: "binding_model_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    type = table.Column<string>(type: "text", nullable: true),
                    bindingtype = table.Column<string>(name: "binding_type", type: "text", nullable: true),
                    bindingviewtypes = table.Column<string>(name: "binding_view_types", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    help = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    target = table.Column<string>(type: "text", nullable: true),
                    url = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_act_url_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "ir_act_window",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    bindingmodelid = table.Column<Guid>(name: "binding_model_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    type = table.Column<string>(type: "text", nullable: true),
                    bindingtype = table.Column<string>(name: "binding_type", type: "text", nullable: true),
                    bindingviewtypes = table.Column<string>(name: "binding_view_types", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    help = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    viewid = table.Column<Guid>(name: "view_id", type: "uuid", nullable: true),
                    resid = table.Column<Guid>(name: "res_id", type: "uuid", nullable: true),
                    limit = table.Column<long>(type: "bigint", nullable: true),
                    searchviewid = table.Column<Guid>(name: "search_view_id", type: "uuid", nullable: true),
                    domain = table.Column<string>(type: "text", nullable: true),
                    context = table.Column<string>(type: "text", nullable: true),
                    resmodel = table.Column<string>(name: "res_model", type: "text", nullable: true),
                    target = table.Column<string>(type: "text", nullable: true),
                    viewmode = table.Column<string>(name: "view_mode", type: "text", nullable: true),
                    usage = table.Column<string>(type: "text", nullable: true),
                    filter = table.Column<bool>(type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_act_window_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "ir_act_window_group_rel",
                columns: table => new
                {
                    actid = table.Column<Guid>(name: "act_id", type: "uuid", nullable: false),
                    gid = table.Column<Guid>(type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_act_window_group_rel_pkey", x => new { x.actid, x.gid });
                    table.ForeignKey(
                        name: "ir_act_window_group_rel_act_id_fkey",
                        column: x => x.actid,
                        principalTable: "ir_act_window",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ir_act_window_view",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigint", nullable: true),
                    viewid = table.Column<Guid>(name: "view_id", type: "uuid", nullable: true),
                    actwindowid = table.Column<Guid>(name: "act_window_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    viewmode = table.Column<string>(name: "view_mode", type: "text", nullable: true),
                    multi = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_act_window_view_pkey", x => x.id);
                    table.ForeignKey(
                        name: "ir_act_window_view_act_window_id_fkey",
                        column: x => x.actwindowid,
                        principalTable: "ir_act_window",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ir_actions",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    bindingmodelid = table.Column<Guid>(name: "binding_model_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    type = table.Column<string>(type: "text", nullable: true),
                    bindingtype = table.Column<string>(name: "binding_type", type: "text", nullable: true),
                    bindingviewtypes = table.Column<string>(name: "binding_view_types", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    help = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_actions_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "ir_actions_todo",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    actionid = table.Column<Guid>(name: "action_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_actions_todo_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "ir_asset",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    bundle = table.Column<string>(type: "text", nullable: true),
                    directive = table.Column<string>(type: "text", nullable: true),
                    path = table.Column<string>(type: "text", nullable: true),
                    target = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: true),
                    themetemplateid = table.Column<long>(name: "theme_template_id", type: "bigint", nullable: true),
                    key = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_asset_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "ir_attachment",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    resid = table.Column<Guid>(name: "res_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    filesize = table.Column<long>(name: "file_size", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    resmodel = table.Column<string>(name: "res_model", type: "text", nullable: true),
                    resfield = table.Column<string>(name: "res_field", type: "text", nullable: true),
                    type = table.Column<string>(type: "text", nullable: true),
                    url = table.Column<string>(type: "text", nullable: true),
                    accesstoken = table.Column<string>(name: "access_token", type: "text", nullable: true),
                    storefname = table.Column<string>(name: "store_fname", type: "text", nullable: true),
                    checksum = table.Column<string>(type: "text", nullable: true),
                    mimetype = table.Column<string>(type: "text", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    indexcontent = table.Column<string>(name: "index_content", type: "text", nullable: true),
                    @public = table.Column<bool>(name: "public", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    dbdatas = table.Column<byte[]>(name: "db_datas", type: "bytea", nullable: true),
                    originalid = table.Column<Guid>(name: "original_id", type: "uuid", nullable: true),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: true),
                    themetemplateid = table.Column<long>(name: "theme_template_id", type: "bigint", nullable: true),
                    key = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_attachment_pkey", x => x.id);
                    table.ForeignKey(
                        name: "ir_attachment_original_id_fkey",
                        column: x => x.originalid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "ir_config_parameter",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    key = table.Column<string>(type: "text", nullable: true),
                    value = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_config_parameter_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "ir_cron",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    iractionsserverid = table.Column<Guid>(name: "ir_actions_server_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    intervalnumber = table.Column<long>(name: "interval_number", type: "bigint", nullable: true),
                    numbercall = table.Column<long>(type: "bigint", nullable: true),
                    priority = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    intervaltype = table.Column<string>(name: "interval_type", type: "text", nullable: true),
                    cronname = table.Column<string>(name: "cron_name", type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    doall = table.Column<bool>(type: "boolean", nullable: true),
                    nextcall = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    lastcall = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_cron_pkey", x => x.id);
                    table.ForeignKey(
                        name: "ir_cron_ir_actions_server_id_fkey",
                        column: x => x.iractionsserverid,
                        principalTable: "ir_act_server",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ir_cron_trigger",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    cronid = table.Column<Guid>(name: "cron_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    callat = table.Column<DateTime>(name: "call_at", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_cron_trigger_pkey", x => x.id);
                    table.ForeignKey(
                        name: "ir_cron_trigger_cron_id_fkey",
                        column: x => x.cronid,
                        principalTable: "ir_cron",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "ir_default",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    fieldid = table.Column<Guid>(name: "field_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    condition = table.Column<string>(type: "text", nullable: true),
                    jsonvalue = table.Column<string>(name: "json_value", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_default_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "ir_demo",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_demo_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "ir_demo_failure",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    moduleid = table.Column<Guid>(name: "module_id", type: "uuid", nullable: true),
                    wizardid = table.Column<Guid>(name: "wizard_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    error = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_demo_failure_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "ir_demo_failure_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_demo_failure_wizard_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "ir_exports",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    resource = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_exports_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "ir_exports_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    exportid = table.Column<Guid>(name: "export_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_exports_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "ir_exports_line_export_id_fkey",
                        column: x => x.exportid,
                        principalTable: "ir_exports",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ir_filters",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    actionid = table.Column<Guid>(name: "action_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    modelid = table.Column<string>(name: "model_id", type: "text", nullable: true),
                    domain = table.Column<string>(type: "text", nullable: true),
                    context = table.Column<string>(type: "text", nullable: true),
                    sort = table.Column<string>(type: "text", nullable: true),
                    isdefault = table.Column<bool>(name: "is_default", type: "boolean", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_filters_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "ir_mail_server",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    smtpport = table.Column<long>(name: "smtp_port", type: "bigint", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    fromfilter = table.Column<string>(name: "from_filter", type: "text", nullable: true),
                    smtphost = table.Column<string>(name: "smtp_host", type: "text", nullable: true),
                    smtpauthentication = table.Column<string>(name: "smtp_authentication", type: "text", nullable: true),
                    smtpuser = table.Column<string>(name: "smtp_user", type: "text", nullable: true),
                    smtppass = table.Column<string>(name: "smtp_pass", type: "text", nullable: true),
                    smtpencryption = table.Column<string>(name: "smtp_encryption", type: "text", nullable: true),
                    smtpdebug = table.Column<bool>(name: "smtp_debug", type: "boolean", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    smtpsslcertificate = table.Column<byte[]>(name: "smtp_ssl_certificate", type: "bytea", nullable: true),
                    smtpsslprivatekey = table.Column<byte[]>(name: "smtp_ssl_private_key", type: "bytea", nullable: true),
                    googlegmailaccesstokenexpiration = table.Column<long>(name: "google_gmail_access_token_expiration", type: "bigint", nullable: true),
                    googlegmailauthorizationcode = table.Column<string>(name: "google_gmail_authorization_code", type: "text", nullable: true),
                    googlegmailrefreshtoken = table.Column<string>(name: "google_gmail_refresh_token", type: "text", nullable: true),
                    googlegmailaccesstoken = table.Column<string>(name: "google_gmail_access_token", type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_mail_server_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "ir_model",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    model = table.Column<string>(type: "text", nullable: true),
                    order = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    info = table.Column<string>(type: "text", nullable: true),
                    transient = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    ismailthread = table.Column<bool>(name: "is_mail_thread", type: "boolean", nullable: true),
                    ismailactivity = table.Column<bool>(name: "is_mail_activity", type: "boolean", nullable: true),
                    ismailblacklist = table.Column<bool>(name: "is_mail_blacklist", type: "boolean", nullable: true),
                    websiteformdefaultfieldid = table.Column<Guid>(name: "website_form_default_field_id", type: "uuid", nullable: true),
                    websiteformlabel = table.Column<string>(name: "website_form_label", type: "text", nullable: true),
                    websiteformkey = table.Column<string>(name: "website_form_key", type: "text", nullable: true),
                    websiteformaccess = table.Column<bool>(name: "website_form_access", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_model_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "ir_model_access",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    modelid = table.Column<Guid>(name: "model_id", type: "uuid", nullable: true),
                    groupid = table.Column<Guid>(name: "group_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    permread = table.Column<bool>(name: "perm_read", type: "boolean", nullable: true),
                    permwrite = table.Column<bool>(name: "perm_write", type: "boolean", nullable: true),
                    permcreate = table.Column<bool>(name: "perm_create", type: "boolean", nullable: true),
                    permunlink = table.Column<bool>(name: "perm_unlink", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_model_access_pkey", x => x.id);
                    table.ForeignKey(
                        name: "ir_model_access_model_id_fkey",
                        column: x => x.modelid,
                        principalTable: "ir_model",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ir_model_constraint",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    model = table.Column<Guid>(type: "uuid", nullable: true),
                    module = table.Column<Guid>(type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    definition = table.Column<string>(type: "text", nullable: true),
                    type = table.Column<string>(type: "text", nullable: true),
                    message = table.Column<string>(type: "jsonb", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_model_constraint_pkey", x => x.id);
                    table.ForeignKey(
                        name: "ir_model_constraint_model_fkey",
                        column: x => x.model,
                        principalTable: "ir_model",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ir_model_data",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true, defaultValueSql: "(now() AT TIME ZONE 'UTC'::text)"),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true, defaultValueSql: "(now() AT TIME ZONE 'UTC'::text)"),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    resid = table.Column<Guid>(name: "res_id", type: "uuid", nullable: true),
                    noupdate = table.Column<bool>(type: "boolean", nullable: true, defaultValueSql: "false"),
                    name = table.Column<string>(type: "text", nullable: true),
                    module = table.Column<string>(type: "text", nullable: true),
                    model = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_model_data_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "ir_model_fields",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    relationfieldid = table.Column<Guid>(name: "relation_field_id", type: "uuid", nullable: true),
                    modelid = table.Column<Guid>(name: "model_id", type: "uuid", nullable: true),
                    relatedfieldid = table.Column<Guid>(name: "related_field_id", type: "uuid", nullable: true),
                    size = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    completename = table.Column<string>(name: "complete_name", type: "text", nullable: true),
                    model = table.Column<string>(type: "text", nullable: true),
                    relation = table.Column<string>(type: "text", nullable: true),
                    relationfield = table.Column<string>(name: "relation_field", type: "text", nullable: true),
                    ttype = table.Column<string>(type: "text", nullable: true),
                    related = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    ondelete = table.Column<string>(name: "on_delete", type: "text", nullable: true),
                    domain = table.Column<string>(type: "text", nullable: true),
                    relationtable = table.Column<string>(name: "relation_table", type: "text", nullable: true),
                    column1 = table.Column<string>(type: "text", nullable: true),
                    column2 = table.Column<string>(type: "text", nullable: true),
                    depends = table.Column<string>(type: "text", nullable: true),
                    fielddescription = table.Column<string>(name: "field_description", type: "jsonb", nullable: true),
                    help = table.Column<string>(type: "jsonb", nullable: true),
                    compute = table.Column<string>(type: "text", nullable: true),
                    copied = table.Column<bool>(type: "boolean", nullable: true),
                    required = table.Column<bool>(type: "boolean", nullable: true),
                    @readonly = table.Column<bool>(name: "readonly", type: "boolean", nullable: true),
                    index = table.Column<bool>(type: "boolean", nullable: true),
                    translate = table.Column<bool>(type: "boolean", nullable: true),
                    groupexpand = table.Column<bool>(name: "group_expand", type: "boolean", nullable: true),
                    selectable = table.Column<bool>(type: "boolean", nullable: true),
                    store = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    tracking = table.Column<long>(type: "bigint", nullable: true),
                    websiteformblacklisted = table.Column<bool>(name: "website_form_blacklisted", type: "boolean", nullable: true, defaultValueSql: "true")
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_model_fields_pkey", x => x.id);
                    table.ForeignKey(
                        name: "ir_model_fields_model_id_fkey",
                        column: x => x.modelid,
                        principalTable: "ir_model",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "ir_model_fields_related_field_id_fkey",
                        column: x => x.relatedfieldid,
                        principalTable: "ir_model_fields",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "ir_model_fields_relation_field_id_fkey",
                        column: x => x.relationfieldid,
                        principalTable: "ir_model_fields",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ir_model_fields_group_rel",
                columns: table => new
                {
                    fieldid = table.Column<Guid>(name: "field_id", type: "uuid", nullable: false),
                    groupid = table.Column<Guid>(name: "group_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_model_fields_group_rel_pkey", x => new { x.fieldid, x.groupid });
                    table.ForeignKey(
                        name: "ir_model_fields_group_rel_field_id_fkey",
                        column: x => x.fieldid,
                        principalTable: "ir_model_fields",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ir_model_fields_selection",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    fieldid = table.Column<Guid>(name: "field_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    value = table.Column<string>(type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_model_fields_selection_pkey", x => x.id);
                    table.ForeignKey(
                        name: "ir_model_fields_selection_field_id_fkey",
                        column: x => x.fieldid,
                        principalTable: "ir_model_fields",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ir_model_relation",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    model = table.Column<Guid>(type: "uuid", nullable: true),
                    module = table.Column<Guid>(type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_model_relation_pkey", x => x.id);
                    table.ForeignKey(
                        name: "ir_model_relation_model_fkey",
                        column: x => x.model,
                        principalTable: "ir_model",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ir_module_category",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    parentid = table.Column<Guid>(name: "parent_id", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: true),
                    description = table.Column<string>(type: "jsonb", nullable: true),
                    visible = table.Column<bool>(type: "boolean", nullable: true),
                    exclusive = table.Column<bool>(type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_module_category_pkey", x => x.id);
                    table.ForeignKey(
                        name: "ir_module_category_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "ir_module_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "ir_module_module",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    website = table.Column<string>(type: "text", nullable: true),
                    summary = table.Column<string>(type: "jsonb", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    author = table.Column<string>(type: "text", nullable: true),
                    icon = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    latestversion = table.Column<string>(name: "latest_version", type: "text", nullable: true),
                    shortdesc = table.Column<string>(type: "jsonb", nullable: true),
                    categoryid = table.Column<Guid>(name: "category_id", type: "uuid", nullable: true),
                    description = table.Column<string>(type: "jsonb", nullable: true),
                    application = table.Column<bool>(type: "boolean", nullable: true, defaultValueSql: "false"),
                    demo = table.Column<bool>(type: "boolean", nullable: true, defaultValueSql: "false"),
                    web = table.Column<bool>(type: "boolean", nullable: true, defaultValueSql: "false"),
                    license = table.Column<string>(type: "text", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    autoinstall = table.Column<bool>(name: "auto_install", type: "boolean", nullable: true, defaultValueSql: "false"),
                    tobuy = table.Column<bool>(name: "to_buy", type: "boolean", nullable: true, defaultValueSql: "false"),
                    maintainer = table.Column<string>(type: "text", nullable: true),
                    publishedversion = table.Column<string>(name: "published_version", type: "text", nullable: true),
                    url = table.Column<string>(type: "text", nullable: true),
                    contributors = table.Column<string>(type: "text", nullable: true),
                    menusbymodule = table.Column<string>(name: "menus_by_module", type: "text", nullable: true),
                    reportsbymodule = table.Column<string>(name: "reports_by_module", type: "text", nullable: true),
                    viewsbymodule = table.Column<string>(name: "views_by_module", type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_module_module_pkey", x => x.id);
                    table.ForeignKey(
                        name: "ir_module_module_category_id_fkey",
                        column: x => x.categoryid,
                        principalTable: "ir_module_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "ir_module_module_dependency",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    name = table.Column<string>(type: "text", nullable: true),
                    moduleid = table.Column<Guid>(name: "module_id", type: "uuid", nullable: true),
                    autoinstallrequired = table.Column<bool>(name: "auto_install_required", type: "boolean", nullable: true, defaultValueSql: "true")
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_module_module_dependency_pkey", x => x.id);
                    table.ForeignKey(
                        name: "ir_module_module_dependency_module_id_fkey",
                        column: x => x.moduleid,
                        principalTable: "ir_module_module",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "rel_modules_langexport",
                columns: table => new
                {
                    wizid = table.Column<Guid>(name: "wiz_id", type: "uuid", nullable: false),
                    moduleid = table.Column<Guid>(name: "module_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("rel_modules_langexport_pkey", x => new { x.wizid, x.moduleid });
                    table.ForeignKey(
                        name: "rel_modules_langexport_module_id_fkey",
                        column: x => x.moduleid,
                        principalTable: "ir_module_module",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "rel_modules_langexport_wiz_id_fkey",
                        column: x => x.wizid,
                        principalTable: "base_language_export",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ir_module_module_exclusion",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    moduleid = table.Column<Guid>(name: "module_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_module_module_exclusion_pkey", x => x.id);
                    table.ForeignKey(
                        name: "ir_module_module_exclusion_module_id_fkey",
                        column: x => x.moduleid,
                        principalTable: "ir_module_module",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ir_property",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    fieldsid = table.Column<Guid>(name: "fields_id", type: "uuid", nullable: true),
                    valueinteger = table.Column<long>(name: "value_integer", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    resid = table.Column<string>(name: "res_id", type: "text", nullable: true),
                    valuereference = table.Column<string>(name: "value_reference", type: "text", nullable: true),
                    type = table.Column<string>(type: "text", nullable: true),
                    valuetext = table.Column<string>(name: "value_text", type: "text", nullable: true),
                    valuedatetime = table.Column<DateTime>(name: "value_datetime", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    valuefloat = table.Column<double>(name: "value_float", type: "double precision", nullable: true),
                    valuebinary = table.Column<byte[]>(name: "value_binary", type: "bytea", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_property_pkey", x => x.id);
                    table.ForeignKey(
                        name: "ir_property_fields_id_fkey",
                        column: x => x.fieldsid,
                        principalTable: "ir_model_fields",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ir_rule",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    modelid = table.Column<Guid>(name: "model_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    domainforce = table.Column<string>(name: "domain_force", type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    permread = table.Column<bool>(name: "perm_read", type: "boolean", nullable: true),
                    permwrite = table.Column<bool>(name: "perm_write", type: "boolean", nullable: true),
                    permcreate = table.Column<bool>(name: "perm_create", type: "boolean", nullable: true),
                    permunlink = table.Column<bool>(name: "perm_unlink", type: "boolean", nullable: true),
                    global = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_rule_pkey", x => x.id);
                    table.ForeignKey(
                        name: "ir_rule_model_id_fkey",
                        column: x => x.modelid,
                        principalTable: "ir_model",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ir_sequence",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    numbernext = table.Column<long>(name: "number_next", type: "bigint", nullable: true),
                    numberincrement = table.Column<long>(name: "number_increment", type: "bigint", nullable: true),
                    padding = table.Column<long>(type: "bigint", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    implementation = table.Column<string>(type: "text", nullable: true),
                    prefix = table.Column<string>(type: "text", nullable: true),
                    suffix = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    usedaterange = table.Column<bool>(name: "use_date_range", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_sequence_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "ir_sequence_date_range",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequenceid = table.Column<Guid>(name: "sequence_id", type: "uuid", nullable: true),
                    numbernext = table.Column<long>(name: "number_next", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    dateto = table.Column<DateTime>(name: "date_to", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_sequence_date_range_pkey", x => x.id);
                    table.ForeignKey(
                        name: "ir_sequence_date_range_sequence_id_fkey",
                        column: x => x.sequenceid,
                        principalTable: "ir_sequence",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ir_server_object_lines",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    serverid = table.Column<Guid>(name: "server_id", type: "uuid", nullable: true),
                    col1 = table.Column<Guid>(type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    evaluationtype = table.Column<string>(name: "evaluation_type", type: "text", nullable: true),
                    value = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_server_object_lines_pkey", x => x.id);
                    table.ForeignKey(
                        name: "ir_server_object_lines_col1_fkey",
                        column: x => x.col1,
                        principalTable: "ir_model_fields",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "ir_server_object_lines_server_id_fkey",
                        column: x => x.serverid,
                        principalTable: "ir_act_server",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ir_ui_menu",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    parentid = table.Column<Guid>(name: "parent_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    parentpath = table.Column<string>(name: "parent_path", type: "text", nullable: true),
                    webicon = table.Column<string>(name: "web_icon", type: "text", nullable: true),
                    action = table.Column<string>(type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_ui_menu_pkey", x => x.id);
                    table.ForeignKey(
                        name: "ir_ui_menu_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "ir_ui_menu",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ir_ui_menu_group_rel",
                columns: table => new
                {
                    menuid = table.Column<Guid>(name: "menu_id", type: "uuid", nullable: false),
                    gid = table.Column<Guid>(type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_ui_menu_group_rel_pkey", x => new { x.menuid, x.gid });
                    table.ForeignKey(
                        name: "ir_ui_menu_group_rel_menu_id_fkey",
                        column: x => x.menuid,
                        principalTable: "ir_ui_menu",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ir_ui_view",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    priority = table.Column<long>(type: "bigint", nullable: true),
                    inheritid = table.Column<Guid>(name: "inherit_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    model = table.Column<string>(type: "text", nullable: true),
                    key = table.Column<string>(type: "text", nullable: true),
                    type = table.Column<string>(type: "text", nullable: true),
                    archfs = table.Column<string>(name: "arch_fs", type: "text", nullable: true),
                    fieldparent = table.Column<string>(name: "field_parent", type: "text", nullable: true),
                    mode = table.Column<string>(type: "text", nullable: true),
                    archdb = table.Column<string>(name: "arch_db", type: "jsonb", nullable: true),
                    archprev = table.Column<string>(name: "arch_prev", type: "text", nullable: true),
                    archupdated = table.Column<bool>(name: "arch_updated", type: "boolean", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    customizeshow = table.Column<bool>(name: "customize_show", type: "boolean", nullable: true),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: true),
                    themetemplateid = table.Column<long>(name: "theme_template_id", type: "bigint", nullable: true),
                    websitemetaogimg = table.Column<string>(name: "website_meta_og_img", type: "text", nullable: true),
                    visibility = table.Column<string>(type: "text", nullable: true),
                    visibilitypassword = table.Column<string>(name: "visibility_password", type: "text", nullable: true),
                    websitemetatitle = table.Column<string>(name: "website_meta_title", type: "jsonb", nullable: true),
                    websitemetadescription = table.Column<string>(name: "website_meta_description", type: "jsonb", nullable: true),
                    websitemetakeywords = table.Column<string>(name: "website_meta_keywords", type: "jsonb", nullable: true),
                    seoname = table.Column<string>(name: "seo_name", type: "jsonb", nullable: true),
                    track = table.Column<bool>(type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_ui_view_pkey", x => x.id);
                    table.ForeignKey(
                        name: "ir_ui_view_inherit_id_fkey",
                        column: x => x.inheritid,
                        principalTable: "ir_ui_view",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "ir_ui_view_custom",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    refid = table.Column<Guid>(name: "ref_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    arch = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_ui_view_custom_pkey", x => x.id);
                    table.ForeignKey(
                        name: "ir_ui_view_custom_ref_id_fkey",
                        column: x => x.refid,
                        principalTable: "ir_ui_view",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ir_ui_view_group_rel",
                columns: table => new
                {
                    viewid = table.Column<Guid>(name: "view_id", type: "uuid", nullable: false),
                    groupid = table.Column<Guid>(name: "group_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("ir_ui_view_group_rel_pkey", x => new { x.viewid, x.groupid });
                    table.ForeignKey(
                        name: "ir_ui_view_group_rel_view_id_fkey",
                        column: x => x.viewid,
                        principalTable: "ir_ui_view",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "job_favorite_user_rel",
                columns: table => new
                {
                    jobid = table.Column<Guid>(name: "job_id", type: "uuid", nullable: false),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("job_favorite_user_rel_pkey", x => new { x.jobid, x.userid });
                    table.ForeignKey(
                        name: "job_favorite_user_rel_job_id_fkey",
                        column: x => x.jobid,
                        principalTable: "hr_job",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "lot_label_layout",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    labelquantity = table.Column<string>(name: "label_quantity", type: "text", nullable: true),
                    printformat = table.Column<string>(name: "print_format", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("lot_label_layout_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "lot_label_layout_stock_picking_rel",
                columns: table => new
                {
                    lotlabellayoutid = table.Column<Guid>(name: "lot_label_layout_id", type: "uuid", nullable: false),
                    stockpickingid = table.Column<Guid>(name: "stock_picking_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("lot_label_layout_stock_picking_rel_pkey", x => new { x.lotlabellayoutid, x.stockpickingid });
                    table.ForeignKey(
                        name: "lot_label_layout_stock_picking_rel_lot_label_layout_id_fkey",
                        column: x => x.lotlabellayoutid,
                        principalTable: "lot_label_layout",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "lunch_alert",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    cronid = table.Column<Guid>(name: "cron_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    mode = table.Column<string>(type: "text", nullable: true),
                    recipients = table.Column<string>(type: "text", nullable: true),
                    notificationmoment = table.Column<string>(name: "notification_moment", type: "text", nullable: true),
                    tz = table.Column<string>(type: "text", nullable: true),
                    until = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    message = table.Column<string>(type: "jsonb", nullable: true),
                    mon = table.Column<bool>(type: "boolean", nullable: true),
                    tue = table.Column<bool>(type: "boolean", nullable: true),
                    wed = table.Column<bool>(type: "boolean", nullable: true),
                    thu = table.Column<bool>(type: "boolean", nullable: true),
                    fri = table.Column<bool>(type: "boolean", nullable: true),
                    sat = table.Column<bool>(type: "boolean", nullable: true),
                    sun = table.Column<bool>(type: "boolean", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    notificationtime = table.Column<double>(name: "notification_time", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("lunch_alert_pkey", x => x.id);
                    table.ForeignKey(
                        name: "lunch_alert_cron_id_fkey",
                        column: x => x.cronid,
                        principalTable: "ir_cron",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "lunch_alert_lunch_location_rel",
                columns: table => new
                {
                    lunchalertid = table.Column<Guid>(name: "lunch_alert_id", type: "uuid", nullable: false),
                    lunchlocationid = table.Column<Guid>(name: "lunch_location_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("lunch_alert_lunch_location_rel_pkey", x => new { x.lunchalertid, x.lunchlocationid });
                    table.ForeignKey(
                        name: "lunch_alert_lunch_location_rel_lunch_alert_id_fkey",
                        column: x => x.lunchalertid,
                        principalTable: "lunch_alert",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "lunch_cashmove",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    amount = table.Column<double>(type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("lunch_cashmove_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "lunch_location",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    address = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("lunch_location_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "lunch_location_lunch_supplier_rel",
                columns: table => new
                {
                    lunchsupplierid = table.Column<Guid>(name: "lunch_supplier_id", type: "uuid", nullable: false),
                    lunchlocationid = table.Column<Guid>(name: "lunch_location_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("lunch_location_lunch_supplier_rel_pkey", x => new { x.lunchsupplierid, x.lunchlocationid });
                    table.ForeignKey(
                        name: "lunch_location_lunch_supplier_rel_lunch_location_id_fkey",
                        column: x => x.lunchlocationid,
                        principalTable: "lunch_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "lunch_order",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    categoryid = table.Column<Guid>(name: "category_id", type: "uuid", nullable: true),
                    supplierid = table.Column<Guid>(name: "supplier_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    lunchlocationid = table.Column<Guid>(name: "lunch_location_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    note = table.Column<string>(type: "text", nullable: true),
                    displaytoppings = table.Column<string>(name: "display_toppings", type: "text", nullable: true),
                    price = table.Column<decimal>(type: "numeric", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    notified = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    quantity = table.Column<double>(type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("lunch_order_pkey", x => x.id);
                    table.ForeignKey(
                        name: "lunch_order_lunch_location_id_fkey",
                        column: x => x.lunchlocationid,
                        principalTable: "lunch_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "lunch_order_topping",
                columns: table => new
                {
                    orderid = table.Column<Guid>(name: "order_id", type: "uuid", nullable: false),
                    toppingid = table.Column<Guid>(name: "topping_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("lunch_order_topping_pkey", x => new { x.orderid, x.toppingid });
                    table.ForeignKey(
                        name: "lunch_order_topping_order_id_fkey",
                        column: x => x.orderid,
                        principalTable: "lunch_order",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "lunch_product",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    categoryid = table.Column<Guid>(name: "category_id", type: "uuid", nullable: true),
                    supplierid = table.Column<Guid>(name: "supplier_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    newuntil = table.Column<DateTime>(name: "new_until", type: "timestamp without time zone", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    description = table.Column<string>(type: "jsonb", nullable: true),
                    price = table.Column<decimal>(type: "numeric", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("lunch_product_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "lunch_product_category",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("lunch_product_category_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "lunch_product_favorite_user_rel",
                columns: table => new
                {
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: false),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("lunch_product_favorite_user_rel_pkey", x => new { x.productid, x.userid });
                    table.ForeignKey(
                        name: "lunch_product_favorite_user_rel_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "lunch_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "lunch_supplier",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    responsibleid = table.Column<Guid>(name: "responsible_id", type: "uuid", nullable: true),
                    cronid = table.Column<Guid>(name: "cron_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    sendby = table.Column<string>(name: "send_by", type: "text", nullable: true),
                    tz = table.Column<string>(type: "text", nullable: true),
                    moment = table.Column<string>(type: "text", nullable: true),
                    delivery = table.Column<string>(type: "text", nullable: true),
                    toppinglabel1 = table.Column<string>(name: "topping_label_1", type: "text", nullable: true),
                    toppinglabel2 = table.Column<string>(name: "topping_label_2", type: "text", nullable: true),
                    toppinglabel3 = table.Column<string>(name: "topping_label_3", type: "text", nullable: true),
                    toppingquantity1 = table.Column<string>(name: "topping_quantity_1", type: "text", nullable: true),
                    toppingquantity2 = table.Column<string>(name: "topping_quantity_2", type: "text", nullable: true),
                    toppingquantity3 = table.Column<string>(name: "topping_quantity_3", type: "text", nullable: true),
                    recurrencyenddate = table.Column<DateTime>(name: "recurrency_end_date", type: "timestamp without time zone", nullable: true),
                    mon = table.Column<bool>(type: "boolean", nullable: true),
                    tue = table.Column<bool>(type: "boolean", nullable: true),
                    wed = table.Column<bool>(type: "boolean", nullable: true),
                    thu = table.Column<bool>(type: "boolean", nullable: true),
                    fri = table.Column<bool>(type: "boolean", nullable: true),
                    sat = table.Column<bool>(type: "boolean", nullable: true),
                    sun = table.Column<bool>(type: "boolean", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    automaticemailtime = table.Column<double>(name: "automatic_email_time", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("lunch_supplier_pkey", x => x.id);
                    table.ForeignKey(
                        name: "lunch_supplier_cron_id_fkey",
                        column: x => x.cronid,
                        principalTable: "ir_cron",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "lunch_supplier_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "lunch_topping",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    supplierid = table.Column<Guid>(name: "supplier_id", type: "uuid", nullable: true),
                    toppingcategory = table.Column<long>(name: "topping_category", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    price = table.Column<decimal>(type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("lunch_topping_pkey", x => x.id);
                    table.ForeignKey(
                        name: "lunch_topping_supplier_id_fkey",
                        column: x => x.supplierid,
                        principalTable: "lunch_supplier",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mail_activity",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    resmodelid = table.Column<Guid>(name: "res_model_id", type: "uuid", nullable: true),
                    resid = table.Column<Guid>(name: "res_id", type: "uuid", nullable: true),
                    activitytypeid = table.Column<long>(name: "activity_type_id", type: "bigint", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    requestpartnerid = table.Column<Guid>(name: "request_partner_id", type: "uuid", nullable: true),
                    recommendedactivitytypeid = table.Column<long>(name: "recommended_activity_type_id", type: "bigint", nullable: true),
                    previousactivitytypeid = table.Column<long>(name: "previous_activity_type_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    resmodel = table.Column<string>(name: "res_model", type: "text", nullable: true),
                    resname = table.Column<string>(name: "res_name", type: "text", nullable: true),
                    summary = table.Column<string>(type: "text", nullable: true),
                    datedeadline = table.Column<DateTime>(name: "date_deadline", type: "timestamp without time zone", nullable: true),
                    note = table.Column<string>(type: "text", nullable: true),
                    automated = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    calendareventid = table.Column<Guid>(name: "calendar_event_id", type: "uuid", nullable: true),
                    noteid = table.Column<Guid>(name: "note_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_activity_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mail_activity_calendar_event_id_fkey",
                        column: x => x.calendareventid,
                        principalTable: "calendar_event",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "mail_activity_res_model_id_fkey",
                        column: x => x.resmodelid,
                        principalTable: "ir_model",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mail_activity_rel",
                columns: table => new
                {
                    activityid = table.Column<long>(name: "activity_id", type: "bigint", nullable: false),
                    recommendedid = table.Column<long>(name: "recommended_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_activity_rel_pkey", x => new { x.activityid, x.recommendedid });
                });

            migrationBuilder.CreateTable(
                name: "mail_activity_type",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    delaycount = table.Column<long>(name: "delay_count", type: "bigint", nullable: true),
                    triggerednexttypeid = table.Column<long>(name: "triggered_next_type_id", type: "bigint", nullable: true),
                    defaultuserid = table.Column<Guid>(name: "default_user_id", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    delayunit = table.Column<string>(name: "delay_unit", type: "text", nullable: true),
                    delayfrom = table.Column<string>(name: "delay_from", type: "text", nullable: true),
                    icon = table.Column<string>(type: "text", nullable: true),
                    decorationtype = table.Column<string>(name: "decoration_type", type: "text", nullable: true),
                    resmodel = table.Column<string>(name: "res_model", type: "text", nullable: true),
                    chainingtype = table.Column<string>(name: "chaining_type", type: "text", nullable: true),
                    category = table.Column<string>(type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    summary = table.Column<string>(type: "jsonb", nullable: true),
                    defaultnote = table.Column<string>(name: "default_note", type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_activity_type_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mail_activity_type_triggered_next_type_id_fkey",
                        column: x => x.triggerednexttypeid,
                        principalTable: "mail_activity_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "mail_activity_type_mail_template_rel",
                columns: table => new
                {
                    mailactivitytypeid = table.Column<long>(name: "mail_activity_type_id", type: "bigint", nullable: false),
                    mailtemplateid = table.Column<Guid>(name: "mail_template_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_activity_type_mail_template_rel_pkey", x => new { x.mailactivitytypeid, x.mailtemplateid });
                    table.ForeignKey(
                        name: "mail_activity_type_mail_template_rel_mail_activity_type_id_fkey",
                        column: x => x.mailactivitytypeid,
                        principalTable: "mail_activity_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mail_alias",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    aliasmodelid = table.Column<Guid>(name: "alias_model_id", type: "uuid", nullable: true),
                    aliasuserid = table.Column<Guid>(name: "alias_user_id", type: "uuid", nullable: true),
                    aliasforcethreadid = table.Column<Guid>(name: "alias_force_thread_id", type: "uuid", nullable: true),
                    aliasparentmodelid = table.Column<Guid>(name: "alias_parent_model_id", type: "uuid", nullable: true),
                    aliasparentthreadid = table.Column<Guid>(name: "alias_parent_thread_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    aliasname = table.Column<string>(name: "alias_name", type: "text", nullable: true),
                    aliascontact = table.Column<string>(name: "alias_contact", type: "text", nullable: true),
                    aliasbouncedcontent = table.Column<string>(name: "alias_bounced_content", type: "jsonb", nullable: true),
                    aliasdefaults = table.Column<string>(name: "alias_defaults", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_alias_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mail_alias_alias_model_id_fkey",
                        column: x => x.aliasmodelid,
                        principalTable: "ir_model",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "mail_alias_alias_parent_model_id_fkey",
                        column: x => x.aliasparentmodelid,
                        principalTable: "ir_model",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "mail_blacklist",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    email = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_blacklist_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mail_blacklist_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "mail_blacklist_remove",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    email = table.Column<string>(type: "text", nullable: true),
                    reason = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_blacklist_remove_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "mail_channel",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    grouppublicid = table.Column<Guid>(name: "group_public_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    channeltype = table.Column<string>(name: "channel_type", type: "text", nullable: true),
                    defaultdisplaymode = table.Column<string>(name: "default_display_mode", type: "text", nullable: true),
                    uuid = table.Column<string>(type: "text", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_channel_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mail_channel_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "mail_channel_member",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    guestid = table.Column<Guid>(name: "guest_id", type: "uuid", nullable: true),
                    channelid = table.Column<Guid>(name: "channel_id", type: "uuid", nullable: true),
                    fetchedmessageid = table.Column<Guid>(name: "fetched_message_id", type: "uuid", nullable: true),
                    seenmessageid = table.Column<Guid>(name: "seen_message_id", type: "uuid", nullable: true),
                    rtcinvitingsessionid = table.Column<Guid>(name: "rtc_inviting_session_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    customchannelname = table.Column<string>(name: "custom_channel_name", type: "text", nullable: true),
                    foldstate = table.Column<string>(name: "fold_state", type: "text", nullable: true),
                    isminimized = table.Column<bool>(name: "is_minimized", type: "boolean", nullable: true),
                    ispinned = table.Column<bool>(name: "is_pinned", type: "boolean", nullable: true),
                    lastinterestdt = table.Column<DateTime>(name: "last_interest_dt", type: "timestamp without time zone", nullable: true),
                    lastseendt = table.Column<DateTime>(name: "last_seen_dt", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_channel_member_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mail_channel_member_channel_id_fkey",
                        column: x => x.channelid,
                        principalTable: "mail_channel",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mail_channel_res_groups_rel",
                columns: table => new
                {
                    mailchannelid = table.Column<Guid>(name: "mail_channel_id", type: "uuid", nullable: false),
                    resgroupsid = table.Column<Guid>(name: "res_groups_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_channel_res_groups_rel_pkey", x => new { x.mailchannelid, x.resgroupsid });
                    table.ForeignKey(
                        name: "mail_channel_res_groups_rel_mail_channel_id_fkey",
                        column: x => x.mailchannelid,
                        principalTable: "mail_channel",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mail_channel_rtc_session",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    channelmemberid = table.Column<Guid>(name: "channel_member_id", type: "uuid", nullable: true),
                    channelid = table.Column<Guid>(name: "channel_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    isscreensharingon = table.Column<bool>(name: "is_screen_sharing_on", type: "boolean", nullable: true),
                    iscameraon = table.Column<bool>(name: "is_camera_on", type: "boolean", nullable: true),
                    ismuted = table.Column<bool>(name: "is_muted", type: "boolean", nullable: true),
                    isdeaf = table.Column<bool>(name: "is_deaf", type: "boolean", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_channel_rtc_session_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mail_channel_rtc_session_channel_id_fkey",
                        column: x => x.channelid,
                        principalTable: "mail_channel",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "mail_channel_rtc_session_channel_member_id_fkey",
                        column: x => x.channelmemberid,
                        principalTable: "mail_channel_member",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mail_compose_message",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    templateid = table.Column<Guid>(name: "template_id", type: "uuid", nullable: true),
                    parentid = table.Column<Guid>(name: "parent_id", type: "uuid", nullable: true),
                    authorid = table.Column<Guid>(name: "author_id", type: "uuid", nullable: true),
                    resid = table.Column<Guid>(name: "res_id", type: "uuid", nullable: true),
                    subtypeid = table.Column<long>(name: "subtype_id", type: "bigint", nullable: true),
                    mailactivitytypeid = table.Column<long>(name: "mail_activity_type_id", type: "bigint", nullable: true),
                    mailserverid = table.Column<Guid>(name: "mail_server_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    lang = table.Column<string>(type: "text", nullable: true),
                    subject = table.Column<string>(type: "text", nullable: true),
                    emaillayoutxmlid = table.Column<string>(name: "email_layout_xmlid", type: "text", nullable: true),
                    emailfrom = table.Column<string>(name: "email_from", type: "text", nullable: true),
                    compositionmode = table.Column<string>(name: "composition_mode", type: "text", nullable: true),
                    model = table.Column<string>(type: "text", nullable: true),
                    recordname = table.Column<string>(name: "record_name", type: "text", nullable: true),
                    messagetype = table.Column<string>(name: "message_type", type: "text", nullable: true),
                    replyto = table.Column<string>(name: "reply_to", type: "text", nullable: true),
                    body = table.Column<string>(type: "text", nullable: true),
                    activedomain = table.Column<string>(name: "active_domain", type: "text", nullable: true),
                    emailaddsignature = table.Column<bool>(name: "email_add_signature", type: "boolean", nullable: true),
                    useactivedomain = table.Column<bool>(name: "use_active_domain", type: "boolean", nullable: true),
                    islog = table.Column<bool>(name: "is_log", type: "boolean", nullable: true),
                    notify = table.Column<bool>(type: "boolean", nullable: true),
                    replytoforcenew = table.Column<bool>(name: "reply_to_force_new", type: "boolean", nullable: true),
                    autodelete = table.Column<bool>(name: "auto_delete", type: "boolean", nullable: true),
                    autodeletemessage = table.Column<bool>(name: "auto_delete_message", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_compose_message_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mail_compose_message_mail_activity_type_id_fkey",
                        column: x => x.mailactivitytypeid,
                        principalTable: "mail_activity_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "mail_compose_message_mail_server_id_fkey",
                        column: x => x.mailserverid,
                        principalTable: "ir_mail_server",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "mail_compose_message_ir_attachments_rel",
                columns: table => new
                {
                    wizardid = table.Column<Guid>(name: "wizard_id", type: "uuid", nullable: false),
                    attachmentid = table.Column<Guid>(name: "attachment_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_compose_message_ir_attachments_rel_pkey", x => new { x.wizardid, x.attachmentid });
                    table.ForeignKey(
                        name: "mail_compose_message_ir_attachments_rel_attachment_id_fkey",
                        column: x => x.attachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "mail_compose_message_ir_attachments_rel_wizard_id_fkey",
                        column: x => x.wizardid,
                        principalTable: "mail_compose_message",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mail_compose_message_res_partner_rel",
                columns: table => new
                {
                    wizardid = table.Column<Guid>(name: "wizard_id", type: "uuid", nullable: false),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_compose_message_res_partner_rel_pkey", x => new { x.wizardid, x.partnerid });
                    table.ForeignKey(
                        name: "mail_compose_message_res_partner_rel_wizard_id_fkey",
                        column: x => x.wizardid,
                        principalTable: "mail_compose_message",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mail_followers",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    resid = table.Column<Guid>(name: "res_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    resmodel = table.Column<string>(name: "res_model", type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_followers_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "mail_followers_mail_message_subtype_rel",
                columns: table => new
                {
                    mailfollowersid = table.Column<Guid>(name: "mail_followers_id", type: "uuid", nullable: false),
                    mailmessagesubtypeid = table.Column<long>(name: "mail_message_subtype_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_followers_mail_message_subtype_rel_pkey", x => new { x.mailfollowersid, x.mailmessagesubtypeid });
                    table.ForeignKey(
                        name: "mail_followers_mail_message_subtype_rel_mail_followers_id_fkey",
                        column: x => x.mailfollowersid,
                        principalTable: "mail_followers",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mail_gateway_allowed",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    email = table.Column<string>(type: "text", nullable: true),
                    emailnormalized = table.Column<string>(name: "email_normalized", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_gateway_allowed_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "mail_guest",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    countryid = table.Column<long>(name: "country_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    accesstoken = table.Column<string>(name: "access_token", type: "text", nullable: true),
                    lang = table.Column<string>(type: "text", nullable: true),
                    timezone = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_guest_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "mail_ice_server",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    servertype = table.Column<string>(name: "server_type", type: "text", nullable: true),
                    uri = table.Column<string>(type: "text", nullable: true),
                    username = table.Column<string>(type: "text", nullable: true),
                    credential = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_ice_server_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "mail_link_preview",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messageid = table.Column<Guid>(name: "message_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    sourceurl = table.Column<string>(name: "source_url", type: "text", nullable: true),
                    ogtype = table.Column<string>(name: "og_type", type: "text", nullable: true),
                    ogtitle = table.Column<string>(name: "og_title", type: "text", nullable: true),
                    ogimage = table.Column<string>(name: "og_image", type: "text", nullable: true),
                    ogmimetype = table.Column<string>(name: "og_mimetype", type: "text", nullable: true),
                    imagemimetype = table.Column<string>(name: "image_mimetype", type: "text", nullable: true),
                    ogdescription = table.Column<string>(name: "og_description", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_link_preview_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "mail_mail",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    mailmessageid = table.Column<Guid>(name: "mail_message_id", type: "uuid", nullable: true),
                    fetchmailserverid = table.Column<Guid>(name: "fetchmail_server_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    emailcc = table.Column<string>(name: "email_cc", type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    failuretype = table.Column<string>(name: "failure_type", type: "text", nullable: true),
                    bodyhtml = table.Column<string>(name: "body_html", type: "text", nullable: true),
                    references = table.Column<string>(type: "text", nullable: true),
                    headers = table.Column<string>(type: "text", nullable: true),
                    emailto = table.Column<string>(name: "email_to", type: "text", nullable: true),
                    failurereason = table.Column<string>(name: "failure_reason", type: "text", nullable: true),
                    isnotification = table.Column<bool>(name: "is_notification", type: "boolean", nullable: true),
                    autodelete = table.Column<bool>(name: "auto_delete", type: "boolean", nullable: true),
                    todelete = table.Column<bool>(name: "to_delete", type: "boolean", nullable: true),
                    scheduleddate = table.Column<DateTime>(name: "scheduled_date", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_mail_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mail_mail_fetchmail_server_id_fkey",
                        column: x => x.fetchmailserverid,
                        principalTable: "fetchmail_server",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "mail_mail_res_partner_rel",
                columns: table => new
                {
                    mailmailid = table.Column<Guid>(name: "mail_mail_id", type: "uuid", nullable: false),
                    respartnerid = table.Column<Guid>(name: "res_partner_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_mail_res_partner_rel_pkey", x => new { x.mailmailid, x.respartnerid });
                    table.ForeignKey(
                        name: "mail_mail_res_partner_rel_mail_mail_id_fkey",
                        column: x => x.mailmailid,
                        principalTable: "mail_mail",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mail_message",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    parentid = table.Column<Guid>(name: "parent_id", type: "uuid", nullable: true),
                    resid = table.Column<Guid>(name: "res_id", type: "uuid", nullable: true),
                    subtypeid = table.Column<long>(name: "subtype_id", type: "bigint", nullable: true),
                    mailactivitytypeid = table.Column<long>(name: "mail_activity_type_id", type: "bigint", nullable: true),
                    authorid = table.Column<Guid>(name: "author_id", type: "uuid", nullable: true),
                    authorguestid = table.Column<Guid>(name: "author_guest_id", type: "uuid", nullable: true),
                    mailserverid = table.Column<Guid>(name: "mail_server_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    subject = table.Column<string>(type: "text", nullable: true),
                    model = table.Column<string>(type: "text", nullable: true),
                    recordname = table.Column<string>(name: "record_name", type: "text", nullable: true),
                    messagetype = table.Column<string>(name: "message_type", type: "text", nullable: true),
                    emailfrom = table.Column<string>(name: "email_from", type: "text", nullable: true),
                    messageid = table.Column<string>(name: "message_id", type: "text", nullable: true),
                    replyto = table.Column<string>(name: "reply_to", type: "text", nullable: true),
                    emaillayoutxmlid = table.Column<string>(name: "email_layout_xmlid", type: "text", nullable: true),
                    body = table.Column<string>(type: "text", nullable: true),
                    isinternal = table.Column<bool>(name: "is_internal", type: "boolean", nullable: true),
                    replytoforcenew = table.Column<bool>(name: "reply_to_force_new", type: "boolean", nullable: true),
                    emailaddsignature = table.Column<bool>(name: "email_add_signature", type: "boolean", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_message_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mail_message_author_guest_id_fkey",
                        column: x => x.authorguestid,
                        principalTable: "mail_guest",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "mail_message_mail_activity_type_id_fkey",
                        column: x => x.mailactivitytypeid,
                        principalTable: "mail_activity_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "mail_message_mail_server_id_fkey",
                        column: x => x.mailserverid,
                        principalTable: "ir_mail_server",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "mail_message_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "mail_message",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "message_attachment_rel",
                columns: table => new
                {
                    messageid = table.Column<Guid>(name: "message_id", type: "uuid", nullable: false),
                    attachmentid = table.Column<Guid>(name: "attachment_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("message_attachment_rel_pkey", x => new { x.messageid, x.attachmentid });
                    table.ForeignKey(
                        name: "message_attachment_rel_attachment_id_fkey",
                        column: x => x.attachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "message_attachment_rel_message_id_fkey",
                        column: x => x.messageid,
                        principalTable: "mail_message",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mail_message_reaction",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messageid = table.Column<Guid>(name: "message_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    guestid = table.Column<Guid>(name: "guest_id", type: "uuid", nullable: true),
                    content = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_message_reaction_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mail_message_reaction_guest_id_fkey",
                        column: x => x.guestid,
                        principalTable: "mail_guest",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "mail_message_reaction_message_id_fkey",
                        column: x => x.messageid,
                        principalTable: "mail_message",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mail_message_res_partner_rel",
                columns: table => new
                {
                    mailmessageid = table.Column<Guid>(name: "mail_message_id", type: "uuid", nullable: false),
                    respartnerid = table.Column<Guid>(name: "res_partner_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_message_res_partner_rel_pkey", x => new { x.mailmessageid, x.respartnerid });
                    table.ForeignKey(
                        name: "mail_message_res_partner_rel_mail_message_id_fkey",
                        column: x => x.mailmessageid,
                        principalTable: "mail_message",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mail_message_res_partner_starred_rel",
                columns: table => new
                {
                    mailmessageid = table.Column<Guid>(name: "mail_message_id", type: "uuid", nullable: false),
                    respartnerid = table.Column<Guid>(name: "res_partner_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_message_res_partner_starred_rel_pkey", x => new { x.mailmessageid, x.respartnerid });
                    table.ForeignKey(
                        name: "mail_message_res_partner_starred_rel_mail_message_id_fkey",
                        column: x => x.mailmessageid,
                        principalTable: "mail_message",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mail_message_schedule",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    mailmessageid = table.Column<Guid>(name: "mail_message_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    notificationparameters = table.Column<string>(name: "notification_parameters", type: "text", nullable: true),
                    scheduleddatetime = table.Column<DateTime>(name: "scheduled_datetime", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_message_schedule_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mail_message_schedule_mail_message_id_fkey",
                        column: x => x.mailmessageid,
                        principalTable: "mail_message",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mail_message_subtype",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    parentid = table.Column<long>(name: "parent_id", type: "bigint", nullable: true),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    relationfield = table.Column<string>(name: "relation_field", type: "text", nullable: true),
                    resmodel = table.Column<string>(name: "res_model", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    description = table.Column<string>(type: "jsonb", nullable: true),
                    @internal = table.Column<bool>(name: "internal", type: "boolean", nullable: true),
                    @default = table.Column<bool>(name: "default", type: "boolean", nullable: true),
                    hidden = table.Column<bool>(type: "boolean", nullable: true),
                    trackrecipients = table.Column<bool>(name: "track_recipients", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_message_subtype_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mail_message_subtype_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "mail_message_subtype",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "mail_notification",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    authorid = table.Column<Guid>(name: "author_id", type: "uuid", nullable: true),
                    mailmessageid = table.Column<Guid>(name: "mail_message_id", type: "uuid", nullable: true),
                    mailmailid = table.Column<Guid>(name: "mail_mail_id", type: "uuid", nullable: true),
                    respartnerid = table.Column<Guid>(name: "res_partner_id", type: "uuid", nullable: true),
                    notificationtype = table.Column<string>(name: "notification_type", type: "text", nullable: true),
                    notificationstatus = table.Column<string>(name: "notification_status", type: "text", nullable: true),
                    failuretype = table.Column<string>(name: "failure_type", type: "text", nullable: true),
                    failurereason = table.Column<string>(name: "failure_reason", type: "text", nullable: true),
                    isread = table.Column<bool>(name: "is_read", type: "boolean", nullable: true),
                    readdate = table.Column<DateTime>(name: "read_date", type: "timestamp without time zone", nullable: true),
                    smsid = table.Column<Guid>(name: "sms_id", type: "uuid", nullable: true),
                    smsnumber = table.Column<string>(name: "sms_number", type: "text", nullable: true),
                    letterid = table.Column<Guid>(name: "letter_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_notification_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mail_notification_mail_mail_id_fkey",
                        column: x => x.mailmailid,
                        principalTable: "mail_mail",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "mail_notification_mail_message_id_fkey",
                        column: x => x.mailmessageid,
                        principalTable: "mail_message",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mail_notification_mail_resend_message_rel",
                columns: table => new
                {
                    mailresendmessageid = table.Column<Guid>(name: "mail_resend_message_id", type: "uuid", nullable: false),
                    mailnotificationid = table.Column<Guid>(name: "mail_notification_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_notification_mail_resend_message_rel_pkey", x => new { x.mailresendmessageid, x.mailnotificationid });
                    table.ForeignKey(
                        name: "mail_notification_mail_resend_message_mail_notification_id_fkey",
                        column: x => x.mailnotificationid,
                        principalTable: "mail_notification",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mail_resend_message",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    mailmessageid = table.Column<Guid>(name: "mail_message_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_resend_message_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mail_resend_message_mail_message_id_fkey",
                        column: x => x.mailmessageid,
                        principalTable: "mail_message",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "mail_resend_partner",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    resendwizardid = table.Column<Guid>(name: "resend_wizard_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    message = table.Column<string>(type: "text", nullable: true),
                    resend = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_resend_partner_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mail_resend_partner_resend_wizard_id_fkey",
                        column: x => x.resendwizardid,
                        principalTable: "mail_resend_message",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "mail_shortcode",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    source = table.Column<string>(type: "text", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    substitution = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_shortcode_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "mail_template",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    modelid = table.Column<Guid>(name: "model_id", type: "uuid", nullable: true),
                    reporttemplate = table.Column<Guid>(name: "report_template", type: "uuid", nullable: true),
                    mailserverid = table.Column<Guid>(name: "mail_server_id", type: "uuid", nullable: true),
                    refiractwindow = table.Column<Guid>(name: "ref_ir_act_window", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    templatefs = table.Column<string>(name: "template_fs", type: "text", nullable: true),
                    lang = table.Column<string>(type: "text", nullable: true),
                    model = table.Column<string>(type: "text", nullable: true),
                    emailfrom = table.Column<string>(name: "email_from", type: "text", nullable: true),
                    emailto = table.Column<string>(name: "email_to", type: "text", nullable: true),
                    partnerto = table.Column<string>(name: "partner_to", type: "text", nullable: true),
                    emailcc = table.Column<string>(name: "email_cc", type: "text", nullable: true),
                    replyto = table.Column<string>(name: "reply_to", type: "text", nullable: true),
                    scheduleddate = table.Column<string>(name: "scheduled_date", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    description = table.Column<string>(type: "jsonb", nullable: true),
                    subject = table.Column<string>(type: "jsonb", nullable: true),
                    bodyhtml = table.Column<string>(name: "body_html", type: "jsonb", nullable: true),
                    reportname = table.Column<string>(name: "report_name", type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    usedefaultto = table.Column<bool>(name: "use_default_to", type: "boolean", nullable: true),
                    autodelete = table.Column<bool>(name: "auto_delete", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_template_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mail_template_mail_server_id_fkey",
                        column: x => x.mailserverid,
                        principalTable: "ir_mail_server",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "mail_template_model_id_fkey",
                        column: x => x.modelid,
                        principalTable: "ir_model",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "mail_template_ref_ir_act_window_fkey",
                        column: x => x.refiractwindow,
                        principalTable: "ir_act_window",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "mail_template_report_template_fkey",
                        column: x => x.reporttemplate,
                        principalTable: "ir_act_report_xml",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "mail_template_mail_template_reset_rel",
                columns: table => new
                {
                    mailtemplateresetid = table.Column<Guid>(name: "mail_template_reset_id", type: "uuid", nullable: false),
                    mailtemplateid = table.Column<Guid>(name: "mail_template_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_template_mail_template_reset_rel_pkey", x => new { x.mailtemplateresetid, x.mailtemplateid });
                    table.ForeignKey(
                        name: "mail_template_mail_template_reset_rel_mail_template_id_fkey",
                        column: x => x.mailtemplateid,
                        principalTable: "mail_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mail_template_preview",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    mailtemplateid = table.Column<Guid>(name: "mail_template_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    resourceref = table.Column<string>(name: "resource_ref", type: "text", nullable: true),
                    lang = table.Column<string>(type: "text", nullable: true),
                    errormsg = table.Column<string>(name: "error_msg", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_template_preview_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mail_template_preview_mail_template_id_fkey",
                        column: x => x.mailtemplateid,
                        principalTable: "mail_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mail_template_reset",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_template_reset_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "mail_tracking_value",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    field = table.Column<Guid>(type: "uuid", nullable: true),
                    oldvalueinteger = table.Column<long>(name: "old_value_integer", type: "bigint", nullable: true),
                    newvalueinteger = table.Column<long>(name: "new_value_integer", type: "bigint", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    mailmessageid = table.Column<Guid>(name: "mail_message_id", type: "uuid", nullable: true),
                    trackingsequence = table.Column<long>(name: "tracking_sequence", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    fielddesc = table.Column<string>(name: "field_desc", type: "text", nullable: true),
                    fieldtype = table.Column<string>(name: "field_type", type: "text", nullable: true),
                    oldvaluechar = table.Column<string>(name: "old_value_char", type: "text", nullable: true),
                    newvaluechar = table.Column<string>(name: "new_value_char", type: "text", nullable: true),
                    oldvaluetext = table.Column<string>(name: "old_value_text", type: "text", nullable: true),
                    newvaluetext = table.Column<string>(name: "new_value_text", type: "text", nullable: true),
                    oldvaluedatetime = table.Column<DateTime>(name: "old_value_datetime", type: "timestamp without time zone", nullable: true),
                    newvaluedatetime = table.Column<DateTime>(name: "new_value_datetime", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    oldvaluefloat = table.Column<double>(name: "old_value_float", type: "double precision", nullable: true),
                    oldvaluemonetary = table.Column<double>(name: "old_value_monetary", type: "double precision", nullable: true),
                    newvaluefloat = table.Column<double>(name: "new_value_float", type: "double precision", nullable: true),
                    newvaluemonetary = table.Column<double>(name: "new_value_monetary", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_tracking_value_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mail_tracking_value_field_fkey",
                        column: x => x.field,
                        principalTable: "ir_model_fields",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "mail_tracking_value_mail_message_id_fkey",
                        column: x => x.mailmessageid,
                        principalTable: "mail_message",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mail_wizard_invite",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    resid = table.Column<Guid>(name: "res_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    resmodel = table.Column<string>(name: "res_model", type: "text", nullable: true),
                    message = table.Column<string>(type: "text", nullable: true),
                    sendmail = table.Column<bool>(name: "send_mail", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_wizard_invite_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "mail_wizard_invite_res_partner_rel",
                columns: table => new
                {
                    mailwizardinviteid = table.Column<Guid>(name: "mail_wizard_invite_id", type: "uuid", nullable: false),
                    respartnerid = table.Column<Guid>(name: "res_partner_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mail_wizard_invite_res_partner_rel_pkey", x => new { x.mailwizardinviteid, x.respartnerid });
                    table.ForeignKey(
                        name: "mail_wizard_invite_res_partner_rel_mail_wizard_invite_id_fkey",
                        column: x => x.mailwizardinviteid,
                        principalTable: "mail_wizard_invite",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "maintenance_equipment",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    technicianuserid = table.Column<Guid>(name: "technician_user_id", type: "uuid", nullable: true),
                    owneruserid = table.Column<Guid>(name: "owner_user_id", type: "uuid", nullable: true),
                    categoryid = table.Column<Guid>(name: "category_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    maintenancecount = table.Column<long>(name: "maintenance_count", type: "bigint", nullable: true),
                    maintenanceopencount = table.Column<long>(name: "maintenance_open_count", type: "bigint", nullable: true),
                    period = table.Column<long>(type: "bigint", nullable: true),
                    maintenanceteamid = table.Column<Guid>(name: "maintenance_team_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    partnerref = table.Column<string>(name: "partner_ref", type: "text", nullable: true),
                    location = table.Column<string>(type: "text", nullable: true),
                    model = table.Column<string>(type: "text", nullable: true),
                    serialno = table.Column<string>(name: "serial_no", type: "text", nullable: true),
                    assigndate = table.Column<DateTime>(name: "assign_date", type: "timestamp without time zone", nullable: true),
                    effectivedate = table.Column<DateTime>(name: "effective_date", type: "timestamp without time zone", nullable: true),
                    warrantydate = table.Column<DateTime>(name: "warranty_date", type: "timestamp without time zone", nullable: true),
                    scrapdate = table.Column<DateTime>(name: "scrap_date", type: "timestamp without time zone", nullable: true),
                    nextactiondate = table.Column<DateTime>(name: "next_action_date", type: "timestamp without time zone", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    note = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    cost = table.Column<double>(type: "double precision", nullable: true),
                    maintenanceduration = table.Column<double>(name: "maintenance_duration", type: "double precision", nullable: true),
                    employeeid = table.Column<Guid>(name: "employee_id", type: "uuid", nullable: true),
                    departmentid = table.Column<Guid>(name: "department_id", type: "uuid", nullable: true),
                    equipmentassignto = table.Column<string>(name: "equipment_assign_to", type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("maintenance_equipment_pkey", x => x.id);
                    table.ForeignKey(
                        name: "maintenance_equipment_department_id_fkey",
                        column: x => x.departmentid,
                        principalTable: "hr_department",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "maintenance_equipment_employee_id_fkey",
                        column: x => x.employeeid,
                        principalTable: "hr_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "maintenance_equipment_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "maintenance_equipment_category",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    aliasid = table.Column<Guid>(name: "alias_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    technicianuserid = table.Column<Guid>(name: "technician_user_id", type: "uuid", nullable: true),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    note = table.Column<string>(type: "jsonb", nullable: true),
                    fold = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("maintenance_equipment_category_pkey", x => x.id);
                    table.ForeignKey(
                        name: "maintenance_equipment_category_alias_id_fkey",
                        column: x => x.aliasid,
                        principalTable: "mail_alias",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "maintenance_equipment_category_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "maintenance_request",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    owneruserid = table.Column<Guid>(name: "owner_user_id", type: "uuid", nullable: true),
                    categoryid = table.Column<Guid>(name: "category_id", type: "uuid", nullable: true),
                    equipmentid = table.Column<Guid>(name: "equipment_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    stageid = table.Column<long>(name: "stage_id", type: "bigint", nullable: true),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    maintenanceteamid = table.Column<Guid>(name: "maintenance_team_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    emailcc = table.Column<string>(name: "email_cc", type: "text", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    priority = table.Column<string>(type: "text", nullable: true),
                    kanbanstate = table.Column<string>(name: "kanban_state", type: "text", nullable: true),
                    maintenancetype = table.Column<string>(name: "maintenance_type", type: "text", nullable: true),
                    requestdate = table.Column<DateTime>(name: "request_date", type: "timestamp without time zone", nullable: true),
                    closedate = table.Column<DateTime>(name: "close_date", type: "timestamp without time zone", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    archive = table.Column<bool>(type: "boolean", nullable: true),
                    scheduledate = table.Column<DateTime>(name: "schedule_date", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    duration = table.Column<double>(type: "double precision", nullable: true),
                    employeeid = table.Column<Guid>(name: "employee_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("maintenance_request_pkey", x => x.id);
                    table.ForeignKey(
                        name: "maintenance_request_category_id_fkey",
                        column: x => x.categoryid,
                        principalTable: "maintenance_equipment_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "maintenance_request_employee_id_fkey",
                        column: x => x.employeeid,
                        principalTable: "hr_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "maintenance_request_equipment_id_fkey",
                        column: x => x.equipmentid,
                        principalTable: "maintenance_equipment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "maintenance_request_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "maintenance_stage",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    fold = table.Column<bool>(type: "boolean", nullable: true),
                    done = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("maintenance_stage_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "maintenance_team",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("maintenance_team_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "maintenance_team_users_rel",
                columns: table => new
                {
                    maintenanceteamid = table.Column<Guid>(name: "maintenance_team_id", type: "uuid", nullable: false),
                    resusersid = table.Column<Guid>(name: "res_users_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("maintenance_team_users_rel_pkey", x => new { x.maintenanceteamid, x.resusersid });
                    table.ForeignKey(
                        name: "maintenance_team_users_rel_maintenance_team_id_fkey",
                        column: x => x.maintenanceteamid,
                        principalTable: "maintenance_team",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mrp_bom",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    producttmplid = table.Column<Guid>(name: "product_tmpl_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    productuomid = table.Column<Guid>(name: "product_uom_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    pickingtypeid = table.Column<Guid>(name: "picking_type_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    type = table.Column<string>(type: "text", nullable: true),
                    readytoproduce = table.Column<string>(name: "ready_to_produce", type: "text", nullable: true),
                    consumption = table.Column<string>(type: "text", nullable: true),
                    productqty = table.Column<decimal>(name: "product_qty", type: "numeric", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    allowoperationdependencies = table.Column<bool>(name: "allow_operation_dependencies", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_bom_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mrp_bom_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "mrp_bom_byproduct",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    productuomid = table.Column<Guid>(name: "product_uom_id", type: "uuid", nullable: true),
                    bomid = table.Column<Guid>(name: "bom_id", type: "uuid", nullable: true),
                    operationid = table.Column<Guid>(name: "operation_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    productqty = table.Column<decimal>(name: "product_qty", type: "numeric", nullable: true),
                    costshare = table.Column<decimal>(name: "cost_share", type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_bom_byproduct_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mrp_bom_byproduct_bom_id_fkey",
                        column: x => x.bomid,
                        principalTable: "mrp_bom",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mrp_bom_byproduct_product_template_attribute_value_rel",
                columns: table => new
                {
                    mrpbombyproductid = table.Column<Guid>(name: "mrp_bom_byproduct_id", type: "uuid", nullable: false),
                    producttemplateattributevalueid = table.Column<Guid>(name: "product_template_attribute_value_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_bom_byproduct_product_template_attribute_value_rel_pkey", x => new { x.mrpbombyproductid, x.producttemplateattributevalueid });
                    table.ForeignKey(
                        name: "mrp_bom_byproduct_product_template_at_mrp_bom_byproduct_id_fkey",
                        column: x => x.mrpbombyproductid,
                        principalTable: "mrp_bom_byproduct",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mrp_bom_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    producttmplid = table.Column<Guid>(name: "product_tmpl_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    productuomid = table.Column<Guid>(name: "product_uom_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    bomid = table.Column<Guid>(name: "bom_id", type: "uuid", nullable: true),
                    operationid = table.Column<Guid>(name: "operation_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    productqty = table.Column<decimal>(name: "product_qty", type: "numeric", nullable: true),
                    manualconsumption = table.Column<bool>(name: "manual_consumption", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    costshare = table.Column<decimal>(name: "cost_share", type: "numeric", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_bom_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mrp_bom_line_bom_id_fkey",
                        column: x => x.bomid,
                        principalTable: "mrp_bom",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mrp_bom_line_product_template_attribute_value_rel",
                columns: table => new
                {
                    mrpbomlineid = table.Column<Guid>(name: "mrp_bom_line_id", type: "uuid", nullable: false),
                    producttemplateattributevalueid = table.Column<Guid>(name: "product_template_attribute_value_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_bom_line_product_template_attribute_value_rel_pkey", x => new { x.mrpbomlineid, x.producttemplateattributevalueid });
                    table.ForeignKey(
                        name: "mrp_bom_line_product_template_attribute_va_mrp_bom_line_id_fkey",
                        column: x => x.mrpbomlineid,
                        principalTable: "mrp_bom_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mrp_consumption_warning",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_consumption_warning_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "mrp_consumption_warning_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    mrpconsumptionwarningid = table.Column<Guid>(name: "mrp_consumption_warning_id", type: "uuid", nullable: true),
                    mrpproductionid = table.Column<Guid>(name: "mrp_production_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    productconsumedqtyuom = table.Column<double>(name: "product_consumed_qty_uom", type: "double precision", nullable: true),
                    productexpectedqtyuom = table.Column<double>(name: "product_expected_qty_uom", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_consumption_warning_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mrp_consumption_warning_line_mrp_consumption_warning_id_fkey",
                        column: x => x.mrpconsumptionwarningid,
                        principalTable: "mrp_consumption_warning",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mrp_consumption_warning_mrp_production_rel",
                columns: table => new
                {
                    mrpconsumptionwarningid = table.Column<Guid>(name: "mrp_consumption_warning_id", type: "uuid", nullable: false),
                    mrpproductionid = table.Column<Guid>(name: "mrp_production_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_consumption_warning_mrp_production_rel_pkey", x => new { x.mrpconsumptionwarningid, x.mrpproductionid });
                    table.ForeignKey(
                        name: "mrp_consumption_warning_mrp_pro_mrp_consumption_warning_id_fkey",
                        column: x => x.mrpconsumptionwarningid,
                        principalTable: "mrp_consumption_warning",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mrp_document",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    irattachmentid = table.Column<Guid>(name: "ir_attachment_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    priority = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_document_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mrp_document_ir_attachment_id_fkey",
                        column: x => x.irattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mrp_immediate_production",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_immediate_production_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "mrp_immediate_production_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    immediateproductionid = table.Column<Guid>(name: "immediate_production_id", type: "uuid", nullable: true),
                    productionid = table.Column<Guid>(name: "production_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    toimmediate = table.Column<bool>(name: "to_immediate", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_immediate_production_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mrp_immediate_production_line_immediate_production_id_fkey",
                        column: x => x.immediateproductionid,
                        principalTable: "mrp_immediate_production",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "mrp_production",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    backordersequence = table.Column<long>(name: "backorder_sequence", type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    productuomid = table.Column<Guid>(name: "product_uom_id", type: "uuid", nullable: true),
                    lotproducingid = table.Column<Guid>(name: "lot_producing_id", type: "uuid", nullable: true),
                    pickingtypeid = table.Column<Guid>(name: "picking_type_id", type: "uuid", nullable: true),
                    locationsrcid = table.Column<Guid>(name: "location_src_id", type: "uuid", nullable: true),
                    locationdestid = table.Column<Guid>(name: "location_dest_id", type: "uuid", nullable: true),
                    bomid = table.Column<Guid>(name: "bom_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    procurementgroupid = table.Column<Guid>(name: "procurement_group_id", type: "uuid", nullable: true),
                    orderpointid = table.Column<Guid>(name: "orderpoint_id", type: "uuid", nullable: true),
                    productionlocationid = table.Column<Guid>(name: "production_location_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    priority = table.Column<string>(type: "text", nullable: true),
                    origin = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    reservationstate = table.Column<string>(name: "reservation_state", type: "text", nullable: true),
                    productdescriptionvariants = table.Column<string>(name: "product_description_variants", type: "text", nullable: true),
                    consumption = table.Column<string>(type: "text", nullable: true),
                    productqty = table.Column<decimal>(name: "product_qty", type: "numeric", nullable: true),
                    qtyproducing = table.Column<decimal>(name: "qty_producing", type: "numeric", nullable: true),
                    propagatecancel = table.Column<bool>(name: "propagate_cancel", type: "boolean", nullable: true),
                    islocked = table.Column<bool>(name: "is_locked", type: "boolean", nullable: true),
                    isplanned = table.Column<bool>(name: "is_planned", type: "boolean", nullable: true),
                    allowworkorderdependencies = table.Column<bool>(name: "allow_workorder_dependencies", type: "boolean", nullable: true),
                    dateplannedstart = table.Column<DateTime>(name: "date_planned_start", type: "timestamp without time zone", nullable: true),
                    dateplannedfinished = table.Column<DateTime>(name: "date_planned_finished", type: "timestamp without time zone", nullable: true),
                    datedeadline = table.Column<DateTime>(name: "date_deadline", type: "timestamp without time zone", nullable: true),
                    datestart = table.Column<DateTime>(name: "date_start", type: "timestamp without time zone", nullable: true),
                    datefinished = table.Column<DateTime>(name: "date_finished", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    productuomqty = table.Column<double>(name: "product_uom_qty", type: "double precision", nullable: true),
                    analyticaccountid = table.Column<Guid>(name: "analytic_account_id", type: "uuid", nullable: true),
                    extracost = table.Column<double>(name: "extra_cost", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_production_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mrp_production_analytic_account_id_fkey",
                        column: x => x.analyticaccountid,
                        principalTable: "account_analytic_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "mrp_production_bom_id_fkey",
                        column: x => x.bomid,
                        principalTable: "mrp_bom",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "mrp_production_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "mrp_production_production_rel",
                columns: table => new
                {
                    mrpimmediateproductionid = table.Column<Guid>(name: "mrp_immediate_production_id", type: "uuid", nullable: false),
                    mrpproductionid = table.Column<Guid>(name: "mrp_production_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_production_production_rel_pkey", x => new { x.mrpimmediateproductionid, x.mrpproductionid });
                    table.ForeignKey(
                        name: "mrp_production_production_rel_mrp_immediate_production_id_fkey",
                        column: x => x.mrpimmediateproductionid,
                        principalTable: "mrp_immediate_production",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "mrp_production_production_rel_mrp_production_id_fkey",
                        column: x => x.mrpproductionid,
                        principalTable: "mrp_production",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mrp_production_backorder",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_production_backorder_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "mrp_production_mrp_production_backorder_rel",
                columns: table => new
                {
                    mrpproductionbackorderid = table.Column<Guid>(name: "mrp_production_backorder_id", type: "uuid", nullable: false),
                    mrpproductionid = table.Column<Guid>(name: "mrp_production_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_production_mrp_production_backorder_rel_pkey", x => new { x.mrpproductionbackorderid, x.mrpproductionid });
                    table.ForeignKey(
                        name: "mrp_production_mrp_production__mrp_production_backorder_id_fkey",
                        column: x => x.mrpproductionbackorderid,
                        principalTable: "mrp_production_backorder",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "mrp_production_mrp_production_backorder__mrp_production_id_fkey",
                        column: x => x.mrpproductionid,
                        principalTable: "mrp_production",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mrp_production_backorder_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    mrpproductionbackorderid = table.Column<Guid>(name: "mrp_production_backorder_id", type: "uuid", nullable: true),
                    mrpproductionid = table.Column<Guid>(name: "mrp_production_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    tobackorder = table.Column<bool>(name: "to_backorder", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_production_backorder_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mrp_production_backorder_line_mrp_production_backorder_id_fkey",
                        column: x => x.mrpproductionbackorderid,
                        principalTable: "mrp_production_backorder",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "mrp_production_backorder_line_mrp_production_id_fkey",
                        column: x => x.mrpproductionid,
                        principalTable: "mrp_production",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mrp_production_split",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    productionsplitmultiid = table.Column<Guid>(name: "production_split_multi_id", type: "uuid", nullable: true),
                    productionid = table.Column<Guid>(name: "production_id", type: "uuid", nullable: true),
                    counter = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_production_split_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mrp_production_split_production_id_fkey",
                        column: x => x.productionid,
                        principalTable: "mrp_production",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "mrp_production_split_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    mrpproductionsplitid = table.Column<Guid>(name: "mrp_production_split_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    quantity = table.Column<decimal>(type: "numeric", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_production_split_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mrp_production_split_line_mrp_production_split_id_fkey",
                        column: x => x.mrpproductionsplitid,
                        principalTable: "mrp_production_split",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mrp_production_split_multi",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_production_split_multi_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "mrp_routing_workcenter",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    workcenterid = table.Column<Guid>(name: "workcenter_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    bomid = table.Column<Guid>(name: "bom_id", type: "uuid", nullable: true),
                    timemodebatch = table.Column<long>(name: "time_mode_batch", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    worksheettype = table.Column<string>(name: "worksheet_type", type: "text", nullable: true),
                    worksheetgoogleslide = table.Column<string>(name: "worksheet_google_slide", type: "text", nullable: true),
                    timemode = table.Column<string>(name: "time_mode", type: "text", nullable: true),
                    note = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    timecyclemanual = table.Column<double>(name: "time_cycle_manual", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_routing_workcenter_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mrp_routing_workcenter_bom_id_fkey",
                        column: x => x.bomid,
                        principalTable: "mrp_bom",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mrp_routing_workcenter_dependencies_rel",
                columns: table => new
                {
                    operationid = table.Column<Guid>(name: "operation_id", type: "uuid", nullable: false),
                    blockedbyid = table.Column<Guid>(name: "blocked_by_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_routing_workcenter_dependencies_rel_pkey", x => new { x.operationid, x.blockedbyid });
                    table.ForeignKey(
                        name: "mrp_routing_workcenter_dependencies_rel_blocked_by_id_fkey",
                        column: x => x.blockedbyid,
                        principalTable: "mrp_routing_workcenter",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "mrp_routing_workcenter_dependencies_rel_operation_id_fkey",
                        column: x => x.operationid,
                        principalTable: "mrp_routing_workcenter",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mrp_routing_workcenter_product_template_attribute_value_rel",
                columns: table => new
                {
                    mrproutingworkcenterid = table.Column<Guid>(name: "mrp_routing_workcenter_id", type: "uuid", nullable: false),
                    producttemplateattributevalueid = table.Column<Guid>(name: "product_template_attribute_value_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_routing_workcenter_product_template_attribute_value_re_pkey", x => new { x.mrproutingworkcenterid, x.producttemplateattributevalueid });
                    table.ForeignKey(
                        name: "mrp_routing_workcenter_product_t_mrp_routing_workcenter_id_fkey",
                        column: x => x.mrproutingworkcenterid,
                        principalTable: "mrp_routing_workcenter",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mrp_unbuild",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    productuomid = table.Column<Guid>(name: "product_uom_id", type: "uuid", nullable: true),
                    bomid = table.Column<Guid>(name: "bom_id", type: "uuid", nullable: true),
                    moid = table.Column<Guid>(name: "mo_id", type: "uuid", nullable: true),
                    lotid = table.Column<Guid>(name: "lot_id", type: "uuid", nullable: true),
                    locationid = table.Column<Guid>(name: "location_id", type: "uuid", nullable: true),
                    locationdestid = table.Column<Guid>(name: "location_dest_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    productqty = table.Column<double>(name: "product_qty", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_unbuild_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mrp_unbuild_bom_id_fkey",
                        column: x => x.bomid,
                        principalTable: "mrp_bom",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "mrp_unbuild_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "mrp_unbuild_mo_id_fkey",
                        column: x => x.moid,
                        principalTable: "mrp_production",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "mrp_workcenter",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    resourceid = table.Column<Guid>(name: "resource_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    resourcecalendarid = table.Column<Guid>(name: "resource_calendar_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    workingstate = table.Column<string>(name: "working_state", type: "text", nullable: true),
                    note = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    timeefficiency = table.Column<double>(name: "time_efficiency", type: "double precision", nullable: true),
                    defaultcapacity = table.Column<double>(name: "default_capacity", type: "double precision", nullable: true),
                    costshour = table.Column<double>(name: "costs_hour", type: "double precision", nullable: true),
                    timestart = table.Column<double>(name: "time_start", type: "double precision", nullable: true),
                    timestop = table.Column<double>(name: "time_stop", type: "double precision", nullable: true),
                    oeetarget = table.Column<double>(name: "oee_target", type: "double precision", nullable: true),
                    costshouraccountid = table.Column<Guid>(name: "costs_hour_account_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_workcenter_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mrp_workcenter_costs_hour_account_id_fkey",
                        column: x => x.costshouraccountid,
                        principalTable: "account_analytic_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "mrp_workcenter_alternative_rel",
                columns: table => new
                {
                    workcenterid = table.Column<Guid>(name: "workcenter_id", type: "uuid", nullable: false),
                    alternativeworkcenterid = table.Column<Guid>(name: "alternative_workcenter_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_workcenter_alternative_rel_pkey", x => new { x.workcenterid, x.alternativeworkcenterid });
                    table.ForeignKey(
                        name: "mrp_workcenter_alternative_rel_alternative_workcenter_id_fkey",
                        column: x => x.alternativeworkcenterid,
                        principalTable: "mrp_workcenter",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "mrp_workcenter_alternative_rel_workcenter_id_fkey",
                        column: x => x.workcenterid,
                        principalTable: "mrp_workcenter",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mrp_workcenter_capacity",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    workcenterid = table.Column<Guid>(name: "workcenter_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    capacity = table.Column<double>(type: "double precision", nullable: true),
                    timestart = table.Column<double>(name: "time_start", type: "double precision", nullable: true),
                    timestop = table.Column<double>(name: "time_stop", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_workcenter_capacity_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mrp_workcenter_capacity_workcenter_id_fkey",
                        column: x => x.workcenterid,
                        principalTable: "mrp_workcenter",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "mrp_workcenter_mrp_workcenter_tag_rel",
                columns: table => new
                {
                    mrpworkcenterid = table.Column<Guid>(name: "mrp_workcenter_id", type: "uuid", nullable: false),
                    mrpworkcentertagid = table.Column<long>(name: "mrp_workcenter_tag_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_workcenter_mrp_workcenter_tag_rel_pkey", x => new { x.mrpworkcenterid, x.mrpworkcentertagid });
                    table.ForeignKey(
                        name: "mrp_workcenter_mrp_workcenter_tag_rel_mrp_workcenter_id_fkey",
                        column: x => x.mrpworkcenterid,
                        principalTable: "mrp_workcenter",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "mrp_workcenter_productivity",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    workcenterid = table.Column<Guid>(name: "workcenter_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    workorderid = table.Column<Guid>(name: "workorder_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    lossid = table.Column<Guid>(name: "loss_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    losstype = table.Column<string>(name: "loss_type", type: "text", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    datestart = table.Column<DateTime>(name: "date_start", type: "timestamp without time zone", nullable: true),
                    dateend = table.Column<DateTime>(name: "date_end", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    duration = table.Column<double>(type: "double precision", nullable: true),
                    costalreadyrecorded = table.Column<bool>(name: "cost_already_recorded", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_workcenter_productivity_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mrp_workcenter_productivity_workcenter_id_fkey",
                        column: x => x.workcenterid,
                        principalTable: "mrp_workcenter",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "mrp_workcenter_productivity_loss",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    lossid = table.Column<long>(name: "loss_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    losstype = table.Column<string>(name: "loss_type", type: "text", nullable: true),
                    manual = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_workcenter_productivity_loss_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "mrp_workcenter_productivity_loss_type",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    losstype = table.Column<string>(name: "loss_type", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_workcenter_productivity_loss_type_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "mrp_workcenter_tag",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_workcenter_tag_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "mrp_workorder",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    workcenterid = table.Column<Guid>(name: "workcenter_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    productuomid = table.Column<Guid>(name: "product_uom_id", type: "uuid", nullable: true),
                    productionid = table.Column<Guid>(name: "production_id", type: "uuid", nullable: true),
                    leaveid = table.Column<Guid>(name: "leave_id", type: "uuid", nullable: true),
                    durationpercent = table.Column<long>(name: "duration_percent", type: "bigint", nullable: true),
                    operationid = table.Column<Guid>(name: "operation_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    productionavailability = table.Column<string>(name: "production_availability", type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    qtyproduced = table.Column<decimal>(name: "qty_produced", type: "numeric", nullable: true),
                    durationexpected = table.Column<decimal>(name: "duration_expected", type: "numeric", nullable: true),
                    qtyreportedfrompreviouswo = table.Column<decimal>(name: "qty_reported_from_previous_wo", type: "numeric", nullable: true),
                    dateplannedstart = table.Column<DateTime>(name: "date_planned_start", type: "timestamp without time zone", nullable: true),
                    dateplannedfinished = table.Column<DateTime>(name: "date_planned_finished", type: "timestamp without time zone", nullable: true),
                    datestart = table.Column<DateTime>(name: "date_start", type: "timestamp without time zone", nullable: true),
                    datefinished = table.Column<DateTime>(name: "date_finished", type: "timestamp without time zone", nullable: true),
                    productiondate = table.Column<DateTime>(name: "production_date", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    duration = table.Column<double>(type: "double precision", nullable: true),
                    durationunit = table.Column<double>(name: "duration_unit", type: "double precision", nullable: true),
                    costshour = table.Column<double>(name: "costs_hour", type: "double precision", nullable: true),
                    moanalyticaccountlineid = table.Column<Guid>(name: "mo_analytic_account_line_id", type: "uuid", nullable: true),
                    wcanalyticaccountlineid = table.Column<Guid>(name: "wc_analytic_account_line_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_workorder_pkey", x => x.id);
                    table.ForeignKey(
                        name: "mrp_workorder_mo_analytic_account_line_id_fkey",
                        column: x => x.moanalyticaccountlineid,
                        principalTable: "account_analytic_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "mrp_workorder_operation_id_fkey",
                        column: x => x.operationid,
                        principalTable: "mrp_routing_workcenter",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "mrp_workorder_production_id_fkey",
                        column: x => x.productionid,
                        principalTable: "mrp_production",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "mrp_workorder_wc_analytic_account_line_id_fkey",
                        column: x => x.wcanalyticaccountlineid,
                        principalTable: "account_analytic_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "mrp_workorder_workcenter_id_fkey",
                        column: x => x.workcenterid,
                        principalTable: "mrp_workcenter",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "mrp_workorder_dependencies_rel",
                columns: table => new
                {
                    workorderid = table.Column<Guid>(name: "workorder_id", type: "uuid", nullable: false),
                    blockedbyid = table.Column<Guid>(name: "blocked_by_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("mrp_workorder_dependencies_rel_pkey", x => new { x.workorderid, x.blockedbyid });
                    table.ForeignKey(
                        name: "mrp_workorder_dependencies_rel_blocked_by_id_fkey",
                        column: x => x.blockedbyid,
                        principalTable: "mrp_workorder",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "mrp_workorder_dependencies_rel_workorder_id_fkey",
                        column: x => x.workorderid,
                        principalTable: "mrp_workorder",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "note_note",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    datedone = table.Column<DateTime>(name: "date_done", type: "timestamp without time zone", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    memo = table.Column<string>(type: "text", nullable: true),
                    open = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("note_note_pkey", x => x.id);
                    table.ForeignKey(
                        name: "note_note_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "note_stage",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    fold = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("note_stage_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "note_stage_rel",
                columns: table => new
                {
                    noteid = table.Column<Guid>(name: "note_id", type: "uuid", nullable: false),
                    stageid = table.Column<long>(name: "stage_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("note_stage_rel_pkey", x => new { x.noteid, x.stageid });
                    table.ForeignKey(
                        name: "note_stage_rel_note_id_fkey",
                        column: x => x.noteid,
                        principalTable: "note_note",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "note_stage_rel_stage_id_fkey",
                        column: x => x.stageid,
                        principalTable: "note_stage",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "note_tag",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("note_tag_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "note_tags_rel",
                columns: table => new
                {
                    noteid = table.Column<Guid>(name: "note_id", type: "uuid", nullable: false),
                    tagid = table.Column<Guid>(name: "tag_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("note_tags_rel_pkey", x => new { x.noteid, x.tagid });
                    table.ForeignKey(
                        name: "note_tags_rel_note_id_fkey",
                        column: x => x.noteid,
                        principalTable: "note_note",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "note_tags_rel_tag_id_fkey",
                        column: x => x.tagid,
                        principalTable: "note_tag",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "payment_country_rel",
                columns: table => new
                {
                    paymentid = table.Column<Guid>(name: "payment_id", type: "uuid", nullable: false),
                    countryid = table.Column<long>(name: "country_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("payment_country_rel_pkey", x => new { x.paymentid, x.countryid });
                });

            migrationBuilder.CreateTable(
                name: "payment_icon",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("payment_icon_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "payment_icon_payment_provider_rel",
                columns: table => new
                {
                    paymentproviderid = table.Column<Guid>(name: "payment_provider_id", type: "uuid", nullable: false),
                    paymenticonid = table.Column<Guid>(name: "payment_icon_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("payment_icon_payment_provider_rel_pkey", x => new { x.paymentproviderid, x.paymenticonid });
                    table.ForeignKey(
                        name: "payment_icon_payment_provider_rel_payment_icon_id_fkey",
                        column: x => x.paymenticonid,
                        principalTable: "payment_icon",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "payment_link_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    resid = table.Column<Guid>(name: "res_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    resmodel = table.Column<string>(name: "res_model", type: "text", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    paymentproviderselection = table.Column<string>(name: "payment_provider_selection", type: "text", nullable: true),
                    amount = table.Column<decimal>(type: "numeric", nullable: true),
                    amountmax = table.Column<decimal>(name: "amount_max", type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("payment_link_wizard_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "payment_provider",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigint", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    redirectformviewid = table.Column<Guid>(name: "redirect_form_view_id", type: "uuid", nullable: true),
                    inlineformviewid = table.Column<Guid>(name: "inline_form_view_id", type: "uuid", nullable: true),
                    tokeninlineformviewid = table.Column<Guid>(name: "token_inline_form_view_id", type: "uuid", nullable: true),
                    expresscheckoutformviewid = table.Column<Guid>(name: "express_checkout_form_view_id", type: "uuid", nullable: true),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    moduleid = table.Column<Guid>(name: "module_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    modulestate = table.Column<string>(name: "module_state", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    displayas = table.Column<string>(name: "display_as", type: "jsonb", nullable: true),
                    premsg = table.Column<string>(name: "pre_msg", type: "jsonb", nullable: true),
                    pendingmsg = table.Column<string>(name: "pending_msg", type: "jsonb", nullable: true),
                    authmsg = table.Column<string>(name: "auth_msg", type: "jsonb", nullable: true),
                    donemsg = table.Column<string>(name: "done_msg", type: "jsonb", nullable: true),
                    cancelmsg = table.Column<string>(name: "cancel_msg", type: "jsonb", nullable: true),
                    maximumamount = table.Column<decimal>(name: "maximum_amount", type: "numeric", nullable: true),
                    ispublished = table.Column<bool>(name: "is_published", type: "boolean", nullable: true),
                    allowtokenization = table.Column<bool>(name: "allow_tokenization", type: "boolean", nullable: true),
                    capturemanually = table.Column<bool>(name: "capture_manually", type: "boolean", nullable: true),
                    allowexpresscheckout = table.Column<bool>(name: "allow_express_checkout", type: "boolean", nullable: true),
                    feesactive = table.Column<bool>(name: "fees_active", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    feesdomfixed = table.Column<double>(name: "fees_dom_fixed", type: "double precision", nullable: true),
                    feesdomvar = table.Column<double>(name: "fees_dom_var", type: "double precision", nullable: true),
                    feesintfixed = table.Column<double>(name: "fees_int_fixed", type: "double precision", nullable: true),
                    feesintvar = table.Column<double>(name: "fees_int_var", type: "double precision", nullable: true),
                    soreferencetype = table.Column<string>(name: "so_reference_type", type: "text", nullable: true),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("payment_provider_pkey", x => x.id);
                    table.ForeignKey(
                        name: "payment_provider_express_checkout_form_view_id_fkey",
                        column: x => x.expresscheckoutformviewid,
                        principalTable: "ir_ui_view",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "payment_provider_inline_form_view_id_fkey",
                        column: x => x.inlineformviewid,
                        principalTable: "ir_ui_view",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "payment_provider_module_id_fkey",
                        column: x => x.moduleid,
                        principalTable: "ir_module_module",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "payment_provider_redirect_form_view_id_fkey",
                        column: x => x.redirectformviewid,
                        principalTable: "ir_ui_view",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "payment_provider_token_inline_form_view_id_fkey",
                        column: x => x.tokeninlineformviewid,
                        principalTable: "ir_ui_view",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "payment_provider_onboarding_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    paymentmethod = table.Column<string>(name: "payment_method", type: "text", nullable: true),
                    paypalusertype = table.Column<string>(name: "paypal_user_type", type: "text", nullable: true),
                    paypalemailaccount = table.Column<string>(name: "paypal_email_account", type: "text", nullable: true),
                    paypalselleraccount = table.Column<string>(name: "paypal_seller_account", type: "text", nullable: true),
                    paypalpdttoken = table.Column<string>(name: "paypal_pdt_token", type: "text", nullable: true),
                    manualname = table.Column<string>(name: "manual_name", type: "text", nullable: true),
                    journalname = table.Column<string>(name: "journal_name", type: "text", nullable: true),
                    accnumber = table.Column<string>(name: "acc_number", type: "text", nullable: true),
                    manualpostmsg = table.Column<string>(name: "manual_post_msg", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("payment_provider_onboarding_wizard_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "payment_refund_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    paymentid = table.Column<Guid>(name: "payment_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    amounttorefund = table.Column<decimal>(name: "amount_to_refund", type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("payment_refund_wizard_pkey", x => x.id);
                    table.ForeignKey(
                        name: "payment_refund_wizard_payment_id_fkey",
                        column: x => x.paymentid,
                        principalTable: "account_payment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "payment_token",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    providerid = table.Column<Guid>(name: "provider_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    paymentdetails = table.Column<string>(name: "payment_details", type: "text", nullable: true),
                    providerref = table.Column<string>(name: "provider_ref", type: "text", nullable: true),
                    verified = table.Column<bool>(type: "boolean", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("payment_token_pkey", x => x.id);
                    table.ForeignKey(
                        name: "payment_token_provider_id_fkey",
                        column: x => x.providerid,
                        principalTable: "payment_provider",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "payment_transaction",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    providerid = table.Column<Guid>(name: "provider_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    tokenid = table.Column<Guid>(name: "token_id", type: "uuid", nullable: true),
                    sourcetransactionid = table.Column<Guid>(name: "source_transaction_id", type: "uuid", nullable: true),
                    callbackmodelid = table.Column<Guid>(name: "callback_model_id", type: "uuid", nullable: true),
                    callbackresid = table.Column<Guid>(name: "callback_res_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    partnerstateid = table.Column<long>(name: "partner_state_id", type: "bigint", nullable: true),
                    partnercountryid = table.Column<long>(name: "partner_country_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    reference = table.Column<string>(type: "text", nullable: true),
                    providerreference = table.Column<string>(name: "provider_reference", type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    operation = table.Column<string>(type: "text", nullable: true),
                    landingroute = table.Column<string>(name: "landing_route", type: "text", nullable: true),
                    callbackmethod = table.Column<string>(name: "callback_method", type: "text", nullable: true),
                    callbackhash = table.Column<string>(name: "callback_hash", type: "text", nullable: true),
                    partnername = table.Column<string>(name: "partner_name", type: "text", nullable: true),
                    partnerlang = table.Column<string>(name: "partner_lang", type: "text", nullable: true),
                    partneremail = table.Column<string>(name: "partner_email", type: "text", nullable: true),
                    partneraddress = table.Column<string>(name: "partner_address", type: "text", nullable: true),
                    partnerzip = table.Column<string>(name: "partner_zip", type: "text", nullable: true),
                    partnercity = table.Column<string>(name: "partner_city", type: "text", nullable: true),
                    partnerphone = table.Column<string>(name: "partner_phone", type: "text", nullable: true),
                    statemessage = table.Column<string>(name: "state_message", type: "text", nullable: true),
                    amount = table.Column<decimal>(type: "numeric", nullable: true),
                    fees = table.Column<decimal>(type: "numeric", nullable: true),
                    ispostprocessed = table.Column<bool>(name: "is_post_processed", type: "boolean", nullable: true),
                    tokenize = table.Column<bool>(type: "boolean", nullable: true),
                    callbackisdone = table.Column<bool>(name: "callback_is_done", type: "boolean", nullable: true),
                    laststatechange = table.Column<DateTime>(name: "last_state_change", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    paymentid = table.Column<Guid>(name: "payment_id", type: "uuid", nullable: true),
                    isdonation = table.Column<bool>(name: "is_donation", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("payment_transaction_pkey", x => x.id);
                    table.ForeignKey(
                        name: "payment_transaction_callback_model_id_fkey",
                        column: x => x.callbackmodelid,
                        principalTable: "ir_model",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "payment_transaction_payment_id_fkey",
                        column: x => x.paymentid,
                        principalTable: "account_payment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "payment_transaction_provider_id_fkey",
                        column: x => x.providerid,
                        principalTable: "payment_provider",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "payment_transaction_source_transaction_id_fkey",
                        column: x => x.sourcetransactionid,
                        principalTable: "payment_transaction",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "payment_transaction_token_id_fkey",
                        column: x => x.tokenid,
                        principalTable: "payment_token",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "phone_blacklist",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    number = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("phone_blacklist_pkey", x => x.id);
                    table.ForeignKey(
                        name: "phone_blacklist_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "phone_blacklist_remove",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    phone = table.Column<string>(type: "text", nullable: true),
                    reason = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("phone_blacklist_remove_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "picking_label_type",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    labeltype = table.Column<string>(name: "label_type", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("picking_label_type_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "picking_label_type_stock_picking_rel",
                columns: table => new
                {
                    pickinglabeltypeid = table.Column<Guid>(name: "picking_label_type_id", type: "uuid", nullable: false),
                    stockpickingid = table.Column<Guid>(name: "stock_picking_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("picking_label_type_stock_picking_rel_pkey", x => new { x.pickinglabeltypeid, x.stockpickingid });
                    table.ForeignKey(
                        name: "picking_label_type_stock_picking_rel_picking_label_type_id_fkey",
                        column: x => x.pickinglabeltypeid,
                        principalTable: "picking_label_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "portal_share",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    resid = table.Column<Guid>(name: "res_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    resmodel = table.Column<string>(name: "res_model", type: "text", nullable: true),
                    note = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("portal_share_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "portal_share_res_partner_rel",
                columns: table => new
                {
                    portalshareid = table.Column<Guid>(name: "portal_share_id", type: "uuid", nullable: false),
                    respartnerid = table.Column<Guid>(name: "res_partner_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("portal_share_res_partner_rel_pkey", x => new { x.portalshareid, x.respartnerid });
                    table.ForeignKey(
                        name: "portal_share_res_partner_rel_portal_share_id_fkey",
                        column: x => x.portalshareid,
                        principalTable: "portal_share",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "portal_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    welcomemessage = table.Column<string>(name: "welcome_message", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("portal_wizard_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "portal_wizard_res_partner_rel",
                columns: table => new
                {
                    portalwizardid = table.Column<Guid>(name: "portal_wizard_id", type: "uuid", nullable: false),
                    respartnerid = table.Column<Guid>(name: "res_partner_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("portal_wizard_res_partner_rel_pkey", x => new { x.portalwizardid, x.respartnerid });
                    table.ForeignKey(
                        name: "portal_wizard_res_partner_rel_portal_wizard_id_fkey",
                        column: x => x.portalwizardid,
                        principalTable: "portal_wizard",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "portal_wizard_user",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    wizardid = table.Column<Guid>(name: "wizard_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    email = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("portal_wizard_user_pkey", x => x.id);
                    table.ForeignKey(
                        name: "portal_wizard_user_wizard_id_fkey",
                        column: x => x.wizardid,
                        principalTable: "portal_wizard",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "pos_bill",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    value = table.Column<decimal>(type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pos_bill_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "pos_bill_pos_config_rel",
                columns: table => new
                {
                    posconfigid = table.Column<Guid>(name: "pos_config_id", type: "uuid", nullable: false),
                    posbillid = table.Column<Guid>(name: "pos_bill_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pos_bill_pos_config_rel_pkey", x => new { x.posconfigid, x.posbillid });
                    table.ForeignKey(
                        name: "pos_bill_pos_config_rel_pos_bill_id_fkey",
                        column: x => x.posbillid,
                        principalTable: "pos_bill",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "pos_category",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    parentid = table.Column<long>(name: "parent_id", type: "bigint", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pos_category_pkey", x => x.id);
                    table.ForeignKey(
                        name: "pos_category_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "pos_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "pos_category_pos_config_rel",
                columns: table => new
                {
                    posconfigid = table.Column<Guid>(name: "pos_config_id", type: "uuid", nullable: false),
                    poscategoryid = table.Column<long>(name: "pos_category_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pos_category_pos_config_rel_pkey", x => new { x.posconfigid, x.poscategoryid });
                    table.ForeignKey(
                        name: "pos_category_pos_config_rel_pos_category_id_fkey",
                        column: x => x.poscategoryid,
                        principalTable: "pos_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "pos_category_res_config_settings_rel",
                columns: table => new
                {
                    resconfigsettingsid = table.Column<Guid>(name: "res_config_settings_id", type: "uuid", nullable: false),
                    poscategoryid = table.Column<long>(name: "pos_category_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pos_category_res_config_settings_rel_pkey", x => new { x.resconfigsettingsid, x.poscategoryid });
                    table.ForeignKey(
                        name: "pos_category_res_config_settings_rel_pos_category_id_fkey",
                        column: x => x.poscategoryid,
                        principalTable: "pos_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "pos_close_session_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    accountid = table.Column<Guid>(name: "account_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    message = table.Column<string>(type: "text", nullable: true),
                    accountreadonly = table.Column<bool>(name: "account_readonly", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    amounttobalance = table.Column<double>(name: "amount_to_balance", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pos_close_session_wizard_pkey", x => x.id);
                    table.ForeignKey(
                        name: "pos_close_session_wizard_account_id_fkey",
                        column: x => x.accountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "pos_config",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    pickingtypeid = table.Column<Guid>(name: "picking_type_id", type: "uuid", nullable: true),
                    journalid = table.Column<Guid>(name: "journal_id", type: "uuid", nullable: true),
                    invoicejournalid = table.Column<Guid>(name: "invoice_journal_id", type: "uuid", nullable: true),
                    ifacestartcategid = table.Column<long>(name: "iface_start_categ_id", type: "bigint", nullable: true),
                    sequenceid = table.Column<Guid>(name: "sequence_id", type: "uuid", nullable: true),
                    sequencelineid = table.Column<Guid>(name: "sequence_line_id", type: "uuid", nullable: true),
                    pricelistid = table.Column<Guid>(name: "pricelist_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    groupposmanagerid = table.Column<Guid>(name: "group_pos_manager_id", type: "uuid", nullable: true),
                    groupposuserid = table.Column<Guid>(name: "group_pos_user_id", type: "uuid", nullable: true),
                    tipproductid = table.Column<Guid>(name: "tip_product_id", type: "uuid", nullable: true),
                    defaultfiscalpositionid = table.Column<Guid>(name: "default_fiscal_position_id", type: "uuid", nullable: true),
                    roundingmethod = table.Column<Guid>(name: "rounding_method", type: "uuid", nullable: true),
                    warehouseid = table.Column<Guid>(name: "warehouse_id", type: "uuid", nullable: true),
                    routeid = table.Column<Guid>(name: "route_id", type: "uuid", nullable: true),
                    limitedproductsamount = table.Column<long>(name: "limited_products_amount", type: "bigint", nullable: true),
                    limitedpartnersamount = table.Column<long>(name: "limited_partners_amount", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    ifacetaxincluded = table.Column<string>(name: "iface_tax_included", type: "text", nullable: true),
                    proxyip = table.Column<string>(name: "proxy_ip", type: "text", nullable: true),
                    uuid = table.Column<string>(type: "text", nullable: true),
                    pickingpolicy = table.Column<string>(name: "picking_policy", type: "text", nullable: true),
                    receiptheader = table.Column<string>(name: "receipt_header", type: "text", nullable: true),
                    receiptfooter = table.Column<string>(name: "receipt_footer", type: "text", nullable: true),
                    ifacecashdrawer = table.Column<bool>(name: "iface_cashdrawer", type: "boolean", nullable: true),
                    ifaceelectronicscale = table.Column<bool>(name: "iface_electronic_scale", type: "boolean", nullable: true),
                    ifacecustomerfacingdisplayviaproxy = table.Column<bool>(name: "iface_customer_facing_display_via_proxy", type: "boolean", nullable: true),
                    ifacecustomerfacingdisplaylocal = table.Column<bool>(name: "iface_customer_facing_display_local", type: "boolean", nullable: true),
                    ifaceprintviaproxy = table.Column<bool>(name: "iface_print_via_proxy", type: "boolean", nullable: true),
                    ifacescanviaproxy = table.Column<bool>(name: "iface_scan_via_proxy", type: "boolean", nullable: true),
                    ifacebigscrollbars = table.Column<bool>(name: "iface_big_scrollbars", type: "boolean", nullable: true),
                    ifaceprintauto = table.Column<bool>(name: "iface_print_auto", type: "boolean", nullable: true),
                    ifaceprintskipscreen = table.Column<bool>(name: "iface_print_skip_screen", type: "boolean", nullable: true),
                    restrictpricecontrol = table.Column<bool>(name: "restrict_price_control", type: "boolean", nullable: true),
                    ismarginscostsaccessibletoeveryuser = table.Column<bool>(name: "is_margins_costs_accessible_to_every_user", type: "boolean", nullable: true),
                    setmaximumdifference = table.Column<bool>(name: "set_maximum_difference", type: "boolean", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    ifacetipproduct = table.Column<bool>(name: "iface_tipproduct", type: "boolean", nullable: true),
                    usepricelist = table.Column<bool>(name: "use_pricelist", type: "boolean", nullable: true),
                    taxregimeselection = table.Column<bool>(name: "tax_regime_selection", type: "boolean", nullable: true),
                    startcategory = table.Column<bool>(name: "start_category", type: "boolean", nullable: true),
                    limitcategories = table.Column<bool>(name: "limit_categories", type: "boolean", nullable: true),
                    moduleposrestaurant = table.Column<bool>(name: "module_pos_restaurant", type: "boolean", nullable: true),
                    moduleposdiscount = table.Column<bool>(name: "module_pos_discount", type: "boolean", nullable: true),
                    moduleposmercury = table.Column<bool>(name: "module_pos_mercury", type: "boolean", nullable: true),
                    isposbox = table.Column<bool>(name: "is_posbox", type: "boolean", nullable: true),
                    isheaderorfooter = table.Column<bool>(name: "is_header_or_footer", type: "boolean", nullable: true),
                    moduleposhr = table.Column<bool>(name: "module_pos_hr", type: "boolean", nullable: true),
                    otherdevices = table.Column<bool>(name: "other_devices", type: "boolean", nullable: true),
                    cashrounding = table.Column<bool>(name: "cash_rounding", type: "boolean", nullable: true),
                    onlyroundcashmethod = table.Column<bool>(name: "only_round_cash_method", type: "boolean", nullable: true),
                    manualdiscount = table.Column<bool>(name: "manual_discount", type: "boolean", nullable: true),
                    shiplater = table.Column<bool>(name: "ship_later", type: "boolean", nullable: true),
                    limitedproductsloading = table.Column<bool>(name: "limited_products_loading", type: "boolean", nullable: true),
                    productloadbackground = table.Column<bool>(name: "product_load_background", type: "boolean", nullable: true),
                    limitedpartnersloading = table.Column<bool>(name: "limited_partners_loading", type: "boolean", nullable: true),
                    partnerloadbackground = table.Column<bool>(name: "partner_load_background", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    amountauthorizeddiff = table.Column<double>(name: "amount_authorized_diff", type: "double precision", nullable: true),
                    epsonprinterip = table.Column<string>(name: "epson_printer_ip", type: "text", nullable: true),
                    crmteamid = table.Column<Guid>(name: "crm_team_id", type: "uuid", nullable: true),
                    downpaymentproductid = table.Column<Guid>(name: "down_payment_product_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pos_config_pkey", x => x.id);
                    table.ForeignKey(
                        name: "pos_config_crm_team_id_fkey",
                        column: x => x.crmteamid,
                        principalTable: "crm_team",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "pos_config_default_fiscal_position_id_fkey",
                        column: x => x.defaultfiscalpositionid,
                        principalTable: "account_fiscal_position",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "pos_config_iface_start_categ_id_fkey",
                        column: x => x.ifacestartcategid,
                        principalTable: "pos_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "pos_config_invoice_journal_id_fkey",
                        column: x => x.invoicejournalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "pos_config_journal_id_fkey",
                        column: x => x.journalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "pos_config_rounding_method_fkey",
                        column: x => x.roundingmethod,
                        principalTable: "account_cash_rounding",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "pos_config_sequence_id_fkey",
                        column: x => x.sequenceid,
                        principalTable: "ir_sequence",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "pos_config_sequence_line_id_fkey",
                        column: x => x.sequencelineid,
                        principalTable: "ir_sequence",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "pos_config_pos_payment_method_rel",
                columns: table => new
                {
                    posconfigid = table.Column<Guid>(name: "pos_config_id", type: "uuid", nullable: false),
                    pospaymentmethodid = table.Column<Guid>(name: "pos_payment_method_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pos_config_pos_payment_method_rel_pkey", x => new { x.posconfigid, x.pospaymentmethodid });
                    table.ForeignKey(
                        name: "pos_config_pos_payment_method_rel_pos_config_id_fkey",
                        column: x => x.posconfigid,
                        principalTable: "pos_config",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "pos_config_product_pricelist_rel",
                columns: table => new
                {
                    posconfigid = table.Column<Guid>(name: "pos_config_id", type: "uuid", nullable: false),
                    productpricelistid = table.Column<Guid>(name: "product_pricelist_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pos_config_product_pricelist_rel_pkey", x => new { x.posconfigid, x.productpricelistid });
                    table.ForeignKey(
                        name: "pos_config_product_pricelist_rel_pos_config_id_fkey",
                        column: x => x.posconfigid,
                        principalTable: "pos_config",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "pos_detail_configs",
                columns: table => new
                {
                    posdetailswizardid = table.Column<Guid>(name: "pos_details_wizard_id", type: "uuid", nullable: false),
                    posconfigid = table.Column<Guid>(name: "pos_config_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pos_detail_configs_pkey", x => new { x.posdetailswizardid, x.posconfigid });
                    table.ForeignKey(
                        name: "pos_detail_configs_pos_config_id_fkey",
                        column: x => x.posconfigid,
                        principalTable: "pos_config",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "pos_details_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    startdate = table.Column<DateTime>(name: "start_date", type: "timestamp without time zone", nullable: true),
                    enddate = table.Column<DateTime>(name: "end_date", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pos_details_wizard_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "pos_make_payment",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    configid = table.Column<Guid>(name: "config_id", type: "uuid", nullable: true),
                    paymentmethodid = table.Column<Guid>(name: "payment_method_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    paymentname = table.Column<string>(name: "payment_name", type: "text", nullable: true),
                    amount = table.Column<decimal>(type: "numeric", nullable: true),
                    paymentdate = table.Column<DateTime>(name: "payment_date", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pos_make_payment_pkey", x => x.id);
                    table.ForeignKey(
                        name: "pos_make_payment_config_id_fkey",
                        column: x => x.configid,
                        principalTable: "pos_config",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "pos_order",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    pricelistid = table.Column<Guid>(name: "pricelist_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    sequencenumber = table.Column<long>(name: "sequence_number", type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    sessionid = table.Column<Guid>(name: "session_id", type: "uuid", nullable: true),
                    accountmove = table.Column<Guid>(name: "account_move", type: "uuid", nullable: true),
                    procurementgroupid = table.Column<Guid>(name: "procurement_group_id", type: "uuid", nullable: true),
                    nbprint = table.Column<long>(name: "nb_print", type: "bigint", nullable: true),
                    salejournal = table.Column<Guid>(name: "sale_journal", type: "uuid", nullable: true),
                    fiscalpositionid = table.Column<Guid>(name: "fiscal_position_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    accesstoken = table.Column<string>(name: "access_token", type: "text", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    posreference = table.Column<string>(name: "pos_reference", type: "text", nullable: true),
                    note = table.Column<string>(type: "text", nullable: true),
                    amounttax = table.Column<decimal>(name: "amount_tax", type: "numeric", nullable: true),
                    amounttotal = table.Column<decimal>(name: "amount_total", type: "numeric", nullable: true),
                    amountpaid = table.Column<decimal>(name: "amount_paid", type: "numeric", nullable: true),
                    amountreturn = table.Column<decimal>(name: "amount_return", type: "numeric", nullable: true),
                    currencyrate = table.Column<decimal>(name: "currency_rate", type: "numeric", nullable: true),
                    tipamount = table.Column<decimal>(name: "tip_amount", type: "numeric", nullable: true),
                    toinvoice = table.Column<bool>(name: "to_invoice", type: "boolean", nullable: true),
                    toship = table.Column<bool>(name: "to_ship", type: "boolean", nullable: true),
                    istipped = table.Column<bool>(name: "is_tipped", type: "boolean", nullable: true),
                    dateorder = table.Column<DateTime>(name: "date_order", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    crmteamid = table.Column<Guid>(name: "crm_team_id", type: "uuid", nullable: true),
                    employeeid = table.Column<Guid>(name: "employee_id", type: "uuid", nullable: true),
                    cashier = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pos_order_pkey", x => x.id);
                    table.ForeignKey(
                        name: "pos_order_account_move_fkey",
                        column: x => x.accountmove,
                        principalTable: "account_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "pos_order_crm_team_id_fkey",
                        column: x => x.crmteamid,
                        principalTable: "crm_team",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "pos_order_employee_id_fkey",
                        column: x => x.employeeid,
                        principalTable: "hr_employee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "pos_order_fiscal_position_id_fkey",
                        column: x => x.fiscalpositionid,
                        principalTable: "account_fiscal_position",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "pos_order_sale_journal_fkey",
                        column: x => x.salejournal,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "pos_order_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    orderid = table.Column<Guid>(name: "order_id", type: "uuid", nullable: true),
                    refundedorderlineid = table.Column<Guid>(name: "refunded_orderline_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    notice = table.Column<string>(type: "text", nullable: true),
                    fullproductname = table.Column<string>(name: "full_product_name", type: "text", nullable: true),
                    customernote = table.Column<string>(name: "customer_note", type: "text", nullable: true),
                    priceunit = table.Column<decimal>(name: "price_unit", type: "numeric", nullable: true),
                    qty = table.Column<decimal>(type: "numeric", nullable: true),
                    pricesubtotal = table.Column<decimal>(name: "price_subtotal", type: "numeric", nullable: true),
                    pricesubtotalincl = table.Column<decimal>(name: "price_subtotal_incl", type: "numeric", nullable: true),
                    totalcost = table.Column<decimal>(name: "total_cost", type: "numeric", nullable: true),
                    discount = table.Column<decimal>(type: "numeric", nullable: true),
                    istotalcostcomputed = table.Column<bool>(name: "is_total_cost_computed", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    priceextra = table.Column<double>(name: "price_extra", type: "double precision", nullable: true),
                    saleorderoriginid = table.Column<Guid>(name: "sale_order_origin_id", type: "uuid", nullable: true),
                    saleorderlineid = table.Column<Guid>(name: "sale_order_line_id", type: "uuid", nullable: true),
                    downpaymentdetails = table.Column<string>(name: "down_payment_details", type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pos_order_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "pos_order_line_order_id_fkey",
                        column: x => x.orderid,
                        principalTable: "pos_order",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "pos_order_line_refunded_orderline_id_fkey",
                        column: x => x.refundedorderlineid,
                        principalTable: "pos_order_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "pos_pack_operation_lot",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    posorderlineid = table.Column<Guid>(name: "pos_order_line_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    lotname = table.Column<string>(name: "lot_name", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pos_pack_operation_lot_pkey", x => x.id);
                    table.ForeignKey(
                        name: "pos_pack_operation_lot_pos_order_line_id_fkey",
                        column: x => x.posorderlineid,
                        principalTable: "pos_order_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "pos_payment",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    posorderid = table.Column<Guid>(name: "pos_order_id", type: "uuid", nullable: true),
                    paymentmethodid = table.Column<Guid>(name: "payment_method_id", type: "uuid", nullable: true),
                    sessionid = table.Column<Guid>(name: "session_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    accountmoveid = table.Column<Guid>(name: "account_move_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    cardtype = table.Column<string>(name: "card_type", type: "text", nullable: true),
                    cardholdername = table.Column<string>(name: "cardholder_name", type: "text", nullable: true),
                    transactionid = table.Column<string>(name: "transaction_id", type: "text", nullable: true),
                    paymentstatus = table.Column<string>(name: "payment_status", type: "text", nullable: true),
                    ticket = table.Column<string>(type: "text", nullable: true),
                    amount = table.Column<decimal>(type: "numeric", nullable: true),
                    ischange = table.Column<bool>(name: "is_change", type: "boolean", nullable: true),
                    paymentdate = table.Column<DateTime>(name: "payment_date", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pos_payment_pkey", x => x.id);
                    table.ForeignKey(
                        name: "pos_payment_account_move_id_fkey",
                        column: x => x.accountmoveid,
                        principalTable: "account_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "pos_payment_pos_order_id_fkey",
                        column: x => x.posorderid,
                        principalTable: "pos_order",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "pos_payment_method",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    outstandingaccountid = table.Column<Guid>(name: "outstanding_account_id", type: "uuid", nullable: true),
                    receivableaccountid = table.Column<Guid>(name: "receivable_account_id", type: "uuid", nullable: true),
                    journalid = table.Column<Guid>(name: "journal_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    usepaymentterminal = table.Column<string>(name: "use_payment_terminal", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    iscashcount = table.Column<bool>(name: "is_cash_count", type: "boolean", nullable: true),
                    splittransactions = table.Column<bool>(name: "split_transactions", type: "boolean", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pos_payment_method_pkey", x => x.id);
                    table.ForeignKey(
                        name: "pos_payment_method_journal_id_fkey",
                        column: x => x.journalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "pos_payment_method_outstanding_account_id_fkey",
                        column: x => x.outstandingaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "pos_payment_method_receivable_account_id_fkey",
                        column: x => x.receivableaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "pos_session",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    configid = table.Column<Guid>(name: "config_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    sequencenumber = table.Column<long>(name: "sequence_number", type: "bigint", nullable: true),
                    loginnumber = table.Column<long>(name: "login_number", type: "bigint", nullable: true),
                    cashjournalid = table.Column<Guid>(name: "cash_journal_id", type: "uuid", nullable: true),
                    moveid = table.Column<Guid>(name: "move_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    openingnotes = table.Column<string>(name: "opening_notes", type: "text", nullable: true),
                    cashregisterbalanceendreal = table.Column<decimal>(name: "cash_register_balance_end_real", type: "numeric", nullable: true),
                    cashregisterbalancestart = table.Column<decimal>(name: "cash_register_balance_start", type: "numeric", nullable: true),
                    cashrealtransaction = table.Column<decimal>(name: "cash_real_transaction", type: "numeric", nullable: true),
                    rescue = table.Column<bool>(type: "boolean", nullable: true),
                    updatestockatclosing = table.Column<bool>(name: "update_stock_at_closing", type: "boolean", nullable: true),
                    startat = table.Column<DateTime>(name: "start_at", type: "timestamp without time zone", nullable: true),
                    stopat = table.Column<DateTime>(name: "stop_at", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pos_session_pkey", x => x.id);
                    table.ForeignKey(
                        name: "pos_session_cash_journal_id_fkey",
                        column: x => x.cashjournalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "pos_session_config_id_fkey",
                        column: x => x.configid,
                        principalTable: "pos_config",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "pos_session_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "pos_session_move_id_fkey",
                        column: x => x.moveid,
                        principalTable: "account_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "pos_session_check_product_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("pos_session_check_product_wizard_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "privacy_log",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    anonymizedname = table.Column<string>(name: "anonymized_name", type: "text", nullable: true),
                    anonymizedemail = table.Column<string>(name: "anonymized_email", type: "text", nullable: true),
                    executiondetails = table.Column<string>(name: "execution_details", type: "text", nullable: true),
                    recordsdescription = table.Column<string>(name: "records_description", type: "text", nullable: true),
                    additionalnote = table.Column<string>(name: "additional_note", type: "text", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("privacy_log_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "privacy_lookup_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    logid = table.Column<Guid>(name: "log_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    email = table.Column<string>(type: "text", nullable: true),
                    executiondetails = table.Column<string>(name: "execution_details", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("privacy_lookup_wizard_pkey", x => x.id);
                    table.ForeignKey(
                        name: "privacy_lookup_wizard_log_id_fkey",
                        column: x => x.logid,
                        principalTable: "privacy_log",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "privacy_lookup_wizard_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    wizardid = table.Column<Guid>(name: "wizard_id", type: "uuid", nullable: true),
                    resid = table.Column<Guid>(name: "res_id", type: "uuid", nullable: true),
                    resmodelid = table.Column<Guid>(name: "res_model_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    resname = table.Column<string>(name: "res_name", type: "text", nullable: true),
                    resmodel = table.Column<string>(name: "res_model", type: "text", nullable: true),
                    executiondetails = table.Column<string>(name: "execution_details", type: "text", nullable: true),
                    hasactive = table.Column<bool>(name: "has_active", type: "boolean", nullable: true),
                    isactive = table.Column<bool>(name: "is_active", type: "boolean", nullable: true),
                    isunlinked = table.Column<bool>(name: "is_unlinked", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("privacy_lookup_wizard_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "privacy_lookup_wizard_line_res_model_id_fkey",
                        column: x => x.resmodelid,
                        principalTable: "ir_model",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "privacy_lookup_wizard_line_wizard_id_fkey",
                        column: x => x.wizardid,
                        principalTable: "privacy_lookup_wizard",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "procurement_group",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    movetype = table.Column<string>(name: "move_type", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    posorderid = table.Column<Guid>(name: "pos_order_id", type: "uuid", nullable: true),
                    saleid = table.Column<Guid>(name: "sale_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("procurement_group_pkey", x => x.id);
                    table.ForeignKey(
                        name: "procurement_group_pos_order_id_fkey",
                        column: x => x.posorderid,
                        principalTable: "pos_order",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "product_accessory_rel",
                columns: table => new
                {
                    srcid = table.Column<Guid>(name: "src_id", type: "uuid", nullable: false),
                    destid = table.Column<Guid>(name: "dest_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_accessory_rel_pkey", x => new { x.srcid, x.destid });
                });

            migrationBuilder.CreateTable(
                name: "product_alternative_rel",
                columns: table => new
                {
                    srcid = table.Column<Guid>(name: "src_id", type: "uuid", nullable: false),
                    destid = table.Column<Guid>(name: "dest_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_alternative_rel_pkey", x => new { x.srcid, x.destid });
                });

            migrationBuilder.CreateTable(
                name: "product_attr_exclusion_value_ids_rel",
                columns: table => new
                {
                    producttemplateattributeexclusionid = table.Column<Guid>(name: "product_template_attribute_exclusion_id", type: "uuid", nullable: false),
                    producttemplateattributevalueid = table.Column<Guid>(name: "product_template_attribute_value_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_attr_exclusion_value_ids_rel_pkey", x => new { x.producttemplateattributeexclusionid, x.producttemplateattributevalueid });
                });

            migrationBuilder.CreateTable(
                name: "product_attribute",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createvariant = table.Column<string>(name: "create_variant", type: "text", nullable: true),
                    displaytype = table.Column<string>(name: "display_type", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    visibility = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_attribute_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "product_attribute_custom_value",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    customproducttemplateattributevalueid = table.Column<Guid>(name: "custom_product_template_attribute_value_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    customvalue = table.Column<string>(name: "custom_value", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    saleorderlineid = table.Column<Guid>(name: "sale_order_line_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_attribute_custom_value_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "product_attribute_product_template_rel",
                columns: table => new
                {
                    productattributeid = table.Column<long>(name: "product_attribute_id", type: "bigint", nullable: false),
                    producttemplateid = table.Column<Guid>(name: "product_template_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_attribute_product_template_rel_pkey", x => new { x.productattributeid, x.producttemplateid });
                    table.ForeignKey(
                        name: "product_attribute_product_template_re_product_attribute_id_fkey",
                        column: x => x.productattributeid,
                        principalTable: "product_attribute",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "product_attribute_value",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigint", nullable: true),
                    attributeid = table.Column<long>(name: "attribute_id", type: "bigint", nullable: true),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    htmlcolor = table.Column<string>(name: "html_color", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    iscustom = table.Column<bool>(name: "is_custom", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_attribute_value_pkey", x => x.id);
                    table.ForeignKey(
                        name: "product_attribute_value_attribute_id_fkey",
                        column: x => x.attributeid,
                        principalTable: "product_attribute",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "product_attribute_value_product_template_attribute_line_rel",
                columns: table => new
                {
                    productattributevalueid = table.Column<Guid>(name: "product_attribute_value_id", type: "uuid", nullable: false),
                    producttemplateattributelineid = table.Column<Guid>(name: "product_template_attribute_line_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_attribute_value_product_template_attribute_line_re_pkey", x => new { x.productattributevalueid, x.producttemplateattributelineid });
                    table.ForeignKey(
                        name: "product_attribute_value_product_product_attribute_value_id_fkey",
                        column: x => x.productattributevalueid,
                        principalTable: "product_attribute_value",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "product_category",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    parentid = table.Column<long>(name: "parent_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    completename = table.Column<string>(name: "complete_name", type: "text", nullable: true),
                    parentpath = table.Column<string>(name: "parent_path", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    removalstrategyid = table.Column<Guid>(name: "removal_strategy_id", type: "uuid", nullable: true),
                    packagingreservemethod = table.Column<string>(name: "packaging_reserve_method", type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_category_pkey", x => x.id);
                    table.ForeignKey(
                        name: "product_category_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "product_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "product_image",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    producttmplid = table.Column<Guid>(name: "product_tmpl_id", type: "uuid", nullable: true),
                    productvariantid = table.Column<Guid>(name: "product_variant_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    videourl = table.Column<string>(name: "video_url", type: "text", nullable: true),
                    canimage1024bezoomed = table.Column<bool>(name: "can_image_1024_be_zoomed", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_image_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "product_label_layout",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    customquantity = table.Column<long>(name: "custom_quantity", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    printformat = table.Column<string>(name: "print_format", type: "text", nullable: true),
                    extrahtml = table.Column<string>(name: "extra_html", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    pickingquantity = table.Column<string>(name: "picking_quantity", type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_label_layout_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "product_label_layout_product_product_rel",
                columns: table => new
                {
                    productlabellayoutid = table.Column<Guid>(name: "product_label_layout_id", type: "uuid", nullable: false),
                    productproductid = table.Column<Guid>(name: "product_product_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_label_layout_product_product_rel_pkey", x => new { x.productlabellayoutid, x.productproductid });
                    table.ForeignKey(
                        name: "product_label_layout_product_produ_product_label_layout_id_fkey",
                        column: x => x.productlabellayoutid,
                        principalTable: "product_label_layout",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "product_label_layout_product_template_rel",
                columns: table => new
                {
                    productlabellayoutid = table.Column<Guid>(name: "product_label_layout_id", type: "uuid", nullable: false),
                    producttemplateid = table.Column<Guid>(name: "product_template_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_label_layout_product_template_rel_pkey", x => new { x.productlabellayoutid, x.producttemplateid });
                    table.ForeignKey(
                        name: "product_label_layout_product_templ_product_label_layout_id_fkey",
                        column: x => x.productlabellayoutid,
                        principalTable: "product_label_layout",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "product_label_layout_stock_move_line_rel",
                columns: table => new
                {
                    productlabellayoutid = table.Column<Guid>(name: "product_label_layout_id", type: "uuid", nullable: false),
                    stockmovelineid = table.Column<Guid>(name: "stock_move_line_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_label_layout_stock_move_line_rel_pkey", x => new { x.productlabellayoutid, x.stockmovelineid });
                    table.ForeignKey(
                        name: "product_label_layout_stock_move_li_product_label_layout_id_fkey",
                        column: x => x.productlabellayoutid,
                        principalTable: "product_label_layout",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "product_optional_rel",
                columns: table => new
                {
                    srcid = table.Column<Guid>(name: "src_id", type: "uuid", nullable: false),
                    destid = table.Column<Guid>(name: "dest_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_optional_rel_pkey", x => new { x.srcid, x.destid });
                });

            migrationBuilder.CreateTable(
                name: "product_packaging",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    barcode = table.Column<string>(type: "text", nullable: true),
                    qty = table.Column<decimal>(type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    sales = table.Column<bool>(type: "boolean", nullable: true),
                    packagetypeid = table.Column<Guid>(name: "package_type_id", type: "uuid", nullable: true),
                    purchase = table.Column<bool>(type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_packaging_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "product_pricelist",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    discountpolicy = table.Column<string>(name: "discount_policy", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    selectable = table.Column<bool>(type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_pricelist_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "product_pricelist_item",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    pricelistid = table.Column<Guid>(name: "pricelist_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    categid = table.Column<long>(name: "categ_id", type: "bigint", nullable: true),
                    producttmplid = table.Column<Guid>(name: "product_tmpl_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    basepricelistid = table.Column<Guid>(name: "base_pricelist_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    appliedon = table.Column<string>(name: "applied_on", type: "text", nullable: true),
                    @base = table.Column<string>(name: "base", type: "text", nullable: true),
                    computeprice = table.Column<string>(name: "compute_price", type: "text", nullable: true),
                    minquantity = table.Column<decimal>(name: "min_quantity", type: "numeric", nullable: true),
                    fixedprice = table.Column<decimal>(name: "fixed_price", type: "numeric", nullable: true),
                    pricediscount = table.Column<decimal>(name: "price_discount", type: "numeric", nullable: true),
                    priceround = table.Column<decimal>(name: "price_round", type: "numeric", nullable: true),
                    pricesurcharge = table.Column<decimal>(name: "price_surcharge", type: "numeric", nullable: true),
                    priceminmargin = table.Column<decimal>(name: "price_min_margin", type: "numeric", nullable: true),
                    pricemaxmargin = table.Column<decimal>(name: "price_max_margin", type: "numeric", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    datestart = table.Column<DateTime>(name: "date_start", type: "timestamp without time zone", nullable: true),
                    dateend = table.Column<DateTime>(name: "date_end", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    percentprice = table.Column<double>(name: "percent_price", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_pricelist_item_pkey", x => x.id);
                    table.ForeignKey(
                        name: "product_pricelist_item_base_pricelist_id_fkey",
                        column: x => x.basepricelistid,
                        principalTable: "product_pricelist",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "product_pricelist_item_categ_id_fkey",
                        column: x => x.categid,
                        principalTable: "product_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "product_pricelist_item_pricelist_id_fkey",
                        column: x => x.pricelistid,
                        principalTable: "product_pricelist",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "product_pricelist_res_config_settings_rel",
                columns: table => new
                {
                    resconfigsettingsid = table.Column<Guid>(name: "res_config_settings_id", type: "uuid", nullable: false),
                    productpricelistid = table.Column<Guid>(name: "product_pricelist_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_pricelist_res_config_settings_rel_pkey", x => new { x.resconfigsettingsid, x.productpricelistid });
                    table.ForeignKey(
                        name: "product_pricelist_res_config_settings_product_pricelist_id_fkey",
                        column: x => x.productpricelistid,
                        principalTable: "product_pricelist",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "product_product",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    producttmplid = table.Column<Guid>(name: "product_tmpl_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    defaultcode = table.Column<string>(name: "default_code", type: "text", nullable: true),
                    barcode = table.Column<string>(type: "text", nullable: true),
                    combinationindices = table.Column<string>(name: "combination_indices", type: "text", nullable: true),
                    volume = table.Column<decimal>(type: "numeric", nullable: true),
                    weight = table.Column<decimal>(type: "numeric", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    canimagevariant1024bezoomed = table.Column<bool>(name: "can_image_variant_1024_be_zoomed", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    baseunitid = table.Column<Guid>(name: "base_unit_id", type: "uuid", nullable: true),
                    baseunitcount = table.Column<double>(name: "base_unit_count", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_product_pkey", x => x.id);
                    table.ForeignKey(
                        name: "product_product_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "product_product_stock_track_confirmation_rel",
                columns: table => new
                {
                    stocktrackconfirmationid = table.Column<Guid>(name: "stock_track_confirmation_id", type: "uuid", nullable: false),
                    productproductid = table.Column<Guid>(name: "product_product_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_product_stock_track_confirmation_rel_pkey", x => new { x.stocktrackconfirmationid, x.productproductid });
                    table.ForeignKey(
                        name: "product_product_stock_track_confirmatio_product_product_id_fkey",
                        column: x => x.productproductid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "product_public_category",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: true),
                    parentid = table.Column<long>(name: "parent_id", type: "bigint", nullable: true),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    websitemetaogimg = table.Column<string>(name: "website_meta_og_img", type: "text", nullable: true),
                    parentpath = table.Column<string>(name: "parent_path", type: "text", nullable: true),
                    websitemetatitle = table.Column<string>(name: "website_meta_title", type: "jsonb", nullable: true),
                    websitemetadescription = table.Column<string>(name: "website_meta_description", type: "jsonb", nullable: true),
                    websitemetakeywords = table.Column<string>(name: "website_meta_keywords", type: "jsonb", nullable: true),
                    seoname = table.Column<string>(name: "seo_name", type: "jsonb", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    websitedescription = table.Column<string>(name: "website_description", type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_public_category_pkey", x => x.id);
                    table.ForeignKey(
                        name: "product_public_category_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "product_public_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "product_public_category_product_template_rel",
                columns: table => new
                {
                    productpubliccategoryid = table.Column<long>(name: "product_public_category_id", type: "bigint", nullable: false),
                    producttemplateid = table.Column<Guid>(name: "product_template_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_public_category_product_template_rel_pkey", x => new { x.productpubliccategoryid, x.producttemplateid });
                    table.ForeignKey(
                        name: "product_public_category_product_product_public_category_id_fkey",
                        column: x => x.productpubliccategoryid,
                        principalTable: "product_public_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "product_removal",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    method = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_removal_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "product_replenish",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    producttmplid = table.Column<Guid>(name: "product_tmpl_id", type: "uuid", nullable: true),
                    productuomid = table.Column<Guid>(name: "product_uom_id", type: "uuid", nullable: true),
                    warehouseid = table.Column<Guid>(name: "warehouse_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    producthasvariants = table.Column<bool>(name: "product_has_variants", type: "boolean", nullable: true),
                    dateplanned = table.Column<DateTime>(name: "date_planned", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    quantity = table.Column<double>(type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_replenish_pkey", x => x.id);
                    table.ForeignKey(
                        name: "product_replenish_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "product_replenish_stock_route_rel",
                columns: table => new
                {
                    productreplenishid = table.Column<Guid>(name: "product_replenish_id", type: "uuid", nullable: false),
                    stockrouteid = table.Column<Guid>(name: "stock_route_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_replenish_stock_route_rel_pkey", x => new { x.productreplenishid, x.stockrouteid });
                    table.ForeignKey(
                        name: "product_replenish_stock_route_rel_product_replenish_id_fkey",
                        column: x => x.productreplenishid,
                        principalTable: "product_replenish",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "product_ribbon",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    bgcolor = table.Column<string>(name: "bg_color", type: "text", nullable: true),
                    textcolor = table.Column<string>(name: "text_color", type: "text", nullable: true),
                    htmlclass = table.Column<string>(name: "html_class", type: "text", nullable: true),
                    html = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_ribbon_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "product_supplier_taxes_rel",
                columns: table => new
                {
                    prodid = table.Column<Guid>(name: "prod_id", type: "uuid", nullable: false),
                    taxid = table.Column<Guid>(name: "tax_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_supplier_taxes_rel_pkey", x => new { x.prodid, x.taxid });
                    table.ForeignKey(
                        name: "product_supplier_taxes_rel_tax_id_fkey",
                        column: x => x.taxid,
                        principalTable: "account_tax",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "product_supplierinfo",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    producttmplid = table.Column<Guid>(name: "product_tmpl_id", type: "uuid", nullable: true),
                    delay = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    productname = table.Column<string>(name: "product_name", type: "text", nullable: true),
                    productcode = table.Column<string>(name: "product_code", type: "text", nullable: true),
                    datestart = table.Column<DateTime>(name: "date_start", type: "timestamp without time zone", nullable: true),
                    dateend = table.Column<DateTime>(name: "date_end", type: "timestamp without time zone", nullable: true),
                    minqty = table.Column<decimal>(name: "min_qty", type: "numeric", nullable: true),
                    price = table.Column<decimal>(type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_supplierinfo_pkey", x => x.id);
                    table.ForeignKey(
                        name: "product_supplierinfo_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "product_supplierinfo_stock_replenishment_info_rel",
                columns: table => new
                {
                    stockreplenishmentinfoid = table.Column<Guid>(name: "stock_replenishment_info_id", type: "uuid", nullable: false),
                    productsupplierinfoid = table.Column<Guid>(name: "product_supplierinfo_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_supplierinfo_stock_replenishment_info_rel_pkey", x => new { x.stockreplenishmentinfoid, x.productsupplierinfoid });
                    table.ForeignKey(
                        name: "product_supplierinfo_stock_repleni_product_supplierinfo_id_fkey",
                        column: x => x.productsupplierinfoid,
                        principalTable: "product_supplierinfo",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "product_tag",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: true),
                    ribbonid = table.Column<Guid>(name: "ribbon_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_tag_pkey", x => x.id);
                    table.ForeignKey(
                        name: "product_tag_ribbon_id_fkey",
                        column: x => x.ribbonid,
                        principalTable: "product_ribbon",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "product_tag_product_product_rel",
                columns: table => new
                {
                    productproductid = table.Column<Guid>(name: "product_product_id", type: "uuid", nullable: false),
                    producttagid = table.Column<long>(name: "product_tag_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_tag_product_product_rel_pkey", x => new { x.productproductid, x.producttagid });
                    table.ForeignKey(
                        name: "product_tag_product_product_rel_product_product_id_fkey",
                        column: x => x.productproductid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "product_tag_product_product_rel_product_tag_id_fkey",
                        column: x => x.producttagid,
                        principalTable: "product_tag",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "product_tag_product_template_rel",
                columns: table => new
                {
                    producttemplateid = table.Column<Guid>(name: "product_template_id", type: "uuid", nullable: false),
                    producttagid = table.Column<long>(name: "product_tag_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_tag_product_template_rel_pkey", x => new { x.producttemplateid, x.producttagid });
                    table.ForeignKey(
                        name: "product_tag_product_template_rel_product_tag_id_fkey",
                        column: x => x.producttagid,
                        principalTable: "product_tag",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "product_taxes_rel",
                columns: table => new
                {
                    prodid = table.Column<Guid>(name: "prod_id", type: "uuid", nullable: false),
                    taxid = table.Column<Guid>(name: "tax_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_taxes_rel_pkey", x => new { x.prodid, x.taxid });
                    table.ForeignKey(
                        name: "product_taxes_rel_tax_id_fkey",
                        column: x => x.taxid,
                        principalTable: "account_tax",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "product_template",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    categid = table.Column<long>(name: "categ_id", type: "bigint", nullable: true),
                    uomid = table.Column<Guid>(name: "uom_id", type: "uuid", nullable: true),
                    uompoid = table.Column<Guid>(name: "uom_po_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    detailedtype = table.Column<string>(name: "detailed_type", type: "text", nullable: true),
                    type = table.Column<string>(type: "text", nullable: true),
                    defaultcode = table.Column<string>(name: "default_code", type: "text", nullable: true),
                    priority = table.Column<string>(type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    description = table.Column<string>(type: "jsonb", nullable: true),
                    descriptionpurchase = table.Column<string>(name: "description_purchase", type: "jsonb", nullable: true),
                    descriptionsale = table.Column<string>(name: "description_sale", type: "jsonb", nullable: true),
                    listprice = table.Column<decimal>(name: "list_price", type: "numeric", nullable: true),
                    volume = table.Column<decimal>(type: "numeric", nullable: true),
                    weight = table.Column<decimal>(type: "numeric", nullable: true),
                    saleok = table.Column<bool>(name: "sale_ok", type: "boolean", nullable: true),
                    purchaseok = table.Column<bool>(name: "purchase_ok", type: "boolean", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    canimage1024bezoomed = table.Column<bool>(name: "can_image_1024_be_zoomed", type: "boolean", nullable: true),
                    hasconfigurableattributes = table.Column<bool>(name: "has_configurable_attributes", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    servicetype = table.Column<string>(name: "service_type", type: "text", nullable: true),
                    salelinewarn = table.Column<string>(name: "sale_line_warn", type: "text", nullable: true),
                    expensepolicy = table.Column<string>(name: "expense_policy", type: "text", nullable: true),
                    invoicepolicy = table.Column<string>(name: "invoice_policy", type: "text", nullable: true),
                    salelinewarnmsg = table.Column<string>(name: "sale_line_warn_msg", type: "text", nullable: true),
                    tracking = table.Column<string>(type: "text", nullable: true),
                    descriptionpicking = table.Column<string>(name: "description_picking", type: "jsonb", nullable: true),
                    descriptionpickingout = table.Column<string>(name: "description_pickingout", type: "jsonb", nullable: true),
                    descriptionpickingin = table.Column<string>(name: "description_pickingin", type: "jsonb", nullable: true),
                    saledelay = table.Column<double>(name: "sale_delay", type: "double precision", nullable: true),
                    poscategid = table.Column<long>(name: "pos_categ_id", type: "bigint", nullable: true),
                    availableinpos = table.Column<bool>(name: "available_in_pos", type: "boolean", nullable: true),
                    toweight = table.Column<bool>(name: "to_weight", type: "boolean", nullable: true),
                    purchasemethod = table.Column<string>(name: "purchase_method", type: "text", nullable: true),
                    purchaselinewarn = table.Column<string>(name: "purchase_line_warn", type: "text", nullable: true),
                    purchaselinewarnmsg = table.Column<string>(name: "purchase_line_warn_msg", type: "text", nullable: true),
                    producedelay = table.Column<double>(name: "produce_delay", type: "double precision", nullable: true),
                    daystopreparemo = table.Column<double>(name: "days_to_prepare_mo", type: "double precision", nullable: true),
                    servicetracking = table.Column<string>(name: "service_tracking", type: "text", nullable: true),
                    canbeexpensed = table.Column<bool>(name: "can_be_expensed", type: "boolean", nullable: true),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: true),
                    websitesizex = table.Column<long>(name: "website_size_x", type: "bigint", nullable: true),
                    websitesizey = table.Column<long>(name: "website_size_y", type: "bigint", nullable: true),
                    websiteribbonid = table.Column<Guid>(name: "website_ribbon_id", type: "uuid", nullable: true),
                    websitesequence = table.Column<long>(name: "website_sequence", type: "bigint", nullable: true),
                    baseunitid = table.Column<Guid>(name: "base_unit_id", type: "uuid", nullable: true),
                    websitemetaogimg = table.Column<string>(name: "website_meta_og_img", type: "text", nullable: true),
                    websitemetatitle = table.Column<string>(name: "website_meta_title", type: "jsonb", nullable: true),
                    websitemetadescription = table.Column<string>(name: "website_meta_description", type: "jsonb", nullable: true),
                    websitemetakeywords = table.Column<string>(name: "website_meta_keywords", type: "jsonb", nullable: true),
                    seoname = table.Column<string>(name: "seo_name", type: "jsonb", nullable: true),
                    websitedescription = table.Column<string>(name: "website_description", type: "jsonb", nullable: true),
                    comparelistprice = table.Column<decimal>(name: "compare_list_price", type: "numeric", nullable: true),
                    ispublished = table.Column<bool>(name: "is_published", type: "boolean", nullable: true),
                    ratinglastvalue = table.Column<double>(name: "rating_last_value", type: "double precision", nullable: true),
                    baseunitcount = table.Column<double>(name: "base_unit_count", type: "double precision", nullable: true),
                    outofstockmessage = table.Column<string>(name: "out_of_stock_message", type: "jsonb", nullable: true),
                    allowoutofstockorder = table.Column<bool>(name: "allow_out_of_stock_order", type: "boolean", nullable: true),
                    showavailability = table.Column<bool>(name: "show_availability", type: "boolean", nullable: true),
                    availablethreshold = table.Column<double>(name: "available_threshold", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_template_pkey", x => x.id);
                    table.ForeignKey(
                        name: "product_template_categ_id_fkey",
                        column: x => x.categid,
                        principalTable: "product_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "product_template_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "product_template_pos_categ_id_fkey",
                        column: x => x.poscategid,
                        principalTable: "pos_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "product_template_website_ribbon_id_fkey",
                        column: x => x.websiteribbonid,
                        principalTable: "product_ribbon",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "product_template_attribute_exclusion",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    producttemplateattributevalueid = table.Column<Guid>(name: "product_template_attribute_value_id", type: "uuid", nullable: true),
                    producttmplid = table.Column<Guid>(name: "product_tmpl_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_template_attribute_exclusion_pkey", x => x.id);
                    table.ForeignKey(
                        name: "product_template_attribute_exclusion_product_tmpl_id_fkey",
                        column: x => x.producttmplid,
                        principalTable: "product_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "product_template_attribute_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    producttmplid = table.Column<Guid>(name: "product_tmpl_id", type: "uuid", nullable: true),
                    attributeid = table.Column<long>(name: "attribute_id", type: "bigint", nullable: true),
                    valuecount = table.Column<long>(name: "value_count", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_template_attribute_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "product_template_attribute_line_attribute_id_fkey",
                        column: x => x.attributeid,
                        principalTable: "product_attribute",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "product_template_attribute_line_product_tmpl_id_fkey",
                        column: x => x.producttmplid,
                        principalTable: "product_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "product_template_attribute_value",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    productattributevalueid = table.Column<Guid>(name: "product_attribute_value_id", type: "uuid", nullable: true),
                    attributelineid = table.Column<Guid>(name: "attribute_line_id", type: "uuid", nullable: true),
                    producttmplid = table.Column<Guid>(name: "product_tmpl_id", type: "uuid", nullable: true),
                    attributeid = table.Column<long>(name: "attribute_id", type: "bigint", nullable: true),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    priceextra = table.Column<decimal>(name: "price_extra", type: "numeric", nullable: true),
                    ptavactive = table.Column<bool>(name: "ptav_active", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_template_attribute_value_pkey", x => x.id);
                    table.ForeignKey(
                        name: "product_template_attribute_valu_product_attribute_value_id_fkey",
                        column: x => x.productattributevalueid,
                        principalTable: "product_attribute_value",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "product_template_attribute_value_attribute_id_fkey",
                        column: x => x.attributeid,
                        principalTable: "product_attribute",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "product_template_attribute_value_attribute_line_id_fkey",
                        column: x => x.attributelineid,
                        principalTable: "product_template_attribute_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "product_template_attribute_value_product_tmpl_id_fkey",
                        column: x => x.producttmplid,
                        principalTable: "product_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "product_variant_combination",
                columns: table => new
                {
                    productproductid = table.Column<Guid>(name: "product_product_id", type: "uuid", nullable: false),
                    producttemplateattributevalueid = table.Column<Guid>(name: "product_template_attribute_value_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_variant_combination_pkey", x => new { x.productproductid, x.producttemplateattributevalueid });
                    table.ForeignKey(
                        name: "product_variant_combination_product_product_id_fkey",
                        column: x => x.productproductid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "product_variant_combination_product_template_attribute_val_fkey",
                        column: x => x.producttemplateattributevalueid,
                        principalTable: "product_template_attribute_value",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "product_template_attribute_value_sale_order_line_rel",
                columns: table => new
                {
                    saleorderlineid = table.Column<Guid>(name: "sale_order_line_id", type: "uuid", nullable: false),
                    producttemplateattributevalueid = table.Column<Guid>(name: "product_template_attribute_value_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("product_template_attribute_value_sale_order_line_rel_pkey", x => new { x.saleorderlineid, x.producttemplateattributevalueid });
                    table.ForeignKey(
                        name: "product_template_attribute_va_product_template_attribute_v_fkey",
                        column: x => x.producttemplateattributevalueid,
                        principalTable: "product_template_attribute_value",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "project_collaborator",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    projectid = table.Column<Guid>(name: "project_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("project_collaborator_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "project_favorite_user_rel",
                columns: table => new
                {
                    projectid = table.Column<Guid>(name: "project_id", type: "uuid", nullable: false),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("project_favorite_user_rel_pkey", x => new { x.projectid, x.userid });
                });

            migrationBuilder.CreateTable(
                name: "project_milestone",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    projectid = table.Column<Guid>(name: "project_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    deadline = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    reacheddate = table.Column<DateTime>(name: "reached_date", type: "timestamp without time zone", nullable: true),
                    isreached = table.Column<bool>(name: "is_reached", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    salelineid = table.Column<Guid>(name: "sale_line_id", type: "uuid", nullable: true),
                    quantitypercentage = table.Column<double>(name: "quantity_percentage", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("project_milestone_pkey", x => x.id);
                    table.ForeignKey(
                        name: "project_milestone_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "project_project",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    aliasid = table.Column<Guid>(name: "alias_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    analyticaccountid = table.Column<Guid>(name: "analytic_account_id", type: "uuid", nullable: true),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    stageid = table.Column<long>(name: "stage_id", type: "bigint", nullable: true),
                    lastupdateid = table.Column<Guid>(name: "last_update_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    accesstoken = table.Column<string>(name: "access_token", type: "text", nullable: true),
                    partneremail = table.Column<string>(name: "partner_email", type: "text", nullable: true),
                    partnerphone = table.Column<string>(name: "partner_phone", type: "text", nullable: true),
                    privacyvisibility = table.Column<string>(name: "privacy_visibility", type: "text", nullable: true),
                    ratingstatus = table.Column<string>(name: "rating_status", type: "text", nullable: true),
                    ratingstatusperiod = table.Column<string>(name: "rating_status_period", type: "text", nullable: true),
                    lastupdatestatus = table.Column<string>(name: "last_update_status", type: "text", nullable: true),
                    datestart = table.Column<DateTime>(name: "date_start", type: "timestamp without time zone", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    labeltasks = table.Column<string>(name: "label_tasks", type: "jsonb", nullable: true),
                    taskpropertiesdefinition = table.Column<string>(name: "task_properties_definition", type: "jsonb", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    allowsubtasks = table.Column<bool>(name: "allow_subtasks", type: "boolean", nullable: true),
                    allowrecurringtasks = table.Column<bool>(name: "allow_recurring_tasks", type: "boolean", nullable: true),
                    allowtaskdependencies = table.Column<bool>(name: "allow_task_dependencies", type: "boolean", nullable: true),
                    allowmilestones = table.Column<bool>(name: "allow_milestones", type: "boolean", nullable: true),
                    ratingactive = table.Column<bool>(name: "rating_active", type: "boolean", nullable: true),
                    ratingrequestdeadline = table.Column<DateTime>(name: "rating_request_deadline", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    salelineid = table.Column<Guid>(name: "sale_line_id", type: "uuid", nullable: true),
                    allowbillable = table.Column<bool>(name: "allow_billable", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("project_project_pkey", x => x.id);
                    table.ForeignKey(
                        name: "project_project_alias_id_fkey",
                        column: x => x.aliasid,
                        principalTable: "mail_alias",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "project_project_analytic_account_id_fkey",
                        column: x => x.analyticaccountid,
                        principalTable: "account_analytic_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "project_project_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "project_project_project_tags_rel",
                columns: table => new
                {
                    projectprojectid = table.Column<Guid>(name: "project_project_id", type: "uuid", nullable: false),
                    projecttagsid = table.Column<long>(name: "project_tags_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("project_project_project_tags_rel_pkey", x => new { x.projectprojectid, x.projecttagsid });
                    table.ForeignKey(
                        name: "project_project_project_tags_rel_project_project_id_fkey",
                        column: x => x.projectprojectid,
                        principalTable: "project_project",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "project_project_project_task_type_delete_wizard_rel",
                columns: table => new
                {
                    projecttasktypedeletewizardid = table.Column<Guid>(name: "project_task_type_delete_wizard_id", type: "uuid", nullable: false),
                    projectprojectid = table.Column<Guid>(name: "project_project_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("project_project_project_task_type_delete_wizard_rel_pkey", x => new { x.projecttasktypedeletewizardid, x.projectprojectid });
                    table.ForeignKey(
                        name: "project_project_project_task_type_delet_project_project_id_fkey",
                        column: x => x.projectprojectid,
                        principalTable: "project_project",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "project_project_stage",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    mailtemplateid = table.Column<Guid>(name: "mail_template_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    fold = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    smstemplateid = table.Column<Guid>(name: "sms_template_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("project_project_stage_pkey", x => x.id);
                    table.ForeignKey(
                        name: "project_project_stage_mail_template_id_fkey",
                        column: x => x.mailtemplateid,
                        principalTable: "mail_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "project_share_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    resid = table.Column<Guid>(name: "res_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    resmodel = table.Column<string>(name: "res_model", type: "text", nullable: true),
                    accessmode = table.Column<string>(name: "access_mode", type: "text", nullable: true),
                    note = table.Column<string>(type: "text", nullable: true),
                    displayaccessmode = table.Column<bool>(name: "display_access_mode", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("project_share_wizard_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "project_share_wizard_res_partner_rel",
                columns: table => new
                {
                    projectsharewizardid = table.Column<Guid>(name: "project_share_wizard_id", type: "uuid", nullable: false),
                    respartnerid = table.Column<Guid>(name: "res_partner_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("project_share_wizard_res_partner_rel_pkey", x => new { x.projectsharewizardid, x.respartnerid });
                    table.ForeignKey(
                        name: "project_share_wizard_res_partner_r_project_share_wizard_id_fkey",
                        column: x => x.projectsharewizardid,
                        principalTable: "project_share_wizard",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "project_tags",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("project_tags_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "project_tags_project_task_rel",
                columns: table => new
                {
                    projecttaskid = table.Column<Guid>(name: "project_task_id", type: "uuid", nullable: false),
                    projecttagsid = table.Column<long>(name: "project_tags_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("project_tags_project_task_rel_pkey", x => new { x.projecttaskid, x.projecttagsid });
                    table.ForeignKey(
                        name: "project_tags_project_task_rel_project_tags_id_fkey",
                        column: x => x.projecttagsid,
                        principalTable: "project_tags",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "project_task",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    stageid = table.Column<long>(name: "stage_id", type: "bigint", nullable: true),
                    projectid = table.Column<Guid>(name: "project_id", type: "uuid", nullable: true),
                    displayprojectid = table.Column<Guid>(name: "display_project_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    displayedimageid = table.Column<Guid>(name: "displayed_image_id", type: "uuid", nullable: true),
                    parentid = table.Column<Guid>(name: "parent_id", type: "uuid", nullable: true),
                    ancestorid = table.Column<Guid>(name: "ancestor_id", type: "uuid", nullable: true),
                    milestoneid = table.Column<Guid>(name: "milestone_id", type: "uuid", nullable: true),
                    recurrenceid = table.Column<Guid>(name: "recurrence_id", type: "uuid", nullable: true),
                    analyticaccountid = table.Column<Guid>(name: "analytic_account_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    emailcc = table.Column<string>(name: "email_cc", type: "text", nullable: true),
                    accesstoken = table.Column<string>(name: "access_token", type: "text", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    priority = table.Column<string>(type: "text", nullable: true),
                    kanbanstate = table.Column<string>(name: "kanban_state", type: "text", nullable: true),
                    partneremail = table.Column<string>(name: "partner_email", type: "text", nullable: true),
                    partnerphone = table.Column<string>(name: "partner_phone", type: "text", nullable: true),
                    emailfrom = table.Column<string>(name: "email_from", type: "text", nullable: true),
                    datedeadline = table.Column<DateTime>(name: "date_deadline", type: "timestamp without time zone", nullable: true),
                    taskproperties = table.Column<string>(name: "task_properties", type: "jsonb", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    workinghoursopen = table.Column<decimal>(name: "working_hours_open", type: "numeric", nullable: true),
                    workinghoursclose = table.Column<decimal>(name: "working_hours_close", type: "numeric", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    isclosed = table.Column<bool>(name: "is_closed", type: "boolean", nullable: true),
                    isblocked = table.Column<bool>(name: "is_blocked", type: "boolean", nullable: true),
                    recurringtask = table.Column<bool>(name: "recurring_task", type: "boolean", nullable: true),
                    isanalyticaccountidchanged = table.Column<bool>(name: "is_analytic_account_id_changed", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    dateend = table.Column<DateTime>(name: "date_end", type: "timestamp without time zone", nullable: true),
                    dateassign = table.Column<DateTime>(name: "date_assign", type: "timestamp without time zone", nullable: true),
                    datelaststageupdate = table.Column<DateTime>(name: "date_last_stage_update", type: "timestamp without time zone", nullable: true),
                    ratinglastvalue = table.Column<double>(name: "rating_last_value", type: "double precision", nullable: true),
                    plannedhours = table.Column<double>(name: "planned_hours", type: "double precision", nullable: true),
                    workingdaysopen = table.Column<double>(name: "working_days_open", type: "double precision", nullable: true),
                    workingdaysclose = table.Column<double>(name: "working_days_close", type: "double precision", nullable: true),
                    saleorderid = table.Column<Guid>(name: "sale_order_id", type: "uuid", nullable: true),
                    salelineid = table.Column<Guid>(name: "sale_line_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("project_task_pkey", x => x.id);
                    table.ForeignKey(
                        name: "project_task_analytic_account_id_fkey",
                        column: x => x.analyticaccountid,
                        principalTable: "account_analytic_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "project_task_ancestor_id_fkey",
                        column: x => x.ancestorid,
                        principalTable: "project_task",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "project_task_display_project_id_fkey",
                        column: x => x.displayprojectid,
                        principalTable: "project_project",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "project_task_displayed_image_id_fkey",
                        column: x => x.displayedimageid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "project_task_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "project_task_milestone_id_fkey",
                        column: x => x.milestoneid,
                        principalTable: "project_milestone",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "project_task_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "project_task",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "project_task_project_id_fkey",
                        column: x => x.projectid,
                        principalTable: "project_project",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "task_dependencies_rel",
                columns: table => new
                {
                    taskid = table.Column<Guid>(name: "task_id", type: "uuid", nullable: false),
                    dependsonid = table.Column<Guid>(name: "depends_on_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("task_dependencies_rel_pkey", x => new { x.taskid, x.dependsonid });
                    table.ForeignKey(
                        name: "task_dependencies_rel_depends_on_id_fkey",
                        column: x => x.dependsonid,
                        principalTable: "project_task",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "task_dependencies_rel_task_id_fkey",
                        column: x => x.taskid,
                        principalTable: "project_task",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "project_task_recurrence",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    recurrenceleft = table.Column<long>(name: "recurrence_left", type: "bigint", nullable: true),
                    repeatinterval = table.Column<long>(name: "repeat_interval", type: "bigint", nullable: true),
                    repeatnumber = table.Column<long>(name: "repeat_number", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    repeatunit = table.Column<string>(name: "repeat_unit", type: "text", nullable: true),
                    repeattype = table.Column<string>(name: "repeat_type", type: "text", nullable: true),
                    repeatonmonth = table.Column<string>(name: "repeat_on_month", type: "text", nullable: true),
                    repeatonyear = table.Column<string>(name: "repeat_on_year", type: "text", nullable: true),
                    repeatday = table.Column<string>(name: "repeat_day", type: "text", nullable: true),
                    repeatweek = table.Column<string>(name: "repeat_week", type: "text", nullable: true),
                    repeatweekday = table.Column<string>(name: "repeat_weekday", type: "text", nullable: true),
                    repeatmonth = table.Column<string>(name: "repeat_month", type: "text", nullable: true),
                    nextrecurrencedate = table.Column<DateTime>(name: "next_recurrence_date", type: "timestamp without time zone", nullable: true),
                    repeatuntil = table.Column<DateTime>(name: "repeat_until", type: "timestamp without time zone", nullable: true),
                    mon = table.Column<bool>(type: "boolean", nullable: true),
                    tue = table.Column<bool>(type: "boolean", nullable: true),
                    wed = table.Column<bool>(type: "boolean", nullable: true),
                    thu = table.Column<bool>(type: "boolean", nullable: true),
                    fri = table.Column<bool>(type: "boolean", nullable: true),
                    sat = table.Column<bool>(type: "boolean", nullable: true),
                    sun = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("project_task_recurrence_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "project_task_type",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    mailtemplateid = table.Column<Guid>(name: "mail_template_id", type: "uuid", nullable: true),
                    ratingtemplateid = table.Column<Guid>(name: "rating_template_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    description = table.Column<string>(type: "jsonb", nullable: true),
                    legendblocked = table.Column<string>(name: "legend_blocked", type: "jsonb", nullable: true),
                    legenddone = table.Column<string>(name: "legend_done", type: "jsonb", nullable: true),
                    legendnormal = table.Column<string>(name: "legend_normal", type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    fold = table.Column<bool>(type: "boolean", nullable: true),
                    autovalidationkanbanstate = table.Column<bool>(name: "auto_validation_kanban_state", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    smstemplateid = table.Column<Guid>(name: "sms_template_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("project_task_type_pkey", x => x.id);
                    table.ForeignKey(
                        name: "project_task_type_mail_template_id_fkey",
                        column: x => x.mailtemplateid,
                        principalTable: "mail_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "project_task_type_rating_template_id_fkey",
                        column: x => x.ratingtemplateid,
                        principalTable: "mail_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "project_task_type_rel",
                columns: table => new
                {
                    typeid = table.Column<long>(name: "type_id", type: "bigint", nullable: false),
                    projectid = table.Column<Guid>(name: "project_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("project_task_type_rel_pkey", x => new { x.typeid, x.projectid });
                    table.ForeignKey(
                        name: "project_task_type_rel_project_id_fkey",
                        column: x => x.projectid,
                        principalTable: "project_project",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "project_task_type_rel_type_id_fkey",
                        column: x => x.typeid,
                        principalTable: "project_task_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "project_task_type_delete_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("project_task_type_delete_wizard_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "project_task_type_project_task_type_delete_wizard_rel",
                columns: table => new
                {
                    projecttasktypedeletewizardid = table.Column<Guid>(name: "project_task_type_delete_wizard_id", type: "uuid", nullable: false),
                    projecttasktypeid = table.Column<long>(name: "project_task_type_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("project_task_type_project_task_type_delete_wizard_rel_pkey", x => new { x.projecttasktypedeletewizardid, x.projecttasktypeid });
                    table.ForeignKey(
                        name: "project_task_type_project_tas_project_task_type_delete_wiz_fkey",
                        column: x => x.projecttasktypedeletewizardid,
                        principalTable: "project_task_type_delete_wizard",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "project_task_type_project_task_type_d_project_task_type_id_fkey",
                        column: x => x.projecttasktypeid,
                        principalTable: "project_task_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "project_task_user_rel",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    taskid = table.Column<Guid>(name: "task_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    stageid = table.Column<long>(name: "stage_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("project_task_user_rel_pkey", x => x.id);
                    table.ForeignKey(
                        name: "project_task_user_rel_stage_id_fkey",
                        column: x => x.stageid,
                        principalTable: "project_task_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "project_task_user_rel_task_id_fkey",
                        column: x => x.taskid,
                        principalTable: "project_task",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "project_update",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    progress = table.Column<long>(type: "bigint", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    projectid = table.Column<Guid>(name: "project_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    emailcc = table.Column<string>(name: "email_cc", type: "text", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    status = table.Column<string>(type: "text", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("project_update_pkey", x => x.id);
                    table.ForeignKey(
                        name: "project_update_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "project_update_project_id_fkey",
                        column: x => x.projectid,
                        principalTable: "project_project",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "purchase_order",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    destaddressid = table.Column<Guid>(name: "dest_address_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    invoicecount = table.Column<long>(name: "invoice_count", type: "bigint", nullable: true),
                    fiscalpositionid = table.Column<Guid>(name: "fiscal_position_id", type: "uuid", nullable: true),
                    paymenttermid = table.Column<Guid>(name: "payment_term_id", type: "uuid", nullable: true),
                    incotermid = table.Column<Guid>(name: "incoterm_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    accesstoken = table.Column<string>(name: "access_token", type: "text", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    priority = table.Column<string>(type: "text", nullable: true),
                    origin = table.Column<string>(type: "text", nullable: true),
                    partnerref = table.Column<string>(name: "partner_ref", type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    invoicestatus = table.Column<string>(name: "invoice_status", type: "text", nullable: true),
                    notes = table.Column<string>(type: "text", nullable: true),
                    amountuntaxed = table.Column<decimal>(name: "amount_untaxed", type: "numeric", nullable: true),
                    amounttax = table.Column<decimal>(name: "amount_tax", type: "numeric", nullable: true),
                    amounttotal = table.Column<decimal>(name: "amount_total", type: "numeric", nullable: true),
                    mailreminderconfirmed = table.Column<bool>(name: "mail_reminder_confirmed", type: "boolean", nullable: true),
                    mailreceptionconfirmed = table.Column<bool>(name: "mail_reception_confirmed", type: "boolean", nullable: true),
                    dateorder = table.Column<DateTime>(name: "date_order", type: "timestamp without time zone", nullable: true),
                    dateapprove = table.Column<DateTime>(name: "date_approve", type: "timestamp without time zone", nullable: true),
                    dateplanned = table.Column<DateTime>(name: "date_planned", type: "timestamp without time zone", nullable: true),
                    datecalendarstart = table.Column<DateTime>(name: "date_calendar_start", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    currencyrate = table.Column<double>(name: "currency_rate", type: "double precision", nullable: true),
                    pickingtypeid = table.Column<Guid>(name: "picking_type_id", type: "uuid", nullable: true),
                    groupid = table.Column<Guid>(name: "group_id", type: "uuid", nullable: true),
                    incotermlocation = table.Column<string>(name: "incoterm_location", type: "text", nullable: true),
                    receiptstatus = table.Column<string>(name: "receipt_status", type: "text", nullable: true),
                    effectivedate = table.Column<DateTime>(name: "effective_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("purchase_order_pkey", x => x.id);
                    table.ForeignKey(
                        name: "purchase_order_fiscal_position_id_fkey",
                        column: x => x.fiscalpositionid,
                        principalTable: "account_fiscal_position",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "purchase_order_group_id_fkey",
                        column: x => x.groupid,
                        principalTable: "procurement_group",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "purchase_order_incoterm_id_fkey",
                        column: x => x.incotermid,
                        principalTable: "account_incoterms",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "purchase_order_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "purchase_order_payment_term_id_fkey",
                        column: x => x.paymenttermid,
                        principalTable: "account_payment_term",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "purchase_order_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    productuom = table.Column<Guid>(name: "product_uom", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    orderid = table.Column<Guid>(name: "order_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    productpackagingid = table.Column<Guid>(name: "product_packaging_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    qtyreceivedmethod = table.Column<string>(name: "qty_received_method", type: "text", nullable: true),
                    displaytype = table.Column<string>(name: "display_type", type: "text", nullable: true),
                    analyticdistribution = table.Column<string>(name: "analytic_distribution", type: "jsonb", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    productqty = table.Column<decimal>(name: "product_qty", type: "numeric", nullable: true),
                    priceunit = table.Column<decimal>(name: "price_unit", type: "numeric", nullable: true),
                    pricesubtotal = table.Column<decimal>(name: "price_subtotal", type: "numeric", nullable: true),
                    pricetotal = table.Column<decimal>(name: "price_total", type: "numeric", nullable: true),
                    qtyinvoiced = table.Column<decimal>(name: "qty_invoiced", type: "numeric", nullable: true),
                    qtyreceived = table.Column<decimal>(name: "qty_received", type: "numeric", nullable: true),
                    qtyreceivedmanual = table.Column<decimal>(name: "qty_received_manual", type: "numeric", nullable: true),
                    qtytoinvoice = table.Column<decimal>(name: "qty_to_invoice", type: "numeric", nullable: true),
                    dateplanned = table.Column<DateTime>(name: "date_planned", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    productuomqty = table.Column<double>(name: "product_uom_qty", type: "double precision", nullable: true),
                    pricetax = table.Column<double>(name: "price_tax", type: "double precision", nullable: true),
                    productpackagingqty = table.Column<double>(name: "product_packaging_qty", type: "double precision", nullable: true),
                    orderpointid = table.Column<Guid>(name: "orderpoint_id", type: "uuid", nullable: true),
                    productdescriptionvariants = table.Column<string>(name: "product_description_variants", type: "text", nullable: true),
                    propagatecancel = table.Column<bool>(name: "propagate_cancel", type: "boolean", nullable: true),
                    saleorderid = table.Column<Guid>(name: "sale_order_id", type: "uuid", nullable: true),
                    salelineid = table.Column<Guid>(name: "sale_line_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("purchase_order_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "purchase_order_line_order_id_fkey",
                        column: x => x.orderid,
                        principalTable: "purchase_order",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "purchase_order_line_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "purchase_order_line_product_packaging_id_fkey",
                        column: x => x.productpackagingid,
                        principalTable: "product_packaging",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "purchase_order_stock_picking_rel",
                columns: table => new
                {
                    purchaseorderid = table.Column<Guid>(name: "purchase_order_id", type: "uuid", nullable: false),
                    stockpickingid = table.Column<Guid>(name: "stock_picking_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("purchase_order_stock_picking_rel_pkey", x => new { x.purchaseorderid, x.stockpickingid });
                    table.ForeignKey(
                        name: "purchase_order_stock_picking_rel_purchase_order_id_fkey",
                        column: x => x.purchaseorderid,
                        principalTable: "purchase_order",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "rating_rating",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    resmodelid = table.Column<Guid>(name: "res_model_id", type: "uuid", nullable: true),
                    resid = table.Column<Guid>(name: "res_id", type: "uuid", nullable: true),
                    parentresmodelid = table.Column<Guid>(name: "parent_res_model_id", type: "uuid", nullable: true),
                    parentresid = table.Column<Guid>(name: "parent_res_id", type: "uuid", nullable: true),
                    ratedpartnerid = table.Column<Guid>(name: "rated_partner_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    messageid = table.Column<Guid>(name: "message_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    resname = table.Column<string>(name: "res_name", type: "text", nullable: true),
                    resmodel = table.Column<string>(name: "res_model", type: "text", nullable: true),
                    parentresname = table.Column<string>(name: "parent_res_name", type: "text", nullable: true),
                    parentresmodel = table.Column<string>(name: "parent_res_model", type: "text", nullable: true),
                    ratingtext = table.Column<string>(name: "rating_text", type: "text", nullable: true),
                    accesstoken = table.Column<string>(name: "access_token", type: "text", nullable: true),
                    feedback = table.Column<string>(type: "text", nullable: true),
                    isinternal = table.Column<bool>(name: "is_internal", type: "boolean", nullable: true),
                    consumed = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    rating = table.Column<double>(type: "double precision", nullable: true),
                    publisherid = table.Column<Guid>(name: "publisher_id", type: "uuid", nullable: true),
                    publishercomment = table.Column<string>(name: "publisher_comment", type: "text", nullable: true),
                    publisherdatetime = table.Column<DateTime>(name: "publisher_datetime", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("rating_rating_pkey", x => x.id);
                    table.ForeignKey(
                        name: "rating_rating_message_id_fkey",
                        column: x => x.messageid,
                        principalTable: "mail_message",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "rating_rating_parent_res_model_id_fkey",
                        column: x => x.parentresmodelid,
                        principalTable: "ir_model",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "rating_rating_res_model_id_fkey",
                        column: x => x.resmodelid,
                        principalTable: "ir_model",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "recurring_payment",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    templateid = table.Column<Guid>(name: "template_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    paymenttype = table.Column<string>(name: "payment_type", type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    datebegin = table.Column<DateTime>(name: "date_begin", type: "timestamp without time zone", nullable: true),
                    dateend = table.Column<DateTime>(name: "date_end", type: "timestamp without time zone", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    amount = table.Column<decimal>(type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("recurring_payment_pkey", x => x.id);
                    table.ForeignKey(
                        name: "recurring_payment_template_id_fkey",
                        column: x => x.templateid,
                        principalTable: "account_recurring_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "recurring_payment_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    recurringpaymentid = table.Column<Guid>(name: "recurring_payment_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    journalid = table.Column<Guid>(name: "journal_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    paymentid = table.Column<Guid>(name: "payment_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    amount = table.Column<decimal>(type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("recurring_payment_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "recurring_payment_line_journal_id_fkey",
                        column: x => x.journalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "recurring_payment_line_payment_id_fkey",
                        column: x => x.paymentid,
                        principalTable: "account_payment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "recurring_payment_line_recurring_payment_id_fkey",
                        column: x => x.recurringpaymentid,
                        principalTable: "recurring_payment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "repair_fee",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    repairid = table.Column<Guid>(name: "repair_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    productuom = table.Column<Guid>(name: "product_uom", type: "uuid", nullable: true),
                    invoicelineid = table.Column<Guid>(name: "invoice_line_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    productuomqty = table.Column<decimal>(name: "product_uom_qty", type: "numeric", nullable: true),
                    priceunit = table.Column<decimal>(name: "price_unit", type: "numeric", nullable: true),
                    pricesubtotal = table.Column<decimal>(name: "price_subtotal", type: "numeric", nullable: true),
                    pricetotal = table.Column<decimal>(name: "price_total", type: "numeric", nullable: true),
                    invoiced = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("repair_fee_pkey", x => x.id);
                    table.ForeignKey(
                        name: "repair_fee_invoice_line_id_fkey",
                        column: x => x.invoicelineid,
                        principalTable: "account_move_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "repair_fee_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "repair_fee_line_tax",
                columns: table => new
                {
                    repairfeelineid = table.Column<Guid>(name: "repair_fee_line_id", type: "uuid", nullable: false),
                    taxid = table.Column<Guid>(name: "tax_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("repair_fee_line_tax_pkey", x => new { x.repairfeelineid, x.taxid });
                    table.ForeignKey(
                        name: "repair_fee_line_tax_repair_fee_line_id_fkey",
                        column: x => x.repairfeelineid,
                        principalTable: "repair_fee",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "repair_fee_line_tax_tax_id_fkey",
                        column: x => x.taxid,
                        principalTable: "account_tax",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "repair_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    repairid = table.Column<Guid>(name: "repair_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    productuom = table.Column<Guid>(name: "product_uom", type: "uuid", nullable: true),
                    invoicelineid = table.Column<Guid>(name: "invoice_line_id", type: "uuid", nullable: true),
                    locationid = table.Column<Guid>(name: "location_id", type: "uuid", nullable: true),
                    locationdestid = table.Column<Guid>(name: "location_dest_id", type: "uuid", nullable: true),
                    moveid = table.Column<Guid>(name: "move_id", type: "uuid", nullable: true),
                    lotid = table.Column<Guid>(name: "lot_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    type = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    priceunit = table.Column<decimal>(name: "price_unit", type: "numeric", nullable: true),
                    pricesubtotal = table.Column<decimal>(name: "price_subtotal", type: "numeric", nullable: true),
                    pricetotal = table.Column<decimal>(name: "price_total", type: "numeric", nullable: true),
                    productuomqty = table.Column<decimal>(name: "product_uom_qty", type: "numeric", nullable: true),
                    invoiced = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("repair_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "repair_line_invoice_line_id_fkey",
                        column: x => x.invoicelineid,
                        principalTable: "account_move_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "repair_line_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "repair_operation_line_tax",
                columns: table => new
                {
                    repairoperationlineid = table.Column<Guid>(name: "repair_operation_line_id", type: "uuid", nullable: false),
                    taxid = table.Column<Guid>(name: "tax_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("repair_operation_line_tax_pkey", x => new { x.repairoperationlineid, x.taxid });
                    table.ForeignKey(
                        name: "repair_operation_line_tax_repair_operation_line_id_fkey",
                        column: x => x.repairoperationlineid,
                        principalTable: "repair_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "repair_operation_line_tax_tax_id_fkey",
                        column: x => x.taxid,
                        principalTable: "account_tax",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "repair_order",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    productuom = table.Column<Guid>(name: "product_uom", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    addressid = table.Column<Guid>(name: "address_id", type: "uuid", nullable: true),
                    locationid = table.Column<Guid>(name: "location_id", type: "uuid", nullable: true),
                    lotid = table.Column<Guid>(name: "lot_id", type: "uuid", nullable: true),
                    pricelistid = table.Column<Guid>(name: "pricelist_id", type: "uuid", nullable: true),
                    partnerinvoiceid = table.Column<Guid>(name: "partner_invoice_id", type: "uuid", nullable: true),
                    invoiceid = table.Column<Guid>(name: "invoice_id", type: "uuid", nullable: true),
                    moveid = table.Column<Guid>(name: "move_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    saleorderid = table.Column<Guid>(name: "sale_order_id", type: "uuid", nullable: true),
                    pickingid = table.Column<Guid>(name: "picking_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    invoicemethod = table.Column<string>(name: "invoice_method", type: "text", nullable: true),
                    priority = table.Column<string>(type: "text", nullable: true),
                    scheduledate = table.Column<DateTime>(name: "schedule_date", type: "timestamp without time zone", nullable: true),
                    guaranteelimit = table.Column<DateTime>(name: "guarantee_limit", type: "timestamp without time zone", nullable: true),
                    internalnotes = table.Column<string>(name: "internal_notes", type: "text", nullable: true),
                    quotationnotes = table.Column<string>(name: "quotation_notes", type: "text", nullable: true),
                    productqty = table.Column<decimal>(name: "product_qty", type: "numeric", nullable: true),
                    invoiced = table.Column<bool>(type: "boolean", nullable: true),
                    repaired = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    amountuntaxed = table.Column<double>(name: "amount_untaxed", type: "double precision", nullable: true),
                    amounttax = table.Column<double>(name: "amount_tax", type: "double precision", nullable: true),
                    amounttotal = table.Column<double>(name: "amount_total", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("repair_order_pkey", x => x.id);
                    table.ForeignKey(
                        name: "repair_order_invoice_id_fkey",
                        column: x => x.invoiceid,
                        principalTable: "account_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "repair_order_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "repair_order_pricelist_id_fkey",
                        column: x => x.pricelistid,
                        principalTable: "product_pricelist",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "repair_order_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "repair_order_make_invoice",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    group = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("repair_order_make_invoice_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "repair_order_repair_tags_rel",
                columns: table => new
                {
                    repairorderid = table.Column<Guid>(name: "repair_order_id", type: "uuid", nullable: false),
                    repairtagsid = table.Column<long>(name: "repair_tags_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("repair_order_repair_tags_rel_pkey", x => new { x.repairorderid, x.repairtagsid });
                    table.ForeignKey(
                        name: "repair_order_repair_tags_rel_repair_order_id_fkey",
                        column: x => x.repairorderid,
                        principalTable: "repair_order",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "repair_tags",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("repair_tags_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "report_layout",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    viewid = table.Column<Guid>(name: "view_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    image = table.Column<string>(type: "text", nullable: true),
                    pdf = table.Column<string>(type: "text", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("report_layout_pkey", x => x.id);
                    table.ForeignKey(
                        name: "report_layout_view_id_fkey",
                        column: x => x.viewid,
                        principalTable: "ir_ui_view",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "report_paperformat",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    pageheight = table.Column<long>(name: "page_height", type: "bigint", nullable: true),
                    pagewidth = table.Column<long>(name: "page_width", type: "bigint", nullable: true),
                    headerspacing = table.Column<long>(name: "header_spacing", type: "bigint", nullable: true),
                    dpi = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    format = table.Column<string>(type: "text", nullable: true),
                    orientation = table.Column<string>(type: "text", nullable: true),
                    @default = table.Column<bool>(name: "default", type: "boolean", nullable: true),
                    headerline = table.Column<bool>(name: "header_line", type: "boolean", nullable: true),
                    disableshrinking = table.Column<bool>(name: "disable_shrinking", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    margintop = table.Column<double>(name: "margin_top", type: "double precision", nullable: true),
                    marginbottom = table.Column<double>(name: "margin_bottom", type: "double precision", nullable: true),
                    marginleft = table.Column<double>(name: "margin_left", type: "double precision", nullable: true),
                    marginright = table.Column<double>(name: "margin_right", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("report_paperformat_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "res_bank",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false),
                    state = table.Column<long>(type: "bigint", nullable: true),
                    country = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    street = table.Column<string>(type: "text", nullable: true),
                    street2 = table.Column<string>(type: "text", nullable: true),
                    zip = table.Column<string>(type: "text", nullable: true),
                    city = table.Column<string>(type: "text", nullable: true),
                    email = table.Column<string>(type: "text", nullable: true),
                    phone = table.Column<string>(type: "text", nullable: true),
                    bic = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_bank_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "res_company",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    name = table.Column<string>(type: "text", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    parentid = table.Column<Guid>(name: "parent_id", type: "uuid", nullable: true),
                    paperformatid = table.Column<long>(name: "paperformat_id", type: "bigint", nullable: true),
                    externalreportlayoutid = table.Column<Guid>(name: "external_report_layout_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    email = table.Column<string>(type: "text", nullable: true),
                    phone = table.Column<string>(type: "text", nullable: true),
                    mobile = table.Column<string>(type: "text", nullable: true),
                    baseonboardingcompanystate = table.Column<string>(name: "base_onboarding_company_state", type: "text", nullable: true),
                    font = table.Column<string>(type: "text", nullable: true),
                    primarycolor = table.Column<string>(name: "primary_color", type: "text", nullable: true),
                    secondarycolor = table.Column<string>(name: "secondary_color", type: "text", nullable: true),
                    layoutbackground = table.Column<string>(name: "layout_background", type: "text", nullable: true),
                    reportfooter = table.Column<string>(name: "report_footer", type: "jsonb", nullable: true),
                    reportheader = table.Column<string>(name: "report_header", type: "text", nullable: true),
                    companydetails = table.Column<string>(name: "company_details", type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    logoweb = table.Column<byte[]>(name: "logo_web", type: "bytea", nullable: true),
                    resourcecalendarid = table.Column<Guid>(name: "resource_calendar_id", type: "uuid", nullable: true),
                    partnergid = table.Column<Guid>(name: "partner_gid", type: "uuid", nullable: true),
                    iapenrichautodone = table.Column<bool>(name: "iap_enrich_auto_done", type: "boolean", nullable: true),
                    snailmailcolor = table.Column<bool>(name: "snailmail_color", type: "boolean", nullable: true),
                    snailmailcover = table.Column<bool>(name: "snailmail_cover", type: "boolean", nullable: true),
                    snailmailduplex = table.Column<bool>(name: "snailmail_duplex", type: "boolean", nullable: true),
                    paymentprovideronboardingstate = table.Column<string>(name: "payment_provider_onboarding_state", type: "text", nullable: true),
                    paymentonboardingpaymentmethod = table.Column<string>(name: "payment_onboarding_payment_method", type: "text", nullable: true),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    fiscalyearlastday = table.Column<long>(name: "fiscalyear_last_day", type: "bigint", nullable: true),
                    transferaccountid = table.Column<Guid>(name: "transfer_account_id", type: "uuid", nullable: true),
                    charttemplateid = table.Column<Guid>(name: "chart_template_id", type: "uuid", nullable: true),
                    defaultcashdifferenceincomeaccountid = table.Column<Guid>(name: "default_cash_difference_income_account_id", type: "uuid", nullable: true),
                    defaultcashdifferenceexpenseaccountid = table.Column<Guid>(name: "default_cash_difference_expense_account_id", type: "uuid", nullable: true),
                    accountjournalsuspenseaccountid = table.Column<Guid>(name: "account_journal_suspense_account_id", type: "uuid", nullable: true),
                    accountjournalpaymentdebitaccountid = table.Column<Guid>(name: "account_journal_payment_debit_account_id", type: "uuid", nullable: true),
                    accountjournalpaymentcreditaccountid = table.Column<Guid>(name: "account_journal_payment_credit_account_id", type: "uuid", nullable: true),
                    accountjournalearlypaydiscountgainaccountid = table.Column<Guid>(name: "account_journal_early_pay_discount_gain_account_id", type: "uuid", nullable: true),
                    accountjournalearlypaydiscountlossaccountid = table.Column<Guid>(name: "account_journal_early_pay_discount_loss_account_id", type: "uuid", nullable: true),
                    accountsaletaxid = table.Column<Guid>(name: "account_sale_tax_id", type: "uuid", nullable: true),
                    accountpurchasetaxid = table.Column<Guid>(name: "account_purchase_tax_id", type: "uuid", nullable: true),
                    currencyexchangejournalid = table.Column<Guid>(name: "currency_exchange_journal_id", type: "uuid", nullable: true),
                    incomecurrencyexchangeaccountid = table.Column<Guid>(name: "income_currency_exchange_account_id", type: "uuid", nullable: true),
                    expensecurrencyexchangeaccountid = table.Column<Guid>(name: "expense_currency_exchange_account_id", type: "uuid", nullable: true),
                    propertystockaccountinputcategid = table.Column<Guid>(name: "property_stock_account_input_categ_id", type: "uuid", nullable: true),
                    propertystockaccountoutputcategid = table.Column<Guid>(name: "property_stock_account_output_categ_id", type: "uuid", nullable: true),
                    propertystockvaluationaccountid = table.Column<Guid>(name: "property_stock_valuation_account_id", type: "uuid", nullable: true),
                    incotermid = table.Column<Guid>(name: "incoterm_id", type: "uuid", nullable: true),
                    accountopeningmoveid = table.Column<Guid>(name: "account_opening_move_id", type: "uuid", nullable: true),
                    accountdefaultposreceivableaccountid = table.Column<Guid>(name: "account_default_pos_receivable_account_id", type: "uuid", nullable: true),
                    expenseaccrualaccountid = table.Column<Guid>(name: "expense_accrual_account_id", type: "uuid", nullable: true),
                    revenueaccrualaccountid = table.Column<Guid>(name: "revenue_accrual_account_id", type: "uuid", nullable: true),
                    automaticentrydefaultjournalid = table.Column<Guid>(name: "automatic_entry_default_journal_id", type: "uuid", nullable: true),
                    accountfiscalcountryid = table.Column<long>(name: "account_fiscal_country_id", type: "bigint", nullable: true),
                    taxcashbasisjournalid = table.Column<Guid>(name: "tax_cash_basis_journal_id", type: "uuid", nullable: true),
                    accountcashbasisbaseaccountid = table.Column<Guid>(name: "account_cash_basis_base_account_id", type: "uuid", nullable: true),
                    fiscalyearlastmonth = table.Column<string>(name: "fiscalyear_last_month", type: "text", nullable: true),
                    bankaccountcodeprefix = table.Column<string>(name: "bank_account_code_prefix", type: "text", nullable: true),
                    cashaccountcodeprefix = table.Column<string>(name: "cash_account_code_prefix", type: "text", nullable: true),
                    earlypaydiscountcomputation = table.Column<string>(name: "early_pay_discount_computation", type: "text", nullable: true),
                    transferaccountcodeprefix = table.Column<string>(name: "transfer_account_code_prefix", type: "text", nullable: true),
                    taxcalculationroundingmethod = table.Column<string>(name: "tax_calculation_rounding_method", type: "text", nullable: true),
                    accountsetupbankdatastate = table.Column<string>(name: "account_setup_bank_data_state", type: "text", nullable: true),
                    accountsetupfydatastate = table.Column<string>(name: "account_setup_fy_data_state", type: "text", nullable: true),
                    accountsetupcoastate = table.Column<string>(name: "account_setup_coa_state", type: "text", nullable: true),
                    accountsetuptaxesstate = table.Column<string>(name: "account_setup_taxes_state", type: "text", nullable: true),
                    accountonboardinginvoicelayoutstate = table.Column<string>(name: "account_onboarding_invoice_layout_state", type: "text", nullable: true),
                    accountonboardingsaletaxstate = table.Column<string>(name: "account_onboarding_sale_tax_state", type: "text", nullable: true),
                    accountinvoiceonboardingstate = table.Column<string>(name: "account_invoice_onboarding_state", type: "text", nullable: true),
                    accountdashboardonboardingstate = table.Column<string>(name: "account_dashboard_onboarding_state", type: "text", nullable: true),
                    termstype = table.Column<string>(name: "terms_type", type: "text", nullable: true),
                    accountsetupbillstate = table.Column<string>(name: "account_setup_bill_state", type: "text", nullable: true),
                    quickeditmode = table.Column<string>(name: "quick_edit_mode", type: "text", nullable: true),
                    periodlockdate = table.Column<DateTime>(name: "period_lock_date", type: "timestamp without time zone", nullable: true),
                    fiscalyearlockdate = table.Column<DateTime>(name: "fiscalyear_lock_date", type: "timestamp without time zone", nullable: true),
                    taxlockdate = table.Column<DateTime>(name: "tax_lock_date", type: "timestamp without time zone", nullable: true),
                    accountopeningdate = table.Column<DateTime>(name: "account_opening_date", type: "timestamp without time zone", nullable: true),
                    invoiceterms = table.Column<string>(name: "invoice_terms", type: "jsonb", nullable: true),
                    invoicetermshtml = table.Column<string>(name: "invoice_terms_html", type: "jsonb", nullable: true),
                    expectschartofaccounts = table.Column<bool>(name: "expects_chart_of_accounts", type: "boolean", nullable: true),
                    anglosaxonaccounting = table.Column<bool>(name: "anglo_saxon_accounting", type: "boolean", nullable: true),
                    qrcode = table.Column<bool>(name: "qr_code", type: "boolean", nullable: true),
                    invoiceisemail = table.Column<bool>(name: "invoice_is_email", type: "boolean", nullable: true),
                    invoiceisprint = table.Column<bool>(name: "invoice_is_print", type: "boolean", nullable: true),
                    accountusecreditlimit = table.Column<bool>(name: "account_use_credit_limit", type: "boolean", nullable: true),
                    accountonboardingcreateinvoicestateflag = table.Column<bool>(name: "account_onboarding_create_invoice_state_flag", type: "boolean", nullable: true),
                    taxexigibility = table.Column<bool>(name: "tax_exigibility", type: "boolean", nullable: true),
                    accountstorno = table.Column<bool>(name: "account_storno", type: "boolean", nullable: true),
                    invoiceissnailmail = table.Column<bool>(name: "invoice_is_snailmail", type: "boolean", nullable: true),
                    quotationvaliditydays = table.Column<long>(name: "quotation_validity_days", type: "bigint", nullable: true),
                    salequotationonboardingstate = table.Column<string>(name: "sale_quotation_onboarding_state", type: "text", nullable: true),
                    saleonboardingorderconfirmationstate = table.Column<string>(name: "sale_onboarding_order_confirmation_state", type: "text", nullable: true),
                    saleonboardingsamplequotationstate = table.Column<string>(name: "sale_onboarding_sample_quotation_state", type: "text", nullable: true),
                    saleonboardingpaymentmethod = table.Column<string>(name: "sale_onboarding_payment_method", type: "text", nullable: true),
                    portalconfirmationsign = table.Column<bool>(name: "portal_confirmation_sign", type: "boolean", nullable: true),
                    portalconfirmationpay = table.Column<bool>(name: "portal_confirmation_pay", type: "boolean", nullable: true),
                    saleordertemplateid = table.Column<Guid>(name: "sale_order_template_id", type: "uuid", nullable: true),
                    vatcheckvies = table.Column<bool>(name: "vat_check_vies", type: "boolean", nullable: true),
                    nomenclatureid = table.Column<long>(name: "nomenclature_id", type: "bigint", nullable: true),
                    internaltransitlocationid = table.Column<Guid>(name: "internal_transit_location_id", type: "uuid", nullable: true),
                    stockmailconfirmationtemplateid = table.Column<Guid>(name: "stock_mail_confirmation_template_id", type: "uuid", nullable: true),
                    annualinventoryday = table.Column<long>(name: "annual_inventory_day", type: "bigint", nullable: true),
                    annualinventorymonth = table.Column<string>(name: "annual_inventory_month", type: "text", nullable: true),
                    stockmoveemailvalidation = table.Column<bool>(name: "stock_move_email_validation", type: "boolean", nullable: true),
                    stocksmsconfirmationtemplateid = table.Column<Guid>(name: "stock_sms_confirmation_template_id", type: "uuid", nullable: true),
                    stockmovesmsvalidation = table.Column<bool>(name: "stock_move_sms_validation", type: "boolean", nullable: true),
                    hasreceivedwarningstocksms = table.Column<bool>(name: "has_received_warning_stock_sms", type: "boolean", nullable: true),
                    pointofsaleupdatestockquantities = table.Column<string>(name: "point_of_sale_update_stock_quantities", type: "text", nullable: true),
                    pointofsaleuseticketqrcode = table.Column<bool>(name: "point_of_sale_use_ticket_qr_code", type: "boolean", nullable: true),
                    securitylead = table.Column<double>(name: "security_lead", type: "double precision", nullable: true),
                    polock = table.Column<string>(name: "po_lock", type: "text", nullable: true),
                    podoublevalidation = table.Column<string>(name: "po_double_validation", type: "text", nullable: true),
                    podoublevalidationamount = table.Column<decimal>(name: "po_double_validation_amount", type: "numeric", nullable: true),
                    polead = table.Column<double>(name: "po_lead", type: "double precision", nullable: true),
                    daystopurchase = table.Column<double>(name: "days_to_purchase", type: "double precision", nullable: true),
                    manufacturinglead = table.Column<double>(name: "manufacturing_lead", type: "double precision", nullable: true),
                    hrpresencecontrolemailamount = table.Column<long>(name: "hr_presence_control_email_amount", type: "bigint", nullable: true),
                    hrpresencecontroliplist = table.Column<string>(name: "hr_presence_control_ip_list", type: "text", nullable: true),
                    expensejournalid = table.Column<Guid>(name: "expense_journal_id", type: "uuid", nullable: true),
                    companyexpensejournalid = table.Column<Guid>(name: "company_expense_journal_id", type: "uuid", nullable: true),
                    overtimecompanythreshold = table.Column<long>(name: "overtime_company_threshold", type: "bigint", nullable: true),
                    overtimeemployeethreshold = table.Column<long>(name: "overtime_employee_threshold", type: "bigint", nullable: true),
                    attendancekioskdelay = table.Column<long>(name: "attendance_kiosk_delay", type: "bigint", nullable: true),
                    attendancekioskmode = table.Column<string>(name: "attendance_kiosk_mode", type: "text", nullable: true),
                    attendancebarcodesource = table.Column<string>(name: "attendance_barcode_source", type: "text", nullable: true),
                    overtimestartdate = table.Column<DateTime>(name: "overtime_start_date", type: "timestamp without time zone", nullable: true),
                    hrattendanceovertime = table.Column<bool>(name: "hr_attendance_overtime", type: "boolean", nullable: true),
                    socialtwitter = table.Column<string>(name: "social_twitter", type: "text", nullable: true),
                    socialfacebook = table.Column<string>(name: "social_facebook", type: "text", nullable: true),
                    socialgithub = table.Column<string>(name: "social_github", type: "text", nullable: true),
                    sociallinkedin = table.Column<string>(name: "social_linkedin", type: "text", nullable: true),
                    socialyoutube = table.Column<string>(name: "social_youtube", type: "text", nullable: true),
                    socialinstagram = table.Column<string>(name: "social_instagram", type: "text", nullable: true),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: true),
                    websitesaleonboardingpaymentproviderstate = table.Column<string>(name: "website_sale_onboarding_payment_provider_state", type: "text", nullable: true),
                    lunchnotifymessage = table.Column<string>(name: "lunch_notify_message", type: "jsonb", nullable: true),
                    lunchminimumthreshold = table.Column<double>(name: "lunch_minimum_threshold", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_company_pkey", x => x.id);
                    table.ForeignKey(
                        name: "res_company_account_cash_basis_base_account_id_fkey",
                        column: x => x.accountcashbasisbaseaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_account_default_pos_receivable_account_id_fkey",
                        column: x => x.accountdefaultposreceivableaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_account_journal_early_pay_discount_gain_accoun_fkey",
                        column: x => x.accountjournalearlypaydiscountgainaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_account_journal_early_pay_discount_loss_accoun_fkey",
                        column: x => x.accountjournalearlypaydiscountlossaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_account_journal_payment_credit_account_id_fkey",
                        column: x => x.accountjournalpaymentcreditaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_account_journal_payment_debit_account_id_fkey",
                        column: x => x.accountjournalpaymentdebitaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_account_journal_suspense_account_id_fkey",
                        column: x => x.accountjournalsuspenseaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_account_opening_move_id_fkey",
                        column: x => x.accountopeningmoveid,
                        principalTable: "account_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_account_purchase_tax_id_fkey",
                        column: x => x.accountpurchasetaxid,
                        principalTable: "account_tax",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_account_sale_tax_id_fkey",
                        column: x => x.accountsaletaxid,
                        principalTable: "account_tax",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_automatic_entry_default_journal_id_fkey",
                        column: x => x.automaticentrydefaultjournalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_chart_template_id_fkey",
                        column: x => x.charttemplateid,
                        principalTable: "account_chart_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_company_expense_journal_id_fkey",
                        column: x => x.companyexpensejournalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_currency_exchange_journal_id_fkey",
                        column: x => x.currencyexchangejournalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_default_cash_difference_expense_account_id_fkey",
                        column: x => x.defaultcashdifferenceexpenseaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_default_cash_difference_income_account_id_fkey",
                        column: x => x.defaultcashdifferenceincomeaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_expense_accrual_account_id_fkey",
                        column: x => x.expenseaccrualaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_expense_currency_exchange_account_id_fkey",
                        column: x => x.expensecurrencyexchangeaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_expense_journal_id_fkey",
                        column: x => x.expensejournalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_external_report_layout_id_fkey",
                        column: x => x.externalreportlayoutid,
                        principalTable: "ir_ui_view",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_income_currency_exchange_account_id_fkey",
                        column: x => x.incomecurrencyexchangeaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_incoterm_id_fkey",
                        column: x => x.incotermid,
                        principalTable: "account_incoterms",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_nomenclature_id_fkey",
                        column: x => x.nomenclatureid,
                        principalTable: "barcode_nomenclature",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_paperformat_id_fkey",
                        column: x => x.paperformatid,
                        principalTable: "report_paperformat",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_property_stock_account_input_categ_id_fkey",
                        column: x => x.propertystockaccountinputcategid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_property_stock_account_output_categ_id_fkey",
                        column: x => x.propertystockaccountoutputcategid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_property_stock_valuation_account_id_fkey",
                        column: x => x.propertystockvaluationaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_revenue_accrual_account_id_fkey",
                        column: x => x.revenueaccrualaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_stock_mail_confirmation_template_id_fkey",
                        column: x => x.stockmailconfirmationtemplateid,
                        principalTable: "mail_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_tax_cash_basis_journal_id_fkey",
                        column: x => x.taxcashbasisjournalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_company_transfer_account_id_fkey",
                        column: x => x.transferaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "res_company_users_rel",
                columns: table => new
                {
                    cid = table.Column<Guid>(type: "uuid", nullable: false),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_company_users_rel_pkey", x => new { x.cid, x.userid });
                    table.ForeignKey(
                        name: "res_company_users_rel_cid_fkey",
                        column: x => x.cid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "res_config",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_config_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "res_config_installer",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_config_installer_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "res_config_settings",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    userdefaultrights = table.Column<bool>(name: "user_default_rights", type: "boolean", nullable: true),
                    externalemailserverdefault = table.Column<bool>(name: "external_email_server_default", type: "boolean", nullable: true),
                    modulebaseimport = table.Column<bool>(name: "module_base_import", type: "boolean", nullable: true),
                    modulegooglecalendar = table.Column<bool>(name: "module_google_calendar", type: "boolean", nullable: true),
                    modulemicrosoftcalendar = table.Column<bool>(name: "module_microsoft_calendar", type: "boolean", nullable: true),
                    modulemailplugin = table.Column<bool>(name: "module_mail_plugin", type: "boolean", nullable: true),
                    moduleauthoauth = table.Column<bool>(name: "module_auth_oauth", type: "boolean", nullable: true),
                    moduleauthldap = table.Column<bool>(name: "module_auth_ldap", type: "boolean", nullable: true),
                    modulebasegengo = table.Column<bool>(name: "module_base_gengo", type: "boolean", nullable: true),
                    moduleaccountintercompanyrules = table.Column<bool>(name: "module_account_inter_company_rules", type: "boolean", nullable: true),
                    modulevoip = table.Column<bool>(name: "module_voip", type: "boolean", nullable: true),
                    modulewebunsplash = table.Column<bool>(name: "module_web_unsplash", type: "boolean", nullable: true),
                    modulepartnerautocomplete = table.Column<bool>(name: "module_partner_autocomplete", type: "boolean", nullable: true),
                    modulebasegeolocalize = table.Column<bool>(name: "module_base_geolocalize", type: "boolean", nullable: true),
                    modulegooglerecaptcha = table.Column<bool>(name: "module_google_recaptcha", type: "boolean", nullable: true),
                    groupmulticurrency = table.Column<bool>(name: "group_multi_currency", type: "boolean", nullable: true),
                    showeffect = table.Column<bool>(name: "show_effect", type: "boolean", nullable: true),
                    moduleproductimages = table.Column<bool>(name: "module_product_images", type: "boolean", nullable: true),
                    profilingenableduntil = table.Column<DateTime>(name: "profiling_enabled_until", type: "timestamp without time zone", nullable: true),
                    aliasdomain = table.Column<string>(name: "alias_domain", type: "text", nullable: true),
                    twilioaccountsid = table.Column<string>(name: "twilio_account_sid", type: "text", nullable: true),
                    twilioaccounttoken = table.Column<string>(name: "twilio_account_token", type: "text", nullable: true),
                    modulegooglegmail = table.Column<bool>(name: "module_google_gmail", type: "boolean", nullable: true),
                    modulemicrosoftoutlook = table.Column<bool>(name: "module_microsoft_outlook", type: "boolean", nullable: true),
                    restricttemplaterendering = table.Column<bool>(name: "restrict_template_rendering", type: "boolean", nullable: true),
                    usetwiliortcservers = table.Column<bool>(name: "use_twilio_rtc_servers", type: "boolean", nullable: true),
                    groupanalyticaccounting = table.Column<bool>(name: "group_analytic_accounting", type: "boolean", nullable: true),
                    authsignuptemplateuserid = table.Column<Guid>(name: "auth_signup_template_user_id", type: "uuid", nullable: true),
                    authsignupuninvited = table.Column<string>(name: "auth_signup_uninvited", type: "text", nullable: true),
                    authsignupresetpassword = table.Column<bool>(name: "auth_signup_reset_password", type: "boolean", nullable: true),
                    googlegmailclientidentifier = table.Column<string>(name: "google_gmail_client_identifier", type: "text", nullable: true),
                    googlegmailclientsecret = table.Column<string>(name: "google_gmail_client_secret", type: "text", nullable: true),
                    productpricelistsetting = table.Column<string>(name: "product_pricelist_setting", type: "text", nullable: true),
                    productweightinlbs = table.Column<string>(name: "product_weight_in_lbs", type: "text", nullable: true),
                    productvolumevolumeincubicfeet = table.Column<string>(name: "product_volume_volume_in_cubic_feet", type: "text", nullable: true),
                    groupdiscountpersoline = table.Column<bool>(name: "group_discount_per_so_line", type: "boolean", nullable: true),
                    groupuom = table.Column<bool>(name: "group_uom", type: "boolean", nullable: true),
                    groupproductvariant = table.Column<bool>(name: "group_product_variant", type: "boolean", nullable: true),
                    modulesaleproductmatrix = table.Column<bool>(name: "module_sale_product_matrix", type: "boolean", nullable: true),
                    moduleloyalty = table.Column<bool>(name: "module_loyalty", type: "boolean", nullable: true),
                    groupstockpackaging = table.Column<bool>(name: "group_stock_packaging", type: "boolean", nullable: true),
                    groupproductpricelist = table.Column<bool>(name: "group_product_pricelist", type: "boolean", nullable: true),
                    groupsalepricelist = table.Column<bool>(name: "group_sale_pricelist", type: "boolean", nullable: true),
                    unsplashaccesskey = table.Column<string>(name: "unsplash_access_key", type: "text", nullable: true),
                    unsplashappid = table.Column<string>(name: "unsplash_app_id", type: "text", nullable: true),
                    digestid = table.Column<Guid>(name: "digest_id", type: "uuid", nullable: true),
                    digestemails = table.Column<bool>(name: "digest_emails", type: "boolean", nullable: true),
                    charttemplateid = table.Column<Guid>(name: "chart_template_id", type: "uuid", nullable: true),
                    showlinesubtotalstaxselection = table.Column<string>(name: "show_line_subtotals_tax_selection", type: "text", nullable: true),
                    moduleaccountaccountant = table.Column<bool>(name: "module_account_accountant", type: "boolean", nullable: true),
                    groupwarningaccount = table.Column<bool>(name: "group_warning_account", type: "boolean", nullable: true),
                    groupcashrounding = table.Column<bool>(name: "group_cash_rounding", type: "boolean", nullable: true),
                    groupshowlinesubtotalstaxexcluded = table.Column<bool>(name: "group_show_line_subtotals_tax_excluded", type: "boolean", nullable: true),
                    groupshowlinesubtotalstaxincluded = table.Column<bool>(name: "group_show_line_subtotals_tax_included", type: "boolean", nullable: true),
                    groupshowsalereceipts = table.Column<bool>(name: "group_show_sale_receipts", type: "boolean", nullable: true),
                    groupshowpurchasereceipts = table.Column<bool>(name: "group_show_purchase_receipts", type: "boolean", nullable: true),
                    moduleaccountbudget = table.Column<bool>(name: "module_account_budget", type: "boolean", nullable: true),
                    moduleaccountpayment = table.Column<bool>(name: "module_account_payment", type: "boolean", nullable: true),
                    moduleaccountreports = table.Column<bool>(name: "module_account_reports", type: "boolean", nullable: true),
                    moduleaccountcheckprinting = table.Column<bool>(name: "module_account_check_printing", type: "boolean", nullable: true),
                    moduleaccountbatchpayment = table.Column<bool>(name: "module_account_batch_payment", type: "boolean", nullable: true),
                    moduleaccountsepa = table.Column<bool>(name: "module_account_sepa", type: "boolean", nullable: true),
                    moduleaccountsepadirectdebit = table.Column<bool>(name: "module_account_sepa_direct_debit", type: "boolean", nullable: true),
                    moduleaccountbankstatementimportqif = table.Column<bool>(name: "module_account_bank_statement_import_qif", type: "boolean", nullable: true),
                    moduleaccountbankstatementimportofx = table.Column<bool>(name: "module_account_bank_statement_import_ofx", type: "boolean", nullable: true),
                    moduleaccountbankstatementimportcsv = table.Column<bool>(name: "module_account_bank_statement_import_csv", type: "boolean", nullable: true),
                    moduleaccountbankstatementimportcamt = table.Column<bool>(name: "module_account_bank_statement_import_camt", type: "boolean", nullable: true),
                    modulecurrencyratelive = table.Column<bool>(name: "module_currency_rate_live", type: "boolean", nullable: true),
                    moduleaccountintrastat = table.Column<bool>(name: "module_account_intrastat", type: "boolean", nullable: true),
                    moduleproductmargin = table.Column<bool>(name: "module_product_margin", type: "boolean", nullable: true),
                    modulel10neuoss = table.Column<bool>(name: "module_l10n_eu_oss", type: "boolean", nullable: true),
                    moduleaccounttaxcloud = table.Column<bool>(name: "module_account_taxcloud", type: "boolean", nullable: true),
                    moduleaccountinvoiceextract = table.Column<bool>(name: "module_account_invoice_extract", type: "boolean", nullable: true),
                    modulesnailmailaccount = table.Column<bool>(name: "module_snailmail_account", type: "boolean", nullable: true),
                    useinvoiceterms = table.Column<bool>(name: "use_invoice_terms", type: "boolean", nullable: true),
                    groupsaledeliveryaddress = table.Column<bool>(name: "group_sale_delivery_address", type: "boolean", nullable: true),
                    depositdefaultproductid = table.Column<Guid>(name: "deposit_default_product_id", type: "uuid", nullable: true),
                    invoicemailtemplateid = table.Column<Guid>(name: "invoice_mail_template_id", type: "uuid", nullable: true),
                    defaultinvoicepolicy = table.Column<string>(name: "default_invoice_policy", type: "text", nullable: true),
                    groupautodonesetting = table.Column<bool>(name: "group_auto_done_setting", type: "boolean", nullable: true),
                    groupproformasales = table.Column<bool>(name: "group_proforma_sales", type: "boolean", nullable: true),
                    groupwarningsale = table.Column<bool>(name: "group_warning_sale", type: "boolean", nullable: true),
                    automaticinvoice = table.Column<bool>(name: "automatic_invoice", type: "boolean", nullable: true),
                    usequotationvaliditydays = table.Column<bool>(name: "use_quotation_validity_days", type: "boolean", nullable: true),
                    moduledelivery = table.Column<bool>(name: "module_delivery", type: "boolean", nullable: true),
                    moduledeliverybpost = table.Column<bool>(name: "module_delivery_bpost", type: "boolean", nullable: true),
                    moduledeliverydhl = table.Column<bool>(name: "module_delivery_dhl", type: "boolean", nullable: true),
                    moduledeliveryeasypost = table.Column<bool>(name: "module_delivery_easypost", type: "boolean", nullable: true),
                    moduledeliverysendcloud = table.Column<bool>(name: "module_delivery_sendcloud", type: "boolean", nullable: true),
                    moduledeliveryfedex = table.Column<bool>(name: "module_delivery_fedex", type: "boolean", nullable: true),
                    moduledeliveryups = table.Column<bool>(name: "module_delivery_ups", type: "boolean", nullable: true),
                    moduledeliveryusps = table.Column<bool>(name: "module_delivery_usps", type: "boolean", nullable: true),
                    moduleproductemailtemplate = table.Column<bool>(name: "module_product_email_template", type: "boolean", nullable: true),
                    modulesaleamazon = table.Column<bool>(name: "module_sale_amazon", type: "boolean", nullable: true),
                    modulesaleloyalty = table.Column<bool>(name: "module_sale_loyalty", type: "boolean", nullable: true),
                    modulesalemargin = table.Column<bool>(name: "module_sale_margin", type: "boolean", nullable: true),
                    groupsaleordertemplate = table.Column<bool>(name: "group_sale_order_template", type: "boolean", nullable: true),
                    modulesalequotationbuilder = table.Column<bool>(name: "module_sale_quotation_builder", type: "boolean", nullable: true),
                    moduleproductexpiry = table.Column<bool>(name: "module_product_expiry", type: "boolean", nullable: true),
                    groupstockproductionlot = table.Column<bool>(name: "group_stock_production_lot", type: "boolean", nullable: true),
                    groupstocklotprintgs1 = table.Column<bool>(name: "group_stock_lot_print_gs1", type: "boolean", nullable: true),
                    grouplotondeliveryslip = table.Column<bool>(name: "group_lot_on_delivery_slip", type: "boolean", nullable: true),
                    groupstocktrackinglot = table.Column<bool>(name: "group_stock_tracking_lot", type: "boolean", nullable: true),
                    groupstocktrackingowner = table.Column<bool>(name: "group_stock_tracking_owner", type: "boolean", nullable: true),
                    groupstockadvlocation = table.Column<bool>(name: "group_stock_adv_location", type: "boolean", nullable: true),
                    groupwarningstock = table.Column<bool>(name: "group_warning_stock", type: "boolean", nullable: true),
                    groupstocksigndelivery = table.Column<bool>(name: "group_stock_sign_delivery", type: "boolean", nullable: true),
                    modulestockpickingbatch = table.Column<bool>(name: "module_stock_picking_batch", type: "boolean", nullable: true),
                    groupstockpickingwave = table.Column<bool>(name: "group_stock_picking_wave", type: "boolean", nullable: true),
                    modulestockbarcode = table.Column<bool>(name: "module_stock_barcode", type: "boolean", nullable: true),
                    modulestocksms = table.Column<bool>(name: "module_stock_sms", type: "boolean", nullable: true),
                    modulequalitycontrol = table.Column<bool>(name: "module_quality_control", type: "boolean", nullable: true),
                    modulequalitycontrolworksheet = table.Column<bool>(name: "module_quality_control_worksheet", type: "boolean", nullable: true),
                    groupstockmultilocations = table.Column<bool>(name: "group_stock_multi_locations", type: "boolean", nullable: true),
                    groupstockstoragecategories = table.Column<bool>(name: "group_stock_storage_categories", type: "boolean", nullable: true),
                    groupstockreceptionreport = table.Column<bool>(name: "group_stock_reception_report", type: "boolean", nullable: true),
                    modulestocklandedcosts = table.Column<bool>(name: "module_stock_landed_costs", type: "boolean", nullable: true),
                    grouplotoninvoice = table.Column<bool>(name: "group_lot_on_invoice", type: "boolean", nullable: true),
                    posconfigid = table.Column<Guid>(name: "pos_config_id", type: "uuid", nullable: true),
                    posdefaultfiscalpositionid = table.Column<Guid>(name: "pos_default_fiscal_position_id", type: "uuid", nullable: true),
                    posifacestartcategid = table.Column<long>(name: "pos_iface_start_categ_id", type: "bigint", nullable: true),
                    pospricelistid = table.Column<Guid>(name: "pos_pricelist_id", type: "uuid", nullable: true),
                    postipproductid = table.Column<Guid>(name: "pos_tip_product_id", type: "uuid", nullable: true),
                    posproxyip = table.Column<string>(name: "pos_proxy_ip", type: "text", nullable: true),
                    posreceiptfooter = table.Column<string>(name: "pos_receipt_footer", type: "text", nullable: true),
                    posreceiptheader = table.Column<string>(name: "pos_receipt_header", type: "text", nullable: true),
                    moduleposmercury = table.Column<bool>(name: "module_pos_mercury", type: "boolean", nullable: true),
                    moduleposadyen = table.Column<bool>(name: "module_pos_adyen", type: "boolean", nullable: true),
                    moduleposstripe = table.Column<bool>(name: "module_pos_stripe", type: "boolean", nullable: true),
                    modulepossix = table.Column<bool>(name: "module_pos_six", type: "boolean", nullable: true),
                    posifacecashdrawer = table.Column<bool>(name: "pos_iface_cashdrawer", type: "boolean", nullable: true),
                    posifacecustomerfacingdisplayviaproxy = table.Column<bool>(name: "pos_iface_customer_facing_display_via_proxy", type: "boolean", nullable: true),
                    posifaceelectronicscale = table.Column<bool>(name: "pos_iface_electronic_scale", type: "boolean", nullable: true),
                    posifaceprintviaproxy = table.Column<bool>(name: "pos_iface_print_via_proxy", type: "boolean", nullable: true),
                    posifacescanviaproxy = table.Column<bool>(name: "pos_iface_scan_via_proxy", type: "boolean", nullable: true),
                    posepsonprinterip = table.Column<string>(name: "pos_epson_printer_ip", type: "text", nullable: true),
                    defaultpickingpolicy = table.Column<string>(name: "default_picking_policy", type: "text", nullable: true),
                    groupdisplayincoterm = table.Column<bool>(name: "group_display_incoterm", type: "boolean", nullable: true),
                    usesecuritylead = table.Column<bool>(name: "use_security_lead", type: "boolean", nullable: true),
                    defaultpurchasemethod = table.Column<string>(name: "default_purchase_method", type: "text", nullable: true),
                    lockconfirmedpo = table.Column<bool>(name: "lock_confirmed_po", type: "boolean", nullable: true),
                    poorderapproval = table.Column<bool>(name: "po_order_approval", type: "boolean", nullable: true),
                    groupwarningpurchase = table.Column<bool>(name: "group_warning_purchase", type: "boolean", nullable: true),
                    moduleaccount3waymatch = table.Column<bool>(name: "module_account_3way_match", type: "boolean", nullable: true),
                    modulepurchaserequisition = table.Column<bool>(name: "module_purchase_requisition", type: "boolean", nullable: true),
                    modulepurchaseproductmatrix = table.Column<bool>(name: "module_purchase_product_matrix", type: "boolean", nullable: true),
                    usepolead = table.Column<bool>(name: "use_po_lead", type: "boolean", nullable: true),
                    groupsendreminder = table.Column<bool>(name: "group_send_reminder", type: "boolean", nullable: true),
                    modulestockdropshipping = table.Column<bool>(name: "module_stock_dropshipping", type: "boolean", nullable: true),
                    isinstalledsale = table.Column<bool>(name: "is_installed_sale", type: "boolean", nullable: true),
                    groupfiscalyear = table.Column<bool>(name: "group_fiscal_year", type: "boolean", nullable: true),
                    usemanufacturinglead = table.Column<bool>(name: "use_manufacturing_lead", type: "boolean", nullable: true),
                    groupmrpbyproducts = table.Column<bool>(name: "group_mrp_byproducts", type: "boolean", nullable: true),
                    modulemrpmps = table.Column<bool>(name: "module_mrp_mps", type: "boolean", nullable: true),
                    modulemrpplm = table.Column<bool>(name: "module_mrp_plm", type: "boolean", nullable: true),
                    modulemrpworkorder = table.Column<bool>(name: "module_mrp_workorder", type: "boolean", nullable: true),
                    modulemrpsubcontracting = table.Column<bool>(name: "module_mrp_subcontracting", type: "boolean", nullable: true),
                    groupmrproutings = table.Column<bool>(name: "group_mrp_routings", type: "boolean", nullable: true),
                    groupunlockedbydefault = table.Column<bool>(name: "group_unlocked_by_default", type: "boolean", nullable: true),
                    groupmrpreceptionreport = table.Column<bool>(name: "group_mrp_reception_report", type: "boolean", nullable: true),
                    groupmrpworkorderdependencies = table.Column<bool>(name: "group_mrp_workorder_dependencies", type: "boolean", nullable: true),
                    crmautoassignmentintervalnumber = table.Column<long>(name: "crm_auto_assignment_interval_number", type: "bigint", nullable: true),
                    crmautoassignmentaction = table.Column<string>(name: "crm_auto_assignment_action", type: "text", nullable: true),
                    crmautoassignmentintervaltype = table.Column<string>(name: "crm_auto_assignment_interval_type", type: "text", nullable: true),
                    leadenrichauto = table.Column<string>(name: "lead_enrich_auto", type: "text", nullable: true),
                    predictiveleadscoringstartdatestr = table.Column<string>(name: "predictive_lead_scoring_start_date_str", type: "text", nullable: true),
                    predictiveleadscoringfieldsstr = table.Column<string>(name: "predictive_lead_scoring_fields_str", type: "text", nullable: true),
                    groupuselead = table.Column<bool>(name: "group_use_lead", type: "boolean", nullable: true),
                    groupuserecurringrevenues = table.Column<bool>(name: "group_use_recurring_revenues", type: "boolean", nullable: true),
                    ismembershipmulti = table.Column<bool>(name: "is_membership_multi", type: "boolean", nullable: true),
                    crmuseautoassignment = table.Column<bool>(name: "crm_use_auto_assignment", type: "boolean", nullable: true),
                    modulecrmiapmine = table.Column<bool>(name: "module_crm_iap_mine", type: "boolean", nullable: true),
                    modulecrmiapenrich = table.Column<bool>(name: "module_crm_iap_enrich", type: "boolean", nullable: true),
                    modulewebsitecrmiapreveal = table.Column<bool>(name: "module_website_crm_iap_reveal", type: "boolean", nullable: true),
                    leadmininginpipeline = table.Column<bool>(name: "lead_mining_in_pipeline", type: "boolean", nullable: true),
                    crmautoassignmentrundatetime = table.Column<DateTime>(name: "crm_auto_assignment_run_datetime", type: "timestamp without time zone", nullable: true),
                    moduleprojectforecast = table.Column<bool>(name: "module_project_forecast", type: "boolean", nullable: true),
                    modulehrtimesheet = table.Column<bool>(name: "module_hr_timesheet", type: "boolean", nullable: true),
                    groupsubtaskproject = table.Column<bool>(name: "group_subtask_project", type: "boolean", nullable: true),
                    groupprojectrating = table.Column<bool>(name: "group_project_rating", type: "boolean", nullable: true),
                    groupprojectstages = table.Column<bool>(name: "group_project_stages", type: "boolean", nullable: true),
                    groupprojectrecurringtasks = table.Column<bool>(name: "group_project_recurring_tasks", type: "boolean", nullable: true),
                    groupprojecttaskdependencies = table.Column<bool>(name: "group_project_task_dependencies", type: "boolean", nullable: true),
                    groupprojectmilestone = table.Column<bool>(name: "group_project_milestone", type: "boolean", nullable: true),
                    modulehrpresence = table.Column<bool>(name: "module_hr_presence", type: "boolean", nullable: true),
                    modulehrskills = table.Column<bool>(name: "module_hr_skills", type: "boolean", nullable: true),
                    modulehrhomeworking = table.Column<bool>(name: "module_hr_homeworking", type: "boolean", nullable: true),
                    hrpresencecontrollogin = table.Column<bool>(name: "hr_presence_control_login", type: "boolean", nullable: true),
                    hrpresencecontrolemail = table.Column<bool>(name: "hr_presence_control_email", type: "boolean", nullable: true),
                    hrpresencecontrolip = table.Column<bool>(name: "hr_presence_control_ip", type: "boolean", nullable: true),
                    modulehrattendance = table.Column<bool>(name: "module_hr_attendance", type: "boolean", nullable: true),
                    hremployeeselfedit = table.Column<bool>(name: "hr_employee_self_edit", type: "boolean", nullable: true),
                    expensealiasprefix = table.Column<string>(name: "expense_alias_prefix", type: "text", nullable: true),
                    usemailgateway = table.Column<bool>(name: "use_mailgateway", type: "boolean", nullable: true),
                    modulehrpayrollexpense = table.Column<bool>(name: "module_hr_payroll_expense", type: "boolean", nullable: true),
                    modulehrexpenseextract = table.Column<bool>(name: "module_hr_expense_extract", type: "boolean", nullable: true),
                    overtimecompanythreshold = table.Column<long>(name: "overtime_company_threshold", type: "bigint", nullable: true),
                    overtimeemployeethreshold = table.Column<long>(name: "overtime_employee_threshold", type: "bigint", nullable: true),
                    overtimestartdate = table.Column<DateTime>(name: "overtime_start_date", type: "timestamp without time zone", nullable: true),
                    groupattendanceusepin = table.Column<bool>(name: "group_attendance_use_pin", type: "boolean", nullable: true),
                    hrattendanceovertime = table.Column<bool>(name: "hr_attendance_overtime", type: "boolean", nullable: true),
                    modulewebsitehrrecruitment = table.Column<bool>(name: "module_website_hr_recruitment", type: "boolean", nullable: true),
                    modulehrrecruitmentsurvey = table.Column<bool>(name: "module_hr_recruitment_survey", type: "boolean", nullable: true),
                    groupapplicantcvdisplay = table.Column<bool>(name: "group_applicant_cv_display", type: "boolean", nullable: true),
                    modulehrrecruitmentextract = table.Column<bool>(name: "module_hr_recruitment_extract", type: "boolean", nullable: true),
                    recaptchapublickey = table.Column<string>(name: "recaptcha_public_key", type: "text", nullable: true),
                    recaptchaprivatekey = table.Column<string>(name: "recaptcha_private_key", type: "text", nullable: true),
                    recaptchaminscore = table.Column<double>(name: "recaptcha_min_score", type: "double precision", nullable: true),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: true),
                    groupmultiwebsite = table.Column<bool>(name: "group_multi_website", type: "boolean", nullable: true),
                    modulewebsitelivechat = table.Column<bool>(name: "module_website_livechat", type: "boolean", nullable: true),
                    modulemarketingautomation = table.Column<bool>(name: "module_marketing_automation", type: "boolean", nullable: true),
                    modulepaymentpaypal = table.Column<bool>(name: "module_payment_paypal", type: "boolean", nullable: true),
                    saledeliverysettings = table.Column<string>(name: "sale_delivery_settings", type: "text", nullable: true),
                    modulewebsitesaledelivery = table.Column<bool>(name: "module_website_sale_delivery", type: "boolean", nullable: true),
                    groupdeliveryinvoiceaddress = table.Column<bool>(name: "group_delivery_invoice_address", type: "boolean", nullable: true),
                    groupshowuomprice = table.Column<bool>(name: "group_show_uom_price", type: "boolean", nullable: true),
                    groupproductpricecomparison = table.Column<bool>(name: "group_product_price_comparison", type: "boolean", nullable: true),
                    modulewebsitesaledigital = table.Column<bool>(name: "module_website_sale_digital", type: "boolean", nullable: true),
                    modulewebsitesalewishlist = table.Column<bool>(name: "module_website_sale_wishlist", type: "boolean", nullable: true),
                    modulewebsitesalecomparison = table.Column<bool>(name: "module_website_sale_comparison", type: "boolean", nullable: true),
                    modulewebsitesaleautocomplete = table.Column<bool>(name: "module_website_sale_autocomplete", type: "boolean", nullable: true),
                    moduleaccount = table.Column<bool>(name: "module_account", type: "boolean", nullable: true),
                    modulewebsitesalepicking = table.Column<bool>(name: "module_website_sale_picking", type: "boolean", nullable: true),
                    moduledeliverymondialrelay = table.Column<bool>(name: "module_delivery_mondialrelay", type: "boolean", nullable: true),
                    enabledextracheckoutstep = table.Column<bool>(name: "enabled_extra_checkout_step", type: "boolean", nullable: true),
                    enabledbuynowbutton = table.Column<bool>(name: "enabled_buy_now_button", type: "boolean", nullable: true),
                    allowoutofstockorder = table.Column<bool>(name: "allow_out_of_stock_order", type: "boolean", nullable: true),
                    showavailability = table.Column<bool>(name: "show_availability", type: "boolean", nullable: true),
                    availablethreshold = table.Column<double>(name: "available_threshold", type: "double precision", nullable: true),
                    delayalertcontract = table.Column<long>(name: "delay_alert_contract", type: "bigint", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_config_settings_pkey", x => x.id);
                    table.ForeignKey(
                        name: "res_config_settings_chart_template_id_fkey",
                        column: x => x.charttemplateid,
                        principalTable: "account_chart_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_config_settings_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "res_config_settings_deposit_default_product_id_fkey",
                        column: x => x.depositdefaultproductid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_config_settings_digest_id_fkey",
                        column: x => x.digestid,
                        principalTable: "digest_digest",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_config_settings_invoice_mail_template_id_fkey",
                        column: x => x.invoicemailtemplateid,
                        principalTable: "mail_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_config_settings_pos_config_id_fkey",
                        column: x => x.posconfigid,
                        principalTable: "pos_config",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_config_settings_pos_default_fiscal_position_id_fkey",
                        column: x => x.posdefaultfiscalpositionid,
                        principalTable: "account_fiscal_position",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_config_settings_pos_iface_start_categ_id_fkey",
                        column: x => x.posifacestartcategid,
                        principalTable: "pos_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_config_settings_pos_pricelist_id_fkey",
                        column: x => x.pospricelistid,
                        principalTable: "product_pricelist",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_config_settings_pos_tip_product_id_fkey",
                        column: x => x.postipproductid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "res_country",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    addressviewid = table.Column<Guid>(name: "address_view_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    phonecode = table.Column<long>(name: "phone_code", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    nameposition = table.Column<string>(name: "name_position", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    vatlabel = table.Column<string>(name: "vat_label", type: "jsonb", nullable: true),
                    addressformat = table.Column<string>(name: "address_format", type: "text", nullable: true),
                    staterequired = table.Column<bool>(name: "state_required", type: "boolean", nullable: true),
                    ziprequired = table.Column<bool>(name: "zip_required", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_country_pkey", x => x.id);
                    table.ForeignKey(
                        name: "res_country_address_view_id_fkey",
                        column: x => x.addressviewid,
                        principalTable: "ir_ui_view",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "res_country_group",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_country_group_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "res_country_group_pricelist_rel",
                columns: table => new
                {
                    pricelistid = table.Column<Guid>(name: "pricelist_id", type: "uuid", nullable: false),
                    rescountrygroupid = table.Column<long>(name: "res_country_group_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_country_group_pricelist_rel_pkey", x => new { x.pricelistid, x.rescountrygroupid });
                    table.ForeignKey(
                        name: "res_country_group_pricelist_rel_pricelist_id_fkey",
                        column: x => x.pricelistid,
                        principalTable: "product_pricelist",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "res_country_group_pricelist_rel_res_country_group_id_fkey",
                        column: x => x.rescountrygroupid,
                        principalTable: "res_country_group",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "res_country_res_country_group_rel",
                columns: table => new
                {
                    rescountryid = table.Column<long>(name: "res_country_id", type: "bigint", nullable: false),
                    rescountrygroupid = table.Column<long>(name: "res_country_group_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_country_res_country_group_rel_pkey", x => new { x.rescountryid, x.rescountrygroupid });
                    table.ForeignKey(
                        name: "res_country_res_country_group_rel_res_country_group_id_fkey",
                        column: x => x.rescountrygroupid,
                        principalTable: "res_country_group",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "res_country_res_country_group_rel_res_country_id_fkey",
                        column: x => x.rescountryid,
                        principalTable: "res_country",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "res_country_state",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    countryid = table.Column<long>(name: "country_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_country_state_pkey", x => x.id);
                    table.ForeignKey(
                        name: "res_country_state_country_id_fkey",
                        column: x => x.countryid,
                        principalTable: "res_country",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "res_currency",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    name = table.Column<string>(type: "text", nullable: true),
                    symbol = table.Column<string>(type: "text", nullable: true),
                    decimalplaces = table.Column<long>(name: "decimal_places", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    fullname = table.Column<string>(name: "full_name", type: "text", nullable: true),
                    position = table.Column<string>(type: "text", nullable: true),
                    currencyunitlabel = table.Column<string>(name: "currency_unit_label", type: "text", nullable: true),
                    currencysubunitlabel = table.Column<string>(name: "currency_subunit_label", type: "text", nullable: true),
                    rounding = table.Column<decimal>(type: "numeric", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_currency_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "res_currency_rate",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    rate = table.Column<decimal>(type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_currency_rate_pkey", x => x.id);
                    table.ForeignKey(
                        name: "res_currency_rate_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_currency_rate_currency_id_fkey",
                        column: x => x.currencyid,
                        principalTable: "res_currency",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "res_groups",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    categoryid = table.Column<Guid>(name: "category_id", type: "uuid", nullable: true),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    comment = table.Column<string>(type: "jsonb", nullable: true),
                    share = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_groups_pkey", x => x.id);
                    table.ForeignKey(
                        name: "res_groups_category_id_fkey",
                        column: x => x.categoryid,
                        principalTable: "ir_module_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "res_groups_implied_rel",
                columns: table => new
                {
                    gid = table.Column<Guid>(type: "uuid", nullable: false),
                    hid = table.Column<Guid>(type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_groups_implied_rel_pkey", x => new { x.gid, x.hid });
                    table.ForeignKey(
                        name: "res_groups_implied_rel_gid_fkey",
                        column: x => x.gid,
                        principalTable: "res_groups",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "res_groups_implied_rel_hid_fkey",
                        column: x => x.hid,
                        principalTable: "res_groups",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "res_groups_report_rel",
                columns: table => new
                {
                    uid = table.Column<Guid>(type: "uuid", nullable: false),
                    gid = table.Column<Guid>(type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_groups_report_rel_pkey", x => new { x.uid, x.gid });
                    table.ForeignKey(
                        name: "res_groups_report_rel_gid_fkey",
                        column: x => x.gid,
                        principalTable: "res_groups",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "res_groups_report_rel_uid_fkey",
                        column: x => x.uid,
                        principalTable: "ir_act_report_xml",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "rule_group_rel",
                columns: table => new
                {
                    rulegroupid = table.Column<Guid>(name: "rule_group_id", type: "uuid", nullable: false),
                    groupid = table.Column<Guid>(name: "group_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("rule_group_rel_pkey", x => new { x.rulegroupid, x.groupid });
                    table.ForeignKey(
                        name: "rule_group_rel_group_id_fkey",
                        column: x => x.groupid,
                        principalTable: "res_groups",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "rule_group_rel_rule_group_id_fkey",
                        column: x => x.rulegroupid,
                        principalTable: "ir_rule",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "res_groups_spreadsheet_dashboard_rel",
                columns: table => new
                {
                    spreadsheetdashboardid = table.Column<Guid>(name: "spreadsheet_dashboard_id", type: "uuid", nullable: false),
                    resgroupsid = table.Column<Guid>(name: "res_groups_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_groups_spreadsheet_dashboard_rel_pkey", x => new { x.spreadsheetdashboardid, x.resgroupsid });
                    table.ForeignKey(
                        name: "res_groups_spreadsheet_dashboard_rel_res_groups_id_fkey",
                        column: x => x.resgroupsid,
                        principalTable: "res_groups",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "res_groups_users_rel",
                columns: table => new
                {
                    gid = table.Column<Guid>(type: "uuid", nullable: false),
                    uid = table.Column<Guid>(type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_groups_users_rel_pkey", x => new { x.gid, x.uid });
                    table.ForeignKey(
                        name: "res_groups_users_rel_gid_fkey",
                        column: x => x.gid,
                        principalTable: "res_groups",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "res_lang",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    isocode = table.Column<string>(name: "iso_code", type: "text", nullable: true),
                    urlcode = table.Column<string>(name: "url_code", type: "text", nullable: true),
                    direction = table.Column<string>(type: "text", nullable: true),
                    dateformat = table.Column<string>(name: "date_format", type: "text", nullable: true),
                    timeformat = table.Column<string>(name: "time_format", type: "text", nullable: true),
                    weekstart = table.Column<string>(name: "week_start", type: "text", nullable: true),
                    grouping = table.Column<string>(type: "text", nullable: true),
                    decimalpoint = table.Column<string>(name: "decimal_point", type: "text", nullable: true),
                    thousandssep = table.Column<string>(name: "thousands_sep", type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_lang_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "res_lang_install_rel",
                columns: table => new
                {
                    languagewizardid = table.Column<Guid>(name: "language_wizard_id", type: "uuid", nullable: false),
                    langid = table.Column<long>(name: "lang_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_lang_install_rel_pkey", x => new { x.languagewizardid, x.langid });
                    table.ForeignKey(
                        name: "res_lang_install_rel_lang_id_fkey",
                        column: x => x.langid,
                        principalTable: "res_lang",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "res_lang_install_rel_language_wizard_id_fkey",
                        column: x => x.languagewizardid,
                        principalTable: "base_language_install",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "res_partner",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    title = table.Column<long>(type: "bigint", nullable: true),
                    parentid = table.Column<Guid>(name: "parent_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    stateid = table.Column<long>(name: "state_id", type: "bigint", nullable: true),
                    countryid = table.Column<long>(name: "country_id", type: "bigint", nullable: true),
                    industryid = table.Column<long>(name: "industry_id", type: "bigint", nullable: true),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    commercialpartnerid = table.Column<Guid>(name: "commercial_partner_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    displayname = table.Column<string>(name: "display_name", type: "text", nullable: true),
                    @ref = table.Column<string>(name: "ref", type: "text", nullable: true),
                    lang = table.Column<string>(type: "text", nullable: true),
                    tz = table.Column<string>(type: "text", nullable: true),
                    vat = table.Column<string>(type: "text", nullable: true),
                    companyregistry = table.Column<string>(name: "company_registry", type: "text", nullable: true),
                    website = table.Column<string>(type: "text", nullable: true),
                    function = table.Column<string>(type: "text", nullable: true),
                    type = table.Column<string>(type: "text", nullable: true),
                    street = table.Column<string>(type: "text", nullable: true),
                    street2 = table.Column<string>(type: "text", nullable: true),
                    zip = table.Column<string>(type: "text", nullable: true),
                    city = table.Column<string>(type: "text", nullable: true),
                    email = table.Column<string>(type: "text", nullable: true),
                    phone = table.Column<string>(type: "text", nullable: true),
                    mobile = table.Column<string>(type: "text", nullable: true),
                    commercialcompanyname = table.Column<string>(name: "commercial_company_name", type: "text", nullable: true),
                    companyname = table.Column<string>(name: "company_name", type: "text", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    comment = table.Column<string>(type: "text", nullable: true),
                    partnerlatitude = table.Column<decimal>(name: "partner_latitude", type: "numeric", nullable: true),
                    partnerlongitude = table.Column<decimal>(name: "partner_longitude", type: "numeric", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    employee = table.Column<bool>(type: "boolean", nullable: true),
                    iscompany = table.Column<bool>(name: "is_company", type: "boolean", nullable: true),
                    partnershare = table.Column<bool>(name: "partner_share", type: "boolean", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    messagebounce = table.Column<long>(name: "message_bounce", type: "bigint", nullable: true),
                    emailnormalized = table.Column<string>(name: "email_normalized", type: "text", nullable: true),
                    signuptoken = table.Column<string>(name: "signup_token", type: "text", nullable: true),
                    signuptype = table.Column<string>(name: "signup_type", type: "text", nullable: true),
                    signupexpiration = table.Column<DateTime>(name: "signup_expiration", type: "timestamp without time zone", nullable: true),
                    teamid = table.Column<Guid>(name: "team_id", type: "uuid", nullable: true),
                    partnergid = table.Column<Guid>(name: "partner_gid", type: "uuid", nullable: true),
                    additionalinfo = table.Column<string>(name: "additional_info", type: "text", nullable: true),
                    phonesanitized = table.Column<string>(name: "phone_sanitized", type: "text", nullable: true),
                    supplierrank = table.Column<long>(name: "supplier_rank", type: "bigint", nullable: true),
                    customerrank = table.Column<long>(name: "customer_rank", type: "bigint", nullable: true),
                    invoicewarn = table.Column<string>(name: "invoice_warn", type: "text", nullable: true),
                    invoicewarnmsg = table.Column<string>(name: "invoice_warn_msg", type: "text", nullable: true),
                    debitlimit = table.Column<decimal>(name: "debit_limit", type: "numeric", nullable: true),
                    lasttimeentrieschecked = table.Column<DateTime>(name: "last_time_entries_checked", type: "timestamp without time zone", nullable: true),
                    salewarn = table.Column<string>(name: "sale_warn", type: "text", nullable: true),
                    salewarnmsg = table.Column<string>(name: "sale_warn_msg", type: "text", nullable: true),
                    pickingwarn = table.Column<string>(name: "picking_warn", type: "text", nullable: true),
                    pickingwarnmsg = table.Column<string>(name: "picking_warn_msg", type: "text", nullable: true),
                    purchasewarn = table.Column<string>(name: "purchase_warn", type: "text", nullable: true),
                    purchasewarnmsg = table.Column<string>(name: "purchase_warn_msg", type: "text", nullable: true),
                    paymentresponsibleid = table.Column<Guid>(name: "payment_responsible_id", type: "uuid", nullable: true),
                    latestfollowupsequence = table.Column<long>(name: "latest_followup_sequence", type: "bigint", nullable: true),
                    latestfollowuplevelidwithoutlit = table.Column<Guid>(name: "latest_followup_level_id_without_lit", type: "uuid", nullable: true),
                    paymentnextactiondate = table.Column<DateTime>(name: "payment_next_action_date", type: "timestamp without time zone", nullable: true),
                    paymentnote = table.Column<string>(name: "payment_note", type: "text", nullable: true),
                    paymentnextaction = table.Column<string>(name: "payment_next_action", type: "text", nullable: true),
                    calendarlastnotifack = table.Column<DateTime>(name: "calendar_last_notif_ack", type: "timestamp without time zone", nullable: true),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: true),
                    ispublished = table.Column<bool>(name: "is_published", type: "boolean", nullable: true),
                    plantochangecar = table.Column<bool>(name: "plan_to_change_car", type: "boolean", nullable: true),
                    plantochangebike = table.Column<bool>(name: "plan_to_change_bike", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_partner_pkey", x => x.id);
                    table.ForeignKey(
                        name: "res_partner_commercial_partner_id_fkey",
                        column: x => x.commercialpartnerid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_partner_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_partner_country_id_fkey",
                        column: x => x.countryid,
                        principalTable: "res_country",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "res_partner_latest_followup_level_id_without_lit_fkey",
                        column: x => x.latestfollowuplevelidwithoutlit,
                        principalTable: "followup_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_partner_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_partner_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_partner_state_id_fkey",
                        column: x => x.stateid,
                        principalTable: "res_country_state",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "res_partner_team_id_fkey",
                        column: x => x.teamid,
                        principalTable: "crm_team",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_notification_product_partner_rel",
                columns: table => new
                {
                    productproductid = table.Column<Guid>(name: "product_product_id", type: "uuid", nullable: false),
                    respartnerid = table.Column<Guid>(name: "res_partner_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_notification_product_partner_rel_pkey", x => new { x.productproductid, x.respartnerid });
                    table.ForeignKey(
                        name: "stock_notification_product_partner_rel_product_product_id_fkey",
                        column: x => x.productproductid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_notification_product_partner_rel_res_partner_id_fkey",
                        column: x => x.respartnerid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "res_partner_autocomplete_sync",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    synched = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_partner_autocomplete_sync_pkey", x => x.id);
                    table.ForeignKey(
                        name: "res_partner_autocomplete_sync_partner_id_fkey",
                        column: x => x.partnerid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "res_partner_bank",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    bankid = table.Column<Guid>(name: "bank_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    accnumber = table.Column<string>(name: "acc_number", type: "text", nullable: true),
                    sanitizedaccnumber = table.Column<string>(name: "sanitized_acc_number", type: "text", nullable: true),
                    accholdername = table.Column<string>(name: "acc_holder_name", type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    allowoutpayment = table.Column<bool>(name: "allow_out_payment", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_partner_bank_pkey", x => x.id);
                    table.ForeignKey(
                        name: "res_partner_bank_bank_id_fkey",
                        column: x => x.bankid,
                        principalTable: "res_bank",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_partner_bank_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_partner_bank_currency_id_fkey",
                        column: x => x.currencyid,
                        principalTable: "res_currency",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_partner_bank_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_partner_bank_partner_id_fkey",
                        column: x => x.partnerid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "res_partner_category",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    parentid = table.Column<long>(name: "parent_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    parentpath = table.Column<string>(name: "parent_path", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_partner_category_pkey", x => x.id);
                    table.ForeignKey(
                        name: "res_partner_category_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "res_partner_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "res_partner_res_partner_category_rel",
                columns: table => new
                {
                    categoryid = table.Column<long>(name: "category_id", type: "bigint", nullable: false),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_partner_res_partner_category_rel_pkey", x => new { x.categoryid, x.partnerid });
                    table.ForeignKey(
                        name: "res_partner_res_partner_category_rel_category_id_fkey",
                        column: x => x.categoryid,
                        principalTable: "res_partner_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "res_partner_res_partner_category_rel_partner_id_fkey",
                        column: x => x.partnerid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "res_partner_industry",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    fullname = table.Column<string>(name: "full_name", type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_partner_industry_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "res_partner_title",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    shortcut = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_partner_title_pkey", x => x.id);
                });

            migrationBuilder.CreateTable(
                name: "res_users",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true, defaultValueSql: "true"),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    login = table.Column<string>(type: "text", nullable: true),
                    password = table.Column<string>(type: "text", nullable: true),
                    actionid = table.Column<Guid>(name: "action_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    signature = table.Column<string>(type: "text", nullable: true),
                    share = table.Column<bool>(type: "boolean", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    totpsecret = table.Column<string>(name: "totp_secret", type: "text", nullable: true),
                    notificationtype = table.Column<string>(name: "notification_type", type: "text", nullable: true),
                    odoobotstate = table.Column<string>(name: "odoobot_state", type: "text", nullable: true),
                    odoobotfailed = table.Column<bool>(name: "odoobot_failed", type: "boolean", nullable: true),
                    saleteamid = table.Column<Guid>(name: "sale_team_id", type: "uuid", nullable: true),
                    targetsaleswon = table.Column<long>(name: "target_sales_won", type: "bigint", nullable: true),
                    targetsalesdone = table.Column<long>(name: "target_sales_done", type: "bigint", nullable: true),
                    targetsalesinvoiced = table.Column<long>(name: "target_sales_invoiced", type: "bigint", nullable: true),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: true),
                    lastlunchlocationid = table.Column<Guid>(name: "last_lunch_location_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_users_pkey", x => x.id);
                    table.ForeignKey(
                        name: "res_users_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "res_users_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_users_last_lunch_location_id_fkey",
                        column: x => x.lastlunchlocationid,
                        principalTable: "lunch_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_users_partner_id_fkey",
                        column: x => x.partnerid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "res_users_sale_team_id_fkey",
                        column: x => x.saleteamid,
                        principalTable: "crm_team",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_users_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "res_users_apikeys",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    name = table.Column<string>(type: "text", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    scope = table.Column<string>(type: "text", nullable: true),
                    index = table.Column<string>(type: "text", nullable: true),
                    key = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true, defaultValueSql: "(now() AT TIME ZONE 'utc'::text)")
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_users_apikeys_pkey", x => x.id);
                    table.ForeignKey(
                        name: "res_users_apikeys_user_id_fkey",
                        column: x => x.userid,
                        principalTable: "res_users",
                        principalColumn: "id");
                });

            migrationBuilder.CreateTable(
                name: "res_users_apikeys_description",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_users_apikeys_description_pkey", x => x.id);
                    table.ForeignKey(
                        name: "res_users_apikeys_description_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_users_apikeys_description_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "res_users_deletion",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    useridint = table.Column<Guid>(name: "user_id_int", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_users_deletion_pkey", x => x.id);
                    table.ForeignKey(
                        name: "res_users_deletion_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_users_deletion_user_id_fkey",
                        column: x => x.userid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_users_deletion_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "res_users_identitycheck",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    request = table.Column<string>(type: "text", nullable: true),
                    password = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_users_identitycheck_pkey", x => x.id);
                    table.ForeignKey(
                        name: "res_users_identitycheck_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_users_identitycheck_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "res_users_log",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_users_log_pkey", x => x.id);
                    table.ForeignKey(
                        name: "res_users_log_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_users_log_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "res_users_settings",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    voiceactiveduration = table.Column<long>(name: "voice_active_duration", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    pushtotalkkey = table.Column<string>(name: "push_to_talk_key", type: "text", nullable: true),
                    isdiscusssidebarcategorychannelopen = table.Column<bool>(name: "is_discuss_sidebar_category_channel_open", type: "boolean", nullable: true),
                    isdiscusssidebarcategorychatopen = table.Column<bool>(name: "is_discuss_sidebar_category_chat_open", type: "boolean", nullable: true),
                    usepushtotalk = table.Column<bool>(name: "use_push_to_talk", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_users_settings_pkey", x => x.id);
                    table.ForeignKey(
                        name: "res_users_settings_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_users_settings_user_id_fkey",
                        column: x => x.userid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "res_users_settings_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "reset_view_arch_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    viewid = table.Column<Guid>(name: "view_id", type: "uuid", nullable: true),
                    compareviewid = table.Column<Guid>(name: "compare_view_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    resetmode = table.Column<string>(name: "reset_mode", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("reset_view_arch_wizard_pkey", x => x.id);
                    table.ForeignKey(
                        name: "reset_view_arch_wizard_compare_view_id_fkey",
                        column: x => x.compareviewid,
                        principalTable: "ir_ui_view",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "reset_view_arch_wizard_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "reset_view_arch_wizard_view_id_fkey",
                        column: x => x.viewid,
                        principalTable: "ir_ui_view",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "reset_view_arch_wizard_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "resource_calendar",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    tz = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    twoweekscalendar = table.Column<bool>(name: "two_weeks_calendar", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    hoursperday = table.Column<double>(name: "hours_per_day", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("resource_calendar_pkey", x => x.id);
                    table.ForeignKey(
                        name: "resource_calendar_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "resource_calendar_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "resource_calendar_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "sale_advance_payment_inv",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    depositaccountid = table.Column<Guid>(name: "deposit_account_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    advancepaymentmethod = table.Column<string>(name: "advance_payment_method", type: "text", nullable: true),
                    fixedamount = table.Column<decimal>(name: "fixed_amount", type: "numeric", nullable: true),
                    deductdownpayments = table.Column<bool>(name: "deduct_down_payments", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    amount = table.Column<double>(type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("sale_advance_payment_inv_pkey", x => x.id);
                    table.ForeignKey(
                        name: "sale_advance_payment_inv_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_advance_payment_inv_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_advance_payment_inv_currency_id_fkey",
                        column: x => x.currencyid,
                        principalTable: "res_currency",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_advance_payment_inv_deposit_account_id_fkey",
                        column: x => x.depositaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_advance_payment_inv_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_advance_payment_inv_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "sale_order_template",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    mailtemplateid = table.Column<Guid>(name: "mail_template_id", type: "uuid", nullable: true),
                    numberofdays = table.Column<long>(name: "number_of_days", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    note = table.Column<string>(type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    requiresignature = table.Column<bool>(name: "require_signature", type: "boolean", nullable: true),
                    requirepayment = table.Column<bool>(name: "require_payment", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("sale_order_template_pkey", x => x.id);
                    table.ForeignKey(
                        name: "sale_order_template_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_template_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_template_mail_template_id_fkey",
                        column: x => x.mailtemplateid,
                        principalTable: "mail_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_template_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "sale_payment_provider_onboarding_wizard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    paymentmethod = table.Column<string>(name: "payment_method", type: "text", nullable: true),
                    paypalusertype = table.Column<string>(name: "paypal_user_type", type: "text", nullable: true),
                    paypalemailaccount = table.Column<string>(name: "paypal_email_account", type: "text", nullable: true),
                    paypalselleraccount = table.Column<string>(name: "paypal_seller_account", type: "text", nullable: true),
                    paypalpdttoken = table.Column<string>(name: "paypal_pdt_token", type: "text", nullable: true),
                    manualname = table.Column<string>(name: "manual_name", type: "text", nullable: true),
                    journalname = table.Column<string>(name: "journal_name", type: "text", nullable: true),
                    accnumber = table.Column<string>(name: "acc_number", type: "text", nullable: true),
                    manualpostmsg = table.Column<string>(name: "manual_post_msg", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("sale_payment_provider_onboarding_wizard_pkey", x => x.id);
                    table.ForeignKey(
                        name: "sale_payment_provider_onboarding_wizard_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_payment_provider_onboarding_wizard_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "sms_resend",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    mailmessageid = table.Column<Guid>(name: "mail_message_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("sms_resend_pkey", x => x.id);
                    table.ForeignKey(
                        name: "sms_resend_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sms_resend_mail_message_id_fkey",
                        column: x => x.mailmessageid,
                        principalTable: "mail_message",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "sms_resend_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "sms_sms",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    mailmessageid = table.Column<Guid>(name: "mail_message_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    number = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    failuretype = table.Column<string>(name: "failure_type", type: "text", nullable: true),
                    body = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("sms_sms_pkey", x => x.id);
                    table.ForeignKey(
                        name: "sms_sms_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sms_sms_mail_message_id_fkey",
                        column: x => x.mailmessageid,
                        principalTable: "mail_message",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sms_sms_partner_id_fkey",
                        column: x => x.partnerid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sms_sms_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "sms_template",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    modelid = table.Column<Guid>(name: "model_id", type: "uuid", nullable: true),
                    sidebaractionid = table.Column<Guid>(name: "sidebar_action_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    templatefs = table.Column<string>(name: "template_fs", type: "text", nullable: true),
                    lang = table.Column<string>(type: "text", nullable: true),
                    model = table.Column<string>(type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    body = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("sms_template_pkey", x => x.id);
                    table.ForeignKey(
                        name: "sms_template_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sms_template_model_id_fkey",
                        column: x => x.modelid,
                        principalTable: "ir_model",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "sms_template_sidebar_action_id_fkey",
                        column: x => x.sidebaractionid,
                        principalTable: "ir_act_window",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sms_template_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "sms_template_reset",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("sms_template_reset_pkey", x => x.id);
                    table.ForeignKey(
                        name: "sms_template_reset_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sms_template_reset_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "snailmail_confirm_invoice",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    invoicesendid = table.Column<Guid>(name: "invoice_send_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    modelname = table.Column<string>(name: "model_name", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("snailmail_confirm_invoice_pkey", x => x.id);
                    table.ForeignKey(
                        name: "snailmail_confirm_invoice_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "snailmail_confirm_invoice_invoice_send_id_fkey",
                        column: x => x.invoicesendid,
                        principalTable: "account_invoice_send",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "snailmail_confirm_invoice_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "snailmail_letter",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    resid = table.Column<Guid>(name: "res_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    reporttemplate = table.Column<Guid>(name: "report_template", type: "uuid", nullable: true),
                    attachmentid = table.Column<Guid>(name: "attachment_id", type: "uuid", nullable: true),
                    messageid = table.Column<Guid>(name: "message_id", type: "uuid", nullable: true),
                    stateid = table.Column<long>(name: "state_id", type: "bigint", nullable: true),
                    countryid = table.Column<long>(name: "country_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    model = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    errorcode = table.Column<string>(name: "error_code", type: "text", nullable: true),
                    infomsg = table.Column<string>(name: "info_msg", type: "text", nullable: true),
                    street = table.Column<string>(type: "text", nullable: true),
                    street2 = table.Column<string>(type: "text", nullable: true),
                    zip = table.Column<string>(type: "text", nullable: true),
                    city = table.Column<string>(type: "text", nullable: true),
                    color = table.Column<bool>(type: "boolean", nullable: true),
                    cover = table.Column<bool>(type: "boolean", nullable: true),
                    duplex = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("snailmail_letter_pkey", x => x.id);
                    table.ForeignKey(
                        name: "snailmail_letter_attachment_id_fkey",
                        column: x => x.attachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "snailmail_letter_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "snailmail_letter_country_id_fkey",
                        column: x => x.countryid,
                        principalTable: "res_country",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "snailmail_letter_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "snailmail_letter_message_id_fkey",
                        column: x => x.messageid,
                        principalTable: "mail_message",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "snailmail_letter_partner_id_fkey",
                        column: x => x.partnerid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "snailmail_letter_report_template_fkey",
                        column: x => x.reporttemplate,
                        principalTable: "ir_act_report_xml",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "snailmail_letter_state_id_fkey",
                        column: x => x.stateid,
                        principalTable: "res_country_state",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "snailmail_letter_user_id_fkey",
                        column: x => x.userid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "snailmail_letter_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "snailmail_letter_format_error",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messageid = table.Column<Guid>(name: "message_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    snailmailcover = table.Column<bool>(name: "snailmail_cover", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("snailmail_letter_format_error_pkey", x => x.id);
                    table.ForeignKey(
                        name: "snailmail_letter_format_error_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "snailmail_letter_format_error_message_id_fkey",
                        column: x => x.messageid,
                        principalTable: "mail_message",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "snailmail_letter_format_error_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "spreadsheet_dashboard_group",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("spreadsheet_dashboard_group_pkey", x => x.id);
                    table.ForeignKey(
                        name: "spreadsheet_dashboard_group_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "spreadsheet_dashboard_group_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_backorder_confirmation",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    showtransfers = table.Column<bool>(name: "show_transfers", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_backorder_confirmation_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_backorder_confirmation_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_backorder_confirmation_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_change_product_qty",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    producttmplid = table.Column<Guid>(name: "product_tmpl_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    newquantity = table.Column<decimal>(name: "new_quantity", type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_change_product_qty_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_change_product_qty_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_change_product_qty_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_change_product_qty_product_tmpl_id_fkey",
                        column: x => x.producttmplid,
                        principalTable: "product_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_change_product_qty_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_immediate_transfer",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    showtransfers = table.Column<bool>(name: "show_transfers", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_immediate_transfer_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_immediate_transfer_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_immediate_transfer_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_inventory_adjustment_name",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    inventoryadjustmentname = table.Column<string>(name: "inventory_adjustment_name", type: "text", nullable: true),
                    showinfo = table.Column<bool>(name: "show_info", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_inventory_adjustment_name_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_inventory_adjustment_name_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_inventory_adjustment_name_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_inventory_conflict",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_inventory_conflict_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_inventory_conflict_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_inventory_conflict_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_inventory_warning",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_inventory_warning_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_inventory_warning_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_inventory_warning_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_orderpoint_snooze",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    predefineddate = table.Column<string>(name: "predefined_date", type: "text", nullable: true),
                    snoozeduntil = table.Column<DateTime>(name: "snoozed_until", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_orderpoint_snooze_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_orderpoint_snooze_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_orderpoint_snooze_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_package_type",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    height = table.Column<long>(type: "bigint", nullable: true),
                    width = table.Column<long>(type: "bigint", nullable: true),
                    packaginglength = table.Column<long>(name: "packaging_length", type: "bigint", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    barcode = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    baseweight = table.Column<double>(name: "base_weight", type: "double precision", nullable: true),
                    maxweight = table.Column<double>(name: "max_weight", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_package_type_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_package_type_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_package_type_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_package_type_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_quantity_history",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    inventorydatetime = table.Column<DateTime>(name: "inventory_datetime", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_quantity_history_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_quantity_history_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_quantity_history_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_request_count",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    setcount = table.Column<string>(name: "set_count", type: "text", nullable: true),
                    inventorydate = table.Column<DateTime>(name: "inventory_date", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    accountingdate = table.Column<DateTime>(name: "accounting_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_request_count_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_request_count_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_request_count_user_id_fkey",
                        column: x => x.userid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_request_count_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_rules_report",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    producttmplid = table.Column<Guid>(name: "product_tmpl_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    producthasvariants = table.Column<bool>(name: "product_has_variants", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_rules_report_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_rules_report_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_rules_report_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_rules_report_product_tmpl_id_fkey",
                        column: x => x.producttmplid,
                        principalTable: "product_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_rules_report_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_scheduler_compute",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_scheduler_compute_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_scheduler_compute_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_scheduler_compute_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_storage_category",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    allownewproduct = table.Column<string>(name: "allow_new_product", type: "text", nullable: true),
                    maxweight = table.Column<decimal>(name: "max_weight", type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_storage_category_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_storage_category_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_storage_category_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_storage_category_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_traceability_report",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_traceability_report_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_traceability_report_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_traceability_report_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_track_confirmation",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_track_confirmation_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_track_confirmation_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_track_confirmation_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_valuation_layer_revaluation",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    accountjournalid = table.Column<Guid>(name: "account_journal_id", type: "uuid", nullable: true),
                    accountid = table.Column<Guid>(name: "account_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    reason = table.Column<string>(type: "text", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    addedvalue = table.Column<decimal>(name: "added_value", type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_valuation_layer_revaluation_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_valuation_layer_revaluation_account_id_fkey",
                        column: x => x.accountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_valuation_layer_revaluation_account_journal_id_fkey",
                        column: x => x.accountjournalid,
                        principalTable: "account_journal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_valuation_layer_revaluation_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_valuation_layer_revaluation_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_valuation_layer_revaluation_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_valuation_layer_revaluation_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "team_favorite_user_rel",
                columns: table => new
                {
                    teamid = table.Column<Guid>(name: "team_id", type: "uuid", nullable: false),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("team_favorite_user_rel_pkey", x => new { x.teamid, x.userid });
                    table.ForeignKey(
                        name: "team_favorite_user_rel_team_id_fkey",
                        column: x => x.teamid,
                        principalTable: "crm_team",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "team_favorite_user_rel_user_id_fkey",
                        column: x => x.userid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "theme_ir_asset",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    key = table.Column<string>(type: "text", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    bundle = table.Column<string>(type: "text", nullable: true),
                    directive = table.Column<string>(type: "text", nullable: true),
                    path = table.Column<string>(type: "text", nullable: true),
                    target = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("theme_ir_asset_pkey", x => x.id);
                    table.ForeignKey(
                        name: "theme_ir_asset_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "theme_ir_asset_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "theme_ir_attachment",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    key = table.Column<string>(type: "text", nullable: true),
                    url = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("theme_ir_attachment_pkey", x => x.id);
                    table.ForeignKey(
                        name: "theme_ir_attachment_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "theme_ir_attachment_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "theme_ir_ui_view",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    priority = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    key = table.Column<string>(type: "text", nullable: true),
                    type = table.Column<string>(type: "text", nullable: true),
                    mode = table.Column<string>(type: "text", nullable: true),
                    archfs = table.Column<string>(name: "arch_fs", type: "text", nullable: true),
                    inheritid = table.Column<string>(name: "inherit_id", type: "text", nullable: true),
                    arch = table.Column<string>(type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    customizeshow = table.Column<bool>(name: "customize_show", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("theme_ir_ui_view_pkey", x => x.id);
                    table.ForeignKey(
                        name: "theme_ir_ui_view_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "theme_ir_ui_view_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "uom_category",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    isposgroupable = table.Column<bool>(name: "is_pos_groupable", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("uom_category_pkey", x => x.id);
                    table.ForeignKey(
                        name: "uom_category_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "uom_category_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "utm_medium",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("utm_medium_pkey", x => x.id);
                    table.ForeignKey(
                        name: "utm_medium_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "utm_medium_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "utm_source",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("utm_source_pkey", x => x.id);
                    table.ForeignKey(
                        name: "utm_source_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "utm_source_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "utm_stage",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("utm_stage_pkey", x => x.id);
                    table.ForeignKey(
                        name: "utm_stage_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "utm_stage_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "utm_tag",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("utm_tag_pkey", x => x.id);
                    table.ForeignKey(
                        name: "utm_tag_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "utm_tag_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "validate_account_move",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    forcepost = table.Column<bool>(name: "force_post", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("validate_account_move_pkey", x => x.id);
                    table.ForeignKey(
                        name: "validate_account_move_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "validate_account_move_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "web_editor_converter_test_sub",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("web_editor_converter_test_sub_pkey", x => x.id);
                    table.ForeignKey(
                        name: "web_editor_converter_test_sub_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "web_editor_converter_test_sub_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "web_tour_tour",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("web_tour_tour_pkey", x => x.id);
                    table.ForeignKey(
                        name: "web_tour_tour_user_id_fkey",
                        column: x => x.userid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "website_base_unit",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("website_base_unit_pkey", x => x.id);
                    table.ForeignKey(
                        name: "website_base_unit_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_base_unit_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "website_configurator_feature",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    pageviewid = table.Column<Guid>(name: "page_view_id", type: "uuid", nullable: true),
                    moduleid = table.Column<Guid>(name: "module_id", type: "uuid", nullable: true),
                    menusequence = table.Column<long>(name: "menu_sequence", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    icon = table.Column<string>(type: "text", nullable: true),
                    iappagecode = table.Column<string>(name: "iap_page_code", type: "text", nullable: true),
                    websiteconfigpreselection = table.Column<string>(name: "website_config_preselection", type: "text", nullable: true),
                    featureurl = table.Column<string>(name: "feature_url", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    description = table.Column<string>(type: "jsonb", nullable: true),
                    menucompany = table.Column<bool>(name: "menu_company", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("website_configurator_feature_pkey", x => x.id);
                    table.ForeignKey(
                        name: "website_configurator_feature_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_configurator_feature_module_id_fkey",
                        column: x => x.moduleid,
                        principalTable: "ir_module_module",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "website_configurator_feature_page_view_id_fkey",
                        column: x => x.pageviewid,
                        principalTable: "ir_ui_view",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "website_configurator_feature_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "website_robots",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    content = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("website_robots_pkey", x => x.id);
                    table.ForeignKey(
                        name: "website_robots_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_robots_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "website_route",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    path = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("website_route_pkey", x => x.id);
                    table.ForeignKey(
                        name: "website_route_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_route_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "wizard_ir_model_menu_create",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    menuid = table.Column<Guid>(name: "menu_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("wizard_ir_model_menu_create_pkey", x => x.id);
                    table.ForeignKey(
                        name: "wizard_ir_model_menu_create_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "wizard_ir_model_menu_create_menu_id_fkey",
                        column: x => x.menuid,
                        principalTable: "ir_ui_menu",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "wizard_ir_model_menu_create_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "res_users_settings_volumes",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    usersettingid = table.Column<Guid>(name: "user_setting_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    guestid = table.Column<Guid>(name: "guest_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    volume = table.Column<double>(type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("res_users_settings_volumes_pkey", x => x.id);
                    table.ForeignKey(
                        name: "res_users_settings_volumes_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "res_users_settings_volumes_guest_id_fkey",
                        column: x => x.guestid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "res_users_settings_volumes_partner_id_fkey",
                        column: x => x.partnerid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "res_users_settings_volumes_user_setting_id_fkey",
                        column: x => x.usersettingid,
                        principalTable: "res_users_settings",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "res_users_settings_volumes_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "resource_resource",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    calendarid = table.Column<Guid>(name: "calendar_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    resourcetype = table.Column<string>(name: "resource_type", type: "text", nullable: true),
                    tz = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    timeefficiency = table.Column<double>(name: "time_efficiency", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("resource_resource_pkey", x => x.id);
                    table.ForeignKey(
                        name: "resource_resource_calendar_id_fkey",
                        column: x => x.calendarid,
                        principalTable: "resource_calendar",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "resource_resource_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "resource_resource_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "resource_resource_user_id_fkey",
                        column: x => x.userid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "resource_resource_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "sms_resend_recipient",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    smsresendid = table.Column<Guid>(name: "sms_resend_id", type: "uuid", nullable: true),
                    notificationid = table.Column<Guid>(name: "notification_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    partnername = table.Column<string>(name: "partner_name", type: "text", nullable: true),
                    smsnumber = table.Column<string>(name: "sms_number", type: "text", nullable: true),
                    resend = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("sms_resend_recipient_pkey", x => x.id);
                    table.ForeignKey(
                        name: "sms_resend_recipient_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sms_resend_recipient_notification_id_fkey",
                        column: x => x.notificationid,
                        principalTable: "mail_notification",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "sms_resend_recipient_sms_resend_id_fkey",
                        column: x => x.smsresendid,
                        principalTable: "sms_resend",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "sms_resend_recipient_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "sms_composer",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    resid = table.Column<Guid>(name: "res_id", type: "uuid", nullable: true),
                    templateid = table.Column<Guid>(name: "template_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    compositionmode = table.Column<string>(name: "composition_mode", type: "text", nullable: true),
                    resmodel = table.Column<string>(name: "res_model", type: "text", nullable: true),
                    resids = table.Column<string>(name: "res_ids", type: "text", nullable: true),
                    recipientsinglenumberitf = table.Column<string>(name: "recipient_single_number_itf", type: "text", nullable: true),
                    numberfieldname = table.Column<string>(name: "number_field_name", type: "text", nullable: true),
                    numbers = table.Column<string>(type: "text", nullable: true),
                    body = table.Column<string>(type: "text", nullable: true),
                    masskeeplog = table.Column<bool>(name: "mass_keep_log", type: "boolean", nullable: true),
                    massforcesend = table.Column<bool>(name: "mass_force_send", type: "boolean", nullable: true),
                    massuseblacklist = table.Column<bool>(name: "mass_use_blacklist", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("sms_composer_pkey", x => x.id);
                    table.ForeignKey(
                        name: "sms_composer_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sms_composer_template_id_fkey",
                        column: x => x.templateid,
                        principalTable: "sms_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sms_composer_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "sms_template_preview",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    smstemplateid = table.Column<Guid>(name: "sms_template_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    lang = table.Column<string>(type: "text", nullable: true),
                    resourceref = table.Column<string>(name: "resource_ref", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("sms_template_preview_pkey", x => x.id);
                    table.ForeignKey(
                        name: "sms_template_preview_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sms_template_preview_sms_template_id_fkey",
                        column: x => x.smstemplateid,
                        principalTable: "sms_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "sms_template_preview_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "sms_template_sms_template_reset_rel",
                columns: table => new
                {
                    smstemplateresetid = table.Column<Guid>(name: "sms_template_reset_id", type: "uuid", nullable: false),
                    smstemplateid = table.Column<Guid>(name: "sms_template_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("sms_template_sms_template_reset_rel_pkey", x => new { x.smstemplateresetid, x.smstemplateid });
                    table.ForeignKey(
                        name: "sms_template_sms_template_reset_rel_sms_template_id_fkey",
                        column: x => x.smstemplateid,
                        principalTable: "sms_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "sms_template_sms_template_reset_rel_sms_template_reset_id_fkey",
                        column: x => x.smstemplateresetid,
                        principalTable: "sms_template_reset",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "snailmail_letter_missing_required_fields",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    letterid = table.Column<Guid>(name: "letter_id", type: "uuid", nullable: true),
                    stateid = table.Column<long>(name: "state_id", type: "bigint", nullable: true),
                    countryid = table.Column<long>(name: "country_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    street = table.Column<string>(type: "text", nullable: true),
                    street2 = table.Column<string>(type: "text", nullable: true),
                    zip = table.Column<string>(type: "text", nullable: true),
                    city = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("snailmail_letter_missing_required_fields_pkey", x => x.id);
                    table.ForeignKey(
                        name: "snailmail_letter_missing_required_fields_country_id_fkey",
                        column: x => x.countryid,
                        principalTable: "res_country",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "snailmail_letter_missing_required_fields_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "snailmail_letter_missing_required_fields_letter_id_fkey",
                        column: x => x.letterid,
                        principalTable: "snailmail_letter",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "snailmail_letter_missing_required_fields_partner_id_fkey",
                        column: x => x.partnerid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "snailmail_letter_missing_required_fields_state_id_fkey",
                        column: x => x.stateid,
                        principalTable: "res_country_state",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "snailmail_letter_missing_required_fields_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "spreadsheet_dashboard",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    dashboardgroupid = table.Column<long>(name: "dashboard_group_id", type: "bigint", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("spreadsheet_dashboard_pkey", x => x.id);
                    table.ForeignKey(
                        name: "spreadsheet_dashboard_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "spreadsheet_dashboard_dashboard_group_id_fkey",
                        column: x => x.dashboardgroupid,
                        principalTable: "spreadsheet_dashboard_group",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "spreadsheet_dashboard_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_storage_category_capacity",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    storagecategoryid = table.Column<Guid>(name: "storage_category_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    packagetypeid = table.Column<Guid>(name: "package_type_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    quantity = table.Column<double>(type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_storage_category_capacity_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_storage_category_capacity_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_storage_category_capacity_package_type_id_fkey",
                        column: x => x.packagetypeid,
                        principalTable: "stock_package_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_storage_category_capacity_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_storage_category_capacity_storage_category_id_fkey",
                        column: x => x.storagecategoryid,
                        principalTable: "stock_storage_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_storage_category_capacity_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_track_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    wizardid = table.Column<Guid>(name: "wizard_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_track_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_track_line_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_track_line_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_track_line_wizard_id_fkey",
                        column: x => x.wizardid,
                        principalTable: "stock_track_confirmation",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_track_line_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "theme_website_page",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    viewid = table.Column<long>(name: "view_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    url = table.Column<string>(type: "text", nullable: true),
                    headercolor = table.Column<string>(name: "header_color", type: "text", nullable: true),
                    websiteindexed = table.Column<bool>(name: "website_indexed", type: "boolean", nullable: true),
                    ispublished = table.Column<bool>(name: "is_published", type: "boolean", nullable: true),
                    headeroverlay = table.Column<bool>(name: "header_overlay", type: "boolean", nullable: true),
                    headervisible = table.Column<bool>(name: "header_visible", type: "boolean", nullable: true),
                    footervisible = table.Column<bool>(name: "footer_visible", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("theme_website_page_pkey", x => x.id);
                    table.ForeignKey(
                        name: "theme_website_page_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "theme_website_page_view_id_fkey",
                        column: x => x.viewid,
                        principalTable: "theme_ir_ui_view",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "theme_website_page_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "uom_uom",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    categoryid = table.Column<long>(name: "category_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    uomtype = table.Column<string>(name: "uom_type", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    factor = table.Column<decimal>(type: "numeric", nullable: true),
                    rounding = table.Column<decimal>(type: "numeric", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("uom_uom_pkey", x => x.id);
                    table.ForeignKey(
                        name: "uom_uom_category_id_fkey",
                        column: x => x.categoryid,
                        principalTable: "uom_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "uom_uom_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "uom_uom_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "utm_campaign",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    stageid = table.Column<long>(name: "stage_id", type: "bigint", nullable: true),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    title = table.Column<string>(type: "jsonb", nullable: true),
                    isautocampaign = table.Column<bool>(name: "is_auto_campaign", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("utm_campaign_pkey", x => x.id);
                    table.ForeignKey(
                        name: "utm_campaign_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "utm_campaign_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "utm_campaign_stage_id_fkey",
                        column: x => x.stageid,
                        principalTable: "utm_stage",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "utm_campaign_user_id_fkey",
                        column: x => x.userid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "utm_campaign_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "web_editor_converter_test",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    integer = table.Column<long>(type: "bigint", nullable: true),
                    many2one = table.Column<Guid>(type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    @char = table.Column<string>(name: "char", type: "text", nullable: true),
                    selectionstr = table.Column<string>(name: "selection_str", type: "text", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    html = table.Column<string>(type: "text", nullable: true),
                    text = table.Column<string>(type: "text", nullable: true),
                    numeric = table.Column<decimal>(type: "numeric", nullable: true),
                    datetime = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    @float = table.Column<double>(name: "float", type: "double precision", nullable: true),
                    binary = table.Column<byte[]>(type: "bytea", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("web_editor_converter_test_pkey", x => x.id);
                    table.ForeignKey(
                        name: "web_editor_converter_test_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "web_editor_converter_test_many2one_fkey",
                        column: x => x.many2one,
                        principalTable: "web_editor_converter_test_sub",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "web_editor_converter_test_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "resource_calendar_attendance",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    calendarid = table.Column<Guid>(name: "calendar_id", type: "uuid", nullable: true),
                    resourceid = table.Column<Guid>(name: "resource_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    dayofweek = table.Column<string>(type: "text", nullable: true),
                    dayperiod = table.Column<string>(name: "day_period", type: "text", nullable: true),
                    weektype = table.Column<string>(name: "week_type", type: "text", nullable: true),
                    displaytype = table.Column<string>(name: "display_type", type: "text", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    dateto = table.Column<DateTime>(name: "date_to", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    hourfrom = table.Column<double>(name: "hour_from", type: "double precision", nullable: true),
                    hourto = table.Column<double>(name: "hour_to", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("resource_calendar_attendance_pkey", x => x.id);
                    table.ForeignKey(
                        name: "resource_calendar_attendance_calendar_id_fkey",
                        column: x => x.calendarid,
                        principalTable: "resource_calendar",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "resource_calendar_attendance_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "resource_calendar_attendance_resource_id_fkey",
                        column: x => x.resourceid,
                        principalTable: "resource_resource",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "resource_calendar_attendance_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "resource_calendar_leaves",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    calendarid = table.Column<Guid>(name: "calendar_id", type: "uuid", nullable: true),
                    resourceid = table.Column<Guid>(name: "resource_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    timetype = table.Column<string>(name: "time_type", type: "text", nullable: true),
                    datefrom = table.Column<DateTime>(name: "date_from", type: "timestamp without time zone", nullable: true),
                    dateto = table.Column<DateTime>(name: "date_to", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    holidayid = table.Column<Guid>(name: "holiday_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("resource_calendar_leaves_pkey", x => x.id);
                    table.ForeignKey(
                        name: "resource_calendar_leaves_calendar_id_fkey",
                        column: x => x.calendarid,
                        principalTable: "resource_calendar",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "resource_calendar_leaves_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "resource_calendar_leaves_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "resource_calendar_leaves_holiday_id_fkey",
                        column: x => x.holidayid,
                        principalTable: "hr_leave",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "resource_calendar_leaves_resource_id_fkey",
                        column: x => x.resourceid,
                        principalTable: "resource_resource",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "resource_calendar_leaves_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "theme_website_menu",
                columns: table => new
                {
                    id = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    pageid = table.Column<long>(name: "page_id", type: "bigint", nullable: true),
                    sequence = table.Column<long>(type: "bigserial", nullable: false),
                    parentid = table.Column<long>(name: "parent_id", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    url = table.Column<string>(type: "text", nullable: true),
                    megamenuclasses = table.Column<string>(name: "mega_menu_classes", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    megamenucontent = table.Column<string>(name: "mega_menu_content", type: "text", nullable: true),
                    newwindow = table.Column<bool>(name: "new_window", type: "boolean", nullable: true),
                    usemainmenuasparent = table.Column<bool>(name: "use_main_menu_as_parent", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("theme_website_menu_pkey", x => x.id);
                    table.ForeignKey(
                        name: "theme_website_menu_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "theme_website_menu_page_id_fkey",
                        column: x => x.pageid,
                        principalTable: "theme_website_page",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "theme_website_menu_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "theme_website_menu",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "theme_website_menu_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "sale_order_template_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    saleordertemplateid = table.Column<Guid>(name: "sale_order_template_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    productuomid = table.Column<Guid>(name: "product_uom_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    displaytype = table.Column<string>(name: "display_type", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    productuomqty = table.Column<decimal>(name: "product_uom_qty", type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("sale_order_template_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "sale_order_template_line_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_template_line_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_template_line_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_template_line_product_uom_id_fkey",
                        column: x => x.productuomid,
                        principalTable: "uom_uom",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_template_line_sale_order_template_id_fkey",
                        column: x => x.saleordertemplateid,
                        principalTable: "sale_order_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "sale_order_template_line_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "sale_order_template_option",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    saleordertemplateid = table.Column<Guid>(name: "sale_order_template_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    uomid = table.Column<Guid>(name: "uom_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    quantity = table.Column<decimal>(type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("sale_order_template_option_pkey", x => x.id);
                    table.ForeignKey(
                        name: "sale_order_template_option_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_template_option_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_template_option_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "sale_order_template_option_sale_order_template_id_fkey",
                        column: x => x.saleordertemplateid,
                        principalTable: "sale_order_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "sale_order_template_option_uom_id_fkey",
                        column: x => x.uomid,
                        principalTable: "uom_uom",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "sale_order_template_option_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_lot",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    productuomid = table.Column<Guid>(name: "product_uom_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    @ref = table.Column<string>(name: "ref", type: "text", nullable: true),
                    note = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_lot_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_lot_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_lot_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_lot_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_lot_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_lot_product_uom_id_fkey",
                        column: x => x.productuomid,
                        principalTable: "uom_uom",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_lot_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "utm_tag_rel",
                columns: table => new
                {
                    tagid = table.Column<Guid>(name: "tag_id", type: "uuid", nullable: false),
                    campaignid = table.Column<long>(name: "campaign_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("utm_tag_rel_pkey", x => new { x.tagid, x.campaignid });
                    table.ForeignKey(
                        name: "utm_tag_rel_campaign_id_fkey",
                        column: x => x.campaignid,
                        principalTable: "utm_tag",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "utm_tag_rel_tag_id_fkey",
                        column: x => x.tagid,
                        principalTable: "utm_campaign",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "sale_advance_payment_inv_sale_order_rel",
                columns: table => new
                {
                    saleadvancepaymentinvid = table.Column<Guid>(name: "sale_advance_payment_inv_id", type: "uuid", nullable: false),
                    saleorderid = table.Column<Guid>(name: "sale_order_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("sale_advance_payment_inv_sale_order_rel_pkey", x => new { x.saleadvancepaymentinvid, x.saleorderid });
                    table.ForeignKey(
                        name: "sale_advance_payment_inv_sale__sale_advance_payment_inv_id_fkey",
                        column: x => x.saleadvancepaymentinvid,
                        principalTable: "sale_advance_payment_inv",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "sale_order",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    campaignid = table.Column<Guid>(name: "campaign_id", type: "uuid", nullable: true),
                    sourceid = table.Column<Guid>(name: "source_id", type: "uuid", nullable: true),
                    mediumid = table.Column<Guid>(name: "medium_id", type: "uuid", nullable: true),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    partnerinvoiceid = table.Column<Guid>(name: "partner_invoice_id", type: "uuid", nullable: true),
                    partnershippingid = table.Column<Guid>(name: "partner_shipping_id", type: "uuid", nullable: true),
                    fiscalpositionid = table.Column<Guid>(name: "fiscal_position_id", type: "uuid", nullable: true),
                    paymenttermid = table.Column<Guid>(name: "payment_term_id", type: "uuid", nullable: true),
                    pricelistid = table.Column<Guid>(name: "pricelist_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    teamid = table.Column<Guid>(name: "team_id", type: "uuid", nullable: true),
                    analyticaccountid = table.Column<Guid>(name: "analytic_account_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    accesstoken = table.Column<string>(name: "access_token", type: "text", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    clientorderref = table.Column<string>(name: "client_order_ref", type: "text", nullable: true),
                    origin = table.Column<string>(type: "text", nullable: true),
                    reference = table.Column<string>(type: "text", nullable: true),
                    signedby = table.Column<string>(name: "signed_by", type: "text", nullable: true),
                    invoicestatus = table.Column<string>(name: "invoice_status", type: "text", nullable: true),
                    validitydate = table.Column<DateTime>(name: "validity_date", type: "timestamp without time zone", nullable: true),
                    note = table.Column<string>(type: "text", nullable: true),
                    currencyrate = table.Column<decimal>(name: "currency_rate", type: "numeric", nullable: true),
                    amountuntaxed = table.Column<decimal>(name: "amount_untaxed", type: "numeric", nullable: true),
                    amounttax = table.Column<decimal>(name: "amount_tax", type: "numeric", nullable: true),
                    amounttotal = table.Column<decimal>(name: "amount_total", type: "numeric", nullable: true),
                    requiresignature = table.Column<bool>(name: "require_signature", type: "boolean", nullable: true),
                    requirepayment = table.Column<bool>(name: "require_payment", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    commitmentdate = table.Column<DateTime>(name: "commitment_date", type: "timestamp without time zone", nullable: true),
                    dateorder = table.Column<DateTime>(name: "date_order", type: "timestamp without time zone", nullable: true),
                    signedon = table.Column<DateTime>(name: "signed_on", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    saleordertemplateid = table.Column<Guid>(name: "sale_order_template_id", type: "uuid", nullable: true),
                    incoterm = table.Column<Guid>(type: "uuid", nullable: true),
                    warehouseid = table.Column<Guid>(name: "warehouse_id", type: "uuid", nullable: true),
                    procurementgroupid = table.Column<Guid>(name: "procurement_group_id", type: "uuid", nullable: true),
                    incotermlocation = table.Column<string>(name: "incoterm_location", type: "text", nullable: true),
                    pickingpolicy = table.Column<string>(name: "picking_policy", type: "text", nullable: true),
                    deliverystatus = table.Column<string>(name: "delivery_status", type: "text", nullable: true),
                    effectivedate = table.Column<DateTime>(name: "effective_date", type: "timestamp without time zone", nullable: true),
                    amountunpaid = table.Column<decimal>(name: "amount_unpaid", type: "numeric", nullable: true),
                    opportunityid = table.Column<Guid>(name: "opportunity_id", type: "uuid", nullable: true),
                    projectid = table.Column<Guid>(name: "project_id", type: "uuid", nullable: true),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: true),
                    shopwarning = table.Column<string>(name: "shop_warning", type: "text", nullable: true),
                    cartrecoveryemailsent = table.Column<bool>(name: "cart_recovery_email_sent", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("sale_order_pkey", x => x.id);
                    table.ForeignKey(
                        name: "sale_order_analytic_account_id_fkey",
                        column: x => x.analyticaccountid,
                        principalTable: "account_analytic_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_campaign_id_fkey",
                        column: x => x.campaignid,
                        principalTable: "utm_campaign",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "sale_order_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_currency_id_fkey",
                        column: x => x.currencyid,
                        principalTable: "res_currency",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "sale_order_fiscal_position_id_fkey",
                        column: x => x.fiscalpositionid,
                        principalTable: "account_fiscal_position",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_incoterm_fkey",
                        column: x => x.incoterm,
                        principalTable: "account_incoterms",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_medium_id_fkey",
                        column: x => x.mediumid,
                        principalTable: "utm_medium",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_opportunity_id_fkey",
                        column: x => x.opportunityid,
                        principalTable: "crm_lead",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_partner_id_fkey",
                        column: x => x.partnerid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "sale_order_partner_invoice_id_fkey",
                        column: x => x.partnerinvoiceid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "sale_order_partner_shipping_id_fkey",
                        column: x => x.partnershippingid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "sale_order_payment_term_id_fkey",
                        column: x => x.paymenttermid,
                        principalTable: "account_payment_term",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_pricelist_id_fkey",
                        column: x => x.pricelistid,
                        principalTable: "product_pricelist",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "sale_order_procurement_group_id_fkey",
                        column: x => x.procurementgroupid,
                        principalTable: "procurement_group",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_project_id_fkey",
                        column: x => x.projectid,
                        principalTable: "project_project",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_sale_order_template_id_fkey",
                        column: x => x.saleordertemplateid,
                        principalTable: "sale_order_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_source_id_fkey",
                        column: x => x.sourceid,
                        principalTable: "utm_source",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_team_id_fkey",
                        column: x => x.teamid,
                        principalTable: "crm_team",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_user_id_fkey",
                        column: x => x.userid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "sale_order_cancel",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    templateid = table.Column<Guid>(name: "template_id", type: "uuid", nullable: true),
                    authorid = table.Column<Guid>(name: "author_id", type: "uuid", nullable: true),
                    orderid = table.Column<Guid>(name: "order_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    lang = table.Column<string>(type: "text", nullable: true),
                    subject = table.Column<string>(type: "text", nullable: true),
                    emailfrom = table.Column<string>(name: "email_from", type: "text", nullable: true),
                    body = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("sale_order_cancel_pkey", x => x.id);
                    table.ForeignKey(
                        name: "sale_order_cancel_author_id_fkey",
                        column: x => x.authorid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_cancel_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_cancel_order_id_fkey",
                        column: x => x.orderid,
                        principalTable: "sale_order",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "sale_order_cancel_template_id_fkey",
                        column: x => x.templateid,
                        principalTable: "mail_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_cancel_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "sale_order_tag_rel",
                columns: table => new
                {
                    orderid = table.Column<Guid>(name: "order_id", type: "uuid", nullable: false),
                    tagid = table.Column<long>(name: "tag_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("sale_order_tag_rel_pkey", x => new { x.orderid, x.tagid });
                    table.ForeignKey(
                        name: "sale_order_tag_rel_order_id_fkey",
                        column: x => x.orderid,
                        principalTable: "sale_order",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "sale_order_tag_rel_tag_id_fkey",
                        column: x => x.tagid,
                        principalTable: "crm_tag",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "sale_order_transaction_rel",
                columns: table => new
                {
                    transactionid = table.Column<Guid>(name: "transaction_id", type: "uuid", nullable: false),
                    saleorderid = table.Column<Guid>(name: "sale_order_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("sale_order_transaction_rel_pkey", x => new { x.transactionid, x.saleorderid });
                    table.ForeignKey(
                        name: "sale_order_transaction_rel_sale_order_id_fkey",
                        column: x => x.saleorderid,
                        principalTable: "sale_order",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "sale_order_transaction_rel_transaction_id_fkey",
                        column: x => x.transactionid,
                        principalTable: "payment_transaction",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "sale_order_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    orderid = table.Column<Guid>(name: "order_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    currencyid = table.Column<long>(name: "currency_id", type: "bigint", nullable: true),
                    orderpartnerid = table.Column<Guid>(name: "order_partner_id", type: "uuid", nullable: true),
                    salesmanid = table.Column<Guid>(name: "salesman_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    productuom = table.Column<Guid>(name: "product_uom", type: "uuid", nullable: true),
                    productpackagingid = table.Column<Guid>(name: "product_packaging_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    displaytype = table.Column<string>(name: "display_type", type: "text", nullable: true),
                    qtydeliveredmethod = table.Column<string>(name: "qty_delivered_method", type: "text", nullable: true),
                    invoicestatus = table.Column<string>(name: "invoice_status", type: "text", nullable: true),
                    analyticdistribution = table.Column<string>(name: "analytic_distribution", type: "jsonb", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    productuomqty = table.Column<decimal>(name: "product_uom_qty", type: "numeric", nullable: true),
                    priceunit = table.Column<decimal>(name: "price_unit", type: "numeric", nullable: true),
                    discount = table.Column<decimal>(type: "numeric", nullable: true),
                    pricereduce = table.Column<decimal>(name: "price_reduce", type: "numeric", nullable: true),
                    pricesubtotal = table.Column<decimal>(name: "price_subtotal", type: "numeric", nullable: true),
                    pricetotal = table.Column<decimal>(name: "price_total", type: "numeric", nullable: true),
                    pricereducetaxexcl = table.Column<decimal>(name: "price_reduce_taxexcl", type: "numeric", nullable: true),
                    pricereducetaxinc = table.Column<decimal>(name: "price_reduce_taxinc", type: "numeric", nullable: true),
                    qtydelivered = table.Column<decimal>(name: "qty_delivered", type: "numeric", nullable: true),
                    qtyinvoiced = table.Column<decimal>(name: "qty_invoiced", type: "numeric", nullable: true),
                    qtytoinvoice = table.Column<decimal>(name: "qty_to_invoice", type: "numeric", nullable: true),
                    untaxedamountinvoiced = table.Column<decimal>(name: "untaxed_amount_invoiced", type: "numeric", nullable: true),
                    untaxedamounttoinvoice = table.Column<decimal>(name: "untaxed_amount_to_invoice", type: "numeric", nullable: true),
                    isdownpayment = table.Column<bool>(name: "is_downpayment", type: "boolean", nullable: true),
                    isexpense = table.Column<bool>(name: "is_expense", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    pricetax = table.Column<double>(name: "price_tax", type: "double precision", nullable: true),
                    productpackagingqty = table.Column<double>(name: "product_packaging_qty", type: "double precision", nullable: true),
                    customerlead = table.Column<double>(name: "customer_lead", type: "double precision", nullable: true),
                    routeid = table.Column<Guid>(name: "route_id", type: "uuid", nullable: true),
                    isservice = table.Column<bool>(name: "is_service", type: "boolean", nullable: true),
                    projectid = table.Column<Guid>(name: "project_id", type: "uuid", nullable: true),
                    taskid = table.Column<Guid>(name: "task_id", type: "uuid", nullable: true),
                    linkedlineid = table.Column<Guid>(name: "linked_line_id", type: "uuid", nullable: true),
                    shopwarning = table.Column<string>(name: "shop_warning", type: "text", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("sale_order_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "sale_order_line_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_line_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_line_currency_id_fkey",
                        column: x => x.currencyid,
                        principalTable: "res_currency",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_line_linked_line_id_fkey",
                        column: x => x.linkedlineid,
                        principalTable: "sale_order_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "sale_order_line_order_id_fkey",
                        column: x => x.orderid,
                        principalTable: "sale_order",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "sale_order_line_order_partner_id_fkey",
                        column: x => x.orderpartnerid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_line_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "sale_order_line_product_packaging_id_fkey",
                        column: x => x.productpackagingid,
                        principalTable: "product_packaging",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_line_product_uom_fkey",
                        column: x => x.productuom,
                        principalTable: "uom_uom",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "sale_order_line_project_id_fkey",
                        column: x => x.projectid,
                        principalTable: "project_project",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_line_salesman_id_fkey",
                        column: x => x.salesmanid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_line_task_id_fkey",
                        column: x => x.taskid,
                        principalTable: "project_task",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_line_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "sale_order_line_invoice_rel",
                columns: table => new
                {
                    invoicelineid = table.Column<Guid>(name: "invoice_line_id", type: "uuid", nullable: false),
                    orderlineid = table.Column<Guid>(name: "order_line_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("sale_order_line_invoice_rel_pkey", x => new { x.invoicelineid, x.orderlineid });
                    table.ForeignKey(
                        name: "sale_order_line_invoice_rel_invoice_line_id_fkey",
                        column: x => x.invoicelineid,
                        principalTable: "account_move_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "sale_order_line_invoice_rel_order_line_id_fkey",
                        column: x => x.orderlineid,
                        principalTable: "sale_order_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "sale_order_option",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    orderid = table.Column<Guid>(name: "order_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    lineid = table.Column<Guid>(name: "line_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    uomid = table.Column<Guid>(name: "uom_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    quantity = table.Column<decimal>(type: "numeric", nullable: true),
                    priceunit = table.Column<decimal>(name: "price_unit", type: "numeric", nullable: true),
                    discount = table.Column<decimal>(type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("sale_order_option_pkey", x => x.id);
                    table.ForeignKey(
                        name: "sale_order_option_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_option_line_id_fkey",
                        column: x => x.lineid,
                        principalTable: "sale_order_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "sale_order_option_order_id_fkey",
                        column: x => x.orderid,
                        principalTable: "sale_order",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "sale_order_option_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "sale_order_option_uom_id_fkey",
                        column: x => x.uomid,
                        principalTable: "uom_uom",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "sale_order_option_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_assign_serial",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    moveid = table.Column<Guid>(name: "move_id", type: "uuid", nullable: true),
                    nextserialcount = table.Column<long>(name: "next_serial_count", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    nextserialnumber = table.Column<string>(name: "next_serial_number", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    productionid = table.Column<Guid>(name: "production_id", type: "uuid", nullable: true),
                    serialnumbers = table.Column<string>(name: "serial_numbers", type: "text", nullable: true),
                    multiplelotcomponentsnames = table.Column<string>(name: "multiple_lot_components_names", type: "text", nullable: true),
                    expectedqty = table.Column<decimal>(name: "expected_qty", type: "numeric", nullable: true),
                    producedqty = table.Column<decimal>(name: "produced_qty", type: "numeric", nullable: true),
                    showapply = table.Column<bool>(name: "show_apply", type: "boolean", nullable: true),
                    showbackorders = table.Column<bool>(name: "show_backorders", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_assign_serial_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_assign_serial_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_assign_serial_production_id_fkey",
                        column: x => x.productionid,
                        principalTable: "mrp_production",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_assign_serial_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_backorder_confirmation_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    backorderconfirmationid = table.Column<Guid>(name: "backorder_confirmation_id", type: "uuid", nullable: true),
                    pickingid = table.Column<Guid>(name: "picking_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    tobackorder = table.Column<bool>(name: "to_backorder", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_backorder_confirmation_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_backorder_confirmation_lin_backorder_confirmation_id_fkey",
                        column: x => x.backorderconfirmationid,
                        principalTable: "stock_backorder_confirmation",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_backorder_confirmation_line_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_backorder_confirmation_line_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_conflict_quant_rel",
                columns: table => new
                {
                    stockinventoryconflictid = table.Column<Guid>(name: "stock_inventory_conflict_id", type: "uuid", nullable: false),
                    stockquantid = table.Column<Guid>(name: "stock_quant_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_conflict_quant_rel_pkey", x => new { x.stockinventoryconflictid, x.stockquantid });
                    table.ForeignKey(
                        name: "stock_conflict_quant_rel_stock_inventory_conflict_id_fkey",
                        column: x => x.stockinventoryconflictid,
                        principalTable: "stock_inventory_conflict",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "stock_immediate_transfer_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    immediatetransferid = table.Column<Guid>(name: "immediate_transfer_id", type: "uuid", nullable: true),
                    pickingid = table.Column<Guid>(name: "picking_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    toimmediate = table.Column<bool>(name: "to_immediate", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_immediate_transfer_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_immediate_transfer_line_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_immediate_transfer_line_immediate_transfer_id_fkey",
                        column: x => x.immediatetransferid,
                        principalTable: "stock_immediate_transfer",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_immediate_transfer_line_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_inventory_adjustment_name_stock_quant_rel",
                columns: table => new
                {
                    stockinventoryadjustmentnameid = table.Column<Guid>(name: "stock_inventory_adjustment_name_id", type: "uuid", nullable: false),
                    stockquantid = table.Column<Guid>(name: "stock_quant_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_inventory_adjustment_name_stock_quant_rel_pkey", x => new { x.stockinventoryadjustmentnameid, x.stockquantid });
                    table.ForeignKey(
                        name: "stock_inventory_adjustment_na_stock_inventory_adjustment_n_fkey",
                        column: x => x.stockinventoryadjustmentnameid,
                        principalTable: "stock_inventory_adjustment_name",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "stock_inventory_conflict_stock_quant_rel",
                columns: table => new
                {
                    stockinventoryconflictid = table.Column<Guid>(name: "stock_inventory_conflict_id", type: "uuid", nullable: false),
                    stockquantid = table.Column<Guid>(name: "stock_quant_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_inventory_conflict_stock_quant_rel_pkey", x => new { x.stockinventoryconflictid, x.stockquantid });
                    table.ForeignKey(
                        name: "stock_inventory_conflict_stock_stock_inventory_conflict_id_fkey",
                        column: x => x.stockinventoryconflictid,
                        principalTable: "stock_inventory_conflict",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "stock_inventory_warning_stock_quant_rel",
                columns: table => new
                {
                    stockinventorywarningid = table.Column<Guid>(name: "stock_inventory_warning_id", type: "uuid", nullable: false),
                    stockquantid = table.Column<Guid>(name: "stock_quant_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_inventory_warning_stock_quant_rel_pkey", x => new { x.stockinventorywarningid, x.stockquantid });
                    table.ForeignKey(
                        name: "stock_inventory_warning_stock_q_stock_inventory_warning_id_fkey",
                        column: x => x.stockinventorywarningid,
                        principalTable: "stock_inventory_warning",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "stock_location",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    locationid = table.Column<Guid>(name: "location_id", type: "uuid", nullable: true),
                    posx = table.Column<long>(type: "bigint", nullable: true),
                    posy = table.Column<long>(type: "bigint", nullable: true),
                    posz = table.Column<long>(type: "bigint", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    removalstrategyid = table.Column<Guid>(name: "removal_strategy_id", type: "uuid", nullable: true),
                    cyclicinventoryfrequency = table.Column<long>(name: "cyclic_inventory_frequency", type: "bigint", nullable: true),
                    warehouseid = table.Column<Guid>(name: "warehouse_id", type: "uuid", nullable: true),
                    storagecategoryid = table.Column<Guid>(name: "storage_category_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    completename = table.Column<string>(name: "complete_name", type: "text", nullable: true),
                    usage = table.Column<string>(type: "text", nullable: true),
                    parentpath = table.Column<string>(name: "parent_path", type: "text", nullable: true),
                    barcode = table.Column<string>(type: "text", nullable: true),
                    lastinventorydate = table.Column<DateTime>(name: "last_inventory_date", type: "timestamp without time zone", nullable: true),
                    nextinventorydate = table.Column<DateTime>(name: "next_inventory_date", type: "timestamp without time zone", nullable: true),
                    comment = table.Column<string>(type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    scraplocation = table.Column<bool>(name: "scrap_location", type: "boolean", nullable: true),
                    returnlocation = table.Column<bool>(name: "return_location", type: "boolean", nullable: true),
                    replenishlocation = table.Column<bool>(name: "replenish_location", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    valuationinaccountid = table.Column<Guid>(name: "valuation_in_account_id", type: "uuid", nullable: true),
                    valuationoutaccountid = table.Column<Guid>(name: "valuation_out_account_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_location_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_location_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_location_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_location_location_id_fkey",
                        column: x => x.locationid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_location_removal_strategy_id_fkey",
                        column: x => x.removalstrategyid,
                        principalTable: "product_removal",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_location_storage_category_id_fkey",
                        column: x => x.storagecategoryid,
                        principalTable: "stock_storage_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_location_valuation_in_account_id_fkey",
                        column: x => x.valuationinaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_location_valuation_out_account_id_fkey",
                        column: x => x.valuationoutaccountid,
                        principalTable: "account_account",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_location_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_putaway_rule",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    categoryid = table.Column<long>(name: "category_id", type: "bigint", nullable: true),
                    locationinid = table.Column<Guid>(name: "location_in_id", type: "uuid", nullable: true),
                    locationoutid = table.Column<Guid>(name: "location_out_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    storagecategoryid = table.Column<Guid>(name: "storage_category_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_putaway_rule_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_putaway_rule_category_id_fkey",
                        column: x => x.categoryid,
                        principalTable: "product_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_putaway_rule_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_putaway_rule_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_putaway_rule_location_in_id_fkey",
                        column: x => x.locationinid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_putaway_rule_location_out_id_fkey",
                        column: x => x.locationoutid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_putaway_rule_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_putaway_rule_storage_category_id_fkey",
                        column: x => x.storagecategoryid,
                        principalTable: "stock_storage_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_putaway_rule_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_quant_package",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    packagetypeid = table.Column<Guid>(name: "package_type_id", type: "uuid", nullable: true),
                    locationid = table.Column<Guid>(name: "location_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    packageuse = table.Column<string>(name: "package_use", type: "text", nullable: true),
                    packdate = table.Column<DateTime>(name: "pack_date", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_quant_package_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_quant_package_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_quant_package_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_quant_package_location_id_fkey",
                        column: x => x.locationid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_quant_package_package_type_id_fkey",
                        column: x => x.packagetypeid,
                        principalTable: "stock_package_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_quant_package_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_warn_insufficient_qty_repair",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    locationid = table.Column<Guid>(name: "location_id", type: "uuid", nullable: true),
                    repairid = table.Column<Guid>(name: "repair_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    productuomname = table.Column<string>(name: "product_uom_name", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    quantity = table.Column<double>(type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_warn_insufficient_qty_repair_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_warn_insufficient_qty_repair_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warn_insufficient_qty_repair_location_id_fkey",
                        column: x => x.locationid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_warn_insufficient_qty_repair_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_warn_insufficient_qty_repair_repair_id_fkey",
                        column: x => x.repairid,
                        principalTable: "repair_order",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warn_insufficient_qty_repair_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_warn_insufficient_qty_unbuild",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    locationid = table.Column<Guid>(name: "location_id", type: "uuid", nullable: true),
                    unbuildid = table.Column<Guid>(name: "unbuild_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    productuomname = table.Column<string>(name: "product_uom_name", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    quantity = table.Column<double>(type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_warn_insufficient_qty_unbuild_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_warn_insufficient_qty_unbuild_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warn_insufficient_qty_unbuild_location_id_fkey",
                        column: x => x.locationid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_warn_insufficient_qty_unbuild_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_warn_insufficient_qty_unbuild_unbuild_id_fkey",
                        column: x => x.unbuildid,
                        principalTable: "mrp_unbuild",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warn_insufficient_qty_unbuild_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_package_type_stock_putaway_rule_rel",
                columns: table => new
                {
                    stockputawayruleid = table.Column<Guid>(name: "stock_putaway_rule_id", type: "uuid", nullable: false),
                    stockpackagetypeid = table.Column<Guid>(name: "stock_package_type_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_package_type_stock_putaway_rule_rel_pkey", x => new { x.stockputawayruleid, x.stockpackagetypeid });
                    table.ForeignKey(
                        name: "stock_package_type_stock_putaway_rul_stock_package_type_id_fkey",
                        column: x => x.stockpackagetypeid,
                        principalTable: "stock_package_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_package_type_stock_putaway_rul_stock_putaway_rule_id_fkey",
                        column: x => x.stockputawayruleid,
                        principalTable: "stock_putaway_rule",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "stock_quant",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    locationid = table.Column<Guid>(name: "location_id", type: "uuid", nullable: true),
                    storagecategoryid = table.Column<Guid>(name: "storage_category_id", type: "uuid", nullable: true),
                    lotid = table.Column<Guid>(name: "lot_id", type: "uuid", nullable: true),
                    packageid = table.Column<Guid>(name: "package_id", type: "uuid", nullable: true),
                    ownerid = table.Column<Guid>(name: "owner_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    inventorydate = table.Column<DateTime>(name: "inventory_date", type: "timestamp without time zone", nullable: true),
                    quantity = table.Column<decimal>(type: "numeric", nullable: true),
                    reservedquantity = table.Column<decimal>(name: "reserved_quantity", type: "numeric", nullable: true),
                    inventoryquantity = table.Column<decimal>(name: "inventory_quantity", type: "numeric", nullable: true),
                    inventorydiffquantity = table.Column<decimal>(name: "inventory_diff_quantity", type: "numeric", nullable: true),
                    inventoryquantityset = table.Column<bool>(name: "inventory_quantity_set", type: "boolean", nullable: true),
                    indate = table.Column<DateTime>(name: "in_date", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    accountingdate = table.Column<DateTime>(name: "accounting_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_quant_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_quant_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_quant_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_quant_location_id_fkey",
                        column: x => x.locationid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_quant_lot_id_fkey",
                        column: x => x.lotid,
                        principalTable: "stock_lot",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_quant_owner_id_fkey",
                        column: x => x.ownerid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_quant_package_id_fkey",
                        column: x => x.packageid,
                        principalTable: "stock_quant_package",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_quant_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_quant_storage_category_id_fkey",
                        column: x => x.storagecategoryid,
                        principalTable: "stock_storage_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_quant_user_id_fkey",
                        column: x => x.userid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_quant_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_quant_stock_request_count_rel",
                columns: table => new
                {
                    stockrequestcountid = table.Column<Guid>(name: "stock_request_count_id", type: "uuid", nullable: false),
                    stockquantid = table.Column<Guid>(name: "stock_quant_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_quant_stock_request_count_rel_pkey", x => new { x.stockrequestcountid, x.stockquantid });
                    table.ForeignKey(
                        name: "stock_quant_stock_request_count_rel_stock_quant_id_fkey",
                        column: x => x.stockquantid,
                        principalTable: "stock_quant",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_quant_stock_request_count_rel_stock_request_count_id_fkey",
                        column: x => x.stockrequestcountid,
                        principalTable: "stock_request_count",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "stock_quant_stock_track_confirmation_rel",
                columns: table => new
                {
                    stocktrackconfirmationid = table.Column<Guid>(name: "stock_track_confirmation_id", type: "uuid", nullable: false),
                    stockquantid = table.Column<Guid>(name: "stock_quant_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_quant_stock_track_confirmation_rel_pkey", x => new { x.stocktrackconfirmationid, x.stockquantid });
                    table.ForeignKey(
                        name: "stock_quant_stock_track_confir_stock_track_confirmation_id_fkey",
                        column: x => x.stocktrackconfirmationid,
                        principalTable: "stock_track_confirmation",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_quant_stock_track_confirmation_rel_stock_quant_id_fkey",
                        column: x => x.stockquantid,
                        principalTable: "stock_quant",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "stock_move",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    productuom = table.Column<Guid>(name: "product_uom", type: "uuid", nullable: true),
                    locationid = table.Column<Guid>(name: "location_id", type: "uuid", nullable: true),
                    locationdestid = table.Column<Guid>(name: "location_dest_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    pickingid = table.Column<Guid>(name: "picking_id", type: "uuid", nullable: true),
                    groupid = table.Column<Guid>(name: "group_id", type: "uuid", nullable: true),
                    ruleid = table.Column<Guid>(name: "rule_id", type: "uuid", nullable: true),
                    pickingtypeid = table.Column<Guid>(name: "picking_type_id", type: "uuid", nullable: true),
                    originreturnedmoveid = table.Column<Guid>(name: "origin_returned_move_id", type: "uuid", nullable: true),
                    restrictpartnerid = table.Column<Guid>(name: "restrict_partner_id", type: "uuid", nullable: true),
                    warehouseid = table.Column<Guid>(name: "warehouse_id", type: "uuid", nullable: true),
                    packagelevelid = table.Column<Guid>(name: "package_level_id", type: "uuid", nullable: true),
                    nextserialcount = table.Column<long>(name: "next_serial_count", type: "bigint", nullable: true),
                    orderpointid = table.Column<Guid>(name: "orderpoint_id", type: "uuid", nullable: true),
                    productpackagingid = table.Column<Guid>(name: "product_packaging_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    priority = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    origin = table.Column<string>(type: "text", nullable: true),
                    procuremethod = table.Column<string>(name: "procure_method", type: "text", nullable: true),
                    reference = table.Column<string>(type: "text", nullable: true),
                    nextserial = table.Column<string>(name: "next_serial", type: "text", nullable: true),
                    reservationdate = table.Column<DateTime>(name: "reservation_date", type: "timestamp without time zone", nullable: true),
                    descriptionpicking = table.Column<string>(name: "description_picking", type: "text", nullable: true),
                    productqty = table.Column<decimal>(name: "product_qty", type: "numeric", nullable: true),
                    productuomqty = table.Column<decimal>(name: "product_uom_qty", type: "numeric", nullable: true),
                    quantitydone = table.Column<decimal>(name: "quantity_done", type: "numeric", nullable: true),
                    scrapped = table.Column<bool>(type: "boolean", nullable: true),
                    propagatecancel = table.Column<bool>(name: "propagate_cancel", type: "boolean", nullable: true),
                    isinventory = table.Column<bool>(name: "is_inventory", type: "boolean", nullable: true),
                    additional = table.Column<bool>(type: "boolean", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    datedeadline = table.Column<DateTime>(name: "date_deadline", type: "timestamp without time zone", nullable: true),
                    delayalertdate = table.Column<DateTime>(name: "delay_alert_date", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    priceunit = table.Column<double>(name: "price_unit", type: "double precision", nullable: true),
                    analyticaccountlineid = table.Column<Guid>(name: "analytic_account_line_id", type: "uuid", nullable: true),
                    torefund = table.Column<bool>(name: "to_refund", type: "boolean", nullable: true),
                    salelineid = table.Column<Guid>(name: "sale_line_id", type: "uuid", nullable: true),
                    purchaselineid = table.Column<Guid>(name: "purchase_line_id", type: "uuid", nullable: true),
                    createdpurchaselineid = table.Column<Guid>(name: "created_purchase_line_id", type: "uuid", nullable: true),
                    repairid = table.Column<Guid>(name: "repair_id", type: "uuid", nullable: true),
                    isdone = table.Column<bool>(name: "is_done", type: "boolean", nullable: true),
                    unitfactor = table.Column<double>(name: "unit_factor", type: "double precision", nullable: true),
                    createdproductionid = table.Column<Guid>(name: "created_production_id", type: "uuid", nullable: true),
                    productionid = table.Column<Guid>(name: "production_id", type: "uuid", nullable: true),
                    rawmaterialproductionid = table.Column<Guid>(name: "raw_material_production_id", type: "uuid", nullable: true),
                    unbuildid = table.Column<Guid>(name: "unbuild_id", type: "uuid", nullable: true),
                    consumeunbuildid = table.Column<Guid>(name: "consume_unbuild_id", type: "uuid", nullable: true),
                    operationid = table.Column<Guid>(name: "operation_id", type: "uuid", nullable: true),
                    workorderid = table.Column<Guid>(name: "workorder_id", type: "uuid", nullable: true),
                    bomlineid = table.Column<Guid>(name: "bom_line_id", type: "uuid", nullable: true),
                    byproductid = table.Column<Guid>(name: "byproduct_id", type: "uuid", nullable: true),
                    orderfinishedlotid = table.Column<Guid>(name: "order_finished_lot_id", type: "uuid", nullable: true),
                    costshare = table.Column<decimal>(name: "cost_share", type: "numeric", nullable: true),
                    manualconsumption = table.Column<bool>(name: "manual_consumption", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_move_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_move_analytic_account_line_id_fkey",
                        column: x => x.analyticaccountlineid,
                        principalTable: "account_analytic_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_bom_line_id_fkey",
                        column: x => x.bomlineid,
                        principalTable: "mrp_bom_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_byproduct_id_fkey",
                        column: x => x.byproductid,
                        principalTable: "mrp_bom_byproduct",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_move_consume_unbuild_id_fkey",
                        column: x => x.consumeunbuildid,
                        principalTable: "mrp_unbuild",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_created_production_id_fkey",
                        column: x => x.createdproductionid,
                        principalTable: "mrp_production",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_created_purchase_line_id_fkey",
                        column: x => x.createdpurchaselineid,
                        principalTable: "purchase_order_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_group_id_fkey",
                        column: x => x.groupid,
                        principalTable: "procurement_group",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_location_dest_id_fkey",
                        column: x => x.locationdestid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_move_location_id_fkey",
                        column: x => x.locationid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_move_operation_id_fkey",
                        column: x => x.operationid,
                        principalTable: "mrp_routing_workcenter",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_order_finished_lot_id_fkey",
                        column: x => x.orderfinishedlotid,
                        principalTable: "stock_lot",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_origin_returned_move_id_fkey",
                        column: x => x.originreturnedmoveid,
                        principalTable: "stock_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_partner_id_fkey",
                        column: x => x.partnerid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_move_product_packaging_id_fkey",
                        column: x => x.productpackagingid,
                        principalTable: "product_packaging",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_product_uom_fkey",
                        column: x => x.productuom,
                        principalTable: "uom_uom",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_move_production_id_fkey",
                        column: x => x.productionid,
                        principalTable: "mrp_production",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_purchase_line_id_fkey",
                        column: x => x.purchaselineid,
                        principalTable: "purchase_order_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_raw_material_production_id_fkey",
                        column: x => x.rawmaterialproductionid,
                        principalTable: "mrp_production",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_repair_id_fkey",
                        column: x => x.repairid,
                        principalTable: "repair_order",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_restrict_partner_id_fkey",
                        column: x => x.restrictpartnerid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_sale_line_id_fkey",
                        column: x => x.salelineid,
                        principalTable: "sale_order_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_unbuild_id_fkey",
                        column: x => x.unbuildid,
                        principalTable: "mrp_unbuild",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_workorder_id_fkey",
                        column: x => x.workorderid,
                        principalTable: "mrp_workorder",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_move_move_rel",
                columns: table => new
                {
                    moveorigid = table.Column<Guid>(name: "move_orig_id", type: "uuid", nullable: false),
                    movedestid = table.Column<Guid>(name: "move_dest_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_move_move_rel_pkey", x => new { x.moveorigid, x.movedestid });
                    table.ForeignKey(
                        name: "stock_move_move_rel_move_dest_id_fkey",
                        column: x => x.movedestid,
                        principalTable: "stock_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_move_move_rel_move_orig_id_fkey",
                        column: x => x.moveorigid,
                        principalTable: "stock_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "stock_valuation_layer",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    stockvaluationlayerid = table.Column<Guid>(name: "stock_valuation_layer_id", type: "uuid", nullable: true),
                    stockmoveid = table.Column<Guid>(name: "stock_move_id", type: "uuid", nullable: true),
                    accountmoveid = table.Column<Guid>(name: "account_move_id", type: "uuid", nullable: true),
                    accountmovelineid = table.Column<Guid>(name: "account_move_line_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    description = table.Column<string>(type: "text", nullable: true),
                    quantity = table.Column<decimal>(type: "numeric", nullable: true),
                    unitcost = table.Column<decimal>(name: "unit_cost", type: "numeric", nullable: true),
                    value = table.Column<decimal>(type: "numeric", nullable: true),
                    remainingqty = table.Column<decimal>(name: "remaining_qty", type: "numeric", nullable: true),
                    remainingvalue = table.Column<decimal>(name: "remaining_value", type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    pricediffvalue = table.Column<double>(name: "price_diff_value", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_valuation_layer_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_valuation_layer_account_move_id_fkey",
                        column: x => x.accountmoveid,
                        principalTable: "account_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_valuation_layer_account_move_line_id_fkey",
                        column: x => x.accountmovelineid,
                        principalTable: "account_move_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_valuation_layer_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_valuation_layer_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_valuation_layer_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_valuation_layer_stock_move_id_fkey",
                        column: x => x.stockmoveid,
                        principalTable: "stock_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_valuation_layer_stock_valuation_layer_id_fkey",
                        column: x => x.stockvaluationlayerid,
                        principalTable: "stock_valuation_layer",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_valuation_layer_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_move_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    pickingid = table.Column<Guid>(name: "picking_id", type: "uuid", nullable: true),
                    moveid = table.Column<Guid>(name: "move_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    productuomid = table.Column<Guid>(name: "product_uom_id", type: "uuid", nullable: true),
                    packageid = table.Column<Guid>(name: "package_id", type: "uuid", nullable: true),
                    packagelevelid = table.Column<Guid>(name: "package_level_id", type: "uuid", nullable: true),
                    lotid = table.Column<Guid>(name: "lot_id", type: "uuid", nullable: true),
                    resultpackageid = table.Column<Guid>(name: "result_package_id", type: "uuid", nullable: true),
                    ownerid = table.Column<Guid>(name: "owner_id", type: "uuid", nullable: true),
                    locationid = table.Column<Guid>(name: "location_id", type: "uuid", nullable: true),
                    locationdestid = table.Column<Guid>(name: "location_dest_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    productcategoryname = table.Column<string>(name: "product_category_name", type: "text", nullable: true),
                    lotname = table.Column<string>(name: "lot_name", type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    reference = table.Column<string>(type: "text", nullable: true),
                    descriptionpicking = table.Column<string>(name: "description_picking", type: "text", nullable: true),
                    reservedqty = table.Column<decimal>(name: "reserved_qty", type: "numeric", nullable: true),
                    reserveduomqty = table.Column<decimal>(name: "reserved_uom_qty", type: "numeric", nullable: true),
                    qtydone = table.Column<decimal>(name: "qty_done", type: "numeric", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    workorderid = table.Column<Guid>(name: "workorder_id", type: "uuid", nullable: true),
                    productionid = table.Column<Guid>(name: "production_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_move_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_move_line_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_move_line_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_line_location_dest_id_fkey",
                        column: x => x.locationdestid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_move_line_location_id_fkey",
                        column: x => x.locationid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_move_line_lot_id_fkey",
                        column: x => x.lotid,
                        principalTable: "stock_lot",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_line_move_id_fkey",
                        column: x => x.moveid,
                        principalTable: "stock_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_line_owner_id_fkey",
                        column: x => x.ownerid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_line_package_id_fkey",
                        column: x => x.packageid,
                        principalTable: "stock_quant_package",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_move_line_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_move_line_product_uom_id_fkey",
                        column: x => x.productuomid,
                        principalTable: "uom_uom",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_move_line_production_id_fkey",
                        column: x => x.productionid,
                        principalTable: "mrp_production",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_line_result_package_id_fkey",
                        column: x => x.resultpackageid,
                        principalTable: "stock_quant_package",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_move_line_workorder_id_fkey",
                        column: x => x.workorderid,
                        principalTable: "mrp_workorder",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_move_line_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_move_line_consume_rel",
                columns: table => new
                {
                    consumelineid = table.Column<Guid>(name: "consume_line_id", type: "uuid", nullable: false),
                    producelineid = table.Column<Guid>(name: "produce_line_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_move_line_consume_rel_pkey", x => new { x.consumelineid, x.producelineid });
                    table.ForeignKey(
                        name: "stock_move_line_consume_rel_consume_line_id_fkey",
                        column: x => x.consumelineid,
                        principalTable: "stock_move_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_move_line_consume_rel_produce_line_id_fkey",
                        column: x => x.producelineid,
                        principalTable: "stock_move_line",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "stock_orderpoint_snooze_stock_warehouse_orderpoint_rel",
                columns: table => new
                {
                    stockorderpointsnoozeid = table.Column<Guid>(name: "stock_orderpoint_snooze_id", type: "uuid", nullable: false),
                    stockwarehouseorderpointid = table.Column<Guid>(name: "stock_warehouse_orderpoint_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_orderpoint_snooze_stock_warehouse_orderpoint_rel_pkey", x => new { x.stockorderpointsnoozeid, x.stockwarehouseorderpointid });
                    table.ForeignKey(
                        name: "stock_orderpoint_snooze_stock_w_stock_orderpoint_snooze_id_fkey",
                        column: x => x.stockorderpointsnoozeid,
                        principalTable: "stock_orderpoint_snooze",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "stock_package_destination",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    pickingid = table.Column<Guid>(name: "picking_id", type: "uuid", nullable: true),
                    locationdestid = table.Column<Guid>(name: "location_dest_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_package_destination_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_package_destination_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_package_destination_location_dest_id_fkey",
                        column: x => x.locationdestid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_package_destination_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_package_level",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    packageid = table.Column<Guid>(name: "package_id", type: "uuid", nullable: true),
                    pickingid = table.Column<Guid>(name: "picking_id", type: "uuid", nullable: true),
                    locationdestid = table.Column<Guid>(name: "location_dest_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_package_level_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_package_level_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_package_level_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_package_level_location_dest_id_fkey",
                        column: x => x.locationdestid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_package_level_package_id_fkey",
                        column: x => x.packageid,
                        principalTable: "stock_quant_package",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_package_level_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_picking",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    backorderid = table.Column<Guid>(name: "backorder_id", type: "uuid", nullable: true),
                    groupid = table.Column<Guid>(name: "group_id", type: "uuid", nullable: true),
                    locationid = table.Column<Guid>(name: "location_id", type: "uuid", nullable: true),
                    locationdestid = table.Column<Guid>(name: "location_dest_id", type: "uuid", nullable: true),
                    pickingtypeid = table.Column<Guid>(name: "picking_type_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    ownerid = table.Column<Guid>(name: "owner_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    origin = table.Column<string>(type: "text", nullable: true),
                    movetype = table.Column<string>(name: "move_type", type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    priority = table.Column<string>(type: "text", nullable: true),
                    note = table.Column<string>(type: "text", nullable: true),
                    hasdeadlineissue = table.Column<bool>(name: "has_deadline_issue", type: "boolean", nullable: true),
                    printed = table.Column<bool>(type: "boolean", nullable: true),
                    islocked = table.Column<bool>(name: "is_locked", type: "boolean", nullable: true),
                    immediatetransfer = table.Column<bool>(name: "immediate_transfer", type: "boolean", nullable: true),
                    scheduleddate = table.Column<DateTime>(name: "scheduled_date", type: "timestamp without time zone", nullable: true),
                    datedeadline = table.Column<DateTime>(name: "date_deadline", type: "timestamp without time zone", nullable: true),
                    date = table.Column<DateTime>(type: "timestamp without time zone", nullable: true),
                    datedone = table.Column<DateTime>(name: "date_done", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    possessionid = table.Column<Guid>(name: "pos_session_id", type: "uuid", nullable: true),
                    posorderid = table.Column<Guid>(name: "pos_order_id", type: "uuid", nullable: true),
                    saleid = table.Column<Guid>(name: "sale_id", type: "uuid", nullable: true),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_picking_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_picking_backorder_id_fkey",
                        column: x => x.backorderid,
                        principalTable: "stock_picking",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_picking_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_picking_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_picking_group_id_fkey",
                        column: x => x.groupid,
                        principalTable: "procurement_group",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_picking_location_dest_id_fkey",
                        column: x => x.locationdestid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_picking_location_id_fkey",
                        column: x => x.locationid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_picking_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_picking_owner_id_fkey",
                        column: x => x.ownerid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_picking_partner_id_fkey",
                        column: x => x.partnerid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_picking_pos_order_id_fkey",
                        column: x => x.posorderid,
                        principalTable: "pos_order",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_picking_pos_session_id_fkey",
                        column: x => x.possessionid,
                        principalTable: "pos_session",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_picking_sale_id_fkey",
                        column: x => x.saleid,
                        principalTable: "sale_order",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_picking_user_id_fkey",
                        column: x => x.userid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_picking_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_picking_backorder_rel",
                columns: table => new
                {
                    stockbackorderconfirmationid = table.Column<Guid>(name: "stock_backorder_confirmation_id", type: "uuid", nullable: false),
                    stockpickingid = table.Column<Guid>(name: "stock_picking_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_picking_backorder_rel_pkey", x => new { x.stockbackorderconfirmationid, x.stockpickingid });
                    table.ForeignKey(
                        name: "stock_picking_backorder_rel_stock_backorder_confirmation_i_fkey",
                        column: x => x.stockbackorderconfirmationid,
                        principalTable: "stock_backorder_confirmation",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_picking_backorder_rel_stock_picking_id_fkey",
                        column: x => x.stockpickingid,
                        principalTable: "stock_picking",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "stock_picking_sms_rel",
                columns: table => new
                {
                    confirmstocksmsid = table.Column<Guid>(name: "confirm_stock_sms_id", type: "uuid", nullable: false),
                    stockpickingid = table.Column<Guid>(name: "stock_picking_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_picking_sms_rel_pkey", x => new { x.confirmstocksmsid, x.stockpickingid });
                    table.ForeignKey(
                        name: "stock_picking_sms_rel_confirm_stock_sms_id_fkey",
                        column: x => x.confirmstocksmsid,
                        principalTable: "confirm_stock_sms",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_picking_sms_rel_stock_picking_id_fkey",
                        column: x => x.stockpickingid,
                        principalTable: "stock_picking",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "stock_picking_transfer_rel",
                columns: table => new
                {
                    stockimmediatetransferid = table.Column<Guid>(name: "stock_immediate_transfer_id", type: "uuid", nullable: false),
                    stockpickingid = table.Column<Guid>(name: "stock_picking_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_picking_transfer_rel_pkey", x => new { x.stockimmediatetransferid, x.stockpickingid });
                    table.ForeignKey(
                        name: "stock_picking_transfer_rel_stock_immediate_transfer_id_fkey",
                        column: x => x.stockimmediatetransferid,
                        principalTable: "stock_immediate_transfer",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_picking_transfer_rel_stock_picking_id_fkey",
                        column: x => x.stockpickingid,
                        principalTable: "stock_picking",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "stock_return_picking",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    pickingid = table.Column<Guid>(name: "picking_id", type: "uuid", nullable: true),
                    originallocationid = table.Column<Guid>(name: "original_location_id", type: "uuid", nullable: true),
                    parentlocationid = table.Column<Guid>(name: "parent_location_id", type: "uuid", nullable: true),
                    locationid = table.Column<Guid>(name: "location_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    movedestexists = table.Column<bool>(name: "move_dest_exists", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_return_picking_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_return_picking_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_return_picking_location_id_fkey",
                        column: x => x.locationid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_return_picking_original_location_id_fkey",
                        column: x => x.originallocationid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_return_picking_parent_location_id_fkey",
                        column: x => x.parentlocationid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_return_picking_picking_id_fkey",
                        column: x => x.pickingid,
                        principalTable: "stock_picking",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_return_picking_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_scrap",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    messagemainattachmentid = table.Column<Guid>(name: "message_main_attachment_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    productuomid = table.Column<Guid>(name: "product_uom_id", type: "uuid", nullable: true),
                    lotid = table.Column<Guid>(name: "lot_id", type: "uuid", nullable: true),
                    packageid = table.Column<Guid>(name: "package_id", type: "uuid", nullable: true),
                    ownerid = table.Column<Guid>(name: "owner_id", type: "uuid", nullable: true),
                    moveid = table.Column<Guid>(name: "move_id", type: "uuid", nullable: true),
                    pickingid = table.Column<Guid>(name: "picking_id", type: "uuid", nullable: true),
                    locationid = table.Column<Guid>(name: "location_id", type: "uuid", nullable: true),
                    scraplocationid = table.Column<Guid>(name: "scrap_location_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    origin = table.Column<string>(type: "text", nullable: true),
                    state = table.Column<string>(type: "text", nullable: true),
                    scrapqty = table.Column<decimal>(name: "scrap_qty", type: "numeric", nullable: true),
                    datedone = table.Column<DateTime>(name: "date_done", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    productionid = table.Column<Guid>(name: "production_id", type: "uuid", nullable: true),
                    workorderid = table.Column<Guid>(name: "workorder_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_scrap_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_scrap_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_scrap_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_scrap_location_id_fkey",
                        column: x => x.locationid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_scrap_lot_id_fkey",
                        column: x => x.lotid,
                        principalTable: "stock_lot",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_scrap_message_main_attachment_id_fkey",
                        column: x => x.messagemainattachmentid,
                        principalTable: "ir_attachment",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_scrap_move_id_fkey",
                        column: x => x.moveid,
                        principalTable: "stock_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_scrap_owner_id_fkey",
                        column: x => x.ownerid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_scrap_package_id_fkey",
                        column: x => x.packageid,
                        principalTable: "stock_quant_package",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_scrap_picking_id_fkey",
                        column: x => x.pickingid,
                        principalTable: "stock_picking",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_scrap_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_scrap_product_uom_id_fkey",
                        column: x => x.productuomid,
                        principalTable: "uom_uom",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_scrap_production_id_fkey",
                        column: x => x.productionid,
                        principalTable: "mrp_production",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_scrap_scrap_location_id_fkey",
                        column: x => x.scraplocationid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_scrap_workorder_id_fkey",
                        column: x => x.workorderid,
                        principalTable: "mrp_workorder",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_scrap_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_return_picking_line",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    wizardid = table.Column<Guid>(name: "wizard_id", type: "uuid", nullable: true),
                    moveid = table.Column<Guid>(name: "move_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    quantity = table.Column<decimal>(type: "numeric", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    torefund = table.Column<bool>(name: "to_refund", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_return_picking_line_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_return_picking_line_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_return_picking_line_move_id_fkey",
                        column: x => x.moveid,
                        principalTable: "stock_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_return_picking_line_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_return_picking_line_wizard_id_fkey",
                        column: x => x.wizardid,
                        principalTable: "stock_return_picking",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_return_picking_line_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_warn_insufficient_qty_scrap",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    locationid = table.Column<Guid>(name: "location_id", type: "uuid", nullable: true),
                    scrapid = table.Column<Guid>(name: "scrap_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    productuomname = table.Column<string>(name: "product_uom_name", type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    quantity = table.Column<double>(type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_warn_insufficient_qty_scrap_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_warn_insufficient_qty_scrap_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warn_insufficient_qty_scrap_location_id_fkey",
                        column: x => x.locationid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_warn_insufficient_qty_scrap_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_warn_insufficient_qty_scrap_scrap_id_fkey",
                        column: x => x.scrapid,
                        principalTable: "stock_scrap",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warn_insufficient_qty_scrap_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_picking_type",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    color = table.Column<long>(type: "bigint", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    sequenceid = table.Column<Guid>(name: "sequence_id", type: "uuid", nullable: true),
                    defaultlocationsrcid = table.Column<Guid>(name: "default_location_src_id", type: "uuid", nullable: true),
                    defaultlocationdestid = table.Column<Guid>(name: "default_location_dest_id", type: "uuid", nullable: true),
                    returnpickingtypeid = table.Column<Guid>(name: "return_picking_type_id", type: "uuid", nullable: true),
                    warehouseid = table.Column<Guid>(name: "warehouse_id", type: "uuid", nullable: true),
                    reservationdaysbefore = table.Column<long>(name: "reservation_days_before", type: "bigint", nullable: true),
                    reservationdaysbeforepriority = table.Column<long>(name: "reservation_days_before_priority", type: "bigint", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    sequencecode = table.Column<string>(name: "sequence_code", type: "text", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    reservationmethod = table.Column<string>(name: "reservation_method", type: "text", nullable: true),
                    barcode = table.Column<string>(type: "text", nullable: true),
                    createbackorder = table.Column<string>(name: "create_backorder", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    showentirepacks = table.Column<bool>(name: "show_entire_packs", type: "boolean", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    usecreatelots = table.Column<bool>(name: "use_create_lots", type: "boolean", nullable: true),
                    useexistinglots = table.Column<bool>(name: "use_existing_lots", type: "boolean", nullable: true),
                    printlabel = table.Column<bool>(name: "print_label", type: "boolean", nullable: true),
                    showoperations = table.Column<bool>(name: "show_operations", type: "boolean", nullable: true),
                    showreserved = table.Column<bool>(name: "show_reserved", type: "boolean", nullable: true),
                    autoshowreceptionreport = table.Column<bool>(name: "auto_show_reception_report", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    isrepairable = table.Column<bool>(name: "is_repairable", type: "boolean", nullable: true),
                    usecreatecomponentslots = table.Column<bool>(name: "use_create_components_lots", type: "boolean", nullable: true),
                    useautoconsumecomponentslots = table.Column<bool>(name: "use_auto_consume_components_lots", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_picking_type_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_picking_type_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_picking_type_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_picking_type_default_location_dest_id_fkey",
                        column: x => x.defaultlocationdestid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_picking_type_default_location_src_id_fkey",
                        column: x => x.defaultlocationsrcid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_picking_type_return_picking_type_id_fkey",
                        column: x => x.returnpickingtypeid,
                        principalTable: "stock_picking_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_picking_type_sequence_id_fkey",
                        column: x => x.sequenceid,
                        principalTable: "ir_sequence",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_picking_type_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_replenishment_info",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    orderpointid = table.Column<Guid>(name: "orderpoint_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_replenishment_info_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_replenishment_info_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_replenishment_info_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_replenishment_option",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    routeid = table.Column<Guid>(name: "route_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    replenishmentinfoid = table.Column<Guid>(name: "replenishment_info_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_replenishment_option_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_replenishment_option_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_replenishment_option_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_replenishment_option_replenishment_info_id_fkey",
                        column: x => x.replenishmentinfoid,
                        principalTable: "stock_replenishment_info",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_replenishment_option_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_route",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    suppliedwhid = table.Column<Guid>(name: "supplied_wh_id", type: "uuid", nullable: true),
                    supplierwhid = table.Column<Guid>(name: "supplier_wh_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    productselectable = table.Column<bool>(name: "product_selectable", type: "boolean", nullable: true),
                    productcategselectable = table.Column<bool>(name: "product_categ_selectable", type: "boolean", nullable: true),
                    warehouseselectable = table.Column<bool>(name: "warehouse_selectable", type: "boolean", nullable: true),
                    packagingselectable = table.Column<bool>(name: "packaging_selectable", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    saleselectable = table.Column<bool>(name: "sale_selectable", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_route_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_route_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_route_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_route_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_route_categ",
                columns: table => new
                {
                    routeid = table.Column<Guid>(name: "route_id", type: "uuid", nullable: false),
                    categid = table.Column<long>(name: "categ_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_route_categ_pkey", x => new { x.routeid, x.categid });
                    table.ForeignKey(
                        name: "stock_route_categ_categ_id_fkey",
                        column: x => x.categid,
                        principalTable: "product_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_route_categ_route_id_fkey",
                        column: x => x.routeid,
                        principalTable: "stock_route",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "stock_route_move",
                columns: table => new
                {
                    moveid = table.Column<Guid>(name: "move_id", type: "uuid", nullable: false),
                    routeid = table.Column<Guid>(name: "route_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_route_move_pkey", x => new { x.moveid, x.routeid });
                    table.ForeignKey(
                        name: "stock_route_move_move_id_fkey",
                        column: x => x.moveid,
                        principalTable: "stock_move",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_route_move_route_id_fkey",
                        column: x => x.routeid,
                        principalTable: "stock_route",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "stock_route_packaging",
                columns: table => new
                {
                    routeid = table.Column<Guid>(name: "route_id", type: "uuid", nullable: false),
                    packagingid = table.Column<Guid>(name: "packaging_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_route_packaging_pkey", x => new { x.routeid, x.packagingid });
                    table.ForeignKey(
                        name: "stock_route_packaging_packaging_id_fkey",
                        column: x => x.packagingid,
                        principalTable: "product_packaging",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_route_packaging_route_id_fkey",
                        column: x => x.routeid,
                        principalTable: "stock_route",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "stock_route_product",
                columns: table => new
                {
                    routeid = table.Column<Guid>(name: "route_id", type: "uuid", nullable: false),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_route_product_pkey", x => new { x.routeid, x.productid });
                    table.ForeignKey(
                        name: "stock_route_product_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_route_product_route_id_fkey",
                        column: x => x.routeid,
                        principalTable: "stock_route",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "stock_route_stock_rules_report_rel",
                columns: table => new
                {
                    stockrulesreportid = table.Column<Guid>(name: "stock_rules_report_id", type: "uuid", nullable: false),
                    stockrouteid = table.Column<Guid>(name: "stock_route_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_route_stock_rules_report_rel_pkey", x => new { x.stockrulesreportid, x.stockrouteid });
                    table.ForeignKey(
                        name: "stock_route_stock_rules_report_rel_stock_route_id_fkey",
                        column: x => x.stockrouteid,
                        principalTable: "stock_route",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_route_stock_rules_report_rel_stock_rules_report_id_fkey",
                        column: x => x.stockrulesreportid,
                        principalTable: "stock_rules_report",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "stock_route_warehouse",
                columns: table => new
                {
                    routeid = table.Column<Guid>(name: "route_id", type: "uuid", nullable: false),
                    warehouseid = table.Column<Guid>(name: "warehouse_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_route_warehouse_pkey", x => new { x.routeid, x.warehouseid });
                    table.ForeignKey(
                        name: "stock_route_warehouse_route_id_fkey",
                        column: x => x.routeid,
                        principalTable: "stock_route",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "stock_rule",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    groupid = table.Column<Guid>(name: "group_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    locationdestid = table.Column<Guid>(name: "location_dest_id", type: "uuid", nullable: true),
                    locationsrcid = table.Column<Guid>(name: "location_src_id", type: "uuid", nullable: true),
                    routeid = table.Column<Guid>(name: "route_id", type: "uuid", nullable: true),
                    routesequence = table.Column<long>(name: "route_sequence", type: "bigint", nullable: true),
                    pickingtypeid = table.Column<Guid>(name: "picking_type_id", type: "uuid", nullable: true),
                    delay = table.Column<long>(type: "bigint", nullable: true),
                    partneraddressid = table.Column<Guid>(name: "partner_address_id", type: "uuid", nullable: true),
                    warehouseid = table.Column<Guid>(name: "warehouse_id", type: "uuid", nullable: true),
                    propagatewarehouseid = table.Column<Guid>(name: "propagate_warehouse_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    grouppropagationoption = table.Column<string>(name: "group_propagation_option", type: "text", nullable: true),
                    action = table.Column<string>(type: "text", nullable: true),
                    procuremethod = table.Column<string>(name: "procure_method", type: "text", nullable: true),
                    auto = table.Column<string>(type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    propagatecancel = table.Column<bool>(name: "propagate_cancel", type: "boolean", nullable: true),
                    propagatecarrier = table.Column<bool>(name: "propagate_carrier", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_rule_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_rule_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_rule_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_rule_group_id_fkey",
                        column: x => x.groupid,
                        principalTable: "procurement_group",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_rule_location_dest_id_fkey",
                        column: x => x.locationdestid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_rule_location_src_id_fkey",
                        column: x => x.locationsrcid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_rule_partner_address_id_fkey",
                        column: x => x.partneraddressid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_rule_picking_type_id_fkey",
                        column: x => x.pickingtypeid,
                        principalTable: "stock_picking_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_rule_route_id_fkey",
                        column: x => x.routeid,
                        principalTable: "stock_route",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_rule_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_warehouse",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    viewlocationid = table.Column<Guid>(name: "view_location_id", type: "uuid", nullable: true),
                    lotstockid = table.Column<Guid>(name: "lot_stock_id", type: "uuid", nullable: true),
                    whinputstocklocid = table.Column<Guid>(name: "wh_input_stock_loc_id", type: "uuid", nullable: true),
                    whqcstocklocid = table.Column<Guid>(name: "wh_qc_stock_loc_id", type: "uuid", nullable: true),
                    whoutputstocklocid = table.Column<Guid>(name: "wh_output_stock_loc_id", type: "uuid", nullable: true),
                    whpackstocklocid = table.Column<Guid>(name: "wh_pack_stock_loc_id", type: "uuid", nullable: true),
                    mtopullid = table.Column<Guid>(name: "mto_pull_id", type: "uuid", nullable: true),
                    picktypeid = table.Column<Guid>(name: "pick_type_id", type: "uuid", nullable: true),
                    packtypeid = table.Column<Guid>(name: "pack_type_id", type: "uuid", nullable: true),
                    outtypeid = table.Column<Guid>(name: "out_type_id", type: "uuid", nullable: true),
                    intypeid = table.Column<Guid>(name: "in_type_id", type: "uuid", nullable: true),
                    inttypeid = table.Column<Guid>(name: "int_type_id", type: "uuid", nullable: true),
                    returntypeid = table.Column<Guid>(name: "return_type_id", type: "uuid", nullable: true),
                    crossdockrouteid = table.Column<Guid>(name: "crossdock_route_id", type: "uuid", nullable: true),
                    receptionrouteid = table.Column<Guid>(name: "reception_route_id", type: "uuid", nullable: true),
                    deliveryrouteid = table.Column<Guid>(name: "delivery_route_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    code = table.Column<string>(type: "text", nullable: true),
                    receptionsteps = table.Column<string>(name: "reception_steps", type: "text", nullable: true),
                    deliverysteps = table.Column<string>(name: "delivery_steps", type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    postypeid = table.Column<Guid>(name: "pos_type_id", type: "uuid", nullable: true),
                    buypullid = table.Column<Guid>(name: "buy_pull_id", type: "uuid", nullable: true),
                    buytoresupply = table.Column<bool>(name: "buy_to_resupply", type: "boolean", nullable: true),
                    manufacturepullid = table.Column<Guid>(name: "manufacture_pull_id", type: "uuid", nullable: true),
                    manufacturemtopullid = table.Column<Guid>(name: "manufacture_mto_pull_id", type: "uuid", nullable: true),
                    pbmmtopullid = table.Column<Guid>(name: "pbm_mto_pull_id", type: "uuid", nullable: true),
                    samruleid = table.Column<Guid>(name: "sam_rule_id", type: "uuid", nullable: true),
                    manutypeid = table.Column<Guid>(name: "manu_type_id", type: "uuid", nullable: true),
                    pbmtypeid = table.Column<Guid>(name: "pbm_type_id", type: "uuid", nullable: true),
                    samtypeid = table.Column<Guid>(name: "sam_type_id", type: "uuid", nullable: true),
                    pbmrouteid = table.Column<Guid>(name: "pbm_route_id", type: "uuid", nullable: true),
                    pbmlocid = table.Column<Guid>(name: "pbm_loc_id", type: "uuid", nullable: true),
                    samlocid = table.Column<Guid>(name: "sam_loc_id", type: "uuid", nullable: true),
                    manufacturesteps = table.Column<string>(name: "manufacture_steps", type: "text", nullable: true),
                    manufacturetoresupply = table.Column<bool>(name: "manufacture_to_resupply", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_warehouse_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_warehouse_buy_pull_id_fkey",
                        column: x => x.buypullid,
                        principalTable: "stock_rule",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_warehouse_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_crossdock_route_id_fkey",
                        column: x => x.crossdockrouteid,
                        principalTable: "stock_route",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_warehouse_delivery_route_id_fkey",
                        column: x => x.deliveryrouteid,
                        principalTable: "stock_route",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_warehouse_in_type_id_fkey",
                        column: x => x.intypeid,
                        principalTable: "stock_picking_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_int_type_id_fkey",
                        column: x => x.inttypeid,
                        principalTable: "stock_picking_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_lot_stock_id_fkey",
                        column: x => x.lotstockid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_warehouse_manu_type_id_fkey",
                        column: x => x.manutypeid,
                        principalTable: "stock_picking_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_manufacture_mto_pull_id_fkey",
                        column: x => x.manufacturemtopullid,
                        principalTable: "stock_rule",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_manufacture_pull_id_fkey",
                        column: x => x.manufacturepullid,
                        principalTable: "stock_rule",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_mto_pull_id_fkey",
                        column: x => x.mtopullid,
                        principalTable: "stock_rule",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_out_type_id_fkey",
                        column: x => x.outtypeid,
                        principalTable: "stock_picking_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_pack_type_id_fkey",
                        column: x => x.packtypeid,
                        principalTable: "stock_picking_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_partner_id_fkey",
                        column: x => x.partnerid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_pbm_loc_id_fkey",
                        column: x => x.pbmlocid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_pbm_mto_pull_id_fkey",
                        column: x => x.pbmmtopullid,
                        principalTable: "stock_rule",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_pbm_route_id_fkey",
                        column: x => x.pbmrouteid,
                        principalTable: "stock_route",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_warehouse_pbm_type_id_fkey",
                        column: x => x.pbmtypeid,
                        principalTable: "stock_picking_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_pick_type_id_fkey",
                        column: x => x.picktypeid,
                        principalTable: "stock_picking_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_pos_type_id_fkey",
                        column: x => x.postypeid,
                        principalTable: "stock_picking_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_reception_route_id_fkey",
                        column: x => x.receptionrouteid,
                        principalTable: "stock_route",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_warehouse_return_type_id_fkey",
                        column: x => x.returntypeid,
                        principalTable: "stock_picking_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_sam_loc_id_fkey",
                        column: x => x.samlocid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_sam_rule_id_fkey",
                        column: x => x.samruleid,
                        principalTable: "stock_rule",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_sam_type_id_fkey",
                        column: x => x.samtypeid,
                        principalTable: "stock_picking_type",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_view_location_id_fkey",
                        column: x => x.viewlocationid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_warehouse_wh_input_stock_loc_id_fkey",
                        column: x => x.whinputstocklocid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_wh_output_stock_loc_id_fkey",
                        column: x => x.whoutputstocklocid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_wh_pack_stock_loc_id_fkey",
                        column: x => x.whpackstocklocid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_wh_qc_stock_loc_id_fkey",
                        column: x => x.whqcstocklocid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_rules_report_stock_warehouse_rel",
                columns: table => new
                {
                    stockrulesreportid = table.Column<Guid>(name: "stock_rules_report_id", type: "uuid", nullable: false),
                    stockwarehouseid = table.Column<Guid>(name: "stock_warehouse_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_rules_report_stock_warehouse_rel_pkey", x => new { x.stockrulesreportid, x.stockwarehouseid });
                    table.ForeignKey(
                        name: "stock_rules_report_stock_warehouse_r_stock_rules_report_id_fkey",
                        column: x => x.stockrulesreportid,
                        principalTable: "stock_rules_report",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_rules_report_stock_warehouse_rel_stock_warehouse_id_fkey",
                        column: x => x.stockwarehouseid,
                        principalTable: "stock_warehouse",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "stock_warehouse_orderpoint",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    warehouseid = table.Column<Guid>(name: "warehouse_id", type: "uuid", nullable: true),
                    locationid = table.Column<Guid>(name: "location_id", type: "uuid", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true),
                    productcategoryid = table.Column<long>(name: "product_category_id", type: "bigint", nullable: true),
                    groupid = table.Column<Guid>(name: "group_id", type: "uuid", nullable: true),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    routeid = table.Column<Guid>(name: "route_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    trigger = table.Column<string>(type: "text", nullable: true),
                    snoozeduntil = table.Column<DateTime>(name: "snoozed_until", type: "timestamp without time zone", nullable: true),
                    productminqty = table.Column<decimal>(name: "product_min_qty", type: "numeric", nullable: true),
                    productmaxqty = table.Column<decimal>(name: "product_max_qty", type: "numeric", nullable: true),
                    qtymultiple = table.Column<decimal>(name: "qty_multiple", type: "numeric", nullable: true),
                    qtytoorder = table.Column<decimal>(name: "qty_to_order", type: "numeric", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    supplierid = table.Column<Guid>(name: "supplier_id", type: "uuid", nullable: true),
                    vendorid = table.Column<Guid>(name: "vendor_id", type: "uuid", nullable: true),
                    purchasevisibilitydays = table.Column<double>(name: "purchase_visibility_days", type: "double precision", nullable: true),
                    bomid = table.Column<Guid>(name: "bom_id", type: "uuid", nullable: true),
                    manufacturingvisibilitydays = table.Column<double>(name: "manufacturing_visibility_days", type: "double precision", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_warehouse_orderpoint_pkey", x => x.id);
                    table.ForeignKey(
                        name: "stock_warehouse_orderpoint_bom_id_fkey",
                        column: x => x.bomid,
                        principalTable: "mrp_bom",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_orderpoint_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "stock_warehouse_orderpoint_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_orderpoint_group_id_fkey",
                        column: x => x.groupid,
                        principalTable: "procurement_group",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_orderpoint_location_id_fkey",
                        column: x => x.locationid,
                        principalTable: "stock_location",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_warehouse_orderpoint_product_category_id_fkey",
                        column: x => x.productcategoryid,
                        principalTable: "product_category",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_orderpoint_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_warehouse_orderpoint_route_id_fkey",
                        column: x => x.routeid,
                        principalTable: "stock_route",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_orderpoint_supplier_id_fkey",
                        column: x => x.supplierid,
                        principalTable: "product_supplierinfo",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_orderpoint_vendor_id_fkey",
                        column: x => x.vendorid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "stock_warehouse_orderpoint_warehouse_id_fkey",
                        column: x => x.warehouseid,
                        principalTable: "stock_warehouse",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_warehouse_orderpoint_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "stock_wh_resupply_table",
                columns: table => new
                {
                    suppliedwhid = table.Column<Guid>(name: "supplied_wh_id", type: "uuid", nullable: false),
                    supplierwhid = table.Column<Guid>(name: "supplier_wh_id", type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("stock_wh_resupply_table_pkey", x => new { x.suppliedwhid, x.supplierwhid });
                    table.ForeignKey(
                        name: "stock_wh_resupply_table_supplied_wh_id_fkey",
                        column: x => x.suppliedwhid,
                        principalTable: "stock_warehouse",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "stock_wh_resupply_table_supplier_wh_id_fkey",
                        column: x => x.supplierwhid,
                        principalTable: "stock_warehouse",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "website",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    companyid = table.Column<Guid>(name: "company_id", type: "uuid", nullable: true),
                    defaultlangid = table.Column<long>(name: "default_lang_id", type: "bigint", nullable: true),
                    userid = table.Column<Guid>(name: "user_id", type: "uuid", nullable: true),
                    themeid = table.Column<Guid>(name: "theme_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    domain = table.Column<string>(type: "text", nullable: true),
                    socialtwitter = table.Column<string>(name: "social_twitter", type: "text", nullable: true),
                    socialfacebook = table.Column<string>(name: "social_facebook", type: "text", nullable: true),
                    socialgithub = table.Column<string>(name: "social_github", type: "text", nullable: true),
                    sociallinkedin = table.Column<string>(name: "social_linkedin", type: "text", nullable: true),
                    socialyoutube = table.Column<string>(name: "social_youtube", type: "text", nullable: true),
                    socialinstagram = table.Column<string>(name: "social_instagram", type: "text", nullable: true),
                    googleanalyticskey = table.Column<string>(name: "google_analytics_key", type: "text", nullable: true),
                    googlesearchconsole = table.Column<string>(name: "google_search_console", type: "text", nullable: true),
                    googlemapsapikey = table.Column<string>(name: "google_maps_api_key", type: "text", nullable: true),
                    plausiblesharedkey = table.Column<string>(name: "plausible_shared_key", type: "text", nullable: true),
                    plausiblesite = table.Column<string>(name: "plausible_site", type: "text", nullable: true),
                    cdnurl = table.Column<string>(name: "cdn_url", type: "text", nullable: true),
                    homepageurl = table.Column<string>(name: "homepage_url", type: "text", nullable: true),
                    authsignupuninvited = table.Column<string>(name: "auth_signup_uninvited", type: "text", nullable: true),
                    cdnfilters = table.Column<string>(name: "cdn_filters", type: "text", nullable: true),
                    customcodehead = table.Column<string>(name: "custom_code_head", type: "text", nullable: true),
                    customcodefooter = table.Column<string>(name: "custom_code_footer", type: "text", nullable: true),
                    robotstxt = table.Column<string>(name: "robots_txt", type: "text", nullable: true),
                    autoredirectlang = table.Column<bool>(name: "auto_redirect_lang", type: "boolean", nullable: true),
                    cookiesbar = table.Column<bool>(name: "cookies_bar", type: "boolean", nullable: true),
                    configuratordone = table.Column<bool>(name: "configurator_done", type: "boolean", nullable: true),
                    hassocialdefaultimage = table.Column<bool>(name: "has_social_default_image", type: "boolean", nullable: true),
                    cdnactivated = table.Column<bool>(name: "cdn_activated", type: "boolean", nullable: true),
                    specificuseraccount = table.Column<bool>(name: "specific_user_account", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    crmdefaultteamid = table.Column<Guid>(name: "crm_default_team_id", type: "uuid", nullable: true),
                    crmdefaultuserid = table.Column<Guid>(name: "crm_default_user_id", type: "uuid", nullable: true),
                    salespersonid = table.Column<Guid>(name: "salesperson_id", type: "uuid", nullable: true),
                    salesteamid = table.Column<Guid>(name: "salesteam_id", type: "uuid", nullable: true),
                    cartrecoverymailtemplateid = table.Column<Guid>(name: "cart_recovery_mail_template_id", type: "uuid", nullable: true),
                    shopppg = table.Column<long>(name: "shop_ppg", type: "bigint", nullable: true),
                    shopppr = table.Column<long>(name: "shop_ppr", type: "bigint", nullable: true),
                    productpagegridcolumns = table.Column<long>(name: "product_page_grid_columns", type: "bigint", nullable: true),
                    shopdefaultsort = table.Column<string>(name: "shop_default_sort", type: "text", nullable: true),
                    addtocartaction = table.Column<string>(name: "add_to_cart_action", type: "text", nullable: true),
                    accountoncheckout = table.Column<string>(name: "account_on_checkout", type: "text", nullable: true),
                    productpageimagelayout = table.Column<string>(name: "product_page_image_layout", type: "text", nullable: true),
                    productpageimagewidth = table.Column<string>(name: "product_page_image_width", type: "text", nullable: true),
                    productpageimagespacing = table.Column<string>(name: "product_page_image_spacing", type: "text", nullable: true),
                    preventzeropricesaletext = table.Column<string>(name: "prevent_zero_price_sale_text", type: "jsonb", nullable: true),
                    contactusbuttonurl = table.Column<string>(name: "contact_us_button_url", type: "jsonb", nullable: true),
                    sendabandonedcartemail = table.Column<bool>(name: "send_abandoned_cart_email", type: "boolean", nullable: true),
                    preventzeropricesale = table.Column<bool>(name: "prevent_zero_price_sale", type: "boolean", nullable: true),
                    enabledportalreorderbutton = table.Column<bool>(name: "enabled_portal_reorder_button", type: "boolean", nullable: true),
                    cartabandoneddelay = table.Column<double>(name: "cart_abandoned_delay", type: "double precision", nullable: true),
                    warehouseid = table.Column<Guid>(name: "warehouse_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("website_pkey", x => x.id);
                    table.ForeignKey(
                        name: "website_cart_recovery_mail_template_id_fkey",
                        column: x => x.cartrecoverymailtemplateid,
                        principalTable: "mail_template",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_company_id_fkey",
                        column: x => x.companyid,
                        principalTable: "res_company",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "website_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_crm_default_team_id_fkey",
                        column: x => x.crmdefaultteamid,
                        principalTable: "crm_team",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_crm_default_user_id_fkey",
                        column: x => x.crmdefaultuserid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_default_lang_id_fkey",
                        column: x => x.defaultlangid,
                        principalTable: "res_lang",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "website_salesperson_id_fkey",
                        column: x => x.salespersonid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_salesteam_id_fkey",
                        column: x => x.salesteamid,
                        principalTable: "crm_team",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_theme_id_fkey",
                        column: x => x.themeid,
                        principalTable: "ir_module_module",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_user_id_fkey",
                        column: x => x.userid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "website_warehouse_id_fkey",
                        column: x => x.warehouseid,
                        principalTable: "stock_warehouse",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "website_lang_rel",
                columns: table => new
                {
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: false),
                    langid = table.Column<long>(name: "lang_id", type: "bigint", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("website_lang_rel_pkey", x => new { x.websiteid, x.langid });
                    table.ForeignKey(
                        name: "website_lang_rel_lang_id_fkey",
                        column: x => x.langid,
                        principalTable: "res_lang",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "website_lang_rel_website_id_fkey",
                        column: x => x.websiteid,
                        principalTable: "website",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "website_page",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: true),
                    viewid = table.Column<Guid>(name: "view_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    themetemplateid = table.Column<long>(name: "theme_template_id", type: "bigint", nullable: true),
                    url = table.Column<string>(type: "text", nullable: true),
                    headercolor = table.Column<string>(name: "header_color", type: "text", nullable: true),
                    ispublished = table.Column<bool>(name: "is_published", type: "boolean", nullable: true),
                    websiteindexed = table.Column<bool>(name: "website_indexed", type: "boolean", nullable: true),
                    headeroverlay = table.Column<bool>(name: "header_overlay", type: "boolean", nullable: true),
                    headervisible = table.Column<bool>(name: "header_visible", type: "boolean", nullable: true),
                    footervisible = table.Column<bool>(name: "footer_visible", type: "boolean", nullable: true),
                    datepublish = table.Column<DateTime>(name: "date_publish", type: "timestamp without time zone", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("website_page_pkey", x => x.id);
                    table.ForeignKey(
                        name: "website_page_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_page_theme_template_id_fkey",
                        column: x => x.themetemplateid,
                        principalTable: "theme_website_page",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_page_view_id_fkey",
                        column: x => x.viewid,
                        principalTable: "ir_ui_view",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "website_page_website_id_fkey",
                        column: x => x.websiteid,
                        principalTable: "website",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "website_page_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "website_rewrite",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: true),
                    routeid = table.Column<Guid>(name: "route_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    name = table.Column<string>(type: "text", nullable: true),
                    urlfrom = table.Column<string>(name: "url_from", type: "text", nullable: true),
                    urlto = table.Column<string>(name: "url_to", type: "text", nullable: true),
                    redirecttype = table.Column<string>(name: "redirect_type", type: "text", nullable: true),
                    active = table.Column<bool>(type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("website_rewrite_pkey", x => x.id);
                    table.ForeignKey(
                        name: "website_rewrite_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_rewrite_route_id_fkey",
                        column: x => x.routeid,
                        principalTable: "website_route",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_rewrite_website_id_fkey",
                        column: x => x.websiteid,
                        principalTable: "website",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "website_rewrite_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "website_sale_extra_field",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    fieldid = table.Column<Guid>(name: "field_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("website_sale_extra_field_pkey", x => x.id);
                    table.ForeignKey(
                        name: "website_sale_extra_field_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_sale_extra_field_field_id_fkey",
                        column: x => x.fieldid,
                        principalTable: "ir_model_fields",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "website_sale_extra_field_website_id_fkey",
                        column: x => x.websiteid,
                        principalTable: "website",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_sale_extra_field_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "website_snippet_filter",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: true),
                    actionserverid = table.Column<Guid>(name: "action_server_id", type: "uuid", nullable: true),
                    filterid = table.Column<Guid>(name: "filter_id", type: "uuid", nullable: true),
                    limit = table.Column<long>(type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    fieldnames = table.Column<string>(name: "field_names", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    ispublished = table.Column<bool>(name: "is_published", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true),
                    productcrossselling = table.Column<bool>(name: "product_cross_selling", type: "boolean", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("website_snippet_filter_pkey", x => x.id);
                    table.ForeignKey(
                        name: "website_snippet_filter_action_server_id_fkey",
                        column: x => x.actionserverid,
                        principalTable: "ir_act_server",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "website_snippet_filter_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_snippet_filter_filter_id_fkey",
                        column: x => x.filterid,
                        principalTable: "ir_filters",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "website_snippet_filter_website_id_fkey",
                        column: x => x.websiteid,
                        principalTable: "website",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "website_snippet_filter_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "website_visitor",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: true),
                    partnerid = table.Column<Guid>(name: "partner_id", type: "uuid", nullable: true),
                    countryid = table.Column<long>(name: "country_id", type: "bigint", nullable: true),
                    langid = table.Column<long>(name: "lang_id", type: "bigint", nullable: true),
                    visitcount = table.Column<long>(name: "visit_count", type: "bigint", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    accesstoken = table.Column<string>(name: "access_token", type: "text", nullable: true),
                    timezone = table.Column<string>(type: "text", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    lastconnectiondatetime = table.Column<DateTime>(name: "last_connection_datetime", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("website_visitor_pkey", x => x.id);
                    table.ForeignKey(
                        name: "website_visitor_country_id_fkey",
                        column: x => x.countryid,
                        principalTable: "res_country",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_visitor_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_visitor_lang_id_fkey",
                        column: x => x.langid,
                        principalTable: "res_lang",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_visitor_partner_id_fkey",
                        column: x => x.partnerid,
                        principalTable: "res_partner",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_visitor_website_id_fkey",
                        column: x => x.websiteid,
                        principalTable: "website",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_visitor_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "website_menu",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    pageid = table.Column<Guid>(name: "page_id", type: "uuid", nullable: true),
                    sequence = table.Column<long>(type: "bigint", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    websiteid = table.Column<Guid>(name: "website_id", type: "uuid", nullable: true),
                    parentid = table.Column<Guid>(name: "parent_id", type: "uuid", nullable: true),
                    createuid = table.Column<Guid>(name: "create_uid", type: "uuid", nullable: true),
                    writeuid = table.Column<Guid>(name: "write_uid", type: "uuid", nullable: true),
                    themetemplateid = table.Column<long>(name: "theme_template_id", type: "bigint", nullable: true),
                    url = table.Column<string>(type: "text", nullable: true),
                    parentpath = table.Column<string>(name: "parent_path", type: "text", nullable: true),
                    megamenuclasses = table.Column<string>(name: "mega_menu_classes", type: "text", nullable: true),
                    name = table.Column<string>(type: "jsonb", nullable: true),
                    megamenucontent = table.Column<string>(name: "mega_menu_content", type: "jsonb", nullable: true),
                    newwindow = table.Column<bool>(name: "new_window", type: "boolean", nullable: true),
                    createdate = table.Column<DateTime>(name: "create_date", type: "timestamp without time zone", nullable: true),
                    writedate = table.Column<DateTime>(name: "write_date", type: "timestamp without time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("website_menu_pkey", x => x.id);
                    table.ForeignKey(
                        name: "website_menu_create_uid_fkey",
                        column: x => x.createuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_menu_page_id_fkey",
                        column: x => x.pageid,
                        principalTable: "website_page",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "website_menu_parent_id_fkey",
                        column: x => x.parentid,
                        principalTable: "website_menu",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "website_menu_theme_template_id_fkey",
                        column: x => x.themetemplateid,
                        principalTable: "theme_website_menu",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                    table.ForeignKey(
                        name: "website_menu_website_id_fkey",
                        column: x => x.websiteid,
                        principalTable: "website",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "website_menu_write_uid_fkey",
                        column: x => x.writeuid,
                        principalTable: "res_users",
                        principalColumn: "id",
                        onDelete: ReferentialAction.SetNull);
                });

            migrationBuilder.CreateTable(
                name: "website_track",
                columns: table => new
                {
                    id = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "next_uuid()"),
                    visitorid = table.Column<Guid>(name: "visitor_id", type: "uuid", nullable: true),
                    pageid = table.Column<Guid>(name: "page_id", type: "uuid", nullable: true),
                    url = table.Column<string>(type: "text", nullable: true),
                    visitdatetime = table.Column<DateTime>(name: "visit_datetime", type: "timestamp without time zone", nullable: true),
                    productid = table.Column<Guid>(name: "product_id", type: "uuid", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("website_track_pkey", x => x.id);
                    table.ForeignKey(
                        name: "website_track_page_id_fkey",
                        column: x => x.pageid,
                        principalTable: "website_page",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "website_track_product_id_fkey",
                        column: x => x.productid,
                        principalTable: "product_product",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "website_track_visitor_id_fkey",
                        column: x => x.visitorid,
                        principalTable: "website_visitor",
                        principalColumn: "id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "account_account_code_company_uniq",
                table: "account_account",
                columns: new[] { "code", "company_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_account_account_company_id",
                table: "account_account",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_account_create_uid",
                table: "account_account",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_account_currency_id",
                table: "account_account",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_account_group_id",
                table: "account_account",
                column: "group_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_account_message_main_attachment_id",
                table: "account_account",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_account_write_uid",
                table: "account_account",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_account_account_balan_account_account_id_account_ba_idx",
                table: "account_account_account_balance_report_rel",
                columns: new[] { "account_account_id", "account_balance_report_id" });

            migrationBuilder.CreateIndex(
                name: "account_account_account_commo_account_account_id_account_co_idx",
                table: "account_account_account_common_account_report_rel",
                columns: new[] { "account_account_id", "account_common_account_report_id" });

            migrationBuilder.CreateIndex(
                name: "account_account_account_journ_account_journal_id_account_ac_idx",
                table: "account_account_account_journal_rel",
                columns: new[] { "account_journal_id", "account_account_id" });

            migrationBuilder.CreateIndex(
                name: "account_account_account_repor_account_account_id_account_re_idx",
                table: "account_account_account_report_general_ledger_rel",
                columns: new[] { "account_account_id", "account_report_general_ledger_id" });

            migrationBuilder.CreateIndex(
                name: "account_account_account_tag_account_account_tag_id_account__idx",
                table: "account_account_account_tag",
                columns: new[] { "account_account_tag_id", "account_account_id" });

            migrationBuilder.CreateIndex(
                name: "account_account_bankbook_report_account_id_report_line_id_idx",
                table: "account_account_bankbook_report",
                columns: new[] { "account_id", "report_line_id" });

            migrationBuilder.CreateIndex(
                name: "account_account_cashbook_report_account_id_report_line_id_idx",
                table: "account_account_cashbook_report",
                columns: new[] { "account_id", "report_line_id" });

            migrationBuilder.CreateIndex(
                name: "account_account_daybook_report_account_id_report_line_id_idx",
                table: "account_account_daybook_report",
                columns: new[] { "account_id", "report_line_id" });

            migrationBuilder.CreateIndex(
                name: "account_account_financial_report_account_id_report_line_id_idx",
                table: "account_account_financial_report",
                columns: new[] { "account_id", "report_line_id" });

            migrationBuilder.CreateIndex(
                name: "account_account_financial_report__account_type_id_report_id_idx",
                table: "account_account_financial_report_type",
                columns: new[] { "account_type_id", "report_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_account_tag_country_id",
                table: "account_account_tag",
                column: "country_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_account_tag_create_uid",
                table: "account_account_tag",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_account_tag_write_uid",
                table: "account_account_tag",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_account_tag_account_m_account_account_tag_id_accoun_idx",
                table: "account_account_tag_account_move_line_rel",
                columns: new[] { "account_account_tag_id", "account_move_line_id" });

            migrationBuilder.CreateIndex(
                name: "account_account_tag_account_t_account_account_tag_id_accoun_idx",
                table: "account_account_tag_account_tax_repartition_line_rel",
                columns: new[] { "account_account_tag_id", "account_tax_repartition_line_id" });

            migrationBuilder.CreateIndex(
                name: "account_account_tag_product_t_account_account_tag_id_produc_idx",
                table: "account_account_tag_product_template_rel",
                columns: new[] { "account_account_tag_id", "product_template_id" });

            migrationBuilder.CreateIndex(
                name: "account_account_tax_default_rel_tax_id_account_id_idx",
                table: "account_account_tax_default_rel",
                columns: new[] { "tax_id", "account_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_account_template_chart_template_id",
                table: "account_account_template",
                column: "chart_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_account_template_create_uid",
                table: "account_account_template",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_account_template_currency_id",
                table: "account_account_template",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_account_template_message_main_attachment_id",
                table: "account_account_template",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_account_template_write_uid",
                table: "account_account_template",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_account_template_acco_account_account_tag_id_accoun_idx",
                table: "account_account_template_account_tag",
                columns: new[] { "account_account_tag_id", "account_account_template_id" });

            migrationBuilder.CreateIndex(
                name: "account_account_template_tax_rel_tax_id_account_id_idx",
                table: "account_account_template_tax_rel",
                columns: new[] { "tax_id", "account_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_account_type_create_uid",
                table: "account_account_type",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_account_type_write_uid",
                table: "account_account_type",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_accrued_orders_wizard_account_id",
                table: "account_accrued_orders_wizard",
                column: "account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_accrued_orders_wizard_company_id",
                table: "account_accrued_orders_wizard",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_accrued_orders_wizard_create_uid",
                table: "account_accrued_orders_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_accrued_orders_wizard_currency_id",
                table: "account_accrued_orders_wizard",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_accrued_orders_wizard_write_uid",
                table: "account_accrued_orders_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_aged_trial_balance_company_id",
                table: "account_aged_trial_balance",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_aged_trial_balance_create_uid",
                table: "account_aged_trial_balance",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_aged_trial_balance_write_uid",
                table: "account_aged_trial_balance",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_aged_trial_balance_ac_account_journal_id_account_ag_idx",
                table: "account_aged_trial_balance_account_journal_rel",
                columns: new[] { "account_journal_id", "account_aged_trial_balance_id" });

            migrationBuilder.CreateIndex(
                name: "account_aged_trial_balance_re_res_partner_id_account_aged_t_idx",
                table: "account_aged_trial_balance_res_partner_rel",
                columns: new[] { "res_partner_id", "account_aged_trial_balance_id" });

            migrationBuilder.CreateIndex(
                name: "account_analytic_account_code_index",
                table: "account_analytic_account",
                column: "code");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_account_company_id",
                table: "account_analytic_account",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_account_create_uid",
                table: "account_analytic_account",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_account_message_main_attachment_id",
                table: "account_analytic_account",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_account_partner_id",
                table: "account_analytic_account",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_account_plan_id",
                table: "account_analytic_account",
                column: "plan_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_account_root_plan_id",
                table: "account_analytic_account",
                column: "root_plan_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_account_write_uid",
                table: "account_analytic_account",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_analytic_account_acco_account_analytic_account_id_a_idx",
                table: "account_analytic_account_account_common_account_report_rel",
                columns: new[] { "account_analytic_account_id", "account_common_account_report_id" });

            migrationBuilder.CreateIndex(
                name: "account_analytic_account_acco_account_analytic_account_id__idx1",
                table: "account_analytic_account_account_report_general_ledger_rel",
                columns: new[] { "account_analytic_account_id", "account_report_general_ledger_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_applicability_analytic_plan_id",
                table: "account_analytic_applicability",
                column: "analytic_plan_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_applicability_create_uid",
                table: "account_analytic_applicability",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_applicability_product_categ_id",
                table: "account_analytic_applicability",
                column: "product_categ_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_applicability_write_uid",
                table: "account_analytic_applicability",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_analytic_distribution_model_analytic_distribution_gin_i",
                table: "account_analytic_distribution_model",
                column: "analytic_distribution")
                .Annotation("Npgsql:IndexMethod", "gin");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_distribution_model_company_id",
                table: "account_analytic_distribution_model",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_distribution_model_create_uid",
                table: "account_analytic_distribution_model",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_distribution_model_partner_category_id",
                table: "account_analytic_distribution_model",
                column: "partner_category_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_distribution_model_partner_id",
                table: "account_analytic_distribution_model",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_distribution_model_product_categ_id",
                table: "account_analytic_distribution_model",
                column: "product_categ_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_distribution_model_product_id",
                table: "account_analytic_distribution_model",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_distribution_model_write_uid",
                table: "account_analytic_distribution_model",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_analytic_line_account_id_index",
                table: "account_analytic_line",
                column: "account_id");

            migrationBuilder.CreateIndex(
                name: "account_analytic_line_date_index",
                table: "account_analytic_line",
                column: "date");

            migrationBuilder.CreateIndex(
                name: "account_analytic_line_move_line_id_index",
                table: "account_analytic_line",
                column: "move_line_id");

            migrationBuilder.CreateIndex(
                name: "account_analytic_line_user_id_index",
                table: "account_analytic_line",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_line_company_id",
                table: "account_analytic_line",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_line_create_uid",
                table: "account_analytic_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_line_currency_id",
                table: "account_analytic_line",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_line_general_account_id",
                table: "account_analytic_line",
                column: "general_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_line_journal_id",
                table: "account_analytic_line",
                column: "journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_line_partner_id",
                table: "account_analytic_line",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_line_plan_id",
                table: "account_analytic_line",
                column: "plan_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_line_product_id",
                table: "account_analytic_line",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_line_product_uom_id",
                table: "account_analytic_line",
                column: "product_uom_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_line_so_line",
                table: "account_analytic_line",
                column: "so_line");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_line_write_uid",
                table: "account_analytic_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_analytic_plan_parent_path_index",
                table: "account_analytic_plan",
                column: "parent_path");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_plan_company_id",
                table: "account_analytic_plan",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_plan_create_uid",
                table: "account_analytic_plan",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_plan_parent_id",
                table: "account_analytic_plan",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_analytic_plan_write_uid",
                table: "account_analytic_plan",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_asset_asset_analytic_distribution_gin_index",
                table: "account_asset_asset",
                column: "analytic_distribution")
                .Annotation("Npgsql:IndexMethod", "gin");

            migrationBuilder.CreateIndex(
                name: "IX_account_asset_asset_account_analytic_id",
                table: "account_asset_asset",
                column: "account_analytic_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_asset_asset_category_id",
                table: "account_asset_asset",
                column: "category_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_asset_asset_company_id",
                table: "account_asset_asset",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_asset_asset_create_uid",
                table: "account_asset_asset",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_asset_asset_currency_id",
                table: "account_asset_asset",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_asset_asset_invoice_id",
                table: "account_asset_asset",
                column: "invoice_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_asset_asset_message_main_attachment_id",
                table: "account_asset_asset",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_asset_asset_partner_id",
                table: "account_asset_asset",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_asset_asset_write_uid",
                table: "account_asset_asset",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_asset_category_analytic_distribution_gin_index",
                table: "account_asset_category",
                column: "analytic_distribution")
                .Annotation("Npgsql:IndexMethod", "gin");

            migrationBuilder.CreateIndex(
                name: "account_asset_category_name_index",
                table: "account_asset_category",
                column: "name");

            migrationBuilder.CreateIndex(
                name: "account_asset_category_type_index",
                table: "account_asset_category",
                column: "type");

            migrationBuilder.CreateIndex(
                name: "IX_account_asset_category_account_analytic_id",
                table: "account_asset_category",
                column: "account_analytic_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_asset_category_account_asset_id",
                table: "account_asset_category",
                column: "account_asset_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_asset_category_account_depreciation_expense_id",
                table: "account_asset_category",
                column: "account_depreciation_expense_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_asset_category_account_depreciation_id",
                table: "account_asset_category",
                column: "account_depreciation_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_asset_category_company_id",
                table: "account_asset_category",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_asset_category_create_uid",
                table: "account_asset_category",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_asset_category_journal_id",
                table: "account_asset_category",
                column: "journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_asset_category_message_main_attachment_id",
                table: "account_asset_category",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_asset_category_write_uid",
                table: "account_asset_category",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_asset_depreciation_line_depreciation_date_index",
                table: "account_asset_depreciation_line",
                column: "depreciation_date");

            migrationBuilder.CreateIndex(
                name: "account_asset_depreciation_line_name_index",
                table: "account_asset_depreciation_line",
                column: "name");

            migrationBuilder.CreateIndex(
                name: "IX_account_asset_depreciation_line_asset_id",
                table: "account_asset_depreciation_line",
                column: "asset_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_asset_depreciation_line_create_uid",
                table: "account_asset_depreciation_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_asset_depreciation_line_move_id",
                table: "account_asset_depreciation_line",
                column: "move_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_asset_depreciation_line_write_uid",
                table: "account_asset_depreciation_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_automatic_entry_wizard_company_id",
                table: "account_automatic_entry_wizard",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_automatic_entry_wizard_create_uid",
                table: "account_automatic_entry_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_automatic_entry_wizard_destination_account_id",
                table: "account_automatic_entry_wizard",
                column: "destination_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_automatic_entry_wizard_write_uid",
                table: "account_automatic_entry_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_automatic_entry_wizar_account_move_line_id_account__idx",
                table: "account_automatic_entry_wizard_account_move_line_rel",
                columns: new[] { "account_move_line_id", "account_automatic_entry_wizard_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_balance_report_company_id",
                table: "account_balance_report",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_balance_report_create_uid",
                table: "account_balance_report",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_balance_report_write_uid",
                table: "account_balance_report",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_balance_report_journal_rel_journal_id_account_id_idx",
                table: "account_balance_report_journal_rel",
                columns: new[] { "journal_id", "account_id" });

            migrationBuilder.CreateIndex(
                name: "account_balance_report_res_pa_res_partner_id_account_balanc_idx",
                table: "account_balance_report_res_partner_rel",
                columns: new[] { "res_partner_id", "account_balance_report_id" });

            migrationBuilder.CreateIndex(
                name: "account_bank_statement_first_line_index_index",
                table: "account_bank_statement",
                column: "first_line_index");

            migrationBuilder.CreateIndex(
                name: "IX_account_bank_statement_company_id",
                table: "account_bank_statement",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_bank_statement_create_uid",
                table: "account_bank_statement",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_bank_statement_journal_id",
                table: "account_bank_statement",
                column: "journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_bank_statement_write_uid",
                table: "account_bank_statement",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_bank_statement_import_create_uid",
                table: "account_bank_statement_import",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_bank_statement_import_write_uid",
                table: "account_bank_statement_import",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_bank_statement_import_ir_attachment_id_account_bank_idx",
                table: "account_bank_statement_import_ir_attachment_rel",
                columns: new[] { "ir_attachment_id", "account_bank_statement_import_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_bank_statement_import_journal_creation_create_uid",
                table: "account_bank_statement_import_journal_creation",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_bank_statement_import_journal_creation_journal_id",
                table: "account_bank_statement_import_journal_creation",
                column: "journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_bank_statement_import_journal_creation_write_uid",
                table: "account_bank_statement_import_journal_creation",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_bank_statement_ir_att_ir_attachment_id_account_bank_idx",
                table: "account_bank_statement_ir_attachment_rel",
                columns: new[] { "ir_attachment_id", "account_bank_statement_id" });

            migrationBuilder.CreateIndex(
                name: "account_bank_statement_line_internal_index_index",
                table: "account_bank_statement_line",
                column: "internal_index");

            migrationBuilder.CreateIndex(
                name: "account_bank_statement_line_unique_import_id",
                table: "account_bank_statement_line",
                column: "unique_import_id",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_account_bank_statement_line_create_uid",
                table: "account_bank_statement_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_bank_statement_line_currency_id",
                table: "account_bank_statement_line",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_bank_statement_line_foreign_currency_id",
                table: "account_bank_statement_line",
                column: "foreign_currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_bank_statement_line_move_id",
                table: "account_bank_statement_line",
                column: "move_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_bank_statement_line_partner_id",
                table: "account_bank_statement_line",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_bank_statement_line_pos_session_id",
                table: "account_bank_statement_line",
                column: "pos_session_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_bank_statement_line_statement_id",
                table: "account_bank_statement_line",
                column: "statement_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_bank_statement_line_write_uid",
                table: "account_bank_statement_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_bankbook_report_create_uid",
                table: "account_bankbook_report",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_bankbook_report_write_uid",
                table: "account_bankbook_report",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_bankbook_report_accou_account_journal_id_account_ba_idx",
                table: "account_bankbook_report_account_journal_rel",
                columns: new[] { "account_journal_id", "account_bankbook_report_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_budget_post_company_id",
                table: "account_budget_post",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_budget_post_create_uid",
                table: "account_budget_post",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_budget_post_write_uid",
                table: "account_budget_post",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_budget_rel_account_id_budget_id_idx",
                table: "account_budget_rel",
                columns: new[] { "account_id", "budget_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_cash_rounding_create_uid",
                table: "account_cash_rounding",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_cash_rounding_write_uid",
                table: "account_cash_rounding",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_cashbook_report_create_uid",
                table: "account_cashbook_report",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_cashbook_report_write_uid",
                table: "account_cashbook_report",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_cashbook_report_accou_account_journal_id_account_ca_idx",
                table: "account_cashbook_report_account_journal_rel",
                columns: new[] { "account_journal_id", "account_cashbook_report_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_account_journal_early_pay_discount_g~",
                table: "account_chart_template",
                column: "account_journal_early_pay_discount_gain_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_account_journal_early_pay_discount_l~",
                table: "account_chart_template",
                column: "account_journal_early_pay_discount_loss_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_account_journal_payment_credit_accou~",
                table: "account_chart_template",
                column: "account_journal_payment_credit_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_account_journal_payment_debit_accoun~",
                table: "account_chart_template",
                column: "account_journal_payment_debit_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_account_journal_suspense_account_id",
                table: "account_chart_template",
                column: "account_journal_suspense_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_country_id",
                table: "account_chart_template",
                column: "country_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_create_uid",
                table: "account_chart_template",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_currency_id",
                table: "account_chart_template",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_default_cash_difference_expense_acco~",
                table: "account_chart_template",
                column: "default_cash_difference_expense_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_default_cash_difference_income_accou~",
                table: "account_chart_template",
                column: "default_cash_difference_income_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_default_pos_receivable_account_id",
                table: "account_chart_template",
                column: "default_pos_receivable_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_expense_currency_exchange_account_id",
                table: "account_chart_template",
                column: "expense_currency_exchange_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_income_currency_exchange_account_id",
                table: "account_chart_template",
                column: "income_currency_exchange_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_parent_id",
                table: "account_chart_template",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_property_account_expense_categ_id",
                table: "account_chart_template",
                column: "property_account_expense_categ_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_property_account_expense_id",
                table: "account_chart_template",
                column: "property_account_expense_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_property_account_income_categ_id",
                table: "account_chart_template",
                column: "property_account_income_categ_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_property_account_income_id",
                table: "account_chart_template",
                column: "property_account_income_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_property_account_payable_id",
                table: "account_chart_template",
                column: "property_account_payable_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_property_account_receivable_id",
                table: "account_chart_template",
                column: "property_account_receivable_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_property_advance_tax_payment_account~",
                table: "account_chart_template",
                column: "property_advance_tax_payment_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_property_cash_basis_base_account_id",
                table: "account_chart_template",
                column: "property_cash_basis_base_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_property_stock_account_input_categ_id",
                table: "account_chart_template",
                column: "property_stock_account_input_categ_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_property_stock_account_output_categ_~",
                table: "account_chart_template",
                column: "property_stock_account_output_categ_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_property_stock_valuation_account_id",
                table: "account_chart_template",
                column: "property_stock_valuation_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_property_tax_payable_account_id",
                table: "account_chart_template",
                column: "property_tax_payable_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_property_tax_receivable_account_id",
                table: "account_chart_template",
                column: "property_tax_receivable_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_chart_template_write_uid",
                table: "account_chart_template",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_common_account_report_company_id",
                table: "account_common_account_report",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_common_account_report_create_uid",
                table: "account_common_account_report",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_common_account_report_write_uid",
                table: "account_common_account_report",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_common_account_report_account_journal_id_account_co_idx",
                table: "account_common_account_report_account_journal_rel",
                columns: new[] { "account_journal_id", "account_common_account_report_id" });

            migrationBuilder.CreateIndex(
                name: "account_common_account_report_res_partner_id_account_common_idx",
                table: "account_common_account_report_res_partner_rel",
                columns: new[] { "res_partner_id", "account_common_account_report_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_common_journal_report_company_id",
                table: "account_common_journal_report",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_common_journal_report_create_uid",
                table: "account_common_journal_report",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_common_journal_report_write_uid",
                table: "account_common_journal_report",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_common_journal_report_account_journal_id_account_co_idx",
                table: "account_common_journal_report_account_journal_rel",
                columns: new[] { "account_journal_id", "account_common_journal_report_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_common_partner_report_company_id",
                table: "account_common_partner_report",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_common_partner_report_create_uid",
                table: "account_common_partner_report",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_common_partner_report_write_uid",
                table: "account_common_partner_report",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_common_partner_report_account_journal_id_account_co_idx",
                table: "account_common_partner_report_account_journal_rel",
                columns: new[] { "account_journal_id", "account_common_partner_report_id" });

            migrationBuilder.CreateIndex(
                name: "account_common_partner_report_res_partner_id_account_common_idx",
                table: "account_common_partner_report_res_partner_rel",
                columns: new[] { "res_partner_id", "account_common_partner_report_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_common_report_company_id",
                table: "account_common_report",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_common_report_create_uid",
                table: "account_common_report",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_common_report_write_uid",
                table: "account_common_report",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_common_report_account_account_journal_id_account_co_idx",
                table: "account_common_report_account_journal_rel",
                columns: new[] { "account_journal_id", "account_common_report_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_daybook_report_create_uid",
                table: "account_daybook_report",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_daybook_report_write_uid",
                table: "account_daybook_report",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_daybook_report_accoun_account_journal_id_account_da_idx",
                table: "account_daybook_report_account_journal_rel",
                columns: new[] { "account_journal_id", "account_daybook_report_id" });

            migrationBuilder.CreateIndex(
                name: "account_edi_document_unique_edi_document_by_move_by_format",
                table: "account_edi_document",
                columns: new[] { "edi_format_id", "move_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_account_edi_document_attachment_id",
                table: "account_edi_document",
                column: "attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_edi_document_create_uid",
                table: "account_edi_document",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_edi_document_move_id",
                table: "account_edi_document",
                column: "move_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_edi_document_write_uid",
                table: "account_edi_document",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_edi_format_unique_code",
                table: "account_edi_format",
                column: "code",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_account_edi_format_create_uid",
                table: "account_edi_format",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_edi_format_write_uid",
                table: "account_edi_format",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_edi_format_account_jo_account_edi_format_id_account_idx",
                table: "account_edi_format_account_journal_rel",
                columns: new[] { "account_edi_format_id", "account_journal_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_financial_report_account_report_id",
                table: "account_financial_report",
                column: "account_report_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_financial_report_create_uid",
                table: "account_financial_report",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_financial_report_parent_id",
                table: "account_financial_report",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_financial_report_write_uid",
                table: "account_financial_report",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_financial_year_op_company_id",
                table: "account_financial_year_op",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_financial_year_op_create_uid",
                table: "account_financial_year_op",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_financial_year_op_write_uid",
                table: "account_financial_year_op",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_company_id",
                table: "account_fiscal_position",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_country_group_id",
                table: "account_fiscal_position",
                column: "country_group_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_country_id",
                table: "account_fiscal_position",
                column: "country_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_create_uid",
                table: "account_fiscal_position",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_write_uid",
                table: "account_fiscal_position",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_fiscal_position_account_account_src_dest_uniq",
                table: "account_fiscal_position_account",
                columns: new[] { "position_id", "account_src_id", "account_dest_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_account_account_dest_id",
                table: "account_fiscal_position_account",
                column: "account_dest_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_account_account_src_id",
                table: "account_fiscal_position_account",
                column: "account_src_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_account_company_id",
                table: "account_fiscal_position_account",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_account_create_uid",
                table: "account_fiscal_position_account",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_account_write_uid",
                table: "account_fiscal_position_account",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_account_template_account_dest_id",
                table: "account_fiscal_position_account_template",
                column: "account_dest_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_account_template_account_src_id",
                table: "account_fiscal_position_account_template",
                column: "account_src_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_account_template_create_uid",
                table: "account_fiscal_position_account_template",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_account_template_position_id",
                table: "account_fiscal_position_account_template",
                column: "position_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_account_template_write_uid",
                table: "account_fiscal_position_account_template",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_fiscal_position_pos_c_account_fiscal_position_id_po_idx",
                table: "account_fiscal_position_pos_config_rel",
                columns: new[] { "account_fiscal_position_id", "pos_config_id" });

            migrationBuilder.CreateIndex(
                name: "account_fiscal_position_res_c_account_fiscal_position_id_re_idx",
                table: "account_fiscal_position_res_config_settings_rel",
                columns: new[] { "account_fiscal_position_id", "res_config_settings_id" });

            migrationBuilder.CreateIndex(
                name: "account_fiscal_position_res_c_res_country_state_id_account__idx",
                table: "account_fiscal_position_res_country_state_rel",
                columns: new[] { "res_country_state_id", "account_fiscal_position_id" });

            migrationBuilder.CreateIndex(
                name: "account_fiscal_position_tax_tax_src_dest_uniq",
                table: "account_fiscal_position_tax",
                columns: new[] { "position_id", "tax_src_id", "tax_dest_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_tax_company_id",
                table: "account_fiscal_position_tax",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_tax_create_uid",
                table: "account_fiscal_position_tax",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_tax_tax_dest_id",
                table: "account_fiscal_position_tax",
                column: "tax_dest_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_tax_tax_src_id",
                table: "account_fiscal_position_tax",
                column: "tax_src_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_tax_write_uid",
                table: "account_fiscal_position_tax",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_tax_template_create_uid",
                table: "account_fiscal_position_tax_template",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_tax_template_position_id",
                table: "account_fiscal_position_tax_template",
                column: "position_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_tax_template_tax_dest_id",
                table: "account_fiscal_position_tax_template",
                column: "tax_dest_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_tax_template_tax_src_id",
                table: "account_fiscal_position_tax_template",
                column: "tax_src_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_tax_template_write_uid",
                table: "account_fiscal_position_tax_template",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_template_chart_template_id",
                table: "account_fiscal_position_template",
                column: "chart_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_template_country_group_id",
                table: "account_fiscal_position_template",
                column: "country_group_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_template_country_id",
                table: "account_fiscal_position_template",
                column: "country_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_template_create_uid",
                table: "account_fiscal_position_template",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_position_template_write_uid",
                table: "account_fiscal_position_template",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_fiscal_position_templ_res_country_state_id_account__idx",
                table: "account_fiscal_position_template_res_country_state_rel",
                columns: new[] { "res_country_state_id", "account_fiscal_position_template_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_year_company_id",
                table: "account_fiscal_year",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_year_create_uid",
                table: "account_fiscal_year",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_fiscal_year_write_uid",
                table: "account_fiscal_year",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_full_reconcile_create_uid",
                table: "account_full_reconcile",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_full_reconcile_exchange_move_id",
                table: "account_full_reconcile",
                column: "exchange_move_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_full_reconcile_write_uid",
                table: "account_full_reconcile",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_group_parent_id_index",
                table: "account_group",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "account_group_parent_path_index",
                table: "account_group",
                column: "parent_path");

            migrationBuilder.CreateIndex(
                name: "IX_account_group_company_id",
                table: "account_group",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_group_create_uid",
                table: "account_group",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_group_write_uid",
                table: "account_group",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_group_template_chart_template_id",
                table: "account_group_template",
                column: "chart_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_group_template_create_uid",
                table: "account_group_template",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_group_template_parent_id",
                table: "account_group_template",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_group_template_write_uid",
                table: "account_group_template",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_incoterms_create_uid",
                table: "account_incoterms",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_incoterms_write_uid",
                table: "account_incoterms",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_invoice_send_composer_id",
                table: "account_invoice_send",
                column: "composer_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_invoice_send_create_uid",
                table: "account_invoice_send",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_invoice_send_template_id",
                table: "account_invoice_send",
                column: "template_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_invoice_send_write_uid",
                table: "account_invoice_send",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_invoice_transaction_rel_transaction_id_invoice_id_idx",
                table: "account_invoice_transaction_rel",
                columns: new[] { "transaction_id", "invoice_id" });

            migrationBuilder.CreateIndex(
                name: "account_journal_code_company_uniq",
                table: "account_journal",
                columns: new[] { "company_id", "code" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "account_journal_company_id_index",
                table: "account_journal",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_journal_alias_id",
                table: "account_journal",
                column: "alias_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_journal_bank_account_id",
                table: "account_journal",
                column: "bank_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_journal_create_uid",
                table: "account_journal",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_journal_currency_id",
                table: "account_journal",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_journal_default_account_id",
                table: "account_journal",
                column: "default_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_journal_loss_account_id",
                table: "account_journal",
                column: "loss_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_journal_message_main_attachment_id",
                table: "account_journal",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_journal_profit_account_id",
                table: "account_journal",
                column: "profit_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_journal_sale_activity_type_id",
                table: "account_journal",
                column: "sale_activity_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_journal_sale_activity_user_id",
                table: "account_journal",
                column: "sale_activity_user_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_journal_secure_sequence_id",
                table: "account_journal",
                column: "secure_sequence_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_journal_suspense_account_id",
                table: "account_journal",
                column: "suspense_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_journal_write_uid",
                table: "account_journal",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_journal_account_journ_account_journal_id_account_jo_idx",
                table: "account_journal_account_journal_group_rel",
                columns: new[] { "account_journal_id", "account_journal_group_id" });

            migrationBuilder.CreateIndex(
                name: "account_journal_account_print_account_journal_id_account_pr_idx",
                table: "account_journal_account_print_journal_rel",
                columns: new[] { "account_journal_id", "account_print_journal_id" });

            migrationBuilder.CreateIndex(
                name: "account_journal_account_recon_account_journal_id_account_re_idx",
                table: "account_journal_account_reconcile_model_rel",
                columns: new[] { "account_journal_id", "account_reconcile_model_id" });

            migrationBuilder.CreateIndex(
                name: "account_journal_account_recon_account_journal_id_account_r_idx1",
                table: "account_journal_account_reconcile_model_template_rel",
                columns: new[] { "account_journal_id", "account_reconcile_model_template_id" });

            migrationBuilder.CreateIndex(
                name: "account_journal_account_repor_account_journal_id_account_re_idx",
                table: "account_journal_account_report_partner_ledger_rel",
                columns: new[] { "account_journal_id", "account_report_partner_ledger_id" });

            migrationBuilder.CreateIndex(
                name: "account_journal_account_tax_r_account_journal_id_account_ta_idx",
                table: "account_journal_account_tax_report_wizard_rel",
                columns: new[] { "account_journal_id", "account_tax_report_wizard_id" });

            migrationBuilder.CreateIndex(
                name: "account_journal_accounting_re_account_journal_id_accounting_idx",
                table: "account_journal_accounting_report_rel",
                columns: new[] { "account_journal_id", "accounting_report_id" });

            migrationBuilder.CreateIndex(
                name: "account_journal_group_uniq_name",
                table: "account_journal_group",
                columns: new[] { "company_id", "name" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_account_journal_group_create_uid",
                table: "account_journal_group",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_journal_group_write_uid",
                table: "account_journal_group",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_move_company_id_index",
                table: "account_move",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "account_move_date_index",
                table: "account_move",
                column: "date");

            migrationBuilder.CreateIndex(
                name: "account_move_invoice_date_due_index",
                table: "account_move",
                column: "invoice_date_due");

            migrationBuilder.CreateIndex(
                name: "account_move_invoice_date_index",
                table: "account_move",
                column: "invoice_date");

            migrationBuilder.CreateIndex(
                name: "account_move_move_type_index",
                table: "account_move",
                column: "move_type");

            migrationBuilder.CreateIndex(
                name: "account_move_name_index",
                table: "account_move",
                column: "name");

            migrationBuilder.CreateIndex(
                name: "account_move_name_trigram_index",
                table: "account_move",
                column: "name")
                .Annotation("Npgsql:IndexMethod", "gin")
                .Annotation("Npgsql:IndexOperators", new[] { "gin_trgm_ops" });

            migrationBuilder.CreateIndex(
                name: "account_move_payment_id_index",
                table: "account_move",
                column: "payment_id",
                filter: "(payment_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "account_move_payment_idx",
                table: "account_move",
                columns: new[] { "journal_id", "state", "payment_state", "move_type", "date" });

            migrationBuilder.CreateIndex(
                name: "account_move_payment_reference_index",
                table: "account_move",
                column: "payment_reference")
                .Annotation("Npgsql:IndexMethod", "gin")
                .Annotation("Npgsql:IndexOperators", new[] { "gin_trgm_ops" });

            migrationBuilder.CreateIndex(
                name: "account_move_reversed_entry_id_index",
                table: "account_move",
                column: "reversed_entry_id",
                filter: "(reversed_entry_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "account_move_sequence_index",
                table: "account_move",
                columns: new[] { "journal_id", "sequence_prefix", "sequence_number", "name" },
                descending: new[] { false, true, true, false });

            migrationBuilder.CreateIndex(
                name: "account_move_sequence_index2",
                table: "account_move",
                columns: new[] { "journal_id", "id", "sequence_prefix" },
                descending: new[] { false, true, false });

            migrationBuilder.CreateIndex(
                name: "account_move_stock_move_id_index",
                table: "account_move",
                column: "stock_move_id",
                filter: "(stock_move_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "account_move_tax_cash_basis_origin_move_id_index",
                table: "account_move",
                column: "tax_cash_basis_origin_move_id",
                filter: "(tax_cash_basis_origin_move_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "account_move_to_check_idx",
                table: "account_move",
                column: "journal_id",
                filter: "(to_check = true)");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_auto_post_origin_id",
                table: "account_move",
                column: "auto_post_origin_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_campaign_id",
                table: "account_move",
                column: "campaign_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_commercial_partner_id",
                table: "account_move",
                column: "commercial_partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_create_uid",
                table: "account_move",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_currency_id",
                table: "account_move",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_fiscal_position_id",
                table: "account_move",
                column: "fiscal_position_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_invoice_cash_rounding_id",
                table: "account_move",
                column: "invoice_cash_rounding_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_invoice_incoterm_id",
                table: "account_move",
                column: "invoice_incoterm_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_invoice_payment_term_id",
                table: "account_move",
                column: "invoice_payment_term_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_invoice_user_id",
                table: "account_move",
                column: "invoice_user_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_medium_id",
                table: "account_move",
                column: "medium_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_message_main_attachment_id",
                table: "account_move",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_partner_bank_id",
                table: "account_move",
                column: "partner_bank_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_partner_id",
                table: "account_move",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_partner_shipping_id",
                table: "account_move",
                column: "partner_shipping_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_source_id",
                table: "account_move",
                column: "source_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_statement_line_id",
                table: "account_move",
                column: "statement_line_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_tax_cash_basis_rec_id",
                table: "account_move",
                column: "tax_cash_basis_rec_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_team_id",
                table: "account_move",
                column: "team_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_website_id",
                table: "account_move",
                column: "website_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_write_uid",
                table: "account_move",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_move_account_invoice__account_move_id_account_invoi_idx",
                table: "account_move_account_invoice_send_rel",
                columns: new[] { "account_move_id", "account_invoice_send_id" });

            migrationBuilder.CreateIndex(
                name: "account_move_account_resequen_account_move_id_account_reseq_idx",
                table: "account_move_account_resequence_wizard_rel",
                columns: new[] { "account_move_id", "account_resequence_wizard_id" });

            migrationBuilder.CreateIndex(
                name: "account_move_line_account_id_index",
                table: "account_move_line",
                column: "account_id");

            migrationBuilder.CreateIndex(
                name: "account_move_line_company_id_index",
                table: "account_move_line",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "account_move_line_date_maturity_index",
                table: "account_move_line",
                column: "date_maturity");

            migrationBuilder.CreateIndex(
                name: "account_move_line_date_name_id_idx",
                table: "account_move_line",
                columns: new[] { "date", "move_name", "id" },
                descending: new[] { true, true, false });

            migrationBuilder.CreateIndex(
                name: "account_move_line_full_reconcile_id_index",
                table: "account_move_line",
                column: "full_reconcile_id",
                filter: "(full_reconcile_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "account_move_line_group_tax_id_index",
                table: "account_move_line",
                column: "group_tax_id",
                filter: "(group_tax_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "account_move_line_journal_id_index",
                table: "account_move_line",
                column: "journal_id");

            migrationBuilder.CreateIndex(
                name: "account_move_line_move_id_index",
                table: "account_move_line",
                column: "move_id");

            migrationBuilder.CreateIndex(
                name: "account_move_line_move_name_index",
                table: "account_move_line",
                column: "move_name");

            migrationBuilder.CreateIndex(
                name: "account_move_line_partner_id_ref_idx",
                table: "account_move_line",
                columns: new[] { "partner_id", "ref" });

            migrationBuilder.CreateIndex(
                name: "account_move_line_payment_id_index",
                table: "account_move_line",
                column: "payment_id",
                filter: "(payment_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "account_move_line_purchase_line_id_index",
                table: "account_move_line",
                column: "purchase_line_id",
                filter: "(purchase_line_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "account_move_line_ref_index",
                table: "account_move_line",
                column: "ref")
                .Annotation("Npgsql:IndexMethod", "gin")
                .Annotation("Npgsql:IndexOperators", new[] { "gin_trgm_ops" });

            migrationBuilder.CreateIndex(
                name: "account_move_line_statement_id_index",
                table: "account_move_line",
                column: "statement_id",
                filter: "(statement_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "account_move_line_statement_line_id_index",
                table: "account_move_line",
                column: "statement_line_id",
                filter: "(statement_line_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "account_move_line_vehicle_id_index",
                table: "account_move_line",
                column: "vehicle_id",
                filter: "(vehicle_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_line_asset_category_id",
                table: "account_move_line",
                column: "asset_category_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_line_company_currency_id",
                table: "account_move_line",
                column: "company_currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_line_create_uid",
                table: "account_move_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_line_currency_id",
                table: "account_move_line",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_line_expense_id",
                table: "account_move_line",
                column: "expense_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_line_followup_line_id",
                table: "account_move_line",
                column: "followup_line_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_line_product_id",
                table: "account_move_line",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_line_product_uom_id",
                table: "account_move_line",
                column: "product_uom_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_line_reconcile_model_id",
                table: "account_move_line",
                column: "reconcile_model_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_line_tax_group_id",
                table: "account_move_line",
                column: "tax_group_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_line_tax_line_id",
                table: "account_move_line",
                column: "tax_line_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_line_tax_repartition_line_id",
                table: "account_move_line",
                column: "tax_repartition_line_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_line_write_uid",
                table: "account_move_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_move_line_account_tax_account_tax_id_account_move_l_idx",
                table: "account_move_line_account_tax_rel",
                columns: new[] { "account_tax_id", "account_move_line_id" });

            migrationBuilder.CreateIndex(
                name: "account_move_purchase_order_r_account_move_id_purchase_orde_idx",
                table: "account_move_purchase_order_rel",
                columns: new[] { "account_move_id", "purchase_order_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_move_reversal_company_id",
                table: "account_move_reversal",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_reversal_create_uid",
                table: "account_move_reversal",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_reversal_journal_id",
                table: "account_move_reversal",
                column: "journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_move_reversal_write_uid",
                table: "account_move_reversal",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_move_reversal_move_move_id_reversal_id_idx",
                table: "account_move_reversal_move",
                columns: new[] { "move_id", "reversal_id" });

            migrationBuilder.CreateIndex(
                name: "account_move_reversal_new_move_new_move_id_reversal_id_idx",
                table: "account_move_reversal_new_move",
                columns: new[] { "new_move_id", "reversal_id" });

            migrationBuilder.CreateIndex(
                name: "account_partial_reconcile_credit_move_id_index",
                table: "account_partial_reconcile",
                column: "credit_move_id");

            migrationBuilder.CreateIndex(
                name: "account_partial_reconcile_debit_move_id_index",
                table: "account_partial_reconcile",
                column: "debit_move_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_partial_reconcile_company_id",
                table: "account_partial_reconcile",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_partial_reconcile_create_uid",
                table: "account_partial_reconcile",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_partial_reconcile_credit_currency_id",
                table: "account_partial_reconcile",
                column: "credit_currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_partial_reconcile_debit_currency_id",
                table: "account_partial_reconcile",
                column: "debit_currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_partial_reconcile_exchange_move_id",
                table: "account_partial_reconcile",
                column: "exchange_move_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_partial_reconcile_full_reconcile_id",
                table: "account_partial_reconcile",
                column: "full_reconcile_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_partial_reconcile_write_uid",
                table: "account_partial_reconcile",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_create_uid",
                table: "account_payment",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_currency_id",
                table: "account_payment",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_destination_account_id",
                table: "account_payment",
                column: "destination_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_destination_journal_id",
                table: "account_payment",
                column: "destination_journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_force_outstanding_account_id",
                table: "account_payment",
                column: "force_outstanding_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_message_main_attachment_id",
                table: "account_payment",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_move_id",
                table: "account_payment",
                column: "move_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_outstanding_account_id",
                table: "account_payment",
                column: "outstanding_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_paired_internal_transfer_payment_id",
                table: "account_payment",
                column: "paired_internal_transfer_payment_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_partner_bank_id",
                table: "account_payment",
                column: "partner_bank_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_partner_id",
                table: "account_payment",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_payment_method_id",
                table: "account_payment",
                column: "payment_method_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_payment_method_line_id",
                table: "account_payment",
                column: "payment_method_line_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_payment_token_id",
                table: "account_payment",
                column: "payment_token_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_payment_transaction_id",
                table: "account_payment",
                column: "payment_transaction_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_pos_payment_method_id",
                table: "account_payment",
                column: "pos_payment_method_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_pos_session_id",
                table: "account_payment",
                column: "pos_session_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_source_payment_id",
                table: "account_payment",
                column: "source_payment_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_write_uid",
                table: "account_payment",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_payment_account_bank__account_payment_id_account_ba_idx",
                table: "account_payment_account_bank_statement_line_rel",
                columns: new[] { "account_payment_id", "account_bank_statement_line_id" });

            migrationBuilder.CreateIndex(
                name: "account_payment_method_name_code_unique",
                table: "account_payment_method",
                columns: new[] { "code", "payment_type" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_method_create_uid",
                table: "account_payment_method",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_method_write_uid",
                table: "account_payment_method",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_method_line_create_uid",
                table: "account_payment_method_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_method_line_journal_id",
                table: "account_payment_method_line",
                column: "journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_method_line_payment_account_id",
                table: "account_payment_method_line",
                column: "payment_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_method_line_payment_method_id",
                table: "account_payment_method_line",
                column: "payment_method_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_method_line_payment_provider_id",
                table: "account_payment_method_line",
                column: "payment_provider_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_method_line_write_uid",
                table: "account_payment_method_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_register_company_id",
                table: "account_payment_register",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_register_create_uid",
                table: "account_payment_register",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_register_currency_id",
                table: "account_payment_register",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_register_journal_id",
                table: "account_payment_register",
                column: "journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_register_partner_bank_id",
                table: "account_payment_register",
                column: "partner_bank_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_register_partner_id",
                table: "account_payment_register",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_register_payment_method_line_id",
                table: "account_payment_register",
                column: "payment_method_line_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_register_payment_token_id",
                table: "account_payment_register",
                column: "payment_token_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_register_source_currency_id",
                table: "account_payment_register",
                column: "source_currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_register_write_uid",
                table: "account_payment_register",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_register_writeoff_account_id",
                table: "account_payment_register",
                column: "writeoff_account_id");

            migrationBuilder.CreateIndex(
                name: "account_payment_register_move_line_rel_line_id_wizard_id_idx",
                table: "account_payment_register_move_line_rel",
                columns: new[] { "line_id", "wizard_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_term_company_id",
                table: "account_payment_term",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_term_create_uid",
                table: "account_payment_term",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_term_write_uid",
                table: "account_payment_term",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_payment_term_line_payment_id_index",
                table: "account_payment_term_line",
                column: "payment_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_term_line_create_uid",
                table: "account_payment_term_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_payment_term_line_write_uid",
                table: "account_payment_term_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_print_journal_company_id",
                table: "account_print_journal",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_print_journal_create_uid",
                table: "account_print_journal",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_print_journal_write_uid",
                table: "account_print_journal",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_reconcile_model_name_unique",
                table: "account_reconcile_model",
                columns: new[] { "name", "company_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_account_reconcile_model_company_id",
                table: "account_reconcile_model",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_reconcile_model_create_uid",
                table: "account_reconcile_model",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_reconcile_model_message_main_attachment_id",
                table: "account_reconcile_model",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_reconcile_model_write_uid",
                table: "account_reconcile_model",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_reconcile_model_line_analytic_distribution_gin_index",
                table: "account_reconcile_model_line",
                column: "analytic_distribution")
                .Annotation("Npgsql:IndexMethod", "gin");

            migrationBuilder.CreateIndex(
                name: "IX_account_reconcile_model_line_account_id",
                table: "account_reconcile_model_line",
                column: "account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_reconcile_model_line_company_id",
                table: "account_reconcile_model_line",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_reconcile_model_line_create_uid",
                table: "account_reconcile_model_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_reconcile_model_line_journal_id",
                table: "account_reconcile_model_line",
                column: "journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_reconcile_model_line_model_id",
                table: "account_reconcile_model_line",
                column: "model_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_reconcile_model_line_write_uid",
                table: "account_reconcile_model_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_reconcile_model_line__account_tax_id_account_reconc_idx",
                table: "account_reconcile_model_line_account_tax_rel",
                columns: new[] { "account_tax_id", "account_reconcile_model_line_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_reconcile_model_line_template_account_id",
                table: "account_reconcile_model_line_template",
                column: "account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_reconcile_model_line_template_create_uid",
                table: "account_reconcile_model_line_template",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_reconcile_model_line_template_model_id",
                table: "account_reconcile_model_line_template",
                column: "model_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_reconcile_model_line_template_write_uid",
                table: "account_reconcile_model_line_template",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_reconcile_model_line__account_tax_template_id_accou_idx",
                table: "account_reconcile_model_line_template_account_tax_template_rel",
                columns: new[] { "account_tax_template_id", "account_reconcile_model_line_template_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_reconcile_model_partner_mapping_create_uid",
                table: "account_reconcile_model_partner_mapping",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_reconcile_model_partner_mapping_model_id",
                table: "account_reconcile_model_partner_mapping",
                column: "model_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_reconcile_model_partner_mapping_partner_id",
                table: "account_reconcile_model_partner_mapping",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_reconcile_model_partner_mapping_write_uid",
                table: "account_reconcile_model_partner_mapping",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_reconcile_model_res_p_res_partner_category_id_accou_idx",
                table: "account_reconcile_model_res_partner_category_rel",
                columns: new[] { "res_partner_category_id", "account_reconcile_model_id" });

            migrationBuilder.CreateIndex(
                name: "account_reconcile_model_res_p_res_partner_id_account_reconc_idx",
                table: "account_reconcile_model_res_partner_rel",
                columns: new[] { "res_partner_id", "account_reconcile_model_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_reconcile_model_template_chart_template_id",
                table: "account_reconcile_model_template",
                column: "chart_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_reconcile_model_template_create_uid",
                table: "account_reconcile_model_template",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_reconcile_model_template_write_uid",
                table: "account_reconcile_model_template",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_reconcile_model_templ_res_partner_category_id_accou_idx",
                table: "account_reconcile_model_template_res_partner_category_rel",
                columns: new[] { "res_partner_category_id", "account_reconcile_model_template_id" });

            migrationBuilder.CreateIndex(
                name: "account_reconcile_model_templ_res_partner_id_account_reconc_idx",
                table: "account_reconcile_model_template_res_partner_rel",
                columns: new[] { "res_partner_id", "account_reconcile_model_template_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_recurring_template_company_id",
                table: "account_recurring_template",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_recurring_template_create_uid",
                table: "account_recurring_template",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_recurring_template_journal_id",
                table: "account_recurring_template",
                column: "journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_recurring_template_write_uid",
                table: "account_recurring_template",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_chart_template_id",
                table: "account_report",
                column: "chart_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_country_id",
                table: "account_report",
                column: "country_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_create_uid",
                table: "account_report",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_root_report_id",
                table: "account_report",
                column: "root_report_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_write_uid",
                table: "account_report",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_column_create_uid",
                table: "account_report_column",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_column_custom_audit_action_id",
                table: "account_report_column",
                column: "custom_audit_action_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_column_report_id",
                table: "account_report_column",
                column: "report_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_column_write_uid",
                table: "account_report_column",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_expression_create_uid",
                table: "account_report_expression",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_expression_report_line_id",
                table: "account_report_expression",
                column: "report_line_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_expression_write_uid",
                table: "account_report_expression",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_external_value_carryover_origin_report_line_~",
                table: "account_report_external_value",
                column: "carryover_origin_report_line_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_external_value_company_id",
                table: "account_report_external_value",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_external_value_create_uid",
                table: "account_report_external_value",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_external_value_foreign_vat_fiscal_position_id",
                table: "account_report_external_value",
                column: "foreign_vat_fiscal_position_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_external_value_target_report_expression_id",
                table: "account_report_external_value",
                column: "target_report_expression_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_external_value_write_uid",
                table: "account_report_external_value",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_general_ledger_company_id",
                table: "account_report_general_ledger",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_general_ledger_create_uid",
                table: "account_report_general_ledger",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_general_ledger_write_uid",
                table: "account_report_general_ledger",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_report_general_ledger_journal_journal_id_account_id_idx",
                table: "account_report_general_ledger_journal_rel",
                columns: new[] { "journal_id", "account_id" });

            migrationBuilder.CreateIndex(
                name: "account_report_general_ledger_res_partner_id_account_report_idx",
                table: "account_report_general_ledger_res_partner_rel",
                columns: new[] { "res_partner_id", "account_report_general_ledger_id" });

            migrationBuilder.CreateIndex(
                name: "account_report_line_code_uniq",
                table: "account_report_line",
                column: "code",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_account_report_line_create_uid",
                table: "account_report_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_line_parent_id",
                table: "account_report_line",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_line_report_id",
                table: "account_report_line",
                column: "report_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_line_write_uid",
                table: "account_report_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_partner_ledger_company_id",
                table: "account_report_partner_ledger",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_partner_ledger_create_uid",
                table: "account_report_partner_ledger",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_report_partner_ledger_write_uid",
                table: "account_report_partner_ledger",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_report_partner_ledger_res_partner_id_account_report_idx",
                table: "account_report_partner_ledger_res_partner_rel",
                columns: new[] { "res_partner_id", "account_report_partner_ledger_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_resequence_wizard_create_uid",
                table: "account_resequence_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_resequence_wizard_write_uid",
                table: "account_resequence_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_setup_bank_manual_config_create_uid",
                table: "account_setup_bank_manual_config",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_setup_bank_manual_config_res_partner_bank_id",
                table: "account_setup_bank_manual_config",
                column: "res_partner_bank_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_setup_bank_manual_config_write_uid",
                table: "account_setup_bank_manual_config",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_tax_name_company_uniq",
                table: "account_tax",
                columns: new[] { "name", "company_id", "type_tax_use", "tax_scope" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_cash_basis_transition_account_id",
                table: "account_tax",
                column: "cash_basis_transition_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_company_id",
                table: "account_tax",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_country_id",
                table: "account_tax",
                column: "country_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_create_uid",
                table: "account_tax",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_tax_group_id",
                table: "account_tax",
                column: "tax_group_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_write_uid",
                table: "account_tax",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_tax_filiation_rel_child_tax_parent_tax_idx",
                table: "account_tax_filiation_rel",
                columns: new[] { "child_tax", "parent_tax" });

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_group_country_id",
                table: "account_tax_group",
                column: "country_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_group_create_uid",
                table: "account_tax_group",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_group_write_uid",
                table: "account_tax_group",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_tax_hr_expense_split__account_tax_id_hr_expense_spl_idx",
                table: "account_tax_hr_expense_split_rel",
                columns: new[] { "account_tax_id", "hr_expense_split_id" });

            migrationBuilder.CreateIndex(
                name: "account_tax_pos_order_line_re_account_tax_id_pos_order_line_idx",
                table: "account_tax_pos_order_line_rel",
                columns: new[] { "account_tax_id", "pos_order_line_id" });

            migrationBuilder.CreateIndex(
                name: "account_tax_purchase_order_li_account_tax_id_purchase_order_idx",
                table: "account_tax_purchase_order_line_rel",
                columns: new[] { "account_tax_id", "purchase_order_line_id" });

            migrationBuilder.CreateIndex(
                name: "account_tax_rep_template_minu_account_report_expression_id__idx",
                table: "account_tax_rep_template_minus",
                columns: new[] { "account_report_expression_id", "account_tax_repartition_line_template_id" });

            migrationBuilder.CreateIndex(
                name: "account_tax_rep_template_plus_account_report_expression_id__idx",
                table: "account_tax_rep_template_plus",
                columns: new[] { "account_report_expression_id", "account_tax_repartition_line_template_id" });

            migrationBuilder.CreateIndex(
                name: "account_tax_repartition_finan_account_account_tag_id_accoun_idx",
                table: "account_tax_repartition_financial_tags",
                columns: new[] { "account_account_tag_id", "account_tax_repartition_line_template_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_repartition_line_account_id",
                table: "account_tax_repartition_line",
                column: "account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_repartition_line_company_id",
                table: "account_tax_repartition_line",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_repartition_line_create_uid",
                table: "account_tax_repartition_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_repartition_line_invoice_tax_id",
                table: "account_tax_repartition_line",
                column: "invoice_tax_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_repartition_line_refund_tax_id",
                table: "account_tax_repartition_line",
                column: "refund_tax_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_repartition_line_write_uid",
                table: "account_tax_repartition_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_repartition_line_template_account_id",
                table: "account_tax_repartition_line_template",
                column: "account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_repartition_line_template_create_uid",
                table: "account_tax_repartition_line_template",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_repartition_line_template_invoice_tax_id",
                table: "account_tax_repartition_line_template",
                column: "invoice_tax_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_repartition_line_template_refund_tax_id",
                table: "account_tax_repartition_line_template",
                column: "refund_tax_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_repartition_line_template_write_uid",
                table: "account_tax_repartition_line_template",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_report_wizard_company_id",
                table: "account_tax_report_wizard",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_report_wizard_create_uid",
                table: "account_tax_report_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_report_wizard_write_uid",
                table: "account_tax_report_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_tax_sale_advance_paym_account_tax_id_sale_advance_p_idx",
                table: "account_tax_sale_advance_payment_inv_rel",
                columns: new[] { "account_tax_id", "sale_advance_payment_inv_id" });

            migrationBuilder.CreateIndex(
                name: "account_tax_sale_order_line_r_account_tax_id_sale_order_lin_idx",
                table: "account_tax_sale_order_line_rel",
                columns: new[] { "account_tax_id", "sale_order_line_id" });

            migrationBuilder.CreateIndex(
                name: "account_tax_template_name_company_uniq",
                table: "account_tax_template",
                columns: new[] { "name", "type_tax_use", "tax_scope", "chart_template_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_template_cash_basis_transition_account_id",
                table: "account_tax_template",
                column: "cash_basis_transition_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_template_chart_template_id",
                table: "account_tax_template",
                column: "chart_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_template_create_uid",
                table: "account_tax_template",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_template_tax_group_id",
                table: "account_tax_template",
                column: "tax_group_id");

            migrationBuilder.CreateIndex(
                name: "IX_account_tax_template_write_uid",
                table: "account_tax_template",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_tax_template_filiation_rel_child_tax_parent_tax_idx",
                table: "account_tax_template_filiation_rel",
                columns: new[] { "child_tax", "parent_tax" });

            migrationBuilder.CreateIndex(
                name: "IX_account_tour_upload_bill_create_uid",
                table: "account_tour_upload_bill",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_tour_upload_bill_write_uid",
                table: "account_tour_upload_bill",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_tour_upload_bill_email_confirm_create_uid",
                table: "account_tour_upload_bill_email_confirm",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_tour_upload_bill_email_confirm_write_uid",
                table: "account_tour_upload_bill_email_confirm",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "account_tour_upload_bill_ir_a_ir_attachment_id_account_tour_idx",
                table: "account_tour_upload_bill_ir_attachments_rel",
                columns: new[] { "ir_attachment_id", "account_tour_upload_bill_id" });

            migrationBuilder.CreateIndex(
                name: "account_trial_balance_analyti_account_analytic_account_id_a_idx",
                table: "account_trial_balance_analytic_rel",
                columns: new[] { "account_analytic_account_id", "account_balance_report_id" });

            migrationBuilder.CreateIndex(
                name: "IX_account_unreconcile_create_uid",
                table: "account_unreconcile",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_account_unreconcile_write_uid",
                table: "account_unreconcile",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_accounting_report_account_report_id",
                table: "accounting_report",
                column: "account_report_id");

            migrationBuilder.CreateIndex(
                name: "IX_accounting_report_company_id",
                table: "accounting_report",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_accounting_report_create_uid",
                table: "accounting_report",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_accounting_report_write_uid",
                table: "accounting_report",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_applicant_get_refuse_reason_create_uid",
                table: "applicant_get_refuse_reason",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_applicant_get_refuse_reason_refuse_reason_id",
                table: "applicant_get_refuse_reason",
                column: "refuse_reason_id");

            migrationBuilder.CreateIndex(
                name: "IX_applicant_get_refuse_reason_template_id",
                table: "applicant_get_refuse_reason",
                column: "template_id");

            migrationBuilder.CreateIndex(
                name: "IX_applicant_get_refuse_reason_write_uid",
                table: "applicant_get_refuse_reason",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "applicant_get_refuse_reason_h_hr_applicant_id_applicant_get_idx",
                table: "applicant_get_refuse_reason_hr_applicant_rel",
                columns: new[] { "hr_applicant_id", "applicant_get_refuse_reason_id" });

            migrationBuilder.CreateIndex(
                name: "IX_applicant_send_mail_author_id",
                table: "applicant_send_mail",
                column: "author_id");

            migrationBuilder.CreateIndex(
                name: "IX_applicant_send_mail_create_uid",
                table: "applicant_send_mail",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_applicant_send_mail_template_id",
                table: "applicant_send_mail",
                column: "template_id");

            migrationBuilder.CreateIndex(
                name: "IX_applicant_send_mail_write_uid",
                table: "applicant_send_mail",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "applicant_send_mail_hr_applic_hr_applicant_id_applicant_sen_idx",
                table: "applicant_send_mail_hr_applicant_rel",
                columns: new[] { "hr_applicant_id", "applicant_send_mail_id" });

            migrationBuilder.CreateIndex(
                name: "IX_asset_depreciation_confirmation_wizard_create_uid",
                table: "asset_depreciation_confirmation_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_asset_depreciation_confirmation_wizard_write_uid",
                table: "asset_depreciation_confirmation_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_asset_modify_create_uid",
                table: "asset_modify",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_asset_modify_write_uid",
                table: "asset_modify",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "auth_totp_device_user_id_index_idx",
                table: "auth_totp_device",
                columns: new[] { "user_id", "index" });

            migrationBuilder.CreateIndex(
                name: "IX_auth_totp_wizard_create_uid",
                table: "auth_totp_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_auth_totp_wizard_user_id",
                table: "auth_totp_wizard",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_auth_totp_wizard_write_uid",
                table: "auth_totp_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_barcode_nomenclature_create_uid",
                table: "barcode_nomenclature",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_barcode_nomenclature_write_uid",
                table: "barcode_nomenclature",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_barcode_rule_associated_uom_id",
                table: "barcode_rule",
                column: "associated_uom_id");

            migrationBuilder.CreateIndex(
                name: "IX_barcode_rule_barcode_nomenclature_id",
                table: "barcode_rule",
                column: "barcode_nomenclature_id");

            migrationBuilder.CreateIndex(
                name: "IX_barcode_rule_create_uid",
                table: "barcode_rule",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_barcode_rule_write_uid",
                table: "barcode_rule",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_document_layout_company_id",
                table: "base_document_layout",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_base_document_layout_create_uid",
                table: "base_document_layout",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_document_layout_report_layout_id",
                table: "base_document_layout",
                column: "report_layout_id");

            migrationBuilder.CreateIndex(
                name: "IX_base_document_layout_write_uid",
                table: "base_document_layout",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_enable_profiling_wizard_create_uid",
                table: "base_enable_profiling_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_enable_profiling_wizard_write_uid",
                table: "base_enable_profiling_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_import_create_uid",
                table: "base_import_import",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_import_write_uid",
                table: "base_import_import",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "base_import_mapping_res_model_index",
                table: "base_import_mapping",
                column: "res_model");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_mapping_create_uid",
                table: "base_import_mapping",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_mapping_write_uid",
                table: "base_import_mapping",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_char_create_uid",
                table: "base_import_tests_models_char",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_char_write_uid",
                table: "base_import_tests_models_char",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_char_noreadonly_create_uid",
                table: "base_import_tests_models_char_noreadonly",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_char_noreadonly_write_uid",
                table: "base_import_tests_models_char_noreadonly",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_char_readonly_create_uid",
                table: "base_import_tests_models_char_readonly",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_char_readonly_write_uid",
                table: "base_import_tests_models_char_readonly",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_char_required_create_uid",
                table: "base_import_tests_models_char_required",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_char_required_write_uid",
                table: "base_import_tests_models_char_required",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_char_states_create_uid",
                table: "base_import_tests_models_char_states",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_char_states_write_uid",
                table: "base_import_tests_models_char_states",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_char_stillreadonly_create_uid",
                table: "base_import_tests_models_char_stillreadonly",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_char_stillreadonly_write_uid",
                table: "base_import_tests_models_char_stillreadonly",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_complex_create_uid",
                table: "base_import_tests_models_complex",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_complex_currency_id",
                table: "base_import_tests_models_complex",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_complex_write_uid",
                table: "base_import_tests_models_complex",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_float_create_uid",
                table: "base_import_tests_models_float",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_float_currency_id",
                table: "base_import_tests_models_float",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_float_write_uid",
                table: "base_import_tests_models_float",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_m2o_create_uid",
                table: "base_import_tests_models_m2o",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_m2o_value",
                table: "base_import_tests_models_m2o",
                column: "value");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_m2o_write_uid",
                table: "base_import_tests_models_m2o",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_m2o_related_create_uid",
                table: "base_import_tests_models_m2o_related",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_m2o_related_write_uid",
                table: "base_import_tests_models_m2o_related",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_m2o_required_create_uid",
                table: "base_import_tests_models_m2o_required",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_m2o_required_value",
                table: "base_import_tests_models_m2o_required",
                column: "value");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_m2o_required_write_uid",
                table: "base_import_tests_models_m2o_required",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_m2o_required_related_create_uid",
                table: "base_import_tests_models_m2o_required_related",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_m2o_required_related_write_uid",
                table: "base_import_tests_models_m2o_required_related",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_o2m_create_uid",
                table: "base_import_tests_models_o2m",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_o2m_write_uid",
                table: "base_import_tests_models_o2m",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_o2m_child_create_uid",
                table: "base_import_tests_models_o2m_child",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_o2m_child_parent_id",
                table: "base_import_tests_models_o2m_child",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_o2m_child_write_uid",
                table: "base_import_tests_models_o2m_child",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_preview_create_uid",
                table: "base_import_tests_models_preview",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_import_tests_models_preview_write_uid",
                table: "base_import_tests_models_preview",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_language_export_create_uid",
                table: "base_language_export",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_language_export_write_uid",
                table: "base_language_export",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_language_import_create_uid",
                table: "base_language_import",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_language_import_write_uid",
                table: "base_language_import",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_language_install_create_uid",
                table: "base_language_install",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_language_install_write_uid",
                table: "base_language_install",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "base_language_install_website_website_id_base_language_inst_idx",
                table: "base_language_install_website_rel",
                columns: new[] { "website_id", "base_language_install_id" });

            migrationBuilder.CreateIndex(
                name: "IX_base_module_install_request_create_uid",
                table: "base_module_install_request",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_module_install_request_module_id",
                table: "base_module_install_request",
                column: "module_id");

            migrationBuilder.CreateIndex(
                name: "IX_base_module_install_request_user_id",
                table: "base_module_install_request",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_base_module_install_request_write_uid",
                table: "base_module_install_request",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_module_install_review_create_uid",
                table: "base_module_install_review",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_module_install_review_module_id",
                table: "base_module_install_review",
                column: "module_id");

            migrationBuilder.CreateIndex(
                name: "IX_base_module_install_review_write_uid",
                table: "base_module_install_review",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_module_uninstall_create_uid",
                table: "base_module_uninstall",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_module_uninstall_module_id",
                table: "base_module_uninstall",
                column: "module_id");

            migrationBuilder.CreateIndex(
                name: "IX_base_module_uninstall_write_uid",
                table: "base_module_uninstall",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_module_update_create_uid",
                table: "base_module_update",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_module_update_write_uid",
                table: "base_module_update",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_module_upgrade_create_uid",
                table: "base_module_upgrade",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_module_upgrade_write_uid",
                table: "base_module_upgrade",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_partner_merge_automatic_wizard_create_uid",
                table: "base_partner_merge_automatic_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_partner_merge_automatic_wizard_current_line_id",
                table: "base_partner_merge_automatic_wizard",
                column: "current_line_id");

            migrationBuilder.CreateIndex(
                name: "IX_base_partner_merge_automatic_wizard_dst_partner_id",
                table: "base_partner_merge_automatic_wizard",
                column: "dst_partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_base_partner_merge_automatic_wizard_write_uid",
                table: "base_partner_merge_automatic_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "base_partner_merge_automatic__res_partner_id_base_partner_m_idx",
                table: "base_partner_merge_automatic_wizard_res_partner_rel",
                columns: new[] { "res_partner_id", "base_partner_merge_automatic_wizard_id" });

            migrationBuilder.CreateIndex(
                name: "IX_base_partner_merge_line_create_uid",
                table: "base_partner_merge_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_base_partner_merge_line_wizard_id",
                table: "base_partner_merge_line",
                column: "wizard_id");

            migrationBuilder.CreateIndex(
                name: "IX_base_partner_merge_line_write_uid",
                table: "base_partner_merge_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_bus_bus_create_uid",
                table: "bus_bus",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_bus_bus_write_uid",
                table: "bus_bus",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "bus_presence_guest_unique",
                table: "bus_presence",
                column: "guest_id",
                unique: true,
                filter: "(guest_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "bus_presence_user_unique",
                table: "bus_presence",
                column: "user_id",
                unique: true,
                filter: "(user_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "IX_calendar_alarm_create_uid",
                table: "calendar_alarm",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_calendar_alarm_mail_template_id",
                table: "calendar_alarm",
                column: "mail_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_calendar_alarm_sms_template_id",
                table: "calendar_alarm",
                column: "sms_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_calendar_alarm_write_uid",
                table: "calendar_alarm",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "calendar_alarm_calendar_event_calendar_alarm_id_calendar_ev_idx",
                table: "calendar_alarm_calendar_event_rel",
                columns: new[] { "calendar_alarm_id", "calendar_event_id" });

            migrationBuilder.CreateIndex(
                name: "IX_calendar_attendee_create_uid",
                table: "calendar_attendee",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_calendar_attendee_event_id",
                table: "calendar_attendee",
                column: "event_id");

            migrationBuilder.CreateIndex(
                name: "IX_calendar_attendee_partner_id",
                table: "calendar_attendee",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_calendar_attendee_write_uid",
                table: "calendar_attendee",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "calendar_event_access_token_index",
                table: "calendar_event",
                column: "access_token");

            migrationBuilder.CreateIndex(
                name: "calendar_event_applicant_id_index",
                table: "calendar_event",
                column: "applicant_id",
                filter: "(applicant_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "calendar_event_opportunity_id_index",
                table: "calendar_event",
                column: "opportunity_id");

            migrationBuilder.CreateIndex(
                name: "IX_calendar_event_create_uid",
                table: "calendar_event",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_calendar_event_message_main_attachment_id",
                table: "calendar_event",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_calendar_event_recurrence_id",
                table: "calendar_event",
                column: "recurrence_id");

            migrationBuilder.CreateIndex(
                name: "IX_calendar_event_res_model_id",
                table: "calendar_event",
                column: "res_model_id");

            migrationBuilder.CreateIndex(
                name: "IX_calendar_event_user_id",
                table: "calendar_event",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_calendar_event_videocall_channel_id",
                table: "calendar_event",
                column: "videocall_channel_id");

            migrationBuilder.CreateIndex(
                name: "IX_calendar_event_write_uid",
                table: "calendar_event",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "calendar_event_res_partner_re_calendar_event_id_res_partner_idx",
                table: "calendar_event_res_partner_rel",
                columns: new[] { "calendar_event_id", "res_partner_id" });

            migrationBuilder.CreateIndex(
                name: "calendar_event_type_name_uniq",
                table: "calendar_event_type",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_calendar_event_type_create_uid",
                table: "calendar_event_type",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_calendar_event_type_write_uid",
                table: "calendar_event_type",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "calendar_filters_partner_id_index",
                table: "calendar_filters",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "calendar_filters_user_id_index",
                table: "calendar_filters",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "calendar_filters_user_id_partner_id_unique",
                table: "calendar_filters",
                columns: new[] { "user_id", "partner_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_calendar_filters_create_uid",
                table: "calendar_filters",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_calendar_filters_write_uid",
                table: "calendar_filters",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_calendar_provider_config_create_uid",
                table: "calendar_provider_config",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_calendar_provider_config_write_uid",
                table: "calendar_provider_config",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_calendar_recurrence_base_event_id",
                table: "calendar_recurrence",
                column: "base_event_id");

            migrationBuilder.CreateIndex(
                name: "IX_calendar_recurrence_create_uid",
                table: "calendar_recurrence",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_calendar_recurrence_write_uid",
                table: "calendar_recurrence",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_change_lock_date_company_id",
                table: "change_lock_date",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_change_lock_date_create_uid",
                table: "change_lock_date",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_change_lock_date_write_uid",
                table: "change_lock_date",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_change_password_own_create_uid",
                table: "change_password_own",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_change_password_own_write_uid",
                table: "change_password_own",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_change_password_user_create_uid",
                table: "change_password_user",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_change_password_user_user_id",
                table: "change_password_user",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_change_password_user_wizard_id",
                table: "change_password_user",
                column: "wizard_id");

            migrationBuilder.CreateIndex(
                name: "IX_change_password_user_write_uid",
                table: "change_password_user",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_change_password_wizard_create_uid",
                table: "change_password_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_change_password_wizard_write_uid",
                table: "change_password_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_change_production_qty_create_uid",
                table: "change_production_qty",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_change_production_qty_mo_id",
                table: "change_production_qty",
                column: "mo_id");

            migrationBuilder.CreateIndex(
                name: "IX_change_production_qty_write_uid",
                table: "change_production_qty",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_confirm_stock_sms_create_uid",
                table: "confirm_stock_sms",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_confirm_stock_sms_write_uid",
                table: "confirm_stock_sms",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "crm_convert_lead_mass_lead_re_crm_lead_id_crm_lead2opportun_idx",
                table: "crm_convert_lead_mass_lead_rel",
                columns: new[] { "crm_lead_id", "crm_lead2opportunity_partner_mass_id" });

            migrationBuilder.CreateIndex(
                name: "IX_crm_iap_lead_helpers_create_uid",
                table: "crm_iap_lead_helpers",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_iap_lead_helpers_write_uid",
                table: "crm_iap_lead_helpers",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "crm_iap_lead_industry_name_uniq",
                table: "crm_iap_lead_industry",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_crm_iap_lead_industry_create_uid",
                table: "crm_iap_lead_industry",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_iap_lead_industry_write_uid",
                table: "crm_iap_lead_industry",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "crm_iap_lead_industry_crm_iap_crm_iap_lead_industry_id_crm__idx",
                table: "crm_iap_lead_industry_crm_iap_lead_mining_request_rel",
                columns: new[] { "crm_iap_lead_industry_id", "crm_iap_lead_mining_request_id" });

            migrationBuilder.CreateIndex(
                name: "IX_crm_iap_lead_mining_request_create_uid",
                table: "crm_iap_lead_mining_request",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_iap_lead_mining_request_preferred_role_id",
                table: "crm_iap_lead_mining_request",
                column: "preferred_role_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_iap_lead_mining_request_seniority_id",
                table: "crm_iap_lead_mining_request",
                column: "seniority_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_iap_lead_mining_request_team_id",
                table: "crm_iap_lead_mining_request",
                column: "team_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_iap_lead_mining_request_user_id",
                table: "crm_iap_lead_mining_request",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_iap_lead_mining_request_write_uid",
                table: "crm_iap_lead_mining_request",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "crm_iap_lead_mining_request_c_crm_iap_lead_role_id_crm_iap__idx",
                table: "crm_iap_lead_mining_request_crm_iap_lead_role_rel",
                columns: new[] { "crm_iap_lead_role_id", "crm_iap_lead_mining_request_id" });

            migrationBuilder.CreateIndex(
                name: "crm_iap_lead_mining_request_c_crm_tag_id_crm_iap_lead_minin_idx",
                table: "crm_iap_lead_mining_request_crm_tag_rel",
                columns: new[] { "crm_tag_id", "crm_iap_lead_mining_request_id" });

            migrationBuilder.CreateIndex(
                name: "crm_iap_lead_mining_request_r_res_country_id_crm_iap_lead_m_idx",
                table: "crm_iap_lead_mining_request_res_country_rel",
                columns: new[] { "res_country_id", "crm_iap_lead_mining_request_id" });

            migrationBuilder.CreateIndex(
                name: "crm_iap_lead_mining_request_r_res_country_state_id_crm_iap__idx",
                table: "crm_iap_lead_mining_request_res_country_state_rel",
                columns: new[] { "res_country_state_id", "crm_iap_lead_mining_request_id" });

            migrationBuilder.CreateIndex(
                name: "crm_iap_lead_role_name_uniq",
                table: "crm_iap_lead_role",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_crm_iap_lead_role_create_uid",
                table: "crm_iap_lead_role",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_iap_lead_role_write_uid",
                table: "crm_iap_lead_role",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "crm_iap_lead_seniority_name_uniq",
                table: "crm_iap_lead_seniority",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_crm_iap_lead_seniority_create_uid",
                table: "crm_iap_lead_seniority",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_iap_lead_seniority_write_uid",
                table: "crm_iap_lead_seniority",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "crm_lead_company_id_index",
                table: "crm_lead",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "crm_lead_create_date_team_id_idx",
                table: "crm_lead",
                columns: new[] { "create_date", "team_id" });

            migrationBuilder.CreateIndex(
                name: "crm_lead_date_last_stage_update_index",
                table: "crm_lead",
                column: "date_last_stage_update");

            migrationBuilder.CreateIndex(
                name: "crm_lead_email_from_index",
                table: "crm_lead",
                column: "email_from")
                .Annotation("Npgsql:IndexMethod", "gin")
                .Annotation("Npgsql:IndexOperators", new[] { "gin_trgm_ops" });

            migrationBuilder.CreateIndex(
                name: "crm_lead_lead_mining_request_id_index",
                table: "crm_lead",
                column: "lead_mining_request_id",
                filter: "(lead_mining_request_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "crm_lead_lost_reason_id_index",
                table: "crm_lead",
                column: "lost_reason_id");

            migrationBuilder.CreateIndex(
                name: "crm_lead_name_index",
                table: "crm_lead",
                column: "name")
                .Annotation("Npgsql:IndexMethod", "gin")
                .Annotation("Npgsql:IndexOperators", new[] { "gin_trgm_ops" });

            migrationBuilder.CreateIndex(
                name: "crm_lead_partner_id_index",
                table: "crm_lead",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "crm_lead_priority_index",
                table: "crm_lead",
                column: "priority");

            migrationBuilder.CreateIndex(
                name: "crm_lead_stage_id_index",
                table: "crm_lead",
                column: "stage_id");

            migrationBuilder.CreateIndex(
                name: "crm_lead_team_id_index",
                table: "crm_lead",
                column: "team_id");

            migrationBuilder.CreateIndex(
                name: "crm_lead_type_index",
                table: "crm_lead",
                column: "type");

            migrationBuilder.CreateIndex(
                name: "crm_lead_user_id_index",
                table: "crm_lead",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "crm_lead_user_id_team_id_type_index",
                table: "crm_lead",
                columns: new[] { "user_id", "team_id", "type" });

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead_campaign_id",
                table: "crm_lead",
                column: "campaign_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead_country_id",
                table: "crm_lead",
                column: "country_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead_create_uid",
                table: "crm_lead",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead_lang_id",
                table: "crm_lead",
                column: "lang_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead_medium_id",
                table: "crm_lead",
                column: "medium_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead_message_main_attachment_id",
                table: "crm_lead",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead_recurring_plan",
                table: "crm_lead",
                column: "recurring_plan");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead_source_id",
                table: "crm_lead",
                column: "source_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead_state_id",
                table: "crm_lead",
                column: "state_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead_title",
                table: "crm_lead",
                column: "title");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead_write_uid",
                table: "crm_lead",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "crm_lead_crm_lead2opportunity_crm_lead_id_crm_lead2opportu_idx1",
                table: "crm_lead_crm_lead2opportunity_partner_mass_rel",
                columns: new[] { "crm_lead_id", "crm_lead2opportunity_partner_mass_id" });

            migrationBuilder.CreateIndex(
                name: "crm_lead_crm_lead2opportunity_crm_lead_id_crm_lead2opportun_idx",
                table: "crm_lead_crm_lead2opportunity_partner_rel",
                columns: new[] { "crm_lead_id", "crm_lead2opportunity_partner_id" });

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead_lost_create_uid",
                table: "crm_lead_lost",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead_lost_lost_reason_id",
                table: "crm_lead_lost",
                column: "lost_reason_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead_lost_write_uid",
                table: "crm_lead_lost",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead_pls_update_create_uid",
                table: "crm_lead_pls_update",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead_pls_update_write_uid",
                table: "crm_lead_pls_update",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "crm_lead_pls_update_crm_lead__crm_lead_scoring_frequency_fi_idx",
                table: "crm_lead_pls_update_crm_lead_scoring_frequency_field_rel",
                columns: new[] { "crm_lead_scoring_frequency_field_id", "crm_lead_pls_update_id" });

            migrationBuilder.CreateIndex(
                name: "crm_lead_scoring_frequency_variable_index",
                table: "crm_lead_scoring_frequency",
                column: "variable");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead_scoring_frequency_create_uid",
                table: "crm_lead_scoring_frequency",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead_scoring_frequency_team_id",
                table: "crm_lead_scoring_frequency",
                column: "team_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead_scoring_frequency_write_uid",
                table: "crm_lead_scoring_frequency",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead_scoring_frequency_field_create_uid",
                table: "crm_lead_scoring_frequency_field",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead_scoring_frequency_field_field_id",
                table: "crm_lead_scoring_frequency_field",
                column: "field_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead_scoring_frequency_field_write_uid",
                table: "crm_lead_scoring_frequency_field",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "crm_lead_website_visitor_rel_website_visitor_id_crm_lead_id_idx",
                table: "crm_lead_website_visitor_rel",
                columns: new[] { "website_visitor_id", "crm_lead_id" });

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead2opportunity_partner_create_uid",
                table: "crm_lead2opportunity_partner",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead2opportunity_partner_lead_id",
                table: "crm_lead2opportunity_partner",
                column: "lead_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead2opportunity_partner_partner_id",
                table: "crm_lead2opportunity_partner",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead2opportunity_partner_team_id",
                table: "crm_lead2opportunity_partner",
                column: "team_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead2opportunity_partner_user_id",
                table: "crm_lead2opportunity_partner",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead2opportunity_partner_write_uid",
                table: "crm_lead2opportunity_partner",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead2opportunity_partner_mass_create_uid",
                table: "crm_lead2opportunity_partner_mass",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead2opportunity_partner_mass_lead_id",
                table: "crm_lead2opportunity_partner_mass",
                column: "lead_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead2opportunity_partner_mass_partner_id",
                table: "crm_lead2opportunity_partner_mass",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead2opportunity_partner_mass_team_id",
                table: "crm_lead2opportunity_partner_mass",
                column: "team_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead2opportunity_partner_mass_user_id",
                table: "crm_lead2opportunity_partner_mass",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lead2opportunity_partner_mass_write_uid",
                table: "crm_lead2opportunity_partner_mass",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "crm_lead2opportunity_partner__res_users_id_crm_lead2opportu_idx",
                table: "crm_lead2opportunity_partner_mass_res_users_rel",
                columns: new[] { "res_users_id", "crm_lead2opportunity_partner_mass_id" });

            migrationBuilder.CreateIndex(
                name: "IX_crm_lost_reason_create_uid",
                table: "crm_lost_reason",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_lost_reason_write_uid",
                table: "crm_lost_reason",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_merge_opportunity_create_uid",
                table: "crm_merge_opportunity",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_merge_opportunity_team_id",
                table: "crm_merge_opportunity",
                column: "team_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_merge_opportunity_user_id",
                table: "crm_merge_opportunity",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_merge_opportunity_write_uid",
                table: "crm_merge_opportunity",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_quotation_partner_create_uid",
                table: "crm_quotation_partner",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_quotation_partner_lead_id",
                table: "crm_quotation_partner",
                column: "lead_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_quotation_partner_partner_id",
                table: "crm_quotation_partner",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_quotation_partner_write_uid",
                table: "crm_quotation_partner",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_recurring_plan_create_uid",
                table: "crm_recurring_plan",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_recurring_plan_write_uid",
                table: "crm_recurring_plan",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_stage_create_uid",
                table: "crm_stage",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_stage_team_id",
                table: "crm_stage",
                column: "team_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_stage_write_uid",
                table: "crm_stage",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "crm_tag_name_uniq",
                table: "crm_tag",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_crm_tag_create_uid",
                table: "crm_tag",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_tag_write_uid",
                table: "crm_tag",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "crm_tag_rel_tag_id_lead_id_idx",
                table: "crm_tag_rel",
                columns: new[] { "tag_id", "lead_id" });

            migrationBuilder.CreateIndex(
                name: "crm_team_company_id_index",
                table: "crm_team",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_team_alias_id",
                table: "crm_team",
                column: "alias_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_team_create_uid",
                table: "crm_team",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_team_message_main_attachment_id",
                table: "crm_team",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_team_user_id",
                table: "crm_team",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_team_write_uid",
                table: "crm_team",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "crm_team_member_crm_team_id_index",
                table: "crm_team_member",
                column: "crm_team_id");

            migrationBuilder.CreateIndex(
                name: "crm_team_member_user_id_index",
                table: "crm_team_member",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_team_member_create_uid",
                table: "crm_team_member",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crm_team_member_message_main_attachment_id",
                table: "crm_team_member",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_crm_team_member_write_uid",
                table: "crm_team_member",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "crossovered_budget_state_index",
                table: "crossovered_budget",
                column: "state");

            migrationBuilder.CreateIndex(
                name: "IX_crossovered_budget_company_id",
                table: "crossovered_budget",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_crossovered_budget_create_uid",
                table: "crossovered_budget",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crossovered_budget_message_main_attachment_id",
                table: "crossovered_budget",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_crossovered_budget_user_id",
                table: "crossovered_budget",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_crossovered_budget_write_uid",
                table: "crossovered_budget",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "crossovered_budget_lines_crossovered_budget_id_index",
                table: "crossovered_budget_lines",
                column: "crossovered_budget_id");

            migrationBuilder.CreateIndex(
                name: "IX_crossovered_budget_lines_analytic_account_id",
                table: "crossovered_budget_lines",
                column: "analytic_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_crossovered_budget_lines_company_id",
                table: "crossovered_budget_lines",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_crossovered_budget_lines_create_uid",
                table: "crossovered_budget_lines",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_crossovered_budget_lines_general_budget_id",
                table: "crossovered_budget_lines",
                column: "general_budget_id");

            migrationBuilder.CreateIndex(
                name: "IX_crossovered_budget_lines_write_uid",
                table: "crossovered_budget_lines",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "decimal_precision_name_uniq",
                table: "decimal_precision",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_decimal_precision_create_uid",
                table: "decimal_precision",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_decimal_precision_write_uid",
                table: "decimal_precision",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_digest_digest_company_id",
                table: "digest_digest",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_digest_digest_create_uid",
                table: "digest_digest",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_digest_digest_write_uid",
                table: "digest_digest",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "digest_digest_res_users_rel_res_users_id_digest_digest_id_idx",
                table: "digest_digest_res_users_rel",
                columns: new[] { "res_users_id", "digest_digest_id" });

            migrationBuilder.CreateIndex(
                name: "IX_digest_tip_create_uid",
                table: "digest_tip",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_digest_tip_group_id",
                table: "digest_tip",
                column: "group_id");

            migrationBuilder.CreateIndex(
                name: "IX_digest_tip_write_uid",
                table: "digest_tip",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "digest_tip_res_users_rel_res_users_id_digest_tip_id_idx",
                table: "digest_tip_res_users_rel",
                columns: new[] { "res_users_id", "digest_tip_id" });

            migrationBuilder.CreateIndex(
                name: "email_template_attachment_rel_attachment_id_email_template__idx",
                table: "email_template_attachment_rel",
                columns: new[] { "attachment_id", "email_template_id" });

            migrationBuilder.CreateIndex(
                name: "employee_category_rel_category_id_emp_id_idx",
                table: "employee_category_rel",
                columns: new[] { "category_id", "emp_id" });

            migrationBuilder.CreateIndex(
                name: "expense_tax_tax_id_expense_id_idx",
                table: "expense_tax",
                columns: new[] { "tax_id", "expense_id" });

            migrationBuilder.CreateIndex(
                name: "fetchmail_server_server_type_index",
                table: "fetchmail_server",
                column: "server_type");

            migrationBuilder.CreateIndex(
                name: "fetchmail_server_state_index",
                table: "fetchmail_server",
                column: "state");

            migrationBuilder.CreateIndex(
                name: "IX_fetchmail_server_create_uid",
                table: "fetchmail_server",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_fetchmail_server_object_id",
                table: "fetchmail_server",
                column: "object_id");

            migrationBuilder.CreateIndex(
                name: "IX_fetchmail_server_write_uid",
                table: "fetchmail_server",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_service_type_create_uid",
                table: "fleet_service_type",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_service_type_write_uid",
                table: "fleet_service_type",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "fleet_service_type_fleet_vehi_fleet_service_type_id_fleet_v_idx",
                table: "fleet_service_type_fleet_vehicle_log_contract_rel",
                columns: new[] { "fleet_service_type_id", "fleet_vehicle_log_contract_id" });

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_brand_id",
                table: "fleet_vehicle",
                column: "brand_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_category_id",
                table: "fleet_vehicle",
                column: "category_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_company_id",
                table: "fleet_vehicle",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_create_uid",
                table: "fleet_vehicle",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_driver_employee_id",
                table: "fleet_vehicle",
                column: "driver_employee_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_driver_id",
                table: "fleet_vehicle",
                column: "driver_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_future_driver_employee_id",
                table: "fleet_vehicle",
                column: "future_driver_employee_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_future_driver_id",
                table: "fleet_vehicle",
                column: "future_driver_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_manager_id",
                table: "fleet_vehicle",
                column: "manager_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_message_main_attachment_id",
                table: "fleet_vehicle",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_model_id",
                table: "fleet_vehicle",
                column: "model_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_state_id",
                table: "fleet_vehicle",
                column: "state_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_write_uid",
                table: "fleet_vehicle",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_assignation_log_create_uid",
                table: "fleet_vehicle_assignation_log",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_assignation_log_driver_employee_id",
                table: "fleet_vehicle_assignation_log",
                column: "driver_employee_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_assignation_log_driver_id",
                table: "fleet_vehicle_assignation_log",
                column: "driver_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_assignation_log_vehicle_id",
                table: "fleet_vehicle_assignation_log",
                column: "vehicle_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_assignation_log_write_uid",
                table: "fleet_vehicle_assignation_log",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "fleet_vehicle_log_contract_user_id_index",
                table: "fleet_vehicle_log_contract",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_log_contract_company_id",
                table: "fleet_vehicle_log_contract",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_log_contract_cost_subtype_id",
                table: "fleet_vehicle_log_contract",
                column: "cost_subtype_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_log_contract_create_uid",
                table: "fleet_vehicle_log_contract",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_log_contract_insurer_id",
                table: "fleet_vehicle_log_contract",
                column: "insurer_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_log_contract_message_main_attachment_id",
                table: "fleet_vehicle_log_contract",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_log_contract_vehicle_id",
                table: "fleet_vehicle_log_contract",
                column: "vehicle_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_log_contract_write_uid",
                table: "fleet_vehicle_log_contract",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_log_services_company_id",
                table: "fleet_vehicle_log_services",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_log_services_create_uid",
                table: "fleet_vehicle_log_services",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_log_services_manager_id",
                table: "fleet_vehicle_log_services",
                column: "manager_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_log_services_message_main_attachment_id",
                table: "fleet_vehicle_log_services",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_log_services_odometer_id",
                table: "fleet_vehicle_log_services",
                column: "odometer_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_log_services_purchaser_employee_id",
                table: "fleet_vehicle_log_services",
                column: "purchaser_employee_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_log_services_purchaser_id",
                table: "fleet_vehicle_log_services",
                column: "purchaser_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_log_services_service_type_id",
                table: "fleet_vehicle_log_services",
                column: "service_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_log_services_vehicle_id",
                table: "fleet_vehicle_log_services",
                column: "vehicle_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_log_services_vendor_id",
                table: "fleet_vehicle_log_services",
                column: "vendor_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_log_services_write_uid",
                table: "fleet_vehicle_log_services",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_model_brand_id",
                table: "fleet_vehicle_model",
                column: "brand_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_model_category_id",
                table: "fleet_vehicle_model",
                column: "category_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_model_create_uid",
                table: "fleet_vehicle_model",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_model_write_uid",
                table: "fleet_vehicle_model",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_model_brand_create_uid",
                table: "fleet_vehicle_model_brand",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_model_brand_write_uid",
                table: "fleet_vehicle_model_brand",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "fleet_vehicle_model_category_name_uniq",
                table: "fleet_vehicle_model_category",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_model_category_create_uid",
                table: "fleet_vehicle_model_category",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_model_category_write_uid",
                table: "fleet_vehicle_model_category",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "fleet_vehicle_model_vendors_partner_id_model_id_idx",
                table: "fleet_vehicle_model_vendors",
                columns: new[] { "partner_id", "model_id" });

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_odometer_create_uid",
                table: "fleet_vehicle_odometer",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_odometer_vehicle_id",
                table: "fleet_vehicle_odometer",
                column: "vehicle_id");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_odometer_write_uid",
                table: "fleet_vehicle_odometer",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "fleet_vehicle_state_fleet_state_name_unique",
                table: "fleet_vehicle_state",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_state_create_uid",
                table: "fleet_vehicle_state",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_state_write_uid",
                table: "fleet_vehicle_state",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "fleet_vehicle_tag_name_uniq",
                table: "fleet_vehicle_tag",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_tag_create_uid",
                table: "fleet_vehicle_tag",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_fleet_vehicle_tag_write_uid",
                table: "fleet_vehicle_tag",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "fleet_vehicle_vehicle_tag_rel_tag_id_vehicle_tag_id_idx",
                table: "fleet_vehicle_vehicle_tag_rel",
                columns: new[] { "tag_id", "vehicle_tag_id" });

            migrationBuilder.CreateIndex(
                name: "followup_followup_company_uniq",
                table: "followup_followup",
                column: "company_id",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_followup_followup_create_uid",
                table: "followup_followup",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_followup_followup_write_uid",
                table: "followup_followup",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "followup_line_days_uniq",
                table: "followup_line",
                columns: new[] { "followup_id", "delay" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_followup_line_create_uid",
                table: "followup_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_followup_line_email_template_id",
                table: "followup_line",
                column: "email_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_followup_line_manual_action_responsible_id",
                table: "followup_line",
                column: "manual_action_responsible_id");

            migrationBuilder.CreateIndex(
                name: "IX_followup_line_write_uid",
                table: "followup_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_followup_print_create_uid",
                table: "followup_print",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_followup_print_followup_id",
                table: "followup_print",
                column: "followup_id");

            migrationBuilder.CreateIndex(
                name: "IX_followup_print_write_uid",
                table: "followup_print",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_followup_sending_results_create_uid",
                table: "followup_sending_results",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_followup_sending_results_write_uid",
                table: "followup_sending_results",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "hr_applicant_date_last_stage_update_index",
                table: "hr_applicant",
                column: "date_last_stage_update");

            migrationBuilder.CreateIndex(
                name: "hr_applicant_job_id_index",
                table: "hr_applicant",
                column: "job_id");

            migrationBuilder.CreateIndex(
                name: "hr_applicant_name_index",
                table: "hr_applicant",
                column: "name")
                .Annotation("Npgsql:IndexMethod", "gin")
                .Annotation("Npgsql:IndexOperators", new[] { "gin_trgm_ops" });

            migrationBuilder.CreateIndex(
                name: "hr_applicant_stage_id_index",
                table: "hr_applicant",
                column: "stage_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_campaign_id",
                table: "hr_applicant",
                column: "campaign_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_company_id",
                table: "hr_applicant",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_create_uid",
                table: "hr_applicant",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_department_id",
                table: "hr_applicant",
                column: "department_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_emp_id",
                table: "hr_applicant",
                column: "emp_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_last_stage_id",
                table: "hr_applicant",
                column: "last_stage_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_medium_id",
                table: "hr_applicant",
                column: "medium_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_message_main_attachment_id",
                table: "hr_applicant",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_partner_id",
                table: "hr_applicant",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_refuse_reason_id",
                table: "hr_applicant",
                column: "refuse_reason_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_source_id",
                table: "hr_applicant",
                column: "source_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_type_id",
                table: "hr_applicant",
                column: "type_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_user_id",
                table: "hr_applicant",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_write_uid",
                table: "hr_applicant",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "hr_applicant_category_name_uniq",
                table: "hr_applicant_category",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_category_create_uid",
                table: "hr_applicant_category",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_category_write_uid",
                table: "hr_applicant_category",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "hr_applicant_hr_applicant_cat_hr_applicant_category_id_hr_a_idx",
                table: "hr_applicant_hr_applicant_category_rel",
                columns: new[] { "hr_applicant_category_id", "hr_applicant_id" });

            migrationBuilder.CreateIndex(
                name: "hr_applicant_hr_skill_rel_hr_skill_id_hr_applicant_id_idx",
                table: "hr_applicant_hr_skill_rel",
                columns: new[] { "hr_skill_id", "hr_applicant_id" });

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_refuse_reason_create_uid",
                table: "hr_applicant_refuse_reason",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_refuse_reason_template_id",
                table: "hr_applicant_refuse_reason",
                column: "template_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_refuse_reason_write_uid",
                table: "hr_applicant_refuse_reason",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "hr_applicant_res_users_intervi_res_users_id_hr_applicant_id_idx",
                table: "hr_applicant_res_users_interviewers_rel",
                columns: new[] { "res_users_id", "hr_applicant_id" });

            migrationBuilder.CreateIndex(
                name: "hr_applicant_skill__unique_skill",
                table: "hr_applicant_skill",
                columns: new[] { "applicant_id", "skill_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_skill_create_uid",
                table: "hr_applicant_skill",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_skill_skill_id",
                table: "hr_applicant_skill",
                column: "skill_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_skill_skill_level_id",
                table: "hr_applicant_skill",
                column: "skill_level_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_skill_skill_type_id",
                table: "hr_applicant_skill",
                column: "skill_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_applicant_skill_write_uid",
                table: "hr_applicant_skill",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "hr_attendance_employee_id_index",
                table: "hr_attendance",
                column: "employee_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_attendance_create_uid",
                table: "hr_attendance",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_attendance_write_uid",
                table: "hr_attendance",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "hr_attendance_overtime_employee_id_index",
                table: "hr_attendance_overtime",
                column: "employee_id");

            migrationBuilder.CreateIndex(
                name: "hr_attendance_overtime_unique_employee_per_day",
                table: "hr_attendance_overtime",
                columns: new[] { "employee_id", "date" },
                unique: true,
                filter: "(adjustment IS FALSE)");

            migrationBuilder.CreateIndex(
                name: "IX_hr_attendance_overtime_create_uid",
                table: "hr_attendance_overtime",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_attendance_overtime_write_uid",
                table: "hr_attendance_overtime",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "hr_contract_date_start_index",
                table: "hr_contract",
                column: "date_start");

            migrationBuilder.CreateIndex(
                name: "hr_contract_resource_calendar_id_index",
                table: "hr_contract",
                column: "resource_calendar_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_contract_company_id",
                table: "hr_contract",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_contract_contract_type_id",
                table: "hr_contract",
                column: "contract_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_contract_create_uid",
                table: "hr_contract",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_contract_department_id",
                table: "hr_contract",
                column: "department_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_contract_employee_id",
                table: "hr_contract",
                column: "employee_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_contract_hr_responsible_id",
                table: "hr_contract",
                column: "hr_responsible_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_contract_job_id",
                table: "hr_contract",
                column: "job_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_contract_message_main_attachment_id",
                table: "hr_contract",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_contract_structure_type_id",
                table: "hr_contract",
                column: "structure_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_contract_write_uid",
                table: "hr_contract",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_contract_type_create_uid",
                table: "hr_contract_type",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_contract_type_write_uid",
                table: "hr_contract_type",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "hr_department_company_id_index",
                table: "hr_department",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "hr_department_parent_id_index",
                table: "hr_department",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "hr_department_parent_path_index",
                table: "hr_department",
                column: "parent_path");

            migrationBuilder.CreateIndex(
                name: "IX_hr_department_create_uid",
                table: "hr_department",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_department_manager_id",
                table: "hr_department",
                column: "manager_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_department_master_department_id",
                table: "hr_department",
                column: "master_department_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_department_message_main_attachment_id",
                table: "hr_department",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_department_write_uid",
                table: "hr_department",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "hr_department_hr_leave_stress_hr_department_id_hr_leave_str_idx",
                table: "hr_department_hr_leave_stress_day_rel",
                columns: new[] { "hr_department_id", "hr_leave_stress_day_id" });

            migrationBuilder.CreateIndex(
                name: "hr_department_mail_channel_re_hr_department_id_mail_channel_idx",
                table: "hr_department_mail_channel_rel",
                columns: new[] { "hr_department_id", "mail_channel_id" });

            migrationBuilder.CreateIndex(
                name: "IX_hr_departure_reason_create_uid",
                table: "hr_departure_reason",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_departure_reason_write_uid",
                table: "hr_departure_reason",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_departure_wizard_create_uid",
                table: "hr_departure_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_departure_wizard_departure_reason_id",
                table: "hr_departure_wizard",
                column: "departure_reason_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_departure_wizard_employee_id",
                table: "hr_departure_wizard",
                column: "employee_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_departure_wizard_write_uid",
                table: "hr_departure_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "hr_employee_barcode_uniq",
                table: "hr_employee",
                column: "barcode",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "hr_employee_company_id_index",
                table: "hr_employee",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "hr_employee_resource_calendar_id_index",
                table: "hr_employee",
                column: "resource_calendar_id");

            migrationBuilder.CreateIndex(
                name: "hr_employee_resource_id_index",
                table: "hr_employee",
                column: "resource_id");

            migrationBuilder.CreateIndex(
                name: "hr_employee_user_uniq",
                table: "hr_employee",
                columns: new[] { "user_id", "company_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_address_home_id",
                table: "hr_employee",
                column: "address_home_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_address_id",
                table: "hr_employee",
                column: "address_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_bank_account_id",
                table: "hr_employee",
                column: "bank_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_coach_id",
                table: "hr_employee",
                column: "coach_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_contract_id",
                table: "hr_employee",
                column: "contract_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_country_id",
                table: "hr_employee",
                column: "country_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_country_of_birth",
                table: "hr_employee",
                column: "country_of_birth");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_create_uid",
                table: "hr_employee",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_department_id",
                table: "hr_employee",
                column: "department_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_departure_reason_id",
                table: "hr_employee",
                column: "departure_reason_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_expense_manager_id",
                table: "hr_employee",
                column: "expense_manager_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_job_id",
                table: "hr_employee",
                column: "job_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_last_attendance_id",
                table: "hr_employee",
                column: "last_attendance_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_leave_manager_id",
                table: "hr_employee",
                column: "leave_manager_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_message_main_attachment_id",
                table: "hr_employee",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_parent_id",
                table: "hr_employee",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_work_contact_id",
                table: "hr_employee",
                column: "work_contact_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_work_location_id",
                table: "hr_employee",
                column: "work_location_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_write_uid",
                table: "hr_employee",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "hr_employee_category_name_uniq",
                table: "hr_employee_category",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_category_create_uid",
                table: "hr_employee_category",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_category_write_uid",
                table: "hr_employee_category",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "hr_employee_hr_leave_allocati_hr_employee_id_hr_leave_alloc_idx",
                table: "hr_employee_hr_leave_allocation_rel",
                columns: new[] { "hr_employee_id", "hr_leave_allocation_id" });

            migrationBuilder.CreateIndex(
                name: "hr_employee_hr_leave_rel_hr_employee_id_hr_leave_id_idx",
                table: "hr_employee_hr_leave_rel",
                columns: new[] { "hr_employee_id", "hr_leave_id" });

            migrationBuilder.CreateIndex(
                name: "hr_employee_hr_plan_wizard_rel_plan_wizard_id_employee_id_idx",
                table: "hr_employee_hr_plan_wizard_rel",
                columns: new[] { "plan_wizard_id", "employee_id" });

            migrationBuilder.CreateIndex(
                name: "hr_employee_hr_skill_rel_hr_skill_id_hr_employee_id_idx",
                table: "hr_employee_hr_skill_rel",
                columns: new[] { "hr_skill_id", "hr_employee_id" });

            migrationBuilder.CreateIndex(
                name: "hr_employee_pos_config_rel_hr_employee_id_pos_config_id_idx",
                table: "hr_employee_pos_config_rel",
                columns: new[] { "hr_employee_id", "pos_config_id" });

            migrationBuilder.CreateIndex(
                name: "hr_employee_skill__unique_skill",
                table: "hr_employee_skill",
                columns: new[] { "employee_id", "skill_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_skill_create_uid",
                table: "hr_employee_skill",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_skill_skill_id",
                table: "hr_employee_skill",
                column: "skill_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_skill_skill_level_id",
                table: "hr_employee_skill",
                column: "skill_level_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_skill_skill_type_id",
                table: "hr_employee_skill",
                column: "skill_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_skill_write_uid",
                table: "hr_employee_skill",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "hr_employee_skill_log__unique_skill_log",
                table: "hr_employee_skill_log",
                columns: new[] { "employee_id", "department_id", "skill_id", "date" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_skill_log_create_uid",
                table: "hr_employee_skill_log",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_skill_log_department_id",
                table: "hr_employee_skill_log",
                column: "department_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_skill_log_skill_id",
                table: "hr_employee_skill_log",
                column: "skill_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_skill_log_skill_level_id",
                table: "hr_employee_skill_log",
                column: "skill_level_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_skill_log_skill_type_id",
                table: "hr_employee_skill_log",
                column: "skill_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_employee_skill_log_write_uid",
                table: "hr_employee_skill_log",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "hr_expense_analytic_distribution_gin_index",
                table: "hr_expense",
                column: "analytic_distribution")
                .Annotation("Npgsql:IndexMethod", "gin");

            migrationBuilder.CreateIndex(
                name: "hr_expense_state_index",
                table: "hr_expense",
                column: "state");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_account_id",
                table: "hr_expense",
                column: "account_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_company_id",
                table: "hr_expense",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_create_uid",
                table: "hr_expense",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_currency_id",
                table: "hr_expense",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_employee_id",
                table: "hr_expense",
                column: "employee_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_message_main_attachment_id",
                table: "hr_expense",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_product_id",
                table: "hr_expense",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_product_uom_id",
                table: "hr_expense",
                column: "product_uom_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_sale_order_id",
                table: "hr_expense",
                column: "sale_order_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_sheet_id",
                table: "hr_expense",
                column: "sheet_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_write_uid",
                table: "hr_expense",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_approve_duplicate_create_uid",
                table: "hr_expense_approve_duplicate",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_approve_duplicate_write_uid",
                table: "hr_expense_approve_duplicate",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "hr_expense_approve_duplicate__hr_expense_sheet_id_hr_expens_idx",
                table: "hr_expense_approve_duplicate_hr_expense_sheet_rel",
                columns: new[] { "hr_expense_sheet_id", "hr_expense_approve_duplicate_id" });

            migrationBuilder.CreateIndex(
                name: "hr_expense_hr_expense_approve_hr_expense_id_hr_expense_appr_idx",
                table: "hr_expense_hr_expense_approve_duplicate_rel",
                columns: new[] { "hr_expense_id", "hr_expense_approve_duplicate_id" });

            migrationBuilder.CreateIndex(
                name: "hr_expense_hr_expense_refuse__hr_expense_id_hr_expense_refu_idx",
                table: "hr_expense_hr_expense_refuse_wizard_rel",
                columns: new[] { "hr_expense_id", "hr_expense_refuse_wizard_id" });

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_refuse_wizard_create_uid",
                table: "hr_expense_refuse_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_refuse_wizard_hr_expense_sheet_id",
                table: "hr_expense_refuse_wizard",
                column: "hr_expense_sheet_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_refuse_wizard_write_uid",
                table: "hr_expense_refuse_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "hr_expense_sheet_state_index",
                table: "hr_expense_sheet",
                column: "state");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_sheet_account_move_id",
                table: "hr_expense_sheet",
                column: "account_move_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_sheet_address_id",
                table: "hr_expense_sheet",
                column: "address_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_sheet_bank_journal_id",
                table: "hr_expense_sheet",
                column: "bank_journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_sheet_company_id",
                table: "hr_expense_sheet",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_sheet_create_uid",
                table: "hr_expense_sheet",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_sheet_currency_id",
                table: "hr_expense_sheet",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_sheet_department_id",
                table: "hr_expense_sheet",
                column: "department_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_sheet_employee_id",
                table: "hr_expense_sheet",
                column: "employee_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_sheet_journal_id",
                table: "hr_expense_sheet",
                column: "journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_sheet_message_main_attachment_id",
                table: "hr_expense_sheet",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_sheet_user_id",
                table: "hr_expense_sheet",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_sheet_write_uid",
                table: "hr_expense_sheet",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "hr_expense_split_analytic_distribution_gin_index",
                table: "hr_expense_split",
                column: "analytic_distribution")
                .Annotation("Npgsql:IndexMethod", "gin");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_split_company_id",
                table: "hr_expense_split",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_split_create_uid",
                table: "hr_expense_split",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_split_currency_id",
                table: "hr_expense_split",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_split_employee_id",
                table: "hr_expense_split",
                column: "employee_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_split_expense_id",
                table: "hr_expense_split",
                column: "expense_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_split_product_id",
                table: "hr_expense_split",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_split_sale_order_id",
                table: "hr_expense_split",
                column: "sale_order_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_split_wizard_id",
                table: "hr_expense_split",
                column: "wizard_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_split_write_uid",
                table: "hr_expense_split",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_split_wizard_create_uid",
                table: "hr_expense_split_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_split_wizard_expense_id",
                table: "hr_expense_split_wizard",
                column: "expense_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_expense_split_wizard_write_uid",
                table: "hr_expense_split_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_holidays_cancel_leave_create_uid",
                table: "hr_holidays_cancel_leave",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_holidays_cancel_leave_leave_id",
                table: "hr_holidays_cancel_leave",
                column: "leave_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_holidays_cancel_leave_write_uid",
                table: "hr_holidays_cancel_leave",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_holidays_summary_employee_create_uid",
                table: "hr_holidays_summary_employee",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_holidays_summary_employee_write_uid",
                table: "hr_holidays_summary_employee",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "hr_job_is_published_index",
                table: "hr_job",
                column: "is_published");

            migrationBuilder.CreateIndex(
                name: "hr_job_name_company_uniq",
                table: "hr_job",
                columns: new[] { "name", "company_id", "department_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "hr_job_website_id_index",
                table: "hr_job",
                column: "website_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_job_address_id",
                table: "hr_job",
                column: "address_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_job_alias_id",
                table: "hr_job",
                column: "alias_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_job_company_id",
                table: "hr_job",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_job_contract_type_id",
                table: "hr_job",
                column: "contract_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_job_create_uid",
                table: "hr_job",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_job_department_id",
                table: "hr_job",
                column: "department_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_job_hr_responsible_id",
                table: "hr_job",
                column: "hr_responsible_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_job_manager_id",
                table: "hr_job",
                column: "manager_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_job_message_main_attachment_id",
                table: "hr_job",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_job_user_id",
                table: "hr_job",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_job_write_uid",
                table: "hr_job",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "hr_job_extended_interviewer_res_user_res_users_id_hr_job_id_idx",
                table: "hr_job_extended_interviewer_res_users",
                columns: new[] { "res_users_id", "hr_job_id" });

            migrationBuilder.CreateIndex(
                name: "hr_job_hr_recruitment_stage_r_hr_job_id_hr_recruitment_stag_idx",
                table: "hr_job_hr_recruitment_stage_rel",
                columns: new[] { "hr_job_id", "hr_recruitment_stage_id" });

            migrationBuilder.CreateIndex(
                name: "hr_job_res_users_rel_res_users_id_hr_job_id_idx",
                table: "hr_job_res_users_rel",
                columns: new[] { "res_users_id", "hr_job_id" });

            migrationBuilder.CreateIndex(
                name: "hr_leave_date_from_index",
                table: "hr_leave",
                column: "date_from");

            migrationBuilder.CreateIndex(
                name: "hr_leave_date_to_date_from_index",
                table: "hr_leave",
                columns: new[] { "date_to", "date_from" });

            migrationBuilder.CreateIndex(
                name: "hr_leave_employee_id_index",
                table: "hr_leave",
                column: "employee_id");

            migrationBuilder.CreateIndex(
                name: "hr_leave_user_id_index",
                table: "hr_leave",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_category_id",
                table: "hr_leave",
                column: "category_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_create_uid",
                table: "hr_leave",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_department_id",
                table: "hr_leave",
                column: "department_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_employee_company_id",
                table: "hr_leave",
                column: "employee_company_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_first_approver_id",
                table: "hr_leave",
                column: "first_approver_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_holiday_allocation_id",
                table: "hr_leave",
                column: "holiday_allocation_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_holiday_status_id",
                table: "hr_leave",
                column: "holiday_status_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_manager_id",
                table: "hr_leave",
                column: "manager_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_meeting_id",
                table: "hr_leave",
                column: "meeting_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_message_main_attachment_id",
                table: "hr_leave",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_mode_company_id",
                table: "hr_leave",
                column: "mode_company_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_overtime_id",
                table: "hr_leave",
                column: "overtime_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_parent_id",
                table: "hr_leave",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_second_approver_id",
                table: "hr_leave",
                column: "second_approver_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_write_uid",
                table: "hr_leave",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_accrual_level_accrual_plan_id",
                table: "hr_leave_accrual_level",
                column: "accrual_plan_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_accrual_level_create_uid",
                table: "hr_leave_accrual_level",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_accrual_level_parent_id",
                table: "hr_leave_accrual_level",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_accrual_level_write_uid",
                table: "hr_leave_accrual_level",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_accrual_plan_create_uid",
                table: "hr_leave_accrual_plan",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_accrual_plan_time_off_type_id",
                table: "hr_leave_accrual_plan",
                column: "time_off_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_accrual_plan_write_uid",
                table: "hr_leave_accrual_plan",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "hr_leave_allocation_date_from_index",
                table: "hr_leave_allocation",
                column: "date_from");

            migrationBuilder.CreateIndex(
                name: "hr_leave_allocation_employee_id_index",
                table: "hr_leave_allocation",
                column: "employee_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_allocation_accrual_plan_id",
                table: "hr_leave_allocation",
                column: "accrual_plan_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_allocation_approver_id",
                table: "hr_leave_allocation",
                column: "approver_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_allocation_category_id",
                table: "hr_leave_allocation",
                column: "category_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_allocation_create_uid",
                table: "hr_leave_allocation",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_allocation_department_id",
                table: "hr_leave_allocation",
                column: "department_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_allocation_employee_company_id",
                table: "hr_leave_allocation",
                column: "employee_company_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_allocation_holiday_status_id",
                table: "hr_leave_allocation",
                column: "holiday_status_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_allocation_manager_id",
                table: "hr_leave_allocation",
                column: "manager_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_allocation_message_main_attachment_id",
                table: "hr_leave_allocation",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_allocation_mode_company_id",
                table: "hr_leave_allocation",
                column: "mode_company_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_allocation_overtime_id",
                table: "hr_leave_allocation",
                column: "overtime_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_allocation_parent_id",
                table: "hr_leave_allocation",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_allocation_write_uid",
                table: "hr_leave_allocation",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_stress_day_company_id",
                table: "hr_leave_stress_day",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_stress_day_create_uid",
                table: "hr_leave_stress_day",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_stress_day_resource_calendar_id",
                table: "hr_leave_stress_day",
                column: "resource_calendar_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_stress_day_write_uid",
                table: "hr_leave_stress_day",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_type_allocation_notif_subtype_id",
                table: "hr_leave_type",
                column: "allocation_notif_subtype_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_type_company_id",
                table: "hr_leave_type",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_type_create_uid",
                table: "hr_leave_type",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_type_icon_id",
                table: "hr_leave_type",
                column: "icon_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_type_leave_notif_subtype_id",
                table: "hr_leave_type",
                column: "leave_notif_subtype_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_type_responsible_id",
                table: "hr_leave_type",
                column: "responsible_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_leave_type_write_uid",
                table: "hr_leave_type",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_payroll_structure_type_country_id",
                table: "hr_payroll_structure_type",
                column: "country_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_payroll_structure_type_create_uid",
                table: "hr_payroll_structure_type",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_payroll_structure_type_default_resource_calendar_id",
                table: "hr_payroll_structure_type",
                column: "default_resource_calendar_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_payroll_structure_type_write_uid",
                table: "hr_payroll_structure_type",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_plan_company_id",
                table: "hr_plan",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_plan_create_uid",
                table: "hr_plan",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_plan_department_id",
                table: "hr_plan",
                column: "department_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_plan_write_uid",
                table: "hr_plan",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_plan_activity_type_activity_type_id",
                table: "hr_plan_activity_type",
                column: "activity_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_plan_activity_type_company_id",
                table: "hr_plan_activity_type",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_plan_activity_type_create_uid",
                table: "hr_plan_activity_type",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_plan_activity_type_plan_id",
                table: "hr_plan_activity_type",
                column: "plan_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_plan_activity_type_responsible_id",
                table: "hr_plan_activity_type",
                column: "responsible_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_plan_activity_type_write_uid",
                table: "hr_plan_activity_type",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_plan_wizard_create_uid",
                table: "hr_plan_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_plan_wizard_plan_id",
                table: "hr_plan_wizard",
                column: "plan_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_plan_wizard_write_uid",
                table: "hr_plan_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "hr_recruitment_degree_name_uniq",
                table: "hr_recruitment_degree",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_hr_recruitment_degree_create_uid",
                table: "hr_recruitment_degree",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_recruitment_degree_write_uid",
                table: "hr_recruitment_degree",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_recruitment_source_alias_id",
                table: "hr_recruitment_source",
                column: "alias_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_recruitment_source_create_uid",
                table: "hr_recruitment_source",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_recruitment_source_job_id",
                table: "hr_recruitment_source",
                column: "job_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_recruitment_source_medium_id",
                table: "hr_recruitment_source",
                column: "medium_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_recruitment_source_source_id",
                table: "hr_recruitment_source",
                column: "source_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_recruitment_source_write_uid",
                table: "hr_recruitment_source",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_recruitment_stage_create_uid",
                table: "hr_recruitment_stage",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_recruitment_stage_template_id",
                table: "hr_recruitment_stage",
                column: "template_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_recruitment_stage_write_uid",
                table: "hr_recruitment_stage",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_resume_line_create_uid",
                table: "hr_resume_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_resume_line_employee_id",
                table: "hr_resume_line",
                column: "employee_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_resume_line_line_type_id",
                table: "hr_resume_line",
                column: "line_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_resume_line_write_uid",
                table: "hr_resume_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_resume_line_type_create_uid",
                table: "hr_resume_line_type",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_resume_line_type_write_uid",
                table: "hr_resume_line_type",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_skill_create_uid",
                table: "hr_skill",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_skill_skill_type_id",
                table: "hr_skill",
                column: "skill_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_skill_write_uid",
                table: "hr_skill",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_skill_level_create_uid",
                table: "hr_skill_level",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_skill_level_skill_type_id",
                table: "hr_skill_level",
                column: "skill_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_skill_level_write_uid",
                table: "hr_skill_level",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_skill_type_create_uid",
                table: "hr_skill_type",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_skill_type_write_uid",
                table: "hr_skill_type",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_work_location_address_id",
                table: "hr_work_location",
                column: "address_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_work_location_company_id",
                table: "hr_work_location",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_hr_work_location_create_uid",
                table: "hr_work_location",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_hr_work_location_write_uid",
                table: "hr_work_location",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_iap_account_create_uid",
                table: "iap_account",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_iap_account_write_uid",
                table: "iap_account",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "iap_account_res_company_rel_res_company_id_iap_account_id_idx",
                table: "iap_account_res_company_rel",
                columns: new[] { "res_company_id", "iap_account_id" });

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_client_binding_model_id",
                table: "ir_act_client",
                column: "binding_model_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_client_create_uid",
                table: "ir_act_client",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_client_write_uid",
                table: "ir_act_client",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_report_xml_binding_model_id",
                table: "ir_act_report_xml",
                column: "binding_model_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_report_xml_create_uid",
                table: "ir_act_report_xml",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_report_xml_paperformat_id",
                table: "ir_act_report_xml",
                column: "paperformat_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_report_xml_write_uid",
                table: "ir_act_report_xml",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_server_activity_type_id",
                table: "ir_act_server",
                column: "activity_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_server_activity_user_id",
                table: "ir_act_server",
                column: "activity_user_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_server_binding_model_id",
                table: "ir_act_server",
                column: "binding_model_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_server_create_uid",
                table: "ir_act_server",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_server_crud_model_id",
                table: "ir_act_server",
                column: "crud_model_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_server_link_field_id",
                table: "ir_act_server",
                column: "link_field_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_server_model_id",
                table: "ir_act_server",
                column: "model_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_server_sms_template_id",
                table: "ir_act_server",
                column: "sms_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_server_template_id",
                table: "ir_act_server",
                column: "template_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_server_write_uid",
                table: "ir_act_server",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_act_server_group_rel_gid_act_id_idx",
                table: "ir_act_server_group_rel",
                columns: new[] { "gid", "act_id" });

            migrationBuilder.CreateIndex(
                name: "ir_act_server_res_partner_rel_res_partner_id_ir_act_server__idx",
                table: "ir_act_server_res_partner_rel",
                columns: new[] { "res_partner_id", "ir_act_server_id" });

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_url_binding_model_id",
                table: "ir_act_url",
                column: "binding_model_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_url_create_uid",
                table: "ir_act_url",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_url_write_uid",
                table: "ir_act_url",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_window_binding_model_id",
                table: "ir_act_window",
                column: "binding_model_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_window_create_uid",
                table: "ir_act_window",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_window_search_view_id",
                table: "ir_act_window",
                column: "search_view_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_window_view_id",
                table: "ir_act_window",
                column: "view_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_window_write_uid",
                table: "ir_act_window",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_act_window_group_rel_gid_act_id_idx",
                table: "ir_act_window_group_rel",
                columns: new[] { "gid", "act_id" });

            migrationBuilder.CreateIndex(
                name: "act_window_view_unique_mode_per_action",
                table: "ir_act_window_view",
                columns: new[] { "act_window_id", "view_mode" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_window_view_create_uid",
                table: "ir_act_window_view",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_window_view_view_id",
                table: "ir_act_window_view",
                column: "view_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_act_window_view_write_uid",
                table: "ir_act_window_view",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_actions_binding_model_id",
                table: "ir_actions",
                column: "binding_model_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_actions_create_uid",
                table: "ir_actions",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_actions_write_uid",
                table: "ir_actions",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_actions_todo_action_id_index",
                table: "ir_actions_todo",
                column: "action_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_actions_todo_create_uid",
                table: "ir_actions_todo",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_actions_todo_write_uid",
                table: "ir_actions_todo",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_asset_create_uid",
                table: "ir_asset",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_asset_theme_template_id",
                table: "ir_asset",
                column: "theme_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_asset_website_id",
                table: "ir_asset",
                column: "website_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_asset_write_uid",
                table: "ir_asset",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_attachment_checksum_index",
                table: "ir_attachment",
                column: "checksum");

            migrationBuilder.CreateIndex(
                name: "ir_attachment_res_idx",
                table: "ir_attachment",
                columns: new[] { "res_model", "res_id" });

            migrationBuilder.CreateIndex(
                name: "ir_attachment_store_fname_index",
                table: "ir_attachment",
                column: "store_fname");

            migrationBuilder.CreateIndex(
                name: "ir_attachment_url_index",
                table: "ir_attachment",
                column: "url",
                filter: "(url IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "IX_ir_attachment_company_id",
                table: "ir_attachment",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_attachment_create_uid",
                table: "ir_attachment",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_attachment_original_id",
                table: "ir_attachment",
                column: "original_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_attachment_theme_template_id",
                table: "ir_attachment",
                column: "theme_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_attachment_website_id",
                table: "ir_attachment",
                column: "website_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_attachment_write_uid",
                table: "ir_attachment",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_config_parameter_key_uniq",
                table: "ir_config_parameter",
                column: "key",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ir_config_parameter_create_uid",
                table: "ir_config_parameter",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_config_parameter_write_uid",
                table: "ir_config_parameter",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_cron_create_uid",
                table: "ir_cron",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_cron_ir_actions_server_id",
                table: "ir_cron",
                column: "ir_actions_server_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_cron_user_id",
                table: "ir_cron",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_cron_write_uid",
                table: "ir_cron",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_cron_trigger_cron_id_index",
                table: "ir_cron_trigger",
                column: "cron_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_cron_trigger_create_uid",
                table: "ir_cron_trigger",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_cron_trigger_write_uid",
                table: "ir_cron_trigger",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_default_company_id_index",
                table: "ir_default",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "ir_default_field_id_index",
                table: "ir_default",
                column: "field_id");

            migrationBuilder.CreateIndex(
                name: "ir_default_user_id_index",
                table: "ir_default",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_default_create_uid",
                table: "ir_default",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_default_write_uid",
                table: "ir_default",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_demo_create_uid",
                table: "ir_demo",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_demo_write_uid",
                table: "ir_demo",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_demo_failure_create_uid",
                table: "ir_demo_failure",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_demo_failure_module_id",
                table: "ir_demo_failure",
                column: "module_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_demo_failure_wizard_id",
                table: "ir_demo_failure",
                column: "wizard_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_demo_failure_write_uid",
                table: "ir_demo_failure",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_demo_failure_wizard_create_uid",
                table: "ir_demo_failure_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_demo_failure_wizard_write_uid",
                table: "ir_demo_failure_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_exports_resource_index",
                table: "ir_exports",
                column: "resource");

            migrationBuilder.CreateIndex(
                name: "IX_ir_exports_create_uid",
                table: "ir_exports",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_exports_write_uid",
                table: "ir_exports",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_exports_line_export_id_index",
                table: "ir_exports_line",
                column: "export_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_exports_line_create_uid",
                table: "ir_exports_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_exports_line_write_uid",
                table: "ir_exports_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_filters_name_model_uid_unique",
                table: "ir_filters",
                columns: new[] { "model_id", "user_id", "action_id", "name" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ir_filters_create_uid",
                table: "ir_filters",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_filters_user_id",
                table: "ir_filters",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_filters_write_uid",
                table: "ir_filters",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_logging_dbname_index",
                table: "ir_logging",
                column: "dbname");

            migrationBuilder.CreateIndex(
                name: "ir_logging_level_index",
                table: "ir_logging",
                column: "level");

            migrationBuilder.CreateIndex(
                name: "ir_logging_type_index",
                table: "ir_logging",
                column: "type");

            migrationBuilder.CreateIndex(
                name: "ir_mail_server_name_index",
                table: "ir_mail_server",
                column: "name");

            migrationBuilder.CreateIndex(
                name: "IX_ir_mail_server_create_uid",
                table: "ir_mail_server",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_mail_server_write_uid",
                table: "ir_mail_server",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_model_obj_name_uniq",
                table: "ir_model",
                column: "model",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ir_model_create_uid",
                table: "ir_model",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_model_website_form_default_field_id",
                table: "ir_model",
                column: "website_form_default_field_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_model_write_uid",
                table: "ir_model",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_model_access_group_id_index",
                table: "ir_model_access",
                column: "group_id");

            migrationBuilder.CreateIndex(
                name: "ir_model_access_model_id_index",
                table: "ir_model_access",
                column: "model_id");

            migrationBuilder.CreateIndex(
                name: "ir_model_access_name_index",
                table: "ir_model_access",
                column: "name");

            migrationBuilder.CreateIndex(
                name: "IX_ir_model_access_create_uid",
                table: "ir_model_access",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_model_access_write_uid",
                table: "ir_model_access",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_model_constraint_model_index",
                table: "ir_model_constraint",
                column: "model");

            migrationBuilder.CreateIndex(
                name: "ir_model_constraint_module_index",
                table: "ir_model_constraint",
                column: "module");

            migrationBuilder.CreateIndex(
                name: "ir_model_constraint_module_name_uniq",
                table: "ir_model_constraint",
                columns: new[] { "name", "module" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "ir_model_constraint_name_index",
                table: "ir_model_constraint",
                column: "name");

            migrationBuilder.CreateIndex(
                name: "ir_model_constraint_type_index",
                table: "ir_model_constraint",
                column: "type");

            migrationBuilder.CreateIndex(
                name: "IX_ir_model_constraint_create_uid",
                table: "ir_model_constraint",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_model_constraint_write_uid",
                table: "ir_model_constraint",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_model_data_model_res_id_index",
                table: "ir_model_data",
                columns: new[] { "model", "res_id" });

            migrationBuilder.CreateIndex(
                name: "ir_model_data_module_name_uniq_index",
                table: "ir_model_data",
                columns: new[] { "module", "name" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ir_model_data_create_uid",
                table: "ir_model_data",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_model_data_write_uid",
                table: "ir_model_data",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_model_fields_complete_name_index",
                table: "ir_model_fields",
                column: "complete_name");

            migrationBuilder.CreateIndex(
                name: "ir_model_fields_model_id_index",
                table: "ir_model_fields",
                column: "model_id");

            migrationBuilder.CreateIndex(
                name: "ir_model_fields_model_index",
                table: "ir_model_fields",
                column: "model");

            migrationBuilder.CreateIndex(
                name: "ir_model_fields_name_index",
                table: "ir_model_fields",
                column: "name");

            migrationBuilder.CreateIndex(
                name: "ir_model_fields_name_unique",
                table: "ir_model_fields",
                columns: new[] { "model", "name" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "ir_model_fields_state_index",
                table: "ir_model_fields",
                column: "state");

            migrationBuilder.CreateIndex(
                name: "ir_model_fields_website_form_blacklisted_index",
                table: "ir_model_fields",
                column: "website_form_blacklisted");

            migrationBuilder.CreateIndex(
                name: "IX_ir_model_fields_create_uid",
                table: "ir_model_fields",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_model_fields_related_field_id",
                table: "ir_model_fields",
                column: "related_field_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_model_fields_relation_field_id",
                table: "ir_model_fields",
                column: "relation_field_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_model_fields_write_uid",
                table: "ir_model_fields",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_model_fields_group_rel_group_id_field_id_idx",
                table: "ir_model_fields_group_rel",
                columns: new[] { "group_id", "field_id" });

            migrationBuilder.CreateIndex(
                name: "ir_model_fields_selection_field_id_index",
                table: "ir_model_fields_selection",
                column: "field_id");

            migrationBuilder.CreateIndex(
                name: "ir_model_fields_selection_selection_field_uniq",
                table: "ir_model_fields_selection",
                columns: new[] { "field_id", "value" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ir_model_fields_selection_create_uid",
                table: "ir_model_fields_selection",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_model_fields_selection_write_uid",
                table: "ir_model_fields_selection",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_model_relation_model_index",
                table: "ir_model_relation",
                column: "model");

            migrationBuilder.CreateIndex(
                name: "ir_model_relation_module_index",
                table: "ir_model_relation",
                column: "module");

            migrationBuilder.CreateIndex(
                name: "ir_model_relation_name_index",
                table: "ir_model_relation",
                column: "name");

            migrationBuilder.CreateIndex(
                name: "IX_ir_model_relation_create_uid",
                table: "ir_model_relation",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_model_relation_write_uid",
                table: "ir_model_relation",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_module_category_parent_id_index",
                table: "ir_module_category",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_module_category_create_uid",
                table: "ir_module_category",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_module_category_write_uid",
                table: "ir_module_category",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_module_module_category_id_index",
                table: "ir_module_module",
                column: "category_id");

            migrationBuilder.CreateIndex(
                name: "ir_module_module_name_uniq",
                table: "ir_module_module",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "ir_module_module_state_index",
                table: "ir_module_module",
                column: "state");

            migrationBuilder.CreateIndex(
                name: "IX_ir_module_module_create_uid",
                table: "ir_module_module",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_module_module_write_uid",
                table: "ir_module_module",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_module_module_dependency_name_index",
                table: "ir_module_module_dependency",
                column: "name");

            migrationBuilder.CreateIndex(
                name: "IX_ir_module_module_dependency_module_id",
                table: "ir_module_module_dependency",
                column: "module_id");

            migrationBuilder.CreateIndex(
                name: "ir_module_module_exclusion_name_index",
                table: "ir_module_module_exclusion",
                column: "name");

            migrationBuilder.CreateIndex(
                name: "IX_ir_module_module_exclusion_create_uid",
                table: "ir_module_module_exclusion",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_module_module_exclusion_module_id",
                table: "ir_module_module_exclusion",
                column: "module_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_module_module_exclusion_write_uid",
                table: "ir_module_module_exclusion",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_profile_session_index",
                table: "ir_profile",
                column: "session");

            migrationBuilder.CreateIndex(
                name: "ir_property_company_id_index",
                table: "ir_property",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "ir_property_name_index",
                table: "ir_property",
                column: "name");

            migrationBuilder.CreateIndex(
                name: "ir_property_res_id_index",
                table: "ir_property",
                column: "res_id");

            migrationBuilder.CreateIndex(
                name: "ir_property_type_index",
                table: "ir_property",
                column: "type");

            migrationBuilder.CreateIndex(
                name: "IX_ir_property_create_uid",
                table: "ir_property",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_property_fields_id",
                table: "ir_property",
                column: "fields_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_property_write_uid",
                table: "ir_property",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_rule_model_id_index",
                table: "ir_rule",
                column: "model_id");

            migrationBuilder.CreateIndex(
                name: "ir_rule_name_index",
                table: "ir_rule",
                column: "name");

            migrationBuilder.CreateIndex(
                name: "IX_ir_rule_create_uid",
                table: "ir_rule",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_rule_write_uid",
                table: "ir_rule",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_sequence_company_id",
                table: "ir_sequence",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_sequence_create_uid",
                table: "ir_sequence",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_sequence_write_uid",
                table: "ir_sequence",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_sequence_date_range_create_uid",
                table: "ir_sequence_date_range",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_sequence_date_range_sequence_id",
                table: "ir_sequence_date_range",
                column: "sequence_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_sequence_date_range_write_uid",
                table: "ir_sequence_date_range",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_server_object_lines_col1",
                table: "ir_server_object_lines",
                column: "col1");

            migrationBuilder.CreateIndex(
                name: "IX_ir_server_object_lines_create_uid",
                table: "ir_server_object_lines",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_server_object_lines_server_id",
                table: "ir_server_object_lines",
                column: "server_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_server_object_lines_write_uid",
                table: "ir_server_object_lines",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_ui_menu_parent_id_index",
                table: "ir_ui_menu",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "ir_ui_menu_parent_path_index",
                table: "ir_ui_menu",
                column: "parent_path");

            migrationBuilder.CreateIndex(
                name: "IX_ir_ui_menu_create_uid",
                table: "ir_ui_menu",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_ui_menu_write_uid",
                table: "ir_ui_menu",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_ui_menu_group_rel_gid_menu_id_idx",
                table: "ir_ui_menu_group_rel",
                columns: new[] { "gid", "menu_id" });

            migrationBuilder.CreateIndex(
                name: "ir_ui_view_inherit_id_index",
                table: "ir_ui_view",
                column: "inherit_id");

            migrationBuilder.CreateIndex(
                name: "ir_ui_view_key_index",
                table: "ir_ui_view",
                column: "key",
                filter: "(key IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "ir_ui_view_model_index",
                table: "ir_ui_view",
                column: "model");

            migrationBuilder.CreateIndex(
                name: "ir_ui_view_model_type_inherit_id",
                table: "ir_ui_view",
                columns: new[] { "model", "inherit_id" });

            migrationBuilder.CreateIndex(
                name: "IX_ir_ui_view_create_uid",
                table: "ir_ui_view",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_ui_view_theme_template_id",
                table: "ir_ui_view",
                column: "theme_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_ui_view_website_id",
                table: "ir_ui_view",
                column: "website_id");

            migrationBuilder.CreateIndex(
                name: "IX_ir_ui_view_write_uid",
                table: "ir_ui_view",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_ui_view_custom_ref_id_index",
                table: "ir_ui_view_custom",
                column: "ref_id");

            migrationBuilder.CreateIndex(
                name: "ir_ui_view_custom_user_id_index",
                table: "ir_ui_view_custom",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "ir_ui_view_custom_user_id_ref_id",
                table: "ir_ui_view_custom",
                columns: new[] { "user_id", "ref_id" });

            migrationBuilder.CreateIndex(
                name: "IX_ir_ui_view_custom_create_uid",
                table: "ir_ui_view_custom",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_ir_ui_view_custom_write_uid",
                table: "ir_ui_view_custom",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "ir_ui_view_group_rel_group_id_view_id_idx",
                table: "ir_ui_view_group_rel",
                columns: new[] { "group_id", "view_id" });

            migrationBuilder.CreateIndex(
                name: "job_favorite_user_rel_user_id_job_id_idx",
                table: "job_favorite_user_rel",
                columns: new[] { "user_id", "job_id" });

            migrationBuilder.CreateIndex(
                name: "journal_account_control_rel_account_id_journal_id_idx",
                table: "journal_account_control_rel",
                columns: new[] { "account_id", "journal_id" });

            migrationBuilder.CreateIndex(
                name: "IX_lot_label_layout_create_uid",
                table: "lot_label_layout",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_lot_label_layout_write_uid",
                table: "lot_label_layout",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "lot_label_layout_stock_pickin_stock_picking_id_lot_label_la_idx",
                table: "lot_label_layout_stock_picking_rel",
                columns: new[] { "stock_picking_id", "lot_label_layout_id" });

            migrationBuilder.CreateIndex(
                name: "IX_lunch_alert_create_uid",
                table: "lunch_alert",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_alert_cron_id",
                table: "lunch_alert",
                column: "cron_id");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_alert_write_uid",
                table: "lunch_alert",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "lunch_alert_lunch_location_re_lunch_location_id_lunch_alert_idx",
                table: "lunch_alert_lunch_location_rel",
                columns: new[] { "lunch_location_id", "lunch_alert_id" });

            migrationBuilder.CreateIndex(
                name: "IX_lunch_cashmove_create_uid",
                table: "lunch_cashmove",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_cashmove_currency_id",
                table: "lunch_cashmove",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_cashmove_user_id",
                table: "lunch_cashmove",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_cashmove_write_uid",
                table: "lunch_cashmove",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_location_company_id",
                table: "lunch_location",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_location_create_uid",
                table: "lunch_location",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_location_write_uid",
                table: "lunch_location",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "lunch_location_lunch_supplier_lunch_location_id_lunch_suppl_idx",
                table: "lunch_location_lunch_supplier_rel",
                columns: new[] { "lunch_location_id", "lunch_supplier_id" });

            migrationBuilder.CreateIndex(
                name: "IX_lunch_order_category_id",
                table: "lunch_order",
                column: "category_id");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_order_company_id",
                table: "lunch_order",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_order_create_uid",
                table: "lunch_order",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_order_currency_id",
                table: "lunch_order",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_order_lunch_location_id",
                table: "lunch_order",
                column: "lunch_location_id");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_order_product_id",
                table: "lunch_order",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_order_write_uid",
                table: "lunch_order",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "lunch_order_state_index",
                table: "lunch_order",
                column: "state");

            migrationBuilder.CreateIndex(
                name: "lunch_order_supplier_id_index",
                table: "lunch_order",
                column: "supplier_id");

            migrationBuilder.CreateIndex(
                name: "lunch_order_user_product_date",
                table: "lunch_order",
                columns: new[] { "user_id", "product_id", "date" });

            migrationBuilder.CreateIndex(
                name: "lunch_order_topping_topping_id_order_id_idx",
                table: "lunch_order_topping",
                columns: new[] { "topping_id", "order_id" });

            migrationBuilder.CreateIndex(
                name: "IX_lunch_product_category_id",
                table: "lunch_product",
                column: "category_id");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_product_company_id",
                table: "lunch_product",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_product_create_uid",
                table: "lunch_product",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_product_supplier_id",
                table: "lunch_product",
                column: "supplier_id");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_product_write_uid",
                table: "lunch_product",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_product_category_company_id",
                table: "lunch_product_category",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_product_category_create_uid",
                table: "lunch_product_category",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_product_category_write_uid",
                table: "lunch_product_category",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "lunch_product_favorite_user_rel_user_id_product_id_idx",
                table: "lunch_product_favorite_user_rel",
                columns: new[] { "user_id", "product_id" });

            migrationBuilder.CreateIndex(
                name: "IX_lunch_supplier_company_id",
                table: "lunch_supplier",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_supplier_create_uid",
                table: "lunch_supplier",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_supplier_cron_id",
                table: "lunch_supplier",
                column: "cron_id");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_supplier_message_main_attachment_id",
                table: "lunch_supplier",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_supplier_partner_id",
                table: "lunch_supplier",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_supplier_responsible_id",
                table: "lunch_supplier",
                column: "responsible_id");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_supplier_write_uid",
                table: "lunch_supplier",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_topping_company_id",
                table: "lunch_topping",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_topping_create_uid",
                table: "lunch_topping",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_topping_supplier_id",
                table: "lunch_topping",
                column: "supplier_id");

            migrationBuilder.CreateIndex(
                name: "IX_lunch_topping_write_uid",
                table: "lunch_topping",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_activity_activity_type_id",
                table: "mail_activity",
                column: "activity_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_activity_calendar_event_id",
                table: "mail_activity",
                column: "calendar_event_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_activity_create_uid",
                table: "mail_activity",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_activity_note_id",
                table: "mail_activity",
                column: "note_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_activity_previous_activity_type_id",
                table: "mail_activity",
                column: "previous_activity_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_activity_recommended_activity_type_id",
                table: "mail_activity",
                column: "recommended_activity_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_activity_request_partner_id",
                table: "mail_activity",
                column: "request_partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_activity_write_uid",
                table: "mail_activity",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mail_activity_date_deadline_index",
                table: "mail_activity",
                column: "date_deadline");

            migrationBuilder.CreateIndex(
                name: "mail_activity_res_id_index",
                table: "mail_activity",
                column: "res_id");

            migrationBuilder.CreateIndex(
                name: "mail_activity_res_model_id_index",
                table: "mail_activity",
                column: "res_model_id");

            migrationBuilder.CreateIndex(
                name: "mail_activity_res_model_index",
                table: "mail_activity",
                column: "res_model");

            migrationBuilder.CreateIndex(
                name: "mail_activity_user_id_index",
                table: "mail_activity",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "mail_activity_rel_recommended_id_activity_id_idx",
                table: "mail_activity_rel",
                columns: new[] { "recommended_id", "activity_id" });

            migrationBuilder.CreateIndex(
                name: "IX_mail_activity_type_default_user_id",
                table: "mail_activity_type",
                column: "default_user_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_activity_type_triggered_next_type_id",
                table: "mail_activity_type",
                column: "triggered_next_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_activity_type_write_uid",
                table: "mail_activity_type",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mail_activity_type_create_uid_index",
                table: "mail_activity_type",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "mail_activity_type_mail_templ_mail_template_id_mail_activit_idx",
                table: "mail_activity_type_mail_template_rel",
                columns: new[] { "mail_template_id", "mail_activity_type_id" });

            migrationBuilder.CreateIndex(
                name: "IX_mail_alias_alias_model_id",
                table: "mail_alias",
                column: "alias_model_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_alias_alias_parent_model_id",
                table: "mail_alias",
                column: "alias_parent_model_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_alias_alias_user_id",
                table: "mail_alias",
                column: "alias_user_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_alias_create_uid",
                table: "mail_alias",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_alias_write_uid",
                table: "mail_alias",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mail_alias_alias_unique",
                table: "mail_alias",
                column: "alias_name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_mail_blacklist_create_uid",
                table: "mail_blacklist",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_blacklist_message_main_attachment_id",
                table: "mail_blacklist",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_blacklist_write_uid",
                table: "mail_blacklist",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mail_blacklist_email_index",
                table: "mail_blacklist",
                column: "email")
                .Annotation("Npgsql:IndexMethod", "gin")
                .Annotation("Npgsql:IndexOperators", new[] { "gin_trgm_ops" });

            migrationBuilder.CreateIndex(
                name: "mail_blacklist_unique_email",
                table: "mail_blacklist",
                column: "email",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_mail_blacklist_remove_create_uid",
                table: "mail_blacklist_remove",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_blacklist_remove_write_uid",
                table: "mail_blacklist_remove",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_channel_create_uid",
                table: "mail_channel",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_channel_group_public_id",
                table: "mail_channel",
                column: "group_public_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_channel_message_main_attachment_id",
                table: "mail_channel",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_channel_write_uid",
                table: "mail_channel",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mail_channel_uuid_unique",
                table: "mail_channel",
                column: "uuid",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_mail_channel_member_create_uid",
                table: "mail_channel_member",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_channel_member_fetched_message_id",
                table: "mail_channel_member",
                column: "fetched_message_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_channel_member_rtc_inviting_session_id",
                table: "mail_channel_member",
                column: "rtc_inviting_session_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_channel_member_seen_message_id",
                table: "mail_channel_member",
                column: "seen_message_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_channel_member_write_uid",
                table: "mail_channel_member",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mail_channel_member_guest_id_index",
                table: "mail_channel_member",
                column: "guest_id");

            migrationBuilder.CreateIndex(
                name: "mail_channel_member_guest_unique",
                table: "mail_channel_member",
                columns: new[] { "channel_id", "guest_id" },
                unique: true,
                filter: "(guest_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "mail_channel_member_partner_id_index",
                table: "mail_channel_member",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "mail_channel_member_partner_unique",
                table: "mail_channel_member",
                columns: new[] { "channel_id", "partner_id" },
                unique: true,
                filter: "(partner_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "mail_channel_member_seen_message_id_idx",
                table: "mail_channel_member",
                columns: new[] { "channel_id", "partner_id", "seen_message_id" });

            migrationBuilder.CreateIndex(
                name: "mail_channel_res_groups_rel_res_groups_id_mail_channel_id_idx",
                table: "mail_channel_res_groups_rel",
                columns: new[] { "res_groups_id", "mail_channel_id" });

            migrationBuilder.CreateIndex(
                name: "IX_mail_channel_rtc_session_channel_id",
                table: "mail_channel_rtc_session",
                column: "channel_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_channel_rtc_session_create_uid",
                table: "mail_channel_rtc_session",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_channel_rtc_session_write_uid",
                table: "mail_channel_rtc_session",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mail_channel_rtc_session_channel_member_unique",
                table: "mail_channel_rtc_session",
                column: "channel_member_id",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "mail_channel_rtc_session_write_date_index",
                table: "mail_channel_rtc_session",
                column: "write_date");

            migrationBuilder.CreateIndex(
                name: "IX_mail_compose_message_author_id",
                table: "mail_compose_message",
                column: "author_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_compose_message_create_uid",
                table: "mail_compose_message",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_compose_message_mail_activity_type_id",
                table: "mail_compose_message",
                column: "mail_activity_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_compose_message_mail_server_id",
                table: "mail_compose_message",
                column: "mail_server_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_compose_message_parent_id",
                table: "mail_compose_message",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_compose_message_subtype_id",
                table: "mail_compose_message",
                column: "subtype_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_compose_message_template_id",
                table: "mail_compose_message",
                column: "template_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_compose_message_write_uid",
                table: "mail_compose_message",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mail_compose_message_ir_attachments_attachment_id_wizard_id_idx",
                table: "mail_compose_message_ir_attachments_rel",
                columns: new[] { "attachment_id", "wizard_id" });

            migrationBuilder.CreateIndex(
                name: "mail_compose_message_res_partner_rel_partner_id_wizard_id_idx",
                table: "mail_compose_message_res_partner_rel",
                columns: new[] { "partner_id", "wizard_id" });

            migrationBuilder.CreateIndex(
                name: "mail_followers_mail_followers_res_partner_res_model_id_uniq",
                table: "mail_followers",
                columns: new[] { "res_model", "res_id", "partner_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "mail_followers_partner_id_index",
                table: "mail_followers",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "mail_followers_res_id_index",
                table: "mail_followers",
                column: "res_id");

            migrationBuilder.CreateIndex(
                name: "mail_followers_res_model_index",
                table: "mail_followers",
                column: "res_model");

            migrationBuilder.CreateIndex(
                name: "mail_followers_mail_message_s_mail_message_subtype_id_mail__idx",
                table: "mail_followers_mail_message_subtype_rel",
                columns: new[] { "mail_message_subtype_id", "mail_followers_id" });

            migrationBuilder.CreateIndex(
                name: "IX_mail_gateway_allowed_create_uid",
                table: "mail_gateway_allowed",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_gateway_allowed_write_uid",
                table: "mail_gateway_allowed",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mail_gateway_allowed_email_normalized_index",
                table: "mail_gateway_allowed",
                column: "email_normalized");

            migrationBuilder.CreateIndex(
                name: "IX_mail_guest_country_id",
                table: "mail_guest",
                column: "country_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_guest_create_uid",
                table: "mail_guest",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_guest_write_uid",
                table: "mail_guest",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_ice_server_create_uid",
                table: "mail_ice_server",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_ice_server_write_uid",
                table: "mail_ice_server",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_link_preview_create_uid",
                table: "mail_link_preview",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_link_preview_write_uid",
                table: "mail_link_preview",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mail_link_preview_create_date_index",
                table: "mail_link_preview",
                column: "create_date");

            migrationBuilder.CreateIndex(
                name: "mail_link_preview_message_id_index",
                table: "mail_link_preview",
                column: "message_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_mail_create_uid",
                table: "mail_mail",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_mail_fetchmail_server_id",
                table: "mail_mail",
                column: "fetchmail_server_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_mail_write_uid",
                table: "mail_mail",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mail_mail_mail_message_id_index",
                table: "mail_mail",
                column: "mail_message_id");

            migrationBuilder.CreateIndex(
                name: "mail_mail_to_delete_idx",
                table: "mail_mail",
                column: "id",
                filter: "(to_delete = true)");

            migrationBuilder.CreateIndex(
                name: "mail_mail_res_partner_rel_res_partner_id_mail_mail_id_idx",
                table: "mail_mail_res_partner_rel",
                columns: new[] { "res_partner_id", "mail_mail_id" });

            migrationBuilder.CreateIndex(
                name: "IX_mail_message_author_guest_id",
                table: "mail_message",
                column: "author_guest_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_message_create_uid",
                table: "mail_message",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_message_mail_server_id",
                table: "mail_message",
                column: "mail_server_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_message_write_uid",
                table: "mail_message",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mail_message_author_id_index",
                table: "mail_message",
                column: "author_id");

            migrationBuilder.CreateIndex(
                name: "mail_message_mail_activity_type_id_index",
                table: "mail_message",
                column: "mail_activity_type_id");

            migrationBuilder.CreateIndex(
                name: "mail_message_message_id_index",
                table: "mail_message",
                column: "message_id");

            migrationBuilder.CreateIndex(
                name: "mail_message_model_res_id_id_idx",
                table: "mail_message",
                columns: new[] { "model", "res_id", "id" });

            migrationBuilder.CreateIndex(
                name: "mail_message_model_res_id_idx",
                table: "mail_message",
                columns: new[] { "model", "res_id" });

            migrationBuilder.CreateIndex(
                name: "mail_message_parent_id_index",
                table: "mail_message",
                column: "parent_id",
                filter: "(parent_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "mail_message_subtype_id_index",
                table: "mail_message",
                column: "subtype_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_message_reaction_guest_id",
                table: "mail_message_reaction",
                column: "guest_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_message_reaction_partner_id",
                table: "mail_message_reaction",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "mail_message_reaction_guest_unique",
                table: "mail_message_reaction",
                columns: new[] { "message_id", "content", "guest_id" },
                unique: true,
                filter: "(guest_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "mail_message_reaction_partner_unique",
                table: "mail_message_reaction",
                columns: new[] { "message_id", "content", "partner_id" },
                unique: true,
                filter: "(partner_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "mail_message_res_partner_rel_res_partner_id_mail_message_id_idx",
                table: "mail_message_res_partner_rel",
                columns: new[] { "res_partner_id", "mail_message_id" });

            migrationBuilder.CreateIndex(
                name: "mail_message_res_partner_star_res_partner_id_mail_message_i_idx",
                table: "mail_message_res_partner_starred_rel",
                columns: new[] { "res_partner_id", "mail_message_id" });

            migrationBuilder.CreateIndex(
                name: "IX_mail_message_schedule_create_uid",
                table: "mail_message_schedule",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_message_schedule_mail_message_id",
                table: "mail_message_schedule",
                column: "mail_message_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_message_schedule_write_uid",
                table: "mail_message_schedule",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_message_subtype_create_uid",
                table: "mail_message_subtype",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_message_subtype_parent_id",
                table: "mail_message_subtype",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_message_subtype_write_uid",
                table: "mail_message_subtype",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mail_notification_author_id_notification_status_failure",
                table: "mail_notification",
                columns: new[] { "author_id", "notification_status" },
                filter: "(notification_status = ANY (ARRAY[('bounce'::character varying)::text, ('exception'::character varying)::text]))");

            migrationBuilder.CreateIndex(
                name: "mail_notification_is_read_index",
                table: "mail_notification",
                column: "is_read");

            migrationBuilder.CreateIndex(
                name: "mail_notification_letter_id_index",
                table: "mail_notification",
                column: "letter_id",
                filter: "(letter_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "mail_notification_mail_mail_id_index",
                table: "mail_notification",
                column: "mail_mail_id");

            migrationBuilder.CreateIndex(
                name: "mail_notification_mail_message_id_index",
                table: "mail_notification",
                column: "mail_message_id");

            migrationBuilder.CreateIndex(
                name: "mail_notification_notification_status_index",
                table: "mail_notification",
                column: "notification_status");

            migrationBuilder.CreateIndex(
                name: "mail_notification_notification_type_index",
                table: "mail_notification",
                column: "notification_type");

            migrationBuilder.CreateIndex(
                name: "mail_notification_res_partner_id_index",
                table: "mail_notification",
                column: "res_partner_id");

            migrationBuilder.CreateIndex(
                name: "mail_notification_res_partner_id_is_read_notification_status_ma",
                table: "mail_notification",
                columns: new[] { "res_partner_id", "is_read", "notification_status", "mail_message_id" });

            migrationBuilder.CreateIndex(
                name: "mail_notification_sms_id_index",
                table: "mail_notification",
                column: "sms_id",
                filter: "(sms_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "unique_mail_message_id_res_partner_id_if_set",
                table: "mail_notification",
                columns: new[] { "mail_message_id", "res_partner_id" },
                unique: true,
                filter: "(res_partner_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "mail_notification_mail_resend_mail_notification_id_mail_res_idx",
                table: "mail_notification_mail_resend_message_rel",
                columns: new[] { "mail_notification_id", "mail_resend_message_id" });

            migrationBuilder.CreateIndex(
                name: "IX_mail_resend_message_create_uid",
                table: "mail_resend_message",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_resend_message_mail_message_id",
                table: "mail_resend_message",
                column: "mail_message_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_resend_message_write_uid",
                table: "mail_resend_message",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_resend_partner_create_uid",
                table: "mail_resend_partner",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_resend_partner_partner_id",
                table: "mail_resend_partner",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_resend_partner_resend_wizard_id",
                table: "mail_resend_partner",
                column: "resend_wizard_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_resend_partner_write_uid",
                table: "mail_resend_partner",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_shortcode_create_uid",
                table: "mail_shortcode",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_shortcode_write_uid",
                table: "mail_shortcode",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mail_shortcode_source_index",
                table: "mail_shortcode",
                column: "source")
                .Annotation("Npgsql:IndexMethod", "gin")
                .Annotation("Npgsql:IndexOperators", new[] { "gin_trgm_ops" });

            migrationBuilder.CreateIndex(
                name: "IX_mail_template_create_uid",
                table: "mail_template",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_template_mail_server_id",
                table: "mail_template",
                column: "mail_server_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_template_model_id",
                table: "mail_template",
                column: "model_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_template_ref_ir_act_window",
                table: "mail_template",
                column: "ref_ir_act_window");

            migrationBuilder.CreateIndex(
                name: "IX_mail_template_report_template",
                table: "mail_template",
                column: "report_template");

            migrationBuilder.CreateIndex(
                name: "IX_mail_template_write_uid",
                table: "mail_template",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mail_template_model_index",
                table: "mail_template",
                column: "model");

            migrationBuilder.CreateIndex(
                name: "mail_template_mail_template_r_mail_template_id_mail_templat_idx",
                table: "mail_template_mail_template_reset_rel",
                columns: new[] { "mail_template_id", "mail_template_reset_id" });

            migrationBuilder.CreateIndex(
                name: "IX_mail_template_preview_create_uid",
                table: "mail_template_preview",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_template_preview_mail_template_id",
                table: "mail_template_preview",
                column: "mail_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_template_preview_write_uid",
                table: "mail_template_preview",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_template_reset_create_uid",
                table: "mail_template_reset",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_template_reset_write_uid",
                table: "mail_template_reset",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_tracking_value_create_uid",
                table: "mail_tracking_value",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_tracking_value_currency_id",
                table: "mail_tracking_value",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_tracking_value_write_uid",
                table: "mail_tracking_value",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mail_tracking_value_field_index",
                table: "mail_tracking_value",
                column: "field");

            migrationBuilder.CreateIndex(
                name: "mail_tracking_value_mail_message_id_index",
                table: "mail_tracking_value",
                column: "mail_message_id");

            migrationBuilder.CreateIndex(
                name: "IX_mail_wizard_invite_create_uid",
                table: "mail_wizard_invite",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mail_wizard_invite_write_uid",
                table: "mail_wizard_invite",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mail_wizard_invite_res_partne_res_partner_id_mail_wizard_in_idx",
                table: "mail_wizard_invite_res_partner_rel",
                columns: new[] { "res_partner_id", "mail_wizard_invite_id" });

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_equipment_category_id",
                table: "maintenance_equipment",
                column: "category_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_equipment_company_id",
                table: "maintenance_equipment",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_equipment_create_uid",
                table: "maintenance_equipment",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_equipment_department_id",
                table: "maintenance_equipment",
                column: "department_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_equipment_employee_id",
                table: "maintenance_equipment",
                column: "employee_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_equipment_maintenance_team_id",
                table: "maintenance_equipment",
                column: "maintenance_team_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_equipment_message_main_attachment_id",
                table: "maintenance_equipment",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_equipment_owner_user_id",
                table: "maintenance_equipment",
                column: "owner_user_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_equipment_partner_id",
                table: "maintenance_equipment",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_equipment_technician_user_id",
                table: "maintenance_equipment",
                column: "technician_user_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_equipment_write_uid",
                table: "maintenance_equipment",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "maintenance_equipment_serial_no",
                table: "maintenance_equipment",
                column: "serial_no",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_equipment_category_alias_id",
                table: "maintenance_equipment_category",
                column: "alias_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_equipment_category_company_id",
                table: "maintenance_equipment_category",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_equipment_category_create_uid",
                table: "maintenance_equipment_category",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_equipment_category_message_main_attachment_id",
                table: "maintenance_equipment_category",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_equipment_category_technician_user_id",
                table: "maintenance_equipment_category",
                column: "technician_user_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_equipment_category_write_uid",
                table: "maintenance_equipment_category",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_request_category_id",
                table: "maintenance_request",
                column: "category_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_request_company_id",
                table: "maintenance_request",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_request_create_uid",
                table: "maintenance_request",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_request_employee_id",
                table: "maintenance_request",
                column: "employee_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_request_maintenance_team_id",
                table: "maintenance_request",
                column: "maintenance_team_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_request_message_main_attachment_id",
                table: "maintenance_request",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_request_owner_user_id",
                table: "maintenance_request",
                column: "owner_user_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_request_stage_id",
                table: "maintenance_request",
                column: "stage_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_request_user_id",
                table: "maintenance_request",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_request_write_uid",
                table: "maintenance_request",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "maintenance_request_equipment_id_index",
                table: "maintenance_request",
                column: "equipment_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_stage_create_uid",
                table: "maintenance_stage",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_stage_write_uid",
                table: "maintenance_stage",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_team_company_id",
                table: "maintenance_team",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_team_create_uid",
                table: "maintenance_team",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_maintenance_team_write_uid",
                table: "maintenance_team",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "maintenance_team_users_rel_res_users_id_maintenance_team_id_idx",
                table: "maintenance_team_users_rel",
                columns: new[] { "res_users_id", "maintenance_team_id" });

            migrationBuilder.CreateIndex(
                name: "meeting_category_rel_type_id_event_id_idx",
                table: "meeting_category_rel",
                columns: new[] { "type_id", "event_id" });

            migrationBuilder.CreateIndex(
                name: "merge_opportunity_rel_opportunity_id_merge_id_idx",
                table: "merge_opportunity_rel",
                columns: new[] { "opportunity_id", "merge_id" });

            migrationBuilder.CreateIndex(
                name: "message_attachment_rel_attachment_id_message_id_idx",
                table: "message_attachment_rel",
                columns: new[] { "attachment_id", "message_id" });

            migrationBuilder.CreateIndex(
                name: "IX_mrp_bom_create_uid",
                table: "mrp_bom",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_bom_message_main_attachment_id",
                table: "mrp_bom",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_bom_picking_type_id",
                table: "mrp_bom",
                column: "picking_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_bom_product_uom_id",
                table: "mrp_bom",
                column: "product_uom_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_bom_write_uid",
                table: "mrp_bom",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mrp_bom_company_id_index",
                table: "mrp_bom",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "mrp_bom_product_id_index",
                table: "mrp_bom",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "mrp_bom_product_tmpl_id_index",
                table: "mrp_bom",
                column: "product_tmpl_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_bom_byproduct_create_uid",
                table: "mrp_bom_byproduct",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_bom_byproduct_operation_id",
                table: "mrp_bom_byproduct",
                column: "operation_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_bom_byproduct_product_id",
                table: "mrp_bom_byproduct",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_bom_byproduct_product_uom_id",
                table: "mrp_bom_byproduct",
                column: "product_uom_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_bom_byproduct_write_uid",
                table: "mrp_bom_byproduct",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mrp_bom_byproduct_bom_id_index",
                table: "mrp_bom_byproduct",
                column: "bom_id");

            migrationBuilder.CreateIndex(
                name: "mrp_bom_byproduct_company_id_index",
                table: "mrp_bom_byproduct",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "mrp_bom_byproduct_product_tem_product_template_attribute_va_idx",
                table: "mrp_bom_byproduct_product_template_attribute_value_rel",
                columns: new[] { "product_template_attribute_value_id", "mrp_bom_byproduct_id" });

            migrationBuilder.CreateIndex(
                name: "IX_mrp_bom_line_create_uid",
                table: "mrp_bom_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_bom_line_operation_id",
                table: "mrp_bom_line",
                column: "operation_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_bom_line_product_id",
                table: "mrp_bom_line",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_bom_line_product_uom_id",
                table: "mrp_bom_line",
                column: "product_uom_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_bom_line_write_uid",
                table: "mrp_bom_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mrp_bom_line_bom_id_index",
                table: "mrp_bom_line",
                column: "bom_id");

            migrationBuilder.CreateIndex(
                name: "mrp_bom_line_company_id_index",
                table: "mrp_bom_line",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "mrp_bom_line_product_tmpl_id_index",
                table: "mrp_bom_line",
                column: "product_tmpl_id");

            migrationBuilder.CreateIndex(
                name: "mrp_bom_line_product_template_product_template_attribute_va_idx",
                table: "mrp_bom_line_product_template_attribute_value_rel",
                columns: new[] { "product_template_attribute_value_id", "mrp_bom_line_id" });

            migrationBuilder.CreateIndex(
                name: "IX_mrp_consumption_warning_create_uid",
                table: "mrp_consumption_warning",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_consumption_warning_write_uid",
                table: "mrp_consumption_warning",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_consumption_warning_line_create_uid",
                table: "mrp_consumption_warning_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_consumption_warning_line_mrp_consumption_warning_id",
                table: "mrp_consumption_warning_line",
                column: "mrp_consumption_warning_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_consumption_warning_line_mrp_production_id",
                table: "mrp_consumption_warning_line",
                column: "mrp_production_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_consumption_warning_line_product_id",
                table: "mrp_consumption_warning_line",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_consumption_warning_line_write_uid",
                table: "mrp_consumption_warning_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mrp_consumption_warning_mrp_p_mrp_production_id_mrp_consump_idx",
                table: "mrp_consumption_warning_mrp_production_rel",
                columns: new[] { "mrp_production_id", "mrp_consumption_warning_id" });

            migrationBuilder.CreateIndex(
                name: "IX_mrp_document_create_uid",
                table: "mrp_document",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_document_ir_attachment_id",
                table: "mrp_document",
                column: "ir_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_document_write_uid",
                table: "mrp_document",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_immediate_production_create_uid",
                table: "mrp_immediate_production",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_immediate_production_write_uid",
                table: "mrp_immediate_production",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_immediate_production_line_create_uid",
                table: "mrp_immediate_production_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_immediate_production_line_immediate_production_id",
                table: "mrp_immediate_production_line",
                column: "immediate_production_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_immediate_production_line_production_id",
                table: "mrp_immediate_production_line",
                column: "production_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_immediate_production_line_write_uid",
                table: "mrp_immediate_production_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_analytic_account_id",
                table: "mrp_production",
                column: "analytic_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_bom_id",
                table: "mrp_production",
                column: "bom_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_create_uid",
                table: "mrp_production",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_location_dest_id",
                table: "mrp_production",
                column: "location_dest_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_location_src_id",
                table: "mrp_production",
                column: "location_src_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_lot_producing_id",
                table: "mrp_production",
                column: "lot_producing_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_message_main_attachment_id",
                table: "mrp_production",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_procurement_group_id",
                table: "mrp_production",
                column: "procurement_group_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_product_id",
                table: "mrp_production",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_product_uom_id",
                table: "mrp_production",
                column: "product_uom_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_production_location_id",
                table: "mrp_production",
                column: "production_location_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_user_id",
                table: "mrp_production",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_write_uid",
                table: "mrp_production",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mrp_production_company_id_index",
                table: "mrp_production",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "mrp_production_date_planned_start_index",
                table: "mrp_production",
                column: "date_planned_start");

            migrationBuilder.CreateIndex(
                name: "mrp_production_name_uniq",
                table: "mrp_production",
                columns: new[] { "name", "company_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "mrp_production_orderpoint_id_index",
                table: "mrp_production",
                column: "orderpoint_id",
                filter: "(orderpoint_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "mrp_production_picking_type_id_index",
                table: "mrp_production",
                column: "picking_type_id");

            migrationBuilder.CreateIndex(
                name: "mrp_production_reservation_state_index",
                table: "mrp_production",
                column: "reservation_state");

            migrationBuilder.CreateIndex(
                name: "mrp_production_state_index",
                table: "mrp_production",
                column: "state");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_backorder_create_uid",
                table: "mrp_production_backorder",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_backorder_write_uid",
                table: "mrp_production_backorder",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_backorder_line_create_uid",
                table: "mrp_production_backorder_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_backorder_line_mrp_production_backorder_id",
                table: "mrp_production_backorder_line",
                column: "mrp_production_backorder_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_backorder_line_mrp_production_id",
                table: "mrp_production_backorder_line",
                column: "mrp_production_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_backorder_line_write_uid",
                table: "mrp_production_backorder_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mrp_production_mrp_production_mrp_production_id_mrp_product_idx",
                table: "mrp_production_mrp_production_backorder_rel",
                columns: new[] { "mrp_production_id", "mrp_production_backorder_id" });

            migrationBuilder.CreateIndex(
                name: "mrp_production_production_rel_mrp_production_id_mrp_immedia_idx",
                table: "mrp_production_production_rel",
                columns: new[] { "mrp_production_id", "mrp_immediate_production_id" });

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_split_create_uid",
                table: "mrp_production_split",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_split_production_id",
                table: "mrp_production_split",
                column: "production_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_split_production_split_multi_id",
                table: "mrp_production_split",
                column: "production_split_multi_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_split_write_uid",
                table: "mrp_production_split",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_split_line_create_uid",
                table: "mrp_production_split_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_split_line_mrp_production_split_id",
                table: "mrp_production_split_line",
                column: "mrp_production_split_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_split_line_user_id",
                table: "mrp_production_split_line",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_split_line_write_uid",
                table: "mrp_production_split_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_split_multi_create_uid",
                table: "mrp_production_split_multi",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_production_split_multi_write_uid",
                table: "mrp_production_split_multi",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_routing_workcenter_create_uid",
                table: "mrp_routing_workcenter",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_routing_workcenter_workcenter_id",
                table: "mrp_routing_workcenter",
                column: "workcenter_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_routing_workcenter_write_uid",
                table: "mrp_routing_workcenter",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mrp_routing_workcenter_bom_id_index",
                table: "mrp_routing_workcenter",
                column: "bom_id");

            migrationBuilder.CreateIndex(
                name: "mrp_routing_workcenter_dependenc_blocked_by_id_operation_id_idx",
                table: "mrp_routing_workcenter_dependencies_rel",
                columns: new[] { "blocked_by_id", "operation_id" });

            migrationBuilder.CreateIndex(
                name: "mrp_routing_workcenter_produc_product_template_attribute_va_idx",
                table: "mrp_routing_workcenter_product_template_attribute_value_rel",
                columns: new[] { "product_template_attribute_value_id", "mrp_routing_workcenter_id" });

            migrationBuilder.CreateIndex(
                name: "IX_mrp_unbuild_bom_id",
                table: "mrp_unbuild",
                column: "bom_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_unbuild_create_uid",
                table: "mrp_unbuild",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_unbuild_location_dest_id",
                table: "mrp_unbuild",
                column: "location_dest_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_unbuild_location_id",
                table: "mrp_unbuild",
                column: "location_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_unbuild_lot_id",
                table: "mrp_unbuild",
                column: "lot_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_unbuild_message_main_attachment_id",
                table: "mrp_unbuild",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_unbuild_mo_id",
                table: "mrp_unbuild",
                column: "mo_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_unbuild_product_id",
                table: "mrp_unbuild",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_unbuild_product_uom_id",
                table: "mrp_unbuild",
                column: "product_uom_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_unbuild_write_uid",
                table: "mrp_unbuild",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mrp_unbuild_company_id_index",
                table: "mrp_unbuild",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workcenter_costs_hour_account_id",
                table: "mrp_workcenter",
                column: "costs_hour_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workcenter_create_uid",
                table: "mrp_workcenter",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workcenter_write_uid",
                table: "mrp_workcenter",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mrp_workcenter_company_id_index",
                table: "mrp_workcenter",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "mrp_workcenter_resource_calendar_id_index",
                table: "mrp_workcenter",
                column: "resource_calendar_id");

            migrationBuilder.CreateIndex(
                name: "mrp_workcenter_resource_id_index",
                table: "mrp_workcenter",
                column: "resource_id");

            migrationBuilder.CreateIndex(
                name: "mrp_workcenter_alternative_re_alternative_workcenter_id_wor_idx",
                table: "mrp_workcenter_alternative_rel",
                columns: new[] { "alternative_workcenter_id", "workcenter_id" });

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workcenter_capacity_create_uid",
                table: "mrp_workcenter_capacity",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workcenter_capacity_product_id",
                table: "mrp_workcenter_capacity",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workcenter_capacity_write_uid",
                table: "mrp_workcenter_capacity",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mrp_workcenter_capacity_unique_product",
                table: "mrp_workcenter_capacity",
                columns: new[] { "workcenter_id", "product_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "mrp_workcenter_mrp_workcenter_mrp_workcenter_tag_id_mrp_wor_idx",
                table: "mrp_workcenter_mrp_workcenter_tag_rel",
                columns: new[] { "mrp_workcenter_tag_id", "mrp_workcenter_id" });

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workcenter_productivity_create_uid",
                table: "mrp_workcenter_productivity",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workcenter_productivity_loss_id",
                table: "mrp_workcenter_productivity",
                column: "loss_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workcenter_productivity_user_id",
                table: "mrp_workcenter_productivity",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workcenter_productivity_write_uid",
                table: "mrp_workcenter_productivity",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mrp_workcenter_productivity_company_id_index",
                table: "mrp_workcenter_productivity",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "mrp_workcenter_productivity_workcenter_id_index",
                table: "mrp_workcenter_productivity",
                column: "workcenter_id");

            migrationBuilder.CreateIndex(
                name: "mrp_workcenter_productivity_workorder_id_index",
                table: "mrp_workcenter_productivity",
                column: "workorder_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workcenter_productivity_loss_create_uid",
                table: "mrp_workcenter_productivity_loss",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workcenter_productivity_loss_loss_id",
                table: "mrp_workcenter_productivity_loss",
                column: "loss_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workcenter_productivity_loss_write_uid",
                table: "mrp_workcenter_productivity_loss",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workcenter_productivity_loss_type_create_uid",
                table: "mrp_workcenter_productivity_loss_type",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workcenter_productivity_loss_type_write_uid",
                table: "mrp_workcenter_productivity_loss_type",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workcenter_tag_create_uid",
                table: "mrp_workcenter_tag",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workcenter_tag_write_uid",
                table: "mrp_workcenter_tag",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mrp_workcenter_tag_tag_name_unique",
                table: "mrp_workcenter_tag",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workorder_create_uid",
                table: "mrp_workorder",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workorder_leave_id",
                table: "mrp_workorder",
                column: "leave_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workorder_mo_analytic_account_line_id",
                table: "mrp_workorder",
                column: "mo_analytic_account_line_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workorder_operation_id",
                table: "mrp_workorder",
                column: "operation_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workorder_product_id",
                table: "mrp_workorder",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workorder_product_uom_id",
                table: "mrp_workorder",
                column: "product_uom_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workorder_production_id",
                table: "mrp_workorder",
                column: "production_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workorder_wc_analytic_account_line_id",
                table: "mrp_workorder",
                column: "wc_analytic_account_line_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workorder_workcenter_id",
                table: "mrp_workorder",
                column: "workcenter_id");

            migrationBuilder.CreateIndex(
                name: "IX_mrp_workorder_write_uid",
                table: "mrp_workorder",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "mrp_workorder_dependencies_rel_blocked_by_id_workorder_id_idx",
                table: "mrp_workorder_dependencies_rel",
                columns: new[] { "blocked_by_id", "workorder_id" });

            migrationBuilder.CreateIndex(
                name: "IX_note_note_company_id",
                table: "note_note",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_note_note_create_uid",
                table: "note_note",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_note_note_message_main_attachment_id",
                table: "note_note",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_note_note_user_id",
                table: "note_note",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_note_note_write_uid",
                table: "note_note",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_note_stage_create_uid",
                table: "note_stage",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_note_stage_user_id",
                table: "note_stage",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_note_stage_write_uid",
                table: "note_stage",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "note_stage_rel_stage_id_note_id_idx",
                table: "note_stage_rel",
                columns: new[] { "stage_id", "note_id" });

            migrationBuilder.CreateIndex(
                name: "IX_note_tag_create_uid",
                table: "note_tag",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_note_tag_write_uid",
                table: "note_tag",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "note_tag_name_uniq",
                table: "note_tag",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "note_tags_rel_tag_id_note_id_idx",
                table: "note_tags_rel",
                columns: new[] { "tag_id", "note_id" });

            migrationBuilder.CreateIndex(
                name: "partner_stat_rel_partner_id_osv_memory_id_idx",
                table: "partner_stat_rel",
                columns: new[] { "partner_id", "osv_memory_id" });

            migrationBuilder.CreateIndex(
                name: "payment_country_rel_country_id_payment_id_idx",
                table: "payment_country_rel",
                columns: new[] { "country_id", "payment_id" });

            migrationBuilder.CreateIndex(
                name: "IX_payment_icon_create_uid",
                table: "payment_icon",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_payment_icon_write_uid",
                table: "payment_icon",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "payment_icon_payment_provider_payment_icon_id_payment_provi_idx",
                table: "payment_icon_payment_provider_rel",
                columns: new[] { "payment_icon_id", "payment_provider_id" });

            migrationBuilder.CreateIndex(
                name: "IX_payment_link_wizard_create_uid",
                table: "payment_link_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_payment_link_wizard_currency_id",
                table: "payment_link_wizard",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_payment_link_wizard_partner_id",
                table: "payment_link_wizard",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_payment_link_wizard_write_uid",
                table: "payment_link_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_payment_provider_create_uid",
                table: "payment_provider",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_payment_provider_express_checkout_form_view_id",
                table: "payment_provider",
                column: "express_checkout_form_view_id");

            migrationBuilder.CreateIndex(
                name: "IX_payment_provider_inline_form_view_id",
                table: "payment_provider",
                column: "inline_form_view_id");

            migrationBuilder.CreateIndex(
                name: "IX_payment_provider_module_id",
                table: "payment_provider",
                column: "module_id");

            migrationBuilder.CreateIndex(
                name: "IX_payment_provider_redirect_form_view_id",
                table: "payment_provider",
                column: "redirect_form_view_id");

            migrationBuilder.CreateIndex(
                name: "IX_payment_provider_token_inline_form_view_id",
                table: "payment_provider",
                column: "token_inline_form_view_id");

            migrationBuilder.CreateIndex(
                name: "IX_payment_provider_website_id",
                table: "payment_provider",
                column: "website_id");

            migrationBuilder.CreateIndex(
                name: "IX_payment_provider_write_uid",
                table: "payment_provider",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "payment_provider_company_id_index",
                table: "payment_provider",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_payment_provider_onboarding_wizard_create_uid",
                table: "payment_provider_onboarding_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_payment_provider_onboarding_wizard_write_uid",
                table: "payment_provider_onboarding_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_payment_refund_wizard_create_uid",
                table: "payment_refund_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_payment_refund_wizard_payment_id",
                table: "payment_refund_wizard",
                column: "payment_id");

            migrationBuilder.CreateIndex(
                name: "IX_payment_refund_wizard_write_uid",
                table: "payment_refund_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_payment_token_create_uid",
                table: "payment_token",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_payment_token_partner_id",
                table: "payment_token",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_payment_token_provider_id",
                table: "payment_token",
                column: "provider_id");

            migrationBuilder.CreateIndex(
                name: "IX_payment_token_write_uid",
                table: "payment_token",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "payment_token_company_id_index",
                table: "payment_token",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_payment_transaction_callback_model_id",
                table: "payment_transaction",
                column: "callback_model_id");

            migrationBuilder.CreateIndex(
                name: "IX_payment_transaction_create_uid",
                table: "payment_transaction",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_payment_transaction_currency_id",
                table: "payment_transaction",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_payment_transaction_partner_country_id",
                table: "payment_transaction",
                column: "partner_country_id");

            migrationBuilder.CreateIndex(
                name: "IX_payment_transaction_partner_id",
                table: "payment_transaction",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_payment_transaction_partner_state_id",
                table: "payment_transaction",
                column: "partner_state_id");

            migrationBuilder.CreateIndex(
                name: "IX_payment_transaction_payment_id",
                table: "payment_transaction",
                column: "payment_id");

            migrationBuilder.CreateIndex(
                name: "IX_payment_transaction_provider_id",
                table: "payment_transaction",
                column: "provider_id");

            migrationBuilder.CreateIndex(
                name: "IX_payment_transaction_source_transaction_id",
                table: "payment_transaction",
                column: "source_transaction_id");

            migrationBuilder.CreateIndex(
                name: "IX_payment_transaction_token_id",
                table: "payment_transaction",
                column: "token_id");

            migrationBuilder.CreateIndex(
                name: "IX_payment_transaction_write_uid",
                table: "payment_transaction",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "payment_transaction_company_id_index",
                table: "payment_transaction",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "payment_transaction_operation_index",
                table: "payment_transaction",
                column: "operation");

            migrationBuilder.CreateIndex(
                name: "payment_transaction_reference_uniq",
                table: "payment_transaction",
                column: "reference",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "payment_transaction_state_index",
                table: "payment_transaction",
                column: "state");

            migrationBuilder.CreateIndex(
                name: "IX_phone_blacklist_create_uid",
                table: "phone_blacklist",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_phone_blacklist_message_main_attachment_id",
                table: "phone_blacklist",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_phone_blacklist_write_uid",
                table: "phone_blacklist",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "phone_blacklist_unique_number",
                table: "phone_blacklist",
                column: "number",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_phone_blacklist_remove_create_uid",
                table: "phone_blacklist_remove",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_phone_blacklist_remove_write_uid",
                table: "phone_blacklist_remove",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_picking_label_type_create_uid",
                table: "picking_label_type",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_picking_label_type_write_uid",
                table: "picking_label_type",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "picking_label_type_stock_pick_stock_picking_id_picking_labe_idx",
                table: "picking_label_type_stock_picking_rel",
                columns: new[] { "stock_picking_id", "picking_label_type_id" });

            migrationBuilder.CreateIndex(
                name: "IX_portal_share_create_uid",
                table: "portal_share",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_portal_share_write_uid",
                table: "portal_share",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "portal_share_res_partner_rel_res_partner_id_portal_share_id_idx",
                table: "portal_share_res_partner_rel",
                columns: new[] { "res_partner_id", "portal_share_id" });

            migrationBuilder.CreateIndex(
                name: "IX_portal_wizard_create_uid",
                table: "portal_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_portal_wizard_write_uid",
                table: "portal_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "portal_wizard_res_partner_rel_res_partner_id_portal_wizard__idx",
                table: "portal_wizard_res_partner_rel",
                columns: new[] { "res_partner_id", "portal_wizard_id" });

            migrationBuilder.CreateIndex(
                name: "IX_portal_wizard_user_create_uid",
                table: "portal_wizard_user",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_portal_wizard_user_partner_id",
                table: "portal_wizard_user",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_portal_wizard_user_wizard_id",
                table: "portal_wizard_user",
                column: "wizard_id");

            migrationBuilder.CreateIndex(
                name: "IX_portal_wizard_user_write_uid",
                table: "portal_wizard_user",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_pos_bill_create_uid",
                table: "pos_bill",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_pos_bill_write_uid",
                table: "pos_bill",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "pos_bill_pos_config_rel_pos_bill_id_pos_config_id_idx",
                table: "pos_bill_pos_config_rel",
                columns: new[] { "pos_bill_id", "pos_config_id" });

            migrationBuilder.CreateIndex(
                name: "IX_pos_category_create_uid",
                table: "pos_category",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_pos_category_write_uid",
                table: "pos_category",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "pos_category_parent_id_index",
                table: "pos_category",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "pos_category_pos_config_rel_pos_category_id_pos_config_id_idx",
                table: "pos_category_pos_config_rel",
                columns: new[] { "pos_category_id", "pos_config_id" });

            migrationBuilder.CreateIndex(
                name: "pos_category_res_config_setti_pos_category_id_res_config_se_idx",
                table: "pos_category_res_config_settings_rel",
                columns: new[] { "pos_category_id", "res_config_settings_id" });

            migrationBuilder.CreateIndex(
                name: "IX_pos_close_session_wizard_account_id",
                table: "pos_close_session_wizard",
                column: "account_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_close_session_wizard_create_uid",
                table: "pos_close_session_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_pos_close_session_wizard_write_uid",
                table: "pos_close_session_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_pos_config_company_id",
                table: "pos_config",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_config_create_uid",
                table: "pos_config",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_pos_config_crm_team_id",
                table: "pos_config",
                column: "crm_team_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_config_default_fiscal_position_id",
                table: "pos_config",
                column: "default_fiscal_position_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_config_down_payment_product_id",
                table: "pos_config",
                column: "down_payment_product_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_config_group_pos_manager_id",
                table: "pos_config",
                column: "group_pos_manager_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_config_group_pos_user_id",
                table: "pos_config",
                column: "group_pos_user_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_config_iface_start_categ_id",
                table: "pos_config",
                column: "iface_start_categ_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_config_invoice_journal_id",
                table: "pos_config",
                column: "invoice_journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_config_journal_id",
                table: "pos_config",
                column: "journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_config_picking_type_id",
                table: "pos_config",
                column: "picking_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_config_pricelist_id",
                table: "pos_config",
                column: "pricelist_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_config_rounding_method",
                table: "pos_config",
                column: "rounding_method");

            migrationBuilder.CreateIndex(
                name: "IX_pos_config_route_id",
                table: "pos_config",
                column: "route_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_config_sequence_id",
                table: "pos_config",
                column: "sequence_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_config_sequence_line_id",
                table: "pos_config",
                column: "sequence_line_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_config_tip_product_id",
                table: "pos_config",
                column: "tip_product_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_config_warehouse_id",
                table: "pos_config",
                column: "warehouse_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_config_write_uid",
                table: "pos_config",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "pos_config_pos_payment_method_pos_payment_method_id_pos_con_idx",
                table: "pos_config_pos_payment_method_rel",
                columns: new[] { "pos_payment_method_id", "pos_config_id" });

            migrationBuilder.CreateIndex(
                name: "pos_config_product_pricelist__product_pricelist_id_pos_conf_idx",
                table: "pos_config_product_pricelist_rel",
                columns: new[] { "product_pricelist_id", "pos_config_id" });

            migrationBuilder.CreateIndex(
                name: "pos_detail_configs_pos_config_id_pos_details_wizard_id_idx",
                table: "pos_detail_configs",
                columns: new[] { "pos_config_id", "pos_details_wizard_id" });

            migrationBuilder.CreateIndex(
                name: "IX_pos_details_wizard_create_uid",
                table: "pos_details_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_pos_details_wizard_write_uid",
                table: "pos_details_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_pos_make_payment_config_id",
                table: "pos_make_payment",
                column: "config_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_make_payment_create_uid",
                table: "pos_make_payment",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_pos_make_payment_payment_method_id",
                table: "pos_make_payment",
                column: "payment_method_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_make_payment_write_uid",
                table: "pos_make_payment",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_pos_order_company_id",
                table: "pos_order",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_order_create_uid",
                table: "pos_order",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_pos_order_crm_team_id",
                table: "pos_order",
                column: "crm_team_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_order_employee_id",
                table: "pos_order",
                column: "employee_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_order_fiscal_position_id",
                table: "pos_order",
                column: "fiscal_position_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_order_pricelist_id",
                table: "pos_order",
                column: "pricelist_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_order_procurement_group_id",
                table: "pos_order",
                column: "procurement_group_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_order_sale_journal",
                table: "pos_order",
                column: "sale_journal");

            migrationBuilder.CreateIndex(
                name: "IX_pos_order_user_id",
                table: "pos_order",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_order_write_uid",
                table: "pos_order",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "pos_order_account_move_index",
                table: "pos_order",
                column: "account_move");

            migrationBuilder.CreateIndex(
                name: "pos_order_date_order_index",
                table: "pos_order",
                column: "date_order");

            migrationBuilder.CreateIndex(
                name: "pos_order_partner_id_index",
                table: "pos_order",
                column: "partner_id",
                filter: "(partner_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "pos_order_session_id_index",
                table: "pos_order",
                column: "session_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_order_line_company_id",
                table: "pos_order_line",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_order_line_create_uid",
                table: "pos_order_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_pos_order_line_product_id",
                table: "pos_order_line",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_order_line_refunded_orderline_id",
                table: "pos_order_line",
                column: "refunded_orderline_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_order_line_sale_order_line_id",
                table: "pos_order_line",
                column: "sale_order_line_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_order_line_sale_order_origin_id",
                table: "pos_order_line",
                column: "sale_order_origin_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_order_line_write_uid",
                table: "pos_order_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "pos_order_line_order_id_index",
                table: "pos_order_line",
                column: "order_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_pack_operation_lot_create_uid",
                table: "pos_pack_operation_lot",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_pos_pack_operation_lot_pos_order_line_id",
                table: "pos_pack_operation_lot",
                column: "pos_order_line_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_pack_operation_lot_write_uid",
                table: "pos_pack_operation_lot",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_pos_payment_account_move_id",
                table: "pos_payment",
                column: "account_move_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_payment_company_id",
                table: "pos_payment",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_payment_create_uid",
                table: "pos_payment",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_pos_payment_payment_method_id",
                table: "pos_payment",
                column: "payment_method_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_payment_pos_order_id",
                table: "pos_payment",
                column: "pos_order_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_payment_write_uid",
                table: "pos_payment",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "pos_payment_session_id_index",
                table: "pos_payment",
                column: "session_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_payment_method_company_id",
                table: "pos_payment_method",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_payment_method_create_uid",
                table: "pos_payment_method",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_pos_payment_method_journal_id",
                table: "pos_payment_method",
                column: "journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_payment_method_outstanding_account_id",
                table: "pos_payment_method",
                column: "outstanding_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_payment_method_receivable_account_id",
                table: "pos_payment_method",
                column: "receivable_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_payment_method_write_uid",
                table: "pos_payment_method",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_pos_session_cash_journal_id",
                table: "pos_session",
                column: "cash_journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_session_create_uid",
                table: "pos_session",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_pos_session_message_main_attachment_id",
                table: "pos_session",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_session_write_uid",
                table: "pos_session",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "pos_session_config_id_index",
                table: "pos_session",
                column: "config_id");

            migrationBuilder.CreateIndex(
                name: "pos_session_move_id_index",
                table: "pos_session",
                column: "move_id");

            migrationBuilder.CreateIndex(
                name: "pos_session_state_index",
                table: "pos_session",
                column: "state");

            migrationBuilder.CreateIndex(
                name: "pos_session_uniq_name",
                table: "pos_session",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "pos_session_user_id_index",
                table: "pos_session",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_pos_session_check_product_wizard_create_uid",
                table: "pos_session_check_product_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_pos_session_check_product_wizard_write_uid",
                table: "pos_session_check_product_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_privacy_log_create_uid",
                table: "privacy_log",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_privacy_log_user_id",
                table: "privacy_log",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_privacy_log_write_uid",
                table: "privacy_log",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_privacy_lookup_wizard_create_uid",
                table: "privacy_lookup_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_privacy_lookup_wizard_log_id",
                table: "privacy_lookup_wizard",
                column: "log_id");

            migrationBuilder.CreateIndex(
                name: "IX_privacy_lookup_wizard_write_uid",
                table: "privacy_lookup_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_privacy_lookup_wizard_line_create_uid",
                table: "privacy_lookup_wizard_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_privacy_lookup_wizard_line_res_model_id",
                table: "privacy_lookup_wizard_line",
                column: "res_model_id");

            migrationBuilder.CreateIndex(
                name: "IX_privacy_lookup_wizard_line_wizard_id",
                table: "privacy_lookup_wizard_line",
                column: "wizard_id");

            migrationBuilder.CreateIndex(
                name: "IX_privacy_lookup_wizard_line_write_uid",
                table: "privacy_lookup_wizard_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_procurement_group_create_uid",
                table: "procurement_group",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_procurement_group_partner_id",
                table: "procurement_group",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_procurement_group_pos_order_id",
                table: "procurement_group",
                column: "pos_order_id");

            migrationBuilder.CreateIndex(
                name: "IX_procurement_group_sale_id",
                table: "procurement_group",
                column: "sale_id");

            migrationBuilder.CreateIndex(
                name: "IX_procurement_group_write_uid",
                table: "procurement_group",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "product_accessory_rel_dest_id_src_id_idx",
                table: "product_accessory_rel",
                columns: new[] { "dest_id", "src_id" });

            migrationBuilder.CreateIndex(
                name: "product_alternative_rel_dest_id_src_id_idx",
                table: "product_alternative_rel",
                columns: new[] { "dest_id", "src_id" });

            migrationBuilder.CreateIndex(
                name: "product_attr_exclusion_value__product_template_attribute_va_idx",
                table: "product_attr_exclusion_value_ids_rel",
                columns: new[] { "product_template_attribute_value_id", "product_template_attribute_exclusion_id" });

            migrationBuilder.CreateIndex(
                name: "IX_product_attribute_create_uid",
                table: "product_attribute",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_product_attribute_write_uid",
                table: "product_attribute",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "product_attribute_sequence_index",
                table: "product_attribute",
                column: "sequence");

            migrationBuilder.CreateIndex(
                name: "IX_product_attribute_custom_value_create_uid",
                table: "product_attribute_custom_value",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_product_attribute_custom_value_sale_order_line_id",
                table: "product_attribute_custom_value",
                column: "sale_order_line_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_attribute_custom_value_write_uid",
                table: "product_attribute_custom_value",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "product_attribute_custom_value_sol_custom_value_unique",
                table: "product_attribute_custom_value",
                columns: new[] { "custom_product_template_attribute_value_id", "sale_order_line_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "product_attribute_product_tem_product_template_id_product_a_idx",
                table: "product_attribute_product_template_rel",
                columns: new[] { "product_template_id", "product_attribute_id" });

            migrationBuilder.CreateIndex(
                name: "IX_product_attribute_value_create_uid",
                table: "product_attribute_value",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_product_attribute_value_write_uid",
                table: "product_attribute_value",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "product_attribute_value_attribute_id_index",
                table: "product_attribute_value",
                column: "attribute_id");

            migrationBuilder.CreateIndex(
                name: "product_attribute_value_sequence_index",
                table: "product_attribute_value",
                column: "sequence");

            migrationBuilder.CreateIndex(
                name: "product_attribute_value_value_company_uniq",
                table: "product_attribute_value",
                columns: new[] { "name", "attribute_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "product_attribute_value_produ_product_template_attribute_li_idx",
                table: "product_attribute_value_product_template_attribute_line_rel",
                columns: new[] { "product_template_attribute_line_id", "product_attribute_value_id" });

            migrationBuilder.CreateIndex(
                name: "IX_product_category_create_uid",
                table: "product_category",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_product_category_removal_strategy_id",
                table: "product_category",
                column: "removal_strategy_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_category_write_uid",
                table: "product_category",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "product_category_name_index",
                table: "product_category",
                column: "name")
                .Annotation("Npgsql:IndexMethod", "gin")
                .Annotation("Npgsql:IndexOperators", new[] { "gin_trgm_ops" });

            migrationBuilder.CreateIndex(
                name: "product_category_parent_id_index",
                table: "product_category",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "product_category_parent_path_index",
                table: "product_category",
                column: "parent_path");

            migrationBuilder.CreateIndex(
                name: "IX_product_image_create_uid",
                table: "product_image",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_product_image_write_uid",
                table: "product_image",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "product_image_product_tmpl_id_index",
                table: "product_image",
                column: "product_tmpl_id");

            migrationBuilder.CreateIndex(
                name: "product_image_product_variant_id_index",
                table: "product_image",
                column: "product_variant_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_label_layout_create_uid",
                table: "product_label_layout",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_product_label_layout_write_uid",
                table: "product_label_layout",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "product_label_layout_product__product_product_id_product_la_idx",
                table: "product_label_layout_product_product_rel",
                columns: new[] { "product_product_id", "product_label_layout_id" });

            migrationBuilder.CreateIndex(
                name: "product_label_layout_product__product_template_id_product_l_idx",
                table: "product_label_layout_product_template_rel",
                columns: new[] { "product_template_id", "product_label_layout_id" });

            migrationBuilder.CreateIndex(
                name: "product_label_layout_stock_mo_stock_move_line_id_product_la_idx",
                table: "product_label_layout_stock_move_line_rel",
                columns: new[] { "stock_move_line_id", "product_label_layout_id" });

            migrationBuilder.CreateIndex(
                name: "product_optional_rel_dest_id_src_id_idx",
                table: "product_optional_rel",
                columns: new[] { "dest_id", "src_id" });

            migrationBuilder.CreateIndex(
                name: "IX_product_packaging_create_uid",
                table: "product_packaging",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_product_packaging_package_type_id",
                table: "product_packaging",
                column: "package_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_packaging_product_id",
                table: "product_packaging",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_packaging_write_uid",
                table: "product_packaging",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "product_packaging_barcode_uniq",
                table: "product_packaging",
                column: "barcode",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "product_packaging_company_id_index",
                table: "product_packaging",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_pricelist_company_id",
                table: "product_pricelist",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_pricelist_create_uid",
                table: "product_pricelist",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_product_pricelist_currency_id",
                table: "product_pricelist",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_pricelist_website_id",
                table: "product_pricelist",
                column: "website_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_pricelist_write_uid",
                table: "product_pricelist",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_product_pricelist_item_base_pricelist_id",
                table: "product_pricelist_item",
                column: "base_pricelist_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_pricelist_item_categ_id",
                table: "product_pricelist_item",
                column: "categ_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_pricelist_item_company_id",
                table: "product_pricelist_item",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_pricelist_item_create_uid",
                table: "product_pricelist_item",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_product_pricelist_item_currency_id",
                table: "product_pricelist_item",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_pricelist_item_product_id",
                table: "product_pricelist_item",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_pricelist_item_product_tmpl_id",
                table: "product_pricelist_item",
                column: "product_tmpl_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_pricelist_item_write_uid",
                table: "product_pricelist_item",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "product_pricelist_item_compute_price_index",
                table: "product_pricelist_item",
                column: "compute_price");

            migrationBuilder.CreateIndex(
                name: "product_pricelist_item_pricelist_id_index",
                table: "product_pricelist_item",
                column: "pricelist_id");

            migrationBuilder.CreateIndex(
                name: "product_pricelist_res_config__product_pricelist_id_res_conf_idx",
                table: "product_pricelist_res_config_settings_rel",
                columns: new[] { "product_pricelist_id", "res_config_settings_id" });

            migrationBuilder.CreateIndex(
                name: "IX_product_product_base_unit_id",
                table: "product_product",
                column: "base_unit_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_product_create_uid",
                table: "product_product",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_product_product_message_main_attachment_id",
                table: "product_product",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_product_write_uid",
                table: "product_product",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "product_product_barcode_index",
                table: "product_product",
                column: "barcode",
                filter: "(barcode IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "product_product_combination_indices_index",
                table: "product_product",
                column: "combination_indices");

            migrationBuilder.CreateIndex(
                name: "product_product_combination_unique",
                table: "product_product",
                columns: new[] { "product_tmpl_id", "combination_indices" },
                unique: true,
                filter: "(active IS TRUE)");

            migrationBuilder.CreateIndex(
                name: "product_product_default_code_index",
                table: "product_product",
                column: "default_code");

            migrationBuilder.CreateIndex(
                name: "product_product_product_tmpl_id_index",
                table: "product_product",
                column: "product_tmpl_id");

            migrationBuilder.CreateIndex(
                name: "product_product_stock_track_c_product_product_id_stock_trac_idx",
                table: "product_product_stock_track_confirmation_rel",
                columns: new[] { "product_product_id", "stock_track_confirmation_id" });

            migrationBuilder.CreateIndex(
                name: "IX_product_public_category_create_uid",
                table: "product_public_category",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_product_public_category_write_uid",
                table: "product_public_category",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "product_public_category_parent_id_index",
                table: "product_public_category",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "product_public_category_parent_path_index",
                table: "product_public_category",
                column: "parent_path");

            migrationBuilder.CreateIndex(
                name: "product_public_category_sequence_index",
                table: "product_public_category",
                column: "sequence");

            migrationBuilder.CreateIndex(
                name: "product_public_category_website_id_index",
                table: "product_public_category",
                column: "website_id");

            migrationBuilder.CreateIndex(
                name: "product_public_category_produ_product_template_id_product_p_idx",
                table: "product_public_category_product_template_rel",
                columns: new[] { "product_template_id", "product_public_category_id" });

            migrationBuilder.CreateIndex(
                name: "IX_product_removal_create_uid",
                table: "product_removal",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_product_removal_write_uid",
                table: "product_removal",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_product_replenish_company_id",
                table: "product_replenish",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_replenish_create_uid",
                table: "product_replenish",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_product_replenish_product_id",
                table: "product_replenish",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_replenish_product_tmpl_id",
                table: "product_replenish",
                column: "product_tmpl_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_replenish_product_uom_id",
                table: "product_replenish",
                column: "product_uom_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_replenish_warehouse_id",
                table: "product_replenish",
                column: "warehouse_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_replenish_write_uid",
                table: "product_replenish",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "product_replenish_stock_route_stock_route_id_product_replen_idx",
                table: "product_replenish_stock_route_rel",
                columns: new[] { "stock_route_id", "product_replenish_id" });

            migrationBuilder.CreateIndex(
                name: "IX_product_ribbon_create_uid",
                table: "product_ribbon",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_product_ribbon_write_uid",
                table: "product_ribbon",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "product_supplier_taxes_rel_tax_id_prod_id_idx",
                table: "product_supplier_taxes_rel",
                columns: new[] { "tax_id", "prod_id" });

            migrationBuilder.CreateIndex(
                name: "IX_product_supplierinfo_create_uid",
                table: "product_supplierinfo",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_product_supplierinfo_currency_id",
                table: "product_supplierinfo",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_supplierinfo_partner_id",
                table: "product_supplierinfo",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_supplierinfo_product_id",
                table: "product_supplierinfo",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_supplierinfo_write_uid",
                table: "product_supplierinfo",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "product_supplierinfo_company_id_index",
                table: "product_supplierinfo",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "product_supplierinfo_product_tmpl_id_index",
                table: "product_supplierinfo",
                column: "product_tmpl_id");

            migrationBuilder.CreateIndex(
                name: "product_supplierinfo_stock_re_product_supplierinfo_id_stock_idx",
                table: "product_supplierinfo_stock_replenishment_info_rel",
                columns: new[] { "product_supplierinfo_id", "stock_replenishment_info_id" });

            migrationBuilder.CreateIndex(
                name: "IX_product_tag_create_uid",
                table: "product_tag",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_product_tag_ribbon_id",
                table: "product_tag",
                column: "ribbon_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_tag_write_uid",
                table: "product_tag",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "product_tag_name_uniq",
                table: "product_tag",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "product_tag_website_id_index",
                table: "product_tag",
                column: "website_id");

            migrationBuilder.CreateIndex(
                name: "product_tag_product_product_r_product_tag_id_product_produc_idx",
                table: "product_tag_product_product_rel",
                columns: new[] { "product_tag_id", "product_product_id" });

            migrationBuilder.CreateIndex(
                name: "product_tag_product_template__product_tag_id_product_templa_idx",
                table: "product_tag_product_template_rel",
                columns: new[] { "product_tag_id", "product_template_id" });

            migrationBuilder.CreateIndex(
                name: "product_taxes_rel_tax_id_prod_id_idx",
                table: "product_taxes_rel",
                columns: new[] { "tax_id", "prod_id" });

            migrationBuilder.CreateIndex(
                name: "IX_product_template_base_unit_id",
                table: "product_template",
                column: "base_unit_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_template_categ_id",
                table: "product_template",
                column: "categ_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_template_create_uid",
                table: "product_template",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_product_template_message_main_attachment_id",
                table: "product_template",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_template_pos_categ_id",
                table: "product_template",
                column: "pos_categ_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_template_uom_id",
                table: "product_template",
                column: "uom_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_template_uom_po_id",
                table: "product_template",
                column: "uom_po_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_template_website_ribbon_id",
                table: "product_template",
                column: "website_ribbon_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_template_write_uid",
                table: "product_template",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "product_template_company_id_index",
                table: "product_template",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "product_template_is_published_index",
                table: "product_template",
                column: "is_published");

            migrationBuilder.CreateIndex(
                name: "product_template_website_id_index",
                table: "product_template",
                column: "website_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_template_attribute_exclusion_create_uid",
                table: "product_template_attribute_exclusion",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_product_template_attribute_exclusion_write_uid",
                table: "product_template_attribute_exclusion",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "product_template_attribute_exclusion_product_template_attribute",
                table: "product_template_attribute_exclusion",
                column: "product_template_attribute_value_id");

            migrationBuilder.CreateIndex(
                name: "product_template_attribute_exclusion_product_tmpl_id_index",
                table: "product_template_attribute_exclusion",
                column: "product_tmpl_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_template_attribute_line_create_uid",
                table: "product_template_attribute_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_product_template_attribute_line_write_uid",
                table: "product_template_attribute_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "product_template_attribute_line_attribute_id_index",
                table: "product_template_attribute_line",
                column: "attribute_id");

            migrationBuilder.CreateIndex(
                name: "product_template_attribute_line_product_tmpl_id_index",
                table: "product_template_attribute_line",
                column: "product_tmpl_id");

            migrationBuilder.CreateIndex(
                name: "IX_product_template_attribute_value_create_uid",
                table: "product_template_attribute_value",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_product_template_attribute_value_write_uid",
                table: "product_template_attribute_value",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "product_template_attribute_value_attribute_id_index",
                table: "product_template_attribute_value",
                column: "attribute_id");

            migrationBuilder.CreateIndex(
                name: "product_template_attribute_value_attribute_line_id_index",
                table: "product_template_attribute_value",
                column: "attribute_line_id");

            migrationBuilder.CreateIndex(
                name: "product_template_attribute_value_attribute_value_unique",
                table: "product_template_attribute_value",
                columns: new[] { "attribute_line_id", "product_attribute_value_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "product_template_attribute_value_product_attribute_value_id_ind",
                table: "product_template_attribute_value",
                column: "product_attribute_value_id");

            migrationBuilder.CreateIndex(
                name: "product_template_attribute_value_product_tmpl_id_index",
                table: "product_template_attribute_value",
                column: "product_tmpl_id");

            migrationBuilder.CreateIndex(
                name: "product_template_attribute_va_product_template_attribute_va_idx",
                table: "product_template_attribute_value_sale_order_line_rel",
                columns: new[] { "product_template_attribute_value_id", "sale_order_line_id" });

            migrationBuilder.CreateIndex(
                name: "product_variant_combination_product_template_attribute_valu_idx",
                table: "product_variant_combination",
                columns: new[] { "product_template_attribute_value_id", "product_product_id" });

            migrationBuilder.CreateIndex(
                name: "IX_project_collaborator_create_uid",
                table: "project_collaborator",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_project_collaborator_partner_id",
                table: "project_collaborator",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_collaborator_write_uid",
                table: "project_collaborator",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "project_collaborator_unique_collaborator",
                table: "project_collaborator",
                columns: new[] { "project_id", "partner_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "project_favorite_user_rel_user_id_project_id_idx",
                table: "project_favorite_user_rel",
                columns: new[] { "user_id", "project_id" });

            migrationBuilder.CreateIndex(
                name: "IX_project_milestone_create_uid",
                table: "project_milestone",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_project_milestone_message_main_attachment_id",
                table: "project_milestone",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_milestone_project_id",
                table: "project_milestone",
                column: "project_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_milestone_sale_line_id",
                table: "project_milestone",
                column: "sale_line_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_milestone_write_uid",
                table: "project_milestone",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_project_project_alias_id",
                table: "project_project",
                column: "alias_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_project_analytic_account_id",
                table: "project_project",
                column: "analytic_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_project_company_id",
                table: "project_project",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_project_create_uid",
                table: "project_project",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_project_project_last_update_id",
                table: "project_project",
                column: "last_update_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_project_message_main_attachment_id",
                table: "project_project",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_project_partner_id",
                table: "project_project",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_project_user_id",
                table: "project_project",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_project_write_uid",
                table: "project_project",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "project_project_date_index",
                table: "project_project",
                column: "date");

            migrationBuilder.CreateIndex(
                name: "project_project_sale_line_id_index",
                table: "project_project",
                column: "sale_line_id",
                filter: "(sale_line_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "project_project_stage_id_index",
                table: "project_project",
                column: "stage_id");

            migrationBuilder.CreateIndex(
                name: "project_project_project_tags__project_tags_id_project_proje_idx",
                table: "project_project_project_tags_rel",
                columns: new[] { "project_tags_id", "project_project_id" });

            migrationBuilder.CreateIndex(
                name: "project_project_project_task__project_project_id_project_ta_idx",
                table: "project_project_project_task_type_delete_wizard_rel",
                columns: new[] { "project_project_id", "project_task_type_delete_wizard_id" });

            migrationBuilder.CreateIndex(
                name: "IX_project_project_stage_create_uid",
                table: "project_project_stage",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_project_project_stage_mail_template_id",
                table: "project_project_stage",
                column: "mail_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_project_stage_sms_template_id",
                table: "project_project_stage",
                column: "sms_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_project_stage_write_uid",
                table: "project_project_stage",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_project_share_wizard_create_uid",
                table: "project_share_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_project_share_wizard_write_uid",
                table: "project_share_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "project_share_wizard_res_part_res_partner_id_project_share__idx",
                table: "project_share_wizard_res_partner_rel",
                columns: new[] { "res_partner_id", "project_share_wizard_id" });

            migrationBuilder.CreateIndex(
                name: "IX_project_tags_create_uid",
                table: "project_tags",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_project_tags_write_uid",
                table: "project_tags",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "project_tags_name_uniq",
                table: "project_tags",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "project_tags_project_task_rel_project_tags_id_project_task__idx",
                table: "project_tags_project_task_rel",
                columns: new[] { "project_tags_id", "project_task_id" });

            migrationBuilder.CreateIndex(
                name: "IX_project_task_analytic_account_id",
                table: "project_task",
                column: "analytic_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_task_company_id",
                table: "project_task",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_task_create_uid",
                table: "project_task",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_project_task_displayed_image_id",
                table: "project_task",
                column: "displayed_image_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_task_message_main_attachment_id",
                table: "project_task",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_task_milestone_id",
                table: "project_task",
                column: "milestone_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_task_partner_id",
                table: "project_task",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_task_recurrence_id",
                table: "project_task",
                column: "recurrence_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_task_sale_order_id",
                table: "project_task",
                column: "sale_order_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_task_write_uid",
                table: "project_task",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "project_task_ancestor_id_index",
                table: "project_task",
                column: "ancestor_id",
                filter: "(ancestor_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "project_task_date_deadline_index",
                table: "project_task",
                column: "date_deadline");

            migrationBuilder.CreateIndex(
                name: "project_task_date_end_index",
                table: "project_task",
                column: "date_end");

            migrationBuilder.CreateIndex(
                name: "project_task_date_last_stage_update_index",
                table: "project_task",
                column: "date_last_stage_update");

            migrationBuilder.CreateIndex(
                name: "project_task_display_project_id_index",
                table: "project_task",
                column: "display_project_id");

            migrationBuilder.CreateIndex(
                name: "project_task_email_from_index",
                table: "project_task",
                column: "email_from")
                .Annotation("Npgsql:IndexMethod", "gin")
                .Annotation("Npgsql:IndexOperators", new[] { "gin_trgm_ops" });

            migrationBuilder.CreateIndex(
                name: "project_task_is_closed_index",
                table: "project_task",
                column: "is_closed");

            migrationBuilder.CreateIndex(
                name: "project_task_name_index",
                table: "project_task",
                column: "name")
                .Annotation("Npgsql:IndexMethod", "gin")
                .Annotation("Npgsql:IndexOperators", new[] { "gin_trgm_ops" });

            migrationBuilder.CreateIndex(
                name: "project_task_parent_id_index",
                table: "project_task",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "project_task_priority_index",
                table: "project_task",
                column: "priority");

            migrationBuilder.CreateIndex(
                name: "project_task_project_id_index",
                table: "project_task",
                column: "project_id");

            migrationBuilder.CreateIndex(
                name: "project_task_sale_line_id_index",
                table: "project_task",
                column: "sale_line_id",
                filter: "(sale_line_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "project_task_stage_id_index",
                table: "project_task",
                column: "stage_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_task_recurrence_create_uid",
                table: "project_task_recurrence",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_project_task_recurrence_write_uid",
                table: "project_task_recurrence",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_project_task_type_create_uid",
                table: "project_task_type",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_project_task_type_mail_template_id",
                table: "project_task_type",
                column: "mail_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_task_type_rating_template_id",
                table: "project_task_type",
                column: "rating_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_task_type_sms_template_id",
                table: "project_task_type",
                column: "sms_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_task_type_write_uid",
                table: "project_task_type",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "project_task_type_user_id_index",
                table: "project_task_type",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_task_type_delete_wizard_create_uid",
                table: "project_task_type_delete_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_project_task_type_delete_wizard_write_uid",
                table: "project_task_type_delete_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "project_task_type_project_tas_project_task_type_id_project__idx",
                table: "project_task_type_project_task_type_delete_wizard_rel",
                columns: new[] { "project_task_type_id", "project_task_type_delete_wizard_id" });

            migrationBuilder.CreateIndex(
                name: "project_task_type_rel_project_id_type_id_idx",
                table: "project_task_type_rel",
                columns: new[] { "project_id", "type_id" });

            migrationBuilder.CreateIndex(
                name: "IX_project_task_user_rel_create_uid",
                table: "project_task_user_rel",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_project_task_user_rel_stage_id",
                table: "project_task_user_rel",
                column: "stage_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_task_user_rel_write_uid",
                table: "project_task_user_rel",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "project_task_user_rel_project_personal_stage_unique",
                table: "project_task_user_rel",
                columns: new[] { "task_id", "user_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "project_task_user_rel_task_id_index",
                table: "project_task_user_rel",
                column: "task_id");

            migrationBuilder.CreateIndex(
                name: "project_task_user_rel_user_id_index",
                table: "project_task_user_rel",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_update_create_uid",
                table: "project_update",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_project_update_message_main_attachment_id",
                table: "project_update",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_update_project_id",
                table: "project_update",
                column: "project_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_update_user_id",
                table: "project_update",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_project_update_write_uid",
                table: "project_update",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_purchase_order_create_uid",
                table: "purchase_order",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_purchase_order_currency_id",
                table: "purchase_order",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_purchase_order_dest_address_id",
                table: "purchase_order",
                column: "dest_address_id");

            migrationBuilder.CreateIndex(
                name: "IX_purchase_order_fiscal_position_id",
                table: "purchase_order",
                column: "fiscal_position_id");

            migrationBuilder.CreateIndex(
                name: "IX_purchase_order_group_id",
                table: "purchase_order",
                column: "group_id");

            migrationBuilder.CreateIndex(
                name: "IX_purchase_order_incoterm_id",
                table: "purchase_order",
                column: "incoterm_id");

            migrationBuilder.CreateIndex(
                name: "IX_purchase_order_message_main_attachment_id",
                table: "purchase_order",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_purchase_order_partner_id",
                table: "purchase_order",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_purchase_order_payment_term_id",
                table: "purchase_order",
                column: "payment_term_id");

            migrationBuilder.CreateIndex(
                name: "IX_purchase_order_picking_type_id",
                table: "purchase_order",
                column: "picking_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_purchase_order_write_uid",
                table: "purchase_order",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "purchase_order_company_id_index",
                table: "purchase_order",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "purchase_order_date_approve_index",
                table: "purchase_order",
                column: "date_approve");

            migrationBuilder.CreateIndex(
                name: "purchase_order_date_order_index",
                table: "purchase_order",
                column: "date_order");

            migrationBuilder.CreateIndex(
                name: "purchase_order_date_planned_index",
                table: "purchase_order",
                column: "date_planned");

            migrationBuilder.CreateIndex(
                name: "purchase_order_name_index",
                table: "purchase_order",
                column: "name")
                .Annotation("Npgsql:IndexMethod", "gin")
                .Annotation("Npgsql:IndexOperators", new[] { "gin_trgm_ops" });

            migrationBuilder.CreateIndex(
                name: "purchase_order_priority_index",
                table: "purchase_order",
                column: "priority");

            migrationBuilder.CreateIndex(
                name: "purchase_order_state_index",
                table: "purchase_order",
                column: "state");

            migrationBuilder.CreateIndex(
                name: "purchase_order_user_id_index",
                table: "purchase_order",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_purchase_order_line_company_id",
                table: "purchase_order_line",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_purchase_order_line_create_uid",
                table: "purchase_order_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_purchase_order_line_currency_id",
                table: "purchase_order_line",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_purchase_order_line_partner_id",
                table: "purchase_order_line",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_purchase_order_line_product_packaging_id",
                table: "purchase_order_line",
                column: "product_packaging_id");

            migrationBuilder.CreateIndex(
                name: "IX_purchase_order_line_product_uom",
                table: "purchase_order_line",
                column: "product_uom");

            migrationBuilder.CreateIndex(
                name: "IX_purchase_order_line_sale_order_id",
                table: "purchase_order_line",
                column: "sale_order_id");

            migrationBuilder.CreateIndex(
                name: "IX_purchase_order_line_write_uid",
                table: "purchase_order_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "purchase_order_line_analytic_distribution_gin_index",
                table: "purchase_order_line",
                column: "analytic_distribution")
                .Annotation("Npgsql:IndexMethod", "gin");

            migrationBuilder.CreateIndex(
                name: "purchase_order_line_date_planned_index",
                table: "purchase_order_line",
                column: "date_planned");

            migrationBuilder.CreateIndex(
                name: "purchase_order_line_order_id_index",
                table: "purchase_order_line",
                column: "order_id");

            migrationBuilder.CreateIndex(
                name: "purchase_order_line_orderpoint_id_index",
                table: "purchase_order_line",
                column: "orderpoint_id",
                filter: "(orderpoint_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "purchase_order_line_product_id_index",
                table: "purchase_order_line",
                column: "product_id",
                filter: "(product_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "purchase_order_line_sale_line_id_index",
                table: "purchase_order_line",
                column: "sale_line_id",
                filter: "(sale_line_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "purchase_order_stock_picking__stock_picking_id_purchase_ord_idx",
                table: "purchase_order_stock_picking_rel",
                columns: new[] { "stock_picking_id", "purchase_order_id" });

            migrationBuilder.CreateIndex(
                name: "IX_rating_rating_create_uid",
                table: "rating_rating",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_rating_rating_partner_id",
                table: "rating_rating",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_rating_rating_publisher_id",
                table: "rating_rating",
                column: "publisher_id");

            migrationBuilder.CreateIndex(
                name: "IX_rating_rating_rated_partner_id",
                table: "rating_rating",
                column: "rated_partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_rating_rating_write_uid",
                table: "rating_rating",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "rating_rating_message_id_index",
                table: "rating_rating",
                column: "message_id");

            migrationBuilder.CreateIndex(
                name: "rating_rating_parent_res_id_index",
                table: "rating_rating",
                column: "parent_res_id");

            migrationBuilder.CreateIndex(
                name: "rating_rating_parent_res_model_id_index",
                table: "rating_rating",
                column: "parent_res_model_id");

            migrationBuilder.CreateIndex(
                name: "rating_rating_parent_res_model_index",
                table: "rating_rating",
                column: "parent_res_model");

            migrationBuilder.CreateIndex(
                name: "rating_rating_res_id_index",
                table: "rating_rating",
                column: "res_id");

            migrationBuilder.CreateIndex(
                name: "rating_rating_res_model_id_index",
                table: "rating_rating",
                column: "res_model_id");

            migrationBuilder.CreateIndex(
                name: "rating_rating_res_model_index",
                table: "rating_rating",
                column: "res_model");

            migrationBuilder.CreateIndex(
                name: "IX_recurring_payment_company_id",
                table: "recurring_payment",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_recurring_payment_create_uid",
                table: "recurring_payment",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_recurring_payment_partner_id",
                table: "recurring_payment",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_recurring_payment_template_id",
                table: "recurring_payment",
                column: "template_id");

            migrationBuilder.CreateIndex(
                name: "IX_recurring_payment_write_uid",
                table: "recurring_payment",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_recurring_payment_line_company_id",
                table: "recurring_payment_line",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_recurring_payment_line_create_uid",
                table: "recurring_payment_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_recurring_payment_line_journal_id",
                table: "recurring_payment_line",
                column: "journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_recurring_payment_line_partner_id",
                table: "recurring_payment_line",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_recurring_payment_line_payment_id",
                table: "recurring_payment_line",
                column: "payment_id");

            migrationBuilder.CreateIndex(
                name: "IX_recurring_payment_line_recurring_payment_id",
                table: "recurring_payment_line",
                column: "recurring_payment_id");

            migrationBuilder.CreateIndex(
                name: "IX_recurring_payment_line_write_uid",
                table: "recurring_payment_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "rel_modules_langexport_module_id_wiz_id_idx",
                table: "rel_modules_langexport",
                columns: new[] { "module_id", "wiz_id" });

            migrationBuilder.CreateIndex(
                name: "rel_server_actions_action_id_server_id_idx",
                table: "rel_server_actions",
                columns: new[] { "action_id", "server_id" });

            migrationBuilder.CreateIndex(
                name: "IX_repair_fee_create_uid",
                table: "repair_fee",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_repair_fee_invoice_line_id",
                table: "repair_fee",
                column: "invoice_line_id");

            migrationBuilder.CreateIndex(
                name: "IX_repair_fee_product_id",
                table: "repair_fee",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_repair_fee_product_uom",
                table: "repair_fee",
                column: "product_uom");

            migrationBuilder.CreateIndex(
                name: "IX_repair_fee_write_uid",
                table: "repair_fee",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "repair_fee_company_id_index",
                table: "repair_fee",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "repair_fee_name_index",
                table: "repair_fee",
                column: "name");

            migrationBuilder.CreateIndex(
                name: "repair_fee_repair_id_index",
                table: "repair_fee",
                column: "repair_id");

            migrationBuilder.CreateIndex(
                name: "repair_fee_line_tax_tax_id_repair_fee_line_id_idx",
                table: "repair_fee_line_tax",
                columns: new[] { "tax_id", "repair_fee_line_id" });

            migrationBuilder.CreateIndex(
                name: "IX_repair_line_create_uid",
                table: "repair_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_repair_line_invoice_line_id",
                table: "repair_line",
                column: "invoice_line_id");

            migrationBuilder.CreateIndex(
                name: "IX_repair_line_lot_id",
                table: "repair_line",
                column: "lot_id");

            migrationBuilder.CreateIndex(
                name: "IX_repair_line_move_id",
                table: "repair_line",
                column: "move_id");

            migrationBuilder.CreateIndex(
                name: "IX_repair_line_product_id",
                table: "repair_line",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_repair_line_product_uom",
                table: "repair_line",
                column: "product_uom");

            migrationBuilder.CreateIndex(
                name: "IX_repair_line_write_uid",
                table: "repair_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "repair_line_company_id_index",
                table: "repair_line",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "repair_line_location_dest_id_index",
                table: "repair_line",
                column: "location_dest_id");

            migrationBuilder.CreateIndex(
                name: "repair_line_location_id_index",
                table: "repair_line",
                column: "location_id");

            migrationBuilder.CreateIndex(
                name: "repair_line_repair_id_index",
                table: "repair_line",
                column: "repair_id");

            migrationBuilder.CreateIndex(
                name: "repair_operation_line_tax_tax_id_repair_operation_line_id_idx",
                table: "repair_operation_line_tax",
                columns: new[] { "tax_id", "repair_operation_line_id" });

            migrationBuilder.CreateIndex(
                name: "IX_repair_order_address_id",
                table: "repair_order",
                column: "address_id");

            migrationBuilder.CreateIndex(
                name: "IX_repair_order_create_uid",
                table: "repair_order",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_repair_order_invoice_id",
                table: "repair_order",
                column: "invoice_id");

            migrationBuilder.CreateIndex(
                name: "IX_repair_order_lot_id",
                table: "repair_order",
                column: "lot_id");

            migrationBuilder.CreateIndex(
                name: "IX_repair_order_message_main_attachment_id",
                table: "repair_order",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_repair_order_move_id",
                table: "repair_order",
                column: "move_id");

            migrationBuilder.CreateIndex(
                name: "IX_repair_order_partner_invoice_id",
                table: "repair_order",
                column: "partner_invoice_id");

            migrationBuilder.CreateIndex(
                name: "IX_repair_order_picking_id",
                table: "repair_order",
                column: "picking_id");

            migrationBuilder.CreateIndex(
                name: "IX_repair_order_pricelist_id",
                table: "repair_order",
                column: "pricelist_id");

            migrationBuilder.CreateIndex(
                name: "IX_repair_order_product_id",
                table: "repair_order",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_repair_order_product_uom",
                table: "repair_order",
                column: "product_uom");

            migrationBuilder.CreateIndex(
                name: "IX_repair_order_sale_order_id",
                table: "repair_order",
                column: "sale_order_id");

            migrationBuilder.CreateIndex(
                name: "IX_repair_order_user_id",
                table: "repair_order",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_repair_order_write_uid",
                table: "repair_order",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "repair_order_company_id_index",
                table: "repair_order",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "repair_order_invoice_method_index",
                table: "repair_order",
                column: "invoice_method");

            migrationBuilder.CreateIndex(
                name: "repair_order_location_id_index",
                table: "repair_order",
                column: "location_id");

            migrationBuilder.CreateIndex(
                name: "repair_order_name",
                table: "repair_order",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "repair_order_name_index",
                table: "repair_order",
                column: "name")
                .Annotation("Npgsql:IndexMethod", "gin")
                .Annotation("Npgsql:IndexOperators", new[] { "gin_trgm_ops" });

            migrationBuilder.CreateIndex(
                name: "repair_order_partner_id_index",
                table: "repair_order",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_repair_order_make_invoice_create_uid",
                table: "repair_order_make_invoice",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_repair_order_make_invoice_write_uid",
                table: "repair_order_make_invoice",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "repair_order_repair_tags_rel_repair_tags_id_repair_order_id_idx",
                table: "repair_order_repair_tags_rel",
                columns: new[] { "repair_tags_id", "repair_order_id" });

            migrationBuilder.CreateIndex(
                name: "IX_repair_tags_create_uid",
                table: "repair_tags",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_repair_tags_write_uid",
                table: "repair_tags",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "repair_tags_name_uniq",
                table: "repair_tags",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_report_layout_create_uid",
                table: "report_layout",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_report_layout_view_id",
                table: "report_layout",
                column: "view_id");

            migrationBuilder.CreateIndex(
                name: "IX_report_layout_write_uid",
                table: "report_layout",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_report_paperformat_create_uid",
                table: "report_paperformat",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_report_paperformat_write_uid",
                table: "report_paperformat",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_bank_country",
                table: "res_bank",
                column: "country");

            migrationBuilder.CreateIndex(
                name: "IX_res_bank_create_uid",
                table: "res_bank",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_bank_state",
                table: "res_bank",
                column: "state");

            migrationBuilder.CreateIndex(
                name: "IX_res_bank_write_uid",
                table: "res_bank",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "res_bank_bic_index",
                table: "res_bank",
                column: "bic");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_account_cash_basis_base_account_id",
                table: "res_company",
                column: "account_cash_basis_base_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_account_default_pos_receivable_account_id",
                table: "res_company",
                column: "account_default_pos_receivable_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_account_fiscal_country_id",
                table: "res_company",
                column: "account_fiscal_country_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_account_journal_early_pay_discount_gain_account~",
                table: "res_company",
                column: "account_journal_early_pay_discount_gain_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_account_journal_early_pay_discount_loss_account~",
                table: "res_company",
                column: "account_journal_early_pay_discount_loss_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_account_journal_payment_credit_account_id",
                table: "res_company",
                column: "account_journal_payment_credit_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_account_journal_payment_debit_account_id",
                table: "res_company",
                column: "account_journal_payment_debit_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_account_journal_suspense_account_id",
                table: "res_company",
                column: "account_journal_suspense_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_account_opening_move_id",
                table: "res_company",
                column: "account_opening_move_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_account_purchase_tax_id",
                table: "res_company",
                column: "account_purchase_tax_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_account_sale_tax_id",
                table: "res_company",
                column: "account_sale_tax_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_automatic_entry_default_journal_id",
                table: "res_company",
                column: "automatic_entry_default_journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_chart_template_id",
                table: "res_company",
                column: "chart_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_company_expense_journal_id",
                table: "res_company",
                column: "company_expense_journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_create_uid",
                table: "res_company",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_currency_exchange_journal_id",
                table: "res_company",
                column: "currency_exchange_journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_currency_id",
                table: "res_company",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_default_cash_difference_expense_account_id",
                table: "res_company",
                column: "default_cash_difference_expense_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_default_cash_difference_income_account_id",
                table: "res_company",
                column: "default_cash_difference_income_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_expense_accrual_account_id",
                table: "res_company",
                column: "expense_accrual_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_expense_currency_exchange_account_id",
                table: "res_company",
                column: "expense_currency_exchange_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_expense_journal_id",
                table: "res_company",
                column: "expense_journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_external_report_layout_id",
                table: "res_company",
                column: "external_report_layout_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_income_currency_exchange_account_id",
                table: "res_company",
                column: "income_currency_exchange_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_incoterm_id",
                table: "res_company",
                column: "incoterm_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_internal_transit_location_id",
                table: "res_company",
                column: "internal_transit_location_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_message_main_attachment_id",
                table: "res_company",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_nomenclature_id",
                table: "res_company",
                column: "nomenclature_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_paperformat_id",
                table: "res_company",
                column: "paperformat_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_partner_id",
                table: "res_company",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_property_stock_account_input_categ_id",
                table: "res_company",
                column: "property_stock_account_input_categ_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_property_stock_account_output_categ_id",
                table: "res_company",
                column: "property_stock_account_output_categ_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_property_stock_valuation_account_id",
                table: "res_company",
                column: "property_stock_valuation_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_resource_calendar_id",
                table: "res_company",
                column: "resource_calendar_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_revenue_accrual_account_id",
                table: "res_company",
                column: "revenue_accrual_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_sale_order_template_id",
                table: "res_company",
                column: "sale_order_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_stock_mail_confirmation_template_id",
                table: "res_company",
                column: "stock_mail_confirmation_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_stock_sms_confirmation_template_id",
                table: "res_company",
                column: "stock_sms_confirmation_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_tax_cash_basis_journal_id",
                table: "res_company",
                column: "tax_cash_basis_journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_transfer_account_id",
                table: "res_company",
                column: "transfer_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_website_id",
                table: "res_company",
                column: "website_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_company_write_uid",
                table: "res_company",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "res_company_name_uniq",
                table: "res_company",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "res_company_parent_id_index",
                table: "res_company",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "res_company_users_rel_user_id_cid_idx",
                table: "res_company_users_rel",
                columns: new[] { "user_id", "cid" });

            migrationBuilder.CreateIndex(
                name: "IX_res_config_create_uid",
                table: "res_config",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_config_write_uid",
                table: "res_config",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_config_installer_create_uid",
                table: "res_config_installer",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_config_installer_write_uid",
                table: "res_config_installer",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_config_settings_auth_signup_template_user_id",
                table: "res_config_settings",
                column: "auth_signup_template_user_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_config_settings_chart_template_id",
                table: "res_config_settings",
                column: "chart_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_config_settings_company_id",
                table: "res_config_settings",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_config_settings_create_uid",
                table: "res_config_settings",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_config_settings_deposit_default_product_id",
                table: "res_config_settings",
                column: "deposit_default_product_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_config_settings_digest_id",
                table: "res_config_settings",
                column: "digest_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_config_settings_invoice_mail_template_id",
                table: "res_config_settings",
                column: "invoice_mail_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_config_settings_pos_config_id",
                table: "res_config_settings",
                column: "pos_config_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_config_settings_pos_default_fiscal_position_id",
                table: "res_config_settings",
                column: "pos_default_fiscal_position_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_config_settings_pos_iface_start_categ_id",
                table: "res_config_settings",
                column: "pos_iface_start_categ_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_config_settings_pos_pricelist_id",
                table: "res_config_settings",
                column: "pos_pricelist_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_config_settings_pos_tip_product_id",
                table: "res_config_settings",
                column: "pos_tip_product_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_config_settings_website_id",
                table: "res_config_settings",
                column: "website_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_config_settings_write_uid",
                table: "res_config_settings",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_country_address_view_id",
                table: "res_country",
                column: "address_view_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_country_create_uid",
                table: "res_country",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_country_currency_id",
                table: "res_country",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_country_write_uid",
                table: "res_country",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "res_country_code_uniq",
                table: "res_country",
                column: "code",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "res_country_name_uniq",
                table: "res_country",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_res_country_group_create_uid",
                table: "res_country_group",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_country_group_write_uid",
                table: "res_country_group",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "res_country_group_pricelist_r_res_country_group_id_pricelis_idx",
                table: "res_country_group_pricelist_rel",
                columns: new[] { "res_country_group_id", "pricelist_id" });

            migrationBuilder.CreateIndex(
                name: "res_country_res_country_group_res_country_group_id_res_coun_idx",
                table: "res_country_res_country_group_rel",
                columns: new[] { "res_country_group_id", "res_country_id" });

            migrationBuilder.CreateIndex(
                name: "IX_res_country_state_create_uid",
                table: "res_country_state",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_country_state_write_uid",
                table: "res_country_state",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "res_country_state_name_code_uniq",
                table: "res_country_state",
                columns: new[] { "country_id", "code" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_res_currency_create_uid",
                table: "res_currency",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_currency_write_uid",
                table: "res_currency",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "res_currency_unique_name",
                table: "res_currency",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_res_currency_rate_company_id",
                table: "res_currency_rate",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_currency_rate_create_uid",
                table: "res_currency_rate",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_currency_rate_currency_id",
                table: "res_currency_rate",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_currency_rate_write_uid",
                table: "res_currency_rate",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "res_currency_rate_name_index",
                table: "res_currency_rate",
                column: "name");

            migrationBuilder.CreateIndex(
                name: "res_currency_rate_unique_name_per_day",
                table: "res_currency_rate",
                columns: new[] { "name", "currency_id", "company_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_res_groups_create_uid",
                table: "res_groups",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_groups_write_uid",
                table: "res_groups",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "res_groups_category_id_index",
                table: "res_groups",
                column: "category_id");

            migrationBuilder.CreateIndex(
                name: "res_groups_name_uniq",
                table: "res_groups",
                columns: new[] { "category_id", "name" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "res_groups_implied_rel_hid_gid_idx",
                table: "res_groups_implied_rel",
                columns: new[] { "hid", "gid" });

            migrationBuilder.CreateIndex(
                name: "res_groups_report_rel_gid_uid_idx",
                table: "res_groups_report_rel",
                columns: new[] { "gid", "uid" });

            migrationBuilder.CreateIndex(
                name: "res_groups_spreadsheet_dashbo_res_groups_id_spreadsheet_das_idx",
                table: "res_groups_spreadsheet_dashboard_rel",
                columns: new[] { "res_groups_id", "spreadsheet_dashboard_id" });

            migrationBuilder.CreateIndex(
                name: "res_groups_users_rel_uid_gid_idx",
                table: "res_groups_users_rel",
                columns: new[] { "uid", "gid" });

            migrationBuilder.CreateIndex(
                name: "IX_res_lang_create_uid",
                table: "res_lang",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_lang_write_uid",
                table: "res_lang",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "res_lang_code_uniq",
                table: "res_lang",
                column: "code",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "res_lang_name_uniq",
                table: "res_lang",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "res_lang_url_code_uniq",
                table: "res_lang",
                column: "url_code",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "res_lang_install_rel_lang_id_language_wizard_id_idx",
                table: "res_lang_install_rel",
                columns: new[] { "lang_id", "language_wizard_id" });

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_country_id",
                table: "res_partner",
                column: "country_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_create_uid",
                table: "res_partner",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_industry_id",
                table: "res_partner",
                column: "industry_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_latest_followup_level_id_without_lit",
                table: "res_partner",
                column: "latest_followup_level_id_without_lit");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_message_main_attachment_id",
                table: "res_partner",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_payment_responsible_id",
                table: "res_partner",
                column: "payment_responsible_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_state_id",
                table: "res_partner",
                column: "state_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_team_id",
                table: "res_partner",
                column: "team_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_title",
                table: "res_partner",
                column: "title");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_user_id",
                table: "res_partner",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_write_uid",
                table: "res_partner",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "res_partner_commercial_partner_id_index",
                table: "res_partner",
                column: "commercial_partner_id");

            migrationBuilder.CreateIndex(
                name: "res_partner_company_id_index",
                table: "res_partner",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "res_partner_date_index",
                table: "res_partner",
                column: "date");

            migrationBuilder.CreateIndex(
                name: "res_partner_display_name_index",
                table: "res_partner",
                column: "display_name");

            migrationBuilder.CreateIndex(
                name: "res_partner_is_published_index",
                table: "res_partner",
                column: "is_published");

            migrationBuilder.CreateIndex(
                name: "res_partner_name_index",
                table: "res_partner",
                column: "name");

            migrationBuilder.CreateIndex(
                name: "res_partner_parent_id_index",
                table: "res_partner",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "res_partner_ref_index",
                table: "res_partner",
                column: "ref");

            migrationBuilder.CreateIndex(
                name: "res_partner_vat_index",
                table: "res_partner",
                column: "vat");

            migrationBuilder.CreateIndex(
                name: "res_partner_website_id_index",
                table: "res_partner",
                column: "website_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_autocomplete_sync_create_uid",
                table: "res_partner_autocomplete_sync",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_autocomplete_sync_partner_id",
                table: "res_partner_autocomplete_sync",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_autocomplete_sync_write_uid",
                table: "res_partner_autocomplete_sync",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_bank_bank_id",
                table: "res_partner_bank",
                column: "bank_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_bank_company_id",
                table: "res_partner_bank",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_bank_create_uid",
                table: "res_partner_bank",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_bank_currency_id",
                table: "res_partner_bank",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_bank_message_main_attachment_id",
                table: "res_partner_bank",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_bank_write_uid",
                table: "res_partner_bank",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "res_partner_bank_partner_id_index",
                table: "res_partner_bank",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "res_partner_bank_unique_number",
                table: "res_partner_bank",
                columns: new[] { "sanitized_acc_number", "partner_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_category_create_uid",
                table: "res_partner_category",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_category_write_uid",
                table: "res_partner_category",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "res_partner_category_parent_id_index",
                table: "res_partner_category",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "res_partner_category_parent_path_index",
                table: "res_partner_category",
                column: "parent_path");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_industry_create_uid",
                table: "res_partner_industry",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_industry_write_uid",
                table: "res_partner_industry",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "res_partner_res_partner_category_rel_partner_id_category_id_idx",
                table: "res_partner_res_partner_category_rel",
                columns: new[] { "partner_id", "category_id" });

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_title_create_uid",
                table: "res_partner_title",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_partner_title_write_uid",
                table: "res_partner_title",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_users_company_id",
                table: "res_users",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_users_create_uid",
                table: "res_users",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_users_last_lunch_location_id",
                table: "res_users",
                column: "last_lunch_location_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_users_sale_team_id",
                table: "res_users",
                column: "sale_team_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_users_website_id",
                table: "res_users",
                column: "website_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_users_write_uid",
                table: "res_users",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "res_users_login_key",
                table: "res_users",
                columns: new[] { "login", "website_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "res_users_partner_id_index",
                table: "res_users",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "res_users_apikeys_user_id_index_idx",
                table: "res_users_apikeys",
                columns: new[] { "user_id", "index" });

            migrationBuilder.CreateIndex(
                name: "IX_res_users_apikeys_description_create_uid",
                table: "res_users_apikeys_description",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_users_apikeys_description_write_uid",
                table: "res_users_apikeys_description",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_users_deletion_create_uid",
                table: "res_users_deletion",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_users_deletion_user_id",
                table: "res_users_deletion",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_res_users_deletion_write_uid",
                table: "res_users_deletion",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_users_identitycheck_create_uid",
                table: "res_users_identitycheck",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_users_identitycheck_write_uid",
                table: "res_users_identitycheck",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_users_log_create_uid",
                table: "res_users_log",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_users_log_write_uid",
                table: "res_users_log",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_users_settings_create_uid",
                table: "res_users_settings",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_users_settings_write_uid",
                table: "res_users_settings",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "res_users_settings_unique_user_id",
                table: "res_users_settings",
                column: "user_id",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_res_users_settings_volumes_create_uid",
                table: "res_users_settings_volumes",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_res_users_settings_volumes_write_uid",
                table: "res_users_settings_volumes",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "res_users_settings_volumes_guest_id_index",
                table: "res_users_settings_volumes",
                column: "guest_id");

            migrationBuilder.CreateIndex(
                name: "res_users_settings_volumes_guest_unique",
                table: "res_users_settings_volumes",
                columns: new[] { "user_setting_id", "guest_id" },
                unique: true,
                filter: "(guest_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "res_users_settings_volumes_partner_id_index",
                table: "res_users_settings_volumes",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "res_users_settings_volumes_partner_unique",
                table: "res_users_settings_volumes",
                columns: new[] { "user_setting_id", "partner_id" },
                unique: true,
                filter: "(partner_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "res_users_settings_volumes_user_setting_id_index",
                table: "res_users_settings_volumes",
                column: "user_setting_id");

            migrationBuilder.CreateIndex(
                name: "IX_reset_view_arch_wizard_compare_view_id",
                table: "reset_view_arch_wizard",
                column: "compare_view_id");

            migrationBuilder.CreateIndex(
                name: "IX_reset_view_arch_wizard_create_uid",
                table: "reset_view_arch_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_reset_view_arch_wizard_view_id",
                table: "reset_view_arch_wizard",
                column: "view_id");

            migrationBuilder.CreateIndex(
                name: "IX_reset_view_arch_wizard_write_uid",
                table: "reset_view_arch_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_resource_calendar_company_id",
                table: "resource_calendar",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_resource_calendar_create_uid",
                table: "resource_calendar",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_resource_calendar_write_uid",
                table: "resource_calendar",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_resource_calendar_attendance_calendar_id",
                table: "resource_calendar_attendance",
                column: "calendar_id");

            migrationBuilder.CreateIndex(
                name: "IX_resource_calendar_attendance_create_uid",
                table: "resource_calendar_attendance",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_resource_calendar_attendance_resource_id",
                table: "resource_calendar_attendance",
                column: "resource_id");

            migrationBuilder.CreateIndex(
                name: "IX_resource_calendar_attendance_write_uid",
                table: "resource_calendar_attendance",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "resource_calendar_attendance_dayofweek_index",
                table: "resource_calendar_attendance",
                column: "dayofweek");

            migrationBuilder.CreateIndex(
                name: "resource_calendar_attendance_hour_from_index",
                table: "resource_calendar_attendance",
                column: "hour_from");

            migrationBuilder.CreateIndex(
                name: "IX_resource_calendar_leaves_company_id",
                table: "resource_calendar_leaves",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_resource_calendar_leaves_create_uid",
                table: "resource_calendar_leaves",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_resource_calendar_leaves_holiday_id",
                table: "resource_calendar_leaves",
                column: "holiday_id");

            migrationBuilder.CreateIndex(
                name: "IX_resource_calendar_leaves_write_uid",
                table: "resource_calendar_leaves",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "resource_calendar_leaves_calendar_id_index",
                table: "resource_calendar_leaves",
                column: "calendar_id");

            migrationBuilder.CreateIndex(
                name: "resource_calendar_leaves_resource_id_index",
                table: "resource_calendar_leaves",
                column: "resource_id");

            migrationBuilder.CreateIndex(
                name: "IX_resource_resource_calendar_id",
                table: "resource_resource",
                column: "calendar_id");

            migrationBuilder.CreateIndex(
                name: "IX_resource_resource_company_id",
                table: "resource_resource",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_resource_resource_create_uid",
                table: "resource_resource",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_resource_resource_user_id",
                table: "resource_resource",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_resource_resource_write_uid",
                table: "resource_resource",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "rule_group_rel_group_id_rule_group_id_idx",
                table: "rule_group_rel",
                columns: new[] { "group_id", "rule_group_id" });

            migrationBuilder.CreateIndex(
                name: "IX_sale_advance_payment_inv_company_id",
                table: "sale_advance_payment_inv",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_advance_payment_inv_create_uid",
                table: "sale_advance_payment_inv",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_sale_advance_payment_inv_currency_id",
                table: "sale_advance_payment_inv",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_advance_payment_inv_deposit_account_id",
                table: "sale_advance_payment_inv",
                column: "deposit_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_advance_payment_inv_product_id",
                table: "sale_advance_payment_inv",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_advance_payment_inv_write_uid",
                table: "sale_advance_payment_inv",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "sale_advance_payment_inv_sale_sale_order_id_sale_advance_pa_idx",
                table: "sale_advance_payment_inv_sale_order_rel",
                columns: new[] { "sale_order_id", "sale_advance_payment_inv_id" });

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_analytic_account_id",
                table: "sale_order",
                column: "analytic_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_campaign_id",
                table: "sale_order",
                column: "campaign_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_create_uid",
                table: "sale_order",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_currency_id",
                table: "sale_order",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_fiscal_position_id",
                table: "sale_order",
                column: "fiscal_position_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_incoterm",
                table: "sale_order",
                column: "incoterm");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_medium_id",
                table: "sale_order",
                column: "medium_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_message_main_attachment_id",
                table: "sale_order",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_opportunity_id",
                table: "sale_order",
                column: "opportunity_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_partner_invoice_id",
                table: "sale_order",
                column: "partner_invoice_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_partner_shipping_id",
                table: "sale_order",
                column: "partner_shipping_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_payment_term_id",
                table: "sale_order",
                column: "payment_term_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_pricelist_id",
                table: "sale_order",
                column: "pricelist_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_procurement_group_id",
                table: "sale_order",
                column: "procurement_group_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_project_id",
                table: "sale_order",
                column: "project_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_sale_order_template_id",
                table: "sale_order",
                column: "sale_order_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_source_id",
                table: "sale_order",
                column: "source_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_team_id",
                table: "sale_order",
                column: "team_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_warehouse_id",
                table: "sale_order",
                column: "warehouse_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_website_id",
                table: "sale_order",
                column: "website_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_write_uid",
                table: "sale_order",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "sale_order_company_id_index",
                table: "sale_order",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "sale_order_create_date_index",
                table: "sale_order",
                column: "create_date");

            migrationBuilder.CreateIndex(
                name: "sale_order_date_order_id_idx",
                table: "sale_order",
                columns: new[] { "date_order", "id" },
                descending: new bool[0]);

            migrationBuilder.CreateIndex(
                name: "sale_order_name_index",
                table: "sale_order",
                column: "name")
                .Annotation("Npgsql:IndexMethod", "gin")
                .Annotation("Npgsql:IndexOperators", new[] { "gin_trgm_ops" });

            migrationBuilder.CreateIndex(
                name: "sale_order_partner_id_index",
                table: "sale_order",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "sale_order_state_index",
                table: "sale_order",
                column: "state");

            migrationBuilder.CreateIndex(
                name: "sale_order_user_id_index",
                table: "sale_order",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_cancel_create_uid",
                table: "sale_order_cancel",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_cancel_order_id",
                table: "sale_order_cancel",
                column: "order_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_cancel_template_id",
                table: "sale_order_cancel",
                column: "template_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_cancel_write_uid",
                table: "sale_order_cancel",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "sale_order_cancel_author_id_index",
                table: "sale_order_cancel",
                column: "author_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_line_create_uid",
                table: "sale_order_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_line_currency_id",
                table: "sale_order_line",
                column: "currency_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_line_product_packaging_id",
                table: "sale_order_line",
                column: "product_packaging_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_line_product_uom",
                table: "sale_order_line",
                column: "product_uom");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_line_route_id",
                table: "sale_order_line",
                column: "route_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_line_salesman_id",
                table: "sale_order_line",
                column: "salesman_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_line_write_uid",
                table: "sale_order_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "sale_order_line_analytic_distribution_gin_index",
                table: "sale_order_line",
                column: "analytic_distribution")
                .Annotation("Npgsql:IndexMethod", "gin");

            migrationBuilder.CreateIndex(
                name: "sale_order_line_company_id_index",
                table: "sale_order_line",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "sale_order_line_linked_line_id_index",
                table: "sale_order_line",
                column: "linked_line_id");

            migrationBuilder.CreateIndex(
                name: "sale_order_line_order_id_index",
                table: "sale_order_line",
                column: "order_id");

            migrationBuilder.CreateIndex(
                name: "sale_order_line_order_partner_id_index",
                table: "sale_order_line",
                column: "order_partner_id");

            migrationBuilder.CreateIndex(
                name: "sale_order_line_product_id_index",
                table: "sale_order_line",
                column: "product_id",
                filter: "(product_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "sale_order_line_project_id_index",
                table: "sale_order_line",
                column: "project_id");

            migrationBuilder.CreateIndex(
                name: "sale_order_line_task_id_index",
                table: "sale_order_line",
                column: "task_id");

            migrationBuilder.CreateIndex(
                name: "sale_order_line_invoice_rel_order_line_id_invoice_line_id_idx",
                table: "sale_order_line_invoice_rel",
                columns: new[] { "order_line_id", "invoice_line_id" });

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_option_create_uid",
                table: "sale_order_option",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_option_line_id",
                table: "sale_order_option",
                column: "line_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_option_product_id",
                table: "sale_order_option",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_option_uom_id",
                table: "sale_order_option",
                column: "uom_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_option_write_uid",
                table: "sale_order_option",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "sale_order_option_order_id_index",
                table: "sale_order_option",
                column: "order_id");

            migrationBuilder.CreateIndex(
                name: "sale_order_tag_rel_tag_id_order_id_idx",
                table: "sale_order_tag_rel",
                columns: new[] { "tag_id", "order_id" });

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_template_company_id",
                table: "sale_order_template",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_template_create_uid",
                table: "sale_order_template",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_template_mail_template_id",
                table: "sale_order_template",
                column: "mail_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_template_write_uid",
                table: "sale_order_template",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_template_line_create_uid",
                table: "sale_order_template_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_template_line_product_id",
                table: "sale_order_template_line",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_template_line_product_uom_id",
                table: "sale_order_template_line",
                column: "product_uom_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_template_line_write_uid",
                table: "sale_order_template_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "sale_order_template_line_company_id_index",
                table: "sale_order_template_line",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "sale_order_template_line_sale_order_template_id_index",
                table: "sale_order_template_line",
                column: "sale_order_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_template_option_create_uid",
                table: "sale_order_template_option",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_template_option_product_id",
                table: "sale_order_template_option",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_template_option_uom_id",
                table: "sale_order_template_option",
                column: "uom_id");

            migrationBuilder.CreateIndex(
                name: "IX_sale_order_template_option_write_uid",
                table: "sale_order_template_option",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "sale_order_template_option_company_id_index",
                table: "sale_order_template_option",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "sale_order_template_option_sale_order_template_id_index",
                table: "sale_order_template_option",
                column: "sale_order_template_id");

            migrationBuilder.CreateIndex(
                name: "sale_order_transaction_rel_sale_order_id_transaction_id_idx",
                table: "sale_order_transaction_rel",
                columns: new[] { "sale_order_id", "transaction_id" });

            migrationBuilder.CreateIndex(
                name: "IX_sale_payment_provider_onboarding_wizard_create_uid",
                table: "sale_payment_provider_onboarding_wizard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_sale_payment_provider_onboarding_wizard_write_uid",
                table: "sale_payment_provider_onboarding_wizard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_sms_composer_create_uid",
                table: "sms_composer",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_sms_composer_template_id",
                table: "sms_composer",
                column: "template_id");

            migrationBuilder.CreateIndex(
                name: "IX_sms_composer_write_uid",
                table: "sms_composer",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_sms_resend_create_uid",
                table: "sms_resend",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_sms_resend_mail_message_id",
                table: "sms_resend",
                column: "mail_message_id");

            migrationBuilder.CreateIndex(
                name: "IX_sms_resend_write_uid",
                table: "sms_resend",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_sms_resend_recipient_create_uid",
                table: "sms_resend_recipient",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_sms_resend_recipient_notification_id",
                table: "sms_resend_recipient",
                column: "notification_id");

            migrationBuilder.CreateIndex(
                name: "IX_sms_resend_recipient_sms_resend_id",
                table: "sms_resend_recipient",
                column: "sms_resend_id");

            migrationBuilder.CreateIndex(
                name: "IX_sms_resend_recipient_write_uid",
                table: "sms_resend_recipient",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_sms_sms_create_uid",
                table: "sms_sms",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_sms_sms_partner_id",
                table: "sms_sms",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_sms_sms_write_uid",
                table: "sms_sms",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "sms_sms_mail_message_id_index",
                table: "sms_sms",
                column: "mail_message_id");

            migrationBuilder.CreateIndex(
                name: "IX_sms_template_create_uid",
                table: "sms_template",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_sms_template_model_id",
                table: "sms_template",
                column: "model_id");

            migrationBuilder.CreateIndex(
                name: "IX_sms_template_sidebar_action_id",
                table: "sms_template",
                column: "sidebar_action_id");

            migrationBuilder.CreateIndex(
                name: "IX_sms_template_write_uid",
                table: "sms_template",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "sms_template_model_index",
                table: "sms_template",
                column: "model");

            migrationBuilder.CreateIndex(
                name: "IX_sms_template_preview_create_uid",
                table: "sms_template_preview",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_sms_template_preview_sms_template_id",
                table: "sms_template_preview",
                column: "sms_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_sms_template_preview_write_uid",
                table: "sms_template_preview",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_sms_template_reset_create_uid",
                table: "sms_template_reset",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_sms_template_reset_write_uid",
                table: "sms_template_reset",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "sms_template_sms_template_res_sms_template_id_sms_template__idx",
                table: "sms_template_sms_template_reset_rel",
                columns: new[] { "sms_template_id", "sms_template_reset_id" });

            migrationBuilder.CreateIndex(
                name: "IX_snailmail_confirm_invoice_create_uid",
                table: "snailmail_confirm_invoice",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_snailmail_confirm_invoice_invoice_send_id",
                table: "snailmail_confirm_invoice",
                column: "invoice_send_id");

            migrationBuilder.CreateIndex(
                name: "IX_snailmail_confirm_invoice_write_uid",
                table: "snailmail_confirm_invoice",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_snailmail_letter_attachment_id",
                table: "snailmail_letter",
                column: "attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_snailmail_letter_company_id",
                table: "snailmail_letter",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_snailmail_letter_country_id",
                table: "snailmail_letter",
                column: "country_id");

            migrationBuilder.CreateIndex(
                name: "IX_snailmail_letter_create_uid",
                table: "snailmail_letter",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_snailmail_letter_message_id",
                table: "snailmail_letter",
                column: "message_id");

            migrationBuilder.CreateIndex(
                name: "IX_snailmail_letter_partner_id",
                table: "snailmail_letter",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_snailmail_letter_report_template",
                table: "snailmail_letter",
                column: "report_template");

            migrationBuilder.CreateIndex(
                name: "IX_snailmail_letter_state_id",
                table: "snailmail_letter",
                column: "state_id");

            migrationBuilder.CreateIndex(
                name: "IX_snailmail_letter_user_id",
                table: "snailmail_letter",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_snailmail_letter_write_uid",
                table: "snailmail_letter",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_snailmail_letter_format_error_create_uid",
                table: "snailmail_letter_format_error",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_snailmail_letter_format_error_message_id",
                table: "snailmail_letter_format_error",
                column: "message_id");

            migrationBuilder.CreateIndex(
                name: "IX_snailmail_letter_format_error_write_uid",
                table: "snailmail_letter_format_error",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_snailmail_letter_missing_required_fields_country_id",
                table: "snailmail_letter_missing_required_fields",
                column: "country_id");

            migrationBuilder.CreateIndex(
                name: "IX_snailmail_letter_missing_required_fields_create_uid",
                table: "snailmail_letter_missing_required_fields",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_snailmail_letter_missing_required_fields_letter_id",
                table: "snailmail_letter_missing_required_fields",
                column: "letter_id");

            migrationBuilder.CreateIndex(
                name: "IX_snailmail_letter_missing_required_fields_partner_id",
                table: "snailmail_letter_missing_required_fields",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_snailmail_letter_missing_required_fields_state_id",
                table: "snailmail_letter_missing_required_fields",
                column: "state_id");

            migrationBuilder.CreateIndex(
                name: "IX_snailmail_letter_missing_required_fields_write_uid",
                table: "snailmail_letter_missing_required_fields",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_spreadsheet_dashboard_create_uid",
                table: "spreadsheet_dashboard",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_spreadsheet_dashboard_dashboard_group_id",
                table: "spreadsheet_dashboard",
                column: "dashboard_group_id");

            migrationBuilder.CreateIndex(
                name: "IX_spreadsheet_dashboard_write_uid",
                table: "spreadsheet_dashboard",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_spreadsheet_dashboard_group_create_uid",
                table: "spreadsheet_dashboard_group",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_spreadsheet_dashboard_group_write_uid",
                table: "spreadsheet_dashboard_group",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_assign_serial_create_uid",
                table: "stock_assign_serial",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_assign_serial_move_id",
                table: "stock_assign_serial",
                column: "move_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_assign_serial_production_id",
                table: "stock_assign_serial",
                column: "production_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_assign_serial_write_uid",
                table: "stock_assign_serial",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_backorder_confirmation_create_uid",
                table: "stock_backorder_confirmation",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_backorder_confirmation_write_uid",
                table: "stock_backorder_confirmation",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_backorder_confirmation_line_backorder_confirmation_id",
                table: "stock_backorder_confirmation_line",
                column: "backorder_confirmation_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_backorder_confirmation_line_create_uid",
                table: "stock_backorder_confirmation_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_backorder_confirmation_line_picking_id",
                table: "stock_backorder_confirmation_line",
                column: "picking_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_backorder_confirmation_line_write_uid",
                table: "stock_backorder_confirmation_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_change_product_qty_create_uid",
                table: "stock_change_product_qty",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_change_product_qty_product_id",
                table: "stock_change_product_qty",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_change_product_qty_product_tmpl_id",
                table: "stock_change_product_qty",
                column: "product_tmpl_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_change_product_qty_write_uid",
                table: "stock_change_product_qty",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_conflict_quant_rel_stock_quant_id_stock_inventory_con_idx",
                table: "stock_conflict_quant_rel",
                columns: new[] { "stock_quant_id", "stock_inventory_conflict_id" });

            migrationBuilder.CreateIndex(
                name: "IX_stock_immediate_transfer_create_uid",
                table: "stock_immediate_transfer",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_immediate_transfer_write_uid",
                table: "stock_immediate_transfer",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_immediate_transfer_line_create_uid",
                table: "stock_immediate_transfer_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_immediate_transfer_line_immediate_transfer_id",
                table: "stock_immediate_transfer_line",
                column: "immediate_transfer_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_immediate_transfer_line_picking_id",
                table: "stock_immediate_transfer_line",
                column: "picking_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_immediate_transfer_line_write_uid",
                table: "stock_immediate_transfer_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_inventory_adjustment_name_create_uid",
                table: "stock_inventory_adjustment_name",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_inventory_adjustment_name_write_uid",
                table: "stock_inventory_adjustment_name",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_inventory_adjustment_na_stock_quant_id_stock_inventor_idx",
                table: "stock_inventory_adjustment_name_stock_quant_rel",
                columns: new[] { "stock_quant_id", "stock_inventory_adjustment_name_id" });

            migrationBuilder.CreateIndex(
                name: "IX_stock_inventory_conflict_create_uid",
                table: "stock_inventory_conflict",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_inventory_conflict_write_uid",
                table: "stock_inventory_conflict",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_inventory_conflict_stoc_stock_quant_id_stock_inventor_idx",
                table: "stock_inventory_conflict_stock_quant_rel",
                columns: new[] { "stock_quant_id", "stock_inventory_conflict_id" });

            migrationBuilder.CreateIndex(
                name: "IX_stock_inventory_warning_create_uid",
                table: "stock_inventory_warning",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_inventory_warning_write_uid",
                table: "stock_inventory_warning",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_inventory_warning_stock_stock_quant_id_stock_inventor_idx",
                table: "stock_inventory_warning_stock_quant_rel",
                columns: new[] { "stock_quant_id", "stock_inventory_warning_id" });

            migrationBuilder.CreateIndex(
                name: "IX_stock_location_create_uid",
                table: "stock_location",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_location_removal_strategy_id",
                table: "stock_location",
                column: "removal_strategy_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_location_storage_category_id",
                table: "stock_location",
                column: "storage_category_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_location_valuation_in_account_id",
                table: "stock_location",
                column: "valuation_in_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_location_valuation_out_account_id",
                table: "stock_location",
                column: "valuation_out_account_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_location_warehouse_id",
                table: "stock_location",
                column: "warehouse_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_location_write_uid",
                table: "stock_location",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_location_barcode_company_uniq",
                table: "stock_location",
                columns: new[] { "barcode", "company_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "stock_location_company_id_index",
                table: "stock_location",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "stock_location_location_id_index",
                table: "stock_location",
                column: "location_id");

            migrationBuilder.CreateIndex(
                name: "stock_location_parent_path_index",
                table: "stock_location",
                column: "parent_path");

            migrationBuilder.CreateIndex(
                name: "stock_location_usage_index",
                table: "stock_location",
                column: "usage");

            migrationBuilder.CreateIndex(
                name: "IX_stock_lot_create_uid",
                table: "stock_lot",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_lot_message_main_attachment_id",
                table: "stock_lot",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_lot_product_uom_id",
                table: "stock_lot",
                column: "product_uom_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_lot_write_uid",
                table: "stock_lot",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_lot_company_id_index",
                table: "stock_lot",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "stock_lot_name_index",
                table: "stock_lot",
                column: "name")
                .Annotation("Npgsql:IndexMethod", "gin")
                .Annotation("Npgsql:IndexOperators", new[] { "gin_trgm_ops" });

            migrationBuilder.CreateIndex(
                name: "stock_lot_product_id_index",
                table: "stock_lot",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_analytic_account_line_id",
                table: "stock_move",
                column: "analytic_account_line_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_bom_line_id",
                table: "stock_move",
                column: "bom_line_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_byproduct_id",
                table: "stock_move",
                column: "byproduct_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_consume_unbuild_id",
                table: "stock_move",
                column: "consume_unbuild_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_create_uid",
                table: "stock_move",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_created_production_id",
                table: "stock_move",
                column: "created_production_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_group_id",
                table: "stock_move",
                column: "group_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_operation_id",
                table: "stock_move",
                column: "operation_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_order_finished_lot_id",
                table: "stock_move",
                column: "order_finished_lot_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_package_level_id",
                table: "stock_move",
                column: "package_level_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_partner_id",
                table: "stock_move",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_picking_type_id",
                table: "stock_move",
                column: "picking_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_product_packaging_id",
                table: "stock_move",
                column: "product_packaging_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_product_uom",
                table: "stock_move",
                column: "product_uom");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_repair_id",
                table: "stock_move",
                column: "repair_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_restrict_partner_id",
                table: "stock_move",
                column: "restrict_partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_rule_id",
                table: "stock_move",
                column: "rule_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_unbuild_id",
                table: "stock_move",
                column: "unbuild_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_warehouse_id",
                table: "stock_move",
                column: "warehouse_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_workorder_id",
                table: "stock_move",
                column: "workorder_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_write_uid",
                table: "stock_move",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_move_company_id_index",
                table: "stock_move",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "stock_move_created_purchase_line_id_index",
                table: "stock_move",
                column: "created_purchase_line_id",
                filter: "(created_purchase_line_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "stock_move_date_index",
                table: "stock_move",
                column: "date");

            migrationBuilder.CreateIndex(
                name: "stock_move_location_dest_id_index",
                table: "stock_move",
                column: "location_dest_id");

            migrationBuilder.CreateIndex(
                name: "stock_move_location_id_index",
                table: "stock_move",
                column: "location_id");

            migrationBuilder.CreateIndex(
                name: "stock_move_orderpoint_id_index",
                table: "stock_move",
                column: "orderpoint_id");

            migrationBuilder.CreateIndex(
                name: "stock_move_origin_returned_move_id_index",
                table: "stock_move",
                column: "origin_returned_move_id");

            migrationBuilder.CreateIndex(
                name: "stock_move_picking_id_index",
                table: "stock_move",
                column: "picking_id");

            migrationBuilder.CreateIndex(
                name: "stock_move_product_id_index",
                table: "stock_move",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "stock_move_product_location_index",
                table: "stock_move",
                columns: new[] { "product_id", "location_id", "location_dest_id", "company_id", "state" });

            migrationBuilder.CreateIndex(
                name: "stock_move_production_id_index",
                table: "stock_move",
                column: "production_id",
                filter: "(production_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "stock_move_purchase_line_id_index",
                table: "stock_move",
                column: "purchase_line_id",
                filter: "(purchase_line_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "stock_move_raw_material_production_id_index",
                table: "stock_move",
                column: "raw_material_production_id",
                filter: "(raw_material_production_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "stock_move_sale_line_id_index",
                table: "stock_move",
                column: "sale_line_id",
                filter: "(sale_line_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "stock_move_state_index",
                table: "stock_move",
                column: "state");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_line_create_uid",
                table: "stock_move_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_line_location_dest_id",
                table: "stock_move_line",
                column: "location_dest_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_line_location_id",
                table: "stock_move_line",
                column: "location_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_line_lot_id",
                table: "stock_move_line",
                column: "lot_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_line_owner_id",
                table: "stock_move_line",
                column: "owner_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_line_package_id",
                table: "stock_move_line",
                column: "package_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_line_package_level_id",
                table: "stock_move_line",
                column: "package_level_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_line_product_uom_id",
                table: "stock_move_line",
                column: "product_uom_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_line_production_id",
                table: "stock_move_line",
                column: "production_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_line_result_package_id",
                table: "stock_move_line",
                column: "result_package_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_line_workorder_id",
                table: "stock_move_line",
                column: "workorder_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_move_line_write_uid",
                table: "stock_move_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_move_line_company_id_index",
                table: "stock_move_line",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "stock_move_line_free_reservation_index",
                table: "stock_move_line",
                columns: new[] { "id", "company_id", "product_id", "lot_id", "location_id", "owner_id", "package_id" },
                filter: "(((state IS NULL) OR (state <> ALL (ARRAY[('cancel'::character varying)::text, ('done'::character varying)::text]))) AND (reserved_qty > (0)::numeric))");

            migrationBuilder.CreateIndex(
                name: "stock_move_line_move_id_index",
                table: "stock_move_line",
                column: "move_id");

            migrationBuilder.CreateIndex(
                name: "stock_move_line_picking_id_index",
                table: "stock_move_line",
                column: "picking_id");

            migrationBuilder.CreateIndex(
                name: "stock_move_line_product_id_index",
                table: "stock_move_line",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "stock_move_line_consume_rel_produce_line_id_consume_line_id_idx",
                table: "stock_move_line_consume_rel",
                columns: new[] { "produce_line_id", "consume_line_id" });

            migrationBuilder.CreateIndex(
                name: "stock_move_move_rel_move_dest_id_move_orig_id_idx",
                table: "stock_move_move_rel",
                columns: new[] { "move_dest_id", "move_orig_id" });

            migrationBuilder.CreateIndex(
                name: "stock_notification_product_pa_res_partner_id_product_produc_idx",
                table: "stock_notification_product_partner_rel",
                columns: new[] { "res_partner_id", "product_product_id" });

            migrationBuilder.CreateIndex(
                name: "IX_stock_orderpoint_snooze_create_uid",
                table: "stock_orderpoint_snooze",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_orderpoint_snooze_write_uid",
                table: "stock_orderpoint_snooze",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_orderpoint_snooze_stock_stock_warehouse_orderpoint_id_idx",
                table: "stock_orderpoint_snooze_stock_warehouse_orderpoint_rel",
                columns: new[] { "stock_warehouse_orderpoint_id", "stock_orderpoint_snooze_id" });

            migrationBuilder.CreateIndex(
                name: "IX_stock_package_destination_create_uid",
                table: "stock_package_destination",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_package_destination_location_dest_id",
                table: "stock_package_destination",
                column: "location_dest_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_package_destination_picking_id",
                table: "stock_package_destination",
                column: "picking_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_package_destination_write_uid",
                table: "stock_package_destination",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_package_level_create_uid",
                table: "stock_package_level",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_package_level_location_dest_id",
                table: "stock_package_level",
                column: "location_dest_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_package_level_package_id",
                table: "stock_package_level",
                column: "package_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_package_level_picking_id",
                table: "stock_package_level",
                column: "picking_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_package_level_write_uid",
                table: "stock_package_level",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_package_level_company_id_index",
                table: "stock_package_level",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_package_type_create_uid",
                table: "stock_package_type",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_package_type_write_uid",
                table: "stock_package_type",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_package_type_barcode_uniq",
                table: "stock_package_type",
                column: "barcode",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "stock_package_type_company_id_index",
                table: "stock_package_type",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "stock_package_type_stock_puta_stock_package_type_id_stock_p_idx",
                table: "stock_package_type_stock_putaway_rule_rel",
                columns: new[] { "stock_package_type_id", "stock_putaway_rule_id" });

            migrationBuilder.CreateIndex(
                name: "IX_stock_picking_create_uid",
                table: "stock_picking",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_picking_group_id",
                table: "stock_picking",
                column: "group_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_picking_location_dest_id",
                table: "stock_picking",
                column: "location_dest_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_picking_location_id",
                table: "stock_picking",
                column: "location_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_picking_message_main_attachment_id",
                table: "stock_picking",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_picking_owner_id",
                table: "stock_picking",
                column: "owner_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_picking_partner_id",
                table: "stock_picking",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_picking_pos_order_id",
                table: "stock_picking",
                column: "pos_order_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_picking_pos_session_id",
                table: "stock_picking",
                column: "pos_session_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_picking_user_id",
                table: "stock_picking",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_picking_website_id",
                table: "stock_picking",
                column: "website_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_picking_write_uid",
                table: "stock_picking",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_picking_backorder_id_index",
                table: "stock_picking",
                column: "backorder_id",
                filter: "(backorder_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "stock_picking_company_id_index",
                table: "stock_picking",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "stock_picking_name_index",
                table: "stock_picking",
                column: "name")
                .Annotation("Npgsql:IndexMethod", "gin")
                .Annotation("Npgsql:IndexOperators", new[] { "gin_trgm_ops" });

            migrationBuilder.CreateIndex(
                name: "stock_picking_name_uniq",
                table: "stock_picking",
                columns: new[] { "name", "company_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "stock_picking_origin_index",
                table: "stock_picking",
                column: "origin")
                .Annotation("Npgsql:IndexMethod", "gin")
                .Annotation("Npgsql:IndexOperators", new[] { "gin_trgm_ops" });

            migrationBuilder.CreateIndex(
                name: "stock_picking_picking_type_id_index",
                table: "stock_picking",
                column: "picking_type_id");

            migrationBuilder.CreateIndex(
                name: "stock_picking_sale_id_index",
                table: "stock_picking",
                column: "sale_id",
                filter: "(sale_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "stock_picking_scheduled_date_index",
                table: "stock_picking",
                column: "scheduled_date");

            migrationBuilder.CreateIndex(
                name: "stock_picking_state_index",
                table: "stock_picking",
                column: "state");

            migrationBuilder.CreateIndex(
                name: "stock_picking_backorder_rel_stock_picking_id_stock_backorde_idx",
                table: "stock_picking_backorder_rel",
                columns: new[] { "stock_picking_id", "stock_backorder_confirmation_id" });

            migrationBuilder.CreateIndex(
                name: "stock_picking_sms_rel_stock_picking_id_confirm_stock_sms_id_idx",
                table: "stock_picking_sms_rel",
                columns: new[] { "stock_picking_id", "confirm_stock_sms_id" });

            migrationBuilder.CreateIndex(
                name: "stock_picking_transfer_rel_stock_picking_id_stock_immediate_idx",
                table: "stock_picking_transfer_rel",
                columns: new[] { "stock_picking_id", "stock_immediate_transfer_id" });

            migrationBuilder.CreateIndex(
                name: "IX_stock_picking_type_create_uid",
                table: "stock_picking_type",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_picking_type_default_location_dest_id",
                table: "stock_picking_type",
                column: "default_location_dest_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_picking_type_default_location_src_id",
                table: "stock_picking_type",
                column: "default_location_src_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_picking_type_return_picking_type_id",
                table: "stock_picking_type",
                column: "return_picking_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_picking_type_sequence_id",
                table: "stock_picking_type",
                column: "sequence_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_picking_type_warehouse_id",
                table: "stock_picking_type",
                column: "warehouse_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_picking_type_write_uid",
                table: "stock_picking_type",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_picking_type_company_id_index",
                table: "stock_picking_type",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_putaway_rule_category_id",
                table: "stock_putaway_rule",
                column: "category_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_putaway_rule_create_uid",
                table: "stock_putaway_rule",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_putaway_rule_location_out_id",
                table: "stock_putaway_rule",
                column: "location_out_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_putaway_rule_product_id",
                table: "stock_putaway_rule",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_putaway_rule_storage_category_id",
                table: "stock_putaway_rule",
                column: "storage_category_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_putaway_rule_write_uid",
                table: "stock_putaway_rule",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_putaway_rule_company_id_index",
                table: "stock_putaway_rule",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "stock_putaway_rule_location_in_id_index",
                table: "stock_putaway_rule",
                column: "location_in_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_quant_company_id",
                table: "stock_quant",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_quant_create_uid",
                table: "stock_quant",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_quant_owner_id",
                table: "stock_quant",
                column: "owner_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_quant_storage_category_id",
                table: "stock_quant",
                column: "storage_category_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_quant_user_id",
                table: "stock_quant",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_quant_write_uid",
                table: "stock_quant",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_quant_location_id_index",
                table: "stock_quant",
                column: "location_id");

            migrationBuilder.CreateIndex(
                name: "stock_quant_lot_id_index",
                table: "stock_quant",
                column: "lot_id");

            migrationBuilder.CreateIndex(
                name: "stock_quant_package_id_index",
                table: "stock_quant",
                column: "package_id");

            migrationBuilder.CreateIndex(
                name: "stock_quant_product_id_index",
                table: "stock_quant",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_quant_package_create_uid",
                table: "stock_quant_package",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_quant_package_write_uid",
                table: "stock_quant_package",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_quant_package_company_id_index",
                table: "stock_quant_package",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "stock_quant_package_location_id_index",
                table: "stock_quant_package",
                column: "location_id");

            migrationBuilder.CreateIndex(
                name: "stock_quant_package_name_index",
                table: "stock_quant_package",
                column: "name")
                .Annotation("Npgsql:IndexMethod", "gin")
                .Annotation("Npgsql:IndexOperators", new[] { "gin_trgm_ops" });

            migrationBuilder.CreateIndex(
                name: "stock_quant_package_package_type_id_index",
                table: "stock_quant_package",
                column: "package_type_id");

            migrationBuilder.CreateIndex(
                name: "stock_quant_stock_request_cou_stock_quant_id_stock_request__idx",
                table: "stock_quant_stock_request_count_rel",
                columns: new[] { "stock_quant_id", "stock_request_count_id" });

            migrationBuilder.CreateIndex(
                name: "stock_quant_stock_track_confi_stock_quant_id_stock_track_co_idx",
                table: "stock_quant_stock_track_confirmation_rel",
                columns: new[] { "stock_quant_id", "stock_track_confirmation_id" });

            migrationBuilder.CreateIndex(
                name: "IX_stock_quantity_history_create_uid",
                table: "stock_quantity_history",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_quantity_history_write_uid",
                table: "stock_quantity_history",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_replenishment_info_create_uid",
                table: "stock_replenishment_info",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_replenishment_info_orderpoint_id",
                table: "stock_replenishment_info",
                column: "orderpoint_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_replenishment_info_write_uid",
                table: "stock_replenishment_info",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_replenishment_option_create_uid",
                table: "stock_replenishment_option",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_replenishment_option_product_id",
                table: "stock_replenishment_option",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_replenishment_option_replenishment_info_id",
                table: "stock_replenishment_option",
                column: "replenishment_info_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_replenishment_option_route_id",
                table: "stock_replenishment_option",
                column: "route_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_replenishment_option_write_uid",
                table: "stock_replenishment_option",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_request_count_create_uid",
                table: "stock_request_count",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_request_count_user_id",
                table: "stock_request_count",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_request_count_write_uid",
                table: "stock_request_count",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_return_picking_create_uid",
                table: "stock_return_picking",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_return_picking_location_id",
                table: "stock_return_picking",
                column: "location_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_return_picking_original_location_id",
                table: "stock_return_picking",
                column: "original_location_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_return_picking_parent_location_id",
                table: "stock_return_picking",
                column: "parent_location_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_return_picking_picking_id",
                table: "stock_return_picking",
                column: "picking_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_return_picking_write_uid",
                table: "stock_return_picking",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_return_picking_line_create_uid",
                table: "stock_return_picking_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_return_picking_line_move_id",
                table: "stock_return_picking_line",
                column: "move_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_return_picking_line_product_id",
                table: "stock_return_picking_line",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_return_picking_line_wizard_id",
                table: "stock_return_picking_line",
                column: "wizard_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_return_picking_line_write_uid",
                table: "stock_return_picking_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_route_create_uid",
                table: "stock_route",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_route_supplied_wh_id",
                table: "stock_route",
                column: "supplied_wh_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_route_supplier_wh_id",
                table: "stock_route",
                column: "supplier_wh_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_route_write_uid",
                table: "stock_route",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_route_company_id_index",
                table: "stock_route",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "stock_route_categ_categ_id_route_id_idx",
                table: "stock_route_categ",
                columns: new[] { "categ_id", "route_id" });

            migrationBuilder.CreateIndex(
                name: "stock_route_move_route_id_move_id_idx",
                table: "stock_route_move",
                columns: new[] { "route_id", "move_id" });

            migrationBuilder.CreateIndex(
                name: "stock_route_packaging_packaging_id_route_id_idx",
                table: "stock_route_packaging",
                columns: new[] { "packaging_id", "route_id" });

            migrationBuilder.CreateIndex(
                name: "stock_route_product_product_id_route_id_idx",
                table: "stock_route_product",
                columns: new[] { "product_id", "route_id" });

            migrationBuilder.CreateIndex(
                name: "stock_route_stock_rules_repor_stock_route_id_stock_rules_re_idx",
                table: "stock_route_stock_rules_report_rel",
                columns: new[] { "stock_route_id", "stock_rules_report_id" });

            migrationBuilder.CreateIndex(
                name: "stock_route_warehouse_warehouse_id_route_id_idx",
                table: "stock_route_warehouse",
                columns: new[] { "warehouse_id", "route_id" });

            migrationBuilder.CreateIndex(
                name: "IX_stock_rule_company_id",
                table: "stock_rule",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_rule_create_uid",
                table: "stock_rule",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_rule_group_id",
                table: "stock_rule",
                column: "group_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_rule_location_dest_id",
                table: "stock_rule",
                column: "location_dest_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_rule_location_src_id",
                table: "stock_rule",
                column: "location_src_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_rule_partner_address_id",
                table: "stock_rule",
                column: "partner_address_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_rule_picking_type_id",
                table: "stock_rule",
                column: "picking_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_rule_propagate_warehouse_id",
                table: "stock_rule",
                column: "propagate_warehouse_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_rule_route_id",
                table: "stock_rule",
                column: "route_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_rule_warehouse_id",
                table: "stock_rule",
                column: "warehouse_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_rule_write_uid",
                table: "stock_rule",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_rules_report_create_uid",
                table: "stock_rules_report",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_rules_report_product_id",
                table: "stock_rules_report",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_rules_report_product_tmpl_id",
                table: "stock_rules_report",
                column: "product_tmpl_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_rules_report_write_uid",
                table: "stock_rules_report",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_rules_report_stock_ware_stock_warehouse_id_stock_rule_idx",
                table: "stock_rules_report_stock_warehouse_rel",
                columns: new[] { "stock_warehouse_id", "stock_rules_report_id" });

            migrationBuilder.CreateIndex(
                name: "IX_stock_scheduler_compute_create_uid",
                table: "stock_scheduler_compute",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_scheduler_compute_write_uid",
                table: "stock_scheduler_compute",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_scrap_company_id",
                table: "stock_scrap",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_scrap_create_uid",
                table: "stock_scrap",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_scrap_location_id",
                table: "stock_scrap",
                column: "location_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_scrap_lot_id",
                table: "stock_scrap",
                column: "lot_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_scrap_message_main_attachment_id",
                table: "stock_scrap",
                column: "message_main_attachment_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_scrap_move_id",
                table: "stock_scrap",
                column: "move_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_scrap_owner_id",
                table: "stock_scrap",
                column: "owner_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_scrap_package_id",
                table: "stock_scrap",
                column: "package_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_scrap_picking_id",
                table: "stock_scrap",
                column: "picking_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_scrap_product_id",
                table: "stock_scrap",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_scrap_product_uom_id",
                table: "stock_scrap",
                column: "product_uom_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_scrap_production_id",
                table: "stock_scrap",
                column: "production_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_scrap_scrap_location_id",
                table: "stock_scrap",
                column: "scrap_location_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_scrap_workorder_id",
                table: "stock_scrap",
                column: "workorder_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_scrap_write_uid",
                table: "stock_scrap",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_storage_category_company_id",
                table: "stock_storage_category",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_storage_category_create_uid",
                table: "stock_storage_category",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_storage_category_write_uid",
                table: "stock_storage_category",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_storage_category_capacity_create_uid",
                table: "stock_storage_category_capacity",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_storage_category_capacity_write_uid",
                table: "stock_storage_category_capacity",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_storage_category_capacity_storage_category_id_index",
                table: "stock_storage_category_capacity",
                column: "storage_category_id");

            migrationBuilder.CreateIndex(
                name: "stock_storage_category_capacity_unique_package_type",
                table: "stock_storage_category_capacity",
                columns: new[] { "package_type_id", "storage_category_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "stock_storage_category_capacity_unique_product",
                table: "stock_storage_category_capacity",
                columns: new[] { "product_id", "storage_category_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_stock_traceability_report_create_uid",
                table: "stock_traceability_report",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_traceability_report_write_uid",
                table: "stock_traceability_report",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_track_confirmation_create_uid",
                table: "stock_track_confirmation",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_track_confirmation_write_uid",
                table: "stock_track_confirmation",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_track_line_create_uid",
                table: "stock_track_line",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_track_line_product_id",
                table: "stock_track_line",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_track_line_wizard_id",
                table: "stock_track_line",
                column: "wizard_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_track_line_write_uid",
                table: "stock_track_line",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_valuation_layer_account_move_id",
                table: "stock_valuation_layer",
                column: "account_move_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_valuation_layer_company_id",
                table: "stock_valuation_layer",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_valuation_layer_create_uid",
                table: "stock_valuation_layer",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_valuation_layer_stock_valuation_layer_id",
                table: "stock_valuation_layer",
                column: "stock_valuation_layer_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_valuation_layer_write_uid",
                table: "stock_valuation_layer",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_valuation_layer_account_move_line_id_index",
                table: "stock_valuation_layer",
                column: "account_move_line_id");

            migrationBuilder.CreateIndex(
                name: "stock_valuation_layer_index",
                table: "stock_valuation_layer",
                columns: new[] { "product_id", "remaining_qty", "stock_move_id", "company_id", "create_date" });

            migrationBuilder.CreateIndex(
                name: "stock_valuation_layer_stock_move_id_index",
                table: "stock_valuation_layer",
                column: "stock_move_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_valuation_layer_revaluation_account_id",
                table: "stock_valuation_layer_revaluation",
                column: "account_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_valuation_layer_revaluation_account_journal_id",
                table: "stock_valuation_layer_revaluation",
                column: "account_journal_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_valuation_layer_revaluation_company_id",
                table: "stock_valuation_layer_revaluation",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_valuation_layer_revaluation_create_uid",
                table: "stock_valuation_layer_revaluation",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_valuation_layer_revaluation_product_id",
                table: "stock_valuation_layer_revaluation",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_valuation_layer_revaluation_write_uid",
                table: "stock_valuation_layer_revaluation",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_buy_pull_id",
                table: "stock_warehouse",
                column: "buy_pull_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_company_id",
                table: "stock_warehouse",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_create_uid",
                table: "stock_warehouse",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_crossdock_route_id",
                table: "stock_warehouse",
                column: "crossdock_route_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_delivery_route_id",
                table: "stock_warehouse",
                column: "delivery_route_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_in_type_id",
                table: "stock_warehouse",
                column: "in_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_int_type_id",
                table: "stock_warehouse",
                column: "int_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_lot_stock_id",
                table: "stock_warehouse",
                column: "lot_stock_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_manu_type_id",
                table: "stock_warehouse",
                column: "manu_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_manufacture_mto_pull_id",
                table: "stock_warehouse",
                column: "manufacture_mto_pull_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_manufacture_pull_id",
                table: "stock_warehouse",
                column: "manufacture_pull_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_mto_pull_id",
                table: "stock_warehouse",
                column: "mto_pull_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_out_type_id",
                table: "stock_warehouse",
                column: "out_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_pack_type_id",
                table: "stock_warehouse",
                column: "pack_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_partner_id",
                table: "stock_warehouse",
                column: "partner_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_pbm_loc_id",
                table: "stock_warehouse",
                column: "pbm_loc_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_pbm_mto_pull_id",
                table: "stock_warehouse",
                column: "pbm_mto_pull_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_pbm_route_id",
                table: "stock_warehouse",
                column: "pbm_route_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_pbm_type_id",
                table: "stock_warehouse",
                column: "pbm_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_pick_type_id",
                table: "stock_warehouse",
                column: "pick_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_pos_type_id",
                table: "stock_warehouse",
                column: "pos_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_reception_route_id",
                table: "stock_warehouse",
                column: "reception_route_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_return_type_id",
                table: "stock_warehouse",
                column: "return_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_sam_loc_id",
                table: "stock_warehouse",
                column: "sam_loc_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_sam_rule_id",
                table: "stock_warehouse",
                column: "sam_rule_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_sam_type_id",
                table: "stock_warehouse",
                column: "sam_type_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_view_location_id",
                table: "stock_warehouse",
                column: "view_location_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_wh_input_stock_loc_id",
                table: "stock_warehouse",
                column: "wh_input_stock_loc_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_wh_output_stock_loc_id",
                table: "stock_warehouse",
                column: "wh_output_stock_loc_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_wh_pack_stock_loc_id",
                table: "stock_warehouse",
                column: "wh_pack_stock_loc_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_wh_qc_stock_loc_id",
                table: "stock_warehouse",
                column: "wh_qc_stock_loc_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_write_uid",
                table: "stock_warehouse",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_warehouse_warehouse_code_uniq",
                table: "stock_warehouse",
                columns: new[] { "code", "company_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "stock_warehouse_warehouse_name_uniq",
                table: "stock_warehouse",
                columns: new[] { "name", "company_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_orderpoint_bom_id",
                table: "stock_warehouse_orderpoint",
                column: "bom_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_orderpoint_create_uid",
                table: "stock_warehouse_orderpoint",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_orderpoint_group_id",
                table: "stock_warehouse_orderpoint",
                column: "group_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_orderpoint_product_category_id",
                table: "stock_warehouse_orderpoint",
                column: "product_category_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_orderpoint_route_id",
                table: "stock_warehouse_orderpoint",
                column: "route_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_orderpoint_supplier_id",
                table: "stock_warehouse_orderpoint",
                column: "supplier_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_orderpoint_vendor_id",
                table: "stock_warehouse_orderpoint",
                column: "vendor_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_orderpoint_warehouse_id",
                table: "stock_warehouse_orderpoint",
                column: "warehouse_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warehouse_orderpoint_write_uid",
                table: "stock_warehouse_orderpoint",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_warehouse_orderpoint_company_id_index",
                table: "stock_warehouse_orderpoint",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "stock_warehouse_orderpoint_location_id_index",
                table: "stock_warehouse_orderpoint",
                column: "location_id");

            migrationBuilder.CreateIndex(
                name: "stock_warehouse_orderpoint_product_location_check",
                table: "stock_warehouse_orderpoint",
                columns: new[] { "product_id", "location_id", "company_id" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_stock_warn_insufficient_qty_repair_create_uid",
                table: "stock_warn_insufficient_qty_repair",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warn_insufficient_qty_repair_location_id",
                table: "stock_warn_insufficient_qty_repair",
                column: "location_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warn_insufficient_qty_repair_product_id",
                table: "stock_warn_insufficient_qty_repair",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warn_insufficient_qty_repair_repair_id",
                table: "stock_warn_insufficient_qty_repair",
                column: "repair_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warn_insufficient_qty_repair_write_uid",
                table: "stock_warn_insufficient_qty_repair",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warn_insufficient_qty_scrap_create_uid",
                table: "stock_warn_insufficient_qty_scrap",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warn_insufficient_qty_scrap_location_id",
                table: "stock_warn_insufficient_qty_scrap",
                column: "location_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warn_insufficient_qty_scrap_product_id",
                table: "stock_warn_insufficient_qty_scrap",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warn_insufficient_qty_scrap_scrap_id",
                table: "stock_warn_insufficient_qty_scrap",
                column: "scrap_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warn_insufficient_qty_scrap_write_uid",
                table: "stock_warn_insufficient_qty_scrap",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warn_insufficient_qty_unbuild_create_uid",
                table: "stock_warn_insufficient_qty_unbuild",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warn_insufficient_qty_unbuild_location_id",
                table: "stock_warn_insufficient_qty_unbuild",
                column: "location_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warn_insufficient_qty_unbuild_product_id",
                table: "stock_warn_insufficient_qty_unbuild",
                column: "product_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warn_insufficient_qty_unbuild_unbuild_id",
                table: "stock_warn_insufficient_qty_unbuild",
                column: "unbuild_id");

            migrationBuilder.CreateIndex(
                name: "IX_stock_warn_insufficient_qty_unbuild_write_uid",
                table: "stock_warn_insufficient_qty_unbuild",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "stock_wh_resupply_table_supplier_wh_id_supplied_wh_id_idx",
                table: "stock_wh_resupply_table",
                columns: new[] { "supplier_wh_id", "supplied_wh_id" });

            migrationBuilder.CreateIndex(
                name: "summary_emp_rel_emp_id_sum_id_idx",
                table: "summary_emp_rel",
                columns: new[] { "emp_id", "sum_id" });

            migrationBuilder.CreateIndex(
                name: "task_dependencies_rel_depends_on_id_task_id_idx",
                table: "task_dependencies_rel",
                columns: new[] { "depends_on_id", "task_id" });

            migrationBuilder.CreateIndex(
                name: "team_favorite_user_rel_user_id_team_id_idx",
                table: "team_favorite_user_rel",
                columns: new[] { "user_id", "team_id" });

            migrationBuilder.CreateIndex(
                name: "IX_theme_ir_asset_create_uid",
                table: "theme_ir_asset",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_theme_ir_asset_write_uid",
                table: "theme_ir_asset",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_theme_ir_attachment_create_uid",
                table: "theme_ir_attachment",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_theme_ir_attachment_write_uid",
                table: "theme_ir_attachment",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_theme_ir_ui_view_create_uid",
                table: "theme_ir_ui_view",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_theme_ir_ui_view_write_uid",
                table: "theme_ir_ui_view",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_theme_website_menu_create_uid",
                table: "theme_website_menu",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_theme_website_menu_page_id",
                table: "theme_website_menu",
                column: "page_id");

            migrationBuilder.CreateIndex(
                name: "IX_theme_website_menu_write_uid",
                table: "theme_website_menu",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "theme_website_menu_parent_id_index",
                table: "theme_website_menu",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "IX_theme_website_page_create_uid",
                table: "theme_website_page",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_theme_website_page_view_id",
                table: "theme_website_page",
                column: "view_id");

            migrationBuilder.CreateIndex(
                name: "IX_theme_website_page_write_uid",
                table: "theme_website_page",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_uom_category_create_uid",
                table: "uom_category",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_uom_category_write_uid",
                table: "uom_category",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_uom_uom_category_id",
                table: "uom_uom",
                column: "category_id");

            migrationBuilder.CreateIndex(
                name: "IX_uom_uom_create_uid",
                table: "uom_uom",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_uom_uom_write_uid",
                table: "uom_uom",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_utm_campaign_company_id",
                table: "utm_campaign",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_utm_campaign_create_uid",
                table: "utm_campaign",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_utm_campaign_stage_id",
                table: "utm_campaign",
                column: "stage_id");

            migrationBuilder.CreateIndex(
                name: "IX_utm_campaign_user_id",
                table: "utm_campaign",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_utm_campaign_write_uid",
                table: "utm_campaign",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "utm_campaign_unique_name",
                table: "utm_campaign",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_utm_medium_create_uid",
                table: "utm_medium",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_utm_medium_write_uid",
                table: "utm_medium",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "utm_medium_unique_name",
                table: "utm_medium",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_utm_source_create_uid",
                table: "utm_source",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_utm_source_write_uid",
                table: "utm_source",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "utm_source_unique_name",
                table: "utm_source",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_utm_stage_create_uid",
                table: "utm_stage",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_utm_stage_write_uid",
                table: "utm_stage",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_utm_tag_create_uid",
                table: "utm_tag",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_utm_tag_write_uid",
                table: "utm_tag",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "utm_tag_name_uniq",
                table: "utm_tag",
                column: "name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "utm_tag_rel_campaign_id_tag_id_idx",
                table: "utm_tag_rel",
                columns: new[] { "campaign_id", "tag_id" });

            migrationBuilder.CreateIndex(
                name: "IX_validate_account_move_create_uid",
                table: "validate_account_move",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_validate_account_move_write_uid",
                table: "validate_account_move",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_web_editor_converter_test_create_uid",
                table: "web_editor_converter_test",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_web_editor_converter_test_many2one",
                table: "web_editor_converter_test",
                column: "many2one");

            migrationBuilder.CreateIndex(
                name: "IX_web_editor_converter_test_write_uid",
                table: "web_editor_converter_test",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_web_editor_converter_test_sub_create_uid",
                table: "web_editor_converter_test_sub",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_web_editor_converter_test_sub_write_uid",
                table: "web_editor_converter_test_sub",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_web_tour_tour_user_id",
                table: "web_tour_tour",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_cart_recovery_mail_template_id",
                table: "website",
                column: "cart_recovery_mail_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_company_id",
                table: "website",
                column: "company_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_create_uid",
                table: "website",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_website_crm_default_team_id",
                table: "website",
                column: "crm_default_team_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_crm_default_user_id",
                table: "website",
                column: "crm_default_user_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_default_lang_id",
                table: "website",
                column: "default_lang_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_salesperson_id",
                table: "website",
                column: "salesperson_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_salesteam_id",
                table: "website",
                column: "salesteam_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_theme_id",
                table: "website",
                column: "theme_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_user_id",
                table: "website",
                column: "user_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_warehouse_id",
                table: "website",
                column: "warehouse_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_write_uid",
                table: "website",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "website_domain_unique",
                table: "website",
                column: "domain",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_website_base_unit_create_uid",
                table: "website_base_unit",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_website_base_unit_write_uid",
                table: "website_base_unit",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_website_configurator_feature_create_uid",
                table: "website_configurator_feature",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_website_configurator_feature_module_id",
                table: "website_configurator_feature",
                column: "module_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_configurator_feature_page_view_id",
                table: "website_configurator_feature",
                column: "page_view_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_configurator_feature_write_uid",
                table: "website_configurator_feature",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "website_lang_rel_lang_id_website_id_idx",
                table: "website_lang_rel",
                columns: new[] { "lang_id", "website_id" });

            migrationBuilder.CreateIndex(
                name: "IX_website_menu_create_uid",
                table: "website_menu",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_website_menu_page_id",
                table: "website_menu",
                column: "page_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_menu_theme_template_id",
                table: "website_menu",
                column: "theme_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_menu_website_id",
                table: "website_menu",
                column: "website_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_menu_write_uid",
                table: "website_menu",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "website_menu_parent_id_index",
                table: "website_menu",
                column: "parent_id");

            migrationBuilder.CreateIndex(
                name: "website_menu_parent_path_index",
                table: "website_menu",
                column: "parent_path");

            migrationBuilder.CreateIndex(
                name: "IX_website_page_create_uid",
                table: "website_page",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_website_page_theme_template_id",
                table: "website_page",
                column: "theme_template_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_page_view_id",
                table: "website_page",
                column: "view_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_page_write_uid",
                table: "website_page",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "website_page_is_published_index",
                table: "website_page",
                column: "is_published");

            migrationBuilder.CreateIndex(
                name: "website_page_website_id_index",
                table: "website_page",
                column: "website_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_rewrite_create_uid",
                table: "website_rewrite",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_website_rewrite_route_id",
                table: "website_rewrite",
                column: "route_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_rewrite_write_uid",
                table: "website_rewrite",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "website_rewrite_url_from_index",
                table: "website_rewrite",
                column: "url_from");

            migrationBuilder.CreateIndex(
                name: "website_rewrite_website_id_index",
                table: "website_rewrite",
                column: "website_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_robots_create_uid",
                table: "website_robots",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_website_robots_write_uid",
                table: "website_robots",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_website_route_create_uid",
                table: "website_route",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_website_route_write_uid",
                table: "website_route",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_website_sale_extra_field_create_uid",
                table: "website_sale_extra_field",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_website_sale_extra_field_field_id",
                table: "website_sale_extra_field",
                column: "field_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_sale_extra_field_website_id",
                table: "website_sale_extra_field",
                column: "website_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_sale_extra_field_write_uid",
                table: "website_sale_extra_field",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "IX_website_snippet_filter_action_server_id",
                table: "website_snippet_filter",
                column: "action_server_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_snippet_filter_create_uid",
                table: "website_snippet_filter",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_website_snippet_filter_filter_id",
                table: "website_snippet_filter",
                column: "filter_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_snippet_filter_write_uid",
                table: "website_snippet_filter",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "website_snippet_filter_is_published_index",
                table: "website_snippet_filter",
                column: "is_published");

            migrationBuilder.CreateIndex(
                name: "website_snippet_filter_website_id_index",
                table: "website_snippet_filter",
                column: "website_id");

            migrationBuilder.CreateIndex(
                name: "website_track_page_id_index",
                table: "website_track",
                column: "page_id");

            migrationBuilder.CreateIndex(
                name: "website_track_product_id_index",
                table: "website_track",
                column: "product_id",
                filter: "(product_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "website_track_url_index",
                table: "website_track",
                column: "url");

            migrationBuilder.CreateIndex(
                name: "website_track_visitor_id_index",
                table: "website_track",
                column: "visitor_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_visitor_country_id",
                table: "website_visitor",
                column: "country_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_visitor_create_uid",
                table: "website_visitor",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_website_visitor_lang_id",
                table: "website_visitor",
                column: "lang_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_visitor_website_id",
                table: "website_visitor",
                column: "website_id");

            migrationBuilder.CreateIndex(
                name: "IX_website_visitor_write_uid",
                table: "website_visitor",
                column: "write_uid");

            migrationBuilder.CreateIndex(
                name: "website_visitor_access_token_unique",
                table: "website_visitor",
                column: "access_token",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "website_visitor_partner_id_index",
                table: "website_visitor",
                column: "partner_id",
                filter: "(partner_id IS NOT NULL)");

            migrationBuilder.CreateIndex(
                name: "IX_wizard_ir_model_menu_create_create_uid",
                table: "wizard_ir_model_menu_create",
                column: "create_uid");

            migrationBuilder.CreateIndex(
                name: "IX_wizard_ir_model_menu_create_menu_id",
                table: "wizard_ir_model_menu_create",
                column: "menu_id");

            migrationBuilder.CreateIndex(
                name: "IX_wizard_ir_model_menu_create_write_uid",
                table: "wizard_ir_model_menu_create",
                column: "write_uid");

            migrationBuilder.AddForeignKey(
                name: "account_account_company_id_fkey",
                table: "account_account",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_account_create_uid_fkey",
                table: "account_account",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_account_write_uid_fkey",
                table: "account_account",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_account_currency_id_fkey",
                table: "account_account",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_account_group_id_fkey",
                table: "account_account",
                column: "group_id",
                principalTable: "account_group",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_account_message_main_attachment_id_fkey",
                table: "account_account",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_account_account_balance__account_balance_report_id_fkey",
                table: "account_account_account_balance_report_rel",
                column: "account_balance_report_id",
                principalTable: "account_balance_report",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_account_account_commo_account_common_account_repor_fkey",
                table: "account_account_account_common_account_report_rel",
                column: "account_common_account_report_id",
                principalTable: "account_common_account_report",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_account_account_journal_rel_account_journal_id_fkey",
                table: "account_account_account_journal_rel",
                column: "account_journal_id",
                principalTable: "account_journal",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_account_account_repor_account_report_general_ledge_fkey",
                table: "account_account_account_report_general_ledger_rel",
                column: "account_report_general_ledger_id",
                principalTable: "account_report_general_ledger",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_account_account_tag_account_account_tag_id_fkey",
                table: "account_account_account_tag",
                column: "account_account_tag_id",
                principalTable: "account_account_tag",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_account_bankbook_report_report_line_id_fkey",
                table: "account_account_bankbook_report",
                column: "report_line_id",
                principalTable: "account_bankbook_report",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_account_cashbook_report_report_line_id_fkey",
                table: "account_account_cashbook_report",
                column: "report_line_id",
                principalTable: "account_cashbook_report",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_account_daybook_report_report_line_id_fkey",
                table: "account_account_daybook_report",
                column: "report_line_id",
                principalTable: "account_daybook_report",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_account_financial_report_report_line_id_fkey",
                table: "account_account_financial_report",
                column: "report_line_id",
                principalTable: "account_financial_report",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_account_financial_report_type_account_type_id_fkey",
                table: "account_account_financial_report_type",
                column: "account_type_id",
                principalTable: "account_account_type",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_account_financial_report_type_report_id_fkey",
                table: "account_account_financial_report_type",
                column: "report_id",
                principalTable: "account_financial_report",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_account_tag_country_id_fkey",
                table: "account_account_tag",
                column: "country_id",
                principalTable: "res_country",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_account_tag_create_uid_fkey",
                table: "account_account_tag",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_account_tag_write_uid_fkey",
                table: "account_account_tag",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_account_tag_account_move_line_account_move_line_id_fkey",
                table: "account_account_tag_account_move_line_rel",
                column: "account_move_line_id",
                principalTable: "account_move_line",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_account_tag_account_t_account_tax_repartition_line_fkey",
                table: "account_account_tag_account_tax_repartition_line_rel",
                column: "account_tax_repartition_line_id",
                principalTable: "account_tax_repartition_line",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_account_tag_product_template_r_product_template_id_fkey",
                table: "account_account_tag_product_template_rel",
                column: "product_template_id",
                principalTable: "product_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_account_tax_default_rel_tax_id_fkey",
                table: "account_account_tax_default_rel",
                column: "tax_id",
                principalTable: "account_tax",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_account_template_chart_template_id_fkey",
                table: "account_account_template",
                column: "chart_template_id",
                principalTable: "account_chart_template",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_account_template_create_uid_fkey",
                table: "account_account_template",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_account_template_write_uid_fkey",
                table: "account_account_template",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_account_template_currency_id_fkey",
                table: "account_account_template",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_account_template_message_main_attachment_id_fkey",
                table: "account_account_template",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_account_template_tax_rel_tax_id_fkey",
                table: "account_account_template_tax_rel",
                column: "tax_id",
                principalTable: "account_tax_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_account_type_create_uid_fkey",
                table: "account_account_type",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_account_type_write_uid_fkey",
                table: "account_account_type",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_accrued_orders_wizard_company_id_fkey",
                table: "account_accrued_orders_wizard",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_accrued_orders_wizard_create_uid_fkey",
                table: "account_accrued_orders_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_accrued_orders_wizard_write_uid_fkey",
                table: "account_accrued_orders_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_accrued_orders_wizard_currency_id_fkey",
                table: "account_accrued_orders_wizard",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_aged_trial_balance_company_id_fkey",
                table: "account_aged_trial_balance",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_aged_trial_balance_create_uid_fkey",
                table: "account_aged_trial_balance",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_aged_trial_balance_write_uid_fkey",
                table: "account_aged_trial_balance",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_aged_trial_balance_account_jour_account_journal_id_fkey",
                table: "account_aged_trial_balance_account_journal_rel",
                column: "account_journal_id",
                principalTable: "account_journal",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_aged_trial_balance_res_partner_rel_res_partner_id_fkey",
                table: "account_aged_trial_balance_res_partner_rel",
                column: "res_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_account_company_id_fkey",
                table: "account_analytic_account",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_account_create_uid_fkey",
                table: "account_analytic_account",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_account_write_uid_fkey",
                table: "account_analytic_account",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_account_message_main_attachment_id_fkey",
                table: "account_analytic_account",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_account_partner_id_fkey",
                table: "account_analytic_account",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_account_plan_id_fkey",
                table: "account_analytic_account",
                column: "plan_id",
                principalTable: "account_analytic_plan",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_account_root_plan_id_fkey",
                table: "account_analytic_account",
                column: "root_plan_id",
                principalTable: "account_analytic_plan",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_account_acco_account_common_account_repor_fkey",
                table: "account_analytic_account_account_common_account_report_rel",
                column: "account_common_account_report_id",
                principalTable: "account_common_account_report",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_account_acco_account_report_general_ledge_fkey",
                table: "account_analytic_account_account_report_general_ledger_rel",
                column: "account_report_general_ledger_id",
                principalTable: "account_report_general_ledger",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_applicability_analytic_plan_id_fkey",
                table: "account_analytic_applicability",
                column: "analytic_plan_id",
                principalTable: "account_analytic_plan",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_applicability_create_uid_fkey",
                table: "account_analytic_applicability",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_applicability_write_uid_fkey",
                table: "account_analytic_applicability",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_applicability_product_categ_id_fkey",
                table: "account_analytic_applicability",
                column: "product_categ_id",
                principalTable: "product_category",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_distribution_model_company_id_fkey",
                table: "account_analytic_distribution_model",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_distribution_model_create_uid_fkey",
                table: "account_analytic_distribution_model",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_distribution_model_write_uid_fkey",
                table: "account_analytic_distribution_model",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_distribution_model_partner_category_id_fkey",
                table: "account_analytic_distribution_model",
                column: "partner_category_id",
                principalTable: "res_partner_category",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_distribution_model_partner_id_fkey",
                table: "account_analytic_distribution_model",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_distribution_model_product_categ_id_fkey",
                table: "account_analytic_distribution_model",
                column: "product_categ_id",
                principalTable: "product_category",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_distribution_model_product_id_fkey",
                table: "account_analytic_distribution_model",
                column: "product_id",
                principalTable: "product_product",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_line_company_id_fkey",
                table: "account_analytic_line",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_line_create_uid_fkey",
                table: "account_analytic_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_line_user_id_fkey",
                table: "account_analytic_line",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_line_write_uid_fkey",
                table: "account_analytic_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_line_currency_id_fkey",
                table: "account_analytic_line",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_line_journal_id_fkey",
                table: "account_analytic_line",
                column: "journal_id",
                principalTable: "account_journal",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_line_move_line_id_fkey",
                table: "account_analytic_line",
                column: "move_line_id",
                principalTable: "account_move_line",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_line_partner_id_fkey",
                table: "account_analytic_line",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_line_plan_id_fkey",
                table: "account_analytic_line",
                column: "plan_id",
                principalTable: "account_analytic_plan",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_line_product_id_fkey",
                table: "account_analytic_line",
                column: "product_id",
                principalTable: "product_product",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_line_product_uom_id_fkey",
                table: "account_analytic_line",
                column: "product_uom_id",
                principalTable: "uom_uom",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_line_so_line_fkey",
                table: "account_analytic_line",
                column: "so_line",
                principalTable: "sale_order_line",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_plan_company_id_fkey",
                table: "account_analytic_plan",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_plan_create_uid_fkey",
                table: "account_analytic_plan",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_analytic_plan_write_uid_fkey",
                table: "account_analytic_plan",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_asset_asset_category_id_fkey",
                table: "account_asset_asset",
                column: "category_id",
                principalTable: "account_asset_category",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_asset_asset_company_id_fkey",
                table: "account_asset_asset",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_asset_asset_create_uid_fkey",
                table: "account_asset_asset",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_asset_asset_write_uid_fkey",
                table: "account_asset_asset",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_asset_asset_currency_id_fkey",
                table: "account_asset_asset",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_asset_asset_invoice_id_fkey",
                table: "account_asset_asset",
                column: "invoice_id",
                principalTable: "account_move",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_asset_asset_message_main_attachment_id_fkey",
                table: "account_asset_asset",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_asset_asset_partner_id_fkey",
                table: "account_asset_asset",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_asset_category_company_id_fkey",
                table: "account_asset_category",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_asset_category_create_uid_fkey",
                table: "account_asset_category",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_asset_category_write_uid_fkey",
                table: "account_asset_category",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_asset_category_journal_id_fkey",
                table: "account_asset_category",
                column: "journal_id",
                principalTable: "account_journal",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_asset_category_message_main_attachment_id_fkey",
                table: "account_asset_category",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_asset_depreciation_line_create_uid_fkey",
                table: "account_asset_depreciation_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_asset_depreciation_line_write_uid_fkey",
                table: "account_asset_depreciation_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_asset_depreciation_line_move_id_fkey",
                table: "account_asset_depreciation_line",
                column: "move_id",
                principalTable: "account_move",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_automatic_entry_wizard_company_id_fkey",
                table: "account_automatic_entry_wizard",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_automatic_entry_wizard_create_uid_fkey",
                table: "account_automatic_entry_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_automatic_entry_wizard_write_uid_fkey",
                table: "account_automatic_entry_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_automatic_entry_wizard_accoun_account_move_line_id_fkey",
                table: "account_automatic_entry_wizard_account_move_line_rel",
                column: "account_move_line_id",
                principalTable: "account_move_line",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_balance_report_company_id_fkey",
                table: "account_balance_report",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_balance_report_create_uid_fkey",
                table: "account_balance_report",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_balance_report_write_uid_fkey",
                table: "account_balance_report",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_balance_report_journal_rel_journal_id_fkey",
                table: "account_balance_report_journal_rel",
                column: "journal_id",
                principalTable: "account_journal",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_balance_report_res_partner_rel_res_partner_id_fkey",
                table: "account_balance_report_res_partner_rel",
                column: "res_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_bank_statement_company_id_fkey",
                table: "account_bank_statement",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_bank_statement_create_uid_fkey",
                table: "account_bank_statement",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_bank_statement_write_uid_fkey",
                table: "account_bank_statement",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_bank_statement_journal_id_fkey",
                table: "account_bank_statement",
                column: "journal_id",
                principalTable: "account_journal",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_bank_statement_import_create_uid_fkey",
                table: "account_bank_statement_import",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_bank_statement_import_write_uid_fkey",
                table: "account_bank_statement_import",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_bank_statement_import_ir_attachme_ir_attachment_id_fkey",
                table: "account_bank_statement_import_ir_attachment_rel",
                column: "ir_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_bank_statement_import_journal_creation_create_uid_fkey",
                table: "account_bank_statement_import_journal_creation",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_bank_statement_import_journal_creation_write_uid_fkey",
                table: "account_bank_statement_import_journal_creation",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_bank_statement_import_journal_creation_journal_id_fkey",
                table: "account_bank_statement_import_journal_creation",
                column: "journal_id",
                principalTable: "account_journal",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_bank_statement_ir_attachment_rel_ir_attachment_id_fkey",
                table: "account_bank_statement_ir_attachment_rel",
                column: "ir_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_bank_statement_line_create_uid_fkey",
                table: "account_bank_statement_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_bank_statement_line_write_uid_fkey",
                table: "account_bank_statement_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_bank_statement_line_currency_id_fkey",
                table: "account_bank_statement_line",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_bank_statement_line_foreign_currency_id_fkey",
                table: "account_bank_statement_line",
                column: "foreign_currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_bank_statement_line_move_id_fkey",
                table: "account_bank_statement_line",
                column: "move_id",
                principalTable: "account_move",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_bank_statement_line_partner_id_fkey",
                table: "account_bank_statement_line",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_bank_statement_line_pos_session_id_fkey",
                table: "account_bank_statement_line",
                column: "pos_session_id",
                principalTable: "pos_session",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_bankbook_report_create_uid_fkey",
                table: "account_bankbook_report",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_bankbook_report_write_uid_fkey",
                table: "account_bankbook_report",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_bankbook_report_account_journal_account_journal_id_fkey",
                table: "account_bankbook_report_account_journal_rel",
                column: "account_journal_id",
                principalTable: "account_journal",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_budget_post_company_id_fkey",
                table: "account_budget_post",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_budget_post_create_uid_fkey",
                table: "account_budget_post",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_budget_post_write_uid_fkey",
                table: "account_budget_post",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_cash_rounding_create_uid_fkey",
                table: "account_cash_rounding",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_cash_rounding_write_uid_fkey",
                table: "account_cash_rounding",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_cashbook_report_create_uid_fkey",
                table: "account_cashbook_report",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_cashbook_report_write_uid_fkey",
                table: "account_cashbook_report",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_cashbook_report_account_journal_account_journal_id_fkey",
                table: "account_cashbook_report_account_journal_rel",
                column: "account_journal_id",
                principalTable: "account_journal",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_chart_template_country_id_fkey",
                table: "account_chart_template",
                column: "country_id",
                principalTable: "res_country",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_chart_template_create_uid_fkey",
                table: "account_chart_template",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_chart_template_write_uid_fkey",
                table: "account_chart_template",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_chart_template_currency_id_fkey",
                table: "account_chart_template",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_common_account_report_company_id_fkey",
                table: "account_common_account_report",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_common_account_report_create_uid_fkey",
                table: "account_common_account_report",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_common_account_report_write_uid_fkey",
                table: "account_common_account_report",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_common_account_report_account_j_account_journal_id_fkey",
                table: "account_common_account_report_account_journal_rel",
                column: "account_journal_id",
                principalTable: "account_journal",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_common_account_report_res_partner_r_res_partner_id_fkey",
                table: "account_common_account_report_res_partner_rel",
                column: "res_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_common_journal_report_company_id_fkey",
                table: "account_common_journal_report",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_common_journal_report_create_uid_fkey",
                table: "account_common_journal_report",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_common_journal_report_write_uid_fkey",
                table: "account_common_journal_report",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_common_journal_report_account_j_account_journal_id_fkey",
                table: "account_common_journal_report_account_journal_rel",
                column: "account_journal_id",
                principalTable: "account_journal",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_common_partner_report_company_id_fkey",
                table: "account_common_partner_report",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_common_partner_report_create_uid_fkey",
                table: "account_common_partner_report",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_common_partner_report_write_uid_fkey",
                table: "account_common_partner_report",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_common_partner_report_account_j_account_journal_id_fkey",
                table: "account_common_partner_report_account_journal_rel",
                column: "account_journal_id",
                principalTable: "account_journal",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_common_partner_report_res_partner_r_res_partner_id_fkey",
                table: "account_common_partner_report_res_partner_rel",
                column: "res_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_common_report_company_id_fkey",
                table: "account_common_report",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_common_report_create_uid_fkey",
                table: "account_common_report",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_common_report_write_uid_fkey",
                table: "account_common_report",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_common_report_account_journal_r_account_journal_id_fkey",
                table: "account_common_report_account_journal_rel",
                column: "account_journal_id",
                principalTable: "account_journal",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_daybook_report_create_uid_fkey",
                table: "account_daybook_report",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_daybook_report_write_uid_fkey",
                table: "account_daybook_report",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_daybook_report_account_journal__account_journal_id_fkey",
                table: "account_daybook_report_account_journal_rel",
                column: "account_journal_id",
                principalTable: "account_journal",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_edi_document_attachment_id_fkey",
                table: "account_edi_document",
                column: "attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_edi_document_create_uid_fkey",
                table: "account_edi_document",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_edi_document_write_uid_fkey",
                table: "account_edi_document",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_edi_document_edi_format_id_fkey",
                table: "account_edi_document",
                column: "edi_format_id",
                principalTable: "account_edi_format",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_edi_document_move_id_fkey",
                table: "account_edi_document",
                column: "move_id",
                principalTable: "account_move",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_edi_format_create_uid_fkey",
                table: "account_edi_format",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_edi_format_write_uid_fkey",
                table: "account_edi_format",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_edi_format_account_journal_rel_account_journal_id_fkey",
                table: "account_edi_format_account_journal_rel",
                column: "account_journal_id",
                principalTable: "account_journal",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_financial_report_create_uid_fkey",
                table: "account_financial_report",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_financial_report_write_uid_fkey",
                table: "account_financial_report",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_financial_year_op_company_id_fkey",
                table: "account_financial_year_op",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_financial_year_op_create_uid_fkey",
                table: "account_financial_year_op",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_financial_year_op_write_uid_fkey",
                table: "account_financial_year_op",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_company_id_fkey",
                table: "account_fiscal_position",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_country_group_id_fkey",
                table: "account_fiscal_position",
                column: "country_group_id",
                principalTable: "res_country_group",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_country_id_fkey",
                table: "account_fiscal_position",
                column: "country_id",
                principalTable: "res_country",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_create_uid_fkey",
                table: "account_fiscal_position",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_write_uid_fkey",
                table: "account_fiscal_position",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_account_company_id_fkey",
                table: "account_fiscal_position_account",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_account_create_uid_fkey",
                table: "account_fiscal_position_account",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_account_write_uid_fkey",
                table: "account_fiscal_position_account",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_account_template_create_uid_fkey",
                table: "account_fiscal_position_account_template",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_account_template_write_uid_fkey",
                table: "account_fiscal_position_account_template",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_account_template_position_id_fkey",
                table: "account_fiscal_position_account_template",
                column: "position_id",
                principalTable: "account_fiscal_position_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_pos_config_rel_pos_config_id_fkey",
                table: "account_fiscal_position_pos_config_rel",
                column: "pos_config_id",
                principalTable: "pos_config",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_res_config__res_config_settings_id_fkey",
                table: "account_fiscal_position_res_config_settings_rel",
                column: "res_config_settings_id",
                principalTable: "res_config_settings",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_res_country_s_res_country_state_id_fkey",
                table: "account_fiscal_position_res_country_state_rel",
                column: "res_country_state_id",
                principalTable: "res_country_state",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_tax_company_id_fkey",
                table: "account_fiscal_position_tax",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_tax_create_uid_fkey",
                table: "account_fiscal_position_tax",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_tax_write_uid_fkey",
                table: "account_fiscal_position_tax",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_tax_tax_dest_id_fkey",
                table: "account_fiscal_position_tax",
                column: "tax_dest_id",
                principalTable: "account_tax",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_tax_tax_src_id_fkey",
                table: "account_fiscal_position_tax",
                column: "tax_src_id",
                principalTable: "account_tax",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_tax_template_create_uid_fkey",
                table: "account_fiscal_position_tax_template",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_tax_template_write_uid_fkey",
                table: "account_fiscal_position_tax_template",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_tax_template_position_id_fkey",
                table: "account_fiscal_position_tax_template",
                column: "position_id",
                principalTable: "account_fiscal_position_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_tax_template_tax_dest_id_fkey",
                table: "account_fiscal_position_tax_template",
                column: "tax_dest_id",
                principalTable: "account_tax_template",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_tax_template_tax_src_id_fkey",
                table: "account_fiscal_position_tax_template",
                column: "tax_src_id",
                principalTable: "account_tax_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_template_country_group_id_fkey",
                table: "account_fiscal_position_template",
                column: "country_group_id",
                principalTable: "res_country_group",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_template_country_id_fkey",
                table: "account_fiscal_position_template",
                column: "country_id",
                principalTable: "res_country",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_template_create_uid_fkey",
                table: "account_fiscal_position_template",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_template_write_uid_fkey",
                table: "account_fiscal_position_template",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_position_template_res__res_country_state_id_fkey",
                table: "account_fiscal_position_template_res_country_state_rel",
                column: "res_country_state_id",
                principalTable: "res_country_state",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_year_company_id_fkey",
                table: "account_fiscal_year",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_year_create_uid_fkey",
                table: "account_fiscal_year",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_fiscal_year_write_uid_fkey",
                table: "account_fiscal_year",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_full_reconcile_create_uid_fkey",
                table: "account_full_reconcile",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_full_reconcile_write_uid_fkey",
                table: "account_full_reconcile",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_full_reconcile_exchange_move_id_fkey",
                table: "account_full_reconcile",
                column: "exchange_move_id",
                principalTable: "account_move",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_group_company_id_fkey",
                table: "account_group",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_group_create_uid_fkey",
                table: "account_group",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_group_write_uid_fkey",
                table: "account_group",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_group_template_create_uid_fkey",
                table: "account_group_template",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_group_template_write_uid_fkey",
                table: "account_group_template",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_incoterms_create_uid_fkey",
                table: "account_incoterms",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_incoterms_write_uid_fkey",
                table: "account_incoterms",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_invoice_send_composer_id_fkey",
                table: "account_invoice_send",
                column: "composer_id",
                principalTable: "mail_compose_message",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_invoice_send_create_uid_fkey",
                table: "account_invoice_send",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_invoice_send_write_uid_fkey",
                table: "account_invoice_send",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_invoice_send_template_id_fkey",
                table: "account_invoice_send",
                column: "template_id",
                principalTable: "mail_template",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_invoice_transaction_rel_invoice_id_fkey",
                table: "account_invoice_transaction_rel",
                column: "invoice_id",
                principalTable: "account_move",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_invoice_transaction_rel_transaction_id_fkey",
                table: "account_invoice_transaction_rel",
                column: "transaction_id",
                principalTable: "payment_transaction",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_journal_alias_id_fkey",
                table: "account_journal",
                column: "alias_id",
                principalTable: "mail_alias",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_journal_bank_account_id_fkey",
                table: "account_journal",
                column: "bank_account_id",
                principalTable: "res_partner_bank",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_journal_company_id_fkey",
                table: "account_journal",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_journal_create_uid_fkey",
                table: "account_journal",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_journal_sale_activity_user_id_fkey",
                table: "account_journal",
                column: "sale_activity_user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_journal_write_uid_fkey",
                table: "account_journal",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_journal_currency_id_fkey",
                table: "account_journal",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_journal_message_main_attachment_id_fkey",
                table: "account_journal",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_journal_sale_activity_type_id_fkey",
                table: "account_journal",
                column: "sale_activity_type_id",
                principalTable: "mail_activity_type",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_journal_secure_sequence_id_fkey",
                table: "account_journal",
                column: "secure_sequence_id",
                principalTable: "ir_sequence",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_journal_account_journal_g_account_journal_group_id_fkey",
                table: "account_journal_account_journal_group_rel",
                column: "account_journal_group_id",
                principalTable: "account_journal_group",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_journal_account_print_jou_account_print_journal_id_fkey",
                table: "account_journal_account_print_journal_rel",
                column: "account_print_journal_id",
                principalTable: "account_print_journal",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_journal_account_reconci_account_reconcile_model_id_fkey",
                table: "account_journal_account_reconcile_model_rel",
                column: "account_reconcile_model_id",
                principalTable: "account_reconcile_model",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_journal_account_recon_account_reconcile_model_temp_fkey",
                table: "account_journal_account_reconcile_model_template_rel",
                column: "account_reconcile_model_template_id",
                principalTable: "account_reconcile_model_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_journal_account_repor_account_report_partner_ledge_fkey",
                table: "account_journal_account_report_partner_ledger_rel",
                column: "account_report_partner_ledger_id",
                principalTable: "account_report_partner_ledger",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_journal_account_tax_r_account_tax_report_wizard_id_fkey",
                table: "account_journal_account_tax_report_wizard_rel",
                column: "account_tax_report_wizard_id",
                principalTable: "account_tax_report_wizard",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_journal_accounting_report_rel_accounting_report_id_fkey",
                table: "account_journal_accounting_report_rel",
                column: "accounting_report_id",
                principalTable: "accounting_report",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_journal_group_company_id_fkey",
                table: "account_journal_group",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_journal_group_create_uid_fkey",
                table: "account_journal_group",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_journal_group_write_uid_fkey",
                table: "account_journal_group",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_campaign_id_fkey",
                table: "account_move",
                column: "campaign_id",
                principalTable: "utm_campaign",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_commercial_partner_id_fkey",
                table: "account_move",
                column: "commercial_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_move_partner_id_fkey",
                table: "account_move",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_move_partner_shipping_id_fkey",
                table: "account_move",
                column: "partner_shipping_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_company_id_fkey",
                table: "account_move",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_create_uid_fkey",
                table: "account_move",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_invoice_user_id_fkey",
                table: "account_move",
                column: "invoice_user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_write_uid_fkey",
                table: "account_move",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_currency_id_fkey",
                table: "account_move",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_move_invoice_payment_term_id_fkey",
                table: "account_move",
                column: "invoice_payment_term_id",
                principalTable: "account_payment_term",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_medium_id_fkey",
                table: "account_move",
                column: "medium_id",
                principalTable: "utm_medium",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_message_main_attachment_id_fkey",
                table: "account_move",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_partner_bank_id_fkey",
                table: "account_move",
                column: "partner_bank_id",
                principalTable: "res_partner_bank",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_payment_id_fkey",
                table: "account_move",
                column: "payment_id",
                principalTable: "account_payment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_source_id_fkey",
                table: "account_move",
                column: "source_id",
                principalTable: "utm_source",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_stock_move_id_fkey",
                table: "account_move",
                column: "stock_move_id",
                principalTable: "stock_move",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_tax_cash_basis_rec_id_fkey",
                table: "account_move",
                column: "tax_cash_basis_rec_id",
                principalTable: "account_partial_reconcile",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_team_id_fkey",
                table: "account_move",
                column: "team_id",
                principalTable: "crm_team",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_website_id_fkey",
                table: "account_move",
                column: "website_id",
                principalTable: "website",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_account_resequen_account_resequence_wizard_id_fkey",
                table: "account_move_account_resequence_wizard_rel",
                column: "account_resequence_wizard_id",
                principalTable: "account_resequence_wizard",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_move_line_company_currency_id_fkey",
                table: "account_move_line",
                column: "company_currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_line_currency_id_fkey",
                table: "account_move_line",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_move_line_company_id_fkey",
                table: "account_move_line",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_line_create_uid_fkey",
                table: "account_move_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_line_write_uid_fkey",
                table: "account_move_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_line_expense_id_fkey",
                table: "account_move_line",
                column: "expense_id",
                principalTable: "hr_expense",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_line_followup_line_id_fkey",
                table: "account_move_line",
                column: "followup_line_id",
                principalTable: "followup_line",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_line_group_tax_id_fkey",
                table: "account_move_line",
                column: "group_tax_id",
                principalTable: "account_tax",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_line_tax_line_id_fkey",
                table: "account_move_line",
                column: "tax_line_id",
                principalTable: "account_tax",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_move_line_partner_id_fkey",
                table: "account_move_line",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_move_line_payment_id_fkey",
                table: "account_move_line",
                column: "payment_id",
                principalTable: "account_payment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_line_product_id_fkey",
                table: "account_move_line",
                column: "product_id",
                principalTable: "product_product",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_move_line_product_uom_id_fkey",
                table: "account_move_line",
                column: "product_uom_id",
                principalTable: "uom_uom",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_move_line_purchase_line_id_fkey",
                table: "account_move_line",
                column: "purchase_line_id",
                principalTable: "purchase_order_line",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_line_reconcile_model_id_fkey",
                table: "account_move_line",
                column: "reconcile_model_id",
                principalTable: "account_reconcile_model",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_line_tax_group_id_fkey",
                table: "account_move_line",
                column: "tax_group_id",
                principalTable: "account_tax_group",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_line_tax_repartition_line_id_fkey",
                table: "account_move_line",
                column: "tax_repartition_line_id",
                principalTable: "account_tax_repartition_line",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_move_line_vehicle_id_fkey",
                table: "account_move_line",
                column: "vehicle_id",
                principalTable: "fleet_vehicle",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_line_account_tax_rel_account_tax_id_fkey",
                table: "account_move_line_account_tax_rel",
                column: "account_tax_id",
                principalTable: "account_tax",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_move_purchase_order_rel_purchase_order_id_fkey",
                table: "account_move_purchase_order_rel",
                column: "purchase_order_id",
                principalTable: "purchase_order",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_move_reversal_company_id_fkey",
                table: "account_move_reversal",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_move_reversal_create_uid_fkey",
                table: "account_move_reversal",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_move_reversal_write_uid_fkey",
                table: "account_move_reversal",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_partial_reconcile_company_id_fkey",
                table: "account_partial_reconcile",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_partial_reconcile_create_uid_fkey",
                table: "account_partial_reconcile",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_partial_reconcile_write_uid_fkey",
                table: "account_partial_reconcile",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_partial_reconcile_credit_currency_id_fkey",
                table: "account_partial_reconcile",
                column: "credit_currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_partial_reconcile_debit_currency_id_fkey",
                table: "account_partial_reconcile",
                column: "debit_currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_create_uid_fkey",
                table: "account_payment",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_write_uid_fkey",
                table: "account_payment",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_currency_id_fkey",
                table: "account_payment",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_message_main_attachment_id_fkey",
                table: "account_payment",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_partner_bank_id_fkey",
                table: "account_payment",
                column: "partner_bank_id",
                principalTable: "res_partner_bank",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_partner_id_fkey",
                table: "account_payment",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_payment_payment_method_id_fkey",
                table: "account_payment",
                column: "payment_method_id",
                principalTable: "account_payment_method",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_payment_method_line_id_fkey",
                table: "account_payment",
                column: "payment_method_line_id",
                principalTable: "account_payment_method_line",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_payment_token_id_fkey",
                table: "account_payment",
                column: "payment_token_id",
                principalTable: "payment_token",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_payment_transaction_id_fkey",
                table: "account_payment",
                column: "payment_transaction_id",
                principalTable: "payment_transaction",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_pos_payment_method_id_fkey",
                table: "account_payment",
                column: "pos_payment_method_id",
                principalTable: "pos_payment_method",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_pos_session_id_fkey",
                table: "account_payment",
                column: "pos_session_id",
                principalTable: "pos_session",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_method_create_uid_fkey",
                table: "account_payment_method",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_method_write_uid_fkey",
                table: "account_payment_method",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_method_line_create_uid_fkey",
                table: "account_payment_method_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_method_line_write_uid_fkey",
                table: "account_payment_method_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_method_line_payment_provider_id_fkey",
                table: "account_payment_method_line",
                column: "payment_provider_id",
                principalTable: "payment_provider",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_register_company_id_fkey",
                table: "account_payment_register",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_register_create_uid_fkey",
                table: "account_payment_register",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_register_write_uid_fkey",
                table: "account_payment_register",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_register_currency_id_fkey",
                table: "account_payment_register",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_register_source_currency_id_fkey",
                table: "account_payment_register",
                column: "source_currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_register_partner_bank_id_fkey",
                table: "account_payment_register",
                column: "partner_bank_id",
                principalTable: "res_partner_bank",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_register_partner_id_fkey",
                table: "account_payment_register",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_payment_register_payment_token_id_fkey",
                table: "account_payment_register",
                column: "payment_token_id",
                principalTable: "payment_token",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_term_company_id_fkey",
                table: "account_payment_term",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_term_create_uid_fkey",
                table: "account_payment_term",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_term_write_uid_fkey",
                table: "account_payment_term",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_term_line_create_uid_fkey",
                table: "account_payment_term_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_payment_term_line_write_uid_fkey",
                table: "account_payment_term_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_print_journal_company_id_fkey",
                table: "account_print_journal",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_print_journal_create_uid_fkey",
                table: "account_print_journal",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_print_journal_write_uid_fkey",
                table: "account_print_journal",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_reconcile_model_company_id_fkey",
                table: "account_reconcile_model",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_reconcile_model_create_uid_fkey",
                table: "account_reconcile_model",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_reconcile_model_write_uid_fkey",
                table: "account_reconcile_model",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_reconcile_model_message_main_attachment_id_fkey",
                table: "account_reconcile_model",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_reconcile_model_line_company_id_fkey",
                table: "account_reconcile_model_line",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_reconcile_model_line_create_uid_fkey",
                table: "account_reconcile_model_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_reconcile_model_line_write_uid_fkey",
                table: "account_reconcile_model_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_reconcile_model_line_account_tax_re_account_tax_id_fkey",
                table: "account_reconcile_model_line_account_tax_rel",
                column: "account_tax_id",
                principalTable: "account_tax",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_reconcile_model_line_template_create_uid_fkey",
                table: "account_reconcile_model_line_template",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_reconcile_model_line_template_write_uid_fkey",
                table: "account_reconcile_model_line_template",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_reconcile_model_line_template_model_id_fkey",
                table: "account_reconcile_model_line_template",
                column: "model_id",
                principalTable: "account_reconcile_model_template",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_reconcile_model_line_templ_account_tax_template_id_fkey",
                table: "account_reconcile_model_line_template_account_tax_template_rel",
                column: "account_tax_template_id",
                principalTable: "account_tax_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_reconcile_model_partner_mapping_create_uid_fkey",
                table: "account_reconcile_model_partner_mapping",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_reconcile_model_partner_mapping_write_uid_fkey",
                table: "account_reconcile_model_partner_mapping",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_reconcile_model_partner_mapping_partner_id_fkey",
                table: "account_reconcile_model_partner_mapping",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_reconcile_model_res_partne_res_partner_category_id_fkey",
                table: "account_reconcile_model_res_partner_category_rel",
                column: "res_partner_category_id",
                principalTable: "res_partner_category",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_reconcile_model_res_partner_rel_res_partner_id_fkey",
                table: "account_reconcile_model_res_partner_rel",
                column: "res_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_reconcile_model_template_create_uid_fkey",
                table: "account_reconcile_model_template",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_reconcile_model_template_write_uid_fkey",
                table: "account_reconcile_model_template",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_reconcile_model_template_r_res_partner_category_id_fkey",
                table: "account_reconcile_model_template_res_partner_category_rel",
                column: "res_partner_category_id",
                principalTable: "res_partner_category",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_reconcile_model_template_res_partne_res_partner_id_fkey",
                table: "account_reconcile_model_template_res_partner_rel",
                column: "res_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_recurring_template_company_id_fkey",
                table: "account_recurring_template",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_recurring_template_create_uid_fkey",
                table: "account_recurring_template",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_recurring_template_write_uid_fkey",
                table: "account_recurring_template",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_report_country_id_fkey",
                table: "account_report",
                column: "country_id",
                principalTable: "res_country",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_report_create_uid_fkey",
                table: "account_report",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_report_write_uid_fkey",
                table: "account_report",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_report_column_create_uid_fkey",
                table: "account_report_column",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_report_column_write_uid_fkey",
                table: "account_report_column",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_report_column_custom_audit_action_id_fkey",
                table: "account_report_column",
                column: "custom_audit_action_id",
                principalTable: "ir_act_window",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_report_expression_create_uid_fkey",
                table: "account_report_expression",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_report_expression_write_uid_fkey",
                table: "account_report_expression",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_report_expression_report_line_id_fkey",
                table: "account_report_expression",
                column: "report_line_id",
                principalTable: "account_report_line",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_report_external_value_carryover_origin_report_line_fkey",
                table: "account_report_external_value",
                column: "carryover_origin_report_line_id",
                principalTable: "account_report_line",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_report_external_value_company_id_fkey",
                table: "account_report_external_value",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_report_external_value_create_uid_fkey",
                table: "account_report_external_value",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_report_external_value_write_uid_fkey",
                table: "account_report_external_value",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_report_general_ledger_company_id_fkey",
                table: "account_report_general_ledger",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_report_general_ledger_create_uid_fkey",
                table: "account_report_general_ledger",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_report_general_ledger_write_uid_fkey",
                table: "account_report_general_ledger",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_report_general_ledger_res_partner_r_res_partner_id_fkey",
                table: "account_report_general_ledger_res_partner_rel",
                column: "res_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_report_line_create_uid_fkey",
                table: "account_report_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_report_line_write_uid_fkey",
                table: "account_report_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_report_partner_ledger_company_id_fkey",
                table: "account_report_partner_ledger",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_report_partner_ledger_create_uid_fkey",
                table: "account_report_partner_ledger",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_report_partner_ledger_write_uid_fkey",
                table: "account_report_partner_ledger",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_report_partner_ledger_res_partner_r_res_partner_id_fkey",
                table: "account_report_partner_ledger_res_partner_rel",
                column: "res_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_resequence_wizard_create_uid_fkey",
                table: "account_resequence_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_resequence_wizard_write_uid_fkey",
                table: "account_resequence_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_setup_bank_manual_config_create_uid_fkey",
                table: "account_setup_bank_manual_config",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_setup_bank_manual_config_write_uid_fkey",
                table: "account_setup_bank_manual_config",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_setup_bank_manual_config_res_partner_bank_id_fkey",
                table: "account_setup_bank_manual_config",
                column: "res_partner_bank_id",
                principalTable: "res_partner_bank",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_tax_company_id_fkey",
                table: "account_tax",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_tax_country_id_fkey",
                table: "account_tax",
                column: "country_id",
                principalTable: "res_country",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_tax_create_uid_fkey",
                table: "account_tax",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_tax_write_uid_fkey",
                table: "account_tax",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_tax_tax_group_id_fkey",
                table: "account_tax",
                column: "tax_group_id",
                principalTable: "account_tax_group",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "account_tax_group_country_id_fkey",
                table: "account_tax_group",
                column: "country_id",
                principalTable: "res_country",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_tax_group_create_uid_fkey",
                table: "account_tax_group",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_tax_group_write_uid_fkey",
                table: "account_tax_group",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_tax_hr_expense_split_rel_hr_expense_split_id_fkey",
                table: "account_tax_hr_expense_split_rel",
                column: "hr_expense_split_id",
                principalTable: "hr_expense_split",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_tax_pos_order_line_rel_pos_order_line_id_fkey",
                table: "account_tax_pos_order_line_rel",
                column: "pos_order_line_id",
                principalTable: "pos_order_line",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_tax_purchase_order_line_rel_purchase_order_line_id_fkey",
                table: "account_tax_purchase_order_line_rel",
                column: "purchase_order_line_id",
                principalTable: "purchase_order_line",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_tax_rep_template_minu_account_tax_repartition_line_fkey",
                table: "account_tax_rep_template_minus",
                column: "account_tax_repartition_line_template_id",
                principalTable: "account_tax_repartition_line_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_tax_rep_template_plus_account_tax_repartition_line_fkey",
                table: "account_tax_rep_template_plus",
                column: "account_tax_repartition_line_template_id",
                principalTable: "account_tax_repartition_line_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_tax_repartition_finan_account_tax_repartition_line_fkey",
                table: "account_tax_repartition_financial_tags",
                column: "account_tax_repartition_line_template_id",
                principalTable: "account_tax_repartition_line_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_tax_repartition_line_company_id_fkey",
                table: "account_tax_repartition_line",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_tax_repartition_line_create_uid_fkey",
                table: "account_tax_repartition_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_tax_repartition_line_write_uid_fkey",
                table: "account_tax_repartition_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_tax_repartition_line_template_create_uid_fkey",
                table: "account_tax_repartition_line_template",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_tax_repartition_line_template_write_uid_fkey",
                table: "account_tax_repartition_line_template",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_tax_repartition_line_template_invoice_tax_id_fkey",
                table: "account_tax_repartition_line_template",
                column: "invoice_tax_id",
                principalTable: "account_tax_template",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_tax_repartition_line_template_refund_tax_id_fkey",
                table: "account_tax_repartition_line_template",
                column: "refund_tax_id",
                principalTable: "account_tax_template",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_tax_report_wizard_company_id_fkey",
                table: "account_tax_report_wizard",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_tax_report_wizard_create_uid_fkey",
                table: "account_tax_report_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_tax_report_wizard_write_uid_fkey",
                table: "account_tax_report_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_tax_sale_advance_payme_sale_advance_payment_inv_id_fkey",
                table: "account_tax_sale_advance_payment_inv_rel",
                column: "sale_advance_payment_inv_id",
                principalTable: "sale_advance_payment_inv",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_tax_sale_order_line_rel_sale_order_line_id_fkey",
                table: "account_tax_sale_order_line_rel",
                column: "sale_order_line_id",
                principalTable: "sale_order_line",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_tax_template_create_uid_fkey",
                table: "account_tax_template",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_tax_template_write_uid_fkey",
                table: "account_tax_template",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_tour_upload_bill_create_uid_fkey",
                table: "account_tour_upload_bill",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_tour_upload_bill_write_uid_fkey",
                table: "account_tour_upload_bill",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_tour_upload_bill_email_confirm_create_uid_fkey",
                table: "account_tour_upload_bill_email_confirm",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_tour_upload_bill_email_confirm_write_uid_fkey",
                table: "account_tour_upload_bill_email_confirm",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_tour_upload_bill_ir_attachments_r_ir_attachment_id_fkey",
                table: "account_tour_upload_bill_ir_attachments_rel",
                column: "ir_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "account_unreconcile_create_uid_fkey",
                table: "account_unreconcile",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "account_unreconcile_write_uid_fkey",
                table: "account_unreconcile",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "accounting_report_company_id_fkey",
                table: "accounting_report",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "accounting_report_create_uid_fkey",
                table: "accounting_report",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "accounting_report_write_uid_fkey",
                table: "accounting_report",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "applicant_get_refuse_reason_create_uid_fkey",
                table: "applicant_get_refuse_reason",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "applicant_get_refuse_reason_write_uid_fkey",
                table: "applicant_get_refuse_reason",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "applicant_get_refuse_reason_refuse_reason_id_fkey",
                table: "applicant_get_refuse_reason",
                column: "refuse_reason_id",
                principalTable: "hr_applicant_refuse_reason",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "applicant_get_refuse_reason_template_id_fkey",
                table: "applicant_get_refuse_reason",
                column: "template_id",
                principalTable: "mail_template",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "applicant_get_refuse_reason_hr_applicant_r_hr_applicant_id_fkey",
                table: "applicant_get_refuse_reason_hr_applicant_rel",
                column: "hr_applicant_id",
                principalTable: "hr_applicant",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "applicant_send_mail_author_id_fkey",
                table: "applicant_send_mail",
                column: "author_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "applicant_send_mail_create_uid_fkey",
                table: "applicant_send_mail",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "applicant_send_mail_write_uid_fkey",
                table: "applicant_send_mail",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "applicant_send_mail_template_id_fkey",
                table: "applicant_send_mail",
                column: "template_id",
                principalTable: "mail_template",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "applicant_send_mail_hr_applicant_rel_hr_applicant_id_fkey",
                table: "applicant_send_mail_hr_applicant_rel",
                column: "hr_applicant_id",
                principalTable: "hr_applicant",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "asset_depreciation_confirmation_wizard_create_uid_fkey",
                table: "asset_depreciation_confirmation_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "asset_depreciation_confirmation_wizard_write_uid_fkey",
                table: "asset_depreciation_confirmation_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "asset_modify_create_uid_fkey",
                table: "asset_modify",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "asset_modify_write_uid_fkey",
                table: "asset_modify",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "auth_totp_device_user_id_fkey",
                table: "auth_totp_device",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id");

            migrationBuilder.AddForeignKey(
                name: "auth_totp_wizard_create_uid_fkey",
                table: "auth_totp_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "auth_totp_wizard_user_id_fkey",
                table: "auth_totp_wizard",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "auth_totp_wizard_write_uid_fkey",
                table: "auth_totp_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "barcode_nomenclature_create_uid_fkey",
                table: "barcode_nomenclature",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "barcode_nomenclature_write_uid_fkey",
                table: "barcode_nomenclature",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "barcode_rule_associated_uom_id_fkey",
                table: "barcode_rule",
                column: "associated_uom_id",
                principalTable: "uom_uom",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "barcode_rule_create_uid_fkey",
                table: "barcode_rule",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "barcode_rule_write_uid_fkey",
                table: "barcode_rule",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_document_layout_company_id_fkey",
                table: "base_document_layout",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "base_document_layout_create_uid_fkey",
                table: "base_document_layout",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_document_layout_write_uid_fkey",
                table: "base_document_layout",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_document_layout_report_layout_id_fkey",
                table: "base_document_layout",
                column: "report_layout_id",
                principalTable: "report_layout",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_enable_profiling_wizard_create_uid_fkey",
                table: "base_enable_profiling_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_enable_profiling_wizard_write_uid_fkey",
                table: "base_enable_profiling_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_import_create_uid_fkey",
                table: "base_import_import",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_import_write_uid_fkey",
                table: "base_import_import",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_mapping_create_uid_fkey",
                table: "base_import_mapping",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_mapping_write_uid_fkey",
                table: "base_import_mapping",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_char_create_uid_fkey",
                table: "base_import_tests_models_char",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_char_write_uid_fkey",
                table: "base_import_tests_models_char",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_char_noreadonly_create_uid_fkey",
                table: "base_import_tests_models_char_noreadonly",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_char_noreadonly_write_uid_fkey",
                table: "base_import_tests_models_char_noreadonly",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_char_readonly_create_uid_fkey",
                table: "base_import_tests_models_char_readonly",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_char_readonly_write_uid_fkey",
                table: "base_import_tests_models_char_readonly",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_char_required_create_uid_fkey",
                table: "base_import_tests_models_char_required",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_char_required_write_uid_fkey",
                table: "base_import_tests_models_char_required",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_char_states_create_uid_fkey",
                table: "base_import_tests_models_char_states",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_char_states_write_uid_fkey",
                table: "base_import_tests_models_char_states",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_char_stillreadonly_create_uid_fkey",
                table: "base_import_tests_models_char_stillreadonly",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_char_stillreadonly_write_uid_fkey",
                table: "base_import_tests_models_char_stillreadonly",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_complex_create_uid_fkey",
                table: "base_import_tests_models_complex",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_complex_write_uid_fkey",
                table: "base_import_tests_models_complex",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_complex_currency_id_fkey",
                table: "base_import_tests_models_complex",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_float_create_uid_fkey",
                table: "base_import_tests_models_float",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_float_write_uid_fkey",
                table: "base_import_tests_models_float",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_float_currency_id_fkey",
                table: "base_import_tests_models_float",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_m2o_create_uid_fkey",
                table: "base_import_tests_models_m2o",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_m2o_write_uid_fkey",
                table: "base_import_tests_models_m2o",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_m2o_value_fkey",
                table: "base_import_tests_models_m2o",
                column: "value",
                principalTable: "base_import_tests_models_m2o_related",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_m2o_related_create_uid_fkey",
                table: "base_import_tests_models_m2o_related",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_m2o_related_write_uid_fkey",
                table: "base_import_tests_models_m2o_related",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_m2o_required_create_uid_fkey",
                table: "base_import_tests_models_m2o_required",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_m2o_required_write_uid_fkey",
                table: "base_import_tests_models_m2o_required",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_m2o_required_value_fkey",
                table: "base_import_tests_models_m2o_required",
                column: "value",
                principalTable: "base_import_tests_models_m2o_required_related",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_m2o_required_related_create_uid_fkey",
                table: "base_import_tests_models_m2o_required_related",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_m2o_required_related_write_uid_fkey",
                table: "base_import_tests_models_m2o_required_related",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_o2m_create_uid_fkey",
                table: "base_import_tests_models_o2m",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_o2m_write_uid_fkey",
                table: "base_import_tests_models_o2m",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_o2m_child_create_uid_fkey",
                table: "base_import_tests_models_o2m_child",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_o2m_child_write_uid_fkey",
                table: "base_import_tests_models_o2m_child",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_preview_create_uid_fkey",
                table: "base_import_tests_models_preview",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_import_tests_models_preview_write_uid_fkey",
                table: "base_import_tests_models_preview",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_language_export_create_uid_fkey",
                table: "base_language_export",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_language_export_write_uid_fkey",
                table: "base_language_export",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_language_import_create_uid_fkey",
                table: "base_language_import",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_language_import_write_uid_fkey",
                table: "base_language_import",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_language_install_create_uid_fkey",
                table: "base_language_install",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_language_install_write_uid_fkey",
                table: "base_language_install",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_language_install_website_rel_website_id_fkey",
                table: "base_language_install_website_rel",
                column: "website_id",
                principalTable: "website",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "base_module_install_request_create_uid_fkey",
                table: "base_module_install_request",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_module_install_request_user_id_fkey",
                table: "base_module_install_request",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "base_module_install_request_write_uid_fkey",
                table: "base_module_install_request",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_module_install_request_module_id_fkey",
                table: "base_module_install_request",
                column: "module_id",
                principalTable: "ir_module_module",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "base_module_install_review_create_uid_fkey",
                table: "base_module_install_review",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_module_install_review_write_uid_fkey",
                table: "base_module_install_review",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_module_install_review_module_id_fkey",
                table: "base_module_install_review",
                column: "module_id",
                principalTable: "ir_module_module",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "base_module_uninstall_create_uid_fkey",
                table: "base_module_uninstall",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_module_uninstall_write_uid_fkey",
                table: "base_module_uninstall",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_module_uninstall_module_id_fkey",
                table: "base_module_uninstall",
                column: "module_id",
                principalTable: "ir_module_module",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "base_module_update_create_uid_fkey",
                table: "base_module_update",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_module_update_write_uid_fkey",
                table: "base_module_update",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_module_upgrade_create_uid_fkey",
                table: "base_module_upgrade",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_module_upgrade_write_uid_fkey",
                table: "base_module_upgrade",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_partner_merge_automatic_wizard_create_uid_fkey",
                table: "base_partner_merge_automatic_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_partner_merge_automatic_wizard_write_uid_fkey",
                table: "base_partner_merge_automatic_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_partner_merge_automatic_wizard_current_line_id_fkey",
                table: "base_partner_merge_automatic_wizard",
                column: "current_line_id",
                principalTable: "base_partner_merge_line",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_partner_merge_automatic_wizard_dst_partner_id_fkey",
                table: "base_partner_merge_automatic_wizard",
                column: "dst_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_partner_merge_automatic_wizard_res_par_res_partner_id_fkey",
                table: "base_partner_merge_automatic_wizard_res_partner_rel",
                column: "res_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "base_partner_merge_line_create_uid_fkey",
                table: "base_partner_merge_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "base_partner_merge_line_write_uid_fkey",
                table: "base_partner_merge_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "bus_bus_create_uid_fkey",
                table: "bus_bus",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "bus_bus_write_uid_fkey",
                table: "bus_bus",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "bus_presence_guest_id_fkey",
                table: "bus_presence",
                column: "guest_id",
                principalTable: "mail_guest",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "bus_presence_user_id_fkey",
                table: "bus_presence",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "calendar_alarm_create_uid_fkey",
                table: "calendar_alarm",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "calendar_alarm_write_uid_fkey",
                table: "calendar_alarm",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "calendar_alarm_mail_template_id_fkey",
                table: "calendar_alarm",
                column: "mail_template_id",
                principalTable: "mail_template",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "calendar_alarm_sms_template_id_fkey",
                table: "calendar_alarm",
                column: "sms_template_id",
                principalTable: "sms_template",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "calendar_alarm_calendar_event_rel_calendar_event_id_fkey",
                table: "calendar_alarm_calendar_event_rel",
                column: "calendar_event_id",
                principalTable: "calendar_event",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "calendar_attendee_create_uid_fkey",
                table: "calendar_attendee",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "calendar_attendee_write_uid_fkey",
                table: "calendar_attendee",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "calendar_attendee_event_id_fkey",
                table: "calendar_attendee",
                column: "event_id",
                principalTable: "calendar_event",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "calendar_attendee_partner_id_fkey",
                table: "calendar_attendee",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "calendar_event_applicant_id_fkey",
                table: "calendar_event",
                column: "applicant_id",
                principalTable: "hr_applicant",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "calendar_event_create_uid_fkey",
                table: "calendar_event",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "calendar_event_user_id_fkey",
                table: "calendar_event",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "calendar_event_write_uid_fkey",
                table: "calendar_event",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "calendar_event_message_main_attachment_id_fkey",
                table: "calendar_event",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "calendar_event_opportunity_id_fkey",
                table: "calendar_event",
                column: "opportunity_id",
                principalTable: "crm_lead",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "calendar_event_recurrence_id_fkey",
                table: "calendar_event",
                column: "recurrence_id",
                principalTable: "calendar_recurrence",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "calendar_event_res_model_id_fkey",
                table: "calendar_event",
                column: "res_model_id",
                principalTable: "ir_model",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "calendar_event_videocall_channel_id_fkey",
                table: "calendar_event",
                column: "videocall_channel_id",
                principalTable: "mail_channel",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "calendar_event_res_partner_rel_res_partner_id_fkey",
                table: "calendar_event_res_partner_rel",
                column: "res_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "calendar_event_type_create_uid_fkey",
                table: "calendar_event_type",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "calendar_event_type_write_uid_fkey",
                table: "calendar_event_type",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "calendar_filters_create_uid_fkey",
                table: "calendar_filters",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "calendar_filters_user_id_fkey",
                table: "calendar_filters",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "calendar_filters_write_uid_fkey",
                table: "calendar_filters",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "calendar_filters_partner_id_fkey",
                table: "calendar_filters",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "calendar_provider_config_create_uid_fkey",
                table: "calendar_provider_config",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "calendar_provider_config_write_uid_fkey",
                table: "calendar_provider_config",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "calendar_recurrence_create_uid_fkey",
                table: "calendar_recurrence",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "calendar_recurrence_write_uid_fkey",
                table: "calendar_recurrence",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "change_lock_date_company_id_fkey",
                table: "change_lock_date",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "change_lock_date_create_uid_fkey",
                table: "change_lock_date",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "change_lock_date_write_uid_fkey",
                table: "change_lock_date",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "change_password_own_create_uid_fkey",
                table: "change_password_own",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "change_password_own_write_uid_fkey",
                table: "change_password_own",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "change_password_user_create_uid_fkey",
                table: "change_password_user",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "change_password_user_user_id_fkey",
                table: "change_password_user",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "change_password_user_write_uid_fkey",
                table: "change_password_user",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "change_password_user_wizard_id_fkey",
                table: "change_password_user",
                column: "wizard_id",
                principalTable: "change_password_wizard",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "change_password_wizard_create_uid_fkey",
                table: "change_password_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "change_password_wizard_write_uid_fkey",
                table: "change_password_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "change_production_qty_create_uid_fkey",
                table: "change_production_qty",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "change_production_qty_write_uid_fkey",
                table: "change_production_qty",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "change_production_qty_mo_id_fkey",
                table: "change_production_qty",
                column: "mo_id",
                principalTable: "mrp_production",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "confirm_stock_sms_create_uid_fkey",
                table: "confirm_stock_sms",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "confirm_stock_sms_write_uid_fkey",
                table: "confirm_stock_sms",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_convert_lead_mass_lead_re_crm_lead2opportunity_partner_fkey",
                table: "crm_convert_lead_mass_lead_rel",
                column: "crm_lead2opportunity_partner_mass_id",
                principalTable: "crm_lead2opportunity_partner_mass",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "crm_convert_lead_mass_lead_rel_crm_lead_id_fkey",
                table: "crm_convert_lead_mass_lead_rel",
                column: "crm_lead_id",
                principalTable: "crm_lead",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "crm_iap_lead_helpers_create_uid_fkey",
                table: "crm_iap_lead_helpers",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_iap_lead_helpers_write_uid_fkey",
                table: "crm_iap_lead_helpers",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_iap_lead_industry_create_uid_fkey",
                table: "crm_iap_lead_industry",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_iap_lead_industry_write_uid_fkey",
                table: "crm_iap_lead_industry",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_iap_lead_industry_crm_iap_crm_iap_lead_mining_request__fkey",
                table: "crm_iap_lead_industry_crm_iap_lead_mining_request_rel",
                column: "crm_iap_lead_mining_request_id",
                principalTable: "crm_iap_lead_mining_request",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "crm_iap_lead_mining_request_create_uid_fkey",
                table: "crm_iap_lead_mining_request",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_iap_lead_mining_request_user_id_fkey",
                table: "crm_iap_lead_mining_request",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_iap_lead_mining_request_write_uid_fkey",
                table: "crm_iap_lead_mining_request",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_iap_lead_mining_request_preferred_role_id_fkey",
                table: "crm_iap_lead_mining_request",
                column: "preferred_role_id",
                principalTable: "crm_iap_lead_role",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_iap_lead_mining_request_seniority_id_fkey",
                table: "crm_iap_lead_mining_request",
                column: "seniority_id",
                principalTable: "crm_iap_lead_seniority",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_iap_lead_mining_request_team_id_fkey",
                table: "crm_iap_lead_mining_request",
                column: "team_id",
                principalTable: "crm_team",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_iap_lead_mining_request_crm_iap_l_crm_iap_lead_role_id_fkey",
                table: "crm_iap_lead_mining_request_crm_iap_lead_role_rel",
                column: "crm_iap_lead_role_id",
                principalTable: "crm_iap_lead_role",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "crm_iap_lead_mining_request_crm_tag_rel_crm_tag_id_fkey",
                table: "crm_iap_lead_mining_request_crm_tag_rel",
                column: "crm_tag_id",
                principalTable: "crm_tag",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "crm_iap_lead_mining_request_res_country_rel_res_country_id_fkey",
                table: "crm_iap_lead_mining_request_res_country_rel",
                column: "res_country_id",
                principalTable: "res_country",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "crm_iap_lead_mining_request_res_count_res_country_state_id_fkey",
                table: "crm_iap_lead_mining_request_res_country_state_rel",
                column: "res_country_state_id",
                principalTable: "res_country_state",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "crm_iap_lead_role_create_uid_fkey",
                table: "crm_iap_lead_role",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_iap_lead_role_write_uid_fkey",
                table: "crm_iap_lead_role",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_iap_lead_seniority_create_uid_fkey",
                table: "crm_iap_lead_seniority",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_iap_lead_seniority_write_uid_fkey",
                table: "crm_iap_lead_seniority",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_campaign_id_fkey",
                table: "crm_lead",
                column: "campaign_id",
                principalTable: "utm_campaign",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_company_id_fkey",
                table: "crm_lead",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_country_id_fkey",
                table: "crm_lead",
                column: "country_id",
                principalTable: "res_country",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_create_uid_fkey",
                table: "crm_lead",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_user_id_fkey",
                table: "crm_lead",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_write_uid_fkey",
                table: "crm_lead",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_lang_id_fkey",
                table: "crm_lead",
                column: "lang_id",
                principalTable: "res_lang",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_lost_reason_id_fkey",
                table: "crm_lead",
                column: "lost_reason_id",
                principalTable: "crm_lost_reason",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_medium_id_fkey",
                table: "crm_lead",
                column: "medium_id",
                principalTable: "utm_medium",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_message_main_attachment_id_fkey",
                table: "crm_lead",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_partner_id_fkey",
                table: "crm_lead",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_recurring_plan_fkey",
                table: "crm_lead",
                column: "recurring_plan",
                principalTable: "crm_recurring_plan",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_source_id_fkey",
                table: "crm_lead",
                column: "source_id",
                principalTable: "utm_source",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_stage_id_fkey",
                table: "crm_lead",
                column: "stage_id",
                principalTable: "crm_stage",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_state_id_fkey",
                table: "crm_lead",
                column: "state_id",
                principalTable: "res_country_state",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_team_id_fkey",
                table: "crm_lead",
                column: "team_id",
                principalTable: "crm_team",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_title_fkey",
                table: "crm_lead",
                column: "title",
                principalTable: "res_partner_title",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_crm_lead2opportunit_crm_lead2opportunity_partner_fkey1",
                table: "crm_lead_crm_lead2opportunity_partner_mass_rel",
                column: "crm_lead2opportunity_partner_mass_id",
                principalTable: "crm_lead2opportunity_partner_mass",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_crm_lead2opportunity_crm_lead2opportunity_partner_fkey",
                table: "crm_lead_crm_lead2opportunity_partner_rel",
                column: "crm_lead2opportunity_partner_id",
                principalTable: "crm_lead2opportunity_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_lost_create_uid_fkey",
                table: "crm_lead_lost",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_lost_write_uid_fkey",
                table: "crm_lead_lost",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_lost_lost_reason_id_fkey",
                table: "crm_lead_lost",
                column: "lost_reason_id",
                principalTable: "crm_lost_reason",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_pls_update_create_uid_fkey",
                table: "crm_lead_pls_update",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_pls_update_write_uid_fkey",
                table: "crm_lead_pls_update",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_pls_update_crm_lead__crm_lead_scoring_frequency_f_fkey",
                table: "crm_lead_pls_update_crm_lead_scoring_frequency_field_rel",
                column: "crm_lead_scoring_frequency_field_id",
                principalTable: "crm_lead_scoring_frequency_field",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_scoring_frequency_create_uid_fkey",
                table: "crm_lead_scoring_frequency",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_scoring_frequency_write_uid_fkey",
                table: "crm_lead_scoring_frequency",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_scoring_frequency_team_id_fkey",
                table: "crm_lead_scoring_frequency",
                column: "team_id",
                principalTable: "crm_team",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_scoring_frequency_field_create_uid_fkey",
                table: "crm_lead_scoring_frequency_field",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_scoring_frequency_field_write_uid_fkey",
                table: "crm_lead_scoring_frequency_field",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_scoring_frequency_field_field_id_fkey",
                table: "crm_lead_scoring_frequency_field",
                column: "field_id",
                principalTable: "ir_model_fields",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "crm_lead_website_visitor_rel_website_visitor_id_fkey",
                table: "crm_lead_website_visitor_rel",
                column: "website_visitor_id",
                principalTable: "website_visitor",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "crm_lead2opportunity_partner_create_uid_fkey",
                table: "crm_lead2opportunity_partner",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead2opportunity_partner_user_id_fkey",
                table: "crm_lead2opportunity_partner",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead2opportunity_partner_write_uid_fkey",
                table: "crm_lead2opportunity_partner",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead2opportunity_partner_partner_id_fkey",
                table: "crm_lead2opportunity_partner",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead2opportunity_partner_team_id_fkey",
                table: "crm_lead2opportunity_partner",
                column: "team_id",
                principalTable: "crm_team",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead2opportunity_partner_mass_create_uid_fkey",
                table: "crm_lead2opportunity_partner_mass",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead2opportunity_partner_mass_user_id_fkey",
                table: "crm_lead2opportunity_partner_mass",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead2opportunity_partner_mass_write_uid_fkey",
                table: "crm_lead2opportunity_partner_mass",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead2opportunity_partner_mass_partner_id_fkey",
                table: "crm_lead2opportunity_partner_mass",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead2opportunity_partner_mass_team_id_fkey",
                table: "crm_lead2opportunity_partner_mass",
                column: "team_id",
                principalTable: "crm_team",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lead2opportunity_partner_mass_res_users_r_res_users_id_fkey",
                table: "crm_lead2opportunity_partner_mass_res_users_rel",
                column: "res_users_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "crm_lost_reason_create_uid_fkey",
                table: "crm_lost_reason",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_lost_reason_write_uid_fkey",
                table: "crm_lost_reason",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_merge_opportunity_create_uid_fkey",
                table: "crm_merge_opportunity",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_merge_opportunity_user_id_fkey",
                table: "crm_merge_opportunity",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_merge_opportunity_write_uid_fkey",
                table: "crm_merge_opportunity",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_merge_opportunity_team_id_fkey",
                table: "crm_merge_opportunity",
                column: "team_id",
                principalTable: "crm_team",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_quotation_partner_create_uid_fkey",
                table: "crm_quotation_partner",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_quotation_partner_write_uid_fkey",
                table: "crm_quotation_partner",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_quotation_partner_partner_id_fkey",
                table: "crm_quotation_partner",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_recurring_plan_create_uid_fkey",
                table: "crm_recurring_plan",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_recurring_plan_write_uid_fkey",
                table: "crm_recurring_plan",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_stage_create_uid_fkey",
                table: "crm_stage",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_stage_write_uid_fkey",
                table: "crm_stage",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_stage_team_id_fkey",
                table: "crm_stage",
                column: "team_id",
                principalTable: "crm_team",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_tag_create_uid_fkey",
                table: "crm_tag",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_tag_write_uid_fkey",
                table: "crm_tag",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_team_alias_id_fkey",
                table: "crm_team",
                column: "alias_id",
                principalTable: "mail_alias",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "crm_team_company_id_fkey",
                table: "crm_team",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_team_create_uid_fkey",
                table: "crm_team",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_team_user_id_fkey",
                table: "crm_team",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_team_write_uid_fkey",
                table: "crm_team",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_team_message_main_attachment_id_fkey",
                table: "crm_team",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_team_member_create_uid_fkey",
                table: "crm_team_member",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_team_member_user_id_fkey",
                table: "crm_team_member",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "crm_team_member_write_uid_fkey",
                table: "crm_team_member",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crm_team_member_message_main_attachment_id_fkey",
                table: "crm_team_member",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crossovered_budget_company_id_fkey",
                table: "crossovered_budget",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "crossovered_budget_create_uid_fkey",
                table: "crossovered_budget",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crossovered_budget_user_id_fkey",
                table: "crossovered_budget",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crossovered_budget_write_uid_fkey",
                table: "crossovered_budget",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crossovered_budget_message_main_attachment_id_fkey",
                table: "crossovered_budget",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crossovered_budget_lines_company_id_fkey",
                table: "crossovered_budget_lines",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crossovered_budget_lines_create_uid_fkey",
                table: "crossovered_budget_lines",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "crossovered_budget_lines_write_uid_fkey",
                table: "crossovered_budget_lines",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "decimal_precision_create_uid_fkey",
                table: "decimal_precision",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "decimal_precision_write_uid_fkey",
                table: "decimal_precision",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "digest_digest_company_id_fkey",
                table: "digest_digest",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "digest_digest_create_uid_fkey",
                table: "digest_digest",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "digest_digest_write_uid_fkey",
                table: "digest_digest",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "digest_digest_res_users_rel_res_users_id_fkey",
                table: "digest_digest_res_users_rel",
                column: "res_users_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "digest_tip_create_uid_fkey",
                table: "digest_tip",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "digest_tip_write_uid_fkey",
                table: "digest_tip",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "digest_tip_group_id_fkey",
                table: "digest_tip",
                column: "group_id",
                principalTable: "res_groups",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "digest_tip_res_users_rel_res_users_id_fkey",
                table: "digest_tip_res_users_rel",
                column: "res_users_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "email_template_attachment_rel_attachment_id_fkey",
                table: "email_template_attachment_rel",
                column: "attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "email_template_attachment_rel_email_template_id_fkey",
                table: "email_template_attachment_rel",
                column: "email_template_id",
                principalTable: "mail_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "employee_category_rel_category_id_fkey",
                table: "employee_category_rel",
                column: "category_id",
                principalTable: "hr_employee_category",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "employee_category_rel_emp_id_fkey",
                table: "employee_category_rel",
                column: "emp_id",
                principalTable: "hr_employee",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "expense_tax_expense_id_fkey",
                table: "expense_tax",
                column: "expense_id",
                principalTable: "hr_expense",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "fetchmail_server_create_uid_fkey",
                table: "fetchmail_server",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fetchmail_server_write_uid_fkey",
                table: "fetchmail_server",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fetchmail_server_object_id_fkey",
                table: "fetchmail_server",
                column: "object_id",
                principalTable: "ir_model",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_service_type_create_uid_fkey",
                table: "fleet_service_type",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_service_type_write_uid_fkey",
                table: "fleet_service_type",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_service_type_fleet_vehi_fleet_vehicle_log_contract_i_fkey",
                table: "fleet_service_type_fleet_vehicle_log_contract_rel",
                column: "fleet_vehicle_log_contract_id",
                principalTable: "fleet_vehicle_log_contract",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_brand_id_fkey",
                table: "fleet_vehicle",
                column: "brand_id",
                principalTable: "fleet_vehicle_model_brand",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_category_id_fkey",
                table: "fleet_vehicle",
                column: "category_id",
                principalTable: "fleet_vehicle_model_category",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_company_id_fkey",
                table: "fleet_vehicle",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_create_uid_fkey",
                table: "fleet_vehicle",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_manager_id_fkey",
                table: "fleet_vehicle",
                column: "manager_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_write_uid_fkey",
                table: "fleet_vehicle",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_driver_employee_id_fkey",
                table: "fleet_vehicle",
                column: "driver_employee_id",
                principalTable: "hr_employee",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_future_driver_employee_id_fkey",
                table: "fleet_vehicle",
                column: "future_driver_employee_id",
                principalTable: "hr_employee",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_driver_id_fkey",
                table: "fleet_vehicle",
                column: "driver_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_future_driver_id_fkey",
                table: "fleet_vehicle",
                column: "future_driver_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_message_main_attachment_id_fkey",
                table: "fleet_vehicle",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_model_id_fkey",
                table: "fleet_vehicle",
                column: "model_id",
                principalTable: "fleet_vehicle_model",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_state_id_fkey",
                table: "fleet_vehicle",
                column: "state_id",
                principalTable: "fleet_vehicle_state",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_assignation_log_create_uid_fkey",
                table: "fleet_vehicle_assignation_log",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_assignation_log_write_uid_fkey",
                table: "fleet_vehicle_assignation_log",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_assignation_log_driver_employee_id_fkey",
                table: "fleet_vehicle_assignation_log",
                column: "driver_employee_id",
                principalTable: "hr_employee",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_assignation_log_driver_id_fkey",
                table: "fleet_vehicle_assignation_log",
                column: "driver_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_log_contract_company_id_fkey",
                table: "fleet_vehicle_log_contract",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_log_contract_create_uid_fkey",
                table: "fleet_vehicle_log_contract",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_log_contract_user_id_fkey",
                table: "fleet_vehicle_log_contract",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_log_contract_write_uid_fkey",
                table: "fleet_vehicle_log_contract",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_log_contract_insurer_id_fkey",
                table: "fleet_vehicle_log_contract",
                column: "insurer_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_log_contract_message_main_attachment_id_fkey",
                table: "fleet_vehicle_log_contract",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_log_services_company_id_fkey",
                table: "fleet_vehicle_log_services",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_log_services_create_uid_fkey",
                table: "fleet_vehicle_log_services",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_log_services_manager_id_fkey",
                table: "fleet_vehicle_log_services",
                column: "manager_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_log_services_write_uid_fkey",
                table: "fleet_vehicle_log_services",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_log_services_message_main_attachment_id_fkey",
                table: "fleet_vehicle_log_services",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_log_services_odometer_id_fkey",
                table: "fleet_vehicle_log_services",
                column: "odometer_id",
                principalTable: "fleet_vehicle_odometer",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_log_services_purchaser_employee_id_fkey",
                table: "fleet_vehicle_log_services",
                column: "purchaser_employee_id",
                principalTable: "hr_employee",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_log_services_purchaser_id_fkey",
                table: "fleet_vehicle_log_services",
                column: "purchaser_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_log_services_vendor_id_fkey",
                table: "fleet_vehicle_log_services",
                column: "vendor_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_model_brand_id_fkey",
                table: "fleet_vehicle_model",
                column: "brand_id",
                principalTable: "fleet_vehicle_model_brand",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_model_category_id_fkey",
                table: "fleet_vehicle_model",
                column: "category_id",
                principalTable: "fleet_vehicle_model_category",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_model_create_uid_fkey",
                table: "fleet_vehicle_model",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_model_write_uid_fkey",
                table: "fleet_vehicle_model",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_model_brand_create_uid_fkey",
                table: "fleet_vehicle_model_brand",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_model_brand_write_uid_fkey",
                table: "fleet_vehicle_model_brand",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_model_category_create_uid_fkey",
                table: "fleet_vehicle_model_category",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_model_category_write_uid_fkey",
                table: "fleet_vehicle_model_category",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_model_vendors_partner_id_fkey",
                table: "fleet_vehicle_model_vendors",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_odometer_create_uid_fkey",
                table: "fleet_vehicle_odometer",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_odometer_write_uid_fkey",
                table: "fleet_vehicle_odometer",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_state_create_uid_fkey",
                table: "fleet_vehicle_state",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_state_write_uid_fkey",
                table: "fleet_vehicle_state",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_tag_create_uid_fkey",
                table: "fleet_vehicle_tag",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "fleet_vehicle_tag_write_uid_fkey",
                table: "fleet_vehicle_tag",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "followup_followup_company_id_fkey",
                table: "followup_followup",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "followup_followup_create_uid_fkey",
                table: "followup_followup",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "followup_followup_write_uid_fkey",
                table: "followup_followup",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "followup_line_create_uid_fkey",
                table: "followup_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "followup_line_manual_action_responsible_id_fkey",
                table: "followup_line",
                column: "manual_action_responsible_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "followup_line_write_uid_fkey",
                table: "followup_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "followup_line_email_template_id_fkey",
                table: "followup_line",
                column: "email_template_id",
                principalTable: "mail_template",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "followup_print_create_uid_fkey",
                table: "followup_print",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "followup_print_write_uid_fkey",
                table: "followup_print",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "followup_sending_results_create_uid_fkey",
                table: "followup_sending_results",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "followup_sending_results_write_uid_fkey",
                table: "followup_sending_results",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_campaign_id_fkey",
                table: "hr_applicant",
                column: "campaign_id",
                principalTable: "utm_campaign",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_company_id_fkey",
                table: "hr_applicant",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_create_uid_fkey",
                table: "hr_applicant",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_user_id_fkey",
                table: "hr_applicant",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_write_uid_fkey",
                table: "hr_applicant",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_department_id_fkey",
                table: "hr_applicant",
                column: "department_id",
                principalTable: "hr_department",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_emp_id_fkey",
                table: "hr_applicant",
                column: "emp_id",
                principalTable: "hr_employee",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_job_id_fkey",
                table: "hr_applicant",
                column: "job_id",
                principalTable: "hr_job",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_last_stage_id_fkey",
                table: "hr_applicant",
                column: "last_stage_id",
                principalTable: "hr_recruitment_stage",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_stage_id_fkey",
                table: "hr_applicant",
                column: "stage_id",
                principalTable: "hr_recruitment_stage",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_medium_id_fkey",
                table: "hr_applicant",
                column: "medium_id",
                principalTable: "utm_medium",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_message_main_attachment_id_fkey",
                table: "hr_applicant",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_partner_id_fkey",
                table: "hr_applicant",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_refuse_reason_id_fkey",
                table: "hr_applicant",
                column: "refuse_reason_id",
                principalTable: "hr_applicant_refuse_reason",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_source_id_fkey",
                table: "hr_applicant",
                column: "source_id",
                principalTable: "utm_source",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_type_id_fkey",
                table: "hr_applicant",
                column: "type_id",
                principalTable: "hr_recruitment_degree",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_category_create_uid_fkey",
                table: "hr_applicant_category",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_category_write_uid_fkey",
                table: "hr_applicant_category",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_hr_skill_rel_hr_skill_id_fkey",
                table: "hr_applicant_hr_skill_rel",
                column: "hr_skill_id",
                principalTable: "hr_skill",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_refuse_reason_create_uid_fkey",
                table: "hr_applicant_refuse_reason",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_refuse_reason_write_uid_fkey",
                table: "hr_applicant_refuse_reason",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_refuse_reason_template_id_fkey",
                table: "hr_applicant_refuse_reason",
                column: "template_id",
                principalTable: "mail_template",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_res_users_interviewers_rel_res_users_id_fkey",
                table: "hr_applicant_res_users_interviewers_rel",
                column: "res_users_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_skill_create_uid_fkey",
                table: "hr_applicant_skill",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_skill_write_uid_fkey",
                table: "hr_applicant_skill",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_skill_skill_id_fkey",
                table: "hr_applicant_skill",
                column: "skill_id",
                principalTable: "hr_skill",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_skill_skill_level_id_fkey",
                table: "hr_applicant_skill",
                column: "skill_level_id",
                principalTable: "hr_skill_level",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_applicant_skill_skill_type_id_fkey",
                table: "hr_applicant_skill",
                column: "skill_type_id",
                principalTable: "hr_skill_type",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_attendance_create_uid_fkey",
                table: "hr_attendance",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_attendance_write_uid_fkey",
                table: "hr_attendance",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_attendance_employee_id_fkey",
                table: "hr_attendance",
                column: "employee_id",
                principalTable: "hr_employee",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "hr_attendance_overtime_create_uid_fkey",
                table: "hr_attendance_overtime",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_attendance_overtime_write_uid_fkey",
                table: "hr_attendance_overtime",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_attendance_overtime_employee_id_fkey",
                table: "hr_attendance_overtime",
                column: "employee_id",
                principalTable: "hr_employee",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "hr_contract_company_id_fkey",
                table: "hr_contract",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_contract_contract_type_id_fkey",
                table: "hr_contract",
                column: "contract_type_id",
                principalTable: "hr_contract_type",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_contract_create_uid_fkey",
                table: "hr_contract",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_contract_hr_responsible_id_fkey",
                table: "hr_contract",
                column: "hr_responsible_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_contract_write_uid_fkey",
                table: "hr_contract",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_contract_department_id_fkey",
                table: "hr_contract",
                column: "department_id",
                principalTable: "hr_department",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_contract_employee_id_fkey",
                table: "hr_contract",
                column: "employee_id",
                principalTable: "hr_employee",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_contract_job_id_fkey",
                table: "hr_contract",
                column: "job_id",
                principalTable: "hr_job",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_contract_message_main_attachment_id_fkey",
                table: "hr_contract",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_contract_resource_calendar_id_fkey",
                table: "hr_contract",
                column: "resource_calendar_id",
                principalTable: "resource_calendar",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_contract_structure_type_id_fkey",
                table: "hr_contract",
                column: "structure_type_id",
                principalTable: "hr_payroll_structure_type",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_contract_type_create_uid_fkey",
                table: "hr_contract_type",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_contract_type_write_uid_fkey",
                table: "hr_contract_type",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_department_company_id_fkey",
                table: "hr_department",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_department_create_uid_fkey",
                table: "hr_department",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_department_manager_id_fkey",
                table: "hr_department",
                column: "manager_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_department_write_uid_fkey",
                table: "hr_department",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_department_message_main_attachment_id_fkey",
                table: "hr_department",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_department_hr_leave_stress_day_r_hr_leave_stress_day_id_fkey",
                table: "hr_department_hr_leave_stress_day_rel",
                column: "hr_leave_stress_day_id",
                principalTable: "hr_leave_stress_day",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "hr_department_mail_channel_rel_mail_channel_id_fkey",
                table: "hr_department_mail_channel_rel",
                column: "mail_channel_id",
                principalTable: "mail_channel",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "hr_departure_reason_create_uid_fkey",
                table: "hr_departure_reason",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_departure_reason_write_uid_fkey",
                table: "hr_departure_reason",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_departure_wizard_create_uid_fkey",
                table: "hr_departure_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_departure_wizard_write_uid_fkey",
                table: "hr_departure_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_departure_wizard_employee_id_fkey",
                table: "hr_departure_wizard",
                column: "employee_id",
                principalTable: "hr_employee",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_address_home_id_fkey",
                table: "hr_employee",
                column: "address_home_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_address_id_fkey",
                table: "hr_employee",
                column: "address_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_work_contact_id_fkey",
                table: "hr_employee",
                column: "work_contact_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_bank_account_id_fkey",
                table: "hr_employee",
                column: "bank_account_id",
                principalTable: "res_partner_bank",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_company_id_fkey",
                table: "hr_employee",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_country_id_fkey",
                table: "hr_employee",
                column: "country_id",
                principalTable: "res_country",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_country_of_birth_fkey",
                table: "hr_employee",
                column: "country_of_birth",
                principalTable: "res_country",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_create_uid_fkey",
                table: "hr_employee",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_expense_manager_id_fkey",
                table: "hr_employee",
                column: "expense_manager_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_leave_manager_id_fkey",
                table: "hr_employee",
                column: "leave_manager_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_user_id_fkey",
                table: "hr_employee",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_write_uid_fkey",
                table: "hr_employee",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_job_id_fkey",
                table: "hr_employee",
                column: "job_id",
                principalTable: "hr_job",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_message_main_attachment_id_fkey",
                table: "hr_employee",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_resource_calendar_id_fkey",
                table: "hr_employee",
                column: "resource_calendar_id",
                principalTable: "resource_calendar",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_resource_id_fkey",
                table: "hr_employee",
                column: "resource_id",
                principalTable: "resource_resource",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_work_location_id_fkey",
                table: "hr_employee",
                column: "work_location_id",
                principalTable: "hr_work_location",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_category_create_uid_fkey",
                table: "hr_employee_category",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_category_write_uid_fkey",
                table: "hr_employee_category",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_hr_leave_allocation_rel_hr_leave_allocation_id_fkey",
                table: "hr_employee_hr_leave_allocation_rel",
                column: "hr_leave_allocation_id",
                principalTable: "hr_leave_allocation",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_hr_leave_rel_hr_leave_id_fkey",
                table: "hr_employee_hr_leave_rel",
                column: "hr_leave_id",
                principalTable: "hr_leave",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_hr_plan_wizard_rel_employee_id_fkey",
                table: "hr_employee_hr_plan_wizard_rel",
                column: "employee_id",
                principalTable: "hr_plan_wizard",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_hr_skill_rel_hr_skill_id_fkey",
                table: "hr_employee_hr_skill_rel",
                column: "hr_skill_id",
                principalTable: "hr_skill",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_pos_config_rel_pos_config_id_fkey",
                table: "hr_employee_pos_config_rel",
                column: "pos_config_id",
                principalTable: "pos_config",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_skill_create_uid_fkey",
                table: "hr_employee_skill",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_skill_write_uid_fkey",
                table: "hr_employee_skill",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_skill_skill_id_fkey",
                table: "hr_employee_skill",
                column: "skill_id",
                principalTable: "hr_skill",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_skill_skill_level_id_fkey",
                table: "hr_employee_skill",
                column: "skill_level_id",
                principalTable: "hr_skill_level",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_skill_skill_type_id_fkey",
                table: "hr_employee_skill",
                column: "skill_type_id",
                principalTable: "hr_skill_type",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_skill_log_create_uid_fkey",
                table: "hr_employee_skill_log",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_skill_log_write_uid_fkey",
                table: "hr_employee_skill_log",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_skill_log_skill_id_fkey",
                table: "hr_employee_skill_log",
                column: "skill_id",
                principalTable: "hr_skill",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_skill_log_skill_level_id_fkey",
                table: "hr_employee_skill_log",
                column: "skill_level_id",
                principalTable: "hr_skill_level",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_employee_skill_log_skill_type_id_fkey",
                table: "hr_employee_skill_log",
                column: "skill_type_id",
                principalTable: "hr_skill_type",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_company_id_fkey",
                table: "hr_expense",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_create_uid_fkey",
                table: "hr_expense",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_write_uid_fkey",
                table: "hr_expense",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_currency_id_fkey",
                table: "hr_expense",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_message_main_attachment_id_fkey",
                table: "hr_expense",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_product_id_fkey",
                table: "hr_expense",
                column: "product_id",
                principalTable: "product_product",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_product_uom_id_fkey",
                table: "hr_expense",
                column: "product_uom_id",
                principalTable: "uom_uom",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_sale_order_id_fkey",
                table: "hr_expense",
                column: "sale_order_id",
                principalTable: "sale_order",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_sheet_id_fkey",
                table: "hr_expense",
                column: "sheet_id",
                principalTable: "hr_expense_sheet",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_approve_duplicate_create_uid_fkey",
                table: "hr_expense_approve_duplicate",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_approve_duplicate_write_uid_fkey",
                table: "hr_expense_approve_duplicate",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_approve_duplicate_hr_expens_hr_expense_sheet_id_fkey",
                table: "hr_expense_approve_duplicate_hr_expense_sheet_rel",
                column: "hr_expense_sheet_id",
                principalTable: "hr_expense_sheet",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_hr_expense_refuse_w_hr_expense_refuse_wizard_id_fkey",
                table: "hr_expense_hr_expense_refuse_wizard_rel",
                column: "hr_expense_refuse_wizard_id",
                principalTable: "hr_expense_refuse_wizard",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_refuse_wizard_create_uid_fkey",
                table: "hr_expense_refuse_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_refuse_wizard_write_uid_fkey",
                table: "hr_expense_refuse_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_refuse_wizard_hr_expense_sheet_id_fkey",
                table: "hr_expense_refuse_wizard",
                column: "hr_expense_sheet_id",
                principalTable: "hr_expense_sheet",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_sheet_address_id_fkey",
                table: "hr_expense_sheet",
                column: "address_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_sheet_company_id_fkey",
                table: "hr_expense_sheet",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_sheet_create_uid_fkey",
                table: "hr_expense_sheet",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_sheet_user_id_fkey",
                table: "hr_expense_sheet",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_sheet_write_uid_fkey",
                table: "hr_expense_sheet",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_sheet_currency_id_fkey",
                table: "hr_expense_sheet",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_sheet_message_main_attachment_id_fkey",
                table: "hr_expense_sheet",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_split_company_id_fkey",
                table: "hr_expense_split",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_split_create_uid_fkey",
                table: "hr_expense_split",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_split_write_uid_fkey",
                table: "hr_expense_split",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_split_currency_id_fkey",
                table: "hr_expense_split",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_split_product_id_fkey",
                table: "hr_expense_split",
                column: "product_id",
                principalTable: "product_product",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_split_sale_order_id_fkey",
                table: "hr_expense_split",
                column: "sale_order_id",
                principalTable: "sale_order",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_split_wizard_id_fkey",
                table: "hr_expense_split",
                column: "wizard_id",
                principalTable: "hr_expense_split_wizard",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_split_wizard_create_uid_fkey",
                table: "hr_expense_split_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_expense_split_wizard_write_uid_fkey",
                table: "hr_expense_split_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_holidays_cancel_leave_create_uid_fkey",
                table: "hr_holidays_cancel_leave",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_holidays_cancel_leave_write_uid_fkey",
                table: "hr_holidays_cancel_leave",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_holidays_cancel_leave_leave_id_fkey",
                table: "hr_holidays_cancel_leave",
                column: "leave_id",
                principalTable: "hr_leave",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "hr_holidays_summary_employee_create_uid_fkey",
                table: "hr_holidays_summary_employee",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_holidays_summary_employee_write_uid_fkey",
                table: "hr_holidays_summary_employee",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_job_address_id_fkey",
                table: "hr_job",
                column: "address_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_job_alias_id_fkey",
                table: "hr_job",
                column: "alias_id",
                principalTable: "mail_alias",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_job_company_id_fkey",
                table: "hr_job",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_job_create_uid_fkey",
                table: "hr_job",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_job_hr_responsible_id_fkey",
                table: "hr_job",
                column: "hr_responsible_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_job_manager_id_fkey",
                table: "hr_job",
                column: "manager_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_job_user_id_fkey",
                table: "hr_job",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_job_write_uid_fkey",
                table: "hr_job",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_job_message_main_attachment_id_fkey",
                table: "hr_job",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_job_website_id_fkey",
                table: "hr_job",
                column: "website_id",
                principalTable: "website",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_job_extended_interviewer_res_users_res_users_id_fkey",
                table: "hr_job_extended_interviewer_res_users",
                column: "res_users_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "hr_job_hr_recruitment_stage_rel_hr_recruitment_stage_id_fkey",
                table: "hr_job_hr_recruitment_stage_rel",
                column: "hr_recruitment_stage_id",
                principalTable: "hr_recruitment_stage",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "hr_job_res_users_rel_res_users_id_fkey",
                table: "hr_job_res_users_rel",
                column: "res_users_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_create_uid_fkey",
                table: "hr_leave",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_manager_id_fkey",
                table: "hr_leave",
                column: "manager_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_user_id_fkey",
                table: "hr_leave",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_write_uid_fkey",
                table: "hr_leave",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_employee_company_id_fkey",
                table: "hr_leave",
                column: "employee_company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_mode_company_id_fkey",
                table: "hr_leave",
                column: "mode_company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_holiday_allocation_id_fkey",
                table: "hr_leave",
                column: "holiday_allocation_id",
                principalTable: "hr_leave_allocation",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_holiday_status_id_fkey",
                table: "hr_leave",
                column: "holiday_status_id",
                principalTable: "hr_leave_type",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_message_main_attachment_id_fkey",
                table: "hr_leave",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_accrual_level_accrual_plan_id_fkey",
                table: "hr_leave_accrual_level",
                column: "accrual_plan_id",
                principalTable: "hr_leave_accrual_plan",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_accrual_level_create_uid_fkey",
                table: "hr_leave_accrual_level",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_accrual_level_write_uid_fkey",
                table: "hr_leave_accrual_level",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_accrual_plan_create_uid_fkey",
                table: "hr_leave_accrual_plan",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_accrual_plan_write_uid_fkey",
                table: "hr_leave_accrual_plan",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_accrual_plan_time_off_type_id_fkey",
                table: "hr_leave_accrual_plan",
                column: "time_off_type_id",
                principalTable: "hr_leave_type",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_allocation_create_uid_fkey",
                table: "hr_leave_allocation",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_allocation_manager_id_fkey",
                table: "hr_leave_allocation",
                column: "manager_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_allocation_write_uid_fkey",
                table: "hr_leave_allocation",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_allocation_employee_company_id_fkey",
                table: "hr_leave_allocation",
                column: "employee_company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_allocation_mode_company_id_fkey",
                table: "hr_leave_allocation",
                column: "mode_company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_allocation_holiday_status_id_fkey",
                table: "hr_leave_allocation",
                column: "holiday_status_id",
                principalTable: "hr_leave_type",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_allocation_message_main_attachment_id_fkey",
                table: "hr_leave_allocation",
                column: "message_main_attachment_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_stress_day_company_id_fkey",
                table: "hr_leave_stress_day",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_stress_day_create_uid_fkey",
                table: "hr_leave_stress_day",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_stress_day_write_uid_fkey",
                table: "hr_leave_stress_day",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_stress_day_resource_calendar_id_fkey",
                table: "hr_leave_stress_day",
                column: "resource_calendar_id",
                principalTable: "resource_calendar",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_type_allocation_notif_subtype_id_fkey",
                table: "hr_leave_type",
                column: "allocation_notif_subtype_id",
                principalTable: "mail_message_subtype",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_type_leave_notif_subtype_id_fkey",
                table: "hr_leave_type",
                column: "leave_notif_subtype_id",
                principalTable: "mail_message_subtype",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_type_company_id_fkey",
                table: "hr_leave_type",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_type_create_uid_fkey",
                table: "hr_leave_type",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_type_responsible_id_fkey",
                table: "hr_leave_type",
                column: "responsible_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_type_write_uid_fkey",
                table: "hr_leave_type",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_leave_type_icon_id_fkey",
                table: "hr_leave_type",
                column: "icon_id",
                principalTable: "ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_payroll_structure_type_country_id_fkey",
                table: "hr_payroll_structure_type",
                column: "country_id",
                principalTable: "res_country",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_payroll_structure_type_create_uid_fkey",
                table: "hr_payroll_structure_type",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_payroll_structure_type_write_uid_fkey",
                table: "hr_payroll_structure_type",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_payroll_structure_type_default_resource_calendar_id_fkey",
                table: "hr_payroll_structure_type",
                column: "default_resource_calendar_id",
                principalTable: "resource_calendar",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_plan_company_id_fkey",
                table: "hr_plan",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_plan_create_uid_fkey",
                table: "hr_plan",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_plan_write_uid_fkey",
                table: "hr_plan",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_plan_activity_type_activity_type_id_fkey",
                table: "hr_plan_activity_type",
                column: "activity_type_id",
                principalTable: "mail_activity_type",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_plan_activity_type_company_id_fkey",
                table: "hr_plan_activity_type",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_plan_activity_type_create_uid_fkey",
                table: "hr_plan_activity_type",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_plan_activity_type_responsible_id_fkey",
                table: "hr_plan_activity_type",
                column: "responsible_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_plan_activity_type_write_uid_fkey",
                table: "hr_plan_activity_type",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_plan_wizard_create_uid_fkey",
                table: "hr_plan_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_plan_wizard_write_uid_fkey",
                table: "hr_plan_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_recruitment_degree_create_uid_fkey",
                table: "hr_recruitment_degree",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_recruitment_degree_write_uid_fkey",
                table: "hr_recruitment_degree",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_recruitment_source_alias_id_fkey",
                table: "hr_recruitment_source",
                column: "alias_id",
                principalTable: "mail_alias",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_recruitment_source_create_uid_fkey",
                table: "hr_recruitment_source",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_recruitment_source_write_uid_fkey",
                table: "hr_recruitment_source",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_recruitment_source_medium_id_fkey",
                table: "hr_recruitment_source",
                column: "medium_id",
                principalTable: "utm_medium",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_recruitment_source_source_id_fkey",
                table: "hr_recruitment_source",
                column: "source_id",
                principalTable: "utm_source",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_recruitment_stage_create_uid_fkey",
                table: "hr_recruitment_stage",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_recruitment_stage_write_uid_fkey",
                table: "hr_recruitment_stage",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_recruitment_stage_template_id_fkey",
                table: "hr_recruitment_stage",
                column: "template_id",
                principalTable: "mail_template",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_resume_line_create_uid_fkey",
                table: "hr_resume_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_resume_line_write_uid_fkey",
                table: "hr_resume_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_resume_line_line_type_id_fkey",
                table: "hr_resume_line",
                column: "line_type_id",
                principalTable: "hr_resume_line_type",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_resume_line_type_create_uid_fkey",
                table: "hr_resume_line_type",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_resume_line_type_write_uid_fkey",
                table: "hr_resume_line_type",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_skill_create_uid_fkey",
                table: "hr_skill",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_skill_write_uid_fkey",
                table: "hr_skill",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_skill_skill_type_id_fkey",
                table: "hr_skill",
                column: "skill_type_id",
                principalTable: "hr_skill_type",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "hr_skill_level_create_uid_fkey",
                table: "hr_skill_level",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_skill_level_write_uid_fkey",
                table: "hr_skill_level",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_skill_level_skill_type_id_fkey",
                table: "hr_skill_level",
                column: "skill_type_id",
                principalTable: "hr_skill_type",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "hr_skill_type_create_uid_fkey",
                table: "hr_skill_type",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_skill_type_write_uid_fkey",
                table: "hr_skill_type",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_work_location_address_id_fkey",
                table: "hr_work_location",
                column: "address_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_work_location_company_id_fkey",
                table: "hr_work_location",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "hr_work_location_create_uid_fkey",
                table: "hr_work_location",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "hr_work_location_write_uid_fkey",
                table: "hr_work_location",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "iap_account_create_uid_fkey",
                table: "iap_account",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "iap_account_write_uid_fkey",
                table: "iap_account",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "iap_account_res_company_rel_res_company_id_fkey",
                table: "iap_account_res_company_rel",
                column: "res_company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_act_client_binding_model_id_fkey",
                table: "ir_act_client",
                column: "binding_model_id",
                principalTable: "ir_model",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_act_client_create_uid_fkey",
                table: "ir_act_client",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_act_client_write_uid_fkey",
                table: "ir_act_client",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_act_report_xml_binding_model_id_fkey",
                table: "ir_act_report_xml",
                column: "binding_model_id",
                principalTable: "ir_model",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_act_report_xml_create_uid_fkey",
                table: "ir_act_report_xml",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_act_report_xml_write_uid_fkey",
                table: "ir_act_report_xml",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_act_report_xml_paperformat_id_fkey",
                table: "ir_act_report_xml",
                column: "paperformat_id",
                principalTable: "report_paperformat",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_act_server_activity_type_id_fkey",
                table: "ir_act_server",
                column: "activity_type_id",
                principalTable: "mail_activity_type",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "ir_act_server_activity_user_id_fkey",
                table: "ir_act_server",
                column: "activity_user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_act_server_create_uid_fkey",
                table: "ir_act_server",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_act_server_write_uid_fkey",
                table: "ir_act_server",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_act_server_binding_model_id_fkey",
                table: "ir_act_server",
                column: "binding_model_id",
                principalTable: "ir_model",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_act_server_crud_model_id_fkey",
                table: "ir_act_server",
                column: "crud_model_id",
                principalTable: "ir_model",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_act_server_model_id_fkey",
                table: "ir_act_server",
                column: "model_id",
                principalTable: "ir_model",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_act_server_link_field_id_fkey",
                table: "ir_act_server",
                column: "link_field_id",
                principalTable: "ir_model_fields",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_act_server_sms_template_id_fkey",
                table: "ir_act_server",
                column: "sms_template_id",
                principalTable: "sms_template",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_act_server_template_id_fkey",
                table: "ir_act_server",
                column: "template_id",
                principalTable: "mail_template",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_act_server_group_rel_gid_fkey",
                table: "ir_act_server_group_rel",
                column: "gid",
                principalTable: "res_groups",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_act_server_res_partner_rel_res_partner_id_fkey",
                table: "ir_act_server_res_partner_rel",
                column: "res_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_act_url_binding_model_id_fkey",
                table: "ir_act_url",
                column: "binding_model_id",
                principalTable: "ir_model",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_act_url_create_uid_fkey",
                table: "ir_act_url",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_act_url_write_uid_fkey",
                table: "ir_act_url",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_act_window_binding_model_id_fkey",
                table: "ir_act_window",
                column: "binding_model_id",
                principalTable: "ir_model",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_act_window_create_uid_fkey",
                table: "ir_act_window",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_act_window_write_uid_fkey",
                table: "ir_act_window",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_act_window_search_view_id_fkey",
                table: "ir_act_window",
                column: "search_view_id",
                principalTable: "ir_ui_view",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_act_window_view_id_fkey",
                table: "ir_act_window",
                column: "view_id",
                principalTable: "ir_ui_view",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_act_window_group_rel_gid_fkey",
                table: "ir_act_window_group_rel",
                column: "gid",
                principalTable: "res_groups",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_act_window_view_create_uid_fkey",
                table: "ir_act_window_view",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_act_window_view_write_uid_fkey",
                table: "ir_act_window_view",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_act_window_view_view_id_fkey",
                table: "ir_act_window_view",
                column: "view_id",
                principalTable: "ir_ui_view",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_actions_binding_model_id_fkey",
                table: "ir_actions",
                column: "binding_model_id",
                principalTable: "ir_model",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_actions_create_uid_fkey",
                table: "ir_actions",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_actions_write_uid_fkey",
                table: "ir_actions",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_actions_todo_create_uid_fkey",
                table: "ir_actions_todo",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_actions_todo_write_uid_fkey",
                table: "ir_actions_todo",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_asset_create_uid_fkey",
                table: "ir_asset",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_asset_write_uid_fkey",
                table: "ir_asset",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_asset_theme_template_id_fkey",
                table: "ir_asset",
                column: "theme_template_id",
                principalTable: "theme_ir_asset",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_asset_website_id_fkey",
                table: "ir_asset",
                column: "website_id",
                principalTable: "website",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_attachment_company_id_fkey",
                table: "ir_attachment",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_attachment_create_uid_fkey",
                table: "ir_attachment",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_attachment_write_uid_fkey",
                table: "ir_attachment",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_attachment_theme_template_id_fkey",
                table: "ir_attachment",
                column: "theme_template_id",
                principalTable: "theme_ir_attachment",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_attachment_website_id_fkey",
                table: "ir_attachment",
                column: "website_id",
                principalTable: "website",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_config_parameter_create_uid_fkey",
                table: "ir_config_parameter",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_config_parameter_write_uid_fkey",
                table: "ir_config_parameter",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_cron_create_uid_fkey",
                table: "ir_cron",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_cron_user_id_fkey",
                table: "ir_cron",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "ir_cron_write_uid_fkey",
                table: "ir_cron",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_cron_trigger_create_uid_fkey",
                table: "ir_cron_trigger",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_cron_trigger_write_uid_fkey",
                table: "ir_cron_trigger",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_default_company_id_fkey",
                table: "ir_default",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_default_create_uid_fkey",
                table: "ir_default",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_default_user_id_fkey",
                table: "ir_default",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_default_write_uid_fkey",
                table: "ir_default",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_default_field_id_fkey",
                table: "ir_default",
                column: "field_id",
                principalTable: "ir_model_fields",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_demo_create_uid_fkey",
                table: "ir_demo",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_demo_write_uid_fkey",
                table: "ir_demo",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_demo_failure_create_uid_fkey",
                table: "ir_demo_failure",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_demo_failure_write_uid_fkey",
                table: "ir_demo_failure",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_demo_failure_module_id_fkey",
                table: "ir_demo_failure",
                column: "module_id",
                principalTable: "ir_module_module",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_demo_failure_wizard_id_fkey",
                table: "ir_demo_failure",
                column: "wizard_id",
                principalTable: "ir_demo_failure_wizard",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_demo_failure_wizard_create_uid_fkey",
                table: "ir_demo_failure_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_demo_failure_wizard_write_uid_fkey",
                table: "ir_demo_failure_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_exports_create_uid_fkey",
                table: "ir_exports",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_exports_write_uid_fkey",
                table: "ir_exports",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_exports_line_create_uid_fkey",
                table: "ir_exports_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_exports_line_write_uid_fkey",
                table: "ir_exports_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_filters_create_uid_fkey",
                table: "ir_filters",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_filters_user_id_fkey",
                table: "ir_filters",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_filters_write_uid_fkey",
                table: "ir_filters",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_mail_server_create_uid_fkey",
                table: "ir_mail_server",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_mail_server_write_uid_fkey",
                table: "ir_mail_server",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_model_create_uid_fkey",
                table: "ir_model",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_model_write_uid_fkey",
                table: "ir_model",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_model_website_form_default_field_id_fkey",
                table: "ir_model",
                column: "website_form_default_field_id",
                principalTable: "ir_model_fields",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_model_access_create_uid_fkey",
                table: "ir_model_access",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_model_access_write_uid_fkey",
                table: "ir_model_access",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_model_access_group_id_fkey",
                table: "ir_model_access",
                column: "group_id",
                principalTable: "res_groups",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "ir_model_constraint_create_uid_fkey",
                table: "ir_model_constraint",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_model_constraint_write_uid_fkey",
                table: "ir_model_constraint",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_model_constraint_module_fkey",
                table: "ir_model_constraint",
                column: "module",
                principalTable: "ir_module_module",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_model_data_create_uid_fkey",
                table: "ir_model_data",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_model_data_write_uid_fkey",
                table: "ir_model_data",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_model_fields_create_uid_fkey",
                table: "ir_model_fields",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_model_fields_write_uid_fkey",
                table: "ir_model_fields",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_model_fields_group_rel_group_id_fkey",
                table: "ir_model_fields_group_rel",
                column: "group_id",
                principalTable: "res_groups",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_model_fields_selection_create_uid_fkey",
                table: "ir_model_fields_selection",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_model_fields_selection_write_uid_fkey",
                table: "ir_model_fields_selection",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_model_relation_create_uid_fkey",
                table: "ir_model_relation",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_model_relation_write_uid_fkey",
                table: "ir_model_relation",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_model_relation_module_fkey",
                table: "ir_model_relation",
                column: "module",
                principalTable: "ir_module_module",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_module_category_create_uid_fkey",
                table: "ir_module_category",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_module_category_write_uid_fkey",
                table: "ir_module_category",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_module_module_create_uid_fkey",
                table: "ir_module_module",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_module_module_write_uid_fkey",
                table: "ir_module_module",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_module_module_exclusion_create_uid_fkey",
                table: "ir_module_module_exclusion",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_module_module_exclusion_write_uid_fkey",
                table: "ir_module_module_exclusion",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_property_company_id_fkey",
                table: "ir_property",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_property_create_uid_fkey",
                table: "ir_property",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_property_write_uid_fkey",
                table: "ir_property",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_rule_create_uid_fkey",
                table: "ir_rule",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_rule_write_uid_fkey",
                table: "ir_rule",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_sequence_company_id_fkey",
                table: "ir_sequence",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_sequence_create_uid_fkey",
                table: "ir_sequence",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_sequence_write_uid_fkey",
                table: "ir_sequence",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_sequence_date_range_create_uid_fkey",
                table: "ir_sequence_date_range",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_sequence_date_range_write_uid_fkey",
                table: "ir_sequence_date_range",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_server_object_lines_create_uid_fkey",
                table: "ir_server_object_lines",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_server_object_lines_write_uid_fkey",
                table: "ir_server_object_lines",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_ui_menu_create_uid_fkey",
                table: "ir_ui_menu",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_ui_menu_write_uid_fkey",
                table: "ir_ui_menu",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_ui_menu_group_rel_gid_fkey",
                table: "ir_ui_menu_group_rel",
                column: "gid",
                principalTable: "res_groups",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_ui_view_create_uid_fkey",
                table: "ir_ui_view",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_ui_view_write_uid_fkey",
                table: "ir_ui_view",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_ui_view_theme_template_id_fkey",
                table: "ir_ui_view",
                column: "theme_template_id",
                principalTable: "theme_ir_ui_view",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_ui_view_website_id_fkey",
                table: "ir_ui_view",
                column: "website_id",
                principalTable: "website",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_ui_view_custom_create_uid_fkey",
                table: "ir_ui_view_custom",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_ui_view_custom_user_id_fkey",
                table: "ir_ui_view_custom",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "ir_ui_view_custom_write_uid_fkey",
                table: "ir_ui_view_custom",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "ir_ui_view_group_rel_group_id_fkey",
                table: "ir_ui_view_group_rel",
                column: "group_id",
                principalTable: "res_groups",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "job_favorite_user_rel_user_id_fkey",
                table: "job_favorite_user_rel",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "lot_label_layout_create_uid_fkey",
                table: "lot_label_layout",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lot_label_layout_write_uid_fkey",
                table: "lot_label_layout",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lot_label_layout_stock_picking_rel_stock_picking_id_fkey",
                table: "lot_label_layout_stock_picking_rel",
                column: "stock_picking_id",
                principalTable: "stock_picking",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "lunch_alert_create_uid_fkey",
                table: "lunch_alert",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_alert_write_uid_fkey",
                table: "lunch_alert",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_alert_lunch_location_rel_lunch_location_id_fkey",
                table: "lunch_alert_lunch_location_rel",
                column: "lunch_location_id",
                principalTable: "lunch_location",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "lunch_cashmove_create_uid_fkey",
                table: "lunch_cashmove",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_cashmove_user_id_fkey",
                table: "lunch_cashmove",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_cashmove_write_uid_fkey",
                table: "lunch_cashmove",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_cashmove_currency_id_fkey",
                table: "lunch_cashmove",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "lunch_location_company_id_fkey",
                table: "lunch_location",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_location_create_uid_fkey",
                table: "lunch_location",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_location_write_uid_fkey",
                table: "lunch_location",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_location_lunch_supplier_rel_lunch_supplier_id_fkey",
                table: "lunch_location_lunch_supplier_rel",
                column: "lunch_supplier_id",
                principalTable: "lunch_supplier",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "lunch_order_category_id_fkey",
                table: "lunch_order",
                column: "category_id",
                principalTable: "lunch_product_category",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_order_company_id_fkey",
                table: "lunch_order",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_order_create_uid_fkey",
                table: "lunch_order",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_order_user_id_fkey",
                table: "lunch_order",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_order_write_uid_fkey",
                table: "lunch_order",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_order_currency_id_fkey",
                table: "lunch_order",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_order_product_id_fkey",
                table: "lunch_order",
                column: "product_id",
                principalTable: "lunch_product",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "lunch_order_supplier_id_fkey",
                table: "lunch_order",
                column: "supplier_id",
                principalTable: "lunch_supplier",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_order_topping_topping_id_fkey",
                table: "lunch_order_topping",
                column: "topping_id",
                principalTable: "lunch_topping",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "lunch_product_category_id_fkey",
                table: "lunch_product",
                column: "category_id",
                principalTable: "lunch_product_category",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "lunch_product_company_id_fkey",
                table: "lunch_product",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_product_create_uid_fkey",
                table: "lunch_product",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_product_write_uid_fkey",
                table: "lunch_product",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_product_supplier_id_fkey",
                table: "lunch_product",
                column: "supplier_id",
                principalTable: "lunch_supplier",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "lunch_product_category_company_id_fkey",
                table: "lunch_product_category",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_product_category_create_uid_fkey",
                table: "lunch_product_category",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_product_category_write_uid_fkey",
                table: "lunch_product_category",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_product_favorite_user_rel_user_id_fkey",
                table: "lunch_product_favorite_user_rel",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "lunch_supplier_company_id_fkey",
                table: "lunch_supplier",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_supplier_create_uid_fkey",
                table: "lunch_supplier",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_supplier_responsible_id_fkey",
                table: "lunch_supplier",
                column: "responsible_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_supplier_write_uid_fkey",
                table: "lunch_supplier",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_supplier_partner_id_fkey",
                table: "lunch_supplier",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "lunch_topping_company_id_fkey",
                table: "lunch_topping",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_topping_create_uid_fkey",
                table: "lunch_topping",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "lunch_topping_write_uid_fkey",
                table: "lunch_topping",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_activity_activity_type_id_fkey",
                table: "mail_activity",
                column: "activity_type_id",
                principalTable: "mail_activity_type",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mail_activity_previous_activity_type_id_fkey",
                table: "mail_activity",
                column: "previous_activity_type_id",
                principalTable: "mail_activity_type",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_activity_recommended_activity_type_id_fkey",
                table: "mail_activity",
                column: "recommended_activity_type_id",
                principalTable: "mail_activity_type",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_activity_create_uid_fkey",
                table: "mail_activity",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_activity_user_id_fkey",
                table: "mail_activity",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mail_activity_write_uid_fkey",
                table: "mail_activity",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_activity_note_id_fkey",
                table: "mail_activity",
                column: "note_id",
                principalTable: "note_note",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mail_activity_request_partner_id_fkey",
                table: "mail_activity",
                column: "request_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_activity_rel_activity_id_fkey",
                table: "mail_activity_rel",
                column: "activity_id",
                principalTable: "mail_activity_type",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mail_activity_rel_recommended_id_fkey",
                table: "mail_activity_rel",
                column: "recommended_id",
                principalTable: "mail_activity_type",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mail_activity_type_create_uid_fkey",
                table: "mail_activity_type",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_activity_type_default_user_id_fkey",
                table: "mail_activity_type",
                column: "default_user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_activity_type_write_uid_fkey",
                table: "mail_activity_type",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_activity_type_mail_template_rel_mail_template_id_fkey",
                table: "mail_activity_type_mail_template_rel",
                column: "mail_template_id",
                principalTable: "mail_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mail_alias_alias_user_id_fkey",
                table: "mail_alias",
                column: "alias_user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_alias_create_uid_fkey",
                table: "mail_alias",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_alias_write_uid_fkey",
                table: "mail_alias",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_blacklist_create_uid_fkey",
                table: "mail_blacklist",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_blacklist_write_uid_fkey",
                table: "mail_blacklist",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_blacklist_remove_create_uid_fkey",
                table: "mail_blacklist_remove",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_blacklist_remove_write_uid_fkey",
                table: "mail_blacklist_remove",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_channel_create_uid_fkey",
                table: "mail_channel",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_channel_write_uid_fkey",
                table: "mail_channel",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_channel_group_public_id_fkey",
                table: "mail_channel",
                column: "group_public_id",
                principalTable: "res_groups",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_channel_member_create_uid_fkey",
                table: "mail_channel_member",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_channel_member_write_uid_fkey",
                table: "mail_channel_member",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_channel_member_fetched_message_id_fkey",
                table: "mail_channel_member",
                column: "fetched_message_id",
                principalTable: "mail_message",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_channel_member_seen_message_id_fkey",
                table: "mail_channel_member",
                column: "seen_message_id",
                principalTable: "mail_message",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_channel_member_guest_id_fkey",
                table: "mail_channel_member",
                column: "guest_id",
                principalTable: "mail_guest",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mail_channel_member_partner_id_fkey",
                table: "mail_channel_member",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mail_channel_member_rtc_inviting_session_id_fkey",
                table: "mail_channel_member",
                column: "rtc_inviting_session_id",
                principalTable: "mail_channel_rtc_session",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_channel_res_groups_rel_res_groups_id_fkey",
                table: "mail_channel_res_groups_rel",
                column: "res_groups_id",
                principalTable: "res_groups",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mail_channel_rtc_session_create_uid_fkey",
                table: "mail_channel_rtc_session",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_channel_rtc_session_write_uid_fkey",
                table: "mail_channel_rtc_session",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_compose_message_author_id_fkey",
                table: "mail_compose_message",
                column: "author_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_compose_message_create_uid_fkey",
                table: "mail_compose_message",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_compose_message_write_uid_fkey",
                table: "mail_compose_message",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_compose_message_parent_id_fkey",
                table: "mail_compose_message",
                column: "parent_id",
                principalTable: "mail_message",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_compose_message_subtype_id_fkey",
                table: "mail_compose_message",
                column: "subtype_id",
                principalTable: "mail_message_subtype",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_compose_message_template_id_fkey",
                table: "mail_compose_message",
                column: "template_id",
                principalTable: "mail_template",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_compose_message_res_partner_rel_partner_id_fkey",
                table: "mail_compose_message_res_partner_rel",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mail_followers_partner_id_fkey",
                table: "mail_followers",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mail_followers_mail_message_subtyp_mail_message_subtype_id_fkey",
                table: "mail_followers_mail_message_subtype_rel",
                column: "mail_message_subtype_id",
                principalTable: "mail_message_subtype",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mail_gateway_allowed_create_uid_fkey",
                table: "mail_gateway_allowed",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_gateway_allowed_write_uid_fkey",
                table: "mail_gateway_allowed",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_guest_country_id_fkey",
                table: "mail_guest",
                column: "country_id",
                principalTable: "res_country",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_guest_create_uid_fkey",
                table: "mail_guest",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_guest_write_uid_fkey",
                table: "mail_guest",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_ice_server_create_uid_fkey",
                table: "mail_ice_server",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_ice_server_write_uid_fkey",
                table: "mail_ice_server",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_link_preview_create_uid_fkey",
                table: "mail_link_preview",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_link_preview_write_uid_fkey",
                table: "mail_link_preview",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_link_preview_message_id_fkey",
                table: "mail_link_preview",
                column: "message_id",
                principalTable: "mail_message",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mail_mail_create_uid_fkey",
                table: "mail_mail",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_mail_write_uid_fkey",
                table: "mail_mail",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_mail_mail_message_id_fkey",
                table: "mail_mail",
                column: "mail_message_id",
                principalTable: "mail_message",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mail_mail_res_partner_rel_res_partner_id_fkey",
                table: "mail_mail_res_partner_rel",
                column: "res_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mail_message_author_id_fkey",
                table: "mail_message",
                column: "author_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_message_create_uid_fkey",
                table: "mail_message",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_message_write_uid_fkey",
                table: "mail_message",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_message_subtype_id_fkey",
                table: "mail_message",
                column: "subtype_id",
                principalTable: "mail_message_subtype",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_message_reaction_partner_id_fkey",
                table: "mail_message_reaction",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mail_message_res_partner_rel_res_partner_id_fkey",
                table: "mail_message_res_partner_rel",
                column: "res_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mail_message_res_partner_starred_rel_res_partner_id_fkey",
                table: "mail_message_res_partner_starred_rel",
                column: "res_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mail_message_schedule_create_uid_fkey",
                table: "mail_message_schedule",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_message_schedule_write_uid_fkey",
                table: "mail_message_schedule",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_message_subtype_create_uid_fkey",
                table: "mail_message_subtype",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_message_subtype_write_uid_fkey",
                table: "mail_message_subtype",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_notification_author_id_fkey",
                table: "mail_notification",
                column: "author_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_notification_res_partner_id_fkey",
                table: "mail_notification",
                column: "res_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mail_notification_letter_id_fkey",
                table: "mail_notification",
                column: "letter_id",
                principalTable: "snailmail_letter",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mail_notification_sms_id_fkey",
                table: "mail_notification",
                column: "sms_id",
                principalTable: "sms_sms",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_notification_mail_resend_messa_mail_resend_message_id_fkey",
                table: "mail_notification_mail_resend_message_rel",
                column: "mail_resend_message_id",
                principalTable: "mail_resend_message",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mail_resend_message_create_uid_fkey",
                table: "mail_resend_message",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_resend_message_write_uid_fkey",
                table: "mail_resend_message",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_resend_partner_create_uid_fkey",
                table: "mail_resend_partner",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_resend_partner_write_uid_fkey",
                table: "mail_resend_partner",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_resend_partner_partner_id_fkey",
                table: "mail_resend_partner",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mail_shortcode_create_uid_fkey",
                table: "mail_shortcode",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_shortcode_write_uid_fkey",
                table: "mail_shortcode",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_template_create_uid_fkey",
                table: "mail_template",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_template_write_uid_fkey",
                table: "mail_template",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_template_mail_template_reset_r_mail_template_reset_id_fkey",
                table: "mail_template_mail_template_reset_rel",
                column: "mail_template_reset_id",
                principalTable: "mail_template_reset",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mail_template_preview_create_uid_fkey",
                table: "mail_template_preview",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_template_preview_write_uid_fkey",
                table: "mail_template_preview",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_template_reset_create_uid_fkey",
                table: "mail_template_reset",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_template_reset_write_uid_fkey",
                table: "mail_template_reset",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_tracking_value_create_uid_fkey",
                table: "mail_tracking_value",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_tracking_value_write_uid_fkey",
                table: "mail_tracking_value",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_tracking_value_currency_id_fkey",
                table: "mail_tracking_value",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_wizard_invite_create_uid_fkey",
                table: "mail_wizard_invite",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_wizard_invite_write_uid_fkey",
                table: "mail_wizard_invite",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mail_wizard_invite_res_partner_rel_res_partner_id_fkey",
                table: "mail_wizard_invite_res_partner_rel",
                column: "res_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "maintenance_equipment_category_id_fkey",
                table: "maintenance_equipment",
                column: "category_id",
                principalTable: "maintenance_equipment_category",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "maintenance_equipment_company_id_fkey",
                table: "maintenance_equipment",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "maintenance_equipment_create_uid_fkey",
                table: "maintenance_equipment",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "maintenance_equipment_owner_user_id_fkey",
                table: "maintenance_equipment",
                column: "owner_user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "maintenance_equipment_technician_user_id_fkey",
                table: "maintenance_equipment",
                column: "technician_user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "maintenance_equipment_write_uid_fkey",
                table: "maintenance_equipment",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "maintenance_equipment_maintenance_team_id_fkey",
                table: "maintenance_equipment",
                column: "maintenance_team_id",
                principalTable: "maintenance_team",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "maintenance_equipment_partner_id_fkey",
                table: "maintenance_equipment",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "maintenance_equipment_category_company_id_fkey",
                table: "maintenance_equipment_category",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "maintenance_equipment_category_create_uid_fkey",
                table: "maintenance_equipment_category",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "maintenance_equipment_category_technician_user_id_fkey",
                table: "maintenance_equipment_category",
                column: "technician_user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "maintenance_equipment_category_write_uid_fkey",
                table: "maintenance_equipment_category",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "maintenance_request_company_id_fkey",
                table: "maintenance_request",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "maintenance_request_create_uid_fkey",
                table: "maintenance_request",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "maintenance_request_owner_user_id_fkey",
                table: "maintenance_request",
                column: "owner_user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "maintenance_request_user_id_fkey",
                table: "maintenance_request",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "maintenance_request_write_uid_fkey",
                table: "maintenance_request",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "maintenance_request_maintenance_team_id_fkey",
                table: "maintenance_request",
                column: "maintenance_team_id",
                principalTable: "maintenance_team",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "maintenance_request_stage_id_fkey",
                table: "maintenance_request",
                column: "stage_id",
                principalTable: "maintenance_stage",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "maintenance_stage_create_uid_fkey",
                table: "maintenance_stage",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "maintenance_stage_write_uid_fkey",
                table: "maintenance_stage",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "maintenance_team_company_id_fkey",
                table: "maintenance_team",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "maintenance_team_create_uid_fkey",
                table: "maintenance_team",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "maintenance_team_write_uid_fkey",
                table: "maintenance_team",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "maintenance_team_users_rel_res_users_id_fkey",
                table: "maintenance_team_users_rel",
                column: "res_users_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mrp_bom_company_id_fkey",
                table: "mrp_bom",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_bom_create_uid_fkey",
                table: "mrp_bom",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_bom_write_uid_fkey",
                table: "mrp_bom",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_bom_picking_type_id_fkey",
                table: "mrp_bom",
                column: "picking_type_id",
                principalTable: "stock_picking_type",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_bom_product_id_fkey",
                table: "mrp_bom",
                column: "product_id",
                principalTable: "product_product",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_bom_product_tmpl_id_fkey",
                table: "mrp_bom",
                column: "product_tmpl_id",
                principalTable: "product_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_bom_product_uom_id_fkey",
                table: "mrp_bom",
                column: "product_uom_id",
                principalTable: "uom_uom",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_bom_byproduct_company_id_fkey",
                table: "mrp_bom_byproduct",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_bom_byproduct_create_uid_fkey",
                table: "mrp_bom_byproduct",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_bom_byproduct_write_uid_fkey",
                table: "mrp_bom_byproduct",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_bom_byproduct_operation_id_fkey",
                table: "mrp_bom_byproduct",
                column: "operation_id",
                principalTable: "mrp_routing_workcenter",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_bom_byproduct_product_id_fkey",
                table: "mrp_bom_byproduct",
                column: "product_id",
                principalTable: "product_product",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_bom_byproduct_product_uom_id_fkey",
                table: "mrp_bom_byproduct",
                column: "product_uom_id",
                principalTable: "uom_uom",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_bom_byproduct_product_tem_product_template_attribute_v_fkey",
                table: "mrp_bom_byproduct_product_template_attribute_value_rel",
                column: "product_template_attribute_value_id",
                principalTable: "product_template_attribute_value",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_bom_line_company_id_fkey",
                table: "mrp_bom_line",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_bom_line_create_uid_fkey",
                table: "mrp_bom_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_bom_line_write_uid_fkey",
                table: "mrp_bom_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_bom_line_operation_id_fkey",
                table: "mrp_bom_line",
                column: "operation_id",
                principalTable: "mrp_routing_workcenter",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_bom_line_product_id_fkey",
                table: "mrp_bom_line",
                column: "product_id",
                principalTable: "product_product",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_bom_line_product_tmpl_id_fkey",
                table: "mrp_bom_line",
                column: "product_tmpl_id",
                principalTable: "product_template",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_bom_line_product_uom_id_fkey",
                table: "mrp_bom_line",
                column: "product_uom_id",
                principalTable: "uom_uom",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_bom_line_product_template_product_template_attribute_v_fkey",
                table: "mrp_bom_line_product_template_attribute_value_rel",
                column: "product_template_attribute_value_id",
                principalTable: "product_template_attribute_value",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_consumption_warning_create_uid_fkey",
                table: "mrp_consumption_warning",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_consumption_warning_write_uid_fkey",
                table: "mrp_consumption_warning",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_consumption_warning_line_create_uid_fkey",
                table: "mrp_consumption_warning_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_consumption_warning_line_write_uid_fkey",
                table: "mrp_consumption_warning_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_consumption_warning_line_mrp_production_id_fkey",
                table: "mrp_consumption_warning_line",
                column: "mrp_production_id",
                principalTable: "mrp_production",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mrp_consumption_warning_line_product_id_fkey",
                table: "mrp_consumption_warning_line",
                column: "product_id",
                principalTable: "product_product",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mrp_consumption_warning_mrp_production_r_mrp_production_id_fkey",
                table: "mrp_consumption_warning_mrp_production_rel",
                column: "mrp_production_id",
                principalTable: "mrp_production",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mrp_document_create_uid_fkey",
                table: "mrp_document",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_document_write_uid_fkey",
                table: "mrp_document",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_immediate_production_create_uid_fkey",
                table: "mrp_immediate_production",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_immediate_production_write_uid_fkey",
                table: "mrp_immediate_production",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_immediate_production_line_create_uid_fkey",
                table: "mrp_immediate_production_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_immediate_production_line_write_uid_fkey",
                table: "mrp_immediate_production_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_immediate_production_line_production_id_fkey",
                table: "mrp_immediate_production_line",
                column: "production_id",
                principalTable: "mrp_production",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_company_id_fkey",
                table: "mrp_production",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_create_uid_fkey",
                table: "mrp_production",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_user_id_fkey",
                table: "mrp_production",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_write_uid_fkey",
                table: "mrp_production",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_location_dest_id_fkey",
                table: "mrp_production",
                column: "location_dest_id",
                principalTable: "stock_location",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_location_src_id_fkey",
                table: "mrp_production",
                column: "location_src_id",
                principalTable: "stock_location",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_production_location_id_fkey",
                table: "mrp_production",
                column: "production_location_id",
                principalTable: "stock_location",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_lot_producing_id_fkey",
                table: "mrp_production",
                column: "lot_producing_id",
                principalTable: "stock_lot",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_orderpoint_id_fkey",
                table: "mrp_production",
                column: "orderpoint_id",
                principalTable: "stock_warehouse_orderpoint",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_picking_type_id_fkey",
                table: "mrp_production",
                column: "picking_type_id",
                principalTable: "stock_picking_type",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_procurement_group_id_fkey",
                table: "mrp_production",
                column: "procurement_group_id",
                principalTable: "procurement_group",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_product_id_fkey",
                table: "mrp_production",
                column: "product_id",
                principalTable: "product_product",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_product_uom_id_fkey",
                table: "mrp_production",
                column: "product_uom_id",
                principalTable: "uom_uom",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_backorder_create_uid_fkey",
                table: "mrp_production_backorder",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_backorder_write_uid_fkey",
                table: "mrp_production_backorder",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_backorder_line_create_uid_fkey",
                table: "mrp_production_backorder_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_backorder_line_write_uid_fkey",
                table: "mrp_production_backorder_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_split_create_uid_fkey",
                table: "mrp_production_split",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_split_write_uid_fkey",
                table: "mrp_production_split",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_split_production_split_multi_id_fkey",
                table: "mrp_production_split",
                column: "production_split_multi_id",
                principalTable: "mrp_production_split_multi",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_split_line_create_uid_fkey",
                table: "mrp_production_split_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_split_line_user_id_fkey",
                table: "mrp_production_split_line",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_split_line_write_uid_fkey",
                table: "mrp_production_split_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_split_multi_create_uid_fkey",
                table: "mrp_production_split_multi",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_production_split_multi_write_uid_fkey",
                table: "mrp_production_split_multi",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_routing_workcenter_create_uid_fkey",
                table: "mrp_routing_workcenter",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_routing_workcenter_write_uid_fkey",
                table: "mrp_routing_workcenter",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_routing_workcenter_workcenter_id_fkey",
                table: "mrp_routing_workcenter",
                column: "workcenter_id",
                principalTable: "mrp_workcenter",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_routing_workcenter_produc_product_template_attribute_v_fkey",
                table: "mrp_routing_workcenter_product_template_attribute_value_rel",
                column: "product_template_attribute_value_id",
                principalTable: "product_template_attribute_value",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_unbuild_company_id_fkey",
                table: "mrp_unbuild",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_unbuild_create_uid_fkey",
                table: "mrp_unbuild",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_unbuild_write_uid_fkey",
                table: "mrp_unbuild",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_unbuild_location_dest_id_fkey",
                table: "mrp_unbuild",
                column: "location_dest_id",
                principalTable: "stock_location",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_unbuild_location_id_fkey",
                table: "mrp_unbuild",
                column: "location_id",
                principalTable: "stock_location",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_unbuild_lot_id_fkey",
                table: "mrp_unbuild",
                column: "lot_id",
                principalTable: "stock_lot",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_unbuild_product_id_fkey",
                table: "mrp_unbuild",
                column: "product_id",
                principalTable: "product_product",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_unbuild_product_uom_id_fkey",
                table: "mrp_unbuild",
                column: "product_uom_id",
                principalTable: "uom_uom",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_workcenter_company_id_fkey",
                table: "mrp_workcenter",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_workcenter_create_uid_fkey",
                table: "mrp_workcenter",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_workcenter_write_uid_fkey",
                table: "mrp_workcenter",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_workcenter_resource_calendar_id_fkey",
                table: "mrp_workcenter",
                column: "resource_calendar_id",
                principalTable: "resource_calendar",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_workcenter_resource_id_fkey",
                table: "mrp_workcenter",
                column: "resource_id",
                principalTable: "resource_resource",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_workcenter_capacity_create_uid_fkey",
                table: "mrp_workcenter_capacity",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_workcenter_capacity_write_uid_fkey",
                table: "mrp_workcenter_capacity",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_workcenter_capacity_product_id_fkey",
                table: "mrp_workcenter_capacity",
                column: "product_id",
                principalTable: "product_product",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_workcenter_mrp_workcenter_tag_re_mrp_workcenter_tag_id_fkey",
                table: "mrp_workcenter_mrp_workcenter_tag_rel",
                column: "mrp_workcenter_tag_id",
                principalTable: "mrp_workcenter_tag",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "mrp_workcenter_productivity_company_id_fkey",
                table: "mrp_workcenter_productivity",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_workcenter_productivity_create_uid_fkey",
                table: "mrp_workcenter_productivity",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_workcenter_productivity_user_id_fkey",
                table: "mrp_workcenter_productivity",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_workcenter_productivity_write_uid_fkey",
                table: "mrp_workcenter_productivity",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_workcenter_productivity_loss_id_fkey",
                table: "mrp_workcenter_productivity",
                column: "loss_id",
                principalTable: "mrp_workcenter_productivity_loss",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "mrp_workcenter_productivity_workorder_id_fkey",
                table: "mrp_workcenter_productivity",
                column: "workorder_id",
                principalTable: "mrp_workorder",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_workcenter_productivity_loss_create_uid_fkey",
                table: "mrp_workcenter_productivity_loss",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_workcenter_productivity_loss_write_uid_fkey",
                table: "mrp_workcenter_productivity_loss",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_workcenter_productivity_loss_loss_id_fkey",
                table: "mrp_workcenter_productivity_loss",
                column: "loss_id",
                principalTable: "mrp_workcenter_productivity_loss_type",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_workcenter_productivity_loss_type_create_uid_fkey",
                table: "mrp_workcenter_productivity_loss_type",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_workcenter_productivity_loss_type_write_uid_fkey",
                table: "mrp_workcenter_productivity_loss_type",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_workcenter_tag_create_uid_fkey",
                table: "mrp_workcenter_tag",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_workcenter_tag_write_uid_fkey",
                table: "mrp_workcenter_tag",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_workorder_create_uid_fkey",
                table: "mrp_workorder",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_workorder_write_uid_fkey",
                table: "mrp_workorder",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_workorder_leave_id_fkey",
                table: "mrp_workorder",
                column: "leave_id",
                principalTable: "resource_calendar_leaves",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_workorder_product_id_fkey",
                table: "mrp_workorder",
                column: "product_id",
                principalTable: "product_product",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "mrp_workorder_product_uom_id_fkey",
                table: "mrp_workorder",
                column: "product_uom_id",
                principalTable: "uom_uom",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "note_note_company_id_fkey",
                table: "note_note",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "note_note_create_uid_fkey",
                table: "note_note",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "note_note_user_id_fkey",
                table: "note_note",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "note_note_write_uid_fkey",
                table: "note_note",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "note_stage_create_uid_fkey",
                table: "note_stage",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "note_stage_user_id_fkey",
                table: "note_stage",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "note_stage_write_uid_fkey",
                table: "note_stage",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "note_tag_create_uid_fkey",
                table: "note_tag",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "note_tag_write_uid_fkey",
                table: "note_tag",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "payment_country_rel_country_id_fkey",
                table: "payment_country_rel",
                column: "country_id",
                principalTable: "res_country",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "payment_country_rel_payment_id_fkey",
                table: "payment_country_rel",
                column: "payment_id",
                principalTable: "payment_provider",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "payment_icon_create_uid_fkey",
                table: "payment_icon",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "payment_icon_write_uid_fkey",
                table: "payment_icon",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "payment_icon_payment_provider_rel_payment_provider_id_fkey",
                table: "payment_icon_payment_provider_rel",
                column: "payment_provider_id",
                principalTable: "payment_provider",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "payment_link_wizard_create_uid_fkey",
                table: "payment_link_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "payment_link_wizard_write_uid_fkey",
                table: "payment_link_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "payment_link_wizard_currency_id_fkey",
                table: "payment_link_wizard",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "payment_link_wizard_partner_id_fkey",
                table: "payment_link_wizard",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "payment_provider_company_id_fkey",
                table: "payment_provider",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "payment_provider_create_uid_fkey",
                table: "payment_provider",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "payment_provider_write_uid_fkey",
                table: "payment_provider",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "payment_provider_website_id_fkey",
                table: "payment_provider",
                column: "website_id",
                principalTable: "website",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "payment_provider_onboarding_wizard_create_uid_fkey",
                table: "payment_provider_onboarding_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "payment_provider_onboarding_wizard_write_uid_fkey",
                table: "payment_provider_onboarding_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "payment_refund_wizard_create_uid_fkey",
                table: "payment_refund_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "payment_refund_wizard_write_uid_fkey",
                table: "payment_refund_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "payment_token_company_id_fkey",
                table: "payment_token",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "payment_token_create_uid_fkey",
                table: "payment_token",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "payment_token_write_uid_fkey",
                table: "payment_token",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "payment_token_partner_id_fkey",
                table: "payment_token",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "payment_transaction_company_id_fkey",
                table: "payment_transaction",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "payment_transaction_create_uid_fkey",
                table: "payment_transaction",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "payment_transaction_write_uid_fkey",
                table: "payment_transaction",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "payment_transaction_currency_id_fkey",
                table: "payment_transaction",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "payment_transaction_partner_country_id_fkey",
                table: "payment_transaction",
                column: "partner_country_id",
                principalTable: "res_country",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "payment_transaction_partner_id_fkey",
                table: "payment_transaction",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "payment_transaction_partner_state_id_fkey",
                table: "payment_transaction",
                column: "partner_state_id",
                principalTable: "res_country_state",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "phone_blacklist_create_uid_fkey",
                table: "phone_blacklist",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "phone_blacklist_write_uid_fkey",
                table: "phone_blacklist",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "phone_blacklist_remove_create_uid_fkey",
                table: "phone_blacklist_remove",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "phone_blacklist_remove_write_uid_fkey",
                table: "phone_blacklist_remove",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "picking_label_type_create_uid_fkey",
                table: "picking_label_type",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "picking_label_type_write_uid_fkey",
                table: "picking_label_type",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "picking_label_type_stock_picking_rel_stock_picking_id_fkey",
                table: "picking_label_type_stock_picking_rel",
                column: "stock_picking_id",
                principalTable: "stock_picking",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "portal_share_create_uid_fkey",
                table: "portal_share",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "portal_share_write_uid_fkey",
                table: "portal_share",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "portal_share_res_partner_rel_res_partner_id_fkey",
                table: "portal_share_res_partner_rel",
                column: "res_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "portal_wizard_create_uid_fkey",
                table: "portal_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "portal_wizard_write_uid_fkey",
                table: "portal_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "portal_wizard_res_partner_rel_res_partner_id_fkey",
                table: "portal_wizard_res_partner_rel",
                column: "res_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "portal_wizard_user_create_uid_fkey",
                table: "portal_wizard_user",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "portal_wizard_user_write_uid_fkey",
                table: "portal_wizard_user",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "portal_wizard_user_partner_id_fkey",
                table: "portal_wizard_user",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "pos_bill_create_uid_fkey",
                table: "pos_bill",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_bill_write_uid_fkey",
                table: "pos_bill",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_bill_pos_config_rel_pos_config_id_fkey",
                table: "pos_bill_pos_config_rel",
                column: "pos_config_id",
                principalTable: "pos_config",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "pos_category_create_uid_fkey",
                table: "pos_category",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_category_write_uid_fkey",
                table: "pos_category",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_category_pos_config_rel_pos_config_id_fkey",
                table: "pos_category_pos_config_rel",
                column: "pos_config_id",
                principalTable: "pos_config",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "pos_category_res_config_settings_re_res_config_settings_id_fkey",
                table: "pos_category_res_config_settings_rel",
                column: "res_config_settings_id",
                principalTable: "res_config_settings",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "pos_close_session_wizard_create_uid_fkey",
                table: "pos_close_session_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_close_session_wizard_write_uid_fkey",
                table: "pos_close_session_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_config_company_id_fkey",
                table: "pos_config",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "pos_config_create_uid_fkey",
                table: "pos_config",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_config_write_uid_fkey",
                table: "pos_config",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_config_down_payment_product_id_fkey",
                table: "pos_config",
                column: "down_payment_product_id",
                principalTable: "product_product",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_config_tip_product_id_fkey",
                table: "pos_config",
                column: "tip_product_id",
                principalTable: "product_product",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_config_group_pos_manager_id_fkey",
                table: "pos_config",
                column: "group_pos_manager_id",
                principalTable: "res_groups",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_config_group_pos_user_id_fkey",
                table: "pos_config",
                column: "group_pos_user_id",
                principalTable: "res_groups",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_config_picking_type_id_fkey",
                table: "pos_config",
                column: "picking_type_id",
                principalTable: "stock_picking_type",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "pos_config_pricelist_id_fkey",
                table: "pos_config",
                column: "pricelist_id",
                principalTable: "product_pricelist",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "pos_config_route_id_fkey",
                table: "pos_config",
                column: "route_id",
                principalTable: "stock_route",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_config_warehouse_id_fkey",
                table: "pos_config",
                column: "warehouse_id",
                principalTable: "stock_warehouse",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "pos_config_pos_payment_method_rel_pos_payment_method_id_fkey",
                table: "pos_config_pos_payment_method_rel",
                column: "pos_payment_method_id",
                principalTable: "pos_payment_method",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "pos_config_product_pricelist_rel_product_pricelist_id_fkey",
                table: "pos_config_product_pricelist_rel",
                column: "product_pricelist_id",
                principalTable: "product_pricelist",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "pos_detail_configs_pos_details_wizard_id_fkey",
                table: "pos_detail_configs",
                column: "pos_details_wizard_id",
                principalTable: "pos_details_wizard",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "pos_details_wizard_create_uid_fkey",
                table: "pos_details_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_details_wizard_write_uid_fkey",
                table: "pos_details_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_make_payment_create_uid_fkey",
                table: "pos_make_payment",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_make_payment_write_uid_fkey",
                table: "pos_make_payment",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_make_payment_payment_method_id_fkey",
                table: "pos_make_payment",
                column: "payment_method_id",
                principalTable: "pos_payment_method",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "pos_order_company_id_fkey",
                table: "pos_order",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "pos_order_create_uid_fkey",
                table: "pos_order",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_order_user_id_fkey",
                table: "pos_order",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_order_write_uid_fkey",
                table: "pos_order",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_order_partner_id_fkey",
                table: "pos_order",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_order_pricelist_id_fkey",
                table: "pos_order",
                column: "pricelist_id",
                principalTable: "product_pricelist",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "pos_order_procurement_group_id_fkey",
                table: "pos_order",
                column: "procurement_group_id",
                principalTable: "procurement_group",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_order_session_id_fkey",
                table: "pos_order",
                column: "session_id",
                principalTable: "pos_session",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "pos_order_line_company_id_fkey",
                table: "pos_order_line",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_order_line_create_uid_fkey",
                table: "pos_order_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_order_line_write_uid_fkey",
                table: "pos_order_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_order_line_product_id_fkey",
                table: "pos_order_line",
                column: "product_id",
                principalTable: "product_product",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "pos_order_line_sale_order_line_id_fkey",
                table: "pos_order_line",
                column: "sale_order_line_id",
                principalTable: "sale_order_line",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_order_line_sale_order_origin_id_fkey",
                table: "pos_order_line",
                column: "sale_order_origin_id",
                principalTable: "sale_order",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_pack_operation_lot_create_uid_fkey",
                table: "pos_pack_operation_lot",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_pack_operation_lot_write_uid_fkey",
                table: "pos_pack_operation_lot",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_payment_company_id_fkey",
                table: "pos_payment",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_payment_create_uid_fkey",
                table: "pos_payment",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_payment_write_uid_fkey",
                table: "pos_payment",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_payment_payment_method_id_fkey",
                table: "pos_payment",
                column: "payment_method_id",
                principalTable: "pos_payment_method",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "pos_payment_session_id_fkey",
                table: "pos_payment",
                column: "session_id",
                principalTable: "pos_session",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_payment_method_company_id_fkey",
                table: "pos_payment_method",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_payment_method_create_uid_fkey",
                table: "pos_payment_method",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_payment_method_write_uid_fkey",
                table: "pos_payment_method",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_session_create_uid_fkey",
                table: "pos_session",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_session_user_id_fkey",
                table: "pos_session",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "pos_session_write_uid_fkey",
                table: "pos_session",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_session_check_product_wizard_create_uid_fkey",
                table: "pos_session_check_product_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "pos_session_check_product_wizard_write_uid_fkey",
                table: "pos_session_check_product_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "privacy_log_create_uid_fkey",
                table: "privacy_log",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "privacy_log_user_id_fkey",
                table: "privacy_log",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "privacy_log_write_uid_fkey",
                table: "privacy_log",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "privacy_lookup_wizard_create_uid_fkey",
                table: "privacy_lookup_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "privacy_lookup_wizard_write_uid_fkey",
                table: "privacy_lookup_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "privacy_lookup_wizard_line_create_uid_fkey",
                table: "privacy_lookup_wizard_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "privacy_lookup_wizard_line_write_uid_fkey",
                table: "privacy_lookup_wizard_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "procurement_group_create_uid_fkey",
                table: "procurement_group",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "procurement_group_write_uid_fkey",
                table: "procurement_group",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "procurement_group_partner_id_fkey",
                table: "procurement_group",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "procurement_group_sale_id_fkey",
                table: "procurement_group",
                column: "sale_id",
                principalTable: "sale_order",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_accessory_rel_dest_id_fkey",
                table: "product_accessory_rel",
                column: "dest_id",
                principalTable: "product_product",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_accessory_rel_src_id_fkey",
                table: "product_accessory_rel",
                column: "src_id",
                principalTable: "product_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_alternative_rel_dest_id_fkey",
                table: "product_alternative_rel",
                column: "dest_id",
                principalTable: "product_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_alternative_rel_src_id_fkey",
                table: "product_alternative_rel",
                column: "src_id",
                principalTable: "product_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_attr_exclusion_value__product_template_attribute_e_fkey",
                table: "product_attr_exclusion_value_ids_rel",
                column: "product_template_attribute_exclusion_id",
                principalTable: "product_template_attribute_exclusion",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_attr_exclusion_value__product_template_attribute_v_fkey",
                table: "product_attr_exclusion_value_ids_rel",
                column: "product_template_attribute_value_id",
                principalTable: "product_template_attribute_value",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_attribute_create_uid_fkey",
                table: "product_attribute",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_attribute_write_uid_fkey",
                table: "product_attribute",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_attribute_custom_valu_custom_product_template_attr_fkey",
                table: "product_attribute_custom_value",
                column: "custom_product_template_attribute_value_id",
                principalTable: "product_template_attribute_value",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "product_attribute_custom_value_create_uid_fkey",
                table: "product_attribute_custom_value",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_attribute_custom_value_write_uid_fkey",
                table: "product_attribute_custom_value",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_attribute_custom_value_sale_order_line_id_fkey",
                table: "product_attribute_custom_value",
                column: "sale_order_line_id",
                principalTable: "sale_order_line",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_attribute_product_template_rel_product_template_id_fkey",
                table: "product_attribute_product_template_rel",
                column: "product_template_id",
                principalTable: "product_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_attribute_value_create_uid_fkey",
                table: "product_attribute_value",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_attribute_value_write_uid_fkey",
                table: "product_attribute_value",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_attribute_value_produ_product_template_attribute_l_fkey",
                table: "product_attribute_value_product_template_attribute_line_rel",
                column: "product_template_attribute_line_id",
                principalTable: "product_template_attribute_line",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_category_create_uid_fkey",
                table: "product_category",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_category_write_uid_fkey",
                table: "product_category",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_category_removal_strategy_id_fkey",
                table: "product_category",
                column: "removal_strategy_id",
                principalTable: "product_removal",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_image_create_uid_fkey",
                table: "product_image",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_image_write_uid_fkey",
                table: "product_image",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_image_product_tmpl_id_fkey",
                table: "product_image",
                column: "product_tmpl_id",
                principalTable: "product_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_image_product_variant_id_fkey",
                table: "product_image",
                column: "product_variant_id",
                principalTable: "product_product",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_label_layout_create_uid_fkey",
                table: "product_label_layout",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_label_layout_write_uid_fkey",
                table: "product_label_layout",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_label_layout_product_product_re_product_product_id_fkey",
                table: "product_label_layout_product_product_rel",
                column: "product_product_id",
                principalTable: "product_product",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_label_layout_product_template__product_template_id_fkey",
                table: "product_label_layout_product_template_rel",
                column: "product_template_id",
                principalTable: "product_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_label_layout_stock_move_line_re_stock_move_line_id_fkey",
                table: "product_label_layout_stock_move_line_rel",
                column: "stock_move_line_id",
                principalTable: "stock_move_line",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_optional_rel_dest_id_fkey",
                table: "product_optional_rel",
                column: "dest_id",
                principalTable: "product_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_optional_rel_src_id_fkey",
                table: "product_optional_rel",
                column: "src_id",
                principalTable: "product_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_packaging_company_id_fkey",
                table: "product_packaging",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_packaging_create_uid_fkey",
                table: "product_packaging",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_packaging_write_uid_fkey",
                table: "product_packaging",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_packaging_package_type_id_fkey",
                table: "product_packaging",
                column: "package_type_id",
                principalTable: "stock_package_type",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_packaging_product_id_fkey",
                table: "product_packaging",
                column: "product_id",
                principalTable: "product_product",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_pricelist_company_id_fkey",
                table: "product_pricelist",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_pricelist_create_uid_fkey",
                table: "product_pricelist",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_pricelist_write_uid_fkey",
                table: "product_pricelist",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_pricelist_currency_id_fkey",
                table: "product_pricelist",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "product_pricelist_website_id_fkey",
                table: "product_pricelist",
                column: "website_id",
                principalTable: "website",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "product_pricelist_item_company_id_fkey",
                table: "product_pricelist_item",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_pricelist_item_create_uid_fkey",
                table: "product_pricelist_item",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_pricelist_item_write_uid_fkey",
                table: "product_pricelist_item",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_pricelist_item_currency_id_fkey",
                table: "product_pricelist_item",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_pricelist_item_product_id_fkey",
                table: "product_pricelist_item",
                column: "product_id",
                principalTable: "product_product",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_pricelist_item_product_tmpl_id_fkey",
                table: "product_pricelist_item",
                column: "product_tmpl_id",
                principalTable: "product_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_pricelist_res_config_settin_res_config_settings_id_fkey",
                table: "product_pricelist_res_config_settings_rel",
                column: "res_config_settings_id",
                principalTable: "res_config_settings",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_product_base_unit_id_fkey",
                table: "product_product",
                column: "base_unit_id",
                principalTable: "website_base_unit",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_product_create_uid_fkey",
                table: "product_product",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_product_write_uid_fkey",
                table: "product_product",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_product_product_tmpl_id_fkey",
                table: "product_product",
                column: "product_tmpl_id",
                principalTable: "product_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_product_stock_track_co_stock_track_confirmation_id_fkey",
                table: "product_product_stock_track_confirmation_rel",
                column: "stock_track_confirmation_id",
                principalTable: "stock_track_confirmation",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_public_category_create_uid_fkey",
                table: "product_public_category",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_public_category_write_uid_fkey",
                table: "product_public_category",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_public_category_website_id_fkey",
                table: "product_public_category",
                column: "website_id",
                principalTable: "website",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "product_public_category_product_templa_product_template_id_fkey",
                table: "product_public_category_product_template_rel",
                column: "product_template_id",
                principalTable: "product_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_removal_create_uid_fkey",
                table: "product_removal",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_removal_write_uid_fkey",
                table: "product_removal",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_replenish_company_id_fkey",
                table: "product_replenish",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_replenish_create_uid_fkey",
                table: "product_replenish",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_replenish_write_uid_fkey",
                table: "product_replenish",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_replenish_product_tmpl_id_fkey",
                table: "product_replenish",
                column: "product_tmpl_id",
                principalTable: "product_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_replenish_product_uom_id_fkey",
                table: "product_replenish",
                column: "product_uom_id",
                principalTable: "uom_uom",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_replenish_warehouse_id_fkey",
                table: "product_replenish",
                column: "warehouse_id",
                principalTable: "stock_warehouse",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_replenish_stock_route_rel_stock_route_id_fkey",
                table: "product_replenish_stock_route_rel",
                column: "stock_route_id",
                principalTable: "stock_route",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_ribbon_create_uid_fkey",
                table: "product_ribbon",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_ribbon_write_uid_fkey",
                table: "product_ribbon",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_supplier_taxes_rel_prod_id_fkey",
                table: "product_supplier_taxes_rel",
                column: "prod_id",
                principalTable: "product_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_supplierinfo_company_id_fkey",
                table: "product_supplierinfo",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_supplierinfo_create_uid_fkey",
                table: "product_supplierinfo",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_supplierinfo_write_uid_fkey",
                table: "product_supplierinfo",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_supplierinfo_currency_id_fkey",
                table: "product_supplierinfo",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "product_supplierinfo_partner_id_fkey",
                table: "product_supplierinfo",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_supplierinfo_product_tmpl_id_fkey",
                table: "product_supplierinfo",
                column: "product_tmpl_id",
                principalTable: "product_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_supplierinfo_stock_rep_stock_replenishment_info_id_fkey",
                table: "product_supplierinfo_stock_replenishment_info_rel",
                column: "stock_replenishment_info_id",
                principalTable: "stock_replenishment_info",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_tag_create_uid_fkey",
                table: "product_tag",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_tag_write_uid_fkey",
                table: "product_tag",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_tag_website_id_fkey",
                table: "product_tag",
                column: "website_id",
                principalTable: "website",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "product_tag_product_template_rel_product_template_id_fkey",
                table: "product_tag_product_template_rel",
                column: "product_template_id",
                principalTable: "product_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_taxes_rel_prod_id_fkey",
                table: "product_taxes_rel",
                column: "prod_id",
                principalTable: "product_template",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_template_base_unit_id_fkey",
                table: "product_template",
                column: "base_unit_id",
                principalTable: "website_base_unit",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_template_company_id_fkey",
                table: "product_template",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_template_create_uid_fkey",
                table: "product_template",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_template_write_uid_fkey",
                table: "product_template",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_template_uom_id_fkey",
                table: "product_template",
                column: "uom_id",
                principalTable: "uom_uom",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "product_template_uom_po_id_fkey",
                table: "product_template",
                column: "uom_po_id",
                principalTable: "uom_uom",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "product_template_website_id_fkey",
                table: "product_template",
                column: "website_id",
                principalTable: "website",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "product_template_attribute_ex_product_template_attribute_v_fkey",
                table: "product_template_attribute_exclusion",
                column: "product_template_attribute_value_id",
                principalTable: "product_template_attribute_value",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "product_template_attribute_exclusion_create_uid_fkey",
                table: "product_template_attribute_exclusion",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_template_attribute_exclusion_write_uid_fkey",
                table: "product_template_attribute_exclusion",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_template_attribute_line_create_uid_fkey",
                table: "product_template_attribute_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_template_attribute_line_write_uid_fkey",
                table: "product_template_attribute_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_template_attribute_value_create_uid_fkey",
                table: "product_template_attribute_value",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_template_attribute_value_write_uid_fkey",
                table: "product_template_attribute_value",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "product_template_attribute_value_sale_o_sale_order_line_id_fkey",
                table: "product_template_attribute_value_sale_order_line_rel",
                column: "sale_order_line_id",
                principalTable: "sale_order_line",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "project_collaborator_create_uid_fkey",
                table: "project_collaborator",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_collaborator_write_uid_fkey",
                table: "project_collaborator",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_collaborator_partner_id_fkey",
                table: "project_collaborator",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "project_collaborator_project_id_fkey",
                table: "project_collaborator",
                column: "project_id",
                principalTable: "project_project",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "project_favorite_user_rel_project_id_fkey",
                table: "project_favorite_user_rel",
                column: "project_id",
                principalTable: "project_project",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "project_favorite_user_rel_user_id_fkey",
                table: "project_favorite_user_rel",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "project_milestone_create_uid_fkey",
                table: "project_milestone",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_milestone_write_uid_fkey",
                table: "project_milestone",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_milestone_project_id_fkey",
                table: "project_milestone",
                column: "project_id",
                principalTable: "project_project",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "project_milestone_sale_line_id_fkey",
                table: "project_milestone",
                column: "sale_line_id",
                principalTable: "sale_order_line",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_project_company_id_fkey",
                table: "project_project",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "project_project_create_uid_fkey",
                table: "project_project",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_project_user_id_fkey",
                table: "project_project",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_project_write_uid_fkey",
                table: "project_project",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_project_last_update_id_fkey",
                table: "project_project",
                column: "last_update_id",
                principalTable: "project_update",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_project_partner_id_fkey",
                table: "project_project",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_project_sale_line_id_fkey",
                table: "project_project",
                column: "sale_line_id",
                principalTable: "sale_order_line",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_project_stage_id_fkey",
                table: "project_project",
                column: "stage_id",
                principalTable: "project_project_stage",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "project_project_project_tags_rel_project_tags_id_fkey",
                table: "project_project_project_tags_rel",
                column: "project_tags_id",
                principalTable: "project_tags",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "project_project_project_task__project_task_type_delete_wiz_fkey",
                table: "project_project_project_task_type_delete_wizard_rel",
                column: "project_task_type_delete_wizard_id",
                principalTable: "project_task_type_delete_wizard",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "project_project_stage_create_uid_fkey",
                table: "project_project_stage",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_project_stage_write_uid_fkey",
                table: "project_project_stage",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_project_stage_sms_template_id_fkey",
                table: "project_project_stage",
                column: "sms_template_id",
                principalTable: "sms_template",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_share_wizard_create_uid_fkey",
                table: "project_share_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_share_wizard_write_uid_fkey",
                table: "project_share_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_share_wizard_res_partner_rel_res_partner_id_fkey",
                table: "project_share_wizard_res_partner_rel",
                column: "res_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "project_tags_create_uid_fkey",
                table: "project_tags",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_tags_write_uid_fkey",
                table: "project_tags",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_tags_project_task_rel_project_task_id_fkey",
                table: "project_tags_project_task_rel",
                column: "project_task_id",
                principalTable: "project_task",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "project_task_company_id_fkey",
                table: "project_task",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "project_task_create_uid_fkey",
                table: "project_task",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_task_write_uid_fkey",
                table: "project_task",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_task_partner_id_fkey",
                table: "project_task",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_task_recurrence_id_fkey",
                table: "project_task",
                column: "recurrence_id",
                principalTable: "project_task_recurrence",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_task_sale_line_id_fkey",
                table: "project_task",
                column: "sale_line_id",
                principalTable: "sale_order_line",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_task_sale_order_id_fkey",
                table: "project_task",
                column: "sale_order_id",
                principalTable: "sale_order",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_task_stage_id_fkey",
                table: "project_task",
                column: "stage_id",
                principalTable: "project_task_type",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "project_task_recurrence_create_uid_fkey",
                table: "project_task_recurrence",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_task_recurrence_write_uid_fkey",
                table: "project_task_recurrence",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_task_type_create_uid_fkey",
                table: "project_task_type",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_task_type_user_id_fkey",
                table: "project_task_type",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_task_type_write_uid_fkey",
                table: "project_task_type",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_task_type_sms_template_id_fkey",
                table: "project_task_type",
                column: "sms_template_id",
                principalTable: "sms_template",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_task_type_delete_wizard_create_uid_fkey",
                table: "project_task_type_delete_wizard",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_task_type_delete_wizard_write_uid_fkey",
                table: "project_task_type_delete_wizard",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_task_user_rel_create_uid_fkey",
                table: "project_task_user_rel",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_task_user_rel_user_id_fkey",
                table: "project_task_user_rel",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "project_task_user_rel_write_uid_fkey",
                table: "project_task_user_rel",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_update_create_uid_fkey",
                table: "project_update",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "project_update_user_id_fkey",
                table: "project_update",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "project_update_write_uid_fkey",
                table: "project_update",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "purchase_order_company_id_fkey",
                table: "purchase_order",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "purchase_order_create_uid_fkey",
                table: "purchase_order",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "purchase_order_user_id_fkey",
                table: "purchase_order",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "purchase_order_write_uid_fkey",
                table: "purchase_order",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "purchase_order_currency_id_fkey",
                table: "purchase_order",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "purchase_order_dest_address_id_fkey",
                table: "purchase_order",
                column: "dest_address_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "purchase_order_partner_id_fkey",
                table: "purchase_order",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "purchase_order_picking_type_id_fkey",
                table: "purchase_order",
                column: "picking_type_id",
                principalTable: "stock_picking_type",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "purchase_order_line_company_id_fkey",
                table: "purchase_order_line",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "purchase_order_line_create_uid_fkey",
                table: "purchase_order_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "purchase_order_line_write_uid_fkey",
                table: "purchase_order_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "purchase_order_line_currency_id_fkey",
                table: "purchase_order_line",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "purchase_order_line_orderpoint_id_fkey",
                table: "purchase_order_line",
                column: "orderpoint_id",
                principalTable: "stock_warehouse_orderpoint",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "purchase_order_line_partner_id_fkey",
                table: "purchase_order_line",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "purchase_order_line_product_uom_fkey",
                table: "purchase_order_line",
                column: "product_uom",
                principalTable: "uom_uom",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "purchase_order_line_sale_line_id_fkey",
                table: "purchase_order_line",
                column: "sale_line_id",
                principalTable: "sale_order_line",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "purchase_order_line_sale_order_id_fkey",
                table: "purchase_order_line",
                column: "sale_order_id",
                principalTable: "sale_order",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "purchase_order_stock_picking_rel_stock_picking_id_fkey",
                table: "purchase_order_stock_picking_rel",
                column: "stock_picking_id",
                principalTable: "stock_picking",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "rating_rating_create_uid_fkey",
                table: "rating_rating",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "rating_rating_write_uid_fkey",
                table: "rating_rating",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "rating_rating_partner_id_fkey",
                table: "rating_rating",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "rating_rating_publisher_id_fkey",
                table: "rating_rating",
                column: "publisher_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "rating_rating_rated_partner_id_fkey",
                table: "rating_rating",
                column: "rated_partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "recurring_payment_company_id_fkey",
                table: "recurring_payment",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "recurring_payment_create_uid_fkey",
                table: "recurring_payment",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "recurring_payment_write_uid_fkey",
                table: "recurring_payment",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "recurring_payment_partner_id_fkey",
                table: "recurring_payment",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "recurring_payment_line_company_id_fkey",
                table: "recurring_payment_line",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "recurring_payment_line_create_uid_fkey",
                table: "recurring_payment_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "recurring_payment_line_write_uid_fkey",
                table: "recurring_payment_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "recurring_payment_line_partner_id_fkey",
                table: "recurring_payment_line",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "repair_fee_company_id_fkey",
                table: "repair_fee",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "repair_fee_create_uid_fkey",
                table: "repair_fee",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "repair_fee_write_uid_fkey",
                table: "repair_fee",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "repair_fee_product_uom_fkey",
                table: "repair_fee",
                column: "product_uom",
                principalTable: "uom_uom",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "repair_fee_repair_id_fkey",
                table: "repair_fee",
                column: "repair_id",
                principalTable: "repair_order",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "repair_line_company_id_fkey",
                table: "repair_line",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "repair_line_create_uid_fkey",
                table: "repair_line",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "repair_line_write_uid_fkey",
                table: "repair_line",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "repair_line_location_dest_id_fkey",
                table: "repair_line",
                column: "location_dest_id",
                principalTable: "stock_location",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "repair_line_location_id_fkey",
                table: "repair_line",
                column: "location_id",
                principalTable: "stock_location",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "repair_line_lot_id_fkey",
                table: "repair_line",
                column: "lot_id",
                principalTable: "stock_lot",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "repair_line_move_id_fkey",
                table: "repair_line",
                column: "move_id",
                principalTable: "stock_move",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "repair_line_product_uom_fkey",
                table: "repair_line",
                column: "product_uom",
                principalTable: "uom_uom",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "repair_line_repair_id_fkey",
                table: "repair_line",
                column: "repair_id",
                principalTable: "repair_order",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "repair_order_address_id_fkey",
                table: "repair_order",
                column: "address_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "repair_order_partner_id_fkey",
                table: "repair_order",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "repair_order_partner_invoice_id_fkey",
                table: "repair_order",
                column: "partner_invoice_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "repair_order_company_id_fkey",
                table: "repair_order",
                column: "company_id",
                principalTable: "res_company",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "repair_order_create_uid_fkey",
                table: "repair_order",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "repair_order_user_id_fkey",
                table: "repair_order",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "repair_order_write_uid_fkey",
                table: "repair_order",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "repair_order_location_id_fkey",
                table: "repair_order",
                column: "location_id",
                principalTable: "stock_location",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "repair_order_lot_id_fkey",
                table: "repair_order",
                column: "lot_id",
                principalTable: "stock_lot",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "repair_order_move_id_fkey",
                table: "repair_order",
                column: "move_id",
                principalTable: "stock_move",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "repair_order_picking_id_fkey",
                table: "repair_order",
                column: "picking_id",
                principalTable: "stock_picking",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "repair_order_product_uom_fkey",
                table: "repair_order",
                column: "product_uom",
                principalTable: "uom_uom",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "repair_order_sale_order_id_fkey",
                table: "repair_order",
                column: "sale_order_id",
                principalTable: "sale_order",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "repair_order_make_invoice_create_uid_fkey",
                table: "repair_order_make_invoice",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "repair_order_make_invoice_write_uid_fkey",
                table: "repair_order_make_invoice",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "repair_order_repair_tags_rel_repair_tags_id_fkey",
                table: "repair_order_repair_tags_rel",
                column: "repair_tags_id",
                principalTable: "repair_tags",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "repair_tags_create_uid_fkey",
                table: "repair_tags",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "repair_tags_write_uid_fkey",
                table: "repair_tags",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "report_layout_create_uid_fkey",
                table: "report_layout",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "report_layout_write_uid_fkey",
                table: "report_layout",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "report_paperformat_create_uid_fkey",
                table: "report_paperformat",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "report_paperformat_write_uid_fkey",
                table: "report_paperformat",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_bank_country_fkey",
                table: "res_bank",
                column: "country",
                principalTable: "res_country",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_bank_create_uid_fkey",
                table: "res_bank",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_bank_write_uid_fkey",
                table: "res_bank",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_bank_state_fkey",
                table: "res_bank",
                column: "state",
                principalTable: "res_country_state",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_company_account_fiscal_country_id_fkey",
                table: "res_company",
                column: "account_fiscal_country_id",
                principalTable: "res_country",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_company_create_uid_fkey",
                table: "res_company",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_company_write_uid_fkey",
                table: "res_company",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_company_currency_id_fkey",
                table: "res_company",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "res_company_internal_transit_location_id_fkey",
                table: "res_company",
                column: "internal_transit_location_id",
                principalTable: "stock_location",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "res_company_partner_id_fkey",
                table: "res_company",
                column: "partner_id",
                principalTable: "res_partner",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "res_company_resource_calendar_id_fkey",
                table: "res_company",
                column: "resource_calendar_id",
                principalTable: "resource_calendar",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "res_company_sale_order_template_id_fkey",
                table: "res_company",
                column: "sale_order_template_id",
                principalTable: "sale_order_template",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_company_stock_sms_confirmation_template_id_fkey",
                table: "res_company",
                column: "stock_sms_confirmation_template_id",
                principalTable: "sms_template",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_company_website_id_fkey",
                table: "res_company",
                column: "website_id",
                principalTable: "website",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_company_users_rel_user_id_fkey",
                table: "res_company_users_rel",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "res_config_create_uid_fkey",
                table: "res_config",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_config_write_uid_fkey",
                table: "res_config",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_config_installer_create_uid_fkey",
                table: "res_config_installer",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_config_installer_write_uid_fkey",
                table: "res_config_installer",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_config_settings_auth_signup_template_user_id_fkey",
                table: "res_config_settings",
                column: "auth_signup_template_user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_config_settings_create_uid_fkey",
                table: "res_config_settings",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_config_settings_write_uid_fkey",
                table: "res_config_settings",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_config_settings_website_id_fkey",
                table: "res_config_settings",
                column: "website_id",
                principalTable: "website",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "res_country_create_uid_fkey",
                table: "res_country",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_country_write_uid_fkey",
                table: "res_country",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_country_currency_id_fkey",
                table: "res_country",
                column: "currency_id",
                principalTable: "res_currency",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_country_group_create_uid_fkey",
                table: "res_country_group",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_country_group_write_uid_fkey",
                table: "res_country_group",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_country_state_create_uid_fkey",
                table: "res_country_state",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_country_state_write_uid_fkey",
                table: "res_country_state",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_currency_create_uid_fkey",
                table: "res_currency",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_currency_write_uid_fkey",
                table: "res_currency",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_currency_rate_create_uid_fkey",
                table: "res_currency_rate",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_currency_rate_write_uid_fkey",
                table: "res_currency_rate",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_groups_create_uid_fkey",
                table: "res_groups",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_groups_write_uid_fkey",
                table: "res_groups",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_groups_spreadsheet_dashboard__spreadsheet_dashboard_id_fkey",
                table: "res_groups_spreadsheet_dashboard_rel",
                column: "spreadsheet_dashboard_id",
                principalTable: "spreadsheet_dashboard",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "res_groups_users_rel_uid_fkey",
                table: "res_groups_users_rel",
                column: "uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "res_lang_create_uid_fkey",
                table: "res_lang",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_lang_write_uid_fkey",
                table: "res_lang",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_partner_create_uid_fkey",
                table: "res_partner",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_partner_payment_responsible_id_fkey",
                table: "res_partner",
                column: "payment_responsible_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_partner_user_id_fkey",
                table: "res_partner",
                column: "user_id",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_partner_write_uid_fkey",
                table: "res_partner",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_partner_industry_id_fkey",
                table: "res_partner",
                column: "industry_id",
                principalTable: "res_partner_industry",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_partner_title_fkey",
                table: "res_partner",
                column: "title",
                principalTable: "res_partner_title",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_partner_website_id_fkey",
                table: "res_partner",
                column: "website_id",
                principalTable: "website",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "res_partner_autocomplete_sync_create_uid_fkey",
                table: "res_partner_autocomplete_sync",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_partner_autocomplete_sync_write_uid_fkey",
                table: "res_partner_autocomplete_sync",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_partner_bank_create_uid_fkey",
                table: "res_partner_bank",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_partner_bank_write_uid_fkey",
                table: "res_partner_bank",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_partner_category_create_uid_fkey",
                table: "res_partner_category",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_partner_category_write_uid_fkey",
                table: "res_partner_category",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_partner_industry_create_uid_fkey",
                table: "res_partner_industry",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_partner_industry_write_uid_fkey",
                table: "res_partner_industry",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_partner_title_create_uid_fkey",
                table: "res_partner_title",
                column: "create_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_partner_title_write_uid_fkey",
                table: "res_partner_title",
                column: "write_uid",
                principalTable: "res_users",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "res_users_website_id_fkey",
                table: "res_users",
                column: "website_id",
                principalTable: "website",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "sale_advance_payment_inv_sale_order_rel_sale_order_id_fkey",
                table: "sale_advance_payment_inv_sale_order_rel",
                column: "sale_order_id",
                principalTable: "sale_order",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "sale_order_warehouse_id_fkey",
                table: "sale_order",
                column: "warehouse_id",
                principalTable: "stock_warehouse",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "sale_order_website_id_fkey",
                table: "sale_order",
                column: "website_id",
                principalTable: "website",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "sale_order_line_route_id_fkey",
                table: "sale_order_line",
                column: "route_id",
                principalTable: "stock_route",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "stock_assign_serial_move_id_fkey",
                table: "stock_assign_serial",
                column: "move_id",
                principalTable: "stock_move",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "stock_backorder_confirmation_line_picking_id_fkey",
                table: "stock_backorder_confirmation_line",
                column: "picking_id",
                principalTable: "stock_picking",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "stock_conflict_quant_rel_stock_quant_id_fkey",
                table: "stock_conflict_quant_rel",
                column: "stock_quant_id",
                principalTable: "stock_quant",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "stock_immediate_transfer_line_picking_id_fkey",
                table: "stock_immediate_transfer_line",
                column: "picking_id",
                principalTable: "stock_picking",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "stock_inventory_adjustment_name_stock_quant_stock_quant_id_fkey",
                table: "stock_inventory_adjustment_name_stock_quant_rel",
                column: "stock_quant_id",
                principalTable: "stock_quant",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "stock_inventory_conflict_stock_quant_rel_stock_quant_id_fkey",
                table: "stock_inventory_conflict_stock_quant_rel",
                column: "stock_quant_id",
                principalTable: "stock_quant",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "stock_inventory_warning_stock_quant_rel_stock_quant_id_fkey",
                table: "stock_inventory_warning_stock_quant_rel",
                column: "stock_quant_id",
                principalTable: "stock_quant",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "stock_location_warehouse_id_fkey",
                table: "stock_location",
                column: "warehouse_id",
                principalTable: "stock_warehouse",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "stock_move_orderpoint_id_fkey",
                table: "stock_move",
                column: "orderpoint_id",
                principalTable: "stock_warehouse_orderpoint",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "stock_move_package_level_id_fkey",
                table: "stock_move",
                column: "package_level_id",
                principalTable: "stock_package_level",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "stock_move_picking_id_fkey",
                table: "stock_move",
                column: "picking_id",
                principalTable: "stock_picking",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "stock_move_picking_type_id_fkey",
                table: "stock_move",
                column: "picking_type_id",
                principalTable: "stock_picking_type",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "stock_move_rule_id_fkey",
                table: "stock_move",
                column: "rule_id",
                principalTable: "stock_rule",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "stock_move_warehouse_id_fkey",
                table: "stock_move",
                column: "warehouse_id",
                principalTable: "stock_warehouse",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "stock_move_line_package_level_id_fkey",
                table: "stock_move_line",
                column: "package_level_id",
                principalTable: "stock_package_level",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "stock_move_line_picking_id_fkey",
                table: "stock_move_line",
                column: "picking_id",
                principalTable: "stock_picking",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "stock_orderpoint_snooze_stock_stock_warehouse_orderpoint_i_fkey",
                table: "stock_orderpoint_snooze_stock_warehouse_orderpoint_rel",
                column: "stock_warehouse_orderpoint_id",
                principalTable: "stock_warehouse_orderpoint",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "stock_package_destination_picking_id_fkey",
                table: "stock_package_destination",
                column: "picking_id",
                principalTable: "stock_picking",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "stock_package_level_picking_id_fkey",
                table: "stock_package_level",
                column: "picking_id",
                principalTable: "stock_picking",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "stock_picking_picking_type_id_fkey",
                table: "stock_picking",
                column: "picking_type_id",
                principalTable: "stock_picking_type",
                principalColumn: "id",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "stock_picking_website_id_fkey",
                table: "stock_picking",
                column: "website_id",
                principalTable: "website",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "stock_picking_type_warehouse_id_fkey",
                table: "stock_picking_type",
                column: "warehouse_id",
                principalTable: "stock_warehouse",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "stock_replenishment_info_orderpoint_id_fkey",
                table: "stock_replenishment_info",
                column: "orderpoint_id",
                principalTable: "stock_warehouse_orderpoint",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "stock_replenishment_option_route_id_fkey",
                table: "stock_replenishment_option",
                column: "route_id",
                principalTable: "stock_route",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "stock_route_supplied_wh_id_fkey",
                table: "stock_route",
                column: "supplied_wh_id",
                principalTable: "stock_warehouse",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "stock_route_supplier_wh_id_fkey",
                table: "stock_route",
                column: "supplier_wh_id",
                principalTable: "stock_warehouse",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "stock_route_warehouse_warehouse_id_fkey",
                table: "stock_route_warehouse",
                column: "warehouse_id",
                principalTable: "stock_warehouse",
                principalColumn: "id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "stock_rule_propagate_warehouse_id_fkey",
                table: "stock_rule",
                column: "propagate_warehouse_id",
                principalTable: "stock_warehouse",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);

            migrationBuilder.AddForeignKey(
                name: "stock_rule_warehouse_id_fkey",
                table: "stock_rule",
                column: "warehouse_id",
                principalTable: "stock_warehouse",
                principalColumn: "id",
                onDelete: ReferentialAction.SetNull);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "account_account_company_id_fkey",
                table: "account_account");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_account_company_id_fkey",
                table: "account_analytic_account");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_line_company_id_fkey",
                table: "account_analytic_line");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_plan_company_id_fkey",
                table: "account_analytic_plan");

            migrationBuilder.DropForeignKey(
                name: "account_asset_category_company_id_fkey",
                table: "account_asset_category");

            migrationBuilder.DropForeignKey(
                name: "account_bank_statement_company_id_fkey",
                table: "account_bank_statement");

            migrationBuilder.DropForeignKey(
                name: "account_fiscal_position_company_id_fkey",
                table: "account_fiscal_position");

            migrationBuilder.DropForeignKey(
                name: "account_group_company_id_fkey",
                table: "account_group");

            migrationBuilder.DropForeignKey(
                name: "account_journal_company_id_fkey",
                table: "account_journal");

            migrationBuilder.DropForeignKey(
                name: "account_move_company_id_fkey",
                table: "account_move");

            migrationBuilder.DropForeignKey(
                name: "account_move_line_company_id_fkey",
                table: "account_move_line");

            migrationBuilder.DropForeignKey(
                name: "account_partial_reconcile_company_id_fkey",
                table: "account_partial_reconcile");

            migrationBuilder.DropForeignKey(
                name: "account_payment_term_company_id_fkey",
                table: "account_payment_term");

            migrationBuilder.DropForeignKey(
                name: "account_reconcile_model_company_id_fkey",
                table: "account_reconcile_model");

            migrationBuilder.DropForeignKey(
                name: "account_tax_company_id_fkey",
                table: "account_tax");

            migrationBuilder.DropForeignKey(
                name: "account_tax_repartition_line_company_id_fkey",
                table: "account_tax_repartition_line");

            migrationBuilder.DropForeignKey(
                name: "crm_lead_company_id_fkey",
                table: "crm_lead");

            migrationBuilder.DropForeignKey(
                name: "crm_team_company_id_fkey",
                table: "crm_team");

            migrationBuilder.DropForeignKey(
                name: "fleet_vehicle_company_id_fkey",
                table: "fleet_vehicle");

            migrationBuilder.DropForeignKey(
                name: "followup_followup_company_id_fkey",
                table: "followup_followup");

            migrationBuilder.DropForeignKey(
                name: "hr_applicant_company_id_fkey",
                table: "hr_applicant");

            migrationBuilder.DropForeignKey(
                name: "hr_contract_company_id_fkey",
                table: "hr_contract");

            migrationBuilder.DropForeignKey(
                name: "hr_department_company_id_fkey",
                table: "hr_department");

            migrationBuilder.DropForeignKey(
                name: "hr_employee_company_id_fkey",
                table: "hr_employee");

            migrationBuilder.DropForeignKey(
                name: "hr_expense_company_id_fkey",
                table: "hr_expense");

            migrationBuilder.DropForeignKey(
                name: "hr_expense_sheet_company_id_fkey",
                table: "hr_expense_sheet");

            migrationBuilder.DropForeignKey(
                name: "hr_job_company_id_fkey",
                table: "hr_job");

            migrationBuilder.DropForeignKey(
                name: "hr_leave_employee_company_id_fkey",
                table: "hr_leave");

            migrationBuilder.DropForeignKey(
                name: "hr_leave_mode_company_id_fkey",
                table: "hr_leave");

            migrationBuilder.DropForeignKey(
                name: "hr_leave_allocation_employee_company_id_fkey",
                table: "hr_leave_allocation");

            migrationBuilder.DropForeignKey(
                name: "hr_leave_allocation_mode_company_id_fkey",
                table: "hr_leave_allocation");

            migrationBuilder.DropForeignKey(
                name: "hr_leave_type_company_id_fkey",
                table: "hr_leave_type");

            migrationBuilder.DropForeignKey(
                name: "hr_work_location_company_id_fkey",
                table: "hr_work_location");

            migrationBuilder.DropForeignKey(
                name: "ir_attachment_company_id_fkey",
                table: "ir_attachment");

            migrationBuilder.DropForeignKey(
                name: "ir_sequence_company_id_fkey",
                table: "ir_sequence");

            migrationBuilder.DropForeignKey(
                name: "lunch_location_company_id_fkey",
                table: "lunch_location");

            migrationBuilder.DropForeignKey(
                name: "mrp_bom_company_id_fkey",
                table: "mrp_bom");

            migrationBuilder.DropForeignKey(
                name: "mrp_bom_byproduct_company_id_fkey",
                table: "mrp_bom_byproduct");

            migrationBuilder.DropForeignKey(
                name: "mrp_bom_line_company_id_fkey",
                table: "mrp_bom_line");

            migrationBuilder.DropForeignKey(
                name: "mrp_production_company_id_fkey",
                table: "mrp_production");

            migrationBuilder.DropForeignKey(
                name: "mrp_unbuild_company_id_fkey",
                table: "mrp_unbuild");

            migrationBuilder.DropForeignKey(
                name: "mrp_workcenter_company_id_fkey",
                table: "mrp_workcenter");

            migrationBuilder.DropForeignKey(
                name: "payment_provider_company_id_fkey",
                table: "payment_provider");

            migrationBuilder.DropForeignKey(
                name: "payment_token_company_id_fkey",
                table: "payment_token");

            migrationBuilder.DropForeignKey(
                name: "payment_transaction_company_id_fkey",
                table: "payment_transaction");

            migrationBuilder.DropForeignKey(
                name: "pos_config_company_id_fkey",
                table: "pos_config");

            migrationBuilder.DropForeignKey(
                name: "pos_order_company_id_fkey",
                table: "pos_order");

            migrationBuilder.DropForeignKey(
                name: "pos_payment_method_company_id_fkey",
                table: "pos_payment_method");

            migrationBuilder.DropForeignKey(
                name: "product_packaging_company_id_fkey",
                table: "product_packaging");

            migrationBuilder.DropForeignKey(
                name: "product_pricelist_company_id_fkey",
                table: "product_pricelist");

            migrationBuilder.DropForeignKey(
                name: "product_supplierinfo_company_id_fkey",
                table: "product_supplierinfo");

            migrationBuilder.DropForeignKey(
                name: "product_template_company_id_fkey",
                table: "product_template");

            migrationBuilder.DropForeignKey(
                name: "project_project_company_id_fkey",
                table: "project_project");

            migrationBuilder.DropForeignKey(
                name: "project_task_company_id_fkey",
                table: "project_task");

            migrationBuilder.DropForeignKey(
                name: "purchase_order_company_id_fkey",
                table: "purchase_order");

            migrationBuilder.DropForeignKey(
                name: "purchase_order_line_company_id_fkey",
                table: "purchase_order_line");

            migrationBuilder.DropForeignKey(
                name: "repair_order_company_id_fkey",
                table: "repair_order");

            migrationBuilder.DropForeignKey(
                name: "res_partner_company_id_fkey",
                table: "res_partner");

            migrationBuilder.DropForeignKey(
                name: "res_partner_bank_company_id_fkey",
                table: "res_partner_bank");

            migrationBuilder.DropForeignKey(
                name: "res_users_company_id_fkey",
                table: "res_users");

            migrationBuilder.DropForeignKey(
                name: "resource_calendar_company_id_fkey",
                table: "resource_calendar");

            migrationBuilder.DropForeignKey(
                name: "resource_calendar_leaves_company_id_fkey",
                table: "resource_calendar_leaves");

            migrationBuilder.DropForeignKey(
                name: "resource_resource_company_id_fkey",
                table: "resource_resource");

            migrationBuilder.DropForeignKey(
                name: "sale_order_company_id_fkey",
                table: "sale_order");

            migrationBuilder.DropForeignKey(
                name: "sale_order_line_company_id_fkey",
                table: "sale_order_line");

            migrationBuilder.DropForeignKey(
                name: "sale_order_template_company_id_fkey",
                table: "sale_order_template");

            migrationBuilder.DropForeignKey(
                name: "stock_location_company_id_fkey",
                table: "stock_location");

            migrationBuilder.DropForeignKey(
                name: "stock_lot_company_id_fkey",
                table: "stock_lot");

            migrationBuilder.DropForeignKey(
                name: "stock_move_company_id_fkey",
                table: "stock_move");

            migrationBuilder.DropForeignKey(
                name: "stock_package_level_company_id_fkey",
                table: "stock_package_level");

            migrationBuilder.DropForeignKey(
                name: "stock_package_type_company_id_fkey",
                table: "stock_package_type");

            migrationBuilder.DropForeignKey(
                name: "stock_picking_company_id_fkey",
                table: "stock_picking");

            migrationBuilder.DropForeignKey(
                name: "stock_picking_type_company_id_fkey",
                table: "stock_picking_type");

            migrationBuilder.DropForeignKey(
                name: "stock_quant_package_company_id_fkey",
                table: "stock_quant_package");

            migrationBuilder.DropForeignKey(
                name: "stock_route_company_id_fkey",
                table: "stock_route");

            migrationBuilder.DropForeignKey(
                name: "stock_rule_company_id_fkey",
                table: "stock_rule");

            migrationBuilder.DropForeignKey(
                name: "stock_storage_category_company_id_fkey",
                table: "stock_storage_category");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_company_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_orderpoint_company_id_fkey",
                table: "stock_warehouse_orderpoint");

            migrationBuilder.DropForeignKey(
                name: "utm_campaign_company_id_fkey",
                table: "utm_campaign");

            migrationBuilder.DropForeignKey(
                name: "website_company_id_fkey",
                table: "website");

            migrationBuilder.DropForeignKey(
                name: "account_account_create_uid_fkey",
                table: "account_account");

            migrationBuilder.DropForeignKey(
                name: "account_account_write_uid_fkey",
                table: "account_account");

            migrationBuilder.DropForeignKey(
                name: "account_account_template_create_uid_fkey",
                table: "account_account_template");

            migrationBuilder.DropForeignKey(
                name: "account_account_template_write_uid_fkey",
                table: "account_account_template");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_account_create_uid_fkey",
                table: "account_analytic_account");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_account_write_uid_fkey",
                table: "account_analytic_account");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_line_create_uid_fkey",
                table: "account_analytic_line");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_line_user_id_fkey",
                table: "account_analytic_line");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_line_write_uid_fkey",
                table: "account_analytic_line");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_plan_create_uid_fkey",
                table: "account_analytic_plan");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_plan_write_uid_fkey",
                table: "account_analytic_plan");

            migrationBuilder.DropForeignKey(
                name: "account_asset_category_create_uid_fkey",
                table: "account_asset_category");

            migrationBuilder.DropForeignKey(
                name: "account_asset_category_write_uid_fkey",
                table: "account_asset_category");

            migrationBuilder.DropForeignKey(
                name: "account_bank_statement_create_uid_fkey",
                table: "account_bank_statement");

            migrationBuilder.DropForeignKey(
                name: "account_bank_statement_write_uid_fkey",
                table: "account_bank_statement");

            migrationBuilder.DropForeignKey(
                name: "account_bank_statement_line_create_uid_fkey",
                table: "account_bank_statement_line");

            migrationBuilder.DropForeignKey(
                name: "account_bank_statement_line_write_uid_fkey",
                table: "account_bank_statement_line");

            migrationBuilder.DropForeignKey(
                name: "account_cash_rounding_create_uid_fkey",
                table: "account_cash_rounding");

            migrationBuilder.DropForeignKey(
                name: "account_cash_rounding_write_uid_fkey",
                table: "account_cash_rounding");

            migrationBuilder.DropForeignKey(
                name: "account_chart_template_create_uid_fkey",
                table: "account_chart_template");

            migrationBuilder.DropForeignKey(
                name: "account_chart_template_write_uid_fkey",
                table: "account_chart_template");

            migrationBuilder.DropForeignKey(
                name: "account_fiscal_position_create_uid_fkey",
                table: "account_fiscal_position");

            migrationBuilder.DropForeignKey(
                name: "account_fiscal_position_write_uid_fkey",
                table: "account_fiscal_position");

            migrationBuilder.DropForeignKey(
                name: "account_full_reconcile_create_uid_fkey",
                table: "account_full_reconcile");

            migrationBuilder.DropForeignKey(
                name: "account_full_reconcile_write_uid_fkey",
                table: "account_full_reconcile");

            migrationBuilder.DropForeignKey(
                name: "account_group_create_uid_fkey",
                table: "account_group");

            migrationBuilder.DropForeignKey(
                name: "account_group_write_uid_fkey",
                table: "account_group");

            migrationBuilder.DropForeignKey(
                name: "account_incoterms_create_uid_fkey",
                table: "account_incoterms");

            migrationBuilder.DropForeignKey(
                name: "account_incoterms_write_uid_fkey",
                table: "account_incoterms");

            migrationBuilder.DropForeignKey(
                name: "account_journal_create_uid_fkey",
                table: "account_journal");

            migrationBuilder.DropForeignKey(
                name: "account_journal_sale_activity_user_id_fkey",
                table: "account_journal");

            migrationBuilder.DropForeignKey(
                name: "account_journal_write_uid_fkey",
                table: "account_journal");

            migrationBuilder.DropForeignKey(
                name: "account_move_create_uid_fkey",
                table: "account_move");

            migrationBuilder.DropForeignKey(
                name: "account_move_invoice_user_id_fkey",
                table: "account_move");

            migrationBuilder.DropForeignKey(
                name: "account_move_write_uid_fkey",
                table: "account_move");

            migrationBuilder.DropForeignKey(
                name: "account_move_line_create_uid_fkey",
                table: "account_move_line");

            migrationBuilder.DropForeignKey(
                name: "account_move_line_write_uid_fkey",
                table: "account_move_line");

            migrationBuilder.DropForeignKey(
                name: "account_partial_reconcile_create_uid_fkey",
                table: "account_partial_reconcile");

            migrationBuilder.DropForeignKey(
                name: "account_partial_reconcile_write_uid_fkey",
                table: "account_partial_reconcile");

            migrationBuilder.DropForeignKey(
                name: "account_payment_create_uid_fkey",
                table: "account_payment");

            migrationBuilder.DropForeignKey(
                name: "account_payment_write_uid_fkey",
                table: "account_payment");

            migrationBuilder.DropForeignKey(
                name: "account_payment_method_create_uid_fkey",
                table: "account_payment_method");

            migrationBuilder.DropForeignKey(
                name: "account_payment_method_write_uid_fkey",
                table: "account_payment_method");

            migrationBuilder.DropForeignKey(
                name: "account_payment_method_line_create_uid_fkey",
                table: "account_payment_method_line");

            migrationBuilder.DropForeignKey(
                name: "account_payment_method_line_write_uid_fkey",
                table: "account_payment_method_line");

            migrationBuilder.DropForeignKey(
                name: "account_payment_term_create_uid_fkey",
                table: "account_payment_term");

            migrationBuilder.DropForeignKey(
                name: "account_payment_term_write_uid_fkey",
                table: "account_payment_term");

            migrationBuilder.DropForeignKey(
                name: "account_reconcile_model_create_uid_fkey",
                table: "account_reconcile_model");

            migrationBuilder.DropForeignKey(
                name: "account_reconcile_model_write_uid_fkey",
                table: "account_reconcile_model");

            migrationBuilder.DropForeignKey(
                name: "account_tax_create_uid_fkey",
                table: "account_tax");

            migrationBuilder.DropForeignKey(
                name: "account_tax_write_uid_fkey",
                table: "account_tax");

            migrationBuilder.DropForeignKey(
                name: "account_tax_group_create_uid_fkey",
                table: "account_tax_group");

            migrationBuilder.DropForeignKey(
                name: "account_tax_group_write_uid_fkey",
                table: "account_tax_group");

            migrationBuilder.DropForeignKey(
                name: "account_tax_repartition_line_create_uid_fkey",
                table: "account_tax_repartition_line");

            migrationBuilder.DropForeignKey(
                name: "account_tax_repartition_line_write_uid_fkey",
                table: "account_tax_repartition_line");

            migrationBuilder.DropForeignKey(
                name: "base_partner_merge_automatic_wizard_create_uid_fkey",
                table: "base_partner_merge_automatic_wizard");

            migrationBuilder.DropForeignKey(
                name: "base_partner_merge_automatic_wizard_write_uid_fkey",
                table: "base_partner_merge_automatic_wizard");

            migrationBuilder.DropForeignKey(
                name: "base_partner_merge_line_create_uid_fkey",
                table: "base_partner_merge_line");

            migrationBuilder.DropForeignKey(
                name: "base_partner_merge_line_write_uid_fkey",
                table: "base_partner_merge_line");

            migrationBuilder.DropForeignKey(
                name: "calendar_event_create_uid_fkey",
                table: "calendar_event");

            migrationBuilder.DropForeignKey(
                name: "calendar_event_user_id_fkey",
                table: "calendar_event");

            migrationBuilder.DropForeignKey(
                name: "calendar_event_write_uid_fkey",
                table: "calendar_event");

            migrationBuilder.DropForeignKey(
                name: "calendar_recurrence_create_uid_fkey",
                table: "calendar_recurrence");

            migrationBuilder.DropForeignKey(
                name: "calendar_recurrence_write_uid_fkey",
                table: "calendar_recurrence");

            migrationBuilder.DropForeignKey(
                name: "crm_iap_lead_mining_request_create_uid_fkey",
                table: "crm_iap_lead_mining_request");

            migrationBuilder.DropForeignKey(
                name: "crm_iap_lead_mining_request_user_id_fkey",
                table: "crm_iap_lead_mining_request");

            migrationBuilder.DropForeignKey(
                name: "crm_iap_lead_mining_request_write_uid_fkey",
                table: "crm_iap_lead_mining_request");

            migrationBuilder.DropForeignKey(
                name: "crm_iap_lead_role_create_uid_fkey",
                table: "crm_iap_lead_role");

            migrationBuilder.DropForeignKey(
                name: "crm_iap_lead_role_write_uid_fkey",
                table: "crm_iap_lead_role");

            migrationBuilder.DropForeignKey(
                name: "crm_iap_lead_seniority_create_uid_fkey",
                table: "crm_iap_lead_seniority");

            migrationBuilder.DropForeignKey(
                name: "crm_iap_lead_seniority_write_uid_fkey",
                table: "crm_iap_lead_seniority");

            migrationBuilder.DropForeignKey(
                name: "crm_lead_create_uid_fkey",
                table: "crm_lead");

            migrationBuilder.DropForeignKey(
                name: "crm_lead_user_id_fkey",
                table: "crm_lead");

            migrationBuilder.DropForeignKey(
                name: "crm_lead_write_uid_fkey",
                table: "crm_lead");

            migrationBuilder.DropForeignKey(
                name: "crm_lost_reason_create_uid_fkey",
                table: "crm_lost_reason");

            migrationBuilder.DropForeignKey(
                name: "crm_lost_reason_write_uid_fkey",
                table: "crm_lost_reason");

            migrationBuilder.DropForeignKey(
                name: "crm_recurring_plan_create_uid_fkey",
                table: "crm_recurring_plan");

            migrationBuilder.DropForeignKey(
                name: "crm_recurring_plan_write_uid_fkey",
                table: "crm_recurring_plan");

            migrationBuilder.DropForeignKey(
                name: "crm_stage_create_uid_fkey",
                table: "crm_stage");

            migrationBuilder.DropForeignKey(
                name: "crm_stage_write_uid_fkey",
                table: "crm_stage");

            migrationBuilder.DropForeignKey(
                name: "crm_team_create_uid_fkey",
                table: "crm_team");

            migrationBuilder.DropForeignKey(
                name: "crm_team_user_id_fkey",
                table: "crm_team");

            migrationBuilder.DropForeignKey(
                name: "crm_team_write_uid_fkey",
                table: "crm_team");

            migrationBuilder.DropForeignKey(
                name: "fleet_vehicle_create_uid_fkey",
                table: "fleet_vehicle");

            migrationBuilder.DropForeignKey(
                name: "fleet_vehicle_manager_id_fkey",
                table: "fleet_vehicle");

            migrationBuilder.DropForeignKey(
                name: "fleet_vehicle_write_uid_fkey",
                table: "fleet_vehicle");

            migrationBuilder.DropForeignKey(
                name: "fleet_vehicle_model_create_uid_fkey",
                table: "fleet_vehicle_model");

            migrationBuilder.DropForeignKey(
                name: "fleet_vehicle_model_write_uid_fkey",
                table: "fleet_vehicle_model");

            migrationBuilder.DropForeignKey(
                name: "fleet_vehicle_model_brand_create_uid_fkey",
                table: "fleet_vehicle_model_brand");

            migrationBuilder.DropForeignKey(
                name: "fleet_vehicle_model_brand_write_uid_fkey",
                table: "fleet_vehicle_model_brand");

            migrationBuilder.DropForeignKey(
                name: "fleet_vehicle_model_category_create_uid_fkey",
                table: "fleet_vehicle_model_category");

            migrationBuilder.DropForeignKey(
                name: "fleet_vehicle_model_category_write_uid_fkey",
                table: "fleet_vehicle_model_category");

            migrationBuilder.DropForeignKey(
                name: "fleet_vehicle_state_create_uid_fkey",
                table: "fleet_vehicle_state");

            migrationBuilder.DropForeignKey(
                name: "fleet_vehicle_state_write_uid_fkey",
                table: "fleet_vehicle_state");

            migrationBuilder.DropForeignKey(
                name: "followup_followup_create_uid_fkey",
                table: "followup_followup");

            migrationBuilder.DropForeignKey(
                name: "followup_followup_write_uid_fkey",
                table: "followup_followup");

            migrationBuilder.DropForeignKey(
                name: "followup_line_create_uid_fkey",
                table: "followup_line");

            migrationBuilder.DropForeignKey(
                name: "followup_line_manual_action_responsible_id_fkey",
                table: "followup_line");

            migrationBuilder.DropForeignKey(
                name: "followup_line_write_uid_fkey",
                table: "followup_line");

            migrationBuilder.DropForeignKey(
                name: "hr_applicant_create_uid_fkey",
                table: "hr_applicant");

            migrationBuilder.DropForeignKey(
                name: "hr_applicant_user_id_fkey",
                table: "hr_applicant");

            migrationBuilder.DropForeignKey(
                name: "hr_applicant_write_uid_fkey",
                table: "hr_applicant");

            migrationBuilder.DropForeignKey(
                name: "hr_applicant_refuse_reason_create_uid_fkey",
                table: "hr_applicant_refuse_reason");

            migrationBuilder.DropForeignKey(
                name: "hr_applicant_refuse_reason_write_uid_fkey",
                table: "hr_applicant_refuse_reason");

            migrationBuilder.DropForeignKey(
                name: "hr_attendance_create_uid_fkey",
                table: "hr_attendance");

            migrationBuilder.DropForeignKey(
                name: "hr_attendance_write_uid_fkey",
                table: "hr_attendance");

            migrationBuilder.DropForeignKey(
                name: "hr_attendance_overtime_create_uid_fkey",
                table: "hr_attendance_overtime");

            migrationBuilder.DropForeignKey(
                name: "hr_attendance_overtime_write_uid_fkey",
                table: "hr_attendance_overtime");

            migrationBuilder.DropForeignKey(
                name: "hr_contract_create_uid_fkey",
                table: "hr_contract");

            migrationBuilder.DropForeignKey(
                name: "hr_contract_hr_responsible_id_fkey",
                table: "hr_contract");

            migrationBuilder.DropForeignKey(
                name: "hr_contract_write_uid_fkey",
                table: "hr_contract");

            migrationBuilder.DropForeignKey(
                name: "hr_contract_type_create_uid_fkey",
                table: "hr_contract_type");

            migrationBuilder.DropForeignKey(
                name: "hr_contract_type_write_uid_fkey",
                table: "hr_contract_type");

            migrationBuilder.DropForeignKey(
                name: "hr_department_create_uid_fkey",
                table: "hr_department");

            migrationBuilder.DropForeignKey(
                name: "hr_department_manager_id_fkey",
                table: "hr_department");

            migrationBuilder.DropForeignKey(
                name: "hr_department_write_uid_fkey",
                table: "hr_department");

            migrationBuilder.DropForeignKey(
                name: "hr_departure_reason_create_uid_fkey",
                table: "hr_departure_reason");

            migrationBuilder.DropForeignKey(
                name: "hr_departure_reason_write_uid_fkey",
                table: "hr_departure_reason");

            migrationBuilder.DropForeignKey(
                name: "hr_employee_create_uid_fkey",
                table: "hr_employee");

            migrationBuilder.DropForeignKey(
                name: "hr_employee_expense_manager_id_fkey",
                table: "hr_employee");

            migrationBuilder.DropForeignKey(
                name: "hr_employee_leave_manager_id_fkey",
                table: "hr_employee");

            migrationBuilder.DropForeignKey(
                name: "hr_employee_user_id_fkey",
                table: "hr_employee");

            migrationBuilder.DropForeignKey(
                name: "hr_employee_write_uid_fkey",
                table: "hr_employee");

            migrationBuilder.DropForeignKey(
                name: "hr_employee_category_create_uid_fkey",
                table: "hr_employee_category");

            migrationBuilder.DropForeignKey(
                name: "hr_employee_category_write_uid_fkey",
                table: "hr_employee_category");

            migrationBuilder.DropForeignKey(
                name: "hr_expense_create_uid_fkey",
                table: "hr_expense");

            migrationBuilder.DropForeignKey(
                name: "hr_expense_write_uid_fkey",
                table: "hr_expense");

            migrationBuilder.DropForeignKey(
                name: "hr_expense_sheet_create_uid_fkey",
                table: "hr_expense_sheet");

            migrationBuilder.DropForeignKey(
                name: "hr_expense_sheet_user_id_fkey",
                table: "hr_expense_sheet");

            migrationBuilder.DropForeignKey(
                name: "hr_expense_sheet_write_uid_fkey",
                table: "hr_expense_sheet");

            migrationBuilder.DropForeignKey(
                name: "hr_job_create_uid_fkey",
                table: "hr_job");

            migrationBuilder.DropForeignKey(
                name: "hr_job_hr_responsible_id_fkey",
                table: "hr_job");

            migrationBuilder.DropForeignKey(
                name: "hr_job_manager_id_fkey",
                table: "hr_job");

            migrationBuilder.DropForeignKey(
                name: "hr_job_user_id_fkey",
                table: "hr_job");

            migrationBuilder.DropForeignKey(
                name: "hr_job_write_uid_fkey",
                table: "hr_job");

            migrationBuilder.DropForeignKey(
                name: "hr_leave_create_uid_fkey",
                table: "hr_leave");

            migrationBuilder.DropForeignKey(
                name: "hr_leave_manager_id_fkey",
                table: "hr_leave");

            migrationBuilder.DropForeignKey(
                name: "hr_leave_user_id_fkey",
                table: "hr_leave");

            migrationBuilder.DropForeignKey(
                name: "hr_leave_write_uid_fkey",
                table: "hr_leave");

            migrationBuilder.DropForeignKey(
                name: "hr_leave_accrual_plan_create_uid_fkey",
                table: "hr_leave_accrual_plan");

            migrationBuilder.DropForeignKey(
                name: "hr_leave_accrual_plan_write_uid_fkey",
                table: "hr_leave_accrual_plan");

            migrationBuilder.DropForeignKey(
                name: "hr_leave_allocation_create_uid_fkey",
                table: "hr_leave_allocation");

            migrationBuilder.DropForeignKey(
                name: "hr_leave_allocation_manager_id_fkey",
                table: "hr_leave_allocation");

            migrationBuilder.DropForeignKey(
                name: "hr_leave_allocation_write_uid_fkey",
                table: "hr_leave_allocation");

            migrationBuilder.DropForeignKey(
                name: "hr_leave_type_create_uid_fkey",
                table: "hr_leave_type");

            migrationBuilder.DropForeignKey(
                name: "hr_leave_type_responsible_id_fkey",
                table: "hr_leave_type");

            migrationBuilder.DropForeignKey(
                name: "hr_leave_type_write_uid_fkey",
                table: "hr_leave_type");

            migrationBuilder.DropForeignKey(
                name: "hr_payroll_structure_type_create_uid_fkey",
                table: "hr_payroll_structure_type");

            migrationBuilder.DropForeignKey(
                name: "hr_payroll_structure_type_write_uid_fkey",
                table: "hr_payroll_structure_type");

            migrationBuilder.DropForeignKey(
                name: "hr_recruitment_degree_create_uid_fkey",
                table: "hr_recruitment_degree");

            migrationBuilder.DropForeignKey(
                name: "hr_recruitment_degree_write_uid_fkey",
                table: "hr_recruitment_degree");

            migrationBuilder.DropForeignKey(
                name: "hr_recruitment_stage_create_uid_fkey",
                table: "hr_recruitment_stage");

            migrationBuilder.DropForeignKey(
                name: "hr_recruitment_stage_write_uid_fkey",
                table: "hr_recruitment_stage");

            migrationBuilder.DropForeignKey(
                name: "hr_work_location_create_uid_fkey",
                table: "hr_work_location");

            migrationBuilder.DropForeignKey(
                name: "hr_work_location_write_uid_fkey",
                table: "hr_work_location");

            migrationBuilder.DropForeignKey(
                name: "ir_act_report_xml_create_uid_fkey",
                table: "ir_act_report_xml");

            migrationBuilder.DropForeignKey(
                name: "ir_act_report_xml_write_uid_fkey",
                table: "ir_act_report_xml");

            migrationBuilder.DropForeignKey(
                name: "ir_act_window_create_uid_fkey",
                table: "ir_act_window");

            migrationBuilder.DropForeignKey(
                name: "ir_act_window_write_uid_fkey",
                table: "ir_act_window");

            migrationBuilder.DropForeignKey(
                name: "ir_attachment_create_uid_fkey",
                table: "ir_attachment");

            migrationBuilder.DropForeignKey(
                name: "ir_attachment_write_uid_fkey",
                table: "ir_attachment");

            migrationBuilder.DropForeignKey(
                name: "ir_mail_server_create_uid_fkey",
                table: "ir_mail_server");

            migrationBuilder.DropForeignKey(
                name: "ir_mail_server_write_uid_fkey",
                table: "ir_mail_server");

            migrationBuilder.DropForeignKey(
                name: "ir_model_create_uid_fkey",
                table: "ir_model");

            migrationBuilder.DropForeignKey(
                name: "ir_model_write_uid_fkey",
                table: "ir_model");

            migrationBuilder.DropForeignKey(
                name: "ir_model_fields_create_uid_fkey",
                table: "ir_model_fields");

            migrationBuilder.DropForeignKey(
                name: "ir_model_fields_write_uid_fkey",
                table: "ir_model_fields");

            migrationBuilder.DropForeignKey(
                name: "ir_module_category_create_uid_fkey",
                table: "ir_module_category");

            migrationBuilder.DropForeignKey(
                name: "ir_module_category_write_uid_fkey",
                table: "ir_module_category");

            migrationBuilder.DropForeignKey(
                name: "ir_module_module_create_uid_fkey",
                table: "ir_module_module");

            migrationBuilder.DropForeignKey(
                name: "ir_module_module_write_uid_fkey",
                table: "ir_module_module");

            migrationBuilder.DropForeignKey(
                name: "ir_sequence_create_uid_fkey",
                table: "ir_sequence");

            migrationBuilder.DropForeignKey(
                name: "ir_sequence_write_uid_fkey",
                table: "ir_sequence");

            migrationBuilder.DropForeignKey(
                name: "ir_ui_view_create_uid_fkey",
                table: "ir_ui_view");

            migrationBuilder.DropForeignKey(
                name: "ir_ui_view_write_uid_fkey",
                table: "ir_ui_view");

            migrationBuilder.DropForeignKey(
                name: "lunch_location_create_uid_fkey",
                table: "lunch_location");

            migrationBuilder.DropForeignKey(
                name: "lunch_location_write_uid_fkey",
                table: "lunch_location");

            migrationBuilder.DropForeignKey(
                name: "mail_activity_type_create_uid_fkey",
                table: "mail_activity_type");

            migrationBuilder.DropForeignKey(
                name: "mail_activity_type_default_user_id_fkey",
                table: "mail_activity_type");

            migrationBuilder.DropForeignKey(
                name: "mail_activity_type_write_uid_fkey",
                table: "mail_activity_type");

            migrationBuilder.DropForeignKey(
                name: "mail_alias_alias_user_id_fkey",
                table: "mail_alias");

            migrationBuilder.DropForeignKey(
                name: "mail_alias_create_uid_fkey",
                table: "mail_alias");

            migrationBuilder.DropForeignKey(
                name: "mail_alias_write_uid_fkey",
                table: "mail_alias");

            migrationBuilder.DropForeignKey(
                name: "mail_channel_create_uid_fkey",
                table: "mail_channel");

            migrationBuilder.DropForeignKey(
                name: "mail_channel_write_uid_fkey",
                table: "mail_channel");

            migrationBuilder.DropForeignKey(
                name: "mail_channel_member_create_uid_fkey",
                table: "mail_channel_member");

            migrationBuilder.DropForeignKey(
                name: "mail_channel_member_write_uid_fkey",
                table: "mail_channel_member");

            migrationBuilder.DropForeignKey(
                name: "mail_channel_rtc_session_create_uid_fkey",
                table: "mail_channel_rtc_session");

            migrationBuilder.DropForeignKey(
                name: "mail_channel_rtc_session_write_uid_fkey",
                table: "mail_channel_rtc_session");

            migrationBuilder.DropForeignKey(
                name: "mail_guest_create_uid_fkey",
                table: "mail_guest");

            migrationBuilder.DropForeignKey(
                name: "mail_guest_write_uid_fkey",
                table: "mail_guest");

            migrationBuilder.DropForeignKey(
                name: "mail_message_create_uid_fkey",
                table: "mail_message");

            migrationBuilder.DropForeignKey(
                name: "mail_message_write_uid_fkey",
                table: "mail_message");

            migrationBuilder.DropForeignKey(
                name: "mail_message_subtype_create_uid_fkey",
                table: "mail_message_subtype");

            migrationBuilder.DropForeignKey(
                name: "mail_message_subtype_write_uid_fkey",
                table: "mail_message_subtype");

            migrationBuilder.DropForeignKey(
                name: "mail_template_create_uid_fkey",
                table: "mail_template");

            migrationBuilder.DropForeignKey(
                name: "mail_template_write_uid_fkey",
                table: "mail_template");

            migrationBuilder.DropForeignKey(
                name: "mrp_bom_create_uid_fkey",
                table: "mrp_bom");

            migrationBuilder.DropForeignKey(
                name: "mrp_bom_write_uid_fkey",
                table: "mrp_bom");

            migrationBuilder.DropForeignKey(
                name: "mrp_bom_byproduct_create_uid_fkey",
                table: "mrp_bom_byproduct");

            migrationBuilder.DropForeignKey(
                name: "mrp_bom_byproduct_write_uid_fkey",
                table: "mrp_bom_byproduct");

            migrationBuilder.DropForeignKey(
                name: "mrp_bom_line_create_uid_fkey",
                table: "mrp_bom_line");

            migrationBuilder.DropForeignKey(
                name: "mrp_bom_line_write_uid_fkey",
                table: "mrp_bom_line");

            migrationBuilder.DropForeignKey(
                name: "mrp_production_create_uid_fkey",
                table: "mrp_production");

            migrationBuilder.DropForeignKey(
                name: "mrp_production_user_id_fkey",
                table: "mrp_production");

            migrationBuilder.DropForeignKey(
                name: "mrp_production_write_uid_fkey",
                table: "mrp_production");

            migrationBuilder.DropForeignKey(
                name: "mrp_routing_workcenter_create_uid_fkey",
                table: "mrp_routing_workcenter");

            migrationBuilder.DropForeignKey(
                name: "mrp_routing_workcenter_write_uid_fkey",
                table: "mrp_routing_workcenter");

            migrationBuilder.DropForeignKey(
                name: "mrp_unbuild_create_uid_fkey",
                table: "mrp_unbuild");

            migrationBuilder.DropForeignKey(
                name: "mrp_unbuild_write_uid_fkey",
                table: "mrp_unbuild");

            migrationBuilder.DropForeignKey(
                name: "mrp_workcenter_create_uid_fkey",
                table: "mrp_workcenter");

            migrationBuilder.DropForeignKey(
                name: "mrp_workcenter_write_uid_fkey",
                table: "mrp_workcenter");

            migrationBuilder.DropForeignKey(
                name: "mrp_workorder_create_uid_fkey",
                table: "mrp_workorder");

            migrationBuilder.DropForeignKey(
                name: "mrp_workorder_write_uid_fkey",
                table: "mrp_workorder");

            migrationBuilder.DropForeignKey(
                name: "payment_provider_create_uid_fkey",
                table: "payment_provider");

            migrationBuilder.DropForeignKey(
                name: "payment_provider_write_uid_fkey",
                table: "payment_provider");

            migrationBuilder.DropForeignKey(
                name: "payment_token_create_uid_fkey",
                table: "payment_token");

            migrationBuilder.DropForeignKey(
                name: "payment_token_write_uid_fkey",
                table: "payment_token");

            migrationBuilder.DropForeignKey(
                name: "payment_transaction_create_uid_fkey",
                table: "payment_transaction");

            migrationBuilder.DropForeignKey(
                name: "payment_transaction_write_uid_fkey",
                table: "payment_transaction");

            migrationBuilder.DropForeignKey(
                name: "pos_category_create_uid_fkey",
                table: "pos_category");

            migrationBuilder.DropForeignKey(
                name: "pos_category_write_uid_fkey",
                table: "pos_category");

            migrationBuilder.DropForeignKey(
                name: "pos_config_create_uid_fkey",
                table: "pos_config");

            migrationBuilder.DropForeignKey(
                name: "pos_config_write_uid_fkey",
                table: "pos_config");

            migrationBuilder.DropForeignKey(
                name: "pos_order_create_uid_fkey",
                table: "pos_order");

            migrationBuilder.DropForeignKey(
                name: "pos_order_user_id_fkey",
                table: "pos_order");

            migrationBuilder.DropForeignKey(
                name: "pos_order_write_uid_fkey",
                table: "pos_order");

            migrationBuilder.DropForeignKey(
                name: "pos_payment_method_create_uid_fkey",
                table: "pos_payment_method");

            migrationBuilder.DropForeignKey(
                name: "pos_payment_method_write_uid_fkey",
                table: "pos_payment_method");

            migrationBuilder.DropForeignKey(
                name: "pos_session_create_uid_fkey",
                table: "pos_session");

            migrationBuilder.DropForeignKey(
                name: "pos_session_user_id_fkey",
                table: "pos_session");

            migrationBuilder.DropForeignKey(
                name: "pos_session_write_uid_fkey",
                table: "pos_session");

            migrationBuilder.DropForeignKey(
                name: "procurement_group_create_uid_fkey",
                table: "procurement_group");

            migrationBuilder.DropForeignKey(
                name: "procurement_group_write_uid_fkey",
                table: "procurement_group");

            migrationBuilder.DropForeignKey(
                name: "product_category_create_uid_fkey",
                table: "product_category");

            migrationBuilder.DropForeignKey(
                name: "product_category_write_uid_fkey",
                table: "product_category");

            migrationBuilder.DropForeignKey(
                name: "product_packaging_create_uid_fkey",
                table: "product_packaging");

            migrationBuilder.DropForeignKey(
                name: "product_packaging_write_uid_fkey",
                table: "product_packaging");

            migrationBuilder.DropForeignKey(
                name: "product_pricelist_create_uid_fkey",
                table: "product_pricelist");

            migrationBuilder.DropForeignKey(
                name: "product_pricelist_write_uid_fkey",
                table: "product_pricelist");

            migrationBuilder.DropForeignKey(
                name: "product_product_create_uid_fkey",
                table: "product_product");

            migrationBuilder.DropForeignKey(
                name: "product_product_write_uid_fkey",
                table: "product_product");

            migrationBuilder.DropForeignKey(
                name: "product_removal_create_uid_fkey",
                table: "product_removal");

            migrationBuilder.DropForeignKey(
                name: "product_removal_write_uid_fkey",
                table: "product_removal");

            migrationBuilder.DropForeignKey(
                name: "product_ribbon_create_uid_fkey",
                table: "product_ribbon");

            migrationBuilder.DropForeignKey(
                name: "product_ribbon_write_uid_fkey",
                table: "product_ribbon");

            migrationBuilder.DropForeignKey(
                name: "product_supplierinfo_create_uid_fkey",
                table: "product_supplierinfo");

            migrationBuilder.DropForeignKey(
                name: "product_supplierinfo_write_uid_fkey",
                table: "product_supplierinfo");

            migrationBuilder.DropForeignKey(
                name: "product_template_create_uid_fkey",
                table: "product_template");

            migrationBuilder.DropForeignKey(
                name: "product_template_write_uid_fkey",
                table: "product_template");

            migrationBuilder.DropForeignKey(
                name: "project_milestone_create_uid_fkey",
                table: "project_milestone");

            migrationBuilder.DropForeignKey(
                name: "project_milestone_write_uid_fkey",
                table: "project_milestone");

            migrationBuilder.DropForeignKey(
                name: "project_project_create_uid_fkey",
                table: "project_project");

            migrationBuilder.DropForeignKey(
                name: "project_project_user_id_fkey",
                table: "project_project");

            migrationBuilder.DropForeignKey(
                name: "project_project_write_uid_fkey",
                table: "project_project");

            migrationBuilder.DropForeignKey(
                name: "project_project_stage_create_uid_fkey",
                table: "project_project_stage");

            migrationBuilder.DropForeignKey(
                name: "project_project_stage_write_uid_fkey",
                table: "project_project_stage");

            migrationBuilder.DropForeignKey(
                name: "project_task_create_uid_fkey",
                table: "project_task");

            migrationBuilder.DropForeignKey(
                name: "project_task_write_uid_fkey",
                table: "project_task");

            migrationBuilder.DropForeignKey(
                name: "project_task_recurrence_create_uid_fkey",
                table: "project_task_recurrence");

            migrationBuilder.DropForeignKey(
                name: "project_task_recurrence_write_uid_fkey",
                table: "project_task_recurrence");

            migrationBuilder.DropForeignKey(
                name: "project_task_type_create_uid_fkey",
                table: "project_task_type");

            migrationBuilder.DropForeignKey(
                name: "project_task_type_user_id_fkey",
                table: "project_task_type");

            migrationBuilder.DropForeignKey(
                name: "project_task_type_write_uid_fkey",
                table: "project_task_type");

            migrationBuilder.DropForeignKey(
                name: "project_update_create_uid_fkey",
                table: "project_update");

            migrationBuilder.DropForeignKey(
                name: "project_update_user_id_fkey",
                table: "project_update");

            migrationBuilder.DropForeignKey(
                name: "project_update_write_uid_fkey",
                table: "project_update");

            migrationBuilder.DropForeignKey(
                name: "purchase_order_create_uid_fkey",
                table: "purchase_order");

            migrationBuilder.DropForeignKey(
                name: "purchase_order_user_id_fkey",
                table: "purchase_order");

            migrationBuilder.DropForeignKey(
                name: "purchase_order_write_uid_fkey",
                table: "purchase_order");

            migrationBuilder.DropForeignKey(
                name: "purchase_order_line_create_uid_fkey",
                table: "purchase_order_line");

            migrationBuilder.DropForeignKey(
                name: "purchase_order_line_write_uid_fkey",
                table: "purchase_order_line");

            migrationBuilder.DropForeignKey(
                name: "repair_order_create_uid_fkey",
                table: "repair_order");

            migrationBuilder.DropForeignKey(
                name: "repair_order_user_id_fkey",
                table: "repair_order");

            migrationBuilder.DropForeignKey(
                name: "repair_order_write_uid_fkey",
                table: "repair_order");

            migrationBuilder.DropForeignKey(
                name: "report_paperformat_create_uid_fkey",
                table: "report_paperformat");

            migrationBuilder.DropForeignKey(
                name: "report_paperformat_write_uid_fkey",
                table: "report_paperformat");

            migrationBuilder.DropForeignKey(
                name: "res_bank_create_uid_fkey",
                table: "res_bank");

            migrationBuilder.DropForeignKey(
                name: "res_bank_write_uid_fkey",
                table: "res_bank");

            migrationBuilder.DropForeignKey(
                name: "res_country_create_uid_fkey",
                table: "res_country");

            migrationBuilder.DropForeignKey(
                name: "res_country_write_uid_fkey",
                table: "res_country");

            migrationBuilder.DropForeignKey(
                name: "res_country_group_create_uid_fkey",
                table: "res_country_group");

            migrationBuilder.DropForeignKey(
                name: "res_country_group_write_uid_fkey",
                table: "res_country_group");

            migrationBuilder.DropForeignKey(
                name: "res_country_state_create_uid_fkey",
                table: "res_country_state");

            migrationBuilder.DropForeignKey(
                name: "res_country_state_write_uid_fkey",
                table: "res_country_state");

            migrationBuilder.DropForeignKey(
                name: "res_currency_create_uid_fkey",
                table: "res_currency");

            migrationBuilder.DropForeignKey(
                name: "res_currency_write_uid_fkey",
                table: "res_currency");

            migrationBuilder.DropForeignKey(
                name: "res_groups_create_uid_fkey",
                table: "res_groups");

            migrationBuilder.DropForeignKey(
                name: "res_groups_write_uid_fkey",
                table: "res_groups");

            migrationBuilder.DropForeignKey(
                name: "res_lang_create_uid_fkey",
                table: "res_lang");

            migrationBuilder.DropForeignKey(
                name: "res_lang_write_uid_fkey",
                table: "res_lang");

            migrationBuilder.DropForeignKey(
                name: "res_partner_create_uid_fkey",
                table: "res_partner");

            migrationBuilder.DropForeignKey(
                name: "res_partner_payment_responsible_id_fkey",
                table: "res_partner");

            migrationBuilder.DropForeignKey(
                name: "res_partner_user_id_fkey",
                table: "res_partner");

            migrationBuilder.DropForeignKey(
                name: "res_partner_write_uid_fkey",
                table: "res_partner");

            migrationBuilder.DropForeignKey(
                name: "res_partner_bank_create_uid_fkey",
                table: "res_partner_bank");

            migrationBuilder.DropForeignKey(
                name: "res_partner_bank_write_uid_fkey",
                table: "res_partner_bank");

            migrationBuilder.DropForeignKey(
                name: "res_partner_industry_create_uid_fkey",
                table: "res_partner_industry");

            migrationBuilder.DropForeignKey(
                name: "res_partner_industry_write_uid_fkey",
                table: "res_partner_industry");

            migrationBuilder.DropForeignKey(
                name: "res_partner_title_create_uid_fkey",
                table: "res_partner_title");

            migrationBuilder.DropForeignKey(
                name: "res_partner_title_write_uid_fkey",
                table: "res_partner_title");

            migrationBuilder.DropForeignKey(
                name: "resource_calendar_create_uid_fkey",
                table: "resource_calendar");

            migrationBuilder.DropForeignKey(
                name: "resource_calendar_write_uid_fkey",
                table: "resource_calendar");

            migrationBuilder.DropForeignKey(
                name: "resource_calendar_leaves_create_uid_fkey",
                table: "resource_calendar_leaves");

            migrationBuilder.DropForeignKey(
                name: "resource_calendar_leaves_write_uid_fkey",
                table: "resource_calendar_leaves");

            migrationBuilder.DropForeignKey(
                name: "resource_resource_create_uid_fkey",
                table: "resource_resource");

            migrationBuilder.DropForeignKey(
                name: "resource_resource_user_id_fkey",
                table: "resource_resource");

            migrationBuilder.DropForeignKey(
                name: "resource_resource_write_uid_fkey",
                table: "resource_resource");

            migrationBuilder.DropForeignKey(
                name: "sale_order_create_uid_fkey",
                table: "sale_order");

            migrationBuilder.DropForeignKey(
                name: "sale_order_user_id_fkey",
                table: "sale_order");

            migrationBuilder.DropForeignKey(
                name: "sale_order_write_uid_fkey",
                table: "sale_order");

            migrationBuilder.DropForeignKey(
                name: "sale_order_line_create_uid_fkey",
                table: "sale_order_line");

            migrationBuilder.DropForeignKey(
                name: "sale_order_line_salesman_id_fkey",
                table: "sale_order_line");

            migrationBuilder.DropForeignKey(
                name: "sale_order_line_write_uid_fkey",
                table: "sale_order_line");

            migrationBuilder.DropForeignKey(
                name: "sale_order_template_create_uid_fkey",
                table: "sale_order_template");

            migrationBuilder.DropForeignKey(
                name: "sale_order_template_write_uid_fkey",
                table: "sale_order_template");

            migrationBuilder.DropForeignKey(
                name: "sms_template_create_uid_fkey",
                table: "sms_template");

            migrationBuilder.DropForeignKey(
                name: "sms_template_write_uid_fkey",
                table: "sms_template");

            migrationBuilder.DropForeignKey(
                name: "stock_location_create_uid_fkey",
                table: "stock_location");

            migrationBuilder.DropForeignKey(
                name: "stock_location_write_uid_fkey",
                table: "stock_location");

            migrationBuilder.DropForeignKey(
                name: "stock_lot_create_uid_fkey",
                table: "stock_lot");

            migrationBuilder.DropForeignKey(
                name: "stock_lot_write_uid_fkey",
                table: "stock_lot");

            migrationBuilder.DropForeignKey(
                name: "stock_move_create_uid_fkey",
                table: "stock_move");

            migrationBuilder.DropForeignKey(
                name: "stock_move_write_uid_fkey",
                table: "stock_move");

            migrationBuilder.DropForeignKey(
                name: "stock_package_level_create_uid_fkey",
                table: "stock_package_level");

            migrationBuilder.DropForeignKey(
                name: "stock_package_level_write_uid_fkey",
                table: "stock_package_level");

            migrationBuilder.DropForeignKey(
                name: "stock_package_type_create_uid_fkey",
                table: "stock_package_type");

            migrationBuilder.DropForeignKey(
                name: "stock_package_type_write_uid_fkey",
                table: "stock_package_type");

            migrationBuilder.DropForeignKey(
                name: "stock_picking_create_uid_fkey",
                table: "stock_picking");

            migrationBuilder.DropForeignKey(
                name: "stock_picking_user_id_fkey",
                table: "stock_picking");

            migrationBuilder.DropForeignKey(
                name: "stock_picking_write_uid_fkey",
                table: "stock_picking");

            migrationBuilder.DropForeignKey(
                name: "stock_picking_type_create_uid_fkey",
                table: "stock_picking_type");

            migrationBuilder.DropForeignKey(
                name: "stock_picking_type_write_uid_fkey",
                table: "stock_picking_type");

            migrationBuilder.DropForeignKey(
                name: "stock_quant_package_create_uid_fkey",
                table: "stock_quant_package");

            migrationBuilder.DropForeignKey(
                name: "stock_quant_package_write_uid_fkey",
                table: "stock_quant_package");

            migrationBuilder.DropForeignKey(
                name: "stock_route_create_uid_fkey",
                table: "stock_route");

            migrationBuilder.DropForeignKey(
                name: "stock_route_write_uid_fkey",
                table: "stock_route");

            migrationBuilder.DropForeignKey(
                name: "stock_rule_create_uid_fkey",
                table: "stock_rule");

            migrationBuilder.DropForeignKey(
                name: "stock_rule_write_uid_fkey",
                table: "stock_rule");

            migrationBuilder.DropForeignKey(
                name: "stock_storage_category_create_uid_fkey",
                table: "stock_storage_category");

            migrationBuilder.DropForeignKey(
                name: "stock_storage_category_write_uid_fkey",
                table: "stock_storage_category");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_create_uid_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_write_uid_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_orderpoint_create_uid_fkey",
                table: "stock_warehouse_orderpoint");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_orderpoint_write_uid_fkey",
                table: "stock_warehouse_orderpoint");

            migrationBuilder.DropForeignKey(
                name: "theme_ir_attachment_create_uid_fkey",
                table: "theme_ir_attachment");

            migrationBuilder.DropForeignKey(
                name: "theme_ir_attachment_write_uid_fkey",
                table: "theme_ir_attachment");

            migrationBuilder.DropForeignKey(
                name: "theme_ir_ui_view_create_uid_fkey",
                table: "theme_ir_ui_view");

            migrationBuilder.DropForeignKey(
                name: "theme_ir_ui_view_write_uid_fkey",
                table: "theme_ir_ui_view");

            migrationBuilder.DropForeignKey(
                name: "uom_category_create_uid_fkey",
                table: "uom_category");

            migrationBuilder.DropForeignKey(
                name: "uom_category_write_uid_fkey",
                table: "uom_category");

            migrationBuilder.DropForeignKey(
                name: "uom_uom_create_uid_fkey",
                table: "uom_uom");

            migrationBuilder.DropForeignKey(
                name: "uom_uom_write_uid_fkey",
                table: "uom_uom");

            migrationBuilder.DropForeignKey(
                name: "utm_campaign_create_uid_fkey",
                table: "utm_campaign");

            migrationBuilder.DropForeignKey(
                name: "utm_campaign_user_id_fkey",
                table: "utm_campaign");

            migrationBuilder.DropForeignKey(
                name: "utm_campaign_write_uid_fkey",
                table: "utm_campaign");

            migrationBuilder.DropForeignKey(
                name: "utm_medium_create_uid_fkey",
                table: "utm_medium");

            migrationBuilder.DropForeignKey(
                name: "utm_medium_write_uid_fkey",
                table: "utm_medium");

            migrationBuilder.DropForeignKey(
                name: "utm_source_create_uid_fkey",
                table: "utm_source");

            migrationBuilder.DropForeignKey(
                name: "utm_source_write_uid_fkey",
                table: "utm_source");

            migrationBuilder.DropForeignKey(
                name: "utm_stage_create_uid_fkey",
                table: "utm_stage");

            migrationBuilder.DropForeignKey(
                name: "utm_stage_write_uid_fkey",
                table: "utm_stage");

            migrationBuilder.DropForeignKey(
                name: "website_create_uid_fkey",
                table: "website");

            migrationBuilder.DropForeignKey(
                name: "website_crm_default_user_id_fkey",
                table: "website");

            migrationBuilder.DropForeignKey(
                name: "website_salesperson_id_fkey",
                table: "website");

            migrationBuilder.DropForeignKey(
                name: "website_user_id_fkey",
                table: "website");

            migrationBuilder.DropForeignKey(
                name: "website_write_uid_fkey",
                table: "website");

            migrationBuilder.DropForeignKey(
                name: "website_base_unit_create_uid_fkey",
                table: "website_base_unit");

            migrationBuilder.DropForeignKey(
                name: "website_base_unit_write_uid_fkey",
                table: "website_base_unit");

            migrationBuilder.DropForeignKey(
                name: "account_account_currency_id_fkey",
                table: "account_account");

            migrationBuilder.DropForeignKey(
                name: "account_account_template_currency_id_fkey",
                table: "account_account_template");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_line_currency_id_fkey",
                table: "account_analytic_line");

            migrationBuilder.DropForeignKey(
                name: "account_bank_statement_line_currency_id_fkey",
                table: "account_bank_statement_line");

            migrationBuilder.DropForeignKey(
                name: "account_bank_statement_line_foreign_currency_id_fkey",
                table: "account_bank_statement_line");

            migrationBuilder.DropForeignKey(
                name: "account_chart_template_currency_id_fkey",
                table: "account_chart_template");

            migrationBuilder.DropForeignKey(
                name: "account_journal_currency_id_fkey",
                table: "account_journal");

            migrationBuilder.DropForeignKey(
                name: "account_move_currency_id_fkey",
                table: "account_move");

            migrationBuilder.DropForeignKey(
                name: "account_move_line_company_currency_id_fkey",
                table: "account_move_line");

            migrationBuilder.DropForeignKey(
                name: "account_move_line_currency_id_fkey",
                table: "account_move_line");

            migrationBuilder.DropForeignKey(
                name: "account_partial_reconcile_credit_currency_id_fkey",
                table: "account_partial_reconcile");

            migrationBuilder.DropForeignKey(
                name: "account_partial_reconcile_debit_currency_id_fkey",
                table: "account_partial_reconcile");

            migrationBuilder.DropForeignKey(
                name: "account_payment_currency_id_fkey",
                table: "account_payment");

            migrationBuilder.DropForeignKey(
                name: "hr_expense_currency_id_fkey",
                table: "hr_expense");

            migrationBuilder.DropForeignKey(
                name: "hr_expense_sheet_currency_id_fkey",
                table: "hr_expense_sheet");

            migrationBuilder.DropForeignKey(
                name: "payment_transaction_currency_id_fkey",
                table: "payment_transaction");

            migrationBuilder.DropForeignKey(
                name: "product_pricelist_currency_id_fkey",
                table: "product_pricelist");

            migrationBuilder.DropForeignKey(
                name: "product_supplierinfo_currency_id_fkey",
                table: "product_supplierinfo");

            migrationBuilder.DropForeignKey(
                name: "purchase_order_currency_id_fkey",
                table: "purchase_order");

            migrationBuilder.DropForeignKey(
                name: "purchase_order_line_currency_id_fkey",
                table: "purchase_order_line");

            migrationBuilder.DropForeignKey(
                name: "res_country_currency_id_fkey",
                table: "res_country");

            migrationBuilder.DropForeignKey(
                name: "res_partner_bank_currency_id_fkey",
                table: "res_partner_bank");

            migrationBuilder.DropForeignKey(
                name: "sale_order_currency_id_fkey",
                table: "sale_order");

            migrationBuilder.DropForeignKey(
                name: "sale_order_line_currency_id_fkey",
                table: "sale_order_line");

            migrationBuilder.DropForeignKey(
                name: "account_account_group_id_fkey",
                table: "account_account");

            migrationBuilder.DropForeignKey(
                name: "account_account_message_main_attachment_id_fkey",
                table: "account_account");

            migrationBuilder.DropForeignKey(
                name: "account_account_template_message_main_attachment_id_fkey",
                table: "account_account_template");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_account_message_main_attachment_id_fkey",
                table: "account_analytic_account");

            migrationBuilder.DropForeignKey(
                name: "account_asset_category_message_main_attachment_id_fkey",
                table: "account_asset_category");

            migrationBuilder.DropForeignKey(
                name: "account_journal_message_main_attachment_id_fkey",
                table: "account_journal");

            migrationBuilder.DropForeignKey(
                name: "account_move_message_main_attachment_id_fkey",
                table: "account_move");

            migrationBuilder.DropForeignKey(
                name: "account_payment_message_main_attachment_id_fkey",
                table: "account_payment");

            migrationBuilder.DropForeignKey(
                name: "account_reconcile_model_message_main_attachment_id_fkey",
                table: "account_reconcile_model");

            migrationBuilder.DropForeignKey(
                name: "calendar_event_message_main_attachment_id_fkey",
                table: "calendar_event");

            migrationBuilder.DropForeignKey(
                name: "crm_lead_message_main_attachment_id_fkey",
                table: "crm_lead");

            migrationBuilder.DropForeignKey(
                name: "crm_team_message_main_attachment_id_fkey",
                table: "crm_team");

            migrationBuilder.DropForeignKey(
                name: "fleet_vehicle_message_main_attachment_id_fkey",
                table: "fleet_vehicle");

            migrationBuilder.DropForeignKey(
                name: "hr_applicant_message_main_attachment_id_fkey",
                table: "hr_applicant");

            migrationBuilder.DropForeignKey(
                name: "hr_contract_message_main_attachment_id_fkey",
                table: "hr_contract");

            migrationBuilder.DropForeignKey(
                name: "hr_department_message_main_attachment_id_fkey",
                table: "hr_department");

            migrationBuilder.DropForeignKey(
                name: "hr_employee_message_main_attachment_id_fkey",
                table: "hr_employee");

            migrationBuilder.DropForeignKey(
                name: "hr_expense_message_main_attachment_id_fkey",
                table: "hr_expense");

            migrationBuilder.DropForeignKey(
                name: "hr_expense_sheet_message_main_attachment_id_fkey",
                table: "hr_expense_sheet");

            migrationBuilder.DropForeignKey(
                name: "hr_job_message_main_attachment_id_fkey",
                table: "hr_job");

            migrationBuilder.DropForeignKey(
                name: "hr_leave_message_main_attachment_id_fkey",
                table: "hr_leave");

            migrationBuilder.DropForeignKey(
                name: "hr_leave_allocation_message_main_attachment_id_fkey",
                table: "hr_leave_allocation");

            migrationBuilder.DropForeignKey(
                name: "hr_leave_type_icon_id_fkey",
                table: "hr_leave_type");

            migrationBuilder.DropForeignKey(
                name: "mail_channel_message_main_attachment_id_fkey",
                table: "mail_channel");

            migrationBuilder.DropForeignKey(
                name: "mrp_bom_message_main_attachment_id_fkey",
                table: "mrp_bom");

            migrationBuilder.DropForeignKey(
                name: "mrp_production_message_main_attachment_id_fkey",
                table: "mrp_production");

            migrationBuilder.DropForeignKey(
                name: "mrp_unbuild_message_main_attachment_id_fkey",
                table: "mrp_unbuild");

            migrationBuilder.DropForeignKey(
                name: "pos_session_message_main_attachment_id_fkey",
                table: "pos_session");

            migrationBuilder.DropForeignKey(
                name: "product_product_message_main_attachment_id_fkey",
                table: "product_product");

            migrationBuilder.DropForeignKey(
                name: "product_template_message_main_attachment_id_fkey",
                table: "product_template");

            migrationBuilder.DropForeignKey(
                name: "project_milestone_message_main_attachment_id_fkey",
                table: "project_milestone");

            migrationBuilder.DropForeignKey(
                name: "project_project_message_main_attachment_id_fkey",
                table: "project_project");

            migrationBuilder.DropForeignKey(
                name: "project_task_displayed_image_id_fkey",
                table: "project_task");

            migrationBuilder.DropForeignKey(
                name: "project_task_message_main_attachment_id_fkey",
                table: "project_task");

            migrationBuilder.DropForeignKey(
                name: "project_update_message_main_attachment_id_fkey",
                table: "project_update");

            migrationBuilder.DropForeignKey(
                name: "purchase_order_message_main_attachment_id_fkey",
                table: "purchase_order");

            migrationBuilder.DropForeignKey(
                name: "repair_order_message_main_attachment_id_fkey",
                table: "repair_order");

            migrationBuilder.DropForeignKey(
                name: "res_partner_message_main_attachment_id_fkey",
                table: "res_partner");

            migrationBuilder.DropForeignKey(
                name: "res_partner_bank_message_main_attachment_id_fkey",
                table: "res_partner_bank");

            migrationBuilder.DropForeignKey(
                name: "sale_order_message_main_attachment_id_fkey",
                table: "sale_order");

            migrationBuilder.DropForeignKey(
                name: "stock_lot_message_main_attachment_id_fkey",
                table: "stock_lot");

            migrationBuilder.DropForeignKey(
                name: "stock_picking_message_main_attachment_id_fkey",
                table: "stock_picking");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_line_general_account_id_fkey",
                table: "account_analytic_line");

            migrationBuilder.DropForeignKey(
                name: "account_asset_category_account_asset_id_fkey",
                table: "account_asset_category");

            migrationBuilder.DropForeignKey(
                name: "account_asset_category_account_depreciation_expense_id_fkey",
                table: "account_asset_category");

            migrationBuilder.DropForeignKey(
                name: "account_asset_category_account_depreciation_id_fkey",
                table: "account_asset_category");

            migrationBuilder.DropForeignKey(
                name: "account_journal_default_account_id_fkey",
                table: "account_journal");

            migrationBuilder.DropForeignKey(
                name: "account_journal_loss_account_id_fkey",
                table: "account_journal");

            migrationBuilder.DropForeignKey(
                name: "account_journal_profit_account_id_fkey",
                table: "account_journal");

            migrationBuilder.DropForeignKey(
                name: "account_journal_suspense_account_id_fkey",
                table: "account_journal");

            migrationBuilder.DropForeignKey(
                name: "account_move_line_account_id_fkey",
                table: "account_move_line");

            migrationBuilder.DropForeignKey(
                name: "account_payment_destination_account_id_fkey",
                table: "account_payment");

            migrationBuilder.DropForeignKey(
                name: "account_payment_force_outstanding_account_id_fkey",
                table: "account_payment");

            migrationBuilder.DropForeignKey(
                name: "account_payment_outstanding_account_id_fkey",
                table: "account_payment");

            migrationBuilder.DropForeignKey(
                name: "account_payment_method_line_payment_account_id_fkey",
                table: "account_payment_method_line");

            migrationBuilder.DropForeignKey(
                name: "account_tax_cash_basis_transition_account_id_fkey",
                table: "account_tax");

            migrationBuilder.DropForeignKey(
                name: "account_tax_repartition_line_account_id_fkey",
                table: "account_tax_repartition_line");

            migrationBuilder.DropForeignKey(
                name: "hr_expense_account_id_fkey",
                table: "hr_expense");

            migrationBuilder.DropForeignKey(
                name: "pos_payment_method_outstanding_account_id_fkey",
                table: "pos_payment_method");

            migrationBuilder.DropForeignKey(
                name: "pos_payment_method_receivable_account_id_fkey",
                table: "pos_payment_method");

            migrationBuilder.DropForeignKey(
                name: "stock_location_valuation_in_account_id_fkey",
                table: "stock_location");

            migrationBuilder.DropForeignKey(
                name: "stock_location_valuation_out_account_id_fkey",
                table: "stock_location");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_line_journal_id_fkey",
                table: "account_analytic_line");

            migrationBuilder.DropForeignKey(
                name: "account_asset_category_journal_id_fkey",
                table: "account_asset_category");

            migrationBuilder.DropForeignKey(
                name: "account_bank_statement_journal_id_fkey",
                table: "account_bank_statement");

            migrationBuilder.DropForeignKey(
                name: "account_move_journal_id_fkey",
                table: "account_move");

            migrationBuilder.DropForeignKey(
                name: "account_move_line_journal_id_fkey",
                table: "account_move_line");

            migrationBuilder.DropForeignKey(
                name: "account_payment_destination_journal_id_fkey",
                table: "account_payment");

            migrationBuilder.DropForeignKey(
                name: "account_payment_method_line_journal_id_fkey",
                table: "account_payment_method_line");

            migrationBuilder.DropForeignKey(
                name: "hr_expense_sheet_bank_journal_id_fkey",
                table: "hr_expense_sheet");

            migrationBuilder.DropForeignKey(
                name: "hr_expense_sheet_journal_id_fkey",
                table: "hr_expense_sheet");

            migrationBuilder.DropForeignKey(
                name: "pos_config_invoice_journal_id_fkey",
                table: "pos_config");

            migrationBuilder.DropForeignKey(
                name: "pos_config_journal_id_fkey",
                table: "pos_config");

            migrationBuilder.DropForeignKey(
                name: "pos_order_sale_journal_fkey",
                table: "pos_order");

            migrationBuilder.DropForeignKey(
                name: "pos_payment_method_journal_id_fkey",
                table: "pos_payment_method");

            migrationBuilder.DropForeignKey(
                name: "pos_session_cash_journal_id_fkey",
                table: "pos_session");

            migrationBuilder.DropForeignKey(
                name: "account_chart_template_country_id_fkey",
                table: "account_chart_template");

            migrationBuilder.DropForeignKey(
                name: "account_fiscal_position_country_id_fkey",
                table: "account_fiscal_position");

            migrationBuilder.DropForeignKey(
                name: "account_tax_country_id_fkey",
                table: "account_tax");

            migrationBuilder.DropForeignKey(
                name: "account_tax_group_country_id_fkey",
                table: "account_tax_group");

            migrationBuilder.DropForeignKey(
                name: "crm_lead_country_id_fkey",
                table: "crm_lead");

            migrationBuilder.DropForeignKey(
                name: "hr_employee_country_id_fkey",
                table: "hr_employee");

            migrationBuilder.DropForeignKey(
                name: "hr_employee_country_of_birth_fkey",
                table: "hr_employee");

            migrationBuilder.DropForeignKey(
                name: "hr_payroll_structure_type_country_id_fkey",
                table: "hr_payroll_structure_type");

            migrationBuilder.DropForeignKey(
                name: "mail_guest_country_id_fkey",
                table: "mail_guest");

            migrationBuilder.DropForeignKey(
                name: "payment_transaction_partner_country_id_fkey",
                table: "payment_transaction");

            migrationBuilder.DropForeignKey(
                name: "res_bank_country_fkey",
                table: "res_bank");

            migrationBuilder.DropForeignKey(
                name: "res_country_state_country_id_fkey",
                table: "res_country_state");

            migrationBuilder.DropForeignKey(
                name: "res_partner_country_id_fkey",
                table: "res_partner");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_line_move_line_id_fkey",
                table: "account_analytic_line");

            migrationBuilder.DropForeignKey(
                name: "account_partial_reconcile_credit_move_id_fkey",
                table: "account_partial_reconcile");

            migrationBuilder.DropForeignKey(
                name: "account_partial_reconcile_debit_move_id_fkey",
                table: "account_partial_reconcile");

            migrationBuilder.DropForeignKey(
                name: "mrp_bom_product_tmpl_id_fkey",
                table: "mrp_bom");

            migrationBuilder.DropForeignKey(
                name: "mrp_bom_line_product_tmpl_id_fkey",
                table: "mrp_bom_line");

            migrationBuilder.DropForeignKey(
                name: "product_product_product_tmpl_id_fkey",
                table: "product_product");

            migrationBuilder.DropForeignKey(
                name: "product_supplierinfo_product_tmpl_id_fkey",
                table: "product_supplierinfo");

            migrationBuilder.DropForeignKey(
                name: "account_account_template_chart_template_id_fkey",
                table: "account_account_template");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_account_partner_id_fkey",
                table: "account_analytic_account");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_line_partner_id_fkey",
                table: "account_analytic_line");

            migrationBuilder.DropForeignKey(
                name: "account_bank_statement_line_partner_id_fkey",
                table: "account_bank_statement_line");

            migrationBuilder.DropForeignKey(
                name: "account_move_commercial_partner_id_fkey",
                table: "account_move");

            migrationBuilder.DropForeignKey(
                name: "account_move_partner_id_fkey",
                table: "account_move");

            migrationBuilder.DropForeignKey(
                name: "account_move_partner_shipping_id_fkey",
                table: "account_move");

            migrationBuilder.DropForeignKey(
                name: "account_payment_partner_id_fkey",
                table: "account_payment");

            migrationBuilder.DropForeignKey(
                name: "base_partner_merge_automatic_wizard_dst_partner_id_fkey",
                table: "base_partner_merge_automatic_wizard");

            migrationBuilder.DropForeignKey(
                name: "crm_lead_partner_id_fkey",
                table: "crm_lead");

            migrationBuilder.DropForeignKey(
                name: "hr_applicant_partner_id_fkey",
                table: "hr_applicant");

            migrationBuilder.DropForeignKey(
                name: "hr_employee_address_home_id_fkey",
                table: "hr_employee");

            migrationBuilder.DropForeignKey(
                name: "hr_employee_address_id_fkey",
                table: "hr_employee");

            migrationBuilder.DropForeignKey(
                name: "hr_employee_work_contact_id_fkey",
                table: "hr_employee");

            migrationBuilder.DropForeignKey(
                name: "hr_job_address_id_fkey",
                table: "hr_job");

            migrationBuilder.DropForeignKey(
                name: "hr_work_location_address_id_fkey",
                table: "hr_work_location");

            migrationBuilder.DropForeignKey(
                name: "mail_channel_member_partner_id_fkey",
                table: "mail_channel_member");

            migrationBuilder.DropForeignKey(
                name: "mail_message_author_id_fkey",
                table: "mail_message");

            migrationBuilder.DropForeignKey(
                name: "payment_token_partner_id_fkey",
                table: "payment_token");

            migrationBuilder.DropForeignKey(
                name: "payment_transaction_partner_id_fkey",
                table: "payment_transaction");

            migrationBuilder.DropForeignKey(
                name: "pos_order_partner_id_fkey",
                table: "pos_order");

            migrationBuilder.DropForeignKey(
                name: "procurement_group_partner_id_fkey",
                table: "procurement_group");

            migrationBuilder.DropForeignKey(
                name: "product_supplierinfo_partner_id_fkey",
                table: "product_supplierinfo");

            migrationBuilder.DropForeignKey(
                name: "project_project_partner_id_fkey",
                table: "project_project");

            migrationBuilder.DropForeignKey(
                name: "project_task_partner_id_fkey",
                table: "project_task");

            migrationBuilder.DropForeignKey(
                name: "purchase_order_dest_address_id_fkey",
                table: "purchase_order");

            migrationBuilder.DropForeignKey(
                name: "purchase_order_partner_id_fkey",
                table: "purchase_order");

            migrationBuilder.DropForeignKey(
                name: "purchase_order_line_partner_id_fkey",
                table: "purchase_order_line");

            migrationBuilder.DropForeignKey(
                name: "repair_order_address_id_fkey",
                table: "repair_order");

            migrationBuilder.DropForeignKey(
                name: "repair_order_partner_id_fkey",
                table: "repair_order");

            migrationBuilder.DropForeignKey(
                name: "repair_order_partner_invoice_id_fkey",
                table: "repair_order");

            migrationBuilder.DropForeignKey(
                name: "res_partner_bank_partner_id_fkey",
                table: "res_partner_bank");

            migrationBuilder.DropForeignKey(
                name: "sale_order_partner_id_fkey",
                table: "sale_order");

            migrationBuilder.DropForeignKey(
                name: "sale_order_partner_invoice_id_fkey",
                table: "sale_order");

            migrationBuilder.DropForeignKey(
                name: "sale_order_partner_shipping_id_fkey",
                table: "sale_order");

            migrationBuilder.DropForeignKey(
                name: "sale_order_line_order_partner_id_fkey",
                table: "sale_order_line");

            migrationBuilder.DropForeignKey(
                name: "stock_move_partner_id_fkey",
                table: "stock_move");

            migrationBuilder.DropForeignKey(
                name: "stock_move_restrict_partner_id_fkey",
                table: "stock_move");

            migrationBuilder.DropForeignKey(
                name: "stock_picking_owner_id_fkey",
                table: "stock_picking");

            migrationBuilder.DropForeignKey(
                name: "stock_picking_partner_id_fkey",
                table: "stock_picking");

            migrationBuilder.DropForeignKey(
                name: "stock_rule_partner_address_id_fkey",
                table: "stock_rule");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_partner_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_orderpoint_vendor_id_fkey",
                table: "stock_warehouse_orderpoint");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_account_plan_id_fkey",
                table: "account_analytic_account");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_account_root_plan_id_fkey",
                table: "account_analytic_account");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_line_plan_id_fkey",
                table: "account_analytic_line");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_line_account_id_fkey",
                table: "account_analytic_line");

            migrationBuilder.DropForeignKey(
                name: "mrp_production_analytic_account_id_fkey",
                table: "mrp_production");

            migrationBuilder.DropForeignKey(
                name: "mrp_workcenter_costs_hour_account_id_fkey",
                table: "mrp_workcenter");

            migrationBuilder.DropForeignKey(
                name: "project_project_analytic_account_id_fkey",
                table: "project_project");

            migrationBuilder.DropForeignKey(
                name: "project_task_analytic_account_id_fkey",
                table: "project_task");

            migrationBuilder.DropForeignKey(
                name: "sale_order_analytic_account_id_fkey",
                table: "sale_order");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_orderpoint_product_category_id_fkey",
                table: "stock_warehouse_orderpoint");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_line_product_id_fkey",
                table: "account_analytic_line");

            migrationBuilder.DropForeignKey(
                name: "mrp_bom_product_id_fkey",
                table: "mrp_bom");

            migrationBuilder.DropForeignKey(
                name: "mrp_bom_byproduct_product_id_fkey",
                table: "mrp_bom_byproduct");

            migrationBuilder.DropForeignKey(
                name: "mrp_bom_line_product_id_fkey",
                table: "mrp_bom_line");

            migrationBuilder.DropForeignKey(
                name: "mrp_production_product_id_fkey",
                table: "mrp_production");

            migrationBuilder.DropForeignKey(
                name: "mrp_unbuild_product_id_fkey",
                table: "mrp_unbuild");

            migrationBuilder.DropForeignKey(
                name: "mrp_workorder_product_id_fkey",
                table: "mrp_workorder");

            migrationBuilder.DropForeignKey(
                name: "pos_config_down_payment_product_id_fkey",
                table: "pos_config");

            migrationBuilder.DropForeignKey(
                name: "pos_config_tip_product_id_fkey",
                table: "pos_config");

            migrationBuilder.DropForeignKey(
                name: "product_packaging_product_id_fkey",
                table: "product_packaging");

            migrationBuilder.DropForeignKey(
                name: "product_supplierinfo_product_id_fkey",
                table: "product_supplierinfo");

            migrationBuilder.DropForeignKey(
                name: "purchase_order_line_product_id_fkey",
                table: "purchase_order_line");

            migrationBuilder.DropForeignKey(
                name: "repair_order_product_id_fkey",
                table: "repair_order");

            migrationBuilder.DropForeignKey(
                name: "sale_order_line_product_id_fkey",
                table: "sale_order_line");

            migrationBuilder.DropForeignKey(
                name: "stock_lot_product_id_fkey",
                table: "stock_lot");

            migrationBuilder.DropForeignKey(
                name: "stock_move_product_id_fkey",
                table: "stock_move");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_orderpoint_product_id_fkey",
                table: "stock_warehouse_orderpoint");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_line_product_uom_id_fkey",
                table: "account_analytic_line");

            migrationBuilder.DropForeignKey(
                name: "mrp_bom_product_uom_id_fkey",
                table: "mrp_bom");

            migrationBuilder.DropForeignKey(
                name: "mrp_bom_byproduct_product_uom_id_fkey",
                table: "mrp_bom_byproduct");

            migrationBuilder.DropForeignKey(
                name: "mrp_bom_line_product_uom_id_fkey",
                table: "mrp_bom_line");

            migrationBuilder.DropForeignKey(
                name: "mrp_production_product_uom_id_fkey",
                table: "mrp_production");

            migrationBuilder.DropForeignKey(
                name: "mrp_unbuild_product_uom_id_fkey",
                table: "mrp_unbuild");

            migrationBuilder.DropForeignKey(
                name: "mrp_workorder_product_uom_id_fkey",
                table: "mrp_workorder");

            migrationBuilder.DropForeignKey(
                name: "purchase_order_line_product_uom_fkey",
                table: "purchase_order_line");

            migrationBuilder.DropForeignKey(
                name: "repair_order_product_uom_fkey",
                table: "repair_order");

            migrationBuilder.DropForeignKey(
                name: "sale_order_line_product_uom_fkey",
                table: "sale_order_line");

            migrationBuilder.DropForeignKey(
                name: "stock_lot_product_uom_id_fkey",
                table: "stock_lot");

            migrationBuilder.DropForeignKey(
                name: "stock_move_product_uom_fkey",
                table: "stock_move");

            migrationBuilder.DropForeignKey(
                name: "account_analytic_line_so_line_fkey",
                table: "account_analytic_line");

            migrationBuilder.DropForeignKey(
                name: "project_milestone_sale_line_id_fkey",
                table: "project_milestone");

            migrationBuilder.DropForeignKey(
                name: "project_project_sale_line_id_fkey",
                table: "project_project");

            migrationBuilder.DropForeignKey(
                name: "project_task_sale_line_id_fkey",
                table: "project_task");

            migrationBuilder.DropForeignKey(
                name: "purchase_order_line_sale_line_id_fkey",
                table: "purchase_order_line");

            migrationBuilder.DropForeignKey(
                name: "stock_move_sale_line_id_fkey",
                table: "stock_move");

            migrationBuilder.DropForeignKey(
                name: "account_bank_statement_line_move_id_fkey",
                table: "account_bank_statement_line");

            migrationBuilder.DropForeignKey(
                name: "account_full_reconcile_exchange_move_id_fkey",
                table: "account_full_reconcile");

            migrationBuilder.DropForeignKey(
                name: "account_partial_reconcile_exchange_move_id_fkey",
                table: "account_partial_reconcile");

            migrationBuilder.DropForeignKey(
                name: "account_payment_move_id_fkey",
                table: "account_payment");

            migrationBuilder.DropForeignKey(
                name: "pos_order_account_move_fkey",
                table: "pos_order");

            migrationBuilder.DropForeignKey(
                name: "pos_session_move_id_fkey",
                table: "pos_session");

            migrationBuilder.DropForeignKey(
                name: "repair_order_invoice_id_fkey",
                table: "repair_order");

            migrationBuilder.DropForeignKey(
                name: "account_payment_pos_session_id_fkey",
                table: "account_payment");

            migrationBuilder.DropForeignKey(
                name: "pos_order_session_id_fkey",
                table: "pos_order");

            migrationBuilder.DropForeignKey(
                name: "stock_picking_pos_session_id_fkey",
                table: "stock_picking");

            migrationBuilder.DropForeignKey(
                name: "account_fiscal_position_country_group_id_fkey",
                table: "account_fiscal_position");

            migrationBuilder.DropForeignKey(
                name: "pos_order_fiscal_position_id_fkey",
                table: "pos_order");

            migrationBuilder.DropForeignKey(
                name: "purchase_order_fiscal_position_id_fkey",
                table: "purchase_order");

            migrationBuilder.DropForeignKey(
                name: "sale_order_fiscal_position_id_fkey",
                table: "sale_order");

            migrationBuilder.DropForeignKey(
                name: "crm_lead_state_id_fkey",
                table: "crm_lead");

            migrationBuilder.DropForeignKey(
                name: "payment_transaction_partner_state_id_fkey",
                table: "payment_transaction");

            migrationBuilder.DropForeignKey(
                name: "res_bank_state_fkey",
                table: "res_bank");

            migrationBuilder.DropForeignKey(
                name: "hr_applicant_refuse_reason_template_id_fkey",
                table: "hr_applicant_refuse_reason");

            migrationBuilder.DropForeignKey(
                name: "hr_recruitment_stage_template_id_fkey",
                table: "hr_recruitment_stage");

            migrationBuilder.DropForeignKey(
                name: "project_project_stage_mail_template_id_fkey",
                table: "project_project_stage");

            migrationBuilder.DropForeignKey(
                name: "sale_order_template_mail_template_id_fkey",
                table: "sale_order_template");

            migrationBuilder.DropForeignKey(
                name: "website_cart_recovery_mail_template_id_fkey",
                table: "website");

            migrationBuilder.DropForeignKey(
                name: "account_payment_payment_transaction_id_fkey",
                table: "account_payment");

            migrationBuilder.DropForeignKey(
                name: "crm_team_alias_id_fkey",
                table: "crm_team");

            migrationBuilder.DropForeignKey(
                name: "hr_job_alias_id_fkey",
                table: "hr_job");

            migrationBuilder.DropForeignKey(
                name: "project_project_alias_id_fkey",
                table: "project_project");

            migrationBuilder.DropForeignKey(
                name: "hr_employee_bank_account_id_fkey",
                table: "hr_employee");

            migrationBuilder.DropForeignKey(
                name: "mail_message_mail_activity_type_id_fkey",
                table: "mail_message");

            migrationBuilder.DropForeignKey(
                name: "stock_picking_type_sequence_id_fkey",
                table: "stock_picking_type");

            migrationBuilder.DropForeignKey(
                name: "crm_lead_campaign_id_fkey",
                table: "crm_lead");

            migrationBuilder.DropForeignKey(
                name: "hr_applicant_campaign_id_fkey",
                table: "hr_applicant");

            migrationBuilder.DropForeignKey(
                name: "sale_order_campaign_id_fkey",
                table: "sale_order");

            migrationBuilder.DropForeignKey(
                name: "purchase_order_incoterm_id_fkey",
                table: "purchase_order");

            migrationBuilder.DropForeignKey(
                name: "sale_order_incoterm_fkey",
                table: "sale_order");

            migrationBuilder.DropForeignKey(
                name: "purchase_order_payment_term_id_fkey",
                table: "purchase_order");

            migrationBuilder.DropForeignKey(
                name: "sale_order_payment_term_id_fkey",
                table: "sale_order");

            migrationBuilder.DropForeignKey(
                name: "crm_lead_medium_id_fkey",
                table: "crm_lead");

            migrationBuilder.DropForeignKey(
                name: "hr_applicant_medium_id_fkey",
                table: "hr_applicant");

            migrationBuilder.DropForeignKey(
                name: "sale_order_medium_id_fkey",
                table: "sale_order");

            migrationBuilder.DropForeignKey(
                name: "crm_lead_source_id_fkey",
                table: "crm_lead");

            migrationBuilder.DropForeignKey(
                name: "hr_applicant_source_id_fkey",
                table: "hr_applicant");

            migrationBuilder.DropForeignKey(
                name: "sale_order_source_id_fkey",
                table: "sale_order");

            migrationBuilder.DropForeignKey(
                name: "repair_order_move_id_fkey",
                table: "repair_order");

            migrationBuilder.DropForeignKey(
                name: "crm_iap_lead_mining_request_team_id_fkey",
                table: "crm_iap_lead_mining_request");

            migrationBuilder.DropForeignKey(
                name: "crm_lead_team_id_fkey",
                table: "crm_lead");

            migrationBuilder.DropForeignKey(
                name: "crm_stage_team_id_fkey",
                table: "crm_stage");

            migrationBuilder.DropForeignKey(
                name: "pos_order_crm_team_id_fkey",
                table: "pos_order");

            migrationBuilder.DropForeignKey(
                name: "sale_order_team_id_fkey",
                table: "sale_order");

            migrationBuilder.DropForeignKey(
                name: "website_crm_default_team_id_fkey",
                table: "website");

            migrationBuilder.DropForeignKey(
                name: "website_salesteam_id_fkey",
                table: "website");

            migrationBuilder.DropForeignKey(
                name: "hr_job_website_id_fkey",
                table: "hr_job");

            migrationBuilder.DropForeignKey(
                name: "ir_ui_view_website_id_fkey",
                table: "ir_ui_view");

            migrationBuilder.DropForeignKey(
                name: "product_pricelist_website_id_fkey",
                table: "product_pricelist");

            migrationBuilder.DropForeignKey(
                name: "sale_order_website_id_fkey",
                table: "sale_order");

            migrationBuilder.DropForeignKey(
                name: "sms_template_sidebar_action_id_fkey",
                table: "sms_template");

            migrationBuilder.DropForeignKey(
                name: "hr_applicant_refuse_reason_id_fkey",
                table: "hr_applicant");

            migrationBuilder.DropForeignKey(
                name: "calendar_event_applicant_id_fkey",
                table: "calendar_event");

            migrationBuilder.DropForeignKey(
                name: "base_partner_merge_automatic_wizard_current_line_id_fkey",
                table: "base_partner_merge_automatic_wizard");

            migrationBuilder.DropForeignKey(
                name: "mail_channel_member_guest_id_fkey",
                table: "mail_channel_member");

            migrationBuilder.DropForeignKey(
                name: "mail_message_author_guest_id_fkey",
                table: "mail_message");

            migrationBuilder.DropForeignKey(
                name: "project_project_stage_sms_template_id_fkey",
                table: "project_project_stage");

            migrationBuilder.DropForeignKey(
                name: "calendar_recurrence_base_event_id_fkey",
                table: "calendar_recurrence");

            migrationBuilder.DropForeignKey(
                name: "sale_order_opportunity_id_fkey",
                table: "sale_order");

            migrationBuilder.DropForeignKey(
                name: "ir_model_fields_model_id_fkey",
                table: "ir_model_fields");

            migrationBuilder.DropForeignKey(
                name: "mail_channel_member_channel_id_fkey",
                table: "mail_channel_member");

            migrationBuilder.DropForeignKey(
                name: "mail_channel_rtc_session_channel_id_fkey",
                table: "mail_channel_rtc_session");

            migrationBuilder.DropForeignKey(
                name: "hr_attendance_employee_id_fkey",
                table: "hr_attendance");

            migrationBuilder.DropForeignKey(
                name: "hr_contract_employee_id_fkey",
                table: "hr_contract");

            migrationBuilder.DropForeignKey(
                name: "pos_order_employee_id_fkey",
                table: "pos_order");

            migrationBuilder.DropForeignKey(
                name: "procurement_group_sale_id_fkey",
                table: "procurement_group");

            migrationBuilder.DropForeignKey(
                name: "mail_message_subtype_id_fkey",
                table: "mail_message");

            migrationBuilder.DropForeignKey(
                name: "mail_channel_member_fetched_message_id_fkey",
                table: "mail_channel_member");

            migrationBuilder.DropForeignKey(
                name: "mail_channel_member_seen_message_id_fkey",
                table: "mail_channel_member");

            migrationBuilder.DropForeignKey(
                name: "mail_channel_member_rtc_inviting_session_id_fkey",
                table: "mail_channel_member");

            migrationBuilder.DropForeignKey(
                name: "stock_rule_picking_type_id_fkey",
                table: "stock_rule");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_in_type_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_int_type_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_manu_type_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_out_type_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_pack_type_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_pbm_type_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_pick_type_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_pos_type_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_return_type_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_sam_type_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_rule_location_dest_id_fkey",
                table: "stock_rule");

            migrationBuilder.DropForeignKey(
                name: "stock_rule_location_src_id_fkey",
                table: "stock_rule");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_lot_stock_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_pbm_loc_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_sam_loc_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_view_location_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_wh_input_stock_loc_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_wh_output_stock_loc_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_wh_pack_stock_loc_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_wh_qc_stock_loc_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "pos_order_procurement_group_id_fkey",
                table: "pos_order");

            migrationBuilder.DropForeignKey(
                name: "stock_rule_group_id_fkey",
                table: "stock_rule");

            migrationBuilder.DropForeignKey(
                name: "stock_rule_route_id_fkey",
                table: "stock_rule");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_crossdock_route_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_delivery_route_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_pbm_route_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_warehouse_reception_route_id_fkey",
                table: "stock_warehouse");

            migrationBuilder.DropForeignKey(
                name: "stock_rule_propagate_warehouse_id_fkey",
                table: "stock_rule");

            migrationBuilder.DropForeignKey(
                name: "stock_rule_warehouse_id_fkey",
                table: "stock_rule");

            migrationBuilder.DropForeignKey(
                name: "project_update_project_id_fkey",
                table: "project_update");

            migrationBuilder.DropTable(
                name: "account_account_account_balance_report_rel");

            migrationBuilder.DropTable(
                name: "account_account_account_common_account_report_rel");

            migrationBuilder.DropTable(
                name: "account_account_account_journal_rel");

            migrationBuilder.DropTable(
                name: "account_account_account_report_general_ledger_rel");

            migrationBuilder.DropTable(
                name: "account_account_account_tag");

            migrationBuilder.DropTable(
                name: "account_account_bankbook_report");

            migrationBuilder.DropTable(
                name: "account_account_cashbook_report");

            migrationBuilder.DropTable(
                name: "account_account_daybook_report");

            migrationBuilder.DropTable(
                name: "account_account_financial_report");

            migrationBuilder.DropTable(
                name: "account_account_financial_report_type");

            migrationBuilder.DropTable(
                name: "account_account_tag_account_move_line_rel");

            migrationBuilder.DropTable(
                name: "account_account_tag_account_tax_repartition_line_rel");

            migrationBuilder.DropTable(
                name: "account_account_tag_product_template_rel");

            migrationBuilder.DropTable(
                name: "account_account_tax_default_rel");

            migrationBuilder.DropTable(
                name: "account_account_template_account_tag");

            migrationBuilder.DropTable(
                name: "account_account_template_tax_rel");

            migrationBuilder.DropTable(
                name: "account_accrued_orders_wizard");

            migrationBuilder.DropTable(
                name: "account_aged_trial_balance_account_journal_rel");

            migrationBuilder.DropTable(
                name: "account_aged_trial_balance_res_partner_rel");

            migrationBuilder.DropTable(
                name: "account_analytic_account_account_common_account_report_rel");

            migrationBuilder.DropTable(
                name: "account_analytic_account_account_report_general_ledger_rel");

            migrationBuilder.DropTable(
                name: "account_analytic_applicability");

            migrationBuilder.DropTable(
                name: "account_analytic_distribution_model");

            migrationBuilder.DropTable(
                name: "account_asset_depreciation_line");

            migrationBuilder.DropTable(
                name: "account_automatic_entry_wizard_account_move_line_rel");

            migrationBuilder.DropTable(
                name: "account_balance_report_journal_rel");

            migrationBuilder.DropTable(
                name: "account_balance_report_res_partner_rel");

            migrationBuilder.DropTable(
                name: "account_bank_statement_import_ir_attachment_rel");

            migrationBuilder.DropTable(
                name: "account_bank_statement_import_journal_creation");

            migrationBuilder.DropTable(
                name: "account_bank_statement_ir_attachment_rel");

            migrationBuilder.DropTable(
                name: "account_bankbook_report_account_journal_rel");

            migrationBuilder.DropTable(
                name: "account_budget_rel");

            migrationBuilder.DropTable(
                name: "account_cashbook_report_account_journal_rel");

            migrationBuilder.DropTable(
                name: "account_common_account_report_account_journal_rel");

            migrationBuilder.DropTable(
                name: "account_common_account_report_res_partner_rel");

            migrationBuilder.DropTable(
                name: "account_common_journal_report_account_journal_rel");

            migrationBuilder.DropTable(
                name: "account_common_partner_report_account_journal_rel");

            migrationBuilder.DropTable(
                name: "account_common_partner_report_res_partner_rel");

            migrationBuilder.DropTable(
                name: "account_common_report_account_journal_rel");

            migrationBuilder.DropTable(
                name: "account_daybook_report_account_journal_rel");

            migrationBuilder.DropTable(
                name: "account_edi_document");

            migrationBuilder.DropTable(
                name: "account_edi_format_account_journal_rel");

            migrationBuilder.DropTable(
                name: "account_financial_year_op");

            migrationBuilder.DropTable(
                name: "account_fiscal_position_account");

            migrationBuilder.DropTable(
                name: "account_fiscal_position_account_template");

            migrationBuilder.DropTable(
                name: "account_fiscal_position_pos_config_rel");

            migrationBuilder.DropTable(
                name: "account_fiscal_position_res_config_settings_rel");

            migrationBuilder.DropTable(
                name: "account_fiscal_position_res_country_state_rel");

            migrationBuilder.DropTable(
                name: "account_fiscal_position_tax");

            migrationBuilder.DropTable(
                name: "account_fiscal_position_tax_template");

            migrationBuilder.DropTable(
                name: "account_fiscal_position_template_res_country_state_rel");

            migrationBuilder.DropTable(
                name: "account_fiscal_year");

            migrationBuilder.DropTable(
                name: "account_group_template");

            migrationBuilder.DropTable(
                name: "account_invoice_transaction_rel");

            migrationBuilder.DropTable(
                name: "account_journal_account_journal_group_rel");

            migrationBuilder.DropTable(
                name: "account_journal_account_print_journal_rel");

            migrationBuilder.DropTable(
                name: "account_journal_account_reconcile_model_rel");

            migrationBuilder.DropTable(
                name: "account_journal_account_reconcile_model_template_rel");

            migrationBuilder.DropTable(
                name: "account_journal_account_report_partner_ledger_rel");

            migrationBuilder.DropTable(
                name: "account_journal_account_tax_report_wizard_rel");

            migrationBuilder.DropTable(
                name: "account_journal_accounting_report_rel");

            migrationBuilder.DropTable(
                name: "account_move_account_invoice_send_rel");

            migrationBuilder.DropTable(
                name: "account_move_account_resequence_wizard_rel");

            migrationBuilder.DropTable(
                name: "account_move_line_account_tax_rel");

            migrationBuilder.DropTable(
                name: "account_move_purchase_order_rel");

            migrationBuilder.DropTable(
                name: "account_move_reversal_move");

            migrationBuilder.DropTable(
                name: "account_move_reversal_new_move");

            migrationBuilder.DropTable(
                name: "account_payment_account_bank_statement_line_rel");

            migrationBuilder.DropTable(
                name: "account_payment_register_move_line_rel");

            migrationBuilder.DropTable(
                name: "account_payment_term_line");

            migrationBuilder.DropTable(
                name: "account_reconcile_model_line_account_tax_rel");

            migrationBuilder.DropTable(
                name: "account_reconcile_model_line_template_account_tax_template_rel");

            migrationBuilder.DropTable(
                name: "account_reconcile_model_partner_mapping");

            migrationBuilder.DropTable(
                name: "account_reconcile_model_res_partner_category_rel");

            migrationBuilder.DropTable(
                name: "account_reconcile_model_res_partner_rel");

            migrationBuilder.DropTable(
                name: "account_reconcile_model_template_res_partner_category_rel");

            migrationBuilder.DropTable(
                name: "account_reconcile_model_template_res_partner_rel");

            migrationBuilder.DropTable(
                name: "account_report_column");

            migrationBuilder.DropTable(
                name: "account_report_external_value");

            migrationBuilder.DropTable(
                name: "account_report_general_ledger_journal_rel");

            migrationBuilder.DropTable(
                name: "account_report_general_ledger_res_partner_rel");

            migrationBuilder.DropTable(
                name: "account_report_partner_ledger_res_partner_rel");

            migrationBuilder.DropTable(
                name: "account_setup_bank_manual_config");

            migrationBuilder.DropTable(
                name: "account_tax_filiation_rel");

            migrationBuilder.DropTable(
                name: "account_tax_hr_expense_split_rel");

            migrationBuilder.DropTable(
                name: "account_tax_pos_order_line_rel");

            migrationBuilder.DropTable(
                name: "account_tax_purchase_order_line_rel");

            migrationBuilder.DropTable(
                name: "account_tax_rep_template_minus");

            migrationBuilder.DropTable(
                name: "account_tax_rep_template_plus");

            migrationBuilder.DropTable(
                name: "account_tax_repartition_financial_tags");

            migrationBuilder.DropTable(
                name: "account_tax_sale_advance_payment_inv_rel");

            migrationBuilder.DropTable(
                name: "account_tax_sale_order_line_rel");

            migrationBuilder.DropTable(
                name: "account_tax_template_filiation_rel");

            migrationBuilder.DropTable(
                name: "account_tour_upload_bill_email_confirm");

            migrationBuilder.DropTable(
                name: "account_tour_upload_bill_ir_attachments_rel");

            migrationBuilder.DropTable(
                name: "account_trial_balance_analytic_rel");

            migrationBuilder.DropTable(
                name: "account_unreconcile");

            migrationBuilder.DropTable(
                name: "applicant_get_refuse_reason_hr_applicant_rel");

            migrationBuilder.DropTable(
                name: "applicant_send_mail_hr_applicant_rel");

            migrationBuilder.DropTable(
                name: "asset_depreciation_confirmation_wizard");

            migrationBuilder.DropTable(
                name: "asset_modify");

            migrationBuilder.DropTable(
                name: "auth_totp_device");

            migrationBuilder.DropTable(
                name: "auth_totp_wizard");

            migrationBuilder.DropTable(
                name: "barcode_rule");

            migrationBuilder.DropTable(
                name: "base_document_layout");

            migrationBuilder.DropTable(
                name: "base_enable_profiling_wizard");

            migrationBuilder.DropTable(
                name: "base_import_import");

            migrationBuilder.DropTable(
                name: "base_import_mapping");

            migrationBuilder.DropTable(
                name: "base_import_tests_models_char");

            migrationBuilder.DropTable(
                name: "base_import_tests_models_char_noreadonly");

            migrationBuilder.DropTable(
                name: "base_import_tests_models_char_readonly");

            migrationBuilder.DropTable(
                name: "base_import_tests_models_char_required");

            migrationBuilder.DropTable(
                name: "base_import_tests_models_char_states");

            migrationBuilder.DropTable(
                name: "base_import_tests_models_char_stillreadonly");

            migrationBuilder.DropTable(
                name: "base_import_tests_models_complex");

            migrationBuilder.DropTable(
                name: "base_import_tests_models_float");

            migrationBuilder.DropTable(
                name: "base_import_tests_models_m2o");

            migrationBuilder.DropTable(
                name: "base_import_tests_models_m2o_required");

            migrationBuilder.DropTable(
                name: "base_import_tests_models_o2m_child");

            migrationBuilder.DropTable(
                name: "base_import_tests_models_preview");

            migrationBuilder.DropTable(
                name: "base_language_import");

            migrationBuilder.DropTable(
                name: "base_language_install_website_rel");

            migrationBuilder.DropTable(
                name: "base_module_install_request");

            migrationBuilder.DropTable(
                name: "base_module_install_review");

            migrationBuilder.DropTable(
                name: "base_module_uninstall");

            migrationBuilder.DropTable(
                name: "base_module_update");

            migrationBuilder.DropTable(
                name: "base_module_upgrade");

            migrationBuilder.DropTable(
                name: "base_partner_merge_automatic_wizard_res_partner_rel");

            migrationBuilder.DropTable(
                name: "bus_bus");

            migrationBuilder.DropTable(
                name: "bus_presence");

            migrationBuilder.DropTable(
                name: "calendar_alarm_calendar_event_rel");

            migrationBuilder.DropTable(
                name: "calendar_attendee");

            migrationBuilder.DropTable(
                name: "calendar_event_res_partner_rel");

            migrationBuilder.DropTable(
                name: "calendar_filters");

            migrationBuilder.DropTable(
                name: "calendar_provider_config");

            migrationBuilder.DropTable(
                name: "change_lock_date");

            migrationBuilder.DropTable(
                name: "change_password_own");

            migrationBuilder.DropTable(
                name: "change_password_user");

            migrationBuilder.DropTable(
                name: "change_production_qty");

            migrationBuilder.DropTable(
                name: "crm_convert_lead_mass_lead_rel");

            migrationBuilder.DropTable(
                name: "crm_iap_lead_helpers");

            migrationBuilder.DropTable(
                name: "crm_iap_lead_industry_crm_iap_lead_mining_request_rel");

            migrationBuilder.DropTable(
                name: "crm_iap_lead_mining_request_crm_iap_lead_role_rel");

            migrationBuilder.DropTable(
                name: "crm_iap_lead_mining_request_crm_tag_rel");

            migrationBuilder.DropTable(
                name: "crm_iap_lead_mining_request_res_country_rel");

            migrationBuilder.DropTable(
                name: "crm_iap_lead_mining_request_res_country_state_rel");

            migrationBuilder.DropTable(
                name: "crm_lead_crm_lead2opportunity_partner_mass_rel");

            migrationBuilder.DropTable(
                name: "crm_lead_crm_lead2opportunity_partner_rel");

            migrationBuilder.DropTable(
                name: "crm_lead_lost");

            migrationBuilder.DropTable(
                name: "crm_lead_pls_update_crm_lead_scoring_frequency_field_rel");

            migrationBuilder.DropTable(
                name: "crm_lead_scoring_frequency");

            migrationBuilder.DropTable(
                name: "crm_lead_website_visitor_rel");

            migrationBuilder.DropTable(
                name: "crm_lead2opportunity_partner_mass_res_users_rel");

            migrationBuilder.DropTable(
                name: "crm_quotation_partner");

            migrationBuilder.DropTable(
                name: "crm_tag_rel");

            migrationBuilder.DropTable(
                name: "crm_team_member");

            migrationBuilder.DropTable(
                name: "crossovered_budget_lines");

            migrationBuilder.DropTable(
                name: "decimal_precision");

            migrationBuilder.DropTable(
                name: "digest_digest_res_users_rel");

            migrationBuilder.DropTable(
                name: "digest_tip_res_users_rel");

            migrationBuilder.DropTable(
                name: "email_template_attachment_rel");

            migrationBuilder.DropTable(
                name: "employee_category_rel");

            migrationBuilder.DropTable(
                name: "expense_tax");

            migrationBuilder.DropTable(
                name: "fleet_service_type_fleet_vehicle_log_contract_rel");

            migrationBuilder.DropTable(
                name: "fleet_vehicle_assignation_log");

            migrationBuilder.DropTable(
                name: "fleet_vehicle_log_services");

            migrationBuilder.DropTable(
                name: "fleet_vehicle_model_vendors");

            migrationBuilder.DropTable(
                name: "fleet_vehicle_vehicle_tag_rel");

            migrationBuilder.DropTable(
                name: "followup_sending_results");

            migrationBuilder.DropTable(
                name: "hr_applicant_hr_applicant_category_rel");

            migrationBuilder.DropTable(
                name: "hr_applicant_hr_skill_rel");

            migrationBuilder.DropTable(
                name: "hr_applicant_res_users_interviewers_rel");

            migrationBuilder.DropTable(
                name: "hr_applicant_skill");

            migrationBuilder.DropTable(
                name: "hr_department_hr_leave_stress_day_rel");

            migrationBuilder.DropTable(
                name: "hr_department_mail_channel_rel");

            migrationBuilder.DropTable(
                name: "hr_departure_wizard");

            migrationBuilder.DropTable(
                name: "hr_employee_hr_leave_allocation_rel");

            migrationBuilder.DropTable(
                name: "hr_employee_hr_leave_rel");

            migrationBuilder.DropTable(
                name: "hr_employee_hr_plan_wizard_rel");

            migrationBuilder.DropTable(
                name: "hr_employee_hr_skill_rel");

            migrationBuilder.DropTable(
                name: "hr_employee_pos_config_rel");

            migrationBuilder.DropTable(
                name: "hr_employee_skill");

            migrationBuilder.DropTable(
                name: "hr_employee_skill_log");

            migrationBuilder.DropTable(
                name: "hr_expense_approve_duplicate_hr_expense_sheet_rel");

            migrationBuilder.DropTable(
                name: "hr_expense_hr_expense_approve_duplicate_rel");

            migrationBuilder.DropTable(
                name: "hr_expense_hr_expense_refuse_wizard_rel");

            migrationBuilder.DropTable(
                name: "hr_holidays_cancel_leave");

            migrationBuilder.DropTable(
                name: "hr_job_extended_interviewer_res_users");

            migrationBuilder.DropTable(
                name: "hr_job_hr_recruitment_stage_rel");

            migrationBuilder.DropTable(
                name: "hr_job_res_users_rel");

            migrationBuilder.DropTable(
                name: "hr_leave_accrual_level");

            migrationBuilder.DropTable(
                name: "hr_plan_activity_type");

            migrationBuilder.DropTable(
                name: "hr_recruitment_source");

            migrationBuilder.DropTable(
                name: "hr_resume_line");

            migrationBuilder.DropTable(
                name: "iap_account_res_company_rel");

            migrationBuilder.DropTable(
                name: "ir_act_client");

            migrationBuilder.DropTable(
                name: "ir_act_server_group_rel");

            migrationBuilder.DropTable(
                name: "ir_act_server_res_partner_rel");

            migrationBuilder.DropTable(
                name: "ir_act_url");

            migrationBuilder.DropTable(
                name: "ir_act_window_group_rel");

            migrationBuilder.DropTable(
                name: "ir_act_window_view");

            migrationBuilder.DropTable(
                name: "ir_actions");

            migrationBuilder.DropTable(
                name: "ir_actions_todo");

            migrationBuilder.DropTable(
                name: "ir_asset");

            migrationBuilder.DropTable(
                name: "ir_config_parameter");

            migrationBuilder.DropTable(
                name: "ir_cron_trigger");

            migrationBuilder.DropTable(
                name: "ir_default");

            migrationBuilder.DropTable(
                name: "ir_demo");

            migrationBuilder.DropTable(
                name: "ir_demo_failure");

            migrationBuilder.DropTable(
                name: "ir_exports_line");

            migrationBuilder.DropTable(
                name: "ir_logging");

            migrationBuilder.DropTable(
                name: "ir_model_access");

            migrationBuilder.DropTable(
                name: "ir_model_constraint");

            migrationBuilder.DropTable(
                name: "ir_model_data");

            migrationBuilder.DropTable(
                name: "ir_model_fields_group_rel");

            migrationBuilder.DropTable(
                name: "ir_model_fields_selection");

            migrationBuilder.DropTable(
                name: "ir_model_relation");

            migrationBuilder.DropTable(
                name: "ir_module_module_dependency");

            migrationBuilder.DropTable(
                name: "ir_module_module_exclusion");

            migrationBuilder.DropTable(
                name: "ir_profile");

            migrationBuilder.DropTable(
                name: "ir_property");

            migrationBuilder.DropTable(
                name: "ir_sequence_date_range");

            migrationBuilder.DropTable(
                name: "ir_server_object_lines");

            migrationBuilder.DropTable(
                name: "ir_ui_menu_group_rel");

            migrationBuilder.DropTable(
                name: "ir_ui_view_custom");

            migrationBuilder.DropTable(
                name: "ir_ui_view_group_rel");

            migrationBuilder.DropTable(
                name: "job_favorite_user_rel");

            migrationBuilder.DropTable(
                name: "journal_account_control_rel");

            migrationBuilder.DropTable(
                name: "lot_label_layout_stock_picking_rel");

            migrationBuilder.DropTable(
                name: "lunch_alert_lunch_location_rel");

            migrationBuilder.DropTable(
                name: "lunch_cashmove");

            migrationBuilder.DropTable(
                name: "lunch_location_lunch_supplier_rel");

            migrationBuilder.DropTable(
                name: "lunch_order_topping");

            migrationBuilder.DropTable(
                name: "lunch_product_favorite_user_rel");

            migrationBuilder.DropTable(
                name: "mail_activity");

            migrationBuilder.DropTable(
                name: "mail_activity_rel");

            migrationBuilder.DropTable(
                name: "mail_activity_type_mail_template_rel");

            migrationBuilder.DropTable(
                name: "mail_blacklist");

            migrationBuilder.DropTable(
                name: "mail_blacklist_remove");

            migrationBuilder.DropTable(
                name: "mail_channel_res_groups_rel");

            migrationBuilder.DropTable(
                name: "mail_compose_message_ir_attachments_rel");

            migrationBuilder.DropTable(
                name: "mail_compose_message_res_partner_rel");

            migrationBuilder.DropTable(
                name: "mail_followers_mail_message_subtype_rel");

            migrationBuilder.DropTable(
                name: "mail_gateway_allowed");

            migrationBuilder.DropTable(
                name: "mail_ice_server");

            migrationBuilder.DropTable(
                name: "mail_link_preview");

            migrationBuilder.DropTable(
                name: "mail_mail_res_partner_rel");

            migrationBuilder.DropTable(
                name: "mail_message_reaction");

            migrationBuilder.DropTable(
                name: "mail_message_res_partner_rel");

            migrationBuilder.DropTable(
                name: "mail_message_res_partner_starred_rel");

            migrationBuilder.DropTable(
                name: "mail_message_schedule");

            migrationBuilder.DropTable(
                name: "mail_notification_mail_resend_message_rel");

            migrationBuilder.DropTable(
                name: "mail_resend_partner");

            migrationBuilder.DropTable(
                name: "mail_shortcode");

            migrationBuilder.DropTable(
                name: "mail_template_mail_template_reset_rel");

            migrationBuilder.DropTable(
                name: "mail_template_preview");

            migrationBuilder.DropTable(
                name: "mail_tracking_value");

            migrationBuilder.DropTable(
                name: "mail_wizard_invite_res_partner_rel");

            migrationBuilder.DropTable(
                name: "maintenance_request");

            migrationBuilder.DropTable(
                name: "maintenance_team_users_rel");

            migrationBuilder.DropTable(
                name: "meeting_category_rel");

            migrationBuilder.DropTable(
                name: "merge_opportunity_rel");

            migrationBuilder.DropTable(
                name: "message_attachment_rel");

            migrationBuilder.DropTable(
                name: "mrp_bom_byproduct_product_template_attribute_value_rel");

            migrationBuilder.DropTable(
                name: "mrp_bom_line_product_template_attribute_value_rel");

            migrationBuilder.DropTable(
                name: "mrp_consumption_warning_line");

            migrationBuilder.DropTable(
                name: "mrp_consumption_warning_mrp_production_rel");

            migrationBuilder.DropTable(
                name: "mrp_document");

            migrationBuilder.DropTable(
                name: "mrp_immediate_production_line");

            migrationBuilder.DropTable(
                name: "mrp_production_backorder_line");

            migrationBuilder.DropTable(
                name: "mrp_production_mrp_production_backorder_rel");

            migrationBuilder.DropTable(
                name: "mrp_production_production_rel");

            migrationBuilder.DropTable(
                name: "mrp_production_split_line");

            migrationBuilder.DropTable(
                name: "mrp_routing_workcenter_dependencies_rel");

            migrationBuilder.DropTable(
                name: "mrp_routing_workcenter_product_template_attribute_value_rel");

            migrationBuilder.DropTable(
                name: "mrp_workcenter_alternative_rel");

            migrationBuilder.DropTable(
                name: "mrp_workcenter_capacity");

            migrationBuilder.DropTable(
                name: "mrp_workcenter_mrp_workcenter_tag_rel");

            migrationBuilder.DropTable(
                name: "mrp_workcenter_productivity");

            migrationBuilder.DropTable(
                name: "mrp_workorder_dependencies_rel");

            migrationBuilder.DropTable(
                name: "note_stage_rel");

            migrationBuilder.DropTable(
                name: "note_tags_rel");

            migrationBuilder.DropTable(
                name: "partner_stat_rel");

            migrationBuilder.DropTable(
                name: "payment_country_rel");

            migrationBuilder.DropTable(
                name: "payment_icon_payment_provider_rel");

            migrationBuilder.DropTable(
                name: "payment_link_wizard");

            migrationBuilder.DropTable(
                name: "payment_provider_onboarding_wizard");

            migrationBuilder.DropTable(
                name: "payment_refund_wizard");

            migrationBuilder.DropTable(
                name: "phone_blacklist");

            migrationBuilder.DropTable(
                name: "phone_blacklist_remove");

            migrationBuilder.DropTable(
                name: "picking_label_type_stock_picking_rel");

            migrationBuilder.DropTable(
                name: "portal_share_res_partner_rel");

            migrationBuilder.DropTable(
                name: "portal_wizard_res_partner_rel");

            migrationBuilder.DropTable(
                name: "portal_wizard_user");

            migrationBuilder.DropTable(
                name: "pos_bill_pos_config_rel");

            migrationBuilder.DropTable(
                name: "pos_category_pos_config_rel");

            migrationBuilder.DropTable(
                name: "pos_category_res_config_settings_rel");

            migrationBuilder.DropTable(
                name: "pos_close_session_wizard");

            migrationBuilder.DropTable(
                name: "pos_config_pos_payment_method_rel");

            migrationBuilder.DropTable(
                name: "pos_config_product_pricelist_rel");

            migrationBuilder.DropTable(
                name: "pos_detail_configs");

            migrationBuilder.DropTable(
                name: "pos_make_payment");

            migrationBuilder.DropTable(
                name: "pos_pack_operation_lot");

            migrationBuilder.DropTable(
                name: "pos_payment");

            migrationBuilder.DropTable(
                name: "pos_session_check_product_wizard");

            migrationBuilder.DropTable(
                name: "privacy_lookup_wizard_line");

            migrationBuilder.DropTable(
                name: "product_accessory_rel");

            migrationBuilder.DropTable(
                name: "product_alternative_rel");

            migrationBuilder.DropTable(
                name: "product_attr_exclusion_value_ids_rel");

            migrationBuilder.DropTable(
                name: "product_attribute_custom_value");

            migrationBuilder.DropTable(
                name: "product_attribute_product_template_rel");

            migrationBuilder.DropTable(
                name: "product_attribute_value_product_template_attribute_line_rel");

            migrationBuilder.DropTable(
                name: "product_image");

            migrationBuilder.DropTable(
                name: "product_label_layout_product_product_rel");

            migrationBuilder.DropTable(
                name: "product_label_layout_product_template_rel");

            migrationBuilder.DropTable(
                name: "product_label_layout_stock_move_line_rel");

            migrationBuilder.DropTable(
                name: "product_optional_rel");

            migrationBuilder.DropTable(
                name: "product_pricelist_item");

            migrationBuilder.DropTable(
                name: "product_pricelist_res_config_settings_rel");

            migrationBuilder.DropTable(
                name: "product_product_stock_track_confirmation_rel");

            migrationBuilder.DropTable(
                name: "product_public_category_product_template_rel");

            migrationBuilder.DropTable(
                name: "product_replenish_stock_route_rel");

            migrationBuilder.DropTable(
                name: "product_supplier_taxes_rel");

            migrationBuilder.DropTable(
                name: "product_supplierinfo_stock_replenishment_info_rel");

            migrationBuilder.DropTable(
                name: "product_tag_product_product_rel");

            migrationBuilder.DropTable(
                name: "product_tag_product_template_rel");

            migrationBuilder.DropTable(
                name: "product_taxes_rel");

            migrationBuilder.DropTable(
                name: "product_template_attribute_value_sale_order_line_rel");

            migrationBuilder.DropTable(
                name: "product_variant_combination");

            migrationBuilder.DropTable(
                name: "project_collaborator");

            migrationBuilder.DropTable(
                name: "project_favorite_user_rel");

            migrationBuilder.DropTable(
                name: "project_project_project_tags_rel");

            migrationBuilder.DropTable(
                name: "project_project_project_task_type_delete_wizard_rel");

            migrationBuilder.DropTable(
                name: "project_share_wizard_res_partner_rel");

            migrationBuilder.DropTable(
                name: "project_tags_project_task_rel");

            migrationBuilder.DropTable(
                name: "project_task_type_project_task_type_delete_wizard_rel");

            migrationBuilder.DropTable(
                name: "project_task_type_rel");

            migrationBuilder.DropTable(
                name: "project_task_user_rel");

            migrationBuilder.DropTable(
                name: "purchase_order_stock_picking_rel");

            migrationBuilder.DropTable(
                name: "rating_rating");

            migrationBuilder.DropTable(
                name: "recurring_payment_line");

            migrationBuilder.DropTable(
                name: "rel_modules_langexport");

            migrationBuilder.DropTable(
                name: "rel_server_actions");

            migrationBuilder.DropTable(
                name: "repair_fee_line_tax");

            migrationBuilder.DropTable(
                name: "repair_operation_line_tax");

            migrationBuilder.DropTable(
                name: "repair_order_make_invoice");

            migrationBuilder.DropTable(
                name: "repair_order_repair_tags_rel");

            migrationBuilder.DropTable(
                name: "res_company_users_rel");

            migrationBuilder.DropTable(
                name: "res_config");

            migrationBuilder.DropTable(
                name: "res_config_installer");

            migrationBuilder.DropTable(
                name: "res_country_group_pricelist_rel");

            migrationBuilder.DropTable(
                name: "res_country_res_country_group_rel");

            migrationBuilder.DropTable(
                name: "res_currency_rate");

            migrationBuilder.DropTable(
                name: "res_groups_implied_rel");

            migrationBuilder.DropTable(
                name: "res_groups_report_rel");

            migrationBuilder.DropTable(
                name: "res_groups_spreadsheet_dashboard_rel");

            migrationBuilder.DropTable(
                name: "res_groups_users_rel");

            migrationBuilder.DropTable(
                name: "res_lang_install_rel");

            migrationBuilder.DropTable(
                name: "res_partner_autocomplete_sync");

            migrationBuilder.DropTable(
                name: "res_partner_res_partner_category_rel");

            migrationBuilder.DropTable(
                name: "res_users_apikeys");

            migrationBuilder.DropTable(
                name: "res_users_apikeys_description");

            migrationBuilder.DropTable(
                name: "res_users_deletion");

            migrationBuilder.DropTable(
                name: "res_users_identitycheck");

            migrationBuilder.DropTable(
                name: "res_users_log");

            migrationBuilder.DropTable(
                name: "res_users_settings_volumes");

            migrationBuilder.DropTable(
                name: "reset_view_arch_wizard");

            migrationBuilder.DropTable(
                name: "resource_calendar_attendance");

            migrationBuilder.DropTable(
                name: "rule_group_rel");

            migrationBuilder.DropTable(
                name: "sale_advance_payment_inv_sale_order_rel");

            migrationBuilder.DropTable(
                name: "sale_order_cancel");

            migrationBuilder.DropTable(
                name: "sale_order_line_invoice_rel");

            migrationBuilder.DropTable(
                name: "sale_order_option");

            migrationBuilder.DropTable(
                name: "sale_order_tag_rel");

            migrationBuilder.DropTable(
                name: "sale_order_template_line");

            migrationBuilder.DropTable(
                name: "sale_order_template_option");

            migrationBuilder.DropTable(
                name: "sale_order_transaction_rel");

            migrationBuilder.DropTable(
                name: "sale_payment_provider_onboarding_wizard");

            migrationBuilder.DropTable(
                name: "sms_composer");

            migrationBuilder.DropTable(
                name: "sms_resend_recipient");

            migrationBuilder.DropTable(
                name: "sms_template_preview");

            migrationBuilder.DropTable(
                name: "sms_template_sms_template_reset_rel");

            migrationBuilder.DropTable(
                name: "snailmail_confirm_invoice");

            migrationBuilder.DropTable(
                name: "snailmail_letter_format_error");

            migrationBuilder.DropTable(
                name: "snailmail_letter_missing_required_fields");

            migrationBuilder.DropTable(
                name: "stock_assign_serial");

            migrationBuilder.DropTable(
                name: "stock_backorder_confirmation_line");

            migrationBuilder.DropTable(
                name: "stock_change_product_qty");

            migrationBuilder.DropTable(
                name: "stock_conflict_quant_rel");

            migrationBuilder.DropTable(
                name: "stock_immediate_transfer_line");

            migrationBuilder.DropTable(
                name: "stock_inventory_adjustment_name_stock_quant_rel");

            migrationBuilder.DropTable(
                name: "stock_inventory_conflict_stock_quant_rel");

            migrationBuilder.DropTable(
                name: "stock_inventory_warning_stock_quant_rel");

            migrationBuilder.DropTable(
                name: "stock_move_line_consume_rel");

            migrationBuilder.DropTable(
                name: "stock_move_move_rel");

            migrationBuilder.DropTable(
                name: "stock_notification_product_partner_rel");

            migrationBuilder.DropTable(
                name: "stock_orderpoint_snooze_stock_warehouse_orderpoint_rel");

            migrationBuilder.DropTable(
                name: "stock_package_destination");

            migrationBuilder.DropTable(
                name: "stock_package_type_stock_putaway_rule_rel");

            migrationBuilder.DropTable(
                name: "stock_picking_backorder_rel");

            migrationBuilder.DropTable(
                name: "stock_picking_sms_rel");

            migrationBuilder.DropTable(
                name: "stock_picking_transfer_rel");

            migrationBuilder.DropTable(
                name: "stock_quant_stock_request_count_rel");

            migrationBuilder.DropTable(
                name: "stock_quant_stock_track_confirmation_rel");

            migrationBuilder.DropTable(
                name: "stock_quantity_history");

            migrationBuilder.DropTable(
                name: "stock_replenishment_option");

            migrationBuilder.DropTable(
                name: "stock_return_picking_line");

            migrationBuilder.DropTable(
                name: "stock_route_categ");

            migrationBuilder.DropTable(
                name: "stock_route_move");

            migrationBuilder.DropTable(
                name: "stock_route_packaging");

            migrationBuilder.DropTable(
                name: "stock_route_product");

            migrationBuilder.DropTable(
                name: "stock_route_stock_rules_report_rel");

            migrationBuilder.DropTable(
                name: "stock_route_warehouse");

            migrationBuilder.DropTable(
                name: "stock_rules_report_stock_warehouse_rel");

            migrationBuilder.DropTable(
                name: "stock_scheduler_compute");

            migrationBuilder.DropTable(
                name: "stock_storage_category_capacity");

            migrationBuilder.DropTable(
                name: "stock_traceability_report");

            migrationBuilder.DropTable(
                name: "stock_track_line");

            migrationBuilder.DropTable(
                name: "stock_valuation_layer");

            migrationBuilder.DropTable(
                name: "stock_valuation_layer_revaluation");

            migrationBuilder.DropTable(
                name: "stock_warn_insufficient_qty_repair");

            migrationBuilder.DropTable(
                name: "stock_warn_insufficient_qty_scrap");

            migrationBuilder.DropTable(
                name: "stock_warn_insufficient_qty_unbuild");

            migrationBuilder.DropTable(
                name: "stock_wh_resupply_table");

            migrationBuilder.DropTable(
                name: "summary_emp_rel");

            migrationBuilder.DropTable(
                name: "task_dependencies_rel");

            migrationBuilder.DropTable(
                name: "team_favorite_user_rel");

            migrationBuilder.DropTable(
                name: "utm_tag_rel");

            migrationBuilder.DropTable(
                name: "validate_account_move");

            migrationBuilder.DropTable(
                name: "web_editor_converter_test");

            migrationBuilder.DropTable(
                name: "web_tour_tour");

            migrationBuilder.DropTable(
                name: "website_configurator_feature");

            migrationBuilder.DropTable(
                name: "website_lang_rel");

            migrationBuilder.DropTable(
                name: "website_menu");

            migrationBuilder.DropTable(
                name: "website_rewrite");

            migrationBuilder.DropTable(
                name: "website_robots");

            migrationBuilder.DropTable(
                name: "website_sale_extra_field");

            migrationBuilder.DropTable(
                name: "website_snippet_filter");

            migrationBuilder.DropTable(
                name: "website_track");

            migrationBuilder.DropTable(
                name: "wizard_ir_model_menu_create");

            migrationBuilder.DropTable(
                name: "account_account_type");

            migrationBuilder.DropTable(
                name: "account_aged_trial_balance");

            migrationBuilder.DropTable(
                name: "account_asset_asset");

            migrationBuilder.DropTable(
                name: "account_automatic_entry_wizard");

            migrationBuilder.DropTable(
                name: "account_bank_statement_import");

            migrationBuilder.DropTable(
                name: "account_bankbook_report");

            migrationBuilder.DropTable(
                name: "account_cashbook_report");

            migrationBuilder.DropTable(
                name: "account_common_account_report");

            migrationBuilder.DropTable(
                name: "account_common_journal_report");

            migrationBuilder.DropTable(
                name: "account_common_partner_report");

            migrationBuilder.DropTable(
                name: "account_common_report");

            migrationBuilder.DropTable(
                name: "account_daybook_report");

            migrationBuilder.DropTable(
                name: "account_edi_format");

            migrationBuilder.DropTable(
                name: "account_fiscal_position_template");

            migrationBuilder.DropTable(
                name: "account_journal_group");

            migrationBuilder.DropTable(
                name: "account_print_journal");

            migrationBuilder.DropTable(
                name: "account_tax_report_wizard");

            migrationBuilder.DropTable(
                name: "accounting_report");

            migrationBuilder.DropTable(
                name: "account_resequence_wizard");

            migrationBuilder.DropTable(
                name: "account_move_reversal");

            migrationBuilder.DropTable(
                name: "account_payment_register");

            migrationBuilder.DropTable(
                name: "account_reconcile_model_line");

            migrationBuilder.DropTable(
                name: "account_reconcile_model_line_template");

            migrationBuilder.DropTable(
                name: "account_report_general_ledger");

            migrationBuilder.DropTable(
                name: "account_report_partner_ledger");

            migrationBuilder.DropTable(
                name: "hr_expense_split");

            migrationBuilder.DropTable(
                name: "account_report_expression");

            migrationBuilder.DropTable(
                name: "account_tax_repartition_line_template");

            migrationBuilder.DropTable(
                name: "account_account_tag");

            migrationBuilder.DropTable(
                name: "account_tour_upload_bill");

            migrationBuilder.DropTable(
                name: "account_balance_report");

            migrationBuilder.DropTable(
                name: "applicant_get_refuse_reason");

            migrationBuilder.DropTable(
                name: "applicant_send_mail");

            migrationBuilder.DropTable(
                name: "report_layout");

            migrationBuilder.DropTable(
                name: "base_import_tests_models_m2o_related");

            migrationBuilder.DropTable(
                name: "base_import_tests_models_m2o_required_related");

            migrationBuilder.DropTable(
                name: "base_import_tests_models_o2m");

            migrationBuilder.DropTable(
                name: "calendar_alarm");

            migrationBuilder.DropTable(
                name: "change_password_wizard");

            migrationBuilder.DropTable(
                name: "crm_iap_lead_industry");

            migrationBuilder.DropTable(
                name: "crm_lead2opportunity_partner");

            migrationBuilder.DropTable(
                name: "crm_lead_scoring_frequency_field");

            migrationBuilder.DropTable(
                name: "crm_lead_pls_update");

            migrationBuilder.DropTable(
                name: "crm_lead2opportunity_partner_mass");

            migrationBuilder.DropTable(
                name: "crossovered_budget");

            migrationBuilder.DropTable(
                name: "account_budget_post");

            migrationBuilder.DropTable(
                name: "digest_tip");

            migrationBuilder.DropTable(
                name: "fleet_vehicle_log_contract");

            migrationBuilder.DropTable(
                name: "fleet_vehicle_odometer");

            migrationBuilder.DropTable(
                name: "fleet_vehicle_tag");

            migrationBuilder.DropTable(
                name: "hr_applicant_category");

            migrationBuilder.DropTable(
                name: "hr_leave_stress_day");

            migrationBuilder.DropTable(
                name: "hr_plan_wizard");

            migrationBuilder.DropTable(
                name: "hr_skill");

            migrationBuilder.DropTable(
                name: "hr_skill_level");

            migrationBuilder.DropTable(
                name: "hr_expense_approve_duplicate");

            migrationBuilder.DropTable(
                name: "hr_expense_refuse_wizard");

            migrationBuilder.DropTable(
                name: "hr_resume_line_type");

            migrationBuilder.DropTable(
                name: "iap_account");

            migrationBuilder.DropTable(
                name: "theme_ir_asset");

            migrationBuilder.DropTable(
                name: "ir_demo_failure_wizard");

            migrationBuilder.DropTable(
                name: "ir_exports");

            migrationBuilder.DropTable(
                name: "lot_label_layout");

            migrationBuilder.DropTable(
                name: "lunch_alert");

            migrationBuilder.DropTable(
                name: "lunch_order");

            migrationBuilder.DropTable(
                name: "lunch_topping");

            migrationBuilder.DropTable(
                name: "mail_followers");

            migrationBuilder.DropTable(
                name: "mail_resend_message");

            migrationBuilder.DropTable(
                name: "mail_template_reset");

            migrationBuilder.DropTable(
                name: "mail_wizard_invite");

            migrationBuilder.DropTable(
                name: "maintenance_equipment");

            migrationBuilder.DropTable(
                name: "maintenance_stage");

            migrationBuilder.DropTable(
                name: "calendar_event_type");

            migrationBuilder.DropTable(
                name: "crm_merge_opportunity");

            migrationBuilder.DropTable(
                name: "mrp_consumption_warning");

            migrationBuilder.DropTable(
                name: "mrp_production_backorder");

            migrationBuilder.DropTable(
                name: "mrp_immediate_production");

            migrationBuilder.DropTable(
                name: "mrp_production_split");

            migrationBuilder.DropTable(
                name: "mrp_workcenter_tag");

            migrationBuilder.DropTable(
                name: "mrp_workcenter_productivity_loss");

            migrationBuilder.DropTable(
                name: "note_stage");

            migrationBuilder.DropTable(
                name: "note_note");

            migrationBuilder.DropTable(
                name: "note_tag");

            migrationBuilder.DropTable(
                name: "followup_print");

            migrationBuilder.DropTable(
                name: "payment_icon");

            migrationBuilder.DropTable(
                name: "picking_label_type");

            migrationBuilder.DropTable(
                name: "portal_share");

            migrationBuilder.DropTable(
                name: "portal_wizard");

            migrationBuilder.DropTable(
                name: "pos_bill");

            migrationBuilder.DropTable(
                name: "pos_details_wizard");

            migrationBuilder.DropTable(
                name: "pos_order_line");

            migrationBuilder.DropTable(
                name: "privacy_lookup_wizard");

            migrationBuilder.DropTable(
                name: "product_template_attribute_exclusion");

            migrationBuilder.DropTable(
                name: "product_label_layout");

            migrationBuilder.DropTable(
                name: "res_config_settings");

            migrationBuilder.DropTable(
                name: "product_public_category");

            migrationBuilder.DropTable(
                name: "product_replenish");

            migrationBuilder.DropTable(
                name: "product_tag");

            migrationBuilder.DropTable(
                name: "project_share_wizard");

            migrationBuilder.DropTable(
                name: "project_tags");

            migrationBuilder.DropTable(
                name: "project_task_type_delete_wizard");

            migrationBuilder.DropTable(
                name: "recurring_payment");

            migrationBuilder.DropTable(
                name: "base_language_export");

            migrationBuilder.DropTable(
                name: "repair_fee");

            migrationBuilder.DropTable(
                name: "repair_line");

            migrationBuilder.DropTable(
                name: "repair_tags");

            migrationBuilder.DropTable(
                name: "spreadsheet_dashboard");

            migrationBuilder.DropTable(
                name: "base_language_install");

            migrationBuilder.DropTable(
                name: "res_partner_category");

            migrationBuilder.DropTable(
                name: "res_users_settings");

            migrationBuilder.DropTable(
                name: "ir_rule");

            migrationBuilder.DropTable(
                name: "sale_advance_payment_inv");

            migrationBuilder.DropTable(
                name: "crm_tag");

            migrationBuilder.DropTable(
                name: "mail_notification");

            migrationBuilder.DropTable(
                name: "sms_resend");

            migrationBuilder.DropTable(
                name: "sms_template_reset");

            migrationBuilder.DropTable(
                name: "account_invoice_send");

            migrationBuilder.DropTable(
                name: "stock_inventory_adjustment_name");

            migrationBuilder.DropTable(
                name: "stock_inventory_conflict");

            migrationBuilder.DropTable(
                name: "stock_inventory_warning");

            migrationBuilder.DropTable(
                name: "stock_move_line");

            migrationBuilder.DropTable(
                name: "stock_orderpoint_snooze");

            migrationBuilder.DropTable(
                name: "stock_putaway_rule");

            migrationBuilder.DropTable(
                name: "stock_backorder_confirmation");

            migrationBuilder.DropTable(
                name: "confirm_stock_sms");

            migrationBuilder.DropTable(
                name: "stock_immediate_transfer");

            migrationBuilder.DropTable(
                name: "stock_request_count");

            migrationBuilder.DropTable(
                name: "stock_quant");

            migrationBuilder.DropTable(
                name: "stock_replenishment_info");

            migrationBuilder.DropTable(
                name: "stock_return_picking");

            migrationBuilder.DropTable(
                name: "stock_rules_report");

            migrationBuilder.DropTable(
                name: "stock_track_confirmation");

            migrationBuilder.DropTable(
                name: "stock_scrap");

            migrationBuilder.DropTable(
                name: "hr_holidays_summary_employee");

            migrationBuilder.DropTable(
                name: "utm_tag");

            migrationBuilder.DropTable(
                name: "web_editor_converter_test_sub");

            migrationBuilder.DropTable(
                name: "theme_website_menu");

            migrationBuilder.DropTable(
                name: "website_route");

            migrationBuilder.DropTable(
                name: "ir_filters");

            migrationBuilder.DropTable(
                name: "website_page");

            migrationBuilder.DropTable(
                name: "website_visitor");

            migrationBuilder.DropTable(
                name: "ir_ui_menu");

            migrationBuilder.DropTable(
                name: "account_financial_report");

            migrationBuilder.DropTable(
                name: "account_reconcile_model_template");

            migrationBuilder.DropTable(
                name: "hr_expense_split_wizard");

            migrationBuilder.DropTable(
                name: "account_report_line");

            migrationBuilder.DropTable(
                name: "account_tax_template");

            migrationBuilder.DropTable(
                name: "fleet_service_type");

            migrationBuilder.DropTable(
                name: "hr_plan");

            migrationBuilder.DropTable(
                name: "hr_skill_type");

            migrationBuilder.DropTable(
                name: "lunch_product");

            migrationBuilder.DropTable(
                name: "maintenance_equipment_category");

            migrationBuilder.DropTable(
                name: "maintenance_team");

            migrationBuilder.DropTable(
                name: "mrp_production_split_multi");

            migrationBuilder.DropTable(
                name: "mrp_workcenter_productivity_loss_type");

            migrationBuilder.DropTable(
                name: "privacy_log");

            migrationBuilder.DropTable(
                name: "product_template_attribute_value");

            migrationBuilder.DropTable(
                name: "digest_digest");

            migrationBuilder.DropTable(
                name: "account_recurring_template");

            migrationBuilder.DropTable(
                name: "spreadsheet_dashboard_group");

            migrationBuilder.DropTable(
                name: "snailmail_letter");

            migrationBuilder.DropTable(
                name: "mail_mail");

            migrationBuilder.DropTable(
                name: "sms_sms");

            migrationBuilder.DropTable(
                name: "mail_compose_message");

            migrationBuilder.DropTable(
                name: "theme_website_page");

            migrationBuilder.DropTable(
                name: "account_report");

            migrationBuilder.DropTable(
                name: "lunch_product_category");

            migrationBuilder.DropTable(
                name: "lunch_supplier");

            migrationBuilder.DropTable(
                name: "product_attribute_value");

            migrationBuilder.DropTable(
                name: "product_template_attribute_line");

            migrationBuilder.DropTable(
                name: "fetchmail_server");

            migrationBuilder.DropTable(
                name: "ir_cron");

            migrationBuilder.DropTable(
                name: "product_attribute");

            migrationBuilder.DropTable(
                name: "ir_act_server");

            migrationBuilder.DropTable(
                name: "res_company");

            migrationBuilder.DropTable(
                name: "barcode_nomenclature");

            migrationBuilder.DropTable(
                name: "res_users");

            migrationBuilder.DropTable(
                name: "lunch_location");

            migrationBuilder.DropTable(
                name: "res_currency");

            migrationBuilder.DropTable(
                name: "account_group");

            migrationBuilder.DropTable(
                name: "ir_attachment");

            migrationBuilder.DropTable(
                name: "theme_ir_attachment");

            migrationBuilder.DropTable(
                name: "account_account");

            migrationBuilder.DropTable(
                name: "account_journal");

            migrationBuilder.DropTable(
                name: "res_country");

            migrationBuilder.DropTable(
                name: "account_move_line");

            migrationBuilder.DropTable(
                name: "account_asset_category");

            migrationBuilder.DropTable(
                name: "hr_expense");

            migrationBuilder.DropTable(
                name: "account_reconcile_model");

            migrationBuilder.DropTable(
                name: "account_tax_repartition_line");

            migrationBuilder.DropTable(
                name: "fleet_vehicle");

            migrationBuilder.DropTable(
                name: "hr_expense_sheet");

            migrationBuilder.DropTable(
                name: "account_tax");

            migrationBuilder.DropTable(
                name: "fleet_vehicle_model");

            migrationBuilder.DropTable(
                name: "fleet_vehicle_state");

            migrationBuilder.DropTable(
                name: "account_tax_group");

            migrationBuilder.DropTable(
                name: "fleet_vehicle_model_brand");

            migrationBuilder.DropTable(
                name: "fleet_vehicle_model_category");

            migrationBuilder.DropTable(
                name: "product_template");

            migrationBuilder.DropTable(
                name: "product_ribbon");

            migrationBuilder.DropTable(
                name: "account_chart_template");

            migrationBuilder.DropTable(
                name: "account_account_template");

            migrationBuilder.DropTable(
                name: "res_partner");

            migrationBuilder.DropTable(
                name: "res_partner_industry");

            migrationBuilder.DropTable(
                name: "followup_line");

            migrationBuilder.DropTable(
                name: "followup_followup");

            migrationBuilder.DropTable(
                name: "account_analytic_plan");

            migrationBuilder.DropTable(
                name: "account_analytic_account");

            migrationBuilder.DropTable(
                name: "product_category");

            migrationBuilder.DropTable(
                name: "product_product");

            migrationBuilder.DropTable(
                name: "website_base_unit");

            migrationBuilder.DropTable(
                name: "uom_uom");

            migrationBuilder.DropTable(
                name: "uom_category");

            migrationBuilder.DropTable(
                name: "sale_order_line");

            migrationBuilder.DropTable(
                name: "project_task");

            migrationBuilder.DropTable(
                name: "project_milestone");

            migrationBuilder.DropTable(
                name: "project_task_recurrence");

            migrationBuilder.DropTable(
                name: "project_task_type");

            migrationBuilder.DropTable(
                name: "account_move");

            migrationBuilder.DropTable(
                name: "account_bank_statement_line");

            migrationBuilder.DropTable(
                name: "account_partial_reconcile");

            migrationBuilder.DropTable(
                name: "account_bank_statement");

            migrationBuilder.DropTable(
                name: "account_full_reconcile");

            migrationBuilder.DropTable(
                name: "pos_session");

            migrationBuilder.DropTable(
                name: "pos_config");

            migrationBuilder.DropTable(
                name: "pos_category");

            migrationBuilder.DropTable(
                name: "account_cash_rounding");

            migrationBuilder.DropTable(
                name: "res_country_group");

            migrationBuilder.DropTable(
                name: "account_fiscal_position");

            migrationBuilder.DropTable(
                name: "res_country_state");

            migrationBuilder.DropTable(
                name: "mail_template");

            migrationBuilder.DropTable(
                name: "ir_act_report_xml");

            migrationBuilder.DropTable(
                name: "report_paperformat");

            migrationBuilder.DropTable(
                name: "payment_transaction");

            migrationBuilder.DropTable(
                name: "account_payment");

            migrationBuilder.DropTable(
                name: "account_payment_method_line");

            migrationBuilder.DropTable(
                name: "payment_token");

            migrationBuilder.DropTable(
                name: "pos_payment_method");

            migrationBuilder.DropTable(
                name: "account_payment_method");

            migrationBuilder.DropTable(
                name: "payment_provider");

            migrationBuilder.DropTable(
                name: "mail_alias");

            migrationBuilder.DropTable(
                name: "res_partner_bank");

            migrationBuilder.DropTable(
                name: "res_bank");

            migrationBuilder.DropTable(
                name: "mail_activity_type");

            migrationBuilder.DropTable(
                name: "ir_sequence");

            migrationBuilder.DropTable(
                name: "utm_campaign");

            migrationBuilder.DropTable(
                name: "utm_stage");

            migrationBuilder.DropTable(
                name: "account_incoterms");

            migrationBuilder.DropTable(
                name: "account_payment_term");

            migrationBuilder.DropTable(
                name: "utm_medium");

            migrationBuilder.DropTable(
                name: "utm_source");

            migrationBuilder.DropTable(
                name: "stock_move");

            migrationBuilder.DropTable(
                name: "mrp_bom_line");

            migrationBuilder.DropTable(
                name: "mrp_bom_byproduct");

            migrationBuilder.DropTable(
                name: "mrp_unbuild");

            migrationBuilder.DropTable(
                name: "purchase_order_line");

            migrationBuilder.DropTable(
                name: "stock_package_level");

            migrationBuilder.DropTable(
                name: "repair_order");

            migrationBuilder.DropTable(
                name: "mrp_workorder");

            migrationBuilder.DropTable(
                name: "purchase_order");

            migrationBuilder.DropTable(
                name: "product_packaging");

            migrationBuilder.DropTable(
                name: "stock_quant_package");

            migrationBuilder.DropTable(
                name: "stock_picking");

            migrationBuilder.DropTable(
                name: "resource_calendar_leaves");

            migrationBuilder.DropTable(
                name: "account_analytic_line");

            migrationBuilder.DropTable(
                name: "mrp_routing_workcenter");

            migrationBuilder.DropTable(
                name: "mrp_production");

            migrationBuilder.DropTable(
                name: "stock_package_type");

            migrationBuilder.DropTable(
                name: "hr_leave");

            migrationBuilder.DropTable(
                name: "mrp_workcenter");

            migrationBuilder.DropTable(
                name: "stock_lot");

            migrationBuilder.DropTable(
                name: "stock_warehouse_orderpoint");

            migrationBuilder.DropTable(
                name: "hr_leave_allocation");

            migrationBuilder.DropTable(
                name: "mrp_bom");

            migrationBuilder.DropTable(
                name: "product_supplierinfo");

            migrationBuilder.DropTable(
                name: "hr_leave_accrual_plan");

            migrationBuilder.DropTable(
                name: "hr_employee_category");

            migrationBuilder.DropTable(
                name: "hr_attendance_overtime");

            migrationBuilder.DropTable(
                name: "hr_leave_type");

            migrationBuilder.DropTable(
                name: "crm_team");

            migrationBuilder.DropTable(
                name: "website");

            migrationBuilder.DropTable(
                name: "ir_module_module");

            migrationBuilder.DropTable(
                name: "ir_act_window");

            migrationBuilder.DropTable(
                name: "ir_ui_view");

            migrationBuilder.DropTable(
                name: "theme_ir_ui_view");

            migrationBuilder.DropTable(
                name: "hr_applicant_refuse_reason");

            migrationBuilder.DropTable(
                name: "hr_applicant");

            migrationBuilder.DropTable(
                name: "hr_recruitment_stage");

            migrationBuilder.DropTable(
                name: "hr_recruitment_degree");

            migrationBuilder.DropTable(
                name: "base_partner_merge_line");

            migrationBuilder.DropTable(
                name: "base_partner_merge_automatic_wizard");

            migrationBuilder.DropTable(
                name: "mail_guest");

            migrationBuilder.DropTable(
                name: "sms_template");

            migrationBuilder.DropTable(
                name: "calendar_event");

            migrationBuilder.DropTable(
                name: "calendar_recurrence");

            migrationBuilder.DropTable(
                name: "crm_lead");

            migrationBuilder.DropTable(
                name: "res_lang");

            migrationBuilder.DropTable(
                name: "crm_iap_lead_mining_request");

            migrationBuilder.DropTable(
                name: "crm_lost_reason");

            migrationBuilder.DropTable(
                name: "crm_recurring_plan");

            migrationBuilder.DropTable(
                name: "crm_stage");

            migrationBuilder.DropTable(
                name: "res_partner_title");

            migrationBuilder.DropTable(
                name: "crm_iap_lead_role");

            migrationBuilder.DropTable(
                name: "crm_iap_lead_seniority");

            migrationBuilder.DropTable(
                name: "ir_model");

            migrationBuilder.DropTable(
                name: "ir_model_fields");

            migrationBuilder.DropTable(
                name: "mail_channel");

            migrationBuilder.DropTable(
                name: "res_groups");

            migrationBuilder.DropTable(
                name: "ir_module_category");

            migrationBuilder.DropTable(
                name: "hr_employee");

            migrationBuilder.DropTable(
                name: "hr_contract");

            migrationBuilder.DropTable(
                name: "hr_departure_reason");

            migrationBuilder.DropTable(
                name: "hr_attendance");

            migrationBuilder.DropTable(
                name: "resource_resource");

            migrationBuilder.DropTable(
                name: "hr_work_location");

            migrationBuilder.DropTable(
                name: "hr_job");

            migrationBuilder.DropTable(
                name: "hr_payroll_structure_type");

            migrationBuilder.DropTable(
                name: "hr_contract_type");

            migrationBuilder.DropTable(
                name: "hr_department");

            migrationBuilder.DropTable(
                name: "resource_calendar");

            migrationBuilder.DropTable(
                name: "sale_order");

            migrationBuilder.DropTable(
                name: "sale_order_template");

            migrationBuilder.DropTable(
                name: "mail_message_subtype");

            migrationBuilder.DropTable(
                name: "mail_message");

            migrationBuilder.DropTable(
                name: "ir_mail_server");

            migrationBuilder.DropTable(
                name: "mail_channel_rtc_session");

            migrationBuilder.DropTable(
                name: "mail_channel_member");

            migrationBuilder.DropTable(
                name: "stock_picking_type");

            migrationBuilder.DropTable(
                name: "stock_location");

            migrationBuilder.DropTable(
                name: "product_removal");

            migrationBuilder.DropTable(
                name: "stock_storage_category");

            migrationBuilder.DropTable(
                name: "procurement_group");

            migrationBuilder.DropTable(
                name: "pos_order");

            migrationBuilder.DropTable(
                name: "product_pricelist");

            migrationBuilder.DropTable(
                name: "stock_route");

            migrationBuilder.DropTable(
                name: "stock_warehouse");

            migrationBuilder.DropTable(
                name: "stock_rule");

            migrationBuilder.DropTable(
                name: "project_project");

            migrationBuilder.DropTable(
                name: "project_update");

            migrationBuilder.DropTable(
                name: "project_project_stage");
        }
    }
}

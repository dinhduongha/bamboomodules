// <auto-generated />
using System;
using Bamboo.Core.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Volo.Abp.EntityFrameworkCore;

#nullable disable

namespace Bamboo.Core.Migrations
{
    [DbContext(typeof(CoreDbContext))]
    [Migration("20230502170609_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.PostgreSql)
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pg_trgm");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccountAccountAccountBalanceReportRel", b =>
                {
                    b.Property<Guid>("AccountBalanceReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_balance_report_id");

                    b.Property<Guid>("AccountAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_account_id");

                    b.HasKey("AccountBalanceReportId", "AccountAccountId")
                        .HasName("account_account_account_balance_report_rel_pkey");

                    b.HasIndex(new[] { "AccountAccountId", "AccountBalanceReportId" }, "account_account_account_balan_account_account_id_account_ba_idx")
                        .HasDatabaseName("account_account_account_balan_account_account_id_account_ba_idx");

                    b.ToTable("account_account_account_balance_report_rel", (string)null);
                });

            modelBuilder.Entity("AccountAccountAccountCommonAccountReportRel", b =>
                {
                    b.Property<Guid>("AccountCommonAccountReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_common_account_report_id");

                    b.Property<Guid>("AccountAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_account_id");

                    b.HasKey("AccountCommonAccountReportId", "AccountAccountId")
                        .HasName("account_account_account_common_account_report_rel_pkey");

                    b.HasIndex(new[] { "AccountAccountId", "AccountCommonAccountReportId" }, "account_account_account_commo_account_account_id_account_co_idx")
                        .HasDatabaseName("account_account_account_commo_account_account_id_account_co_idx");

                    b.ToTable("account_account_account_common_account_report_rel", (string)null);
                });

            modelBuilder.Entity("AccountAccountAccountJournalRel", b =>
                {
                    b.Property<Guid>("AccountAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_account_id");

                    b.Property<Guid>("AccountJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_id");

                    b.HasKey("AccountAccountId", "AccountJournalId")
                        .HasName("account_account_account_journal_rel_pkey");

                    b.HasIndex(new[] { "AccountJournalId", "AccountAccountId" }, "account_account_account_journ_account_journal_id_account_ac_idx")
                        .HasDatabaseName("account_account_account_journ_account_journal_id_account_ac_idx");

                    b.ToTable("account_account_account_journal_rel", (string)null);
                });

            modelBuilder.Entity("AccountAccountAccountReportGeneralLedgerRel", b =>
                {
                    b.Property<Guid>("AccountReportGeneralLedgerId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_report_general_ledger_id");

                    b.Property<Guid>("AccountAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_account_id");

                    b.HasKey("AccountReportGeneralLedgerId", "AccountAccountId")
                        .HasName("account_account_account_report_general_ledger_rel_pkey");

                    b.HasIndex(new[] { "AccountAccountId", "AccountReportGeneralLedgerId" }, "account_account_account_repor_account_account_id_account_re_idx")
                        .HasDatabaseName("account_account_account_repor_account_account_id_account_re_idx");

                    b.ToTable("account_account_account_report_general_ledger_rel", (string)null);
                });

            modelBuilder.Entity("AccountAccountAccountTag", b =>
                {
                    b.Property<Guid>("AccountAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_account_id");

                    b.Property<long>("AccountAccountTagId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_account_tag_id");

                    b.HasKey("AccountAccountId", "AccountAccountTagId")
                        .HasName("account_account_account_tag_pkey");

                    b.HasIndex(new[] { "AccountAccountTagId", "AccountAccountId" }, "account_account_account_tag_account_account_tag_id_account__idx")
                        .HasDatabaseName("account_account_account_tag_account_account_tag_id_account__idx");

                    b.ToTable("account_account_account_tag", (string)null);
                });

            modelBuilder.Entity("AccountAccountBankbookReport", b =>
                {
                    b.Property<Guid>("ReportLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("report_line_id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.HasKey("ReportLineId", "AccountId")
                        .HasName("account_account_bankbook_report_pkey");

                    b.HasIndex(new[] { "AccountId", "ReportLineId" }, "account_account_bankbook_report_account_id_report_line_id_idx")
                        .HasDatabaseName("account_account_bankbook_report_account_id_report_line_id_idx");

                    b.ToTable("account_account_bankbook_report", (string)null);
                });

            modelBuilder.Entity("AccountAccountCashbookReport", b =>
                {
                    b.Property<Guid>("ReportLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("report_line_id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.HasKey("ReportLineId", "AccountId")
                        .HasName("account_account_cashbook_report_pkey");

                    b.HasIndex(new[] { "AccountId", "ReportLineId" }, "account_account_cashbook_report_account_id_report_line_id_idx")
                        .HasDatabaseName("account_account_cashbook_report_account_id_report_line_id_idx");

                    b.ToTable("account_account_cashbook_report", (string)null);
                });

            modelBuilder.Entity("AccountAccountDaybookReport", b =>
                {
                    b.Property<Guid>("ReportLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("report_line_id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.HasKey("ReportLineId", "AccountId")
                        .HasName("account_account_daybook_report_pkey");

                    b.HasIndex(new[] { "AccountId", "ReportLineId" }, "account_account_daybook_report_account_id_report_line_id_idx")
                        .HasDatabaseName("account_account_daybook_report_account_id_report_line_id_idx");

                    b.ToTable("account_account_daybook_report", (string)null);
                });

            modelBuilder.Entity("AccountAccountFinancialReport", b =>
                {
                    b.Property<Guid>("ReportLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("report_line_id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.HasKey("ReportLineId", "AccountId")
                        .HasName("account_account_financial_report_pkey");

                    b.HasIndex(new[] { "AccountId", "ReportLineId" }, "account_account_financial_report_account_id_report_line_id_idx")
                        .HasDatabaseName("account_account_financial_report_account_id_report_line_id_idx");

                    b.ToTable("account_account_financial_report", (string)null);
                });

            modelBuilder.Entity("AccountAccountFinancialReportType", b =>
                {
                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("report_id");

                    b.Property<long>("AccountTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_type_id");

                    b.HasKey("ReportId", "AccountTypeId")
                        .HasName("account_account_financial_report_type_pkey");

                    b.HasIndex(new[] { "AccountTypeId", "ReportId" }, "account_account_financial_report__account_type_id_report_id_idx")
                        .HasDatabaseName("account_account_financial_report__account_type_id_report_id_idx");

                    b.ToTable("account_account_financial_report_type", (string)null);
                });

            modelBuilder.Entity("AccountAccountTagAccountMoveLineRel", b =>
                {
                    b.Property<Guid>("AccountMoveLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_move_line_id");

                    b.Property<long>("AccountAccountTagId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_account_tag_id");

                    b.HasKey("AccountMoveLineId", "AccountAccountTagId")
                        .HasName("account_account_tag_account_move_line_rel_pkey");

                    b.HasIndex(new[] { "AccountAccountTagId", "AccountMoveLineId" }, "account_account_tag_account_m_account_account_tag_id_accoun_idx")
                        .HasDatabaseName("account_account_tag_account_m_account_account_tag_id_accoun_idx");

                    b.ToTable("account_account_tag_account_move_line_rel", (string)null);
                });

            modelBuilder.Entity("AccountAccountTagAccountTaxRepartitionLineRel", b =>
                {
                    b.Property<Guid>("AccountTaxRepartitionLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_tax_repartition_line_id");

                    b.Property<long>("AccountAccountTagId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_account_tag_id");

                    b.HasKey("AccountTaxRepartitionLineId", "AccountAccountTagId")
                        .HasName("account_account_tag_account_tax_repartition_line_rel_pkey");

                    b.HasIndex(new[] { "AccountAccountTagId", "AccountTaxRepartitionLineId" }, "account_account_tag_account_t_account_account_tag_id_accoun_idx")
                        .HasDatabaseName("account_account_tag_account_t_account_account_tag_id_accoun_idx");

                    b.ToTable("account_account_tag_account_tax_repartition_line_rel", (string)null);
                });

            modelBuilder.Entity("AccountAccountTagProductTemplateRel", b =>
                {
                    b.Property<Guid>("ProductTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_template_id");

                    b.Property<long>("AccountAccountTagId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_account_tag_id");

                    b.HasKey("ProductTemplateId", "AccountAccountTagId")
                        .HasName("account_account_tag_product_template_rel_pkey");

                    b.HasIndex(new[] { "AccountAccountTagId", "ProductTemplateId" }, "account_account_tag_product_t_account_account_tag_id_produc_idx")
                        .HasDatabaseName("account_account_tag_product_t_account_account_tag_id_produc_idx");

                    b.ToTable("account_account_tag_product_template_rel", (string)null);
                });

            modelBuilder.Entity("AccountAccountTaxDefaultRel", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<Guid>("TaxId")
                        .HasColumnType("uuid")
                        .HasColumnName("tax_id");

                    b.HasKey("AccountId", "TaxId")
                        .HasName("account_account_tax_default_rel_pkey");

                    b.HasIndex(new[] { "TaxId", "AccountId" }, "account_account_tax_default_rel_tax_id_account_id_idx")
                        .HasDatabaseName("account_account_tax_default_rel_tax_id_account_id_idx");

                    b.ToTable("account_account_tax_default_rel", (string)null);
                });

            modelBuilder.Entity("AccountAccountTemplateAccountTag", b =>
                {
                    b.Property<Guid>("AccountAccountTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_account_template_id");

                    b.Property<long>("AccountAccountTagId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_account_tag_id");

                    b.HasKey("AccountAccountTemplateId", "AccountAccountTagId")
                        .HasName("account_account_template_account_tag_pkey");

                    b.HasIndex(new[] { "AccountAccountTagId", "AccountAccountTemplateId" }, "account_account_template_acco_account_account_tag_id_accoun_idx")
                        .HasDatabaseName("account_account_template_acco_account_account_tag_id_accoun_idx");

                    b.ToTable("account_account_template_account_tag", (string)null);
                });

            modelBuilder.Entity("AccountAccountTemplateTaxRel", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<Guid>("TaxId")
                        .HasColumnType("uuid")
                        .HasColumnName("tax_id");

                    b.HasKey("AccountId", "TaxId")
                        .HasName("account_account_template_tax_rel_pkey");

                    b.HasIndex(new[] { "TaxId", "AccountId" }, "account_account_template_tax_rel_tax_id_account_id_idx")
                        .HasDatabaseName("account_account_template_tax_rel_tax_id_account_id_idx");

                    b.ToTable("account_account_template_tax_rel", (string)null);
                });

            modelBuilder.Entity("AccountAgedTrialBalanceAccountJournalRel", b =>
                {
                    b.Property<Guid>("AccountAgedTrialBalanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_aged_trial_balance_id");

                    b.Property<Guid>("AccountJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_id");

                    b.HasKey("AccountAgedTrialBalanceId", "AccountJournalId")
                        .HasName("account_aged_trial_balance_account_journal_rel_pkey");

                    b.HasIndex(new[] { "AccountJournalId", "AccountAgedTrialBalanceId" }, "account_aged_trial_balance_ac_account_journal_id_account_ag_idx")
                        .HasDatabaseName("account_aged_trial_balance_ac_account_journal_id_account_ag_idx");

                    b.ToTable("account_aged_trial_balance_account_journal_rel", (string)null);
                });

            modelBuilder.Entity("AccountAgedTrialBalanceResPartnerRel", b =>
                {
                    b.Property<Guid>("AccountAgedTrialBalanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_aged_trial_balance_id");

                    b.Property<Guid>("ResPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_partner_id");

                    b.HasKey("AccountAgedTrialBalanceId", "ResPartnerId")
                        .HasName("account_aged_trial_balance_res_partner_rel_pkey");

                    b.HasIndex(new[] { "ResPartnerId", "AccountAgedTrialBalanceId" }, "account_aged_trial_balance_re_res_partner_id_account_aged_t_idx")
                        .HasDatabaseName("account_aged_trial_balance_re_res_partner_id_account_aged_t_idx");

                    b.ToTable("account_aged_trial_balance_res_partner_rel", (string)null);
                });

            modelBuilder.Entity("AccountAnalyticAccountAccountCommonAccountReportRel", b =>
                {
                    b.Property<Guid>("AccountCommonAccountReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_common_account_report_id");

                    b.Property<Guid>("AccountAnalyticAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_analytic_account_id");

                    b.HasKey("AccountCommonAccountReportId", "AccountAnalyticAccountId")
                        .HasName("account_analytic_account_account_common_account_report_rel_pkey");

                    b.HasIndex(new[] { "AccountAnalyticAccountId", "AccountCommonAccountReportId" }, "account_analytic_account_acco_account_analytic_account_id_a_idx")
                        .HasDatabaseName("account_analytic_account_acco_account_analytic_account_id_a_idx");

                    b.ToTable("account_analytic_account_account_common_account_report_rel", (string)null);
                });

            modelBuilder.Entity("AccountAnalyticAccountAccountReportGeneralLedgerRel", b =>
                {
                    b.Property<Guid>("AccountReportGeneralLedgerId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_report_general_ledger_id");

                    b.Property<Guid>("AccountAnalyticAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_analytic_account_id");

                    b.HasKey("AccountReportGeneralLedgerId", "AccountAnalyticAccountId")
                        .HasName("account_analytic_account_account_report_general_ledger_rel_pkey");

                    b.HasIndex(new[] { "AccountAnalyticAccountId", "AccountReportGeneralLedgerId" }, "account_analytic_account_acco_account_analytic_account_id__idx1")
                        .HasDatabaseName("account_analytic_account_acco_account_analytic_account_id__idx1");

                    b.ToTable("account_analytic_account_account_report_general_ledger_rel", (string)null);
                });

            modelBuilder.Entity("AccountAutomaticEntryWizardAccountMoveLineRel", b =>
                {
                    b.Property<Guid>("AccountAutomaticEntryWizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_automatic_entry_wizard_id");

                    b.Property<Guid>("AccountMoveLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_move_line_id");

                    b.HasKey("AccountAutomaticEntryWizardId", "AccountMoveLineId")
                        .HasName("account_automatic_entry_wizard_account_move_line_rel_pkey");

                    b.HasIndex(new[] { "AccountMoveLineId", "AccountAutomaticEntryWizardId" }, "account_automatic_entry_wizar_account_move_line_id_account__idx")
                        .HasDatabaseName("account_automatic_entry_wizar_account_move_line_id_account__idx");

                    b.ToTable("account_automatic_entry_wizard_account_move_line_rel", (string)null);
                });

            modelBuilder.Entity("AccountBalanceReportJournalRel", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<Guid>("JournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("journal_id");

                    b.HasKey("AccountId", "JournalId")
                        .HasName("account_balance_report_journal_rel_pkey");

                    b.HasIndex(new[] { "JournalId", "AccountId" }, "account_balance_report_journal_rel_journal_id_account_id_idx")
                        .HasDatabaseName("account_balance_report_journal_rel_journal_id_account_id_idx");

                    b.ToTable("account_balance_report_journal_rel", (string)null);
                });

            modelBuilder.Entity("AccountBalanceReportResPartnerRel", b =>
                {
                    b.Property<Guid>("AccountBalanceReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_balance_report_id");

                    b.Property<Guid>("ResPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_partner_id");

                    b.HasKey("AccountBalanceReportId", "ResPartnerId")
                        .HasName("account_balance_report_res_partner_rel_pkey");

                    b.HasIndex(new[] { "ResPartnerId", "AccountBalanceReportId" }, "account_balance_report_res_pa_res_partner_id_account_balanc_idx")
                        .HasDatabaseName("account_balance_report_res_pa_res_partner_id_account_balanc_idx");

                    b.ToTable("account_balance_report_res_partner_rel", (string)null);
                });

            modelBuilder.Entity("AccountBankStatementImportIrAttachmentRel", b =>
                {
                    b.Property<Guid>("AccountBankStatementImportId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_bank_statement_import_id");

                    b.Property<Guid>("IrAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("ir_attachment_id");

                    b.HasKey("AccountBankStatementImportId", "IrAttachmentId")
                        .HasName("account_bank_statement_import_ir_attachment_rel_pkey");

                    b.HasIndex(new[] { "IrAttachmentId", "AccountBankStatementImportId" }, "account_bank_statement_import_ir_attachment_id_account_bank_idx")
                        .HasDatabaseName("account_bank_statement_import_ir_attachment_id_account_bank_idx");

                    b.ToTable("account_bank_statement_import_ir_attachment_rel", (string)null);
                });

            modelBuilder.Entity("AccountBankStatementIrAttachmentRel", b =>
                {
                    b.Property<Guid>("AccountBankStatementId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_bank_statement_id");

                    b.Property<Guid>("IrAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("ir_attachment_id");

                    b.HasKey("AccountBankStatementId", "IrAttachmentId")
                        .HasName("account_bank_statement_ir_attachment_rel_pkey");

                    b.HasIndex(new[] { "IrAttachmentId", "AccountBankStatementId" }, "account_bank_statement_ir_att_ir_attachment_id_account_bank_idx")
                        .HasDatabaseName("account_bank_statement_ir_att_ir_attachment_id_account_bank_idx");

                    b.ToTable("account_bank_statement_ir_attachment_rel", (string)null);
                });

            modelBuilder.Entity("AccountBankbookReportAccountJournalRel", b =>
                {
                    b.Property<Guid>("AccountBankbookReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_bankbook_report_id");

                    b.Property<Guid>("AccountJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_id");

                    b.HasKey("AccountBankbookReportId", "AccountJournalId")
                        .HasName("account_bankbook_report_account_journal_rel_pkey");

                    b.HasIndex(new[] { "AccountJournalId", "AccountBankbookReportId" }, "account_bankbook_report_accou_account_journal_id_account_ba_idx")
                        .HasDatabaseName("account_bankbook_report_accou_account_journal_id_account_ba_idx");

                    b.ToTable("account_bankbook_report_account_journal_rel", (string)null);
                });

            modelBuilder.Entity("AccountBudgetRel", b =>
                {
                    b.Property<Guid>("BudgetId")
                        .HasColumnType("uuid")
                        .HasColumnName("budget_id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.HasKey("BudgetId", "AccountId")
                        .HasName("account_budget_rel_pkey");

                    b.HasIndex(new[] { "AccountId", "BudgetId" }, "account_budget_rel_account_id_budget_id_idx")
                        .HasDatabaseName("account_budget_rel_account_id_budget_id_idx");

                    b.ToTable("account_budget_rel", (string)null);
                });

            modelBuilder.Entity("AccountCashbookReportAccountJournalRel", b =>
                {
                    b.Property<Guid>("AccountCashbookReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_cashbook_report_id");

                    b.Property<Guid>("AccountJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_id");

                    b.HasKey("AccountCashbookReportId", "AccountJournalId")
                        .HasName("account_cashbook_report_account_journal_rel_pkey");

                    b.HasIndex(new[] { "AccountJournalId", "AccountCashbookReportId" }, "account_cashbook_report_accou_account_journal_id_account_ca_idx")
                        .HasDatabaseName("account_cashbook_report_accou_account_journal_id_account_ca_idx");

                    b.ToTable("account_cashbook_report_account_journal_rel", (string)null);
                });

            modelBuilder.Entity("AccountCommonAccountReportAccountJournalRel", b =>
                {
                    b.Property<Guid>("AccountCommonAccountReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_common_account_report_id");

                    b.Property<Guid>("AccountJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_id");

                    b.HasKey("AccountCommonAccountReportId", "AccountJournalId")
                        .HasName("account_common_account_report_account_journal_rel_pkey");

                    b.HasIndex(new[] { "AccountJournalId", "AccountCommonAccountReportId" }, "account_common_account_report_account_journal_id_account_co_idx")
                        .HasDatabaseName("account_common_account_report_account_journal_id_account_co_idx");

                    b.ToTable("account_common_account_report_account_journal_rel", (string)null);
                });

            modelBuilder.Entity("AccountCommonAccountReportResPartnerRel", b =>
                {
                    b.Property<Guid>("AccountCommonAccountReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_common_account_report_id");

                    b.Property<Guid>("ResPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_partner_id");

                    b.HasKey("AccountCommonAccountReportId", "ResPartnerId")
                        .HasName("account_common_account_report_res_partner_rel_pkey");

                    b.HasIndex(new[] { "ResPartnerId", "AccountCommonAccountReportId" }, "account_common_account_report_res_partner_id_account_common_idx")
                        .HasDatabaseName("account_common_account_report_res_partner_id_account_common_idx");

                    b.ToTable("account_common_account_report_res_partner_rel", (string)null);
                });

            modelBuilder.Entity("AccountCommonJournalReportAccountJournalRel", b =>
                {
                    b.Property<Guid>("AccountCommonJournalReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_common_journal_report_id");

                    b.Property<Guid>("AccountJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_id");

                    b.HasKey("AccountCommonJournalReportId", "AccountJournalId")
                        .HasName("account_common_journal_report_account_journal_rel_pkey");

                    b.HasIndex(new[] { "AccountJournalId", "AccountCommonJournalReportId" }, "account_common_journal_report_account_journal_id_account_co_idx")
                        .HasDatabaseName("account_common_journal_report_account_journal_id_account_co_idx");

                    b.ToTable("account_common_journal_report_account_journal_rel", (string)null);
                });

            modelBuilder.Entity("AccountCommonPartnerReportAccountJournalRel", b =>
                {
                    b.Property<Guid>("AccountCommonPartnerReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_common_partner_report_id");

                    b.Property<Guid>("AccountJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_id");

                    b.HasKey("AccountCommonPartnerReportId", "AccountJournalId")
                        .HasName("account_common_partner_report_account_journal_rel_pkey");

                    b.HasIndex(new[] { "AccountJournalId", "AccountCommonPartnerReportId" }, "account_common_partner_report_account_journal_id_account_co_idx")
                        .HasDatabaseName("account_common_partner_report_account_journal_id_account_co_idx");

                    b.ToTable("account_common_partner_report_account_journal_rel", (string)null);
                });

            modelBuilder.Entity("AccountCommonPartnerReportResPartnerRel", b =>
                {
                    b.Property<Guid>("AccountCommonPartnerReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_common_partner_report_id");

                    b.Property<Guid>("ResPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_partner_id");

                    b.HasKey("AccountCommonPartnerReportId", "ResPartnerId")
                        .HasName("account_common_partner_report_res_partner_rel_pkey");

                    b.HasIndex(new[] { "ResPartnerId", "AccountCommonPartnerReportId" }, "account_common_partner_report_res_partner_id_account_common_idx")
                        .HasDatabaseName("account_common_partner_report_res_partner_id_account_common_idx");

                    b.ToTable("account_common_partner_report_res_partner_rel", (string)null);
                });

            modelBuilder.Entity("AccountCommonReportAccountJournalRel", b =>
                {
                    b.Property<Guid>("AccountCommonReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_common_report_id");

                    b.Property<Guid>("AccountJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_id");

                    b.HasKey("AccountCommonReportId", "AccountJournalId")
                        .HasName("account_common_report_account_journal_rel_pkey");

                    b.HasIndex(new[] { "AccountJournalId", "AccountCommonReportId" }, "account_common_report_account_account_journal_id_account_co_idx")
                        .HasDatabaseName("account_common_report_account_account_journal_id_account_co_idx");

                    b.ToTable("account_common_report_account_journal_rel", (string)null);
                });

            modelBuilder.Entity("AccountDaybookReportAccountJournalRel", b =>
                {
                    b.Property<Guid>("AccountDaybookReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_daybook_report_id");

                    b.Property<Guid>("AccountJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_id");

                    b.HasKey("AccountDaybookReportId", "AccountJournalId")
                        .HasName("account_daybook_report_account_journal_rel_pkey");

                    b.HasIndex(new[] { "AccountJournalId", "AccountDaybookReportId" }, "account_daybook_report_accoun_account_journal_id_account_da_idx")
                        .HasDatabaseName("account_daybook_report_accoun_account_journal_id_account_da_idx");

                    b.ToTable("account_daybook_report_account_journal_rel", (string)null);
                });

            modelBuilder.Entity("AccountEdiFormatAccountJournalRel", b =>
                {
                    b.Property<Guid>("AccountJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_id");

                    b.Property<long>("AccountEdiFormatId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_edi_format_id");

                    b.HasKey("AccountJournalId", "AccountEdiFormatId")
                        .HasName("account_edi_format_account_journal_rel_pkey");

                    b.HasIndex(new[] { "AccountEdiFormatId", "AccountJournalId" }, "account_edi_format_account_jo_account_edi_format_id_account_idx")
                        .HasDatabaseName("account_edi_format_account_jo_account_edi_format_id_account_idx");

                    b.ToTable("account_edi_format_account_journal_rel", (string)null);
                });

            modelBuilder.Entity("AccountFiscalPositionPosConfigRel", b =>
                {
                    b.Property<Guid>("PosConfigId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_config_id");

                    b.Property<Guid>("AccountFiscalPositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_fiscal_position_id");

                    b.HasKey("PosConfigId", "AccountFiscalPositionId")
                        .HasName("account_fiscal_position_pos_config_rel_pkey");

                    b.HasIndex(new[] { "AccountFiscalPositionId", "PosConfigId" }, "account_fiscal_position_pos_c_account_fiscal_position_id_po_idx")
                        .HasDatabaseName("account_fiscal_position_pos_c_account_fiscal_position_id_po_idx");

                    b.ToTable("account_fiscal_position_pos_config_rel", (string)null);
                });

            modelBuilder.Entity("AccountFiscalPositionResConfigSettingsRel", b =>
                {
                    b.Property<Guid>("ResConfigSettingsId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_config_settings_id");

                    b.Property<Guid>("AccountFiscalPositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_fiscal_position_id");

                    b.HasKey("ResConfigSettingsId", "AccountFiscalPositionId")
                        .HasName("account_fiscal_position_res_config_settings_rel_pkey");

                    b.HasIndex(new[] { "AccountFiscalPositionId", "ResConfigSettingsId" }, "account_fiscal_position_res_c_account_fiscal_position_id_re_idx")
                        .HasDatabaseName("account_fiscal_position_res_c_account_fiscal_position_id_re_idx");

                    b.ToTable("account_fiscal_position_res_config_settings_rel", (string)null);
                });

            modelBuilder.Entity("AccountFiscalPositionResCountryStateRel", b =>
                {
                    b.Property<Guid>("AccountFiscalPositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_fiscal_position_id");

                    b.Property<long>("ResCountryStateId")
                        .HasColumnType("bigint")
                        .HasColumnName("res_country_state_id");

                    b.HasKey("AccountFiscalPositionId", "ResCountryStateId")
                        .HasName("account_fiscal_position_res_country_state_rel_pkey");

                    b.HasIndex(new[] { "ResCountryStateId", "AccountFiscalPositionId" }, "account_fiscal_position_res_c_res_country_state_id_account__idx")
                        .HasDatabaseName("account_fiscal_position_res_c_res_country_state_id_account__idx");

                    b.ToTable("account_fiscal_position_res_country_state_rel", (string)null);
                });

            modelBuilder.Entity("AccountFiscalPositionTemplateResCountryStateRel", b =>
                {
                    b.Property<Guid>("AccountFiscalPositionTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_fiscal_position_template_id");

                    b.Property<long>("ResCountryStateId")
                        .HasColumnType("bigint")
                        .HasColumnName("res_country_state_id");

                    b.HasKey("AccountFiscalPositionTemplateId", "ResCountryStateId")
                        .HasName("account_fiscal_position_template_res_country_state_rel_pkey");

                    b.HasIndex(new[] { "ResCountryStateId", "AccountFiscalPositionTemplateId" }, "account_fiscal_position_templ_res_country_state_id_account__idx")
                        .HasDatabaseName("account_fiscal_position_templ_res_country_state_id_account__idx");

                    b.ToTable("account_fiscal_position_template_res_country_state_rel", (string)null);
                });

            modelBuilder.Entity("AccountInvoiceTransactionRel", b =>
                {
                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_id");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("transaction_id");

                    b.HasKey("InvoiceId", "TransactionId")
                        .HasName("account_invoice_transaction_rel_pkey");

                    b.HasIndex(new[] { "TransactionId", "InvoiceId" }, "account_invoice_transaction_rel_transaction_id_invoice_id_idx")
                        .HasDatabaseName("account_invoice_transaction_rel_transaction_id_invoice_id_idx");

                    b.ToTable("account_invoice_transaction_rel", (string)null);
                });

            modelBuilder.Entity("AccountJournalAccountJournalGroupRel", b =>
                {
                    b.Property<Guid>("AccountJournalGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_group_id");

                    b.Property<Guid>("AccountJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_id");

                    b.HasKey("AccountJournalGroupId", "AccountJournalId")
                        .HasName("account_journal_account_journal_group_rel_pkey");

                    b.HasIndex(new[] { "AccountJournalId", "AccountJournalGroupId" }, "account_journal_account_journ_account_journal_id_account_jo_idx")
                        .HasDatabaseName("account_journal_account_journ_account_journal_id_account_jo_idx");

                    b.ToTable("account_journal_account_journal_group_rel", (string)null);
                });

            modelBuilder.Entity("AccountJournalAccountPrintJournalRel", b =>
                {
                    b.Property<Guid>("AccountPrintJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_print_journal_id");

                    b.Property<Guid>("AccountJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_id");

                    b.HasKey("AccountPrintJournalId", "AccountJournalId")
                        .HasName("account_journal_account_print_journal_rel_pkey");

                    b.HasIndex(new[] { "AccountJournalId", "AccountPrintJournalId" }, "account_journal_account_print_account_journal_id_account_pr_idx")
                        .HasDatabaseName("account_journal_account_print_account_journal_id_account_pr_idx");

                    b.ToTable("account_journal_account_print_journal_rel", (string)null);
                });

            modelBuilder.Entity("AccountJournalAccountReconcileModelRel", b =>
                {
                    b.Property<Guid>("AccountReconcileModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_reconcile_model_id");

                    b.Property<Guid>("AccountJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_id");

                    b.HasKey("AccountReconcileModelId", "AccountJournalId")
                        .HasName("account_journal_account_reconcile_model_rel_pkey");

                    b.HasIndex(new[] { "AccountJournalId", "AccountReconcileModelId" }, "account_journal_account_recon_account_journal_id_account_re_idx")
                        .HasDatabaseName("account_journal_account_recon_account_journal_id_account_re_idx");

                    b.ToTable("account_journal_account_reconcile_model_rel", (string)null);
                });

            modelBuilder.Entity("AccountJournalAccountReconcileModelTemplateRel", b =>
                {
                    b.Property<Guid>("AccountReconcileModelTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_reconcile_model_template_id");

                    b.Property<Guid>("AccountJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_id");

                    b.HasKey("AccountReconcileModelTemplateId", "AccountJournalId")
                        .HasName("account_journal_account_reconcile_model_template_rel_pkey");

                    b.HasIndex(new[] { "AccountJournalId", "AccountReconcileModelTemplateId" }, "account_journal_account_recon_account_journal_id_account_r_idx1")
                        .HasDatabaseName("account_journal_account_recon_account_journal_id_account_r_idx1");

                    b.ToTable("account_journal_account_reconcile_model_template_rel", (string)null);
                });

            modelBuilder.Entity("AccountJournalAccountReportPartnerLedgerRel", b =>
                {
                    b.Property<Guid>("AccountReportPartnerLedgerId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_report_partner_ledger_id");

                    b.Property<Guid>("AccountJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_id");

                    b.HasKey("AccountReportPartnerLedgerId", "AccountJournalId")
                        .HasName("account_journal_account_report_partner_ledger_rel_pkey");

                    b.HasIndex(new[] { "AccountJournalId", "AccountReportPartnerLedgerId" }, "account_journal_account_repor_account_journal_id_account_re_idx")
                        .HasDatabaseName("account_journal_account_repor_account_journal_id_account_re_idx");

                    b.ToTable("account_journal_account_report_partner_ledger_rel", (string)null);
                });

            modelBuilder.Entity("AccountJournalAccountTaxReportWizardRel", b =>
                {
                    b.Property<Guid>("AccountTaxReportWizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_tax_report_wizard_id");

                    b.Property<Guid>("AccountJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_id");

                    b.HasKey("AccountTaxReportWizardId", "AccountJournalId")
                        .HasName("account_journal_account_tax_report_wizard_rel_pkey");

                    b.HasIndex(new[] { "AccountJournalId", "AccountTaxReportWizardId" }, "account_journal_account_tax_r_account_journal_id_account_ta_idx")
                        .HasDatabaseName("account_journal_account_tax_r_account_journal_id_account_ta_idx");

                    b.ToTable("account_journal_account_tax_report_wizard_rel", (string)null);
                });

            modelBuilder.Entity("AccountJournalAccountingReportRel", b =>
                {
                    b.Property<Guid>("AccountingReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("accounting_report_id");

                    b.Property<Guid>("AccountJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_id");

                    b.HasKey("AccountingReportId", "AccountJournalId")
                        .HasName("account_journal_accounting_report_rel_pkey");

                    b.HasIndex(new[] { "AccountJournalId", "AccountingReportId" }, "account_journal_accounting_re_account_journal_id_accounting_idx")
                        .HasDatabaseName("account_journal_accounting_re_account_journal_id_accounting_idx");

                    b.ToTable("account_journal_accounting_report_rel", (string)null);
                });

            modelBuilder.Entity("AccountMoveAccountInvoiceSendRel", b =>
                {
                    b.Property<Guid>("AccountInvoiceSendId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_invoice_send_id");

                    b.Property<Guid>("AccountMoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_move_id");

                    b.HasKey("AccountInvoiceSendId", "AccountMoveId")
                        .HasName("account_move_account_invoice_send_rel_pkey");

                    b.HasIndex(new[] { "AccountMoveId", "AccountInvoiceSendId" }, "account_move_account_invoice__account_move_id_account_invoi_idx")
                        .HasDatabaseName("account_move_account_invoice__account_move_id_account_invoi_idx");

                    b.ToTable("account_move_account_invoice_send_rel", (string)null);
                });

            modelBuilder.Entity("AccountMoveAccountResequenceWizardRel", b =>
                {
                    b.Property<Guid>("AccountResequenceWizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_resequence_wizard_id");

                    b.Property<Guid>("AccountMoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_move_id");

                    b.HasKey("AccountResequenceWizardId", "AccountMoveId")
                        .HasName("account_move_account_resequence_wizard_rel_pkey");

                    b.HasIndex(new[] { "AccountMoveId", "AccountResequenceWizardId" }, "account_move_account_resequen_account_move_id_account_reseq_idx")
                        .HasDatabaseName("account_move_account_resequen_account_move_id_account_reseq_idx");

                    b.ToTable("account_move_account_resequence_wizard_rel", (string)null);
                });

            modelBuilder.Entity("AccountMoveLineAccountTaxRel", b =>
                {
                    b.Property<Guid>("AccountMoveLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_move_line_id");

                    b.Property<Guid>("AccountTaxId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_tax_id");

                    b.HasKey("AccountMoveLineId", "AccountTaxId")
                        .HasName("account_move_line_account_tax_rel_pkey");

                    b.HasIndex(new[] { "AccountTaxId", "AccountMoveLineId" }, "account_move_line_account_tax_account_tax_id_account_move_l_idx")
                        .HasDatabaseName("account_move_line_account_tax_account_tax_id_account_move_l_idx");

                    b.ToTable("account_move_line_account_tax_rel", (string)null);
                });

            modelBuilder.Entity("AccountMovePurchaseOrderRel", b =>
                {
                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("purchase_order_id");

                    b.Property<Guid>("AccountMoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_move_id");

                    b.HasKey("PurchaseOrderId", "AccountMoveId")
                        .HasName("account_move_purchase_order_rel_pkey");

                    b.HasIndex(new[] { "AccountMoveId", "PurchaseOrderId" }, "account_move_purchase_order_r_account_move_id_purchase_orde_idx")
                        .HasDatabaseName("account_move_purchase_order_r_account_move_id_purchase_orde_idx");

                    b.ToTable("account_move_purchase_order_rel", (string)null);
                });

            modelBuilder.Entity("AccountMoveReversalMove", b =>
                {
                    b.Property<Guid>("ReversalId")
                        .HasColumnType("uuid")
                        .HasColumnName("reversal_id");

                    b.Property<Guid>("MoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("move_id");

                    b.HasKey("ReversalId", "MoveId")
                        .HasName("account_move_reversal_move_pkey");

                    b.HasIndex(new[] { "MoveId", "ReversalId" }, "account_move_reversal_move_move_id_reversal_id_idx")
                        .HasDatabaseName("account_move_reversal_move_move_id_reversal_id_idx");

                    b.ToTable("account_move_reversal_move", (string)null);
                });

            modelBuilder.Entity("AccountMoveReversalNewMove", b =>
                {
                    b.Property<Guid>("ReversalId")
                        .HasColumnType("uuid")
                        .HasColumnName("reversal_id");

                    b.Property<Guid>("NewMoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("new_move_id");

                    b.HasKey("ReversalId", "NewMoveId")
                        .HasName("account_move_reversal_new_move_pkey");

                    b.HasIndex(new[] { "NewMoveId", "ReversalId" }, "account_move_reversal_new_move_new_move_id_reversal_id_idx")
                        .HasDatabaseName("account_move_reversal_new_move_new_move_id_reversal_id_idx");

                    b.ToTable("account_move_reversal_new_move", (string)null);
                });

            modelBuilder.Entity("AccountPaymentAccountBankStatementLineRel", b =>
                {
                    b.Property<Guid>("AccountBankStatementLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_bank_statement_line_id");

                    b.Property<Guid>("AccountPaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_payment_id");

                    b.HasKey("AccountBankStatementLineId", "AccountPaymentId")
                        .HasName("account_payment_account_bank_statement_line_rel_pkey");

                    b.HasIndex(new[] { "AccountPaymentId", "AccountBankStatementLineId" }, "account_payment_account_bank__account_payment_id_account_ba_idx")
                        .HasDatabaseName("account_payment_account_bank__account_payment_id_account_ba_idx");

                    b.ToTable("account_payment_account_bank_statement_line_rel", (string)null);
                });

            modelBuilder.Entity("AccountPaymentRegisterMoveLineRel", b =>
                {
                    b.Property<Guid>("WizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("wizard_id");

                    b.Property<Guid>("LineId")
                        .HasColumnType("uuid")
                        .HasColumnName("line_id");

                    b.HasKey("WizardId", "LineId")
                        .HasName("account_payment_register_move_line_rel_pkey");

                    b.HasIndex(new[] { "LineId", "WizardId" }, "account_payment_register_move_line_rel_line_id_wizard_id_idx")
                        .HasDatabaseName("account_payment_register_move_line_rel_line_id_wizard_id_idx");

                    b.ToTable("account_payment_register_move_line_rel", (string)null);
                });

            modelBuilder.Entity("AccountReconcileModelLineAccountTaxRel", b =>
                {
                    b.Property<Guid>("AccountReconcileModelLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_reconcile_model_line_id");

                    b.Property<Guid>("AccountTaxId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_tax_id");

                    b.HasKey("AccountReconcileModelLineId", "AccountTaxId")
                        .HasName("account_reconcile_model_line_account_tax_rel_pkey");

                    b.HasIndex(new[] { "AccountTaxId", "AccountReconcileModelLineId" }, "account_reconcile_model_line__account_tax_id_account_reconc_idx")
                        .HasDatabaseName("account_reconcile_model_line__account_tax_id_account_reconc_idx");

                    b.ToTable("account_reconcile_model_line_account_tax_rel", (string)null);
                });

            modelBuilder.Entity("AccountReconcileModelLineTemplateAccountTaxTemplateRel", b =>
                {
                    b.Property<Guid>("AccountReconcileModelLineTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_reconcile_model_line_template_id");

                    b.Property<Guid>("AccountTaxTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_tax_template_id");

                    b.HasKey("AccountReconcileModelLineTemplateId", "AccountTaxTemplateId")
                        .HasName("account_reconcile_model_line_template_account_tax_template_pkey");

                    b.HasIndex(new[] { "AccountTaxTemplateId", "AccountReconcileModelLineTemplateId" }, "account_reconcile_model_line__account_tax_template_id_accou_idx")
                        .HasDatabaseName("account_reconcile_model_line__account_tax_template_id_accou_idx");

                    b.ToTable("account_reconcile_model_line_template_account_tax_template_rel", (string)null);
                });

            modelBuilder.Entity("AccountReconcileModelResPartnerCategoryRel", b =>
                {
                    b.Property<Guid>("AccountReconcileModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_reconcile_model_id");

                    b.Property<long>("ResPartnerCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("res_partner_category_id");

                    b.HasKey("AccountReconcileModelId", "ResPartnerCategoryId")
                        .HasName("account_reconcile_model_res_partner_category_rel_pkey");

                    b.HasIndex(new[] { "ResPartnerCategoryId", "AccountReconcileModelId" }, "account_reconcile_model_res_p_res_partner_category_id_accou_idx")
                        .HasDatabaseName("account_reconcile_model_res_p_res_partner_category_id_accou_idx");

                    b.ToTable("account_reconcile_model_res_partner_category_rel", (string)null);
                });

            modelBuilder.Entity("AccountReconcileModelResPartnerRel", b =>
                {
                    b.Property<Guid>("AccountReconcileModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_reconcile_model_id");

                    b.Property<Guid>("ResPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_partner_id");

                    b.HasKey("AccountReconcileModelId", "ResPartnerId")
                        .HasName("account_reconcile_model_res_partner_rel_pkey");

                    b.HasIndex(new[] { "ResPartnerId", "AccountReconcileModelId" }, "account_reconcile_model_res_p_res_partner_id_account_reconc_idx")
                        .HasDatabaseName("account_reconcile_model_res_p_res_partner_id_account_reconc_idx");

                    b.ToTable("account_reconcile_model_res_partner_rel", (string)null);
                });

            modelBuilder.Entity("AccountReconcileModelTemplateResPartnerCategoryRel", b =>
                {
                    b.Property<Guid>("AccountReconcileModelTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_reconcile_model_template_id");

                    b.Property<long>("ResPartnerCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("res_partner_category_id");

                    b.HasKey("AccountReconcileModelTemplateId", "ResPartnerCategoryId")
                        .HasName("account_reconcile_model_template_res_partner_category_rel_pkey");

                    b.HasIndex(new[] { "ResPartnerCategoryId", "AccountReconcileModelTemplateId" }, "account_reconcile_model_templ_res_partner_category_id_accou_idx")
                        .HasDatabaseName("account_reconcile_model_templ_res_partner_category_id_accou_idx");

                    b.ToTable("account_reconcile_model_template_res_partner_category_rel", (string)null);
                });

            modelBuilder.Entity("AccountReconcileModelTemplateResPartnerRel", b =>
                {
                    b.Property<Guid>("AccountReconcileModelTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_reconcile_model_template_id");

                    b.Property<Guid>("ResPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_partner_id");

                    b.HasKey("AccountReconcileModelTemplateId", "ResPartnerId")
                        .HasName("account_reconcile_model_template_res_partner_rel_pkey");

                    b.HasIndex(new[] { "ResPartnerId", "AccountReconcileModelTemplateId" }, "account_reconcile_model_templ_res_partner_id_account_reconc_idx")
                        .HasDatabaseName("account_reconcile_model_templ_res_partner_id_account_reconc_idx");

                    b.ToTable("account_reconcile_model_template_res_partner_rel", (string)null);
                });

            modelBuilder.Entity("AccountReportGeneralLedgerJournalRel", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<Guid>("JournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("journal_id");

                    b.HasKey("AccountId", "JournalId")
                        .HasName("account_report_general_ledger_journal_rel_pkey");

                    b.HasIndex(new[] { "JournalId", "AccountId" }, "account_report_general_ledger_journal_journal_id_account_id_idx")
                        .HasDatabaseName("account_report_general_ledger_journal_journal_id_account_id_idx");

                    b.ToTable("account_report_general_ledger_journal_rel", (string)null);
                });

            modelBuilder.Entity("AccountReportGeneralLedgerResPartnerRel", b =>
                {
                    b.Property<Guid>("AccountReportGeneralLedgerId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_report_general_ledger_id");

                    b.Property<Guid>("ResPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_partner_id");

                    b.HasKey("AccountReportGeneralLedgerId", "ResPartnerId")
                        .HasName("account_report_general_ledger_res_partner_rel_pkey");

                    b.HasIndex(new[] { "ResPartnerId", "AccountReportGeneralLedgerId" }, "account_report_general_ledger_res_partner_id_account_report_idx")
                        .HasDatabaseName("account_report_general_ledger_res_partner_id_account_report_idx");

                    b.ToTable("account_report_general_ledger_res_partner_rel", (string)null);
                });

            modelBuilder.Entity("AccountReportPartnerLedgerResPartnerRel", b =>
                {
                    b.Property<Guid>("AccountReportPartnerLedgerId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_report_partner_ledger_id");

                    b.Property<Guid>("ResPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_partner_id");

                    b.HasKey("AccountReportPartnerLedgerId", "ResPartnerId")
                        .HasName("account_report_partner_ledger_res_partner_rel_pkey");

                    b.HasIndex(new[] { "ResPartnerId", "AccountReportPartnerLedgerId" }, "account_report_partner_ledger_res_partner_id_account_report_idx")
                        .HasDatabaseName("account_report_partner_ledger_res_partner_id_account_report_idx");

                    b.ToTable("account_report_partner_ledger_res_partner_rel", (string)null);
                });

            modelBuilder.Entity("AccountTaxFiliationRel", b =>
                {
                    b.Property<Guid>("ParentTax")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_tax");

                    b.Property<Guid>("ChildTax")
                        .HasColumnType("uuid")
                        .HasColumnName("child_tax");

                    b.HasKey("ParentTax", "ChildTax")
                        .HasName("account_tax_filiation_rel_pkey");

                    b.HasIndex(new[] { "ChildTax", "ParentTax" }, "account_tax_filiation_rel_child_tax_parent_tax_idx")
                        .HasDatabaseName("account_tax_filiation_rel_child_tax_parent_tax_idx");

                    b.ToTable("account_tax_filiation_rel", (string)null);
                });

            modelBuilder.Entity("AccountTaxHrExpenseSplitRel", b =>
                {
                    b.Property<Guid>("HrExpenseSplitId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_expense_split_id");

                    b.Property<Guid>("AccountTaxId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_tax_id");

                    b.HasKey("HrExpenseSplitId", "AccountTaxId")
                        .HasName("account_tax_hr_expense_split_rel_pkey");

                    b.HasIndex(new[] { "AccountTaxId", "HrExpenseSplitId" }, "account_tax_hr_expense_split__account_tax_id_hr_expense_spl_idx")
                        .HasDatabaseName("account_tax_hr_expense_split__account_tax_id_hr_expense_spl_idx");

                    b.ToTable("account_tax_hr_expense_split_rel", (string)null);
                });

            modelBuilder.Entity("AccountTaxPosOrderLineRel", b =>
                {
                    b.Property<Guid>("PosOrderLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_order_line_id");

                    b.Property<Guid>("AccountTaxId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_tax_id");

                    b.HasKey("PosOrderLineId", "AccountTaxId")
                        .HasName("account_tax_pos_order_line_rel_pkey");

                    b.HasIndex(new[] { "AccountTaxId", "PosOrderLineId" }, "account_tax_pos_order_line_re_account_tax_id_pos_order_line_idx")
                        .HasDatabaseName("account_tax_pos_order_line_re_account_tax_id_pos_order_line_idx");

                    b.ToTable("account_tax_pos_order_line_rel", (string)null);
                });

            modelBuilder.Entity("AccountTaxPurchaseOrderLineRel", b =>
                {
                    b.Property<Guid>("PurchaseOrderLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("purchase_order_line_id");

                    b.Property<Guid>("AccountTaxId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_tax_id");

                    b.HasKey("PurchaseOrderLineId", "AccountTaxId")
                        .HasName("account_tax_purchase_order_line_rel_pkey");

                    b.HasIndex(new[] { "AccountTaxId", "PurchaseOrderLineId" }, "account_tax_purchase_order_li_account_tax_id_purchase_order_idx")
                        .HasDatabaseName("account_tax_purchase_order_li_account_tax_id_purchase_order_idx");

                    b.ToTable("account_tax_purchase_order_line_rel", (string)null);
                });

            modelBuilder.Entity("AccountTaxRepTemplateMinu", b =>
                {
                    b.Property<Guid>("AccountTaxRepartitionLineTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_tax_repartition_line_template_id");

                    b.Property<Guid>("AccountReportExpressionId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_report_expression_id");

                    b.HasKey("AccountTaxRepartitionLineTemplateId", "AccountReportExpressionId")
                        .HasName("account_tax_rep_template_minus_pkey");

                    b.HasIndex(new[] { "AccountReportExpressionId", "AccountTaxRepartitionLineTemplateId" }, "account_tax_rep_template_minu_account_report_expression_id__idx")
                        .HasDatabaseName("account_tax_rep_template_minu_account_report_expression_id__idx");

                    b.ToTable("account_tax_rep_template_minus", (string)null);
                });

            modelBuilder.Entity("AccountTaxRepTemplatePlu", b =>
                {
                    b.Property<Guid>("AccountTaxRepartitionLineTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_tax_repartition_line_template_id");

                    b.Property<Guid>("AccountReportExpressionId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_report_expression_id");

                    b.HasKey("AccountTaxRepartitionLineTemplateId", "AccountReportExpressionId")
                        .HasName("account_tax_rep_template_plus_pkey");

                    b.HasIndex(new[] { "AccountReportExpressionId", "AccountTaxRepartitionLineTemplateId" }, "account_tax_rep_template_plus_account_report_expression_id__idx")
                        .HasDatabaseName("account_tax_rep_template_plus_account_report_expression_id__idx");

                    b.ToTable("account_tax_rep_template_plus", (string)null);
                });

            modelBuilder.Entity("AccountTaxRepartitionFinancialTag", b =>
                {
                    b.Property<Guid>("AccountTaxRepartitionLineTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_tax_repartition_line_template_id");

                    b.Property<long>("AccountAccountTagId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_account_tag_id");

                    b.HasKey("AccountTaxRepartitionLineTemplateId", "AccountAccountTagId")
                        .HasName("account_tax_repartition_financial_tags_pkey");

                    b.HasIndex(new[] { "AccountAccountTagId", "AccountTaxRepartitionLineTemplateId" }, "account_tax_repartition_finan_account_account_tag_id_accoun_idx")
                        .HasDatabaseName("account_tax_repartition_finan_account_account_tag_id_accoun_idx");

                    b.ToTable("account_tax_repartition_financial_tags", (string)null);
                });

            modelBuilder.Entity("AccountTaxSaleAdvancePaymentInvRel", b =>
                {
                    b.Property<Guid>("SaleAdvancePaymentInvId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_advance_payment_inv_id");

                    b.Property<Guid>("AccountTaxId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_tax_id");

                    b.HasKey("SaleAdvancePaymentInvId", "AccountTaxId")
                        .HasName("account_tax_sale_advance_payment_inv_rel_pkey");

                    b.HasIndex(new[] { "AccountTaxId", "SaleAdvancePaymentInvId" }, "account_tax_sale_advance_paym_account_tax_id_sale_advance_p_idx")
                        .HasDatabaseName("account_tax_sale_advance_paym_account_tax_id_sale_advance_p_idx");

                    b.ToTable("account_tax_sale_advance_payment_inv_rel", (string)null);
                });

            modelBuilder.Entity("AccountTaxSaleOrderLineRel", b =>
                {
                    b.Property<Guid>("SaleOrderLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_order_line_id");

                    b.Property<Guid>("AccountTaxId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_tax_id");

                    b.HasKey("SaleOrderLineId", "AccountTaxId")
                        .HasName("account_tax_sale_order_line_rel_pkey");

                    b.HasIndex(new[] { "AccountTaxId", "SaleOrderLineId" }, "account_tax_sale_order_line_r_account_tax_id_sale_order_lin_idx")
                        .HasDatabaseName("account_tax_sale_order_line_r_account_tax_id_sale_order_lin_idx");

                    b.ToTable("account_tax_sale_order_line_rel", (string)null);
                });

            modelBuilder.Entity("AccountTaxTemplateFiliationRel", b =>
                {
                    b.Property<Guid>("ParentTax")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_tax");

                    b.Property<Guid>("ChildTax")
                        .HasColumnType("uuid")
                        .HasColumnName("child_tax");

                    b.HasKey("ParentTax", "ChildTax")
                        .HasName("account_tax_template_filiation_rel_pkey");

                    b.HasIndex(new[] { "ChildTax", "ParentTax" }, "account_tax_template_filiation_rel_child_tax_parent_tax_idx")
                        .HasDatabaseName("account_tax_template_filiation_rel_child_tax_parent_tax_idx");

                    b.ToTable("account_tax_template_filiation_rel", (string)null);
                });

            modelBuilder.Entity("AccountTourUploadBillIrAttachmentsRel", b =>
                {
                    b.Property<Guid>("AccountTourUploadBillId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_tour_upload_bill_id");

                    b.Property<Guid>("IrAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("ir_attachment_id");

                    b.HasKey("AccountTourUploadBillId", "IrAttachmentId")
                        .HasName("account_tour_upload_bill_ir_attachments_rel_pkey");

                    b.HasIndex(new[] { "IrAttachmentId", "AccountTourUploadBillId" }, "account_tour_upload_bill_ir_a_ir_attachment_id_account_tour_idx")
                        .HasDatabaseName("account_tour_upload_bill_ir_a_ir_attachment_id_account_tour_idx");

                    b.ToTable("account_tour_upload_bill_ir_attachments_rel", (string)null);
                });

            modelBuilder.Entity("AccountTrialBalanceAnalyticRel", b =>
                {
                    b.Property<Guid>("AccountBalanceReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_balance_report_id");

                    b.Property<Guid>("AccountAnalyticAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_analytic_account_id");

                    b.HasKey("AccountBalanceReportId", "AccountAnalyticAccountId")
                        .HasName("account_trial_balance_analytic_rel_pkey");

                    b.HasIndex(new[] { "AccountAnalyticAccountId", "AccountBalanceReportId" }, "account_trial_balance_analyti_account_analytic_account_id_a_idx")
                        .HasDatabaseName("account_trial_balance_analyti_account_analytic_account_id_a_idx");

                    b.ToTable("account_trial_balance_analytic_rel", (string)null);
                });

            modelBuilder.Entity("ApplicantGetRefuseReasonHrApplicantRel", b =>
                {
                    b.Property<Guid>("ApplicantGetRefuseReasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("applicant_get_refuse_reason_id");

                    b.Property<Guid>("HrApplicantId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_applicant_id");

                    b.HasKey("ApplicantGetRefuseReasonId", "HrApplicantId")
                        .HasName("applicant_get_refuse_reason_hr_applicant_rel_pkey");

                    b.HasIndex(new[] { "HrApplicantId", "ApplicantGetRefuseReasonId" }, "applicant_get_refuse_reason_h_hr_applicant_id_applicant_get_idx")
                        .HasDatabaseName("applicant_get_refuse_reason_h_hr_applicant_id_applicant_get_idx");

                    b.ToTable("applicant_get_refuse_reason_hr_applicant_rel", (string)null);
                });

            modelBuilder.Entity("ApplicantSendMailHrApplicantRel", b =>
                {
                    b.Property<Guid>("ApplicantSendMailId")
                        .HasColumnType("uuid")
                        .HasColumnName("applicant_send_mail_id");

                    b.Property<Guid>("HrApplicantId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_applicant_id");

                    b.HasKey("ApplicantSendMailId", "HrApplicantId")
                        .HasName("applicant_send_mail_hr_applicant_rel_pkey");

                    b.HasIndex(new[] { "HrApplicantId", "ApplicantSendMailId" }, "applicant_send_mail_hr_applic_hr_applicant_id_applicant_sen_idx")
                        .HasDatabaseName("applicant_send_mail_hr_applic_hr_applicant_id_applicant_sen_idx");

                    b.ToTable("applicant_send_mail_hr_applicant_rel", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccountType")
                        .HasColumnType("text")
                        .HasColumnName("account_type");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<bool?>("Deprecated")
                        .HasColumnType("boolean")
                        .HasColumnName("deprecated");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<bool?>("IncludeInitialBalance")
                        .HasColumnType("boolean")
                        .HasColumnName("include_initial_balance");

                    b.Property<string>("InternalGroup")
                        .HasColumnType("text")
                        .HasColumnName("internal_group");

                    b.Property<bool?>("IsOffBalance")
                        .HasColumnType("boolean")
                        .HasColumnName("is_off_balance");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<bool?>("NonTrade")
                        .HasColumnType("boolean")
                        .HasColumnName("non_trade");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<bool?>("Reconcile")
                        .HasColumnType("boolean")
                        .HasColumnName("reconcile");

                    b.Property<Guid?>("RootId")
                        .HasColumnType("uuid")
                        .HasColumnName("root_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_account_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "Code", "TenantId" }, "account_account_code_company_uniq")
                        .IsUnique()
                        .HasDatabaseName("account_account_code_company_uniq");

                    b.ToTable("account_account", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAccountTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Applicability")
                        .HasColumnType("text")
                        .HasColumnName("applicability");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<bool?>("TaxNegate")
                        .HasColumnType("boolean")
                        .HasColumnName("tax_negate");

                    b.HasKey("Id")
                        .HasName("account_account_tag_pkey");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("account_account_tag", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAccountTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccountType")
                        .HasColumnType("text")
                        .HasColumnName("account_type");

                    b.Property<Guid?>("ChartTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("chart_template_id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<bool?>("Nocreate")
                        .HasColumnType("boolean")
                        .HasColumnName("nocreate");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<bool?>("Reconcile")
                        .HasColumnType("boolean")
                        .HasColumnName("reconcile");

                    b.HasKey("Id")
                        .HasName("account_account_template_pkey");

                    b.HasIndex("ChartTemplateId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.ToTable("account_account_template", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAccountType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("account_account_type_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("account_account_type", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAccruedOrdersWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<DateTime?>("ReversalDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reversal_date");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_accrued_orders_wizard_pkey");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("account_accrued_orders_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAgedTrialBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("PeriodLength")
                        .HasColumnType("bigint")
                        .HasColumnName("period_length");

                    b.Property<string>("ResultSelection")
                        .HasColumnType("text")
                        .HasColumnName("result_selection");

                    b.Property<string>("TargetMove")
                        .HasColumnType("text")
                        .HasColumnName("target_move");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_aged_trial_balance_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("account_aged_trial_balance", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAnalyticAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("plan_id");

                    b.Property<Guid?>("RootPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("root_plan_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_analytic_account_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PlanId");

                    b.HasIndex("RootPlanId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "Code" }, "account_analytic_account_code_index")
                        .HasDatabaseName("account_analytic_account_code_index");

                    b.ToTable("account_analytic_account", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAnalyticApplicability", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccountPrefix")
                        .HasColumnType("text")
                        .HasColumnName("account_prefix");

                    b.Property<Guid?>("AnalyticPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("analytic_plan_id");

                    b.Property<string>("Applicability")
                        .HasColumnType("text")
                        .HasColumnName("applicability");

                    b.Property<string>("BusinessDomain")
                        .HasColumnType("text")
                        .HasColumnName("business_domain");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("ProductCategId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_categ_id");

                    b.HasKey("Id")
                        .HasName("account_analytic_applicability_pkey");

                    b.HasIndex("AnalyticPlanId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductCategId");

                    b.ToTable("account_analytic_applicability", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAnalyticDistributionModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccountPrefix")
                        .HasColumnType("text")
                        .HasColumnName("account_prefix");

                    b.Property<string>("AnalyticDistribution")
                        .HasColumnType("jsonb")
                        .HasColumnName("analytic_distribution");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("PartnerCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("partner_category_id");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<long?>("ProductCategId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_categ_id");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_analytic_distribution_model_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PartnerCategoryId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ProductCategId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "AnalyticDistribution" }, "account_analytic_distribution_model_analytic_distribution_gin_i")
                        .HasDatabaseName("account_analytic_distribution_model_analytic_distribution_gin_i");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "AnalyticDistribution" }, "account_analytic_distribution_model_analytic_distribution_gin_i"), "gin");

                    b.ToTable("account_analytic_distribution_model", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAnalyticLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<Guid?>("GeneralAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("general_account_id");

                    b.Property<Guid?>("JournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("journal_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MoveLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("move_line_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("plan_id");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ProductUomId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_uom_id");

                    b.Property<string>("Ref")
                        .HasColumnType("text")
                        .HasColumnName("ref");

                    b.Property<Guid?>("SoLine")
                        .HasColumnType("uuid")
                        .HasColumnName("so_line");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<double?>("UnitAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("unit_amount");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("account_analytic_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("GeneralAccountId");

                    b.HasIndex("JournalId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PlanId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductUomId");

                    b.HasIndex("SoLine");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "AccountId" }, "account_analytic_line_account_id_index")
                        .HasDatabaseName("account_analytic_line_account_id_index");

                    b.HasIndex(new[] { "Date" }, "account_analytic_line_date_index")
                        .HasDatabaseName("account_analytic_line_date_index");

                    b.HasIndex(new[] { "MoveLineId" }, "account_analytic_line_move_line_id_index")
                        .HasDatabaseName("account_analytic_line_move_line_id_index");

                    b.HasIndex(new[] { "UserId" }, "account_analytic_line_user_id_index")
                        .HasDatabaseName("account_analytic_line_user_id_index");

                    b.ToTable("account_analytic_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAnalyticPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<string>("CompleteName")
                        .HasColumnType("text")
                        .HasColumnName("complete_name");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("DefaultApplicability")
                        .HasColumnType("text")
                        .HasColumnName("default_applicability");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("ParentPath")
                        .HasColumnType("text")
                        .HasColumnName("parent_path");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_analytic_plan_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "ParentPath" }, "account_analytic_plan_parent_path_index")
                        .HasDatabaseName("account_analytic_plan_parent_path_index");

                    b.ToTable("account_analytic_plan", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAssetAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AccountAnalyticId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_analytic_id");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("AnalyticDistribution")
                        .HasColumnType("jsonb")
                        .HasColumnName("analytic_distribution");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("DateFirstDepreciation")
                        .HasColumnType("text")
                        .HasColumnName("date_first_depreciation");

                    b.Property<DateTime?>("FirstDepreciationManualDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("first_depreciation_manual_date");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Method")
                        .HasColumnType("text")
                        .HasColumnName("method");

                    b.Property<DateTime?>("MethodEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("method_end");

                    b.Property<long?>("MethodNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("method_number");

                    b.Property<long?>("MethodPeriod")
                        .HasColumnType("bigint")
                        .HasColumnName("method_period");

                    b.Property<double?>("MethodProgressFactor")
                        .HasColumnType("double precision")
                        .HasColumnName("method_progress_factor");

                    b.Property<string>("MethodTime")
                        .HasColumnType("text")
                        .HasColumnName("method_time");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<bool?>("Prorata")
                        .HasColumnType("boolean")
                        .HasColumnName("prorata");

                    b.Property<decimal?>("SalvageValue")
                        .HasColumnType("numeric")
                        .HasColumnName("salvage_value");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<decimal?>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("account_asset_asset_pkey");

                    b.HasIndex("AccountAnalyticId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "AnalyticDistribution" }, "account_asset_asset_analytic_distribution_gin_index")
                        .HasDatabaseName("account_asset_asset_analytic_distribution_gin_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "AnalyticDistribution" }, "account_asset_asset_analytic_distribution_gin_index"), "gin");

                    b.ToTable("account_asset_asset", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAssetCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AccountAnalyticId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_analytic_id");

                    b.Property<Guid?>("AccountAssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_asset_id");

                    b.Property<Guid?>("AccountDepreciationExpenseId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_depreciation_expense_id");

                    b.Property<Guid?>("AccountDepreciationId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_depreciation_id");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("AnalyticDistribution")
                        .HasColumnType("jsonb")
                        .HasColumnName("analytic_distribution");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("DateFirstDepreciation")
                        .HasColumnType("text")
                        .HasColumnName("date_first_depreciation");

                    b.Property<bool?>("GroupEntries")
                        .HasColumnType("boolean")
                        .HasColumnName("group_entries");

                    b.Property<Guid?>("JournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("journal_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Method")
                        .HasColumnType("text")
                        .HasColumnName("method");

                    b.Property<DateTime?>("MethodEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("method_end");

                    b.Property<long?>("MethodNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("method_number");

                    b.Property<long?>("MethodPeriod")
                        .HasColumnType("bigint")
                        .HasColumnName("method_period");

                    b.Property<double?>("MethodProgressFactor")
                        .HasColumnType("double precision")
                        .HasColumnName("method_progress_factor");

                    b.Property<string>("MethodTime")
                        .HasColumnType("text")
                        .HasColumnName("method_time");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool?>("OpenAsset")
                        .HasColumnType("boolean")
                        .HasColumnName("open_asset");

                    b.Property<bool?>("Prorata")
                        .HasColumnType("boolean")
                        .HasColumnName("prorata");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("account_asset_category_pkey");

                    b.HasIndex("AccountAnalyticId");

                    b.HasIndex("AccountAssetId");

                    b.HasIndex("AccountDepreciationExpenseId");

                    b.HasIndex("AccountDepreciationId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("JournalId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "AnalyticDistribution" }, "account_asset_category_analytic_distribution_gin_index")
                        .HasDatabaseName("account_asset_category_analytic_distribution_gin_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "AnalyticDistribution" }, "account_asset_category_analytic_distribution_gin_index"), "gin");

                    b.HasIndex(new[] { "Name" }, "account_asset_category_name_index")
                        .HasDatabaseName("account_asset_category_name_index");

                    b.HasIndex(new[] { "Type" }, "account_asset_category_type_index")
                        .HasDatabaseName("account_asset_category_type_index");

                    b.ToTable("account_asset_category", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAssetDepreciationLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<Guid?>("AssetId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<decimal?>("DepreciatedValue")
                        .HasColumnType("numeric")
                        .HasColumnName("depreciated_value");

                    b.Property<DateTime?>("DepreciationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("depreciation_date");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<bool?>("MoveCheck")
                        .HasColumnType("boolean")
                        .HasColumnName("move_check");

                    b.Property<Guid?>("MoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("move_id");

                    b.Property<bool?>("MovePostedCheck")
                        .HasColumnType("boolean")
                        .HasColumnName("move_posted_check");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal?>("RemainingValue")
                        .HasColumnType("numeric")
                        .HasColumnName("remaining_value");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.HasKey("Id")
                        .HasName("account_asset_depreciation_line_pkey");

                    b.HasIndex("AssetId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MoveId");

                    b.HasIndex(new[] { "DepreciationDate" }, "account_asset_depreciation_line_depreciation_date_index")
                        .HasDatabaseName("account_asset_depreciation_line_depreciation_date_index");

                    b.HasIndex(new[] { "Name" }, "account_asset_depreciation_line_name_index")
                        .HasDatabaseName("account_asset_depreciation_line_name_index");

                    b.ToTable("account_asset_depreciation_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAutomaticEntryWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccountType")
                        .HasColumnType("text")
                        .HasColumnName("account_type");

                    b.Property<string>("Action")
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<Guid?>("DestinationAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("destination_account_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<double?>("Percentage")
                        .HasColumnType("double precision")
                        .HasColumnName("percentage");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount");

                    b.HasKey("Id")
                        .HasName("account_automatic_entry_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DestinationAccountId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("account_automatic_entry_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountBalanceReport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to");

                    b.Property<string>("DisplayAccount")
                        .HasColumnType("text")
                        .HasColumnName("display_account");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("TargetMove")
                        .HasColumnType("text")
                        .HasColumnName("target_move");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_balance_report_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("account_balance_report", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountBankStatement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<decimal?>("BalanceEnd")
                        .HasColumnType("numeric")
                        .HasColumnName("balance_end");

                    b.Property<decimal?>("BalanceEndReal")
                        .HasColumnType("numeric")
                        .HasColumnName("balance_end_real");

                    b.Property<decimal?>("BalanceStart")
                        .HasColumnType("numeric")
                        .HasColumnName("balance_start");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("FirstLineIndex")
                        .HasColumnType("text")
                        .HasColumnName("first_line_index");

                    b.Property<bool?>("IsComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_complete");

                    b.Property<Guid?>("JournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("journal_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_bank_statement_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("JournalId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "FirstLineIndex" }, "account_bank_statement_first_line_index_index")
                        .HasDatabaseName("account_bank_statement_first_line_index_index");

                    b.ToTable("account_bank_statement", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountBankStatementImport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("account_bank_statement_import_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("account_bank_statement_import", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountBankStatementImportJournalCreation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("JournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("journal_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("account_bank_statement_import_journal_creation_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("JournalId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("account_bank_statement_import_journal_creation", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountBankStatementLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text")
                        .HasColumnName("account_number");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<decimal?>("AmountCurrency")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_currency");

                    b.Property<double?>("AmountResidual")
                        .HasColumnType("double precision")
                        .HasColumnName("amount_residual");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<long?>("ForeignCurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("foreign_currency_id");

                    b.Property<string>("InternalIndex")
                        .HasColumnType("text")
                        .HasColumnName("internal_index");

                    b.Property<bool?>("IsReconciled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_reconciled");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("move_id");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<string>("PartnerName")
                        .HasColumnType("text")
                        .HasColumnName("partner_name");

                    b.Property<string>("PaymentRef")
                        .HasColumnType("text")
                        .HasColumnName("payment_ref");

                    b.Property<Guid?>("PosSessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_session_id");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("StatementId")
                        .HasColumnType("uuid")
                        .HasColumnName("statement_id");

                    b.Property<string>("TransactionType")
                        .HasColumnType("text")
                        .HasColumnName("transaction_type");

                    b.Property<string>("UniqueImportId")
                        .HasColumnType("text")
                        .HasColumnName("unique_import_id");

                    b.HasKey("Id")
                        .HasName("account_bank_statement_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ForeignCurrencyId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MoveId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PosSessionId");

                    b.HasIndex("StatementId");

                    b.HasIndex(new[] { "InternalIndex" }, "account_bank_statement_line_internal_index_index")
                        .HasDatabaseName("account_bank_statement_line_internal_index_index");

                    b.HasIndex(new[] { "UniqueImportId" }, "account_bank_statement_line_unique_import_id")
                        .IsUnique()
                        .HasDatabaseName("account_bank_statement_line_unique_import_id");

                    b.ToTable("account_bank_statement_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountBankbookReport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to");

                    b.Property<string>("DisplayAccount")
                        .HasColumnType("text")
                        .HasColumnName("display_account");

                    b.Property<bool?>("InitialBalance")
                        .HasColumnType("boolean")
                        .HasColumnName("initial_balance");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Sortby")
                        .HasColumnType("text")
                        .HasColumnName("sortby");

                    b.Property<string>("TargetMove")
                        .HasColumnType("text")
                        .HasColumnName("target_move");

                    b.HasKey("Id")
                        .HasName("account_bankbook_report_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("account_bankbook_report", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountBudgetPost", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_budget_post_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("account_budget_post", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountCashRounding", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<double?>("Rounding")
                        .HasColumnType("double precision")
                        .HasColumnName("rounding");

                    b.Property<string>("RoundingMethod")
                        .HasColumnType("text")
                        .HasColumnName("rounding_method");

                    b.Property<string>("Strategy")
                        .HasColumnType("text")
                        .HasColumnName("strategy");

                    b.HasKey("Id")
                        .HasName("account_cash_rounding_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("account_cash_rounding", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountCashbookReport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to");

                    b.Property<string>("DisplayAccount")
                        .HasColumnType("text")
                        .HasColumnName("display_account");

                    b.Property<bool?>("InitialBalance")
                        .HasColumnType("boolean")
                        .HasColumnName("initial_balance");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Sortby")
                        .HasColumnType("text")
                        .HasColumnName("sortby");

                    b.Property<string>("TargetMove")
                        .HasColumnType("text")
                        .HasColumnName("target_move");

                    b.HasKey("Id")
                        .HasName("account_cashbook_report_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("account_cashbook_report", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountChartTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AccountJournalEarlyPayDiscountGainAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_early_pay_discount_gain_account_id");

                    b.Property<Guid?>("AccountJournalEarlyPayDiscountLossAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_early_pay_discount_loss_account_id");

                    b.Property<Guid?>("AccountJournalPaymentCreditAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_payment_credit_account_id");

                    b.Property<Guid?>("AccountJournalPaymentDebitAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_payment_debit_account_id");

                    b.Property<Guid?>("AccountJournalSuspenseAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_suspense_account_id");

                    b.Property<string>("BankAccountCodePrefix")
                        .HasColumnType("text")
                        .HasColumnName("bank_account_code_prefix");

                    b.Property<string>("CashAccountCodePrefix")
                        .HasColumnType("text")
                        .HasColumnName("cash_account_code_prefix");

                    b.Property<long?>("CodeDigits")
                        .HasColumnType("bigint")
                        .HasColumnName("code_digits");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<Guid?>("DefaultCashDifferenceExpenseAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("default_cash_difference_expense_account_id");

                    b.Property<Guid?>("DefaultCashDifferenceIncomeAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("default_cash_difference_income_account_id");

                    b.Property<Guid?>("DefaultPosReceivableAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("default_pos_receivable_account_id");

                    b.Property<Guid?>("ExpenseCurrencyExchangeAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("expense_currency_exchange_account_id");

                    b.Property<Guid?>("IncomeCurrencyExchangeAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("income_currency_exchange_account_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("PropertyAccountExpenseCategId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_account_expense_categ_id");

                    b.Property<Guid?>("PropertyAccountExpenseId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_account_expense_id");

                    b.Property<Guid?>("PropertyAccountIncomeCategId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_account_income_categ_id");

                    b.Property<Guid?>("PropertyAccountIncomeId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_account_income_id");

                    b.Property<Guid?>("PropertyAccountPayableId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_account_payable_id");

                    b.Property<Guid?>("PropertyAccountReceivableId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_account_receivable_id");

                    b.Property<Guid?>("PropertyAdvanceTaxPaymentAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_advance_tax_payment_account_id");

                    b.Property<Guid?>("PropertyCashBasisBaseAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_cash_basis_base_account_id");

                    b.Property<Guid?>("PropertyStockAccountInputCategId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_stock_account_input_categ_id");

                    b.Property<Guid?>("PropertyStockAccountOutputCategId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_stock_account_output_categ_id");

                    b.Property<Guid?>("PropertyStockValuationAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_stock_valuation_account_id");

                    b.Property<Guid?>("PropertyTaxPayableAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_tax_payable_account_id");

                    b.Property<Guid?>("PropertyTaxReceivableAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_tax_receivable_account_id");

                    b.Property<string>("SpokenLanguages")
                        .HasColumnType("text")
                        .HasColumnName("spoken_languages");

                    b.Property<string>("TransferAccountCodePrefix")
                        .HasColumnType("text")
                        .HasColumnName("transfer_account_code_prefix");

                    b.Property<bool?>("UseAngloSaxon")
                        .HasColumnType("boolean")
                        .HasColumnName("use_anglo_saxon");

                    b.Property<bool?>("UseStornoAccounting")
                        .HasColumnType("boolean")
                        .HasColumnName("use_storno_accounting");

                    b.Property<bool?>("Visible")
                        .HasColumnType("boolean")
                        .HasColumnName("visible");

                    b.HasKey("Id")
                        .HasName("account_chart_template_pkey");

                    b.HasIndex("AccountJournalEarlyPayDiscountGainAccountId");

                    b.HasIndex("AccountJournalEarlyPayDiscountLossAccountId");

                    b.HasIndex("AccountJournalPaymentCreditAccountId");

                    b.HasIndex("AccountJournalPaymentDebitAccountId");

                    b.HasIndex("AccountJournalSuspenseAccountId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DefaultCashDifferenceExpenseAccountId");

                    b.HasIndex("DefaultCashDifferenceIncomeAccountId");

                    b.HasIndex("DefaultPosReceivableAccountId");

                    b.HasIndex("ExpenseCurrencyExchangeAccountId");

                    b.HasIndex("IncomeCurrencyExchangeAccountId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ParentId");

                    b.HasIndex("PropertyAccountExpenseCategId");

                    b.HasIndex("PropertyAccountExpenseId");

                    b.HasIndex("PropertyAccountIncomeCategId");

                    b.HasIndex("PropertyAccountIncomeId");

                    b.HasIndex("PropertyAccountPayableId");

                    b.HasIndex("PropertyAccountReceivableId");

                    b.HasIndex("PropertyAdvanceTaxPaymentAccountId");

                    b.HasIndex("PropertyCashBasisBaseAccountId");

                    b.HasIndex("PropertyStockAccountInputCategId");

                    b.HasIndex("PropertyStockAccountOutputCategId");

                    b.HasIndex("PropertyStockValuationAccountId");

                    b.HasIndex("PropertyTaxPayableAccountId");

                    b.HasIndex("PropertyTaxReceivableAccountId");

                    b.ToTable("account_chart_template", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountCommonAccountReport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to");

                    b.Property<string>("DisplayAccount")
                        .HasColumnType("text")
                        .HasColumnName("display_account");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("TargetMove")
                        .HasColumnType("text")
                        .HasColumnName("target_move");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_common_account_report_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("account_common_account_report", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountCommonJournalReport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("AmountCurrency")
                        .HasColumnType("boolean")
                        .HasColumnName("amount_currency");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("TargetMove")
                        .HasColumnType("text")
                        .HasColumnName("target_move");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_common_journal_report_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("account_common_journal_report", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountCommonPartnerReport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("ResultSelection")
                        .HasColumnType("text")
                        .HasColumnName("result_selection");

                    b.Property<string>("TargetMove")
                        .HasColumnType("text")
                        .HasColumnName("target_move");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_common_partner_report_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("account_common_partner_report", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountCommonReport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("TargetMove")
                        .HasColumnType("text")
                        .HasColumnName("target_move");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_common_report_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("account_common_report", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountDaybookReport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("TargetMove")
                        .HasColumnType("text")
                        .HasColumnName("target_move");

                    b.HasKey("Id")
                        .HasName("account_daybook_report_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("account_daybook_report", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountEdiDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("attachment_id");

                    b.Property<string>("BlockingLevel")
                        .HasColumnType("text")
                        .HasColumnName("blocking_level");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("EdiFormatId")
                        .HasColumnType("bigint")
                        .HasColumnName("edi_format_id");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("move_id");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("account_edi_document_pkey");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MoveId");

                    b.HasIndex(new[] { "EdiFormatId", "MoveId" }, "account_edi_document_unique_edi_document_by_move_by_format")
                        .IsUnique()
                        .HasDatabaseName("account_edi_document_unique_edi_document_by_move_by_format");

                    b.ToTable("account_edi_document", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountEdiFormat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("account_edi_format_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Code" }, "account_edi_format_unique_code")
                        .IsUnique()
                        .HasDatabaseName("account_edi_format_unique_code");

                    b.ToTable("account_edi_format", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFinancialReport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AccountReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_report_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("DisplayDetail")
                        .HasColumnType("text")
                        .HasColumnName("display_detail");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("Level")
                        .HasColumnType("bigint")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("ReportDomain")
                        .HasColumnType("text")
                        .HasColumnName("report_domain");

                    b.Property<long?>("Sequence")
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    b.Property<string>("Sign")
                        .HasColumnType("text")
                        .HasColumnName("sign");

                    b.Property<string>("StyleOverwrite")
                        .HasColumnType("text")
                        .HasColumnName("style_overwrite");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("account_financial_report_pkey");

                    b.HasIndex("AccountReportId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ParentId");

                    b.ToTable("account_financial_report", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFinancialYearOp", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_financial_year_op_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("account_financial_year_op", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFiscalPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<bool?>("AutoApply")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_apply");

                    b.Property<long?>("CountryGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_group_id");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("ForeignVat")
                        .HasColumnType("text")
                        .HasColumnName("foreign_vat");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("jsonb")
                        .HasColumnName("note");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<bool?>("VatRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("vat_required");

                    b.Property<string>("ZipFrom")
                        .HasColumnType("text")
                        .HasColumnName("zip_from");

                    b.Property<string>("ZipTo")
                        .HasColumnType("text")
                        .HasColumnName("zip_to");

                    b.HasKey("Id")
                        .HasName("account_fiscal_position_pkey");

                    b.HasIndex("CountryGroupId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("account_fiscal_position", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFiscalPositionAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AccountDestId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_dest_id");

                    b.Property<Guid?>("AccountSrcId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_src_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_fiscal_position_account_pkey");

                    b.HasIndex("AccountDestId");

                    b.HasIndex("AccountSrcId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "PositionId", "AccountSrcId", "AccountDestId" }, "account_fiscal_position_account_account_src_dest_uniq")
                        .IsUnique()
                        .HasDatabaseName("account_fiscal_position_account_account_src_dest_uniq");

                    b.ToTable("account_fiscal_position_account", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFiscalPositionAccountTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AccountDestId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_dest_id");

                    b.Property<Guid?>("AccountSrcId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_src_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.HasKey("Id")
                        .HasName("account_fiscal_position_account_template_pkey");

                    b.HasIndex("AccountDestId");

                    b.HasIndex("AccountSrcId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PositionId");

                    b.ToTable("account_fiscal_position_account_template", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFiscalPositionTax", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.Property<Guid?>("TaxDestId")
                        .HasColumnType("uuid")
                        .HasColumnName("tax_dest_id");

                    b.Property<Guid?>("TaxSrcId")
                        .HasColumnType("uuid")
                        .HasColumnName("tax_src_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_fiscal_position_tax_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TaxDestId");

                    b.HasIndex("TaxSrcId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "PositionId", "TaxSrcId", "TaxDestId" }, "account_fiscal_position_tax_tax_src_dest_uniq")
                        .IsUnique()
                        .HasDatabaseName("account_fiscal_position_tax_tax_src_dest_uniq");

                    b.ToTable("account_fiscal_position_tax", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFiscalPositionTaxTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.Property<Guid?>("TaxDestId")
                        .HasColumnType("uuid")
                        .HasColumnName("tax_dest_id");

                    b.Property<Guid?>("TaxSrcId")
                        .HasColumnType("uuid")
                        .HasColumnName("tax_src_id");

                    b.HasKey("Id")
                        .HasName("account_fiscal_position_tax_template_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PositionId");

                    b.HasIndex("TaxDestId");

                    b.HasIndex("TaxSrcId");

                    b.ToTable("account_fiscal_position_tax_template", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFiscalPositionTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("AutoApply")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_apply");

                    b.Property<Guid?>("ChartTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("chart_template_id");

                    b.Property<long?>("CountryGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_group_id");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("jsonb")
                        .HasColumnName("note");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<bool?>("VatRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("vat_required");

                    b.Property<string>("ZipFrom")
                        .HasColumnType("text")
                        .HasColumnName("zip_from");

                    b.Property<string>("ZipTo")
                        .HasColumnType("text")
                        .HasColumnName("zip_to");

                    b.HasKey("Id")
                        .HasName("account_fiscal_position_template_pkey");

                    b.HasIndex("ChartTemplateId");

                    b.HasIndex("CountryGroupId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("account_fiscal_position_template", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFiscalYear", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_fiscal_year_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("account_fiscal_year", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFullReconcile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("ExchangeMoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("exchange_move_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("account_full_reconcile_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ExchangeMoveId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("account_full_reconcile", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("CodePrefixEnd")
                        .HasColumnType("text")
                        .HasColumnName("code_prefix_end");

                    b.Property<string>("CodePrefixStart")
                        .HasColumnType("text")
                        .HasColumnName("code_prefix_start");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("ParentPath")
                        .HasColumnType("text")
                        .HasColumnName("parent_path");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_group_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "ParentId" }, "account_group_parent_id_index")
                        .HasDatabaseName("account_group_parent_id_index");

                    b.HasIndex(new[] { "ParentPath" }, "account_group_parent_path_index")
                        .HasDatabaseName("account_group_parent_path_index");

                    b.ToTable("account_group", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountGroupTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("ChartTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("chart_template_id");

                    b.Property<string>("CodePrefixEnd")
                        .HasColumnType("text")
                        .HasColumnName("code_prefix_end");

                    b.Property<string>("CodePrefixStart")
                        .HasColumnType("text")
                        .HasColumnName("code_prefix_start");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.HasKey("Id")
                        .HasName("account_group_template_pkey");

                    b.HasIndex("ChartTemplateId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ParentId");

                    b.ToTable("account_group_template", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountIncoterm", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("account_incoterms_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("account_incoterms", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountInvoiceSend", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("ComposerId")
                        .HasColumnType("uuid")
                        .HasColumnName("composer_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("IsEmail")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email");

                    b.Property<bool?>("IsPrint")
                        .HasColumnType("boolean")
                        .HasColumnName("is_print");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<bool?>("Printed")
                        .HasColumnType("boolean")
                        .HasColumnName("printed");

                    b.Property<bool?>("SnailmailIsLetter")
                        .HasColumnType("boolean")
                        .HasColumnName("snailmail_is_letter");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.HasKey("Id")
                        .HasName("account_invoice_send_pkey");

                    b.HasIndex("ComposerId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TemplateId");

                    b.ToTable("account_invoice_send", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountJournal", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<Guid?>("AliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("alias_id");

                    b.Property<Guid?>("BankAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("bank_account_id");

                    b.Property<string>("BankStatementsSource")
                        .HasColumnType("text")
                        .HasColumnName("bank_statements_source");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<Guid?>("DefaultAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("default_account_id");

                    b.Property<string>("InvoiceReferenceModel")
                        .HasColumnType("text")
                        .HasColumnName("invoice_reference_model");

                    b.Property<string>("InvoiceReferenceType")
                        .HasColumnType("text")
                        .HasColumnName("invoice_reference_type");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LossAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("loss_account_id");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<bool?>("PaymentSequence")
                        .HasColumnType("boolean")
                        .HasColumnName("payment_sequence");

                    b.Property<Guid?>("ProfitAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("profit_account_id");

                    b.Property<bool?>("RefundSequence")
                        .HasColumnType("boolean")
                        .HasColumnName("refund_sequence");

                    b.Property<bool?>("RestrictModeHashTable")
                        .HasColumnType("boolean")
                        .HasColumnName("restrict_mode_hash_table");

                    b.Property<string>("SaleActivityNote")
                        .HasColumnType("text")
                        .HasColumnName("sale_activity_note");

                    b.Property<long?>("SaleActivityTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("sale_activity_type_id");

                    b.Property<Guid?>("SaleActivityUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_activity_user_id");

                    b.Property<Guid?>("SecureSequenceId")
                        .HasColumnType("uuid")
                        .HasColumnName("secure_sequence_id");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<string>("SequenceOverrideRegex")
                        .HasColumnType("text")
                        .HasColumnName("sequence_override_regex");

                    b.Property<bool?>("ShowOnDashboard")
                        .HasColumnType("boolean")
                        .HasColumnName("show_on_dashboard");

                    b.Property<Guid?>("SuspenseAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("suspense_account_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("account_journal_pkey");

                    b.HasIndex("AliasId");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DefaultAccountId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LossAccountId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("ProfitAccountId");

                    b.HasIndex("SaleActivityTypeId");

                    b.HasIndex("SaleActivityUserId");

                    b.HasIndex("SecureSequenceId");

                    b.HasIndex("SuspenseAccountId");

                    b.HasIndex(new[] { "TenantId", "Code" }, "account_journal_code_company_uniq")
                        .IsUnique()
                        .HasDatabaseName("account_journal_code_company_uniq");

                    b.HasIndex(new[] { "TenantId" }, "account_journal_company_id_index")
                        .HasDatabaseName("account_journal_company_id_index");

                    b.ToTable("account_journal", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountJournalGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_journal_group_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "TenantId", "Name" }, "account_journal_group_uniq_name")
                        .IsUnique()
                        .HasDatabaseName("account_journal_group_uniq_name");

                    b.ToTable("account_journal_group", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountMove", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<bool?>("AlwaysTaxExigible")
                        .HasColumnType("boolean")
                        .HasColumnName("always_tax_exigible");

                    b.Property<decimal?>("AmountResidual")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_residual");

                    b.Property<decimal?>("AmountResidualSigned")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_residual_signed");

                    b.Property<decimal?>("AmountTax")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_tax");

                    b.Property<decimal?>("AmountTaxSigned")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_tax_signed");

                    b.Property<decimal?>("AmountTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_total");

                    b.Property<decimal?>("AmountTotalInCurrencySigned")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_total_in_currency_signed");

                    b.Property<decimal?>("AmountTotalSigned")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_total_signed");

                    b.Property<decimal?>("AmountUntaxed")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_untaxed");

                    b.Property<decimal?>("AmountUntaxedSigned")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_untaxed_signed");

                    b.Property<string>("AutoPost")
                        .HasColumnType("text")
                        .HasColumnName("auto_post");

                    b.Property<Guid?>("AutoPostOriginId")
                        .HasColumnType("uuid")
                        .HasColumnName("auto_post_origin_id");

                    b.Property<DateTime?>("AutoPostUntil")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("auto_post_until");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uuid")
                        .HasColumnName("campaign_id");

                    b.Property<Guid?>("CommercialPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("commercial_partner_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("EdiState")
                        .HasColumnType("text")
                        .HasColumnName("edi_state");

                    b.Property<Guid?>("FiscalPositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("fiscal_position_id");

                    b.Property<string>("InalterableHash")
                        .HasColumnType("text")
                        .HasColumnName("inalterable_hash");

                    b.Property<Guid?>("InvoiceCashRoundingId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_cash_rounding_id");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("invoice_date");

                    b.Property<DateTime?>("InvoiceDateDue")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("invoice_date_due");

                    b.Property<Guid?>("InvoiceIncotermId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_incoterm_id");

                    b.Property<string>("InvoiceOrigin")
                        .HasColumnType("text")
                        .HasColumnName("invoice_origin");

                    b.Property<string>("InvoicePartnerDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("invoice_partner_display_name");

                    b.Property<Guid?>("InvoicePaymentTermId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_payment_term_id");

                    b.Property<string>("InvoiceSourceEmail")
                        .HasColumnType("text")
                        .HasColumnName("invoice_source_email");

                    b.Property<Guid?>("InvoiceUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_user_id");

                    b.Property<bool?>("IsMoveSent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_move_sent");

                    b.Property<bool?>("IsStorno")
                        .HasColumnType("boolean")
                        .HasColumnName("is_storno");

                    b.Property<Guid?>("JournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("journal_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MediumId")
                        .HasColumnType("uuid")
                        .HasColumnName("medium_id");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("MoveType")
                        .HasColumnType("text")
                        .HasColumnName("move_type");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Narration")
                        .HasColumnType("text")
                        .HasColumnName("narration");

                    b.Property<Guid?>("PartnerBankId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_bank_id");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid?>("PartnerShippingId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_shipping_id");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<string>("PaymentReference")
                        .HasColumnType("text")
                        .HasColumnName("payment_reference");

                    b.Property<string>("PaymentState")
                        .HasColumnType("text")
                        .HasColumnName("payment_state");

                    b.Property<bool?>("PostedBefore")
                        .HasColumnType("boolean")
                        .HasColumnName("posted_before");

                    b.Property<string>("QrCodeMethod")
                        .HasColumnType("text")
                        .HasColumnName("qr_code_method");

                    b.Property<decimal?>("QuickEditTotalAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("quick_edit_total_amount");

                    b.Property<string>("Ref")
                        .HasColumnType("text")
                        .HasColumnName("ref");

                    b.Property<Guid?>("ReversedEntryId")
                        .HasColumnType("uuid")
                        .HasColumnName("reversed_entry_id");

                    b.Property<long?>("SecureSequenceNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("secure_sequence_number");

                    b.Property<long>("SequenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence_number");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SequenceNumber"));

                    b.Property<string>("SequencePrefix")
                        .HasColumnType("text")
                        .HasColumnName("sequence_prefix");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_id");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("StatementLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("statement_line_id");

                    b.Property<Guid?>("StockMoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_move_id");

                    b.Property<Guid?>("TaxCashBasisOriginMoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("tax_cash_basis_origin_move_id");

                    b.Property<Guid?>("TaxCashBasisRecId")
                        .HasColumnType("uuid")
                        .HasColumnName("tax_cash_basis_rec_id");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<bool?>("ToCheck")
                        .HasColumnType("boolean")
                        .HasColumnName("to_check");

                    b.Property<Guid?>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.HasKey("Id")
                        .HasName("account_move_pkey");

                    b.HasIndex("AutoPostOriginId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CommercialPartnerId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FiscalPositionId");

                    b.HasIndex("InvoiceCashRoundingId");

                    b.HasIndex("InvoiceIncotermId");

                    b.HasIndex("InvoicePaymentTermId");

                    b.HasIndex("InvoiceUserId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MediumId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("PartnerBankId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PartnerShippingId");

                    b.HasIndex("SourceId");

                    b.HasIndex("StatementLineId");

                    b.HasIndex("TaxCashBasisRecId");

                    b.HasIndex("TeamId");

                    b.HasIndex("WebsiteId");

                    b.HasIndex(new[] { "TenantId" }, "account_move_company_id_index")
                        .HasDatabaseName("account_move_company_id_index");

                    b.HasIndex(new[] { "Date" }, "account_move_date_index")
                        .HasDatabaseName("account_move_date_index");

                    b.HasIndex(new[] { "InvoiceDateDue" }, "account_move_invoice_date_due_index")
                        .HasDatabaseName("account_move_invoice_date_due_index");

                    b.HasIndex(new[] { "InvoiceDate" }, "account_move_invoice_date_index")
                        .HasDatabaseName("account_move_invoice_date_index");

                    b.HasIndex(new[] { "MoveType" }, "account_move_move_type_index")
                        .HasDatabaseName("account_move_move_type_index");

                    b.HasIndex(new[] { "Name" }, "account_move_name_index")
                        .HasDatabaseName("account_move_name_index");

                    b.HasIndex(new[] { "Name" }, "account_move_name_trigram_index")
                        .HasDatabaseName("account_move_name_trigram_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "Name" }, "account_move_name_trigram_index"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Name" }, "account_move_name_trigram_index"), new[] { "gin_trgm_ops" });

                    b.HasIndex(new[] { "PaymentId" }, "account_move_payment_id_index")
                        .HasDatabaseName("account_move_payment_id_index")
                        .HasFilter("(payment_id IS NOT NULL)");

                    b.HasIndex(new[] { "JournalId", "State", "PaymentState", "MoveType", "Date" }, "account_move_payment_idx")
                        .HasDatabaseName("account_move_payment_idx");

                    b.HasIndex(new[] { "PaymentReference" }, "account_move_payment_reference_index")
                        .HasDatabaseName("account_move_payment_reference_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "PaymentReference" }, "account_move_payment_reference_index"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "PaymentReference" }, "account_move_payment_reference_index"), new[] { "gin_trgm_ops" });

                    b.HasIndex(new[] { "ReversedEntryId" }, "account_move_reversed_entry_id_index")
                        .HasDatabaseName("account_move_reversed_entry_id_index")
                        .HasFilter("(reversed_entry_id IS NOT NULL)");

                    b.HasIndex(new[] { "JournalId", "SequencePrefix", "SequenceNumber", "Name" }, "account_move_sequence_index")
                        .IsDescending(false, true, true, false)
                        .HasDatabaseName("account_move_sequence_index");

                    b.HasIndex(new[] { "JournalId", "Id", "SequencePrefix" }, "account_move_sequence_index2")
                        .IsDescending(false, true, false)
                        .HasDatabaseName("account_move_sequence_index2");

                    b.HasIndex(new[] { "StockMoveId" }, "account_move_stock_move_id_index")
                        .HasDatabaseName("account_move_stock_move_id_index")
                        .HasFilter("(stock_move_id IS NOT NULL)");

                    b.HasIndex(new[] { "TaxCashBasisOriginMoveId" }, "account_move_tax_cash_basis_origin_move_id_index")
                        .HasDatabaseName("account_move_tax_cash_basis_origin_move_id_index")
                        .HasFilter("(tax_cash_basis_origin_move_id IS NOT NULL)");

                    b.HasIndex(new[] { "JournalId" }, "account_move_to_check_idx")
                        .HasDatabaseName("account_move_to_check_idx")
                        .HasFilter("(to_check = true)");

                    b.ToTable("account_move", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountMoveLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<Guid?>("AccountRootId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_root_id");

                    b.Property<decimal?>("AmountCurrency")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_currency");

                    b.Property<decimal?>("AmountResidual")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_residual");

                    b.Property<decimal?>("AmountResidualCurrency")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_residual_currency");

                    b.Property<string>("AnalyticDistribution")
                        .HasColumnType("jsonb")
                        .HasColumnName("analytic_distribution");

                    b.Property<Guid?>("AssetCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("asset_category_id");

                    b.Property<DateTime?>("AssetEndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("asset_end_date");

                    b.Property<double?>("AssetMrr")
                        .HasColumnType("double precision")
                        .HasColumnName("asset_mrr");

                    b.Property<DateTime?>("AssetStartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("asset_start_date");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<bool?>("Blocked")
                        .HasColumnType("boolean")
                        .HasColumnName("blocked");

                    b.Property<long?>("CompanyCurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_currency_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<decimal?>("Credit")
                        .HasColumnType("numeric")
                        .HasColumnName("credit");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DateMaturity")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_maturity");

                    b.Property<decimal?>("Debit")
                        .HasColumnType("numeric")
                        .HasColumnName("debit");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric")
                        .HasColumnName("discount");

                    b.Property<decimal?>("DiscountAmountCurrency")
                        .HasColumnType("numeric")
                        .HasColumnName("discount_amount_currency");

                    b.Property<decimal?>("DiscountBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("discount_balance");

                    b.Property<DateTime?>("DiscountDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("discount_date");

                    b.Property<double?>("DiscountPercentage")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_percentage");

                    b.Property<string>("DisplayType")
                        .HasColumnType("text")
                        .HasColumnName("display_type");

                    b.Property<Guid?>("ExpenseId")
                        .HasColumnType("uuid")
                        .HasColumnName("expense_id");

                    b.Property<DateTime?>("FollowupDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("followup_date");

                    b.Property<Guid?>("FollowupLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("followup_line_id");

                    b.Property<Guid?>("FullReconcileId")
                        .HasColumnType("uuid")
                        .HasColumnName("full_reconcile_id");

                    b.Property<Guid?>("GroupTaxId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_tax_id");

                    b.Property<bool?>("IsDownpayment")
                        .HasColumnType("boolean")
                        .HasColumnName("is_downpayment");

                    b.Property<Guid?>("JournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("journal_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("MatchingNumber")
                        .HasColumnType("text")
                        .HasColumnName("matching_number");

                    b.Property<Guid?>("MoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("move_id");

                    b.Property<string>("MoveName")
                        .HasColumnType("text")
                        .HasColumnName("move_name");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ParentState")
                        .HasColumnType("text")
                        .HasColumnName("parent_state");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<decimal?>("PriceSubtotal")
                        .HasColumnType("numeric")
                        .HasColumnName("price_subtotal");

                    b.Property<decimal?>("PriceTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("price_total");

                    b.Property<decimal?>("PriceUnit")
                        .HasColumnType("numeric")
                        .HasColumnName("price_unit");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ProductUomId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_uom_id");

                    b.Property<Guid?>("PurchaseLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("purchase_line_id");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("ReconcileModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("reconcile_model_id");

                    b.Property<bool?>("Reconciled")
                        .HasColumnType("boolean")
                        .HasColumnName("reconciled");

                    b.Property<string>("Ref")
                        .HasColumnType("text")
                        .HasColumnName("ref");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("StatementId")
                        .HasColumnType("uuid")
                        .HasColumnName("statement_id");

                    b.Property<Guid?>("StatementLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("statement_line_id");

                    b.Property<string>("TaxAudit")
                        .HasColumnType("text")
                        .HasColumnName("tax_audit");

                    b.Property<decimal?>("TaxBaseAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("tax_base_amount");

                    b.Property<Guid?>("TaxGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("tax_group_id");

                    b.Property<Guid?>("TaxLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("tax_line_id");

                    b.Property<Guid?>("TaxRepartitionLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("tax_repartition_line_id");

                    b.Property<bool?>("TaxTagInvert")
                        .HasColumnType("boolean")
                        .HasColumnName("tax_tag_invert");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("account_move_line_pkey");

                    b.HasIndex("AssetCategoryId");

                    b.HasIndex("CompanyCurrencyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("FollowupLineId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductUomId");

                    b.HasIndex("ReconcileModelId");

                    b.HasIndex("TaxGroupId");

                    b.HasIndex("TaxLineId");

                    b.HasIndex("TaxRepartitionLineId");

                    b.HasIndex(new[] { "AccountId" }, "account_move_line_account_id_index")
                        .HasDatabaseName("account_move_line_account_id_index");

                    b.HasIndex(new[] { "TenantId" }, "account_move_line_company_id_index")
                        .HasDatabaseName("account_move_line_company_id_index");

                    b.HasIndex(new[] { "DateMaturity" }, "account_move_line_date_maturity_index")
                        .HasDatabaseName("account_move_line_date_maturity_index");

                    b.HasIndex(new[] { "Date", "MoveName", "Id" }, "account_move_line_date_name_id_idx")
                        .IsDescending(true, true, false)
                        .HasDatabaseName("account_move_line_date_name_id_idx");

                    b.HasIndex(new[] { "FullReconcileId" }, "account_move_line_full_reconcile_id_index")
                        .HasDatabaseName("account_move_line_full_reconcile_id_index")
                        .HasFilter("(full_reconcile_id IS NOT NULL)");

                    b.HasIndex(new[] { "GroupTaxId" }, "account_move_line_group_tax_id_index")
                        .HasDatabaseName("account_move_line_group_tax_id_index")
                        .HasFilter("(group_tax_id IS NOT NULL)");

                    b.HasIndex(new[] { "JournalId" }, "account_move_line_journal_id_index")
                        .HasDatabaseName("account_move_line_journal_id_index");

                    b.HasIndex(new[] { "MoveId" }, "account_move_line_move_id_index")
                        .HasDatabaseName("account_move_line_move_id_index");

                    b.HasIndex(new[] { "MoveName" }, "account_move_line_move_name_index")
                        .HasDatabaseName("account_move_line_move_name_index");

                    b.HasIndex(new[] { "PartnerId", "Ref" }, "account_move_line_partner_id_ref_idx")
                        .HasDatabaseName("account_move_line_partner_id_ref_idx");

                    b.HasIndex(new[] { "PaymentId" }, "account_move_line_payment_id_index")
                        .HasDatabaseName("account_move_line_payment_id_index")
                        .HasFilter("(payment_id IS NOT NULL)");

                    b.HasIndex(new[] { "PurchaseLineId" }, "account_move_line_purchase_line_id_index")
                        .HasDatabaseName("account_move_line_purchase_line_id_index")
                        .HasFilter("(purchase_line_id IS NOT NULL)");

                    b.HasIndex(new[] { "Ref" }, "account_move_line_ref_index")
                        .HasDatabaseName("account_move_line_ref_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "Ref" }, "account_move_line_ref_index"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Ref" }, "account_move_line_ref_index"), new[] { "gin_trgm_ops" });

                    b.HasIndex(new[] { "StatementId" }, "account_move_line_statement_id_index")
                        .HasDatabaseName("account_move_line_statement_id_index")
                        .HasFilter("(statement_id IS NOT NULL)");

                    b.HasIndex(new[] { "StatementLineId" }, "account_move_line_statement_line_id_index")
                        .HasDatabaseName("account_move_line_statement_line_id_index")
                        .HasFilter("(statement_line_id IS NOT NULL)");

                    b.HasIndex(new[] { "VehicleId" }, "account_move_line_vehicle_id_index")
                        .HasDatabaseName("account_move_line_vehicle_id_index")
                        .HasFilter("(vehicle_id IS NOT NULL)");

                    b.ToTable("account_move_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountMoveReversal", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("DateMode")
                        .HasColumnType("text")
                        .HasColumnName("date_mode");

                    b.Property<Guid?>("JournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("journal_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<string>("RefundMethod")
                        .HasColumnType("text")
                        .HasColumnName("refund_method");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_move_reversal_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("JournalId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("account_move_reversal", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountPartialReconcile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<decimal?>("CreditAmountCurrency")
                        .HasColumnType("numeric")
                        .HasColumnName("credit_amount_currency");

                    b.Property<long?>("CreditCurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("credit_currency_id");

                    b.Property<Guid?>("CreditMoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("credit_move_id");

                    b.Property<decimal?>("DebitAmountCurrency")
                        .HasColumnType("numeric")
                        .HasColumnName("debit_amount_currency");

                    b.Property<long?>("DebitCurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("debit_currency_id");

                    b.Property<Guid?>("DebitMoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("debit_move_id");

                    b.Property<Guid?>("ExchangeMoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("exchange_move_id");

                    b.Property<Guid?>("FullReconcileId")
                        .HasColumnType("uuid")
                        .HasColumnName("full_reconcile_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<DateTime?>("MaxDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("max_date");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_partial_reconcile_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CreditCurrencyId");

                    b.HasIndex("DebitCurrencyId");

                    b.HasIndex("ExchangeMoveId");

                    b.HasIndex("FullReconcileId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "CreditMoveId" }, "account_partial_reconcile_credit_move_id_index")
                        .HasDatabaseName("account_partial_reconcile_credit_move_id_index");

                    b.HasIndex(new[] { "DebitMoveId" }, "account_partial_reconcile_debit_move_id_index")
                        .HasDatabaseName("account_partial_reconcile_debit_move_id_index");

                    b.ToTable("account_partial_reconcile", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<decimal?>("AmountCompanyCurrencySigned")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_company_currency_signed");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<Guid?>("DestinationAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("destination_account_id");

                    b.Property<Guid?>("DestinationJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("destination_journal_id");

                    b.Property<Guid?>("ForceOutstandingAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("force_outstanding_account_id");

                    b.Property<bool?>("IsInternalTransfer")
                        .HasColumnType("boolean")
                        .HasColumnName("is_internal_transfer");

                    b.Property<bool?>("IsMatched")
                        .HasColumnType("boolean")
                        .HasColumnName("is_matched");

                    b.Property<bool?>("IsReconciled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_reconciled");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<Guid?>("MoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("move_id");

                    b.Property<Guid?>("OutstandingAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("outstanding_account_id");

                    b.Property<Guid?>("PairedInternalTransferPaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("paired_internal_transfer_payment_id");

                    b.Property<Guid?>("PartnerBankId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_bank_id");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<string>("PartnerType")
                        .HasColumnType("text")
                        .HasColumnName("partner_type");

                    b.Property<Guid?>("PaymentMethodId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_method_id");

                    b.Property<Guid?>("PaymentMethodLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_method_line_id");

                    b.Property<string>("PaymentReference")
                        .HasColumnType("text")
                        .HasColumnName("payment_reference");

                    b.Property<Guid?>("PaymentTokenId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_token_id");

                    b.Property<Guid?>("PaymentTransactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_transaction_id");

                    b.Property<string>("PaymentType")
                        .HasColumnType("text")
                        .HasColumnName("payment_type");

                    b.Property<Guid?>("PosPaymentMethodId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_payment_method_id");

                    b.Property<Guid?>("PosSessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_session_id");

                    b.Property<Guid?>("SourcePaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_payment_id");

                    b.HasKey("Id")
                        .HasName("account_payment_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DestinationAccountId");

                    b.HasIndex("DestinationJournalId");

                    b.HasIndex("ForceOutstandingAccountId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("MoveId");

                    b.HasIndex("OutstandingAccountId");

                    b.HasIndex("PairedInternalTransferPaymentId");

                    b.HasIndex("PartnerBankId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PaymentMethodLineId");

                    b.HasIndex("PaymentTokenId");

                    b.HasIndex("PaymentTransactionId");

                    b.HasIndex("PosPaymentMethodId");

                    b.HasIndex("PosSessionId");

                    b.HasIndex("SourcePaymentId");

                    b.ToTable("account_payment", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountPaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("PaymentType")
                        .HasColumnType("text")
                        .HasColumnName("payment_type");

                    b.HasKey("Id")
                        .HasName("account_payment_method_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Code", "PaymentType" }, "account_payment_method_name_code_unique")
                        .IsUnique()
                        .HasDatabaseName("account_payment_method_name_code_unique");

                    b.ToTable("account_payment_method", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountPaymentMethodLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("JournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("journal_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("PaymentAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_account_id");

                    b.Property<Guid?>("PaymentMethodId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_method_id");

                    b.Property<Guid?>("PaymentProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_provider_id");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.HasKey("Id")
                        .HasName("account_payment_method_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("JournalId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PaymentAccountId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PaymentProviderId");

                    b.ToTable("account_payment_method_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountPaymentRegister", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<bool?>("CanEditWizard")
                        .HasColumnType("boolean")
                        .HasColumnName("can_edit_wizard");

                    b.Property<bool?>("CanGroupPayments")
                        .HasColumnType("boolean")
                        .HasColumnName("can_group_payments");

                    b.Property<string>("Communication")
                        .HasColumnType("text")
                        .HasColumnName("communication");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<bool?>("GroupPayment")
                        .HasColumnType("boolean")
                        .HasColumnName("group_payment");

                    b.Property<Guid?>("JournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("journal_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("PartnerBankId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_bank_id");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<string>("PartnerType")
                        .HasColumnType("text")
                        .HasColumnName("partner_type");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentDifferenceHandling")
                        .HasColumnType("text")
                        .HasColumnName("payment_difference_handling");

                    b.Property<Guid?>("PaymentMethodLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_method_line_id");

                    b.Property<Guid?>("PaymentTokenId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_token_id");

                    b.Property<string>("PaymentType")
                        .HasColumnType("text")
                        .HasColumnName("payment_type");

                    b.Property<decimal?>("SourceAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("source_amount");

                    b.Property<decimal?>("SourceAmountCurrency")
                        .HasColumnType("numeric")
                        .HasColumnName("source_amount_currency");

                    b.Property<long?>("SourceCurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("source_currency_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("WriteoffAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("writeoff_account_id");

                    b.Property<string>("WriteoffLabel")
                        .HasColumnType("text")
                        .HasColumnName("writeoff_label");

                    b.HasKey("Id")
                        .HasName("account_payment_register_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("JournalId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PartnerBankId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PaymentMethodLineId");

                    b.HasIndex("PaymentTokenId");

                    b.HasIndex("SourceCurrencyId");

                    b.HasIndex("TenantId");

                    b.HasIndex("WriteoffAccountId");

                    b.ToTable("account_payment_register", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountPaymentTerm", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("DisplayOnInvoice")
                        .HasColumnType("boolean")
                        .HasColumnName("display_on_invoice");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("jsonb")
                        .HasColumnName("note");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_payment_term_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("account_payment_term", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountPaymentTermLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("Days")
                        .HasColumnType("bigint")
                        .HasColumnName("days");

                    b.Property<long?>("DaysAfter")
                        .HasColumnType("bigint")
                        .HasColumnName("days_after");

                    b.Property<long?>("DiscountDays")
                        .HasColumnType("bigint")
                        .HasColumnName("discount_days");

                    b.Property<double?>("DiscountPercentage")
                        .HasColumnType("double precision")
                        .HasColumnName("discount_percentage");

                    b.Property<bool?>("EndMonth")
                        .HasColumnType("boolean")
                        .HasColumnName("end_month");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("Months")
                        .HasColumnType("bigint")
                        .HasColumnName("months");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.Property<decimal?>("ValueAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("value_amount");

                    b.HasKey("Id")
                        .HasName("account_payment_term_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "PaymentId" }, "account_payment_term_line_payment_id_index")
                        .HasDatabaseName("account_payment_term_line_payment_id_index");

                    b.ToTable("account_payment_term_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountPrintJournal", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("AmountCurrency")
                        .HasColumnType("boolean")
                        .HasColumnName("amount_currency");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("SortSelection")
                        .HasColumnType("text")
                        .HasColumnName("sort_selection");

                    b.Property<string>("TargetMove")
                        .HasColumnType("text")
                        .HasColumnName("target_move");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_print_journal_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("account_print_journal", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReconcileModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<bool?>("AllowPaymentTolerance")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_payment_tolerance");

                    b.Property<bool?>("AutoReconcile")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_reconcile");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("DecimalSeparator")
                        .HasColumnType("text")
                        .HasColumnName("decimal_separator");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("MatchAmount")
                        .HasColumnType("text")
                        .HasColumnName("match_amount");

                    b.Property<double?>("MatchAmountMax")
                        .HasColumnType("double precision")
                        .HasColumnName("match_amount_max");

                    b.Property<double?>("MatchAmountMin")
                        .HasColumnType("double precision")
                        .HasColumnName("match_amount_min");

                    b.Property<string>("MatchLabel")
                        .HasColumnType("text")
                        .HasColumnName("match_label");

                    b.Property<string>("MatchLabelParam")
                        .HasColumnType("text")
                        .HasColumnName("match_label_param");

                    b.Property<string>("MatchNature")
                        .HasColumnType("text")
                        .HasColumnName("match_nature");

                    b.Property<string>("MatchNote")
                        .HasColumnType("text")
                        .HasColumnName("match_note");

                    b.Property<string>("MatchNoteParam")
                        .HasColumnType("text")
                        .HasColumnName("match_note_param");

                    b.Property<bool?>("MatchPartner")
                        .HasColumnType("boolean")
                        .HasColumnName("match_partner");

                    b.Property<bool?>("MatchSameCurrency")
                        .HasColumnType("boolean")
                        .HasColumnName("match_same_currency");

                    b.Property<bool?>("MatchTextLocationLabel")
                        .HasColumnType("boolean")
                        .HasColumnName("match_text_location_label");

                    b.Property<bool?>("MatchTextLocationNote")
                        .HasColumnType("boolean")
                        .HasColumnName("match_text_location_note");

                    b.Property<bool?>("MatchTextLocationReference")
                        .HasColumnType("boolean")
                        .HasColumnName("match_text_location_reference");

                    b.Property<string>("MatchTransactionType")
                        .HasColumnType("text")
                        .HasColumnName("match_transaction_type");

                    b.Property<string>("MatchTransactionTypeParam")
                        .HasColumnType("text")
                        .HasColumnName("match_transaction_type_param");

                    b.Property<string>("MatchingOrder")
                        .HasColumnType("text")
                        .HasColumnName("matching_order");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("PastMonthsLimit")
                        .HasColumnType("bigint")
                        .HasColumnName("past_months_limit");

                    b.Property<double?>("PaymentToleranceParam")
                        .HasColumnType("double precision")
                        .HasColumnName("payment_tolerance_param");

                    b.Property<string>("PaymentToleranceType")
                        .HasColumnType("text")
                        .HasColumnName("payment_tolerance_type");

                    b.Property<string>("RuleType")
                        .HasColumnType("text")
                        .HasColumnName("rule_type");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<bool?>("ToCheck")
                        .HasColumnType("boolean")
                        .HasColumnName("to_check");

                    b.HasKey("Id")
                        .HasName("account_reconcile_model_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "Name", "TenantId" }, "account_reconcile_model_name_unique")
                        .IsUnique()
                        .HasDatabaseName("account_reconcile_model_name_unique");

                    b.ToTable("account_reconcile_model", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReconcileModelLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<string>("AmountString")
                        .HasColumnType("text")
                        .HasColumnName("amount_string");

                    b.Property<string>("AmountType")
                        .HasColumnType("text")
                        .HasColumnName("amount_type");

                    b.Property<string>("AnalyticDistribution")
                        .HasColumnType("jsonb")
                        .HasColumnName("analytic_distribution");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("ForceTaxIncluded")
                        .HasColumnType("boolean")
                        .HasColumnName("force_tax_included");

                    b.Property<Guid?>("JournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("journal_id");

                    b.Property<string>("Label")
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("model_id");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_reconcile_model_line_pkey");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("JournalId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ModelId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "AnalyticDistribution" }, "account_reconcile_model_line_analytic_distribution_gin_index")
                        .HasDatabaseName("account_reconcile_model_line_analytic_distribution_gin_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "AnalyticDistribution" }, "account_reconcile_model_line_analytic_distribution_gin_index"), "gin");

                    b.ToTable("account_reconcile_model_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReconcileModelLineTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<string>("AmountString")
                        .HasColumnType("text")
                        .HasColumnName("amount_string");

                    b.Property<string>("AmountType")
                        .HasColumnType("text")
                        .HasColumnName("amount_type");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("ForceTaxIncluded")
                        .HasColumnType("boolean")
                        .HasColumnName("force_tax_included");

                    b.Property<string>("Label")
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("model_id");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.HasKey("Id")
                        .HasName("account_reconcile_model_line_template_pkey");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ModelId");

                    b.ToTable("account_reconcile_model_line_template", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReconcileModelPartnerMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("model_id");

                    b.Property<string>("NarrationRegex")
                        .HasColumnType("text")
                        .HasColumnName("narration_regex");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<string>("PaymentRefRegex")
                        .HasColumnType("text")
                        .HasColumnName("payment_ref_regex");

                    b.HasKey("Id")
                        .HasName("account_reconcile_model_partner_mapping_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ModelId");

                    b.HasIndex("PartnerId");

                    b.ToTable("account_reconcile_model_partner_mapping", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReconcileModelTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("AllowPaymentTolerance")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_payment_tolerance");

                    b.Property<bool?>("AutoReconcile")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_reconcile");

                    b.Property<Guid?>("ChartTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("chart_template_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("DecimalSeparator")
                        .HasColumnType("text")
                        .HasColumnName("decimal_separator");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("MatchAmount")
                        .HasColumnType("text")
                        .HasColumnName("match_amount");

                    b.Property<double?>("MatchAmountMax")
                        .HasColumnType("double precision")
                        .HasColumnName("match_amount_max");

                    b.Property<double?>("MatchAmountMin")
                        .HasColumnType("double precision")
                        .HasColumnName("match_amount_min");

                    b.Property<string>("MatchLabel")
                        .HasColumnType("text")
                        .HasColumnName("match_label");

                    b.Property<string>("MatchLabelParam")
                        .HasColumnType("text")
                        .HasColumnName("match_label_param");

                    b.Property<string>("MatchNature")
                        .HasColumnType("text")
                        .HasColumnName("match_nature");

                    b.Property<string>("MatchNote")
                        .HasColumnType("text")
                        .HasColumnName("match_note");

                    b.Property<string>("MatchNoteParam")
                        .HasColumnType("text")
                        .HasColumnName("match_note_param");

                    b.Property<bool?>("MatchPartner")
                        .HasColumnType("boolean")
                        .HasColumnName("match_partner");

                    b.Property<bool?>("MatchSameCurrency")
                        .HasColumnType("boolean")
                        .HasColumnName("match_same_currency");

                    b.Property<bool?>("MatchTextLocationLabel")
                        .HasColumnType("boolean")
                        .HasColumnName("match_text_location_label");

                    b.Property<bool?>("MatchTextLocationNote")
                        .HasColumnType("boolean")
                        .HasColumnName("match_text_location_note");

                    b.Property<bool?>("MatchTextLocationReference")
                        .HasColumnType("boolean")
                        .HasColumnName("match_text_location_reference");

                    b.Property<string>("MatchTransactionType")
                        .HasColumnType("text")
                        .HasColumnName("match_transaction_type");

                    b.Property<string>("MatchTransactionTypeParam")
                        .HasColumnType("text")
                        .HasColumnName("match_transaction_type_param");

                    b.Property<string>("MatchingOrder")
                        .HasColumnType("text")
                        .HasColumnName("matching_order");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double?>("PaymentToleranceParam")
                        .HasColumnType("double precision")
                        .HasColumnName("payment_tolerance_param");

                    b.Property<string>("PaymentToleranceType")
                        .HasColumnType("text")
                        .HasColumnName("payment_tolerance_type");

                    b.Property<string>("RuleType")
                        .HasColumnType("text")
                        .HasColumnName("rule_type");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<bool?>("ToCheck")
                        .HasColumnType("boolean")
                        .HasColumnName("to_check");

                    b.HasKey("Id")
                        .HasName("account_reconcile_model_template_pkey");

                    b.HasIndex("ChartTemplateId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("account_reconcile_model_template", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountRecurringTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("JournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("journal_id");

                    b.Property<string>("JournalState")
                        .HasColumnType("text")
                        .HasColumnName("journal_state");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("RecurringInterval")
                        .HasColumnType("bigint")
                        .HasColumnName("recurring_interval");

                    b.Property<string>("RecurringPeriod")
                        .HasColumnType("text")
                        .HasColumnName("recurring_period");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_recurring_template_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("JournalId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("account_recurring_template", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AvailabilityCondition")
                        .HasColumnType("text")
                        .HasColumnName("availability_condition");

                    b.Property<Guid?>("ChartTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("chart_template_id");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("DefaultOpeningDateFilter")
                        .HasColumnType("text")
                        .HasColumnName("default_opening_date_filter");

                    b.Property<bool?>("FilterAccountType")
                        .HasColumnType("boolean")
                        .HasColumnName("filter_account_type");

                    b.Property<bool?>("FilterAnalytic")
                        .HasColumnType("boolean")
                        .HasColumnName("filter_analytic");

                    b.Property<bool?>("FilterDateRange")
                        .HasColumnType("boolean")
                        .HasColumnName("filter_date_range");

                    b.Property<bool?>("FilterFiscalPosition")
                        .HasColumnType("boolean")
                        .HasColumnName("filter_fiscal_position");

                    b.Property<bool?>("FilterGrowthComparison")
                        .HasColumnType("boolean")
                        .HasColumnName("filter_growth_comparison");

                    b.Property<string>("FilterHierarchy")
                        .HasColumnType("text")
                        .HasColumnName("filter_hierarchy");

                    b.Property<bool?>("FilterJournals")
                        .HasColumnType("boolean")
                        .HasColumnName("filter_journals");

                    b.Property<string>("FilterMultiCompany")
                        .HasColumnType("text")
                        .HasColumnName("filter_multi_company");

                    b.Property<bool?>("FilterPartner")
                        .HasColumnType("boolean")
                        .HasColumnName("filter_partner");

                    b.Property<bool?>("FilterPeriodComparison")
                        .HasColumnType("boolean")
                        .HasColumnName("filter_period_comparison");

                    b.Property<bool?>("FilterShowDraft")
                        .HasColumnType("boolean")
                        .HasColumnName("filter_show_draft");

                    b.Property<bool?>("FilterUnfoldAll")
                        .HasColumnType("boolean")
                        .HasColumnName("filter_unfold_all");

                    b.Property<bool?>("FilterUnreconciled")
                        .HasColumnType("boolean")
                        .HasColumnName("filter_unreconciled");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("LoadMoreLimit")
                        .HasColumnType("bigint")
                        .HasColumnName("load_more_limit");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<bool?>("OnlyTaxExigible")
                        .HasColumnType("boolean")
                        .HasColumnName("only_tax_exigible");

                    b.Property<Guid?>("RootReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("root_report_id");

                    b.Property<bool?>("SearchBar")
                        .HasColumnType("boolean")
                        .HasColumnName("search_bar");

                    b.HasKey("Id")
                        .HasName("account_report_pkey");

                    b.HasIndex("ChartTemplateId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("RootReportId");

                    b.ToTable("account_report", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReportColumn", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("BlankIfZero")
                        .HasColumnType("boolean")
                        .HasColumnName("blank_if_zero");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("CustomAuditActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("custom_audit_action_id");

                    b.Property<string>("ExpressionLabel")
                        .HasColumnType("text")
                        .HasColumnName("expression_label");

                    b.Property<string>("FigureType")
                        .HasColumnType("text")
                        .HasColumnName("figure_type");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("report_id");

                    b.Property<long?>("Sequence")
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    b.Property<bool?>("Sortable")
                        .HasColumnType("boolean")
                        .HasColumnName("sortable");

                    b.HasKey("Id")
                        .HasName("account_report_column_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomAuditActionId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ReportId");

                    b.ToTable("account_report_column", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReportExpression", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Auditable")
                        .HasColumnType("boolean")
                        .HasColumnName("auditable");

                    b.Property<bool?>("BlankIfZero")
                        .HasColumnType("boolean")
                        .HasColumnName("blank_if_zero");

                    b.Property<string>("CarryoverTarget")
                        .HasColumnType("text")
                        .HasColumnName("carryover_target");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("DateScope")
                        .HasColumnType("text")
                        .HasColumnName("date_scope");

                    b.Property<string>("Engine")
                        .HasColumnType("text")
                        .HasColumnName("engine");

                    b.Property<string>("FigureType")
                        .HasColumnType("text")
                        .HasColumnName("figure_type");

                    b.Property<string>("Formula")
                        .HasColumnType("text")
                        .HasColumnName("formula");

                    b.Property<bool?>("GreenOnPositive")
                        .HasColumnType("boolean")
                        .HasColumnName("green_on_positive");

                    b.Property<string>("Label")
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ReportLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("report_line_id");

                    b.Property<string>("Subformula")
                        .HasColumnType("text")
                        .HasColumnName("subformula");

                    b.HasKey("Id")
                        .HasName("account_report_expression_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ReportLineId");

                    b.ToTable("account_report_expression", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReportExternalValue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("CarryoverOriginExpressionLabel")
                        .HasColumnType("text")
                        .HasColumnName("carryover_origin_expression_label");

                    b.Property<Guid?>("CarryoverOriginReportLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("carryover_origin_report_line_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<Guid?>("ForeignVatFiscalPositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("foreign_vat_fiscal_position_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("TargetReportExpressionId")
                        .HasColumnType("uuid")
                        .HasColumnName("target_report_expression_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<double?>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("account_report_external_value_pkey");

                    b.HasIndex("CarryoverOriginReportLineId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ForeignVatFiscalPositionId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TargetReportExpressionId");

                    b.HasIndex("TenantId");

                    b.ToTable("account_report_external_value", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReportGeneralLedger", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to");

                    b.Property<string>("DisplayAccount")
                        .HasColumnType("text")
                        .HasColumnName("display_account");

                    b.Property<bool?>("InitialBalance")
                        .HasColumnType("boolean")
                        .HasColumnName("initial_balance");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Sortby")
                        .HasColumnType("text")
                        .HasColumnName("sortby");

                    b.Property<string>("TargetMove")
                        .HasColumnType("text")
                        .HasColumnName("target_move");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_report_general_ledger_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("account_report_general_ledger", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReportLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("ActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("action_id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("Foldable")
                        .HasColumnType("boolean")
                        .HasColumnName("foldable");

                    b.Property<string>("Groupby")
                        .HasColumnType("text")
                        .HasColumnName("groupby");

                    b.Property<bool?>("HideIfZero")
                        .HasColumnType("boolean")
                        .HasColumnName("hide_if_zero");

                    b.Property<long?>("HierarchyLevel")
                        .HasColumnType("bigint")
                        .HasColumnName("hierarchy_level");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<bool?>("PrintOnNewPage")
                        .HasColumnType("boolean")
                        .HasColumnName("print_on_new_page");

                    b.Property<Guid?>("ReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("report_id");

                    b.Property<long?>("Sequence")
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    b.HasKey("Id")
                        .HasName("account_report_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ReportId");

                    b.HasIndex(new[] { "Code" }, "account_report_line_code_uniq")
                        .IsUnique()
                        .HasDatabaseName("account_report_line_code_uniq");

                    b.ToTable("account_report_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReportPartnerLedger", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("AmountCurrency")
                        .HasColumnType("boolean")
                        .HasColumnName("amount_currency");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<bool?>("Reconciled")
                        .HasColumnType("boolean")
                        .HasColumnName("reconciled");

                    b.Property<string>("ResultSelection")
                        .HasColumnType("text")
                        .HasColumnName("result_selection");

                    b.Property<string>("TargetMove")
                        .HasColumnType("text")
                        .HasColumnName("target_move");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_report_partner_ledger_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("account_report_partner_ledger", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountResequenceWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("FirstDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("first_date");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Ordering")
                        .HasColumnType("text")
                        .HasColumnName("ordering");

                    b.HasKey("Id")
                        .HasName("account_resequence_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("account_resequence_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountSetupBankManualConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("NewJournalName")
                        .HasColumnType("text")
                        .HasColumnName("new_journal_name");

                    b.Property<long?>("NumJournalsWithoutAccount")
                        .HasColumnType("bigint")
                        .HasColumnName("num_journals_without_account");

                    b.Property<Guid?>("ResPartnerBankId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_partner_bank_id");

                    b.HasKey("Id")
                        .HasName("account_setup_bank_manual_config_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ResPartnerBankId");

                    b.ToTable("account_setup_bank_manual_config", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountTax", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("AmountType")
                        .HasColumnType("text")
                        .HasColumnName("amount_type");

                    b.Property<bool?>("Analytic")
                        .HasColumnType("boolean")
                        .HasColumnName("analytic");

                    b.Property<Guid?>("CashBasisTransitionAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("cash_basis_transition_account_id");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Description")
                        .HasColumnType("jsonb")
                        .HasColumnName("description");

                    b.Property<bool?>("IncludeBaseAmount")
                        .HasColumnType("boolean")
                        .HasColumnName("include_base_amount");

                    b.Property<bool?>("IsBaseAffected")
                        .HasColumnType("boolean")
                        .HasColumnName("is_base_affected");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<bool?>("PriceInclude")
                        .HasColumnType("boolean")
                        .HasColumnName("price_include");

                    b.Property<double?>("RealAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("real_amount");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<string>("TaxExigibility")
                        .HasColumnType("text")
                        .HasColumnName("tax_exigibility");

                    b.Property<Guid?>("TaxGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("tax_group_id");

                    b.Property<string>("TaxScope")
                        .HasColumnType("text")
                        .HasColumnName("tax_scope");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("TypeTaxUse")
                        .HasColumnType("text")
                        .HasColumnName("type_tax_use");

                    b.HasKey("Id")
                        .HasName("account_tax_pkey");

                    b.HasIndex("CashBasisTransitionAccountId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TaxGroupId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "Name", "TenantId", "TypeTaxUse", "TaxScope" }, "account_tax_name_company_uniq")
                        .IsUnique()
                        .HasDatabaseName("account_tax_name_company_uniq");

                    b.ToTable("account_tax", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountTaxGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("PrecedingSubtotal")
                        .HasColumnType("text")
                        .HasColumnName("preceding_subtotal");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.HasKey("Id")
                        .HasName("account_tax_group_pkey");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("account_tax_group", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountTaxRepartitionLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<double?>("FactorPercent")
                        .HasColumnType("double precision")
                        .HasColumnName("factor_percent");

                    b.Property<Guid?>("InvoiceTaxId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_tax_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("RefundTaxId")
                        .HasColumnType("uuid")
                        .HasColumnName("refund_tax_id");

                    b.Property<string>("RepartitionType")
                        .HasColumnType("text")
                        .HasColumnName("repartition_type");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<bool?>("UseInTaxClosing")
                        .HasColumnType("boolean")
                        .HasColumnName("use_in_tax_closing");

                    b.HasKey("Id")
                        .HasName("account_tax_repartition_line_pkey");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("InvoiceTaxId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("RefundTaxId");

                    b.HasIndex("TenantId");

                    b.ToTable("account_tax_repartition_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountTaxRepartitionLineTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<double?>("FactorPercent")
                        .HasColumnType("double precision")
                        .HasColumnName("factor_percent");

                    b.Property<Guid?>("InvoiceTaxId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_tax_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("RefundTaxId")
                        .HasColumnType("uuid")
                        .HasColumnName("refund_tax_id");

                    b.Property<string>("RepartitionType")
                        .HasColumnType("text")
                        .HasColumnName("repartition_type");

                    b.Property<bool?>("UseInTaxClosing")
                        .HasColumnType("boolean")
                        .HasColumnName("use_in_tax_closing");

                    b.HasKey("Id")
                        .HasName("account_tax_repartition_line_template_pkey");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("InvoiceTaxId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("RefundTaxId");

                    b.ToTable("account_tax_repartition_line_template", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountTaxReportWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("TargetMove")
                        .HasColumnType("text")
                        .HasColumnName("target_move");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("account_tax_report_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("account_tax_report_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountTaxTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("AmountType")
                        .HasColumnType("text")
                        .HasColumnName("amount_type");

                    b.Property<bool?>("Analytic")
                        .HasColumnType("boolean")
                        .HasColumnName("analytic");

                    b.Property<Guid?>("CashBasisTransitionAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("cash_basis_transition_account_id");

                    b.Property<Guid?>("ChartTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("chart_template_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Description")
                        .HasColumnType("jsonb")
                        .HasColumnName("description");

                    b.Property<bool?>("IncludeBaseAmount")
                        .HasColumnType("boolean")
                        .HasColumnName("include_base_amount");

                    b.Property<bool?>("IsBaseAffected")
                        .HasColumnType("boolean")
                        .HasColumnName("is_base_affected");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<bool?>("PriceInclude")
                        .HasColumnType("boolean")
                        .HasColumnName("price_include");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<string>("TaxExigibility")
                        .HasColumnType("text")
                        .HasColumnName("tax_exigibility");

                    b.Property<Guid?>("TaxGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("tax_group_id");

                    b.Property<string>("TaxScope")
                        .HasColumnType("text")
                        .HasColumnName("tax_scope");

                    b.Property<string>("TypeTaxUse")
                        .HasColumnType("text")
                        .HasColumnName("type_tax_use");

                    b.HasKey("Id")
                        .HasName("account_tax_template_pkey");

                    b.HasIndex("CashBasisTransitionAccountId");

                    b.HasIndex("ChartTemplateId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TaxGroupId");

                    b.HasIndex(new[] { "Name", "TypeTaxUse", "TaxScope", "ChartTemplateId" }, "account_tax_template_name_company_uniq")
                        .IsUnique()
                        .HasDatabaseName("account_tax_template_name_company_uniq");

                    b.ToTable("account_tax_template", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountTourUploadBill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Selection")
                        .HasColumnType("text")
                        .HasColumnName("selection");

                    b.HasKey("Id")
                        .HasName("account_tour_upload_bill_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("account_tour_upload_bill", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountTourUploadBillEmailConfirm", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("EmailAlias")
                        .HasColumnType("text")
                        .HasColumnName("email_alias");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("account_tour_upload_bill_email_confirm_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("account_tour_upload_bill_email_confirm", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountUnreconcile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("account_unreconcile_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("account_unreconcile", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountingReport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AccountReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_report_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateFromCmp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from_cmp");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("DateToCmp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to_cmp");

                    b.Property<bool?>("DebitCredit")
                        .HasColumnType("boolean")
                        .HasColumnName("debit_credit");

                    b.Property<bool?>("EnableFilter")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_filter");

                    b.Property<string>("FilterCmp")
                        .HasColumnType("text")
                        .HasColumnName("filter_cmp");

                    b.Property<string>("LabelFilter")
                        .HasColumnType("text")
                        .HasColumnName("label_filter");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("TargetMove")
                        .HasColumnType("text")
                        .HasColumnName("target_move");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("accounting_report_pkey");

                    b.HasIndex("AccountReportId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("accounting_report", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ApplicantGetRefuseReason", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("RefuseReasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("refuse_reason_id");

                    b.Property<bool?>("SendMail")
                        .HasColumnType("boolean")
                        .HasColumnName("send_mail");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.HasKey("Id")
                        .HasName("applicant_get_refuse_reason_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("RefuseReasonId");

                    b.HasIndex("TemplateId");

                    b.ToTable("applicant_get_refuse_reason", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ApplicantSendMail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Lang")
                        .HasColumnType("text")
                        .HasColumnName("lang");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.HasKey("Id")
                        .HasName("applicant_send_mail_pkey");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TemplateId");

                    b.ToTable("applicant_send_mail", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AssetDepreciationConfirmationWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("asset_depreciation_confirmation_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("asset_depreciation_confirmation_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AssetModify", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<DateTime?>("MethodEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("method_end");

                    b.Property<long?>("MethodNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("method_number");

                    b.Property<long?>("MethodPeriod")
                        .HasColumnType("bigint")
                        .HasColumnName("method_period");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("asset_modify_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("asset_modify", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AuthTotpDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("(now() AT TIME ZONE 'utc'::text)");

                    b.Property<string>("Index")
                        .HasColumnType("text")
                        .HasColumnName("index");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Scope")
                        .HasColumnType("text")
                        .HasColumnName("scope");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("auth_totp_device_pkey");

                    b.HasIndex(new[] { "UserId", "Index" }, "auth_totp_device_user_id_index_idx")
                        .HasDatabaseName("auth_totp_device_user_id_index_idx");

                    b.ToTable("auth_totp_device", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.AuthTotpWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<byte[]>("Qrcode")
                        .HasColumnType("bytea")
                        .HasColumnName("qrcode");

                    b.Property<string>("Secret")
                        .HasColumnType("text")
                        .HasColumnName("secret");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("auth_totp_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("UserId");

                    b.ToTable("auth_totp_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BarcodeNomenclature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Gs1SeparatorFnc1")
                        .HasColumnType("text")
                        .HasColumnName("gs1_separator_fnc1");

                    b.Property<bool?>("IsGs1Nomenclature")
                        .HasColumnType("boolean")
                        .HasColumnName("is_gs1_nomenclature");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("UpcEanConv")
                        .HasColumnType("text")
                        .HasColumnName("upc_ean_conv");

                    b.HasKey("Id")
                        .HasName("barcode_nomenclature_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("barcode_nomenclature", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BarcodeRule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Alias")
                        .HasColumnType("text")
                        .HasColumnName("alias");

                    b.Property<Guid?>("AssociatedUomId")
                        .HasColumnType("uuid")
                        .HasColumnName("associated_uom_id");

                    b.Property<long?>("BarcodeNomenclatureId")
                        .HasColumnType("bigint")
                        .HasColumnName("barcode_nomenclature_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Encoding")
                        .HasColumnType("text")
                        .HasColumnName("encoding");

                    b.Property<string>("Gs1ContentType")
                        .HasColumnType("text")
                        .HasColumnName("gs1_content_type");

                    b.Property<bool?>("Gs1DecimalUsage")
                        .HasColumnType("boolean")
                        .HasColumnName("gs1_decimal_usage");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Pattern")
                        .HasColumnType("text")
                        .HasColumnName("pattern");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("barcode_rule_pkey");

                    b.HasIndex("AssociatedUomId");

                    b.HasIndex("BarcodeNomenclatureId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("barcode_rule", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseDocumentLayout", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("ReportLayoutId")
                        .HasColumnType("bigint")
                        .HasColumnName("report_layout_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("base_document_layout_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ReportLayoutId");

                    b.HasIndex("TenantId");

                    b.ToTable("base_document_layout", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseEnableProfilingWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Duration")
                        .HasColumnType("text")
                        .HasColumnName("duration");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiration");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("base_enable_profiling_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("base_enable_profiling_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportImport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<byte[]>("File")
                        .HasColumnType("bytea")
                        .HasColumnName("file");

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .HasColumnType("text")
                        .HasColumnName("file_type");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("ResModel")
                        .HasColumnType("text")
                        .HasColumnName("res_model");

                    b.HasKey("Id")
                        .HasName("base_import_import_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("base_import_import", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("ColumnName")
                        .HasColumnType("text")
                        .HasColumnName("column_name");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("FieldName")
                        .HasColumnType("text")
                        .HasColumnName("field_name");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("ResModel")
                        .HasColumnType("text")
                        .HasColumnName("res_model");

                    b.HasKey("Id")
                        .HasName("base_import_mapping_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "ResModel" }, "base_import_mapping_res_model_index")
                        .HasDatabaseName("base_import_mapping_res_model_index");

                    b.ToTable("base_import_mapping", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsChar", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("base_import_tests_models_char_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("base_import_tests_models_char", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsCharNoreadonly", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("base_import_tests_models_char_noreadonly_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("base_import_tests_models_char_noreadonly", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsCharReadonly", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("base_import_tests_models_char_readonly_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("base_import_tests_models_char_readonly", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsCharRequired", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("base_import_tests_models_char_required_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("base_import_tests_models_char_required", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsCharState", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("base_import_tests_models_char_states_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("base_import_tests_models_char_states", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsCharStillreadonly", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("base_import_tests_models_char_stillreadonly_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("base_import_tests_models_char_stillreadonly", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsComplex", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("C")
                        .HasColumnType("text")
                        .HasColumnName("c");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("D")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("d");

                    b.Property<DateTime?>("Dt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dt");

                    b.Property<double?>("F")
                        .HasColumnType("double precision")
                        .HasColumnName("f");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<decimal?>("M")
                        .HasColumnType("numeric")
                        .HasColumnName("m");

                    b.HasKey("Id")
                        .HasName("base_import_tests_models_complex_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("base_import_tests_models_complex", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsFloat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<double?>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.Property<decimal?>("Value2")
                        .HasColumnType("numeric")
                        .HasColumnName("value2");

                    b.HasKey("Id")
                        .HasName("base_import_tests_models_float_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("base_import_tests_models_float", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsM2o", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("Value")
                        .HasColumnType("uuid")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("base_import_tests_models_m2o_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("Value");

                    b.ToTable("base_import_tests_models_m2o", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsM2oRelated", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("Value")
                        .HasColumnType("uuid")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("base_import_tests_models_m2o_related_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("base_import_tests_models_m2o_related", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsM2oRequired", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("Value")
                        .HasColumnType("uuid")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("base_import_tests_models_m2o_required_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("Value");

                    b.ToTable("base_import_tests_models_m2o_required", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsM2oRequiredRelated", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("Value")
                        .HasColumnType("uuid")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("base_import_tests_models_m2o_required_related_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("base_import_tests_models_m2o_required_related", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsO2m", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("base_import_tests_models_o2m_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("base_import_tests_models_o2m", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsO2mChild", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("Value")
                        .HasColumnType("uuid")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("base_import_tests_models_o2m_child_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ParentId");

                    b.ToTable("base_import_tests_models_o2m_child", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsPreview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("Othervalue")
                        .HasColumnType("uuid")
                        .HasColumnName("othervalue");

                    b.Property<Guid?>("Somevalue")
                        .HasColumnType("uuid")
                        .HasColumnName("somevalue");

                    b.HasKey("Id")
                        .HasName("base_import_tests_models_preview_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("base_import_tests_models_preview", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseLanguageExport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<byte[]>("Data")
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<string>("Format")
                        .HasColumnType("text")
                        .HasColumnName("format");

                    b.Property<string>("Lang")
                        .HasColumnType("text")
                        .HasColumnName("lang");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("base_language_export_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("base_language_export", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseLanguageImport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<byte[]>("Data")
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<string>("Filename")
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool?>("Overwrite")
                        .HasColumnType("boolean")
                        .HasColumnName("overwrite");

                    b.HasKey("Id")
                        .HasName("base_language_import_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("base_language_import", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseLanguageInstall", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<bool?>("Overwrite")
                        .HasColumnType("boolean")
                        .HasColumnName("overwrite");

                    b.HasKey("Id")
                        .HasName("base_language_install_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("base_language_install", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseModuleInstallRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("BodyHtml")
                        .HasColumnType("text")
                        .HasColumnName("body_html");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("module_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("base_module_install_request_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("UserId");

                    b.ToTable("base_module_install_request", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseModuleInstallReview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("module_id");

                    b.HasKey("Id")
                        .HasName("base_module_install_review_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ModuleId");

                    b.ToTable("base_module_install_review", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseModuleUninstall", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("module_id");

                    b.Property<bool?>("ShowAll")
                        .HasColumnType("boolean")
                        .HasColumnName("show_all");

                    b.HasKey("Id")
                        .HasName("base_module_uninstall_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ModuleId");

                    b.ToTable("base_module_uninstall", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseModuleUpdate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<long?>("Added")
                        .HasColumnType("bigint")
                        .HasColumnName("added");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<long?>("Updated")
                        .HasColumnType("bigint")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("base_module_update_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("base_module_update", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseModuleUpgrade", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("ModuleInfo")
                        .HasColumnType("text")
                        .HasColumnName("module_info");

                    b.HasKey("Id")
                        .HasName("base_module_upgrade_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("base_module_upgrade", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BasePartnerMergeAutomaticWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("CurrentLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("current_line_id");

                    b.Property<Guid?>("DstPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("dst_partner_id");

                    b.Property<bool?>("ExcludeContact")
                        .HasColumnType("boolean")
                        .HasColumnName("exclude_contact");

                    b.Property<bool?>("ExcludeJournalItem")
                        .HasColumnType("boolean")
                        .HasColumnName("exclude_journal_item");

                    b.Property<bool?>("GroupByEmail")
                        .HasColumnType("boolean")
                        .HasColumnName("group_by_email");

                    b.Property<bool?>("GroupByIsCompany")
                        .HasColumnType("boolean")
                        .HasColumnName("group_by_is_company");

                    b.Property<bool?>("GroupByName")
                        .HasColumnType("boolean")
                        .HasColumnName("group_by_name");

                    b.Property<bool?>("GroupByParentId")
                        .HasColumnType("boolean")
                        .HasColumnName("group_by_parent_id");

                    b.Property<bool?>("GroupByVat")
                        .HasColumnType("boolean")
                        .HasColumnName("group_by_vat");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("MaximumGroup")
                        .HasColumnType("bigint")
                        .HasColumnName("maximum_group");

                    b.Property<long?>("NumberGroup")
                        .HasColumnType("bigint")
                        .HasColumnName("number_group");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("base_partner_merge_automatic_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrentLineId");

                    b.HasIndex("DstPartnerId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("base_partner_merge_automatic_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BasePartnerMergeLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AggrIds")
                        .HasColumnType("text")
                        .HasColumnName("aggr_ids");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MinId")
                        .HasColumnType("uuid")
                        .HasColumnName("min_id");

                    b.Property<Guid?>("WizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("wizard_id");

                    b.HasKey("Id")
                        .HasName("base_partner_merge_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("WizardId");

                    b.ToTable("base_partner_merge_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BusBu", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Channel")
                        .HasColumnType("text")
                        .HasColumnName("channel");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.HasKey("Id")
                        .HasName("bus_bus_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("bus_bus", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.BusPresence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid?>("GuestId")
                        .HasColumnType("uuid")
                        .HasColumnName("guest_id");

                    b.Property<DateTime?>("LastPoll")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_poll");

                    b.Property<DateTime?>("LastPresence")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_presence");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("bus_presence_pkey");

                    b.HasIndex(new[] { "GuestId" }, "bus_presence_guest_unique")
                        .IsUnique()
                        .HasDatabaseName("bus_presence_guest_unique")
                        .HasFilter("(guest_id IS NOT NULL)");

                    b.HasIndex(new[] { "UserId" }, "bus_presence_user_unique")
                        .IsUnique()
                        .HasDatabaseName("bus_presence_user_unique")
                        .HasFilter("(user_id IS NOT NULL)");

                    b.ToTable("bus_presence", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CalendarAlarm", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AlarmType")
                        .HasColumnType("text")
                        .HasColumnName("alarm_type");

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("Duration")
                        .HasColumnType("bigint")
                        .HasColumnName("duration");

                    b.Property<long?>("DurationMinutes")
                        .HasColumnType("bigint")
                        .HasColumnName("duration_minutes");

                    b.Property<string>("Interval")
                        .HasColumnType("text")
                        .HasColumnName("interval");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MailTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_template_id");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<Guid?>("SmsTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("sms_template_id");

                    b.HasKey("Id")
                        .HasName("calendar_alarm_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MailTemplateId");

                    b.HasIndex("SmsTemplateId");

                    b.ToTable("calendar_alarm", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CalendarAttendee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<string>("Availability")
                        .HasColumnType("text")
                        .HasColumnName("availability");

                    b.Property<string>("CommonName")
                        .HasColumnType("text")
                        .HasColumnName("common_name");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("calendar_attendee_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EventId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PartnerId");

                    b.ToTable("calendar_attendee", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CalendarEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<bool?>("Allday")
                        .HasColumnType("boolean")
                        .HasColumnName("allday");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnType("uuid")
                        .HasColumnName("applicant_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<double?>("Duration")
                        .HasColumnType("double precision")
                        .HasColumnName("duration");

                    b.Property<bool?>("FollowRecurrence")
                        .HasColumnType("boolean")
                        .HasColumnName("follow_recurrence");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("OpportunityId")
                        .HasColumnType("uuid")
                        .HasColumnName("opportunity_id");

                    b.Property<string>("Privacy")
                        .HasColumnType("text")
                        .HasColumnName("privacy");

                    b.Property<Guid?>("RecurrenceId")
                        .HasColumnType("uuid")
                        .HasColumnName("recurrence_id");

                    b.Property<bool?>("Recurrency")
                        .HasColumnType("boolean")
                        .HasColumnName("recurrency");

                    b.Property<Guid?>("ResId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_id");

                    b.Property<string>("ResModel")
                        .HasColumnType("text")
                        .HasColumnName("res_model");

                    b.Property<Guid?>("ResModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_model_id");

                    b.Property<string>("ShowAs")
                        .HasColumnType("text")
                        .HasColumnName("show_as");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("Stop")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("stop");

                    b.Property<DateTime?>("StopDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("stop_date");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("VideocallChannelId")
                        .HasColumnType("uuid")
                        .HasColumnName("videocall_channel_id");

                    b.Property<string>("VideocallLocation")
                        .HasColumnType("text")
                        .HasColumnName("videocall_location");

                    b.HasKey("Id")
                        .HasName("calendar_event_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("RecurrenceId");

                    b.HasIndex("ResModelId");

                    b.HasIndex("UserId");

                    b.HasIndex("VideocallChannelId");

                    b.HasIndex(new[] { "AccessToken" }, "calendar_event_access_token_index")
                        .HasDatabaseName("calendar_event_access_token_index");

                    b.HasIndex(new[] { "ApplicantId" }, "calendar_event_applicant_id_index")
                        .HasDatabaseName("calendar_event_applicant_id_index")
                        .HasFilter("(applicant_id IS NOT NULL)");

                    b.HasIndex(new[] { "OpportunityId" }, "calendar_event_opportunity_id_index")
                        .HasDatabaseName("calendar_event_opportunity_id_index");

                    b.ToTable("calendar_event", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CalendarEventType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("calendar_event_type_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Name" }, "calendar_event_type_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("calendar_event_type_name_uniq");

                    b.ToTable("calendar_event_type", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CalendarFilter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<bool?>("PartnerChecked")
                        .HasColumnType("boolean")
                        .HasColumnName("partner_checked");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("calendar_filters_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "PartnerId" }, "calendar_filters_partner_id_index")
                        .HasDatabaseName("calendar_filters_partner_id_index");

                    b.HasIndex(new[] { "UserId" }, "calendar_filters_user_id_index")
                        .HasDatabaseName("calendar_filters_user_id_index");

                    b.HasIndex(new[] { "UserId", "PartnerId" }, "calendar_filters_user_id_partner_id_unique")
                        .IsUnique()
                        .HasDatabaseName("calendar_filters_user_id_partner_id_unique");

                    b.ToTable("calendar_filters", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CalendarProviderConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("CalClientId")
                        .HasColumnType("text")
                        .HasColumnName("cal_client_id");

                    b.Property<string>("CalClientSecret")
                        .HasColumnType("text")
                        .HasColumnName("cal_client_secret");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("ExternalCalendarProvider")
                        .HasColumnType("text")
                        .HasColumnName("external_calendar_provider");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("MicrosoftOutlookClientIdentifier")
                        .HasColumnType("text")
                        .HasColumnName("microsoft_outlook_client_identifier");

                    b.Property<string>("MicrosoftOutlookClientSecret")
                        .HasColumnType("text")
                        .HasColumnName("microsoft_outlook_client_secret");

                    b.HasKey("Id")
                        .HasName("calendar_provider_config_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("calendar_provider_config", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CalendarRecurrence", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("BaseEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("base_event_id");

                    b.Property<string>("Byday")
                        .HasColumnType("text")
                        .HasColumnName("byday");

                    b.Property<long?>("Count")
                        .HasColumnType("bigint")
                        .HasColumnName("count");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("Day")
                        .HasColumnType("bigint")
                        .HasColumnName("day");

                    b.Property<string>("EndType")
                        .HasColumnType("text")
                        .HasColumnName("end_type");

                    b.Property<string>("EventTz")
                        .HasColumnType("text")
                        .HasColumnName("event_tz");

                    b.Property<bool?>("Fri")
                        .HasColumnType("boolean")
                        .HasColumnName("fri");

                    b.Property<long?>("Interval")
                        .HasColumnType("bigint")
                        .HasColumnName("interval");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<bool?>("Mon")
                        .HasColumnType("boolean")
                        .HasColumnName("mon");

                    b.Property<string>("MonthBy")
                        .HasColumnType("text")
                        .HasColumnName("month_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Rrule")
                        .HasColumnType("text")
                        .HasColumnName("rrule");

                    b.Property<string>("RruleType")
                        .HasColumnType("text")
                        .HasColumnName("rrule_type");

                    b.Property<bool?>("Sat")
                        .HasColumnType("boolean")
                        .HasColumnName("sat");

                    b.Property<bool?>("Sun")
                        .HasColumnType("boolean")
                        .HasColumnName("sun");

                    b.Property<bool?>("Thu")
                        .HasColumnType("boolean")
                        .HasColumnName("thu");

                    b.Property<bool?>("Tue")
                        .HasColumnType("boolean")
                        .HasColumnName("tue");

                    b.Property<DateTime?>("Until")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("until");

                    b.Property<bool?>("Wed")
                        .HasColumnType("boolean")
                        .HasColumnName("wed");

                    b.Property<string>("Weekday")
                        .HasColumnType("text")
                        .HasColumnName("weekday");

                    b.HasKey("Id")
                        .HasName("calendar_recurrence_pkey");

                    b.HasIndex("BaseEventId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("calendar_recurrence", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ChangeLockDate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("FiscalyearLockDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fiscalyear_lock_date");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<DateTime?>("PeriodLockDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("period_lock_date");

                    b.Property<DateTime?>("TaxLockDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("tax_lock_date");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("change_lock_date_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("change_lock_date", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ChangePasswordOwn", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("ConfirmPassword")
                        .HasColumnType("text")
                        .HasColumnName("confirm_password");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("NewPassword")
                        .HasColumnType("text")
                        .HasColumnName("new_password");

                    b.HasKey("Id")
                        .HasName("change_password_own_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("change_password_own", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ChangePasswordUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("NewPasswd")
                        .HasColumnType("text")
                        .HasColumnName("new_passwd");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("UserLogin")
                        .HasColumnType("text")
                        .HasColumnName("user_login");

                    b.Property<Guid?>("WizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("wizard_id");

                    b.HasKey("Id")
                        .HasName("change_password_user_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("UserId");

                    b.HasIndex("WizardId");

                    b.ToTable("change_password_user", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ChangePasswordWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("change_password_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("change_password_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ChangeProductionQty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MoId")
                        .HasColumnType("uuid")
                        .HasColumnName("mo_id");

                    b.Property<decimal?>("ProductQty")
                        .HasColumnType("numeric")
                        .HasColumnName("product_qty");

                    b.HasKey("Id")
                        .HasName("change_production_qty_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MoId");

                    b.ToTable("change_production_qty", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ConfirmStockSm", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("confirm_stock_sms_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("confirm_stock_sms", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmIapLeadHelper", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("crm_iap_lead_helpers_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("crm_iap_lead_helpers", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmIapLeadIndustry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("RevealIds")
                        .HasColumnType("text")
                        .HasColumnName("reveal_ids");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.HasKey("Id")
                        .HasName("crm_iap_lead_industry_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Name" }, "crm_iap_lead_industry_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("crm_iap_lead_industry_name_uniq");

                    b.ToTable("crm_iap_lead_industry", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmIapLeadMiningRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<long?>("CompanySizeMax")
                        .HasColumnType("bigint")
                        .HasColumnName("company_size_max");

                    b.Property<long?>("CompanySizeMin")
                        .HasColumnType("bigint")
                        .HasColumnName("company_size_min");

                    b.Property<string>("ContactFilterType")
                        .HasColumnType("text")
                        .HasColumnName("contact_filter_type");

                    b.Property<long?>("ContactNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("contact_number");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("ErrorType")
                        .HasColumnType("text")
                        .HasColumnName("error_type");

                    b.Property<bool?>("FilterOnSize")
                        .HasColumnType("boolean")
                        .HasColumnName("filter_on_size");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("LeadNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("lead_number");

                    b.Property<string>("LeadType")
                        .HasColumnType("text")
                        .HasColumnName("lead_type");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("PreferredRoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("preferred_role_id");

                    b.Property<string>("SearchType")
                        .HasColumnType("text")
                        .HasColumnName("search_type");

                    b.Property<long?>("SeniorityId")
                        .HasColumnType("bigint")
                        .HasColumnName("seniority_id");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("crm_iap_lead_mining_request_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PreferredRoleId");

                    b.HasIndex("SeniorityId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("crm_iap_lead_mining_request", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmIapLeadRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("RevealId")
                        .HasColumnType("text")
                        .HasColumnName("reveal_id");

                    b.HasKey("Id")
                        .HasName("crm_iap_lead_role_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Name" }, "crm_iap_lead_role_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("crm_iap_lead_role_name_uniq");

                    b.ToTable("crm_iap_lead_role", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmIapLeadSeniority", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("RevealId")
                        .HasColumnType("text")
                        .HasColumnName("reveal_id");

                    b.HasKey("Id")
                        .HasName("crm_iap_lead_seniority_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Name" }, "crm_iap_lead_seniority_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("crm_iap_lead_seniority_name_uniq");

                    b.ToTable("crm_iap_lead_seniority", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmLead", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<double?>("AutomatedProbability")
                        .HasColumnType("double precision")
                        .HasColumnName("automated_probability");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uuid")
                        .HasColumnName("campaign_id");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<string>("ContactName")
                        .HasColumnType("text")
                        .HasColumnName("contact_name");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateActionLast")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_action_last");

                    b.Property<DateTime?>("DateClosed")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_closed");

                    b.Property<DateTime?>("DateConversion")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_conversion");

                    b.Property<DateTime?>("DateDeadline")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_deadline");

                    b.Property<DateTime?>("DateLastStageUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_last_stage_update");

                    b.Property<DateTime?>("DateOpen")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_open");

                    b.Property<double?>("DayClose")
                        .HasColumnType("double precision")
                        .HasColumnName("day_close");

                    b.Property<double?>("DayOpen")
                        .HasColumnType("double precision")
                        .HasColumnName("day_open");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("EmailCc")
                        .HasColumnType("text")
                        .HasColumnName("email_cc");

                    b.Property<string>("EmailFrom")
                        .HasColumnType("text")
                        .HasColumnName("email_from");

                    b.Property<string>("EmailNormalized")
                        .HasColumnType("text")
                        .HasColumnName("email_normalized");

                    b.Property<string>("EmailState")
                        .HasColumnType("text")
                        .HasColumnName("email_state");

                    b.Property<decimal?>("ExpectedRevenue")
                        .HasColumnType("numeric")
                        .HasColumnName("expected_revenue");

                    b.Property<string>("Function")
                        .HasColumnType("text")
                        .HasColumnName("function");

                    b.Property<bool?>("IapEnrichDone")
                        .HasColumnType("boolean")
                        .HasColumnName("iap_enrich_done");

                    b.Property<long?>("LangId")
                        .HasColumnType("bigint")
                        .HasColumnName("lang_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LeadMiningRequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("lead_mining_request_id");

                    b.Property<string>("LeadProperties")
                        .HasColumnType("jsonb")
                        .HasColumnName("lead_properties");

                    b.Property<long?>("LostReasonId")
                        .HasColumnType("bigint")
                        .HasColumnName("lost_reason_id");

                    b.Property<Guid?>("MediumId")
                        .HasColumnType("uuid")
                        .HasColumnName("medium_id");

                    b.Property<long?>("MessageBounce")
                        .HasColumnType("bigint")
                        .HasColumnName("message_bounce");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Mobile")
                        .HasColumnType("text")
                        .HasColumnName("mobile");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<string>("PartnerName")
                        .HasColumnType("text")
                        .HasColumnName("partner_name");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("PhoneSanitized")
                        .HasColumnType("text")
                        .HasColumnName("phone_sanitized");

                    b.Property<string>("PhoneState")
                        .HasColumnType("text")
                        .HasColumnName("phone_state");

                    b.Property<string>("Priority")
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<double?>("Probability")
                        .HasColumnType("double precision")
                        .HasColumnName("probability");

                    b.Property<decimal?>("ProratedRevenue")
                        .HasColumnType("numeric")
                        .HasColumnName("prorated_revenue");

                    b.Property<Guid?>("RecurringPlan")
                        .HasColumnType("uuid")
                        .HasColumnName("recurring_plan");

                    b.Property<decimal?>("RecurringRevenue")
                        .HasColumnType("numeric")
                        .HasColumnName("recurring_revenue");

                    b.Property<decimal?>("RecurringRevenueMonthly")
                        .HasColumnType("numeric")
                        .HasColumnName("recurring_revenue_monthly");

                    b.Property<decimal?>("RecurringRevenueMonthlyProrated")
                        .HasColumnType("numeric")
                        .HasColumnName("recurring_revenue_monthly_prorated");

                    b.Property<string>("Referred")
                        .HasColumnType("text")
                        .HasColumnName("referred");

                    b.Property<string>("RevealId")
                        .HasColumnType("text")
                        .HasColumnName("reveal_id");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_id");

                    b.Property<long?>("StageId")
                        .HasColumnType("bigint")
                        .HasColumnName("stage_id");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint")
                        .HasColumnName("state_id");

                    b.Property<string>("Street")
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<string>("Street2")
                        .HasColumnType("text")
                        .HasColumnName("street2");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<long?>("Title")
                        .HasColumnType("bigint")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Website")
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.Property<string>("Zip")
                        .HasColumnType("text")
                        .HasColumnName("zip");

                    b.HasKey("Id")
                        .HasName("crm_lead_pkey");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LangId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MediumId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("RecurringPlan");

                    b.HasIndex("SourceId");

                    b.HasIndex("StateId");

                    b.HasIndex("Title");

                    b.HasIndex(new[] { "TenantId" }, "crm_lead_company_id_index")
                        .HasDatabaseName("crm_lead_company_id_index");

                    b.HasIndex(new[] { "CreationTime", "TeamId" }, "crm_lead_create_date_team_id_idx")
                        .HasDatabaseName("crm_lead_create_date_team_id_idx");

                    b.HasIndex(new[] { "DateLastStageUpdate" }, "crm_lead_date_last_stage_update_index")
                        .HasDatabaseName("crm_lead_date_last_stage_update_index");

                    b.HasIndex(new[] { "EmailFrom" }, "crm_lead_email_from_index")
                        .HasDatabaseName("crm_lead_email_from_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "EmailFrom" }, "crm_lead_email_from_index"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "EmailFrom" }, "crm_lead_email_from_index"), new[] { "gin_trgm_ops" });

                    b.HasIndex(new[] { "LeadMiningRequestId" }, "crm_lead_lead_mining_request_id_index")
                        .HasDatabaseName("crm_lead_lead_mining_request_id_index")
                        .HasFilter("(lead_mining_request_id IS NOT NULL)");

                    b.HasIndex(new[] { "LostReasonId" }, "crm_lead_lost_reason_id_index")
                        .HasDatabaseName("crm_lead_lost_reason_id_index");

                    b.HasIndex(new[] { "Name" }, "crm_lead_name_index")
                        .HasDatabaseName("crm_lead_name_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "Name" }, "crm_lead_name_index"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Name" }, "crm_lead_name_index"), new[] { "gin_trgm_ops" });

                    b.HasIndex(new[] { "PartnerId" }, "crm_lead_partner_id_index")
                        .HasDatabaseName("crm_lead_partner_id_index");

                    b.HasIndex(new[] { "Priority" }, "crm_lead_priority_index")
                        .HasDatabaseName("crm_lead_priority_index");

                    b.HasIndex(new[] { "StageId" }, "crm_lead_stage_id_index")
                        .HasDatabaseName("crm_lead_stage_id_index");

                    b.HasIndex(new[] { "TeamId" }, "crm_lead_team_id_index")
                        .HasDatabaseName("crm_lead_team_id_index");

                    b.HasIndex(new[] { "Type" }, "crm_lead_type_index")
                        .HasDatabaseName("crm_lead_type_index");

                    b.HasIndex(new[] { "UserId" }, "crm_lead_user_id_index")
                        .HasDatabaseName("crm_lead_user_id_index");

                    b.HasIndex(new[] { "UserId", "TeamId", "Type" }, "crm_lead_user_id_team_id_type_index")
                        .HasDatabaseName("crm_lead_user_id_team_id_type_index");

                    b.ToTable("crm_lead", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmLead2opportunityPartner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Action")
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("ForceAssignment")
                        .HasColumnType("boolean")
                        .HasColumnName("force_assignment");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LeadId")
                        .HasColumnType("uuid")
                        .HasColumnName("lead_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("crm_lead2opportunity_partner_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LeadId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("crm_lead2opportunity_partner", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmLead2opportunityPartnerMass", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Action")
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("Deduplicate")
                        .HasColumnType("boolean")
                        .HasColumnName("deduplicate");

                    b.Property<bool?>("ForceAssignment")
                        .HasColumnType("boolean")
                        .HasColumnName("force_assignment");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LeadId")
                        .HasColumnType("uuid")
                        .HasColumnName("lead_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("crm_lead2opportunity_partner_mass_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LeadId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("crm_lead2opportunity_partner_mass", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmLeadLost", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("LostFeedback")
                        .HasColumnType("text")
                        .HasColumnName("lost_feedback");

                    b.Property<long?>("LostReasonId")
                        .HasColumnType("bigint")
                        .HasColumnName("lost_reason_id");

                    b.HasKey("Id")
                        .HasName("crm_lead_lost_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LostReasonId");

                    b.ToTable("crm_lead_lost", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmLeadPlsUpdate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<DateTime?>("PlsStartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("pls_start_date");

                    b.HasKey("Id")
                        .HasName("crm_lead_pls_update_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("crm_lead_pls_update", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmLeadScoringFrequency", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<decimal?>("LostCount")
                        .HasColumnType("numeric")
                        .HasColumnName("lost_count");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.Property<string>("Variable")
                        .HasColumnType("text")
                        .HasColumnName("variable");

                    b.Property<decimal?>("WonCount")
                        .HasColumnType("numeric")
                        .HasColumnName("won_count");

                    b.HasKey("Id")
                        .HasName("crm_lead_scoring_frequency_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TeamId");

                    b.HasIndex(new[] { "Variable" }, "crm_lead_scoring_frequency_variable_index")
                        .HasDatabaseName("crm_lead_scoring_frequency_variable_index");

                    b.ToTable("crm_lead_scoring_frequency", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmLeadScoringFrequencyField", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid")
                        .HasColumnName("field_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("crm_lead_scoring_frequency_field_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FieldId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("crm_lead_scoring_frequency_field", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmLostReason", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("crm_lost_reason_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("crm_lost_reason", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmMergeOpportunity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("crm_merge_opportunity_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("crm_merge_opportunity", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmQuotationPartner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Action")
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LeadId")
                        .HasColumnType("uuid")
                        .HasColumnName("lead_id");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.HasKey("Id")
                        .HasName("crm_quotation_partner_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LeadId");

                    b.HasIndex("PartnerId");

                    b.ToTable("crm_quotation_partner", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmRecurringPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<long?>("NumberOfMonths")
                        .HasColumnType("bigint")
                        .HasColumnName("number_of_months");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.HasKey("Id")
                        .HasName("crm_recurring_plan_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("crm_recurring_plan", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmStage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("Fold")
                        .HasColumnType("boolean")
                        .HasColumnName("fold");

                    b.Property<bool?>("IsWon")
                        .HasColumnType("boolean")
                        .HasColumnName("is_won");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("Requirements")
                        .HasColumnType("text")
                        .HasColumnName("requirements");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.HasKey("Id")
                        .HasName("crm_stage_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TeamId");

                    b.ToTable("crm_stage", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("crm_tag_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Name" }, "crm_tag_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("crm_tag_name_uniq");

                    b.ToTable("crm_tag", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<Guid?>("AliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("alias_id");

                    b.Property<string>("AssignmentDomain")
                        .HasColumnType("text")
                        .HasColumnName("assignment_domain");

                    b.Property<bool?>("AssignmentOptout")
                        .HasColumnType("boolean")
                        .HasColumnName("assignment_optout");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<double?>("InvoicedTarget")
                        .HasColumnType("double precision")
                        .HasColumnName("invoiced_target");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("LeadPropertiesDefinition")
                        .HasColumnType("jsonb")
                        .HasColumnName("lead_properties_definition");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<bool?>("UseLeads")
                        .HasColumnType("boolean")
                        .HasColumnName("use_leads");

                    b.Property<bool?>("UseOpportunities")
                        .HasColumnType("boolean")
                        .HasColumnName("use_opportunities");

                    b.Property<bool?>("UseQuotations")
                        .HasColumnType("boolean")
                        .HasColumnName("use_quotations");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("crm_team_pkey");

                    b.HasIndex("AliasId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "TenantId" }, "crm_team_company_id_index")
                        .HasDatabaseName("crm_team_company_id_index");

                    b.ToTable("crm_team", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmTeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("AssignmentDomain")
                        .HasColumnType("text")
                        .HasColumnName("assignment_domain");

                    b.Property<long?>("AssignmentMax")
                        .HasColumnType("bigint")
                        .HasColumnName("assignment_max");

                    b.Property<bool?>("AssignmentOptout")
                        .HasColumnType("boolean")
                        .HasColumnName("assignment_optout");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("CrmTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("crm_team_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("crm_team_member_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex(new[] { "CrmTeamId" }, "crm_team_member_crm_team_id_index")
                        .HasDatabaseName("crm_team_member_crm_team_id_index");

                    b.HasIndex(new[] { "UserId" }, "crm_team_member_user_id_index")
                        .HasDatabaseName("crm_team_member_user_id_index");

                    b.ToTable("crm_team_member", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrossoveredBudget", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("crossovered_budget_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "State" }, "crossovered_budget_state_index")
                        .HasDatabaseName("crossovered_budget_state_index");

                    b.ToTable("crossovered_budget", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrossoveredBudgetLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AnalyticAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("analytic_account_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("CrossoveredBudgetId")
                        .HasColumnType("uuid")
                        .HasColumnName("crossovered_budget_id");

                    b.Property<string>("CrossoveredBudgetState")
                        .HasColumnType("text")
                        .HasColumnName("crossovered_budget_state");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to");

                    b.Property<Guid?>("GeneralBudgetId")
                        .HasColumnType("uuid")
                        .HasColumnName("general_budget_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("paid_date");

                    b.Property<decimal?>("PlannedAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("planned_amount");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("crossovered_budget_lines_pkey");

                    b.HasIndex("AnalyticAccountId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GeneralBudgetId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "CrossoveredBudgetId" }, "crossovered_budget_lines_crossovered_budget_id_index")
                        .HasDatabaseName("crossovered_budget_lines_crossovered_budget_id_index");

                    b.ToTable("crossovered_budget_lines", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.DecimalPrecision", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("Digits")
                        .HasColumnType("bigint")
                        .HasColumnName("digits");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("decimal_precision_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Name" }, "decimal_precision_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("decimal_precision_name_uniq");

                    b.ToTable("decimal_precision", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.DigestDigest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("KpiAccountTotalRevenue")
                        .HasColumnType("boolean")
                        .HasColumnName("kpi_account_total_revenue");

                    b.Property<bool?>("KpiAllSaleTotal")
                        .HasColumnType("boolean")
                        .HasColumnName("kpi_all_sale_total");

                    b.Property<bool?>("KpiCrmLeadCreated")
                        .HasColumnType("boolean")
                        .HasColumnName("kpi_crm_lead_created");

                    b.Property<bool?>("KpiCrmOpportunitiesWon")
                        .HasColumnType("boolean")
                        .HasColumnName("kpi_crm_opportunities_won");

                    b.Property<bool?>("KpiHrRecruitmentNewColleagues")
                        .HasColumnType("boolean")
                        .HasColumnName("kpi_hr_recruitment_new_colleagues");

                    b.Property<bool?>("KpiMailMessageTotal")
                        .HasColumnType("boolean")
                        .HasColumnName("kpi_mail_message_total");

                    b.Property<bool?>("KpiPosTotal")
                        .HasColumnType("boolean")
                        .HasColumnName("kpi_pos_total");

                    b.Property<bool?>("KpiProjectTaskOpened")
                        .HasColumnType("boolean")
                        .HasColumnName("kpi_project_task_opened");

                    b.Property<bool?>("KpiResUsersConnected")
                        .HasColumnType("boolean")
                        .HasColumnName("kpi_res_users_connected");

                    b.Property<bool?>("KpiWebsiteSaleTotal")
                        .HasColumnType("boolean")
                        .HasColumnName("kpi_website_sale_total");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<DateTime?>("NextRunDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("next_run_date");

                    b.Property<string>("Periodicity")
                        .HasColumnType("text")
                        .HasColumnName("periodicity");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("digest_digest_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("digest_digest", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.DigestTip", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<string>("TipDescription")
                        .HasColumnType("jsonb")
                        .HasColumnName("tip_description");

                    b.HasKey("Id")
                        .HasName("digest_tip_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("digest_tip", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.FetchmailServer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<bool?>("Attach")
                        .HasColumnType("boolean")
                        .HasColumnName("attach");

                    b.Property<string>("Configuration")
                        .HasColumnType("text")
                        .HasColumnName("configuration");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("GoogleGmailAccessToken")
                        .HasColumnType("text")
                        .HasColumnName("google_gmail_access_token");

                    b.Property<long?>("GoogleGmailAccessTokenExpiration")
                        .HasColumnType("bigint")
                        .HasColumnName("google_gmail_access_token_expiration");

                    b.Property<string>("GoogleGmailAuthorizationCode")
                        .HasColumnType("text")
                        .HasColumnName("google_gmail_authorization_code");

                    b.Property<string>("GoogleGmailRefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("google_gmail_refresh_token");

                    b.Property<bool?>("IsSsl")
                        .HasColumnType("boolean")
                        .HasColumnName("is_ssl");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ObjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("object_id");

                    b.Property<bool?>("Original")
                        .HasColumnType("boolean")
                        .HasColumnName("original");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<long?>("Port")
                        .HasColumnType("bigint")
                        .HasColumnName("port");

                    b.Property<long?>("Priority")
                        .HasColumnType("bigint")
                        .HasColumnName("priority");

                    b.Property<string>("Script")
                        .HasColumnType("text")
                        .HasColumnName("script");

                    b.Property<string>("Server")
                        .HasColumnType("text")
                        .HasColumnName("server");

                    b.Property<string>("ServerType")
                        .HasColumnType("text")
                        .HasColumnName("server_type");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("User")
                        .HasColumnType("text")
                        .HasColumnName("user");

                    b.HasKey("Id")
                        .HasName("fetchmail_server_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ObjectId");

                    b.HasIndex(new[] { "ServerType" }, "fetchmail_server_server_type_index")
                        .HasDatabaseName("fetchmail_server_server_type_index");

                    b.HasIndex(new[] { "State" }, "fetchmail_server_state_index")
                        .HasDatabaseName("fetchmail_server_state_index");

                    b.ToTable("fetchmail_server", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetServiceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("fleet_service_type_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("fleet_service_type", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("AcquisitionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("acquisition_date");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<long?>("BrandId")
                        .HasColumnType("bigint")
                        .HasColumnName("brand_id");

                    b.Property<double?>("CarValue")
                        .HasColumnType("double precision")
                        .HasColumnName("car_value");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<double?>("Co2")
                        .HasColumnType("double precision")
                        .HasColumnName("co2");

                    b.Property<string>("Co2Standard")
                        .HasColumnType("text")
                        .HasColumnName("co2_standard");

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long?>("Doors")
                        .HasColumnType("bigint")
                        .HasColumnName("doors");

                    b.Property<Guid?>("DriverEmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_employee_id");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<bool?>("ElectricAssistance")
                        .HasColumnType("boolean")
                        .HasColumnName("electric_assistance");

                    b.Property<DateTime?>("FirstContractDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("first_contract_date");

                    b.Property<double?>("FrameSize")
                        .HasColumnType("double precision")
                        .HasColumnName("frame_size");

                    b.Property<string>("FrameType")
                        .HasColumnType("text")
                        .HasColumnName("frame_type");

                    b.Property<string>("FuelType")
                        .HasColumnType("text")
                        .HasColumnName("fuel_type");

                    b.Property<Guid?>("FutureDriverEmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("future_driver_employee_id");

                    b.Property<Guid?>("FutureDriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("future_driver_id");

                    b.Property<long?>("Horsepower")
                        .HasColumnType("bigint")
                        .HasColumnName("horsepower");

                    b.Property<double?>("HorsepowerTax")
                        .HasColumnType("double precision")
                        .HasColumnName("horsepower_tax");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("LicensePlate")
                        .HasColumnType("text")
                        .HasColumnName("license_plate");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manager_id");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("MobilityCard")
                        .HasColumnType("text")
                        .HasColumnName("mobility_card");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("model_id");

                    b.Property<string>("ModelYear")
                        .HasColumnType("text")
                        .HasColumnName("model_year");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double?>("NetCarValue")
                        .HasColumnType("double precision")
                        .HasColumnName("net_car_value");

                    b.Property<DateTime?>("NextAssignationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("next_assignation_date");

                    b.Property<string>("OdometerUnit")
                        .HasColumnType("text")
                        .HasColumnName("odometer_unit");

                    b.Property<bool?>("PlanToChangeBike")
                        .HasColumnType("boolean")
                        .HasColumnName("plan_to_change_bike");

                    b.Property<bool?>("PlanToChangeCar")
                        .HasColumnType("boolean")
                        .HasColumnName("plan_to_change_car");

                    b.Property<long?>("Power")
                        .HasColumnType("bigint")
                        .HasColumnName("power");

                    b.Property<double?>("ResidualValue")
                        .HasColumnType("double precision")
                        .HasColumnName("residual_value");

                    b.Property<long?>("Seats")
                        .HasColumnType("bigint")
                        .HasColumnName("seats");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint")
                        .HasColumnName("state_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<bool?>("TrailerHook")
                        .HasColumnType("boolean")
                        .HasColumnName("trailer_hook");

                    b.Property<string>("Transmission")
                        .HasColumnType("text")
                        .HasColumnName("transmission");

                    b.Property<string>("VinSn")
                        .HasColumnType("text")
                        .HasColumnName("vin_sn");

                    b.Property<DateTime?>("WriteOffDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_off_date");

                    b.HasKey("Id")
                        .HasName("fleet_vehicle_pkey");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DriverEmployeeId");

                    b.HasIndex("DriverId");

                    b.HasIndex("FutureDriverEmployeeId");

                    b.HasIndex("FutureDriverId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("ModelId");

                    b.HasIndex("StateId");

                    b.HasIndex("TenantId");

                    b.ToTable("fleet_vehicle", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleAssignationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<Guid?>("DriverEmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_employee_id");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uuid")
                        .HasColumnName("driver_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("fleet_vehicle_assignation_log_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DriverEmployeeId");

                    b.HasIndex("DriverId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("VehicleId");

                    b.ToTable("fleet_vehicle_assignation_log", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleLogContract", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("CostFrequency")
                        .HasColumnType("text")
                        .HasColumnName("cost_frequency");

                    b.Property<decimal?>("CostGenerated")
                        .HasColumnType("numeric")
                        .HasColumnName("cost_generated");

                    b.Property<long?>("CostSubtypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("cost_subtype_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiration_date");

                    b.Property<string>("InsRef")
                        .HasColumnType("text")
                        .HasColumnName("ins_ref");

                    b.Property<Guid?>("InsurerId")
                        .HasColumnType("uuid")
                        .HasColumnName("insurer_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("fleet_vehicle_log_contract_pkey");

                    b.HasIndex("CostSubtypeId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("InsurerId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("TenantId");

                    b.HasIndex("VehicleId");

                    b.HasIndex(new[] { "UserId" }, "fleet_vehicle_log_contract_user_id_index")
                        .HasDatabaseName("fleet_vehicle_log_contract_user_id_index");

                    b.ToTable("fleet_vehicle_log_contract", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleLogService", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("InvRef")
                        .HasColumnType("text")
                        .HasColumnName("inv_ref");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manager_id");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid?>("OdometerId")
                        .HasColumnType("uuid")
                        .HasColumnName("odometer_id");

                    b.Property<Guid?>("PurchaserEmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("purchaser_employee_id");

                    b.Property<Guid?>("PurchaserId")
                        .HasColumnType("uuid")
                        .HasColumnName("purchaser_id");

                    b.Property<long>("ServiceTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("service_type_id");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.Property<Guid?>("VendorId")
                        .HasColumnType("uuid")
                        .HasColumnName("vendor_id");

                    b.HasKey("Id")
                        .HasName("fleet_vehicle_log_services_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("OdometerId");

                    b.HasIndex("PurchaserEmployeeId");

                    b.HasIndex("PurchaserId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("TenantId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VendorId");

                    b.ToTable("fleet_vehicle_log_services", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint")
                        .HasColumnName("brand_id");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<string>("Co2Standard")
                        .HasColumnType("text")
                        .HasColumnName("co2_standard");

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<double?>("DefaultCo2")
                        .HasColumnType("double precision")
                        .HasColumnName("default_co2");

                    b.Property<string>("DefaultFuelType")
                        .HasColumnType("text")
                        .HasColumnName("default_fuel_type");

                    b.Property<long?>("Doors")
                        .HasColumnType("bigint")
                        .HasColumnName("doors");

                    b.Property<bool?>("ElectricAssistance")
                        .HasColumnType("boolean")
                        .HasColumnName("electric_assistance");

                    b.Property<long?>("Horsepower")
                        .HasColumnType("bigint")
                        .HasColumnName("horsepower");

                    b.Property<double?>("HorsepowerTax")
                        .HasColumnType("double precision")
                        .HasColumnName("horsepower_tax");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("ModelYear")
                        .HasColumnType("bigint")
                        .HasColumnName("model_year");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("Power")
                        .HasColumnType("bigint")
                        .HasColumnName("power");

                    b.Property<long?>("Seats")
                        .HasColumnType("bigint")
                        .HasColumnName("seats");

                    b.Property<bool?>("TrailerHook")
                        .HasColumnType("boolean")
                        .HasColumnName("trailer_hook");

                    b.Property<string>("Transmission")
                        .HasColumnType("text")
                        .HasColumnName("transmission");

                    b.Property<string>("VehicleType")
                        .HasColumnType("text")
                        .HasColumnName("vehicle_type");

                    b.HasKey("Id")
                        .HasName("fleet_vehicle_model_pkey");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("fleet_vehicle_model", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleModelBrand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("ModelCount")
                        .HasColumnType("bigint")
                        .HasColumnName("model_count");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("fleet_vehicle_model_brand_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("fleet_vehicle_model_brand", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleModelCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("Sequence")
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    b.HasKey("Id")
                        .HasName("fleet_vehicle_model_category_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Name" }, "fleet_vehicle_model_category_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("fleet_vehicle_model_category_name_uniq");

                    b.ToTable("fleet_vehicle_model_category", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleOdometer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double?>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("fleet_vehicle_odometer_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("VehicleId");

                    b.ToTable("fleet_vehicle_odometer", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.HasKey("Id")
                        .HasName("fleet_vehicle_state_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Name" }, "fleet_vehicle_state_fleet_state_name_unique")
                        .IsUnique()
                        .HasDatabaseName("fleet_vehicle_state_fleet_state_name_unique");

                    b.ToTable("fleet_vehicle_state", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("fleet_vehicle_tag_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Name" }, "fleet_vehicle_tag_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("fleet_vehicle_tag_name_uniq");

                    b.ToTable("fleet_vehicle_tag", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.FollowupFollowup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("followup_followup_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "TenantId" }, "followup_followup_company_uniq")
                        .IsUnique()
                        .HasDatabaseName("followup_followup_company_uniq");

                    b.ToTable("followup_followup", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.FollowupLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("Delay")
                        .HasColumnType("bigint")
                        .HasColumnName("delay");

                    b.Property<string>("Description")
                        .HasColumnType("jsonb")
                        .HasColumnName("description");

                    b.Property<Guid?>("EmailTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("email_template_id");

                    b.Property<Guid?>("FollowupId")
                        .HasColumnType("uuid")
                        .HasColumnName("followup_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<bool?>("ManualAction")
                        .HasColumnType("boolean")
                        .HasColumnName("manual_action");

                    b.Property<string>("ManualActionNote")
                        .HasColumnType("text")
                        .HasColumnName("manual_action_note");

                    b.Property<Guid?>("ManualActionResponsibleId")
                        .HasColumnType("uuid")
                        .HasColumnName("manual_action_responsible_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool?>("SendEmail")
                        .HasColumnType("boolean")
                        .HasColumnName("send_email");

                    b.Property<bool?>("SendLetter")
                        .HasColumnType("boolean")
                        .HasColumnName("send_letter");

                    b.HasKey("Id")
                        .HasName("followup_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EmailTemplateId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ManualActionResponsibleId");

                    b.HasIndex(new[] { "FollowupId", "Delay" }, "followup_line_days_uniq")
                        .IsUnique()
                        .HasDatabaseName("followup_line_days_uniq");

                    b.ToTable("followup_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.FollowupPrint", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("EmailBody")
                        .HasColumnType("text")
                        .HasColumnName("email_body");

                    b.Property<bool?>("EmailConf")
                        .HasColumnType("boolean")
                        .HasColumnName("email_conf");

                    b.Property<string>("EmailSubject")
                        .HasColumnType("text")
                        .HasColumnName("email_subject");

                    b.Property<Guid?>("FollowupId")
                        .HasColumnType("uuid")
                        .HasColumnName("followup_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<bool?>("PartnerLang")
                        .HasColumnType("boolean")
                        .HasColumnName("partner_lang");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<bool?>("TestPrint")
                        .HasColumnType("boolean")
                        .HasColumnName("test_print");

                    b.HasKey("Id")
                        .HasName("followup_print_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FollowupId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("followup_print", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.FollowupSendingResult", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<bool?>("Needprinting")
                        .HasColumnType("boolean")
                        .HasColumnName("needprinting");

                    b.HasKey("Id")
                        .HasName("followup_sending_results_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("followup_sending_results", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrApplicant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("Availability")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("availability");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uuid")
                        .HasColumnName("campaign_id");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateClosed")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_closed");

                    b.Property<DateTime?>("DateLastStageUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_last_stage_update");

                    b.Property<DateTime?>("DateOpen")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_open");

                    b.Property<double?>("DelayClose")
                        .HasColumnType("double precision")
                        .HasColumnName("delay_close");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("EmailCc")
                        .HasColumnType("text")
                        .HasColumnName("email_cc");

                    b.Property<string>("EmailFrom")
                        .HasColumnType("text")
                        .HasColumnName("email_from");

                    b.Property<Guid?>("EmpId")
                        .HasColumnType("uuid")
                        .HasColumnName("emp_id");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_id");

                    b.Property<string>("KanbanState")
                        .HasColumnType("text")
                        .HasColumnName("kanban_state");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("LastStageId")
                        .HasColumnType("bigint")
                        .HasColumnName("last_stage_id");

                    b.Property<string>("LinkedinProfile")
                        .HasColumnType("text")
                        .HasColumnName("linkedin_profile");

                    b.Property<Guid?>("MediumId")
                        .HasColumnType("uuid")
                        .HasColumnName("medium_id");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<string>("PartnerMobile")
                        .HasColumnType("text")
                        .HasColumnName("partner_mobile");

                    b.Property<string>("PartnerName")
                        .HasColumnType("text")
                        .HasColumnName("partner_name");

                    b.Property<string>("PartnerPhone")
                        .HasColumnType("text")
                        .HasColumnName("partner_phone");

                    b.Property<string>("Priority")
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<double?>("Probability")
                        .HasColumnType("double precision")
                        .HasColumnName("probability");

                    b.Property<Guid?>("RefuseReasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("refuse_reason_id");

                    b.Property<double?>("SalaryExpected")
                        .HasColumnType("double precision")
                        .HasColumnName("salary_expected");

                    b.Property<string>("SalaryExpectedExtra")
                        .HasColumnType("text")
                        .HasColumnName("salary_expected_extra");

                    b.Property<double?>("SalaryProposed")
                        .HasColumnType("double precision")
                        .HasColumnName("salary_proposed");

                    b.Property<string>("SalaryProposedExtra")
                        .HasColumnType("text")
                        .HasColumnName("salary_proposed_extra");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_id");

                    b.Property<long?>("StageId")
                        .HasColumnType("bigint")
                        .HasColumnName("stage_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<long?>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("type_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("hr_applicant_pkey");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmpId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LastStageId");

                    b.HasIndex("MediumId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("RefuseReasonId");

                    b.HasIndex("SourceId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "DateLastStageUpdate" }, "hr_applicant_date_last_stage_update_index")
                        .HasDatabaseName("hr_applicant_date_last_stage_update_index");

                    b.HasIndex(new[] { "JobId" }, "hr_applicant_job_id_index")
                        .HasDatabaseName("hr_applicant_job_id_index");

                    b.HasIndex(new[] { "Name" }, "hr_applicant_name_index")
                        .HasDatabaseName("hr_applicant_name_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "Name" }, "hr_applicant_name_index"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Name" }, "hr_applicant_name_index"), new[] { "gin_trgm_ops" });

                    b.HasIndex(new[] { "StageId" }, "hr_applicant_stage_id_index")
                        .HasDatabaseName("hr_applicant_stage_id_index");

                    b.ToTable("hr_applicant", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrApplicantCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("hr_applicant_category_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Name" }, "hr_applicant_category_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("hr_applicant_category_name_uniq");

                    b.ToTable("hr_applicant_category", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrApplicantRefuseReason", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.HasKey("Id")
                        .HasName("hr_applicant_refuse_reason_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TemplateId");

                    b.ToTable("hr_applicant_refuse_reason", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrApplicantSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnType("uuid")
                        .HasColumnName("applicant_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("skill_id");

                    b.Property<long?>("SkillLevelId")
                        .HasColumnType("bigint")
                        .HasColumnName("skill_level_id");

                    b.Property<long?>("SkillTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("skill_type_id");

                    b.HasKey("Id")
                        .HasName("hr_applicant_skill_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("SkillId");

                    b.HasIndex("SkillLevelId");

                    b.HasIndex("SkillTypeId");

                    b.HasIndex(new[] { "ApplicantId", "SkillId" }, "hr_applicant_skill__unique_skill")
                        .IsUnique()
                        .HasDatabaseName("hr_applicant_skill__unique_skill");

                    b.ToTable("hr_applicant_skill", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrAttendance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CheckIn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("check_in");

                    b.Property<DateTime?>("CheckOut")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("check_out");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<double?>("WorkedHours")
                        .HasColumnType("double precision")
                        .HasColumnName("worked_hours");

                    b.HasKey("Id")
                        .HasName("hr_attendance_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "EmployeeId" }, "hr_attendance_employee_id_index")
                        .HasDatabaseName("hr_attendance_employee_id_index");

                    b.ToTable("hr_attendance", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrAttendanceOvertime", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Adjustment")
                        .HasColumnType("boolean")
                        .HasColumnName("adjustment");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<double?>("Duration")
                        .HasColumnType("double precision")
                        .HasColumnName("duration");

                    b.Property<double?>("DurationReal")
                        .HasColumnType("double precision")
                        .HasColumnName("duration_real");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("hr_attendance_overtime_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "EmployeeId" }, "hr_attendance_overtime_employee_id_index")
                        .HasDatabaseName("hr_attendance_overtime_employee_id_index");

                    b.HasIndex(new[] { "EmployeeId", "Date" }, "hr_attendance_overtime_unique_employee_per_day")
                        .IsUnique()
                        .HasDatabaseName("hr_attendance_overtime_unique_employee_per_day")
                        .HasFilter("(adjustment IS FALSE)");

                    b.ToTable("hr_attendance_overtime", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrContract", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<long?>("ContractTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("contract_type_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<Guid?>("HrResponsibleId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_responsible_id");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_id");

                    b.Property<string>("KanbanState")
                        .HasColumnType("text")
                        .HasColumnName("kanban_state");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid?>("ResourceCalendarId")
                        .HasColumnType("uuid")
                        .HasColumnName("resource_calendar_id");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<long?>("StructureTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("structure_type_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("TrialDateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("trial_date_end");

                    b.Property<decimal?>("Wage")
                        .HasColumnType("numeric")
                        .HasColumnName("wage");

                    b.HasKey("Id")
                        .HasName("hr_contract_pkey");

                    b.HasIndex("ContractTypeId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("HrResponsibleId");

                    b.HasIndex("JobId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("StructureTypeId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "DateStart" }, "hr_contract_date_start_index")
                        .HasDatabaseName("hr_contract_date_start_index");

                    b.HasIndex(new[] { "ResourceCalendarId" }, "hr_contract_resource_calendar_id_index")
                        .HasDatabaseName("hr_contract_resource_calendar_id_index");

                    b.ToTable("hr_contract", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrContractType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.HasKey("Id")
                        .HasName("hr_contract_type_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("hr_contract_type", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrDepartment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<string>("CompleteName")
                        .HasColumnType("text")
                        .HasColumnName("complete_name");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manager_id");

                    b.Property<Guid?>("MasterDepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("master_department_id");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("ParentPath")
                        .HasColumnType("text")
                        .HasColumnName("parent_path");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("hr_department_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("MasterDepartmentId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex(new[] { "TenantId" }, "hr_department_company_id_index")
                        .HasDatabaseName("hr_department_company_id_index");

                    b.HasIndex(new[] { "ParentId" }, "hr_department_parent_id_index")
                        .HasDatabaseName("hr_department_parent_id_index");

                    b.HasIndex(new[] { "ParentPath" }, "hr_department_parent_path_index")
                        .HasDatabaseName("hr_department_parent_path_index");

                    b.ToTable("hr_department", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrDepartureReason", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.HasKey("Id")
                        .HasName("hr_departure_reason_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("hr_departure_reason", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrDepartureWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("ArchiveAllocation")
                        .HasColumnType("boolean")
                        .HasColumnName("archive_allocation");

                    b.Property<bool?>("ArchivePrivateAddress")
                        .HasColumnType("boolean")
                        .HasColumnName("archive_private_address");

                    b.Property<bool?>("CancelLeaves")
                        .HasColumnType("boolean")
                        .HasColumnName("cancel_leaves");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DepartureDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("departure_date");

                    b.Property<string>("DepartureDescription")
                        .HasColumnType("text")
                        .HasColumnName("departure_description");

                    b.Property<long?>("DepartureReasonId")
                        .HasColumnType("bigint")
                        .HasColumnName("departure_reason_id");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<bool?>("ReleaseCampanyCar")
                        .HasColumnType("boolean")
                        .HasColumnName("release_campany_car");

                    b.Property<bool?>("SetDateEnd")
                        .HasColumnType("boolean")
                        .HasColumnName("set_date_end");

                    b.HasKey("Id")
                        .HasName("hr_departure_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DepartureReasonId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("hr_departure_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("AdditionalNote")
                        .HasColumnType("text")
                        .HasColumnName("additional_note");

                    b.Property<Guid?>("AddressHomeId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_home_id");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<Guid?>("BankAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("bank_account_id");

                    b.Property<string>("Barcode")
                        .HasColumnType("text")
                        .HasColumnName("barcode");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birthday");

                    b.Property<string>("Certificate")
                        .HasColumnType("text")
                        .HasColumnName("certificate");

                    b.Property<long?>("Children")
                        .HasColumnType("bigint")
                        .HasColumnName("children");

                    b.Property<Guid?>("CoachId")
                        .HasColumnType("uuid")
                        .HasColumnName("coach_id");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uuid")
                        .HasColumnName("contract_id");

                    b.Property<bool?>("ContractWarning")
                        .HasColumnType("boolean")
                        .HasColumnName("contract_warning");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<long?>("CountryOfBirth")
                        .HasColumnType("bigint")
                        .HasColumnName("country_of_birth");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<DateTime?>("DepartureDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("departure_date");

                    b.Property<string>("DepartureDescription")
                        .HasColumnType("text")
                        .HasColumnName("departure_description");

                    b.Property<long?>("DepartureReasonId")
                        .HasColumnType("bigint")
                        .HasColumnName("departure_reason_id");

                    b.Property<string>("EmergencyContact")
                        .HasColumnType("text")
                        .HasColumnName("emergency_contact");

                    b.Property<string>("EmergencyPhone")
                        .HasColumnType("text")
                        .HasColumnName("emergency_phone");

                    b.Property<string>("EmployeeType")
                        .HasColumnType("text")
                        .HasColumnName("employee_type");

                    b.Property<Guid?>("ExpenseManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("expense_manager_id");

                    b.Property<DateTime?>("FirstContractDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("first_contract_date");

                    b.Property<string>("Gender")
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("IdentificationId")
                        .HasColumnType("text")
                        .HasColumnName("identification_id");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_id");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text")
                        .HasColumnName("job_title");

                    b.Property<long?>("KmHomeWork")
                        .HasColumnType("bigint")
                        .HasColumnName("km_home_work");

                    b.Property<Guid?>("LastAttendanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_attendance_id");

                    b.Property<DateTime?>("LastCheckIn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_check_in");

                    b.Property<DateTime?>("LastCheckOut")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_check_out");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LeaveManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("leave_manager_id");

                    b.Property<string>("Marital")
                        .HasColumnType("text")
                        .HasColumnName("marital");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("text")
                        .HasColumnName("mobile_phone");

                    b.Property<string>("MobilityCard")
                        .HasColumnType("text")
                        .HasColumnName("mobility_card");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("PassportId")
                        .HasColumnType("text")
                        .HasColumnName("passport_id");

                    b.Property<string>("PermitNo")
                        .HasColumnType("text")
                        .HasColumnName("permit_no");

                    b.Property<string>("Pin")
                        .HasColumnType("text")
                        .HasColumnName("pin");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("text")
                        .HasColumnName("place_of_birth");

                    b.Property<Guid?>("ResourceCalendarId")
                        .HasColumnType("uuid")
                        .HasColumnName("resource_calendar_id");

                    b.Property<Guid?>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("resource_id");

                    b.Property<string>("Sinid")
                        .HasColumnType("text")
                        .HasColumnName("sinid");

                    b.Property<DateTime?>("SpouseBirthdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("spouse_birthdate");

                    b.Property<string>("SpouseCompleteName")
                        .HasColumnType("text")
                        .HasColumnName("spouse_complete_name");

                    b.Property<string>("Ssnid")
                        .HasColumnType("text")
                        .HasColumnName("ssnid");

                    b.Property<string>("StudyField")
                        .HasColumnType("text")
                        .HasColumnName("study_field");

                    b.Property<string>("StudySchool")
                        .HasColumnType("text")
                        .HasColumnName("study_school");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Vehicle")
                        .HasColumnType("text")
                        .HasColumnName("vehicle");

                    b.Property<DateTime?>("VisaExpire")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("visa_expire");

                    b.Property<string>("VisaNo")
                        .HasColumnType("text")
                        .HasColumnName("visa_no");

                    b.Property<Guid?>("WorkContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("work_contact_id");

                    b.Property<string>("WorkEmail")
                        .HasColumnType("text")
                        .HasColumnName("work_email");

                    b.Property<Guid?>("WorkLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("work_location_id");

                    b.Property<DateTime?>("WorkPermitExpirationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("work_permit_expiration_date");

                    b.Property<bool?>("WorkPermitScheduledActivity")
                        .HasColumnType("boolean")
                        .HasColumnName("work_permit_scheduled_activity");

                    b.Property<string>("WorkPhone")
                        .HasColumnType("text")
                        .HasColumnName("work_phone");

                    b.HasKey("Id")
                        .HasName("hr_employee_pkey");

                    b.HasIndex("AddressHomeId");

                    b.HasIndex("AddressId");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CoachId");

                    b.HasIndex("ContractId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CountryOfBirth");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DepartureReasonId");

                    b.HasIndex("ExpenseManagerId");

                    b.HasIndex("JobId");

                    b.HasIndex("LastAttendanceId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LeaveManagerId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("ParentId");

                    b.HasIndex("WorkContactId");

                    b.HasIndex("WorkLocationId");

                    b.HasIndex(new[] { "Barcode" }, "hr_employee_barcode_uniq")
                        .IsUnique()
                        .HasDatabaseName("hr_employee_barcode_uniq");

                    b.HasIndex(new[] { "TenantId" }, "hr_employee_company_id_index")
                        .HasDatabaseName("hr_employee_company_id_index");

                    b.HasIndex(new[] { "ResourceCalendarId" }, "hr_employee_resource_calendar_id_index")
                        .HasDatabaseName("hr_employee_resource_calendar_id_index");

                    b.HasIndex(new[] { "ResourceId" }, "hr_employee_resource_id_index")
                        .HasDatabaseName("hr_employee_resource_id_index");

                    b.HasIndex(new[] { "UserId", "TenantId" }, "hr_employee_user_uniq")
                        .IsUnique()
                        .HasDatabaseName("hr_employee_user_uniq");

                    b.ToTable("hr_employee", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrEmployeeCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("hr_employee_category_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Name" }, "hr_employee_category_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("hr_employee_category_name_uniq");

                    b.ToTable("hr_employee_category", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrEmployeeSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("skill_id");

                    b.Property<long?>("SkillLevelId")
                        .HasColumnType("bigint")
                        .HasColumnName("skill_level_id");

                    b.Property<long?>("SkillTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("skill_type_id");

                    b.HasKey("Id")
                        .HasName("hr_employee_skill_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("SkillId");

                    b.HasIndex("SkillLevelId");

                    b.HasIndex("SkillTypeId");

                    b.HasIndex(new[] { "EmployeeId", "SkillId" }, "hr_employee_skill__unique_skill")
                        .IsUnique()
                        .HasDatabaseName("hr_employee_skill__unique_skill");

                    b.ToTable("hr_employee_skill", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrEmployeeSkillLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("LevelProgress")
                        .HasColumnType("bigint")
                        .HasColumnName("level_progress");

                    b.Property<Guid?>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("skill_id");

                    b.Property<long?>("SkillLevelId")
                        .HasColumnType("bigint")
                        .HasColumnName("skill_level_id");

                    b.Property<long?>("SkillTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("skill_type_id");

                    b.HasKey("Id")
                        .HasName("hr_employee_skill_log_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("SkillId");

                    b.HasIndex("SkillLevelId");

                    b.HasIndex("SkillTypeId");

                    b.HasIndex(new[] { "EmployeeId", "DepartmentId", "SkillId", "Date" }, "hr_employee_skill_log__unique_skill_log")
                        .IsUnique()
                        .HasDatabaseName("hr_employee_skill_log__unique_skill_log");

                    b.ToTable("hr_employee_skill_log", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrExpense", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("AccountingDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("accounting_date");

                    b.Property<decimal?>("AmountTax")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_tax");

                    b.Property<decimal?>("AmountTaxCompany")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_tax_company");

                    b.Property<string>("AnalyticDistribution")
                        .HasColumnType("jsonb")
                        .HasColumnName("analytic_distribution");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<bool?>("IsRefused")
                        .HasColumnType("boolean")
                        .HasColumnName("is_refused");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PaymentMode")
                        .HasColumnType("text")
                        .HasColumnName("payment_mode");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ProductUomId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_uom_id");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_order_id");

                    b.Property<bool?>("Sample")
                        .HasColumnType("boolean")
                        .HasColumnName("sample");

                    b.Property<Guid?>("SheetId")
                        .HasColumnType("uuid")
                        .HasColumnName("sheet_id");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount");

                    b.Property<decimal?>("TotalAmountCompany")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount_company");

                    b.Property<decimal?>("UnitAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("unit_amount");

                    b.Property<decimal?>("UntaxedAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("untaxed_amount");

                    b.HasKey("Id")
                        .HasName("hr_expense_pkey");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductUomId");

                    b.HasIndex("SaleOrderId");

                    b.HasIndex("SheetId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "AnalyticDistribution" }, "hr_expense_analytic_distribution_gin_index")
                        .HasDatabaseName("hr_expense_analytic_distribution_gin_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "AnalyticDistribution" }, "hr_expense_analytic_distribution_gin_index"), "gin");

                    b.HasIndex(new[] { "State" }, "hr_expense_state_index")
                        .HasDatabaseName("hr_expense_state_index");

                    b.ToTable("hr_expense", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrExpenseApproveDuplicate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("hr_expense_approve_duplicate_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("hr_expense_approve_duplicate", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrExpenseRefuseWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("HrExpenseSheetId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_expense_sheet_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.HasKey("Id")
                        .HasName("hr_expense_refuse_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("HrExpenseSheetId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("hr_expense_refuse_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrExpenseSheet", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AccountMoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_move_id");

                    b.Property<DateTime?>("AccountingDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("accounting_date");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<decimal?>("AmountResidual")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_residual");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("approval_date");

                    b.Property<Guid?>("BankJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("bank_journal_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<Guid?>("JournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("journal_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PaymentState")
                        .HasColumnType("text")
                        .HasColumnName("payment_state");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount");

                    b.Property<decimal?>("TotalAmountTaxes")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount_taxes");

                    b.Property<decimal?>("UntaxedAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("untaxed_amount");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("hr_expense_sheet_pkey");

                    b.HasIndex("AccountMoveId");

                    b.HasIndex("AddressId");

                    b.HasIndex("BankJournalId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("JournalId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "State" }, "hr_expense_sheet_state_index")
                        .HasDatabaseName("hr_expense_sheet_state_index");

                    b.ToTable("hr_expense_sheet", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrExpenseSplit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AnalyticDistribution")
                        .HasColumnType("jsonb")
                        .HasColumnName("analytic_distribution");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<Guid?>("ExpenseId")
                        .HasColumnType("uuid")
                        .HasColumnName("expense_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool?>("ProductHasCost")
                        .HasColumnType("boolean")
                        .HasColumnName("product_has_cost");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_order_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount");

                    b.Property<Guid?>("WizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("wizard_id");

                    b.HasKey("Id")
                        .HasName("hr_expense_split_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleOrderId");

                    b.HasIndex("TenantId");

                    b.HasIndex("WizardId");

                    b.HasIndex(new[] { "AnalyticDistribution" }, "hr_expense_split_analytic_distribution_gin_index")
                        .HasDatabaseName("hr_expense_split_analytic_distribution_gin_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "AnalyticDistribution" }, "hr_expense_split_analytic_distribution_gin_index"), "gin");

                    b.ToTable("hr_expense_split", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrExpenseSplitWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("ExpenseId")
                        .HasColumnType("uuid")
                        .HasColumnName("expense_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("hr_expense_split_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("hr_expense_split_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrHolidaysCancelLeave", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LeaveId")
                        .HasColumnType("uuid")
                        .HasColumnName("leave_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.HasKey("Id")
                        .HasName("hr_holidays_cancel_leave_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LeaveId");

                    b.ToTable("hr_holidays_cancel_leave", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrHolidaysSummaryEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<string>("HolidayType")
                        .HasColumnType("text")
                        .HasColumnName("holiday_type");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("hr_holidays_summary_employee_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("hr_holidays_summary_employee", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrJob", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<Guid?>("AliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("alias_id");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<long?>("ContractTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("contract_type_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long?>("ExpectedEmployees")
                        .HasColumnType("bigint")
                        .HasColumnName("expected_employees");

                    b.Property<Guid?>("HrResponsibleId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_responsible_id");

                    b.Property<bool?>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<string>("JobDetails")
                        .HasColumnType("jsonb")
                        .HasColumnName("job_details");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manager_id");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<long?>("NoOfEmployee")
                        .HasColumnType("bigint")
                        .HasColumnName("no_of_employee");

                    b.Property<long?>("NoOfHiredEmployee")
                        .HasColumnType("bigint")
                        .HasColumnName("no_of_hired_employee");

                    b.Property<long?>("NoOfRecruitment")
                        .HasColumnType("bigint")
                        .HasColumnName("no_of_recruitment");

                    b.Property<string>("Requirements")
                        .HasColumnType("text")
                        .HasColumnName("requirements");

                    b.Property<string>("SeoName")
                        .HasColumnType("jsonb")
                        .HasColumnName("seo_name");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("WebsiteDescription")
                        .HasColumnType("jsonb")
                        .HasColumnName("website_description");

                    b.Property<Guid?>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.Property<string>("WebsiteMetaDescription")
                        .HasColumnType("jsonb")
                        .HasColumnName("website_meta_description");

                    b.Property<string>("WebsiteMetaKeywords")
                        .HasColumnType("jsonb")
                        .HasColumnName("website_meta_keywords");

                    b.Property<string>("WebsiteMetaOgImg")
                        .HasColumnType("text")
                        .HasColumnName("website_meta_og_img");

                    b.Property<string>("WebsiteMetaTitle")
                        .HasColumnType("jsonb")
                        .HasColumnName("website_meta_title");

                    b.HasKey("Id")
                        .HasName("hr_job_pkey");

                    b.HasIndex("AddressId");

                    b.HasIndex("AliasId");

                    b.HasIndex("ContractTypeId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("HrResponsibleId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "IsPublished" }, "hr_job_is_published_index")
                        .HasDatabaseName("hr_job_is_published_index");

                    b.HasIndex(new[] { "Name", "TenantId", "DepartmentId" }, "hr_job_name_company_uniq")
                        .IsUnique()
                        .HasDatabaseName("hr_job_name_company_uniq");

                    b.HasIndex(new[] { "WebsiteId" }, "hr_job_website_id_index")
                        .HasDatabaseName("hr_job_website_id_index");

                    b.ToTable("hr_job", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrLeave", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<string>("DurationDisplay")
                        .HasColumnType("text")
                        .HasColumnName("duration_display");

                    b.Property<Guid?>("EmployeeCompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_company_id");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<Guid?>("FirstApproverId")
                        .HasColumnType("uuid")
                        .HasColumnName("first_approver_id");

                    b.Property<Guid?>("HolidayAllocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("holiday_allocation_id");

                    b.Property<Guid?>("HolidayStatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("holiday_status_id");

                    b.Property<string>("HolidayType")
                        .HasColumnType("text")
                        .HasColumnName("holiday_type");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manager_id");

                    b.Property<Guid?>("MeetingId")
                        .HasColumnType("uuid")
                        .HasColumnName("meeting_id");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<Guid?>("ModeCompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("mode_company_id");

                    b.Property<bool?>("MultiEmployee")
                        .HasColumnType("boolean")
                        .HasColumnName("multi_employee");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<double?>("NumberOfDays")
                        .HasColumnType("double precision")
                        .HasColumnName("number_of_days");

                    b.Property<Guid?>("OvertimeId")
                        .HasColumnType("uuid")
                        .HasColumnName("overtime_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("PrivateName")
                        .HasColumnType("text")
                        .HasColumnName("private_name");

                    b.Property<string>("ReportNote")
                        .HasColumnType("text")
                        .HasColumnName("report_note");

                    b.Property<DateTime?>("RequestDateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("request_date_from");

                    b.Property<string>("RequestDateFromPeriod")
                        .HasColumnType("text")
                        .HasColumnName("request_date_from_period");

                    b.Property<DateTime?>("RequestDateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("request_date_to");

                    b.Property<string>("RequestHourFrom")
                        .HasColumnType("text")
                        .HasColumnName("request_hour_from");

                    b.Property<string>("RequestHourTo")
                        .HasColumnType("text")
                        .HasColumnName("request_hour_to");

                    b.Property<bool?>("RequestUnitHalf")
                        .HasColumnType("boolean")
                        .HasColumnName("request_unit_half");

                    b.Property<bool?>("RequestUnitHours")
                        .HasColumnType("boolean")
                        .HasColumnName("request_unit_hours");

                    b.Property<Guid?>("SecondApproverId")
                        .HasColumnType("uuid")
                        .HasColumnName("second_approver_id");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("hr_leave_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeCompanyId");

                    b.HasIndex("FirstApproverId");

                    b.HasIndex("HolidayAllocationId");

                    b.HasIndex("HolidayStatusId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("MeetingId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("ModeCompanyId");

                    b.HasIndex("OvertimeId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SecondApproverId");

                    b.HasIndex(new[] { "DateFrom" }, "hr_leave_date_from_index")
                        .HasDatabaseName("hr_leave_date_from_index");

                    b.HasIndex(new[] { "DateTo", "DateFrom" }, "hr_leave_date_to_date_from_index")
                        .HasDatabaseName("hr_leave_date_to_date_from_index");

                    b.HasIndex(new[] { "EmployeeId" }, "hr_leave_employee_id_index")
                        .HasDatabaseName("hr_leave_employee_id_index");

                    b.HasIndex(new[] { "UserId" }, "hr_leave_user_id_index")
                        .HasDatabaseName("hr_leave_user_id_index");

                    b.ToTable("hr_leave", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrLeaveAccrualLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid?>("AccrualPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("accrual_plan_id");

                    b.Property<string>("ActionWithUnusedAccruals")
                        .HasColumnType("text")
                        .HasColumnName("action_with_unused_accruals");

                    b.Property<double?>("AddedValue")
                        .HasColumnType("double precision")
                        .HasColumnName("added_value");

                    b.Property<string>("AddedValueType")
                        .HasColumnType("text")
                        .HasColumnName("added_value_type");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("FirstDay")
                        .HasColumnType("bigint")
                        .HasColumnName("first_day");

                    b.Property<string>("FirstMonth")
                        .HasColumnType("text")
                        .HasColumnName("first_month");

                    b.Property<long?>("FirstMonthDay")
                        .HasColumnType("bigint")
                        .HasColumnName("first_month_day");

                    b.Property<string>("Frequency")
                        .HasColumnType("text")
                        .HasColumnName("frequency");

                    b.Property<bool?>("IsBasedOnWorkedTime")
                        .HasColumnType("boolean")
                        .HasColumnName("is_based_on_worked_time");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<double?>("MaximumLeave")
                        .HasColumnType("double precision")
                        .HasColumnName("maximum_leave");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<long?>("PostponeMaxDays")
                        .HasColumnType("bigint")
                        .HasColumnName("postpone_max_days");

                    b.Property<long?>("SecondDay")
                        .HasColumnType("bigint")
                        .HasColumnName("second_day");

                    b.Property<string>("SecondMonth")
                        .HasColumnType("text")
                        .HasColumnName("second_month");

                    b.Property<long?>("SecondMonthDay")
                        .HasColumnType("bigint")
                        .HasColumnName("second_month_day");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.Property<long?>("StartCount")
                        .HasColumnType("bigint")
                        .HasColumnName("start_count");

                    b.Property<string>("StartType")
                        .HasColumnType("text")
                        .HasColumnName("start_type");

                    b.Property<string>("WeekDay")
                        .HasColumnType("text")
                        .HasColumnName("week_day");

                    b.Property<long?>("YearlyDay")
                        .HasColumnType("bigint")
                        .HasColumnName("yearly_day");

                    b.Property<string>("YearlyMonth")
                        .HasColumnType("text")
                        .HasColumnName("yearly_month");

                    b.HasKey("Id")
                        .HasName("hr_leave_accrual_level_pkey");

                    b.HasIndex("AccrualPlanId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ParentId");

                    b.ToTable("hr_leave_accrual_level", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrLeaveAccrualPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("TimeOffTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("time_off_type_id");

                    b.Property<string>("TransitionMode")
                        .HasColumnType("text")
                        .HasColumnName("transition_mode");

                    b.HasKey("Id")
                        .HasName("hr_leave_accrual_plan_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TimeOffTypeId");

                    b.ToTable("hr_leave_accrual_plan", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrLeaveAllocation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AccrualPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("accrual_plan_id");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("AllocationType")
                        .HasColumnType("text")
                        .HasColumnName("allocation_type");

                    b.Property<Guid?>("ApproverId")
                        .HasColumnType("uuid")
                        .HasColumnName("approver_id");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<Guid?>("EmployeeCompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_company_id");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<Guid?>("HolidayStatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("holiday_status_id");

                    b.Property<string>("HolidayType")
                        .HasColumnType("text")
                        .HasColumnName("holiday_type");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<DateTime?>("Lastcall")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("lastcall");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manager_id");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<Guid?>("ModeCompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("mode_company_id");

                    b.Property<bool?>("MultiEmployee")
                        .HasColumnType("boolean")
                        .HasColumnName("multi_employee");

                    b.Property<DateTime?>("Nextcall")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("nextcall");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<double?>("NumberOfDays")
                        .HasColumnType("double precision")
                        .HasColumnName("number_of_days");

                    b.Property<Guid?>("OvertimeId")
                        .HasColumnType("uuid")
                        .HasColumnName("overtime_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("PrivateName")
                        .HasColumnType("text")
                        .HasColumnName("private_name");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("hr_leave_allocation_pkey");

                    b.HasIndex("AccrualPlanId");

                    b.HasIndex("ApproverId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeCompanyId");

                    b.HasIndex("HolidayStatusId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("ModeCompanyId");

                    b.HasIndex("OvertimeId");

                    b.HasIndex("ParentId");

                    b.HasIndex(new[] { "DateFrom" }, "hr_leave_allocation_date_from_index")
                        .HasDatabaseName("hr_leave_allocation_date_from_index");

                    b.HasIndex(new[] { "EmployeeId" }, "hr_leave_allocation_employee_id_index")
                        .HasDatabaseName("hr_leave_allocation_employee_id_index");

                    b.ToTable("hr_leave_allocation", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrLeaveStressDay", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ResourceCalendarId")
                        .HasColumnType("uuid")
                        .HasColumnName("resource_calendar_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("hr_leave_stress_day_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ResourceCalendarId");

                    b.HasIndex("TenantId");

                    b.ToTable("hr_leave_stress_day", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrLeaveType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<long?>("AllocationNotifSubtypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("allocation_notif_subtype_id");

                    b.Property<string>("AllocationValidationType")
                        .HasColumnType("text")
                        .HasColumnName("allocation_validation_type");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<string>("ColorName")
                        .HasColumnType("text")
                        .HasColumnName("color_name");

                    b.Property<bool?>("CreateCalendarMeeting")
                        .HasColumnType("boolean")
                        .HasColumnName("create_calendar_meeting");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("EmployeeRequests")
                        .HasColumnType("text")
                        .HasColumnName("employee_requests");

                    b.Property<Guid?>("IconId")
                        .HasColumnType("uuid")
                        .HasColumnName("icon_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("LeaveNotifSubtypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("leave_notif_subtype_id");

                    b.Property<string>("LeaveValidationType")
                        .HasColumnType("text")
                        .HasColumnName("leave_validation_type");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<bool?>("OvertimeDeductible")
                        .HasColumnType("boolean")
                        .HasColumnName("overtime_deductible");

                    b.Property<string>("RequestUnit")
                        .HasColumnType("text")
                        .HasColumnName("request_unit");

                    b.Property<string>("RequiresAllocation")
                        .HasColumnType("text")
                        .HasColumnName("requires_allocation");

                    b.Property<Guid?>("ResponsibleId")
                        .HasColumnType("uuid")
                        .HasColumnName("responsible_id");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.Property<bool?>("SupportDocument")
                        .HasColumnType("boolean")
                        .HasColumnName("support_document");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("TimeType")
                        .HasColumnType("text")
                        .HasColumnName("time_type");

                    b.Property<bool?>("Unpaid")
                        .HasColumnType("boolean")
                        .HasColumnName("unpaid");

                    b.HasKey("Id")
                        .HasName("hr_leave_type_pkey");

                    b.HasIndex("AllocationNotifSubtypeId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("IconId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LeaveNotifSubtypeId");

                    b.HasIndex("ResponsibleId");

                    b.HasIndex("TenantId");

                    b.ToTable("hr_leave_type", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrPayrollStructureType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("DefaultResourceCalendarId")
                        .HasColumnType("uuid")
                        .HasColumnName("default_resource_calendar_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("hr_payroll_structure_type_pkey");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DefaultResourceCalendarId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("hr_payroll_structure_type", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("hr_plan_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("hr_plan", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrPlanActivityType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<long?>("ActivityTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("activity_type_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("plan_id");

                    b.Property<string>("Responsible")
                        .HasColumnType("text")
                        .HasColumnName("responsible");

                    b.Property<Guid?>("ResponsibleId")
                        .HasColumnType("uuid")
                        .HasColumnName("responsible_id");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("hr_plan_activity_type_pkey");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PlanId");

                    b.HasIndex("ResponsibleId");

                    b.HasIndex("TenantId");

                    b.ToTable("hr_plan_activity_type", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrPlanWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("plan_id");

                    b.HasKey("Id")
                        .HasName("hr_plan_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PlanId");

                    b.ToTable("hr_plan_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrRecruitmentDegree", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.HasKey("Id")
                        .HasName("hr_recruitment_degree_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Name" }, "hr_recruitment_degree_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("hr_recruitment_degree_name_uniq");

                    b.ToTable("hr_recruitment_degree", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrRecruitmentSource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("alias_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MediumId")
                        .HasColumnType("uuid")
                        .HasColumnName("medium_id");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_id");

                    b.HasKey("Id")
                        .HasName("hr_recruitment_source_pkey");

                    b.HasIndex("AliasId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("JobId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MediumId");

                    b.HasIndex("SourceId");

                    b.ToTable("hr_recruitment_source", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrRecruitmentStage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("Fold")
                        .HasColumnType("boolean")
                        .HasColumnName("fold");

                    b.Property<bool?>("HiredStage")
                        .HasColumnType("boolean")
                        .HasColumnName("hired_stage");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("LegendBlocked")
                        .HasColumnType("jsonb")
                        .HasColumnName("legend_blocked");

                    b.Property<string>("LegendDone")
                        .HasColumnType("jsonb")
                        .HasColumnName("legend_done");

                    b.Property<string>("LegendNormal")
                        .HasColumnType("jsonb")
                        .HasColumnName("legend_normal");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("Requirements")
                        .HasColumnType("text")
                        .HasColumnName("requirements");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.HasKey("Id")
                        .HasName("hr_recruitment_stage_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TemplateId");

                    b.ToTable("hr_recruitment_stage", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrResumeLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DisplayType")
                        .HasColumnType("text")
                        .HasColumnName("display_type");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("LineTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("line_type_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("hr_resume_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LineTypeId");

                    b.ToTable("hr_resume_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrResumeLineType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.HasKey("Id")
                        .HasName("hr_resume_line_type_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("hr_resume_line_type", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.Property<long?>("SkillTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("skill_type_id");

                    b.HasKey("Id")
                        .HasName("hr_skill_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("SkillTypeId");

                    b.ToTable("hr_skill", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrSkillLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("DefaultLevel")
                        .HasColumnType("boolean")
                        .HasColumnName("default_level");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("LevelProgress")
                        .HasColumnType("bigint")
                        .HasColumnName("level_progress");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("SkillTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("skill_type_id");

                    b.HasKey("Id")
                        .HasName("hr_skill_level_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("SkillTypeId");

                    b.ToTable("hr_skill_level", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrSkillType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("hr_skill_type_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("hr_skill_type", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrWorkLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("LocationNumber")
                        .HasColumnType("text")
                        .HasColumnName("location_number");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("hr_work_location_pkey");

                    b.HasIndex("AddressId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("hr_work_location", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IapAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccountToken")
                        .HasColumnType("text")
                        .HasColumnName("account_token");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("ServiceName")
                        .HasColumnType("text")
                        .HasColumnName("service_name");

                    b.HasKey("Id")
                        .HasName("iap_account_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("iap_account", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrActClient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("BindingModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("binding_model_id");

                    b.Property<string>("BindingType")
                        .HasColumnType("text")
                        .HasColumnName("binding_type");

                    b.Property<string>("BindingViewTypes")
                        .HasColumnType("text")
                        .HasColumnName("binding_view_types");

                    b.Property<string>("Context")
                        .HasColumnType("text")
                        .HasColumnName("context");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Help")
                        .HasColumnType("jsonb")
                        .HasColumnName("help");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<byte[]>("ParamsStore")
                        .HasColumnType("bytea")
                        .HasColumnName("params_store");

                    b.Property<string>("ResModel")
                        .HasColumnType("text")
                        .HasColumnName("res_model");

                    b.Property<string>("Tag")
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.Property<string>("Target")
                        .HasColumnType("text")
                        .HasColumnName("target");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("ir_act_client_pkey");

                    b.HasIndex("BindingModelId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("ir_act_client", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrActReportXml", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Attachment")
                        .HasColumnType("text")
                        .HasColumnName("attachment");

                    b.Property<bool?>("AttachmentUse")
                        .HasColumnType("boolean")
                        .HasColumnName("attachment_use");

                    b.Property<Guid?>("BindingModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("binding_model_id");

                    b.Property<string>("BindingType")
                        .HasColumnType("text")
                        .HasColumnName("binding_type");

                    b.Property<string>("BindingViewTypes")
                        .HasColumnType("text")
                        .HasColumnName("binding_view_types");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Help")
                        .HasColumnType("jsonb")
                        .HasColumnName("help");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Model")
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<bool?>("Multi")
                        .HasColumnType("boolean")
                        .HasColumnName("multi");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<long?>("PaperformatId")
                        .HasColumnType("bigint")
                        .HasColumnName("paperformat_id");

                    b.Property<string>("PrintReportName")
                        .HasColumnType("jsonb")
                        .HasColumnName("print_report_name");

                    b.Property<string>("ReportFile")
                        .HasColumnType("text")
                        .HasColumnName("report_file");

                    b.Property<string>("ReportName")
                        .HasColumnType("text")
                        .HasColumnName("report_name");

                    b.Property<string>("ReportType")
                        .HasColumnType("text")
                        .HasColumnName("report_type");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("ir_act_report_xml_pkey");

                    b.HasIndex("BindingModelId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PaperformatId");

                    b.ToTable("ir_act_report_xml", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrActServer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<long?>("ActivityDateDeadlineRange")
                        .HasColumnType("bigint")
                        .HasColumnName("activity_date_deadline_range");

                    b.Property<string>("ActivityDateDeadlineRangeType")
                        .HasColumnType("text")
                        .HasColumnName("activity_date_deadline_range_type");

                    b.Property<string>("ActivityNote")
                        .HasColumnType("text")
                        .HasColumnName("activity_note");

                    b.Property<string>("ActivitySummary")
                        .HasColumnType("text")
                        .HasColumnName("activity_summary");

                    b.Property<long?>("ActivityTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("activity_type_id");

                    b.Property<string>("ActivityUserFieldName")
                        .HasColumnType("text")
                        .HasColumnName("activity_user_field_name");

                    b.Property<Guid?>("ActivityUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("activity_user_id");

                    b.Property<string>("ActivityUserType")
                        .HasColumnType("text")
                        .HasColumnName("activity_user_type");

                    b.Property<Guid?>("BindingModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("binding_model_id");

                    b.Property<string>("BindingType")
                        .HasColumnType("text")
                        .HasColumnName("binding_type");

                    b.Property<string>("BindingViewTypes")
                        .HasColumnType("text")
                        .HasColumnName("binding_view_types");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("CrudModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("crud_model_id");

                    b.Property<string>("Help")
                        .HasColumnType("jsonb")
                        .HasColumnName("help");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LinkFieldId")
                        .HasColumnType("uuid")
                        .HasColumnName("link_field_id");

                    b.Property<bool?>("MailPostAutofollow")
                        .HasColumnType("boolean")
                        .HasColumnName("mail_post_autofollow");

                    b.Property<string>("MailPostMethod")
                        .HasColumnType("text")
                        .HasColumnName("mail_post_method");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("model_id");

                    b.Property<string>("ModelName")
                        .HasColumnType("text")
                        .HasColumnName("model_name");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<string>("SmsMethod")
                        .HasColumnType("text")
                        .HasColumnName("sms_method");

                    b.Property<Guid?>("SmsTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("sms_template_id");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Usage")
                        .HasColumnType("text")
                        .HasColumnName("usage");

                    b.Property<string>("WebsitePath")
                        .HasColumnType("text")
                        .HasColumnName("website_path");

                    b.Property<bool?>("WebsitePublished")
                        .HasColumnType("boolean")
                        .HasColumnName("website_published");

                    b.HasKey("Id")
                        .HasName("ir_act_server_pkey");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("ActivityUserId");

                    b.HasIndex("BindingModelId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CrudModelId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LinkFieldId");

                    b.HasIndex("ModelId");

                    b.HasIndex("SmsTemplateId");

                    b.HasIndex("TemplateId");

                    b.ToTable("ir_act_server", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrActUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("BindingModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("binding_model_id");

                    b.Property<string>("BindingType")
                        .HasColumnType("text")
                        .HasColumnName("binding_type");

                    b.Property<string>("BindingViewTypes")
                        .HasColumnType("text")
                        .HasColumnName("binding_view_types");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Help")
                        .HasColumnType("jsonb")
                        .HasColumnName("help");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("Target")
                        .HasColumnType("text")
                        .HasColumnName("target");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("ir_act_url_pkey");

                    b.HasIndex("BindingModelId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("ir_act_url", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrActWindow", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("BindingModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("binding_model_id");

                    b.Property<string>("BindingType")
                        .HasColumnType("text")
                        .HasColumnName("binding_type");

                    b.Property<string>("BindingViewTypes")
                        .HasColumnType("text")
                        .HasColumnName("binding_view_types");

                    b.Property<string>("Context")
                        .HasColumnType("text")
                        .HasColumnName("context");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Domain")
                        .HasColumnType("text")
                        .HasColumnName("domain");

                    b.Property<bool?>("Filter")
                        .HasColumnType("boolean")
                        .HasColumnName("filter");

                    b.Property<string>("Help")
                        .HasColumnType("jsonb")
                        .HasColumnName("help");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("Limit")
                        .HasColumnType("bigint")
                        .HasColumnName("limit");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<Guid?>("ResId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_id");

                    b.Property<string>("ResModel")
                        .HasColumnType("text")
                        .HasColumnName("res_model");

                    b.Property<Guid?>("SearchViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("search_view_id");

                    b.Property<string>("Target")
                        .HasColumnType("text")
                        .HasColumnName("target");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Usage")
                        .HasColumnType("text")
                        .HasColumnName("usage");

                    b.Property<Guid?>("ViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("view_id");

                    b.Property<string>("ViewMode")
                        .HasColumnType("text")
                        .HasColumnName("view_mode");

                    b.HasKey("Id")
                        .HasName("ir_act_window_pkey");

                    b.HasIndex("BindingModelId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("SearchViewId");

                    b.HasIndex("ViewId");

                    b.ToTable("ir_act_window", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrActWindowView", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("ActWindowId")
                        .HasColumnType("uuid")
                        .HasColumnName("act_window_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<bool?>("Multi")
                        .HasColumnType("boolean")
                        .HasColumnName("multi");

                    b.Property<long?>("Sequence")
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    b.Property<Guid?>("ViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("view_id");

                    b.Property<string>("ViewMode")
                        .HasColumnType("text")
                        .HasColumnName("view_mode");

                    b.HasKey("Id")
                        .HasName("ir_act_window_view_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ViewId");

                    b.HasIndex(new[] { "ActWindowId", "ViewMode" }, "act_window_view_unique_mode_per_action")
                        .IsUnique()
                        .HasDatabaseName("act_window_view_unique_mode_per_action");

                    b.ToTable("ir_act_window_view", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrAction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("BindingModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("binding_model_id");

                    b.Property<string>("BindingType")
                        .HasColumnType("text")
                        .HasColumnName("binding_type");

                    b.Property<string>("BindingViewTypes")
                        .HasColumnType("text")
                        .HasColumnName("binding_view_types");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Help")
                        .HasColumnType("jsonb")
                        .HasColumnName("help");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("ir_actions_pkey");

                    b.HasIndex("BindingModelId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("ir_actions", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrActionsTodo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("ActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("action_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("ir_actions_todo_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "ActionId" }, "ir_actions_todo_action_id_index")
                        .HasDatabaseName("ir_actions_todo_action_id_index");

                    b.ToTable("ir_actions_todo", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Bundle")
                        .HasColumnType("text")
                        .HasColumnName("bundle");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Directive")
                        .HasColumnType("text")
                        .HasColumnName("directive");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<string>("Target")
                        .HasColumnType("text")
                        .HasColumnName("target");

                    b.Property<long?>("ThemeTemplateId")
                        .HasColumnType("bigint")
                        .HasColumnName("theme_template_id");

                    b.Property<Guid?>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.HasKey("Id")
                        .HasName("ir_asset_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ThemeTemplateId");

                    b.HasIndex("WebsiteId");

                    b.ToTable("ir_asset", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<string>("Checksum")
                        .HasColumnType("text")
                        .HasColumnName("checksum");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<byte[]>("DbDatas")
                        .HasColumnType("bytea")
                        .HasColumnName("db_datas");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<string>("IndexContent")
                        .HasColumnType("text")
                        .HasColumnName("index_content");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Mimetype")
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("OriginalId")
                        .HasColumnType("uuid")
                        .HasColumnName("original_id");

                    b.Property<bool?>("Public")
                        .HasColumnType("boolean")
                        .HasColumnName("public");

                    b.Property<string>("ResField")
                        .HasColumnType("text")
                        .HasColumnName("res_field");

                    b.Property<Guid?>("ResId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_id");

                    b.Property<string>("ResModel")
                        .HasColumnType("text")
                        .HasColumnName("res_model");

                    b.Property<string>("StoreFname")
                        .HasColumnType("text")
                        .HasColumnName("store_fname");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<long?>("ThemeTemplateId")
                        .HasColumnType("bigint")
                        .HasColumnName("theme_template_id");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<Guid?>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.HasKey("Id")
                        .HasName("ir_attachment_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("OriginalId");

                    b.HasIndex("TenantId");

                    b.HasIndex("ThemeTemplateId");

                    b.HasIndex("WebsiteId");

                    b.HasIndex(new[] { "Checksum" }, "ir_attachment_checksum_index")
                        .HasDatabaseName("ir_attachment_checksum_index");

                    b.HasIndex(new[] { "ResModel", "ResId" }, "ir_attachment_res_idx")
                        .HasDatabaseName("ir_attachment_res_idx");

                    b.HasIndex(new[] { "StoreFname" }, "ir_attachment_store_fname_index")
                        .HasDatabaseName("ir_attachment_store_fname_index");

                    b.HasIndex(new[] { "Url" }, "ir_attachment_url_index")
                        .HasDatabaseName("ir_attachment_url_index")
                        .HasFilter("(url IS NOT NULL)");

                    b.ToTable("ir_attachment", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrConfigParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("ir_config_parameter_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Key" }, "ir_config_parameter_key_uniq")
                        .IsUnique()
                        .HasDatabaseName("ir_config_parameter_key_uniq");

                    b.ToTable("ir_config_parameter", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrCron", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("CronName")
                        .HasColumnType("jsonb")
                        .HasColumnName("cron_name");

                    b.Property<bool?>("Doall")
                        .HasColumnType("boolean")
                        .HasColumnName("doall");

                    b.Property<long?>("IntervalNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("interval_number");

                    b.Property<string>("IntervalType")
                        .HasColumnType("text")
                        .HasColumnName("interval_type");

                    b.Property<Guid?>("IrActionsServerId")
                        .HasColumnType("uuid")
                        .HasColumnName("ir_actions_server_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<DateTime?>("Lastcall")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("lastcall");

                    b.Property<DateTime?>("Nextcall")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("nextcall");

                    b.Property<long?>("Numbercall")
                        .HasColumnType("bigint")
                        .HasColumnName("numbercall");

                    b.Property<long?>("Priority")
                        .HasColumnType("bigint")
                        .HasColumnName("priority");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("ir_cron_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("IrActionsServerId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("UserId");

                    b.ToTable("ir_cron", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrCronTrigger", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CallAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("call_at");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("CronId")
                        .HasColumnType("uuid")
                        .HasColumnName("cron_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("ir_cron_trigger_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "CronId" }, "ir_cron_trigger_cron_id_index")
                        .HasDatabaseName("ir_cron_trigger_cron_id_index");

                    b.ToTable("ir_cron_trigger", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrDefault", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Condition")
                        .HasColumnType("text")
                        .HasColumnName("condition");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid")
                        .HasColumnName("field_id");

                    b.Property<string>("JsonValue")
                        .HasColumnType("text")
                        .HasColumnName("json_value");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("ir_default_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "TenantId" }, "ir_default_company_id_index")
                        .HasDatabaseName("ir_default_company_id_index");

                    b.HasIndex(new[] { "FieldId" }, "ir_default_field_id_index")
                        .HasDatabaseName("ir_default_field_id_index");

                    b.HasIndex(new[] { "UserId" }, "ir_default_user_id_index")
                        .HasDatabaseName("ir_default_user_id_index");

                    b.ToTable("ir_default", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrDemo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("ir_demo_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("ir_demo", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrDemoFailure", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("module_id");

                    b.Property<Guid?>("WizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("wizard_id");

                    b.HasKey("Id")
                        .HasName("ir_demo_failure_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("WizardId");

                    b.ToTable("ir_demo_failure", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrDemoFailureWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("ir_demo_failure_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("ir_demo_failure_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrExport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Resource")
                        .HasColumnType("text")
                        .HasColumnName("resource");

                    b.HasKey("Id")
                        .HasName("ir_exports_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Resource" }, "ir_exports_resource_index")
                        .HasDatabaseName("ir_exports_resource_index");

                    b.ToTable("ir_exports", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrExportsLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("ExportId")
                        .HasColumnType("uuid")
                        .HasColumnName("export_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("ir_exports_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "ExportId" }, "ir_exports_line_export_id_index")
                        .HasDatabaseName("ir_exports_line_export_id_index");

                    b.ToTable("ir_exports_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrFilter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("ActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("action_id");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Context")
                        .HasColumnType("text")
                        .HasColumnName("context");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Domain")
                        .HasColumnType("text")
                        .HasColumnName("domain");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("ModelId")
                        .HasColumnType("text")
                        .HasColumnName("model_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Sort")
                        .HasColumnType("text")
                        .HasColumnName("sort");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("ir_filters_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ModelId", "UserId", "ActionId", "Name" }, "ir_filters_name_model_uid_unique")
                        .IsUnique()
                        .HasDatabaseName("ir_filters_name_model_uid_unique");

                    b.ToTable("ir_filters", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrLogging", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Dbname")
                        .HasColumnType("text")
                        .HasColumnName("dbname");

                    b.Property<string>("Func")
                        .HasColumnType("text")
                        .HasColumnName("func");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Level")
                        .HasColumnType("text")
                        .HasColumnName("level");

                    b.Property<string>("Line")
                        .HasColumnType("text")
                        .HasColumnName("line");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("ir_logging_pkey");

                    b.HasIndex(new[] { "Dbname" }, "ir_logging_dbname_index")
                        .HasDatabaseName("ir_logging_dbname_index");

                    b.HasIndex(new[] { "Level" }, "ir_logging_level_index")
                        .HasDatabaseName("ir_logging_level_index");

                    b.HasIndex(new[] { "Type" }, "ir_logging_type_index")
                        .HasDatabaseName("ir_logging_type_index");

                    b.ToTable("ir_logging", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrMailServer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("FromFilter")
                        .HasColumnType("text")
                        .HasColumnName("from_filter");

                    b.Property<string>("GoogleGmailAccessToken")
                        .HasColumnType("text")
                        .HasColumnName("google_gmail_access_token");

                    b.Property<long?>("GoogleGmailAccessTokenExpiration")
                        .HasColumnType("bigint")
                        .HasColumnName("google_gmail_access_token_expiration");

                    b.Property<string>("GoogleGmailAuthorizationCode")
                        .HasColumnType("text")
                        .HasColumnName("google_gmail_authorization_code");

                    b.Property<string>("GoogleGmailRefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("google_gmail_refresh_token");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<string>("SmtpAuthentication")
                        .HasColumnType("text")
                        .HasColumnName("smtp_authentication");

                    b.Property<bool?>("SmtpDebug")
                        .HasColumnType("boolean")
                        .HasColumnName("smtp_debug");

                    b.Property<string>("SmtpEncryption")
                        .HasColumnType("text")
                        .HasColumnName("smtp_encryption");

                    b.Property<string>("SmtpHost")
                        .HasColumnType("text")
                        .HasColumnName("smtp_host");

                    b.Property<string>("SmtpPass")
                        .HasColumnType("text")
                        .HasColumnName("smtp_pass");

                    b.Property<long?>("SmtpPort")
                        .HasColumnType("bigint")
                        .HasColumnName("smtp_port");

                    b.Property<byte[]>("SmtpSslCertificate")
                        .HasColumnType("bytea")
                        .HasColumnName("smtp_ssl_certificate");

                    b.Property<byte[]>("SmtpSslPrivateKey")
                        .HasColumnType("bytea")
                        .HasColumnName("smtp_ssl_private_key");

                    b.Property<string>("SmtpUser")
                        .HasColumnType("text")
                        .HasColumnName("smtp_user");

                    b.HasKey("Id")
                        .HasName("ir_mail_server_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Name" }, "ir_mail_server_name_index")
                        .HasDatabaseName("ir_mail_server_name_index");

                    b.ToTable("ir_mail_server", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Info")
                        .HasColumnType("text")
                        .HasColumnName("info");

                    b.Property<bool?>("IsMailActivity")
                        .HasColumnType("boolean")
                        .HasColumnName("is_mail_activity");

                    b.Property<bool?>("IsMailBlacklist")
                        .HasColumnType("boolean")
                        .HasColumnName("is_mail_blacklist");

                    b.Property<bool?>("IsMailThread")
                        .HasColumnType("boolean")
                        .HasColumnName("is_mail_thread");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Model")
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("Order")
                        .HasColumnType("text")
                        .HasColumnName("order");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<bool?>("Transient")
                        .HasColumnType("boolean")
                        .HasColumnName("transient");

                    b.Property<bool?>("WebsiteFormAccess")
                        .HasColumnType("boolean")
                        .HasColumnName("website_form_access");

                    b.Property<Guid?>("WebsiteFormDefaultFieldId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_form_default_field_id");

                    b.Property<string>("WebsiteFormKey")
                        .HasColumnType("text")
                        .HasColumnName("website_form_key");

                    b.Property<string>("WebsiteFormLabel")
                        .HasColumnType("text")
                        .HasColumnName("website_form_label");

                    b.HasKey("Id")
                        .HasName("ir_model_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("WebsiteFormDefaultFieldId");

                    b.HasIndex(new[] { "Model" }, "ir_model_obj_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("ir_model_obj_name_uniq");

                    b.ToTable("ir_model", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModelAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("model_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool?>("PermCreate")
                        .HasColumnType("boolean")
                        .HasColumnName("perm_create");

                    b.Property<bool?>("PermRead")
                        .HasColumnType("boolean")
                        .HasColumnName("perm_read");

                    b.Property<bool?>("PermUnlink")
                        .HasColumnType("boolean")
                        .HasColumnName("perm_unlink");

                    b.Property<bool?>("PermWrite")
                        .HasColumnType("boolean")
                        .HasColumnName("perm_write");

                    b.HasKey("Id")
                        .HasName("ir_model_access_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "GroupId" }, "ir_model_access_group_id_index")
                        .HasDatabaseName("ir_model_access_group_id_index");

                    b.HasIndex(new[] { "ModelId" }, "ir_model_access_model_id_index")
                        .HasDatabaseName("ir_model_access_model_id_index");

                    b.HasIndex(new[] { "Name" }, "ir_model_access_name_index")
                        .HasDatabaseName("ir_model_access_name_index");

                    b.ToTable("ir_model_access", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModelConstraint", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Definition")
                        .HasColumnType("text")
                        .HasColumnName("definition");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Message")
                        .HasColumnType("jsonb")
                        .HasColumnName("message");

                    b.Property<Guid?>("Model")
                        .HasColumnType("uuid")
                        .HasColumnName("model");

                    b.Property<Guid?>("Module")
                        .HasColumnType("uuid")
                        .HasColumnName("module");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("ir_model_constraint_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Model" }, "ir_model_constraint_model_index")
                        .HasDatabaseName("ir_model_constraint_model_index");

                    b.HasIndex(new[] { "Module" }, "ir_model_constraint_module_index")
                        .HasDatabaseName("ir_model_constraint_module_index");

                    b.HasIndex(new[] { "Name", "Module" }, "ir_model_constraint_module_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("ir_model_constraint_module_name_uniq");

                    b.HasIndex(new[] { "Name" }, "ir_model_constraint_name_index")
                        .HasDatabaseName("ir_model_constraint_name_index");

                    b.HasIndex(new[] { "Type" }, "ir_model_constraint_type_index")
                        .HasDatabaseName("ir_model_constraint_type_index");

                    b.ToTable("ir_model_constraint", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModelDatum", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("(now() AT TIME ZONE 'UTC'::text)");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date")
                        .HasDefaultValueSql("(now() AT TIME ZONE 'UTC'::text)");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Model")
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<string>("Module")
                        .HasColumnType("text")
                        .HasColumnName("module");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool?>("Noupdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("noupdate")
                        .HasDefaultValueSql("false");

                    b.Property<Guid?>("ResId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_id");

                    b.HasKey("Id")
                        .HasName("ir_model_data_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Model", "ResId" }, "ir_model_data_model_res_id_index")
                        .HasDatabaseName("ir_model_data_model_res_id_index");

                    b.HasIndex(new[] { "Module", "Name" }, "ir_model_data_module_name_uniq_index")
                        .IsUnique()
                        .HasDatabaseName("ir_model_data_module_name_uniq_index");

                    b.ToTable("ir_model_data", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModelField", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Column1")
                        .HasColumnType("text")
                        .HasColumnName("column1");

                    b.Property<string>("Column2")
                        .HasColumnType("text")
                        .HasColumnName("column2");

                    b.Property<string>("CompleteName")
                        .HasColumnType("text")
                        .HasColumnName("complete_name");

                    b.Property<string>("Compute")
                        .HasColumnType("text")
                        .HasColumnName("compute");

                    b.Property<bool?>("Copied")
                        .HasColumnType("boolean")
                        .HasColumnName("copied");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Depends")
                        .HasColumnType("text")
                        .HasColumnName("depends");

                    b.Property<string>("Domain")
                        .HasColumnType("text")
                        .HasColumnName("domain");

                    b.Property<string>("FieldDescription")
                        .HasColumnType("jsonb")
                        .HasColumnName("field_description");

                    b.Property<bool?>("GroupExpand")
                        .HasColumnType("boolean")
                        .HasColumnName("group_expand");

                    b.Property<string>("Help")
                        .HasColumnType("jsonb")
                        .HasColumnName("help");

                    b.Property<bool?>("Index")
                        .HasColumnType("boolean")
                        .HasColumnName("index");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Model")
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("model_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("OnDelete")
                        .HasColumnType("text")
                        .HasColumnName("on_delete");

                    b.Property<bool?>("Readonly")
                        .HasColumnType("boolean")
                        .HasColumnName("readonly");

                    b.Property<string>("Related")
                        .HasColumnType("text")
                        .HasColumnName("related");

                    b.Property<Guid?>("RelatedFieldId")
                        .HasColumnType("uuid")
                        .HasColumnName("related_field_id");

                    b.Property<string>("Relation")
                        .HasColumnType("text")
                        .HasColumnName("relation");

                    b.Property<string>("RelationField")
                        .HasColumnType("text")
                        .HasColumnName("relation_field");

                    b.Property<Guid?>("RelationFieldId")
                        .HasColumnType("uuid")
                        .HasColumnName("relation_field_id");

                    b.Property<string>("RelationTable")
                        .HasColumnType("text")
                        .HasColumnName("relation_table");

                    b.Property<bool?>("Required")
                        .HasColumnType("boolean")
                        .HasColumnName("required");

                    b.Property<bool?>("Selectable")
                        .HasColumnType("boolean")
                        .HasColumnName("selectable");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<bool?>("Store")
                        .HasColumnType("boolean")
                        .HasColumnName("store");

                    b.Property<long?>("Tracking")
                        .HasColumnType("bigint")
                        .HasColumnName("tracking");

                    b.Property<bool?>("Translate")
                        .HasColumnType("boolean")
                        .HasColumnName("translate");

                    b.Property<string>("Ttype")
                        .HasColumnType("text")
                        .HasColumnName("ttype");

                    b.Property<bool?>("WebsiteFormBlacklisted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("website_form_blacklisted")
                        .HasDefaultValueSql("true");

                    b.HasKey("Id")
                        .HasName("ir_model_fields_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("RelatedFieldId");

                    b.HasIndex("RelationFieldId");

                    b.HasIndex(new[] { "CompleteName" }, "ir_model_fields_complete_name_index")
                        .HasDatabaseName("ir_model_fields_complete_name_index");

                    b.HasIndex(new[] { "ModelId" }, "ir_model_fields_model_id_index")
                        .HasDatabaseName("ir_model_fields_model_id_index");

                    b.HasIndex(new[] { "Model" }, "ir_model_fields_model_index")
                        .HasDatabaseName("ir_model_fields_model_index");

                    b.HasIndex(new[] { "Name" }, "ir_model_fields_name_index")
                        .HasDatabaseName("ir_model_fields_name_index");

                    b.HasIndex(new[] { "Model", "Name" }, "ir_model_fields_name_unique")
                        .IsUnique()
                        .HasDatabaseName("ir_model_fields_name_unique");

                    b.HasIndex(new[] { "State" }, "ir_model_fields_state_index")
                        .HasDatabaseName("ir_model_fields_state_index");

                    b.HasIndex(new[] { "WebsiteFormBlacklisted" }, "ir_model_fields_website_form_blacklisted_index")
                        .HasDatabaseName("ir_model_fields_website_form_blacklisted_index");

                    b.ToTable("ir_model_fields", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModelFieldsSelection", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid")
                        .HasColumnName("field_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("ir_model_fields_selection_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "FieldId" }, "ir_model_fields_selection_field_id_index")
                        .HasDatabaseName("ir_model_fields_selection_field_id_index");

                    b.HasIndex(new[] { "FieldId", "Value" }, "ir_model_fields_selection_selection_field_uniq")
                        .IsUnique()
                        .HasDatabaseName("ir_model_fields_selection_selection_field_uniq");

                    b.ToTable("ir_model_fields_selection", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModelRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("Model")
                        .HasColumnType("uuid")
                        .HasColumnName("model");

                    b.Property<Guid?>("Module")
                        .HasColumnType("uuid")
                        .HasColumnName("module");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("ir_model_relation_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Model" }, "ir_model_relation_model_index")
                        .HasDatabaseName("ir_model_relation_model_index");

                    b.HasIndex(new[] { "Module" }, "ir_model_relation_module_index")
                        .HasDatabaseName("ir_model_relation_module_index");

                    b.HasIndex(new[] { "Name" }, "ir_model_relation_name_index")
                        .HasDatabaseName("ir_model_relation_name_index");

                    b.ToTable("ir_model_relation", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModuleCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Description")
                        .HasColumnType("jsonb")
                        .HasColumnName("description");

                    b.Property<bool?>("Exclusive")
                        .HasColumnType("boolean")
                        .HasColumnName("exclusive");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<long?>("Sequence")
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    b.Property<bool?>("Visible")
                        .HasColumnType("boolean")
                        .HasColumnName("visible");

                    b.HasKey("Id")
                        .HasName("ir_module_category_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "ParentId" }, "ir_module_category_parent_id_index")
                        .HasDatabaseName("ir_module_category_parent_id_index");

                    b.ToTable("ir_module_category", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModuleModule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Application")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("application")
                        .HasDefaultValueSql("false");

                    b.Property<string>("Author")
                        .HasColumnType("text")
                        .HasColumnName("author");

                    b.Property<bool?>("AutoInstall")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("auto_install")
                        .HasDefaultValueSql("false");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Contributors")
                        .HasColumnType("text")
                        .HasColumnName("contributors");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("Demo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("demo")
                        .HasDefaultValueSql("false");

                    b.Property<string>("Description")
                        .HasColumnType("jsonb")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("LatestVersion")
                        .HasColumnType("text")
                        .HasColumnName("latest_version");

                    b.Property<string>("License")
                        .HasColumnType("text")
                        .HasColumnName("license");

                    b.Property<string>("Maintainer")
                        .HasColumnType("text")
                        .HasColumnName("maintainer");

                    b.Property<string>("MenusByModule")
                        .HasColumnType("text")
                        .HasColumnName("menus_by_module");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PublishedVersion")
                        .HasColumnType("text")
                        .HasColumnName("published_version");

                    b.Property<string>("ReportsByModule")
                        .HasColumnType("text")
                        .HasColumnName("reports_by_module");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<string>("Shortdesc")
                        .HasColumnType("jsonb")
                        .HasColumnName("shortdesc");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("Summary")
                        .HasColumnType("jsonb")
                        .HasColumnName("summary");

                    b.Property<bool?>("ToBuy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("to_buy")
                        .HasDefaultValueSql("false");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<string>("ViewsByModule")
                        .HasColumnType("text")
                        .HasColumnName("views_by_module");

                    b.Property<bool?>("Web")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("web")
                        .HasDefaultValueSql("false");

                    b.Property<string>("Website")
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("ir_module_module_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "CategoryId" }, "ir_module_module_category_id_index")
                        .HasDatabaseName("ir_module_module_category_id_index");

                    b.HasIndex(new[] { "Name" }, "ir_module_module_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("ir_module_module_name_uniq");

                    b.HasIndex(new[] { "State" }, "ir_module_module_state_index")
                        .HasDatabaseName("ir_module_module_state_index");

                    b.ToTable("ir_module_module", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModuleModuleDependency", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("AutoInstallRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("auto_install_required")
                        .HasDefaultValueSql("true");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("module_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("ir_module_module_dependency_pkey");

                    b.HasIndex("ModuleId");

                    b.HasIndex(new[] { "Name" }, "ir_module_module_dependency_name_index")
                        .HasDatabaseName("ir_module_module_dependency_name_index");

                    b.ToTable("ir_module_module_dependency", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModuleModuleExclusion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("module_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("ir_module_module_exclusion_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ModuleId");

                    b.HasIndex(new[] { "Name" }, "ir_module_module_exclusion_name_index")
                        .HasDatabaseName("ir_module_module_exclusion_name_index");

                    b.ToTable("ir_module_module_exclusion", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<double?>("Duration")
                        .HasColumnType("double precision")
                        .HasColumnName("duration");

                    b.Property<long?>("EntryCount")
                        .HasColumnType("bigint")
                        .HasColumnName("entry_count");

                    b.Property<string>("InitStackTrace")
                        .HasColumnType("text")
                        .HasColumnName("init_stack_trace");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Qweb")
                        .HasColumnType("text")
                        .HasColumnName("qweb");

                    b.Property<string>("Session")
                        .HasColumnType("text")
                        .HasColumnName("session");

                    b.Property<string>("Sql")
                        .HasColumnType("text")
                        .HasColumnName("sql");

                    b.Property<long?>("SqlCount")
                        .HasColumnType("bigint")
                        .HasColumnName("sql_count");

                    b.Property<string>("TracesAsync")
                        .HasColumnType("text")
                        .HasColumnName("traces_async");

                    b.Property<string>("TracesSync")
                        .HasColumnType("text")
                        .HasColumnName("traces_sync");

                    b.HasKey("Id")
                        .HasName("ir_profile_pkey");

                    b.HasIndex(new[] { "Session" }, "ir_profile_session_index")
                        .HasDatabaseName("ir_profile_session_index");

                    b.ToTable("ir_profile", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("FieldsId")
                        .HasColumnType("uuid")
                        .HasColumnName("fields_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ResId")
                        .HasColumnType("text")
                        .HasColumnName("res_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<byte[]>("ValueBinary")
                        .HasColumnType("bytea")
                        .HasColumnName("value_binary");

                    b.Property<DateTime?>("ValueDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("value_datetime");

                    b.Property<double?>("ValueFloat")
                        .HasColumnType("double precision")
                        .HasColumnName("value_float");

                    b.Property<long?>("ValueInteger")
                        .HasColumnType("bigint")
                        .HasColumnName("value_integer");

                    b.Property<string>("ValueReference")
                        .HasColumnType("text")
                        .HasColumnName("value_reference");

                    b.Property<string>("ValueText")
                        .HasColumnType("text")
                        .HasColumnName("value_text");

                    b.HasKey("Id")
                        .HasName("ir_property_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FieldsId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "TenantId" }, "ir_property_company_id_index")
                        .HasDatabaseName("ir_property_company_id_index");

                    b.HasIndex(new[] { "Name" }, "ir_property_name_index")
                        .HasDatabaseName("ir_property_name_index");

                    b.HasIndex(new[] { "ResId" }, "ir_property_res_id_index")
                        .HasDatabaseName("ir_property_res_id_index");

                    b.HasIndex(new[] { "Type" }, "ir_property_type_index")
                        .HasDatabaseName("ir_property_type_index");

                    b.ToTable("ir_property", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrRule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("DomainForce")
                        .HasColumnType("text")
                        .HasColumnName("domain_force");

                    b.Property<bool?>("Global")
                        .HasColumnType("boolean")
                        .HasColumnName("global");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("model_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool?>("PermCreate")
                        .HasColumnType("boolean")
                        .HasColumnName("perm_create");

                    b.Property<bool?>("PermRead")
                        .HasColumnType("boolean")
                        .HasColumnName("perm_read");

                    b.Property<bool?>("PermUnlink")
                        .HasColumnType("boolean")
                        .HasColumnName("perm_unlink");

                    b.Property<bool?>("PermWrite")
                        .HasColumnType("boolean")
                        .HasColumnName("perm_write");

                    b.HasKey("Id")
                        .HasName("ir_rule_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "ModelId" }, "ir_rule_model_id_index")
                        .HasDatabaseName("ir_rule_model_id_index");

                    b.HasIndex(new[] { "Name" }, "ir_rule_name_index")
                        .HasDatabaseName("ir_rule_name_index");

                    b.ToTable("ir_rule", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrSequence", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Implementation")
                        .HasColumnType("text")
                        .HasColumnName("implementation");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("NumberIncrement")
                        .HasColumnType("bigint")
                        .HasColumnName("number_increment");

                    b.Property<long?>("NumberNext")
                        .HasColumnType("bigint")
                        .HasColumnName("number_next");

                    b.Property<long?>("Padding")
                        .HasColumnType("bigint")
                        .HasColumnName("padding");

                    b.Property<string>("Prefix")
                        .HasColumnType("text")
                        .HasColumnName("prefix");

                    b.Property<string>("Suffix")
                        .HasColumnType("text")
                        .HasColumnName("suffix");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<bool?>("UseDateRange")
                        .HasColumnType("boolean")
                        .HasColumnName("use_date_range");

                    b.HasKey("Id")
                        .HasName("ir_sequence_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("ir_sequence", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrSequenceDateRange", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("NumberNext")
                        .HasColumnType("bigint")
                        .HasColumnName("number_next");

                    b.Property<Guid?>("SequenceId")
                        .HasColumnType("uuid")
                        .HasColumnName("sequence_id");

                    b.HasKey("Id")
                        .HasName("ir_sequence_date_range_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("SequenceId");

                    b.ToTable("ir_sequence_date_range", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrServerObjectLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("Col1")
                        .HasColumnType("uuid")
                        .HasColumnName("col1");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("EvaluationType")
                        .HasColumnType("text")
                        .HasColumnName("evaluation_type");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ServerId")
                        .HasColumnType("uuid")
                        .HasColumnName("server_id");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("ir_server_object_lines_pkey");

                    b.HasIndex("Col1");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ServerId");

                    b.ToTable("ir_server_object_lines", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrUiMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Action")
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("ParentPath")
                        .HasColumnType("text")
                        .HasColumnName("parent_path");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<string>("WebIcon")
                        .HasColumnType("text")
                        .HasColumnName("web_icon");

                    b.HasKey("Id")
                        .HasName("ir_ui_menu_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "ParentId" }, "ir_ui_menu_parent_id_index")
                        .HasDatabaseName("ir_ui_menu_parent_id_index");

                    b.HasIndex(new[] { "ParentPath" }, "ir_ui_menu_parent_path_index")
                        .HasDatabaseName("ir_ui_menu_parent_path_index");

                    b.ToTable("ir_ui_menu", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrUiView", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("ArchDb")
                        .HasColumnType("jsonb")
                        .HasColumnName("arch_db");

                    b.Property<string>("ArchFs")
                        .HasColumnType("text")
                        .HasColumnName("arch_fs");

                    b.Property<string>("ArchPrev")
                        .HasColumnType("text")
                        .HasColumnName("arch_prev");

                    b.Property<bool?>("ArchUpdated")
                        .HasColumnType("boolean")
                        .HasColumnName("arch_updated");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("CustomizeShow")
                        .HasColumnType("boolean")
                        .HasColumnName("customize_show");

                    b.Property<string>("FieldParent")
                        .HasColumnType("text")
                        .HasColumnName("field_parent");

                    b.Property<Guid?>("InheritId")
                        .HasColumnType("uuid")
                        .HasColumnName("inherit_id");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Mode")
                        .HasColumnType("text")
                        .HasColumnName("mode");

                    b.Property<string>("Model")
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("Priority")
                        .HasColumnType("bigint")
                        .HasColumnName("priority");

                    b.Property<string>("SeoName")
                        .HasColumnType("jsonb")
                        .HasColumnName("seo_name");

                    b.Property<long?>("ThemeTemplateId")
                        .HasColumnType("bigint")
                        .HasColumnName("theme_template_id");

                    b.Property<bool?>("Track")
                        .HasColumnType("boolean")
                        .HasColumnName("track");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Visibility")
                        .HasColumnType("text")
                        .HasColumnName("visibility");

                    b.Property<string>("VisibilityPassword")
                        .HasColumnType("text")
                        .HasColumnName("visibility_password");

                    b.Property<Guid?>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.Property<string>("WebsiteMetaDescription")
                        .HasColumnType("jsonb")
                        .HasColumnName("website_meta_description");

                    b.Property<string>("WebsiteMetaKeywords")
                        .HasColumnType("jsonb")
                        .HasColumnName("website_meta_keywords");

                    b.Property<string>("WebsiteMetaOgImg")
                        .HasColumnType("text")
                        .HasColumnName("website_meta_og_img");

                    b.Property<string>("WebsiteMetaTitle")
                        .HasColumnType("jsonb")
                        .HasColumnName("website_meta_title");

                    b.HasKey("Id")
                        .HasName("ir_ui_view_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ThemeTemplateId");

                    b.HasIndex("WebsiteId");

                    b.HasIndex(new[] { "InheritId" }, "ir_ui_view_inherit_id_index")
                        .HasDatabaseName("ir_ui_view_inherit_id_index");

                    b.HasIndex(new[] { "Key" }, "ir_ui_view_key_index")
                        .HasDatabaseName("ir_ui_view_key_index")
                        .HasFilter("(key IS NOT NULL)");

                    b.HasIndex(new[] { "Model" }, "ir_ui_view_model_index")
                        .HasDatabaseName("ir_ui_view_model_index");

                    b.HasIndex(new[] { "Model", "InheritId" }, "ir_ui_view_model_type_inherit_id")
                        .HasDatabaseName("ir_ui_view_model_type_inherit_id");

                    b.ToTable("ir_ui_view", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrUiViewCustom", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Arch")
                        .HasColumnType("text")
                        .HasColumnName("arch");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("RefId")
                        .HasColumnType("uuid")
                        .HasColumnName("ref_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("ir_ui_view_custom_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "RefId" }, "ir_ui_view_custom_ref_id_index")
                        .HasDatabaseName("ir_ui_view_custom_ref_id_index");

                    b.HasIndex(new[] { "UserId" }, "ir_ui_view_custom_user_id_index")
                        .HasDatabaseName("ir_ui_view_custom_user_id_index");

                    b.HasIndex(new[] { "UserId", "RefId" }, "ir_ui_view_custom_user_id_ref_id")
                        .HasDatabaseName("ir_ui_view_custom_user_id_ref_id");

                    b.ToTable("ir_ui_view_custom", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.LotLabelLayout", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("LabelQuantity")
                        .HasColumnType("text")
                        .HasColumnName("label_quantity");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("PrintFormat")
                        .HasColumnType("text")
                        .HasColumnName("print_format");

                    b.HasKey("Id")
                        .HasName("lot_label_layout_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("lot_label_layout", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.LunchAlert", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("CronId")
                        .HasColumnType("uuid")
                        .HasColumnName("cron_id");

                    b.Property<bool?>("Fri")
                        .HasColumnType("boolean")
                        .HasColumnName("fri");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Message")
                        .HasColumnType("jsonb")
                        .HasColumnName("message");

                    b.Property<string>("Mode")
                        .HasColumnType("text")
                        .HasColumnName("mode");

                    b.Property<bool?>("Mon")
                        .HasColumnType("boolean")
                        .HasColumnName("mon");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("NotificationMoment")
                        .HasColumnType("text")
                        .HasColumnName("notification_moment");

                    b.Property<double?>("NotificationTime")
                        .HasColumnType("double precision")
                        .HasColumnName("notification_time");

                    b.Property<string>("Recipients")
                        .HasColumnType("text")
                        .HasColumnName("recipients");

                    b.Property<bool?>("Sat")
                        .HasColumnType("boolean")
                        .HasColumnName("sat");

                    b.Property<bool?>("Sun")
                        .HasColumnType("boolean")
                        .HasColumnName("sun");

                    b.Property<bool?>("Thu")
                        .HasColumnType("boolean")
                        .HasColumnName("thu");

                    b.Property<bool?>("Tue")
                        .HasColumnType("boolean")
                        .HasColumnName("tue");

                    b.Property<string>("Tz")
                        .HasColumnType("text")
                        .HasColumnName("tz");

                    b.Property<DateTime?>("Until")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("until");

                    b.Property<bool?>("Wed")
                        .HasColumnType("boolean")
                        .HasColumnName("wed");

                    b.HasKey("Id")
                        .HasName("lunch_alert_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CronId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("lunch_alert", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.LunchCashmove", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("lunch_cashmove_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("UserId");

                    b.ToTable("lunch_cashmove", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.LunchLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("lunch_location_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("lunch_location", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.LunchOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("DisplayToppings")
                        .HasColumnType("text")
                        .HasColumnName("display_toppings");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LunchLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("lunch_location_id");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<bool?>("Notified")
                        .HasColumnType("boolean")
                        .HasColumnName("notified");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<double?>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid")
                        .HasColumnName("supplier_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("lunch_order_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LunchLocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "State" }, "lunch_order_state_index")
                        .HasDatabaseName("lunch_order_state_index");

                    b.HasIndex(new[] { "SupplierId" }, "lunch_order_supplier_id_index")
                        .HasDatabaseName("lunch_order_supplier_id_index");

                    b.HasIndex(new[] { "UserId", "ProductId", "Date" }, "lunch_order_user_product_date")
                        .HasDatabaseName("lunch_order_user_product_date");

                    b.ToTable("lunch_order", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.LunchProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Description")
                        .HasColumnType("jsonb")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<DateTime?>("NewUntil")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("new_until");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid")
                        .HasColumnName("supplier_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("lunch_product_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TenantId");

                    b.ToTable("lunch_product", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.LunchProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("lunch_product_category_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("lunch_product_category", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.LunchSupplier", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<double?>("AutomaticEmailTime")
                        .HasColumnType("double precision")
                        .HasColumnName("automatic_email_time");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("CronId")
                        .HasColumnType("uuid")
                        .HasColumnName("cron_id");

                    b.Property<string>("Delivery")
                        .HasColumnType("text")
                        .HasColumnName("delivery");

                    b.Property<bool?>("Fri")
                        .HasColumnType("boolean")
                        .HasColumnName("fri");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Moment")
                        .HasColumnType("text")
                        .HasColumnName("moment");

                    b.Property<bool?>("Mon")
                        .HasColumnType("boolean")
                        .HasColumnName("mon");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<DateTime?>("RecurrencyEndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("recurrency_end_date");

                    b.Property<Guid?>("ResponsibleId")
                        .HasColumnType("uuid")
                        .HasColumnName("responsible_id");

                    b.Property<bool?>("Sat")
                        .HasColumnType("boolean")
                        .HasColumnName("sat");

                    b.Property<string>("SendBy")
                        .HasColumnType("text")
                        .HasColumnName("send_by");

                    b.Property<bool?>("Sun")
                        .HasColumnType("boolean")
                        .HasColumnName("sun");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<bool?>("Thu")
                        .HasColumnType("boolean")
                        .HasColumnName("thu");

                    b.Property<string>("ToppingLabel1")
                        .HasColumnType("text")
                        .HasColumnName("topping_label_1");

                    b.Property<string>("ToppingLabel2")
                        .HasColumnType("text")
                        .HasColumnName("topping_label_2");

                    b.Property<string>("ToppingLabel3")
                        .HasColumnType("text")
                        .HasColumnName("topping_label_3");

                    b.Property<string>("ToppingQuantity1")
                        .HasColumnType("text")
                        .HasColumnName("topping_quantity_1");

                    b.Property<string>("ToppingQuantity2")
                        .HasColumnType("text")
                        .HasColumnName("topping_quantity_2");

                    b.Property<string>("ToppingQuantity3")
                        .HasColumnType("text")
                        .HasColumnName("topping_quantity_3");

                    b.Property<bool?>("Tue")
                        .HasColumnType("boolean")
                        .HasColumnName("tue");

                    b.Property<string>("Tz")
                        .HasColumnType("text")
                        .HasColumnName("tz");

                    b.Property<bool?>("Wed")
                        .HasColumnType("boolean")
                        .HasColumnName("wed");

                    b.HasKey("Id")
                        .HasName("lunch_supplier_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CronId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ResponsibleId");

                    b.HasIndex("TenantId");

                    b.ToTable("lunch_supplier", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.LunchTopping", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid")
                        .HasColumnName("supplier_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<long?>("ToppingCategory")
                        .HasColumnType("bigint")
                        .HasColumnName("topping_category");

                    b.HasKey("Id")
                        .HasName("lunch_topping_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TenantId");

                    b.ToTable("lunch_topping", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<long?>("ActivityTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("activity_type_id");

                    b.Property<bool?>("Automated")
                        .HasColumnType("boolean")
                        .HasColumnName("automated");

                    b.Property<Guid?>("CalendarEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("calendar_event_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateDeadline")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_deadline");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<Guid?>("NoteId")
                        .HasColumnType("uuid")
                        .HasColumnName("note_id");

                    b.Property<long?>("PreviousActivityTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("previous_activity_type_id");

                    b.Property<long?>("RecommendedActivityTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("recommended_activity_type_id");

                    b.Property<Guid?>("RequestPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("request_partner_id");

                    b.Property<Guid?>("ResId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_id");

                    b.Property<string>("ResModel")
                        .HasColumnType("text")
                        .HasColumnName("res_model");

                    b.Property<Guid?>("ResModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_model_id");

                    b.Property<string>("ResName")
                        .HasColumnType("text")
                        .HasColumnName("res_name");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("mail_activity_pkey");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("CalendarEventId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("NoteId");

                    b.HasIndex("PreviousActivityTypeId");

                    b.HasIndex("RecommendedActivityTypeId");

                    b.HasIndex("RequestPartnerId");

                    b.HasIndex(new[] { "DateDeadline" }, "mail_activity_date_deadline_index")
                        .HasDatabaseName("mail_activity_date_deadline_index");

                    b.HasIndex(new[] { "ResId" }, "mail_activity_res_id_index")
                        .HasDatabaseName("mail_activity_res_id_index");

                    b.HasIndex(new[] { "ResModelId" }, "mail_activity_res_model_id_index")
                        .HasDatabaseName("mail_activity_res_model_id_index");

                    b.HasIndex(new[] { "ResModel" }, "mail_activity_res_model_index")
                        .HasDatabaseName("mail_activity_res_model_index");

                    b.HasIndex(new[] { "UserId" }, "mail_activity_user_id_index")
                        .HasDatabaseName("mail_activity_user_id_index");

                    b.ToTable("mail_activity", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailActivityType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("ChainingType")
                        .HasColumnType("text")
                        .HasColumnName("chaining_type");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("DecorationType")
                        .HasColumnType("text")
                        .HasColumnName("decoration_type");

                    b.Property<string>("DefaultNote")
                        .HasColumnType("jsonb")
                        .HasColumnName("default_note");

                    b.Property<Guid?>("DefaultUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("default_user_id");

                    b.Property<long?>("DelayCount")
                        .HasColumnType("bigint")
                        .HasColumnName("delay_count");

                    b.Property<string>("DelayFrom")
                        .HasColumnType("text")
                        .HasColumnName("delay_from");

                    b.Property<string>("DelayUnit")
                        .HasColumnType("text")
                        .HasColumnName("delay_unit");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("ResModel")
                        .HasColumnType("text")
                        .HasColumnName("res_model");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.Property<string>("Summary")
                        .HasColumnType("jsonb")
                        .HasColumnName("summary");

                    b.Property<long?>("TriggeredNextTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("triggered_next_type_id");

                    b.HasKey("Id")
                        .HasName("mail_activity_type_pkey");

                    b.HasIndex("DefaultUserId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TriggeredNextTypeId");

                    b.HasIndex(new[] { "CreatorId" }, "mail_activity_type_create_uid_index")
                        .HasDatabaseName("mail_activity_type_create_uid_index");

                    b.ToTable("mail_activity_type", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailAlias", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AliasBouncedContent")
                        .HasColumnType("jsonb")
                        .HasColumnName("alias_bounced_content");

                    b.Property<string>("AliasContact")
                        .HasColumnType("text")
                        .HasColumnName("alias_contact");

                    b.Property<string>("AliasDefaults")
                        .HasColumnType("text")
                        .HasColumnName("alias_defaults");

                    b.Property<Guid?>("AliasForceThreadId")
                        .HasColumnType("uuid")
                        .HasColumnName("alias_force_thread_id");

                    b.Property<Guid?>("AliasModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("alias_model_id");

                    b.Property<string>("AliasName")
                        .HasColumnType("text")
                        .HasColumnName("alias_name");

                    b.Property<Guid?>("AliasParentModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("alias_parent_model_id");

                    b.Property<Guid?>("AliasParentThreadId")
                        .HasColumnType("uuid")
                        .HasColumnName("alias_parent_thread_id");

                    b.Property<Guid?>("AliasUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("alias_user_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("mail_alias_pkey");

                    b.HasIndex("AliasModelId");

                    b.HasIndex("AliasParentModelId");

                    b.HasIndex("AliasUserId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "AliasName" }, "mail_alias_alias_unique")
                        .IsUnique()
                        .HasDatabaseName("mail_alias_alias_unique");

                    b.ToTable("mail_alias", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailBlacklist", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.HasKey("Id")
                        .HasName("mail_blacklist_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex(new[] { "Email" }, "mail_blacklist_email_index")
                        .HasDatabaseName("mail_blacklist_email_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "Email" }, "mail_blacklist_email_index"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Email" }, "mail_blacklist_email_index"), new[] { "gin_trgm_ops" });

                    b.HasIndex(new[] { "Email" }, "mail_blacklist_unique_email")
                        .IsUnique()
                        .HasDatabaseName("mail_blacklist_unique_email");

                    b.ToTable("mail_blacklist", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailBlacklistRemove", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.HasKey("Id")
                        .HasName("mail_blacklist_remove_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("mail_blacklist_remove", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("ChannelType")
                        .HasColumnType("text")
                        .HasColumnName("channel_type");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("DefaultDisplayMode")
                        .HasColumnType("text")
                        .HasColumnName("default_display_mode");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("GroupPublicId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_public_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Uuid")
                        .HasColumnType("text")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("mail_channel_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GroupPublicId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex(new[] { "Uuid" }, "mail_channel_uuid_unique")
                        .IsUnique()
                        .HasDatabaseName("mail_channel_uuid_unique");

                    b.ToTable("mail_channel", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailChannelMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("ChannelId")
                        .HasColumnType("uuid")
                        .HasColumnName("channel_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("CustomChannelName")
                        .HasColumnType("text")
                        .HasColumnName("custom_channel_name");

                    b.Property<Guid?>("FetchedMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("fetched_message_id");

                    b.Property<string>("FoldState")
                        .HasColumnType("text")
                        .HasColumnName("fold_state");

                    b.Property<Guid?>("GuestId")
                        .HasColumnType("uuid")
                        .HasColumnName("guest_id");

                    b.Property<bool?>("IsMinimized")
                        .HasColumnType("boolean")
                        .HasColumnName("is_minimized");

                    b.Property<bool?>("IsPinned")
                        .HasColumnType("boolean")
                        .HasColumnName("is_pinned");

                    b.Property<DateTime?>("LastInterestDt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_interest_dt");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<DateTime?>("LastSeenDt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_seen_dt");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid?>("RtcInvitingSessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("rtc_inviting_session_id");

                    b.Property<Guid?>("SeenMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("seen_message_id");

                    b.HasKey("Id")
                        .HasName("mail_channel_member_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FetchedMessageId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("RtcInvitingSessionId");

                    b.HasIndex("SeenMessageId");

                    b.HasIndex(new[] { "GuestId" }, "mail_channel_member_guest_id_index")
                        .HasDatabaseName("mail_channel_member_guest_id_index");

                    b.HasIndex(new[] { "ChannelId", "GuestId" }, "mail_channel_member_guest_unique")
                        .IsUnique()
                        .HasDatabaseName("mail_channel_member_guest_unique")
                        .HasFilter("(guest_id IS NOT NULL)");

                    b.HasIndex(new[] { "PartnerId" }, "mail_channel_member_partner_id_index")
                        .HasDatabaseName("mail_channel_member_partner_id_index");

                    b.HasIndex(new[] { "ChannelId", "PartnerId" }, "mail_channel_member_partner_unique")
                        .IsUnique()
                        .HasDatabaseName("mail_channel_member_partner_unique")
                        .HasFilter("(partner_id IS NOT NULL)");

                    b.HasIndex(new[] { "ChannelId", "PartnerId", "SeenMessageId" }, "mail_channel_member_seen_message_id_idx")
                        .HasDatabaseName("mail_channel_member_seen_message_id_idx");

                    b.ToTable("mail_channel_member", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailChannelRtcSession", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("ChannelId")
                        .HasColumnType("uuid")
                        .HasColumnName("channel_id");

                    b.Property<Guid?>("ChannelMemberId")
                        .HasColumnType("uuid")
                        .HasColumnName("channel_member_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("IsCameraOn")
                        .HasColumnType("boolean")
                        .HasColumnName("is_camera_on");

                    b.Property<bool?>("IsDeaf")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deaf");

                    b.Property<bool?>("IsMuted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_muted");

                    b.Property<bool?>("IsScreenSharingOn")
                        .HasColumnType("boolean")
                        .HasColumnName("is_screen_sharing_on");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("mail_channel_rtc_session_pkey");

                    b.HasIndex("ChannelId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "ChannelMemberId" }, "mail_channel_rtc_session_channel_member_unique")
                        .IsUnique()
                        .HasDatabaseName("mail_channel_rtc_session_channel_member_unique");

                    b.HasIndex(new[] { "LastModificationTime" }, "mail_channel_rtc_session_write_date_index")
                        .HasDatabaseName("mail_channel_rtc_session_write_date_index");

                    b.ToTable("mail_channel_rtc_session", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailComposeMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("ActiveDomain")
                        .HasColumnType("text")
                        .HasColumnName("active_domain");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<bool?>("AutoDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_delete");

                    b.Property<bool?>("AutoDeleteMessage")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_delete_message");

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<string>("CompositionMode")
                        .HasColumnType("text")
                        .HasColumnName("composition_mode");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("EmailAddSignature")
                        .HasColumnType("boolean")
                        .HasColumnName("email_add_signature");

                    b.Property<string>("EmailFrom")
                        .HasColumnType("text")
                        .HasColumnName("email_from");

                    b.Property<string>("EmailLayoutXmlid")
                        .HasColumnType("text")
                        .HasColumnName("email_layout_xmlid");

                    b.Property<bool?>("IsLog")
                        .HasColumnType("boolean")
                        .HasColumnName("is_log");

                    b.Property<string>("Lang")
                        .HasColumnType("text")
                        .HasColumnName("lang");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("MailActivityTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("mail_activity_type_id");

                    b.Property<Guid?>("MailServerId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_server_id");

                    b.Property<string>("MessageType")
                        .HasColumnType("text")
                        .HasColumnName("message_type");

                    b.Property<string>("Model")
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<bool?>("Notify")
                        .HasColumnType("boolean")
                        .HasColumnName("notify");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("RecordName")
                        .HasColumnType("text")
                        .HasColumnName("record_name");

                    b.Property<string>("ReplyTo")
                        .HasColumnType("text")
                        .HasColumnName("reply_to");

                    b.Property<bool?>("ReplyToForceNew")
                        .HasColumnType("boolean")
                        .HasColumnName("reply_to_force_new");

                    b.Property<Guid?>("ResId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_id");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<long?>("SubtypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("subtype_id");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.Property<bool?>("UseActiveDomain")
                        .HasColumnType("boolean")
                        .HasColumnName("use_active_domain");

                    b.HasKey("Id")
                        .HasName("mail_compose_message_pkey");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MailActivityTypeId");

                    b.HasIndex("MailServerId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SubtypeId");

                    b.HasIndex("TemplateId");

                    b.ToTable("mail_compose_message", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailFollower", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid?>("ResId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_id");

                    b.Property<string>("ResModel")
                        .HasColumnType("text")
                        .HasColumnName("res_model");

                    b.HasKey("Id")
                        .HasName("mail_followers_pkey");

                    b.HasIndex(new[] { "ResModel", "ResId", "PartnerId" }, "mail_followers_mail_followers_res_partner_res_model_id_uniq")
                        .IsUnique()
                        .HasDatabaseName("mail_followers_mail_followers_res_partner_res_model_id_uniq");

                    b.HasIndex(new[] { "PartnerId" }, "mail_followers_partner_id_index")
                        .HasDatabaseName("mail_followers_partner_id_index");

                    b.HasIndex(new[] { "ResId" }, "mail_followers_res_id_index")
                        .HasDatabaseName("mail_followers_res_id_index");

                    b.HasIndex(new[] { "ResModel" }, "mail_followers_res_model_index")
                        .HasDatabaseName("mail_followers_res_model_index");

                    b.ToTable("mail_followers", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailGatewayAllowed", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("EmailNormalized")
                        .HasColumnType("text")
                        .HasColumnName("email_normalized");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("mail_gateway_allowed_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "EmailNormalized" }, "mail_gateway_allowed_email_normalized_index")
                        .HasDatabaseName("mail_gateway_allowed_email_normalized_index");

                    b.ToTable("mail_gateway_allowed", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailGuest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Lang")
                        .HasColumnType("text")
                        .HasColumnName("lang");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Timezone")
                        .HasColumnType("text")
                        .HasColumnName("timezone");

                    b.HasKey("Id")
                        .HasName("mail_guest_pkey");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("mail_guest", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailIceServer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Credential")
                        .HasColumnType("text")
                        .HasColumnName("credential");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("ServerType")
                        .HasColumnType("text")
                        .HasColumnName("server_type");

                    b.Property<string>("Uri")
                        .HasColumnType("text")
                        .HasColumnName("uri");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("mail_ice_server_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("mail_ice_server", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailLinkPreview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("ImageMimetype")
                        .HasColumnType("text")
                        .HasColumnName("image_mimetype");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<string>("OgDescription")
                        .HasColumnType("text")
                        .HasColumnName("og_description");

                    b.Property<string>("OgImage")
                        .HasColumnType("text")
                        .HasColumnName("og_image");

                    b.Property<string>("OgMimetype")
                        .HasColumnType("text")
                        .HasColumnName("og_mimetype");

                    b.Property<string>("OgTitle")
                        .HasColumnType("text")
                        .HasColumnName("og_title");

                    b.Property<string>("OgType")
                        .HasColumnType("text")
                        .HasColumnName("og_type");

                    b.Property<string>("SourceUrl")
                        .HasColumnType("text")
                        .HasColumnName("source_url");

                    b.HasKey("Id")
                        .HasName("mail_link_preview_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "CreationTime" }, "mail_link_preview_create_date_index")
                        .HasDatabaseName("mail_link_preview_create_date_index");

                    b.HasIndex(new[] { "MessageId" }, "mail_link_preview_message_id_index")
                        .HasDatabaseName("mail_link_preview_message_id_index");

                    b.ToTable("mail_link_preview", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailMail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("AutoDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_delete");

                    b.Property<string>("BodyHtml")
                        .HasColumnType("text")
                        .HasColumnName("body_html");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("EmailCc")
                        .HasColumnType("text")
                        .HasColumnName("email_cc");

                    b.Property<string>("EmailTo")
                        .HasColumnType("text")
                        .HasColumnName("email_to");

                    b.Property<string>("FailureReason")
                        .HasColumnType("text")
                        .HasColumnName("failure_reason");

                    b.Property<string>("FailureType")
                        .HasColumnType("text")
                        .HasColumnName("failure_type");

                    b.Property<Guid?>("FetchmailServerId")
                        .HasColumnType("uuid")
                        .HasColumnName("fetchmail_server_id");

                    b.Property<string>("Headers")
                        .HasColumnType("text")
                        .HasColumnName("headers");

                    b.Property<bool?>("IsNotification")
                        .HasColumnType("boolean")
                        .HasColumnName("is_notification");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MailMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_message_id");

                    b.Property<string>("References")
                        .HasColumnType("text")
                        .HasColumnName("references");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("scheduled_date");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<bool?>("ToDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("to_delete");

                    b.HasKey("Id")
                        .HasName("mail_mail_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FetchmailServerId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "MailMessageId" }, "mail_mail_mail_message_id_index")
                        .HasDatabaseName("mail_mail_mail_message_id_index");

                    b.HasIndex(new[] { "Id" }, "mail_mail_to_delete_idx")
                        .HasDatabaseName("mail_mail_to_delete_idx")
                        .HasFilter("(to_delete = true)");

                    b.ToTable("mail_mail", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AuthorGuestId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_guest_id");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<bool?>("EmailAddSignature")
                        .HasColumnType("boolean")
                        .HasColumnName("email_add_signature");

                    b.Property<string>("EmailFrom")
                        .HasColumnType("text")
                        .HasColumnName("email_from");

                    b.Property<string>("EmailLayoutXmlid")
                        .HasColumnType("text")
                        .HasColumnName("email_layout_xmlid");

                    b.Property<bool?>("IsInternal")
                        .HasColumnType("boolean")
                        .HasColumnName("is_internal");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("MailActivityTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("mail_activity_type_id");

                    b.Property<Guid?>("MailServerId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_server_id");

                    b.Property<string>("MessageId")
                        .HasColumnType("text")
                        .HasColumnName("message_id");

                    b.Property<string>("MessageType")
                        .HasColumnType("text")
                        .HasColumnName("message_type");

                    b.Property<string>("Model")
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("RecordName")
                        .HasColumnType("text")
                        .HasColumnName("record_name");

                    b.Property<string>("ReplyTo")
                        .HasColumnType("text")
                        .HasColumnName("reply_to");

                    b.Property<bool?>("ReplyToForceNew")
                        .HasColumnType("boolean")
                        .HasColumnName("reply_to_force_new");

                    b.Property<Guid?>("ResId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_id");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<long?>("SubtypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("subtype_id");

                    b.HasKey("Id")
                        .HasName("mail_message_pkey");

                    b.HasIndex("AuthorGuestId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MailServerId");

                    b.HasIndex(new[] { "AuthorId" }, "mail_message_author_id_index")
                        .HasDatabaseName("mail_message_author_id_index");

                    b.HasIndex(new[] { "MailActivityTypeId" }, "mail_message_mail_activity_type_id_index")
                        .HasDatabaseName("mail_message_mail_activity_type_id_index");

                    b.HasIndex(new[] { "MessageId" }, "mail_message_message_id_index")
                        .HasDatabaseName("mail_message_message_id_index");

                    b.HasIndex(new[] { "Model", "ResId", "Id" }, "mail_message_model_res_id_id_idx")
                        .HasDatabaseName("mail_message_model_res_id_id_idx");

                    b.HasIndex(new[] { "Model", "ResId" }, "mail_message_model_res_id_idx")
                        .HasDatabaseName("mail_message_model_res_id_idx");

                    b.HasIndex(new[] { "ParentId" }, "mail_message_parent_id_index")
                        .HasDatabaseName("mail_message_parent_id_index")
                        .HasFilter("(parent_id IS NOT NULL)");

                    b.HasIndex(new[] { "SubtypeId" }, "mail_message_subtype_id_index")
                        .HasDatabaseName("mail_message_subtype_id_index");

                    b.ToTable("mail_message", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailMessageReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid?>("GuestId")
                        .HasColumnType("uuid")
                        .HasColumnName("guest_id");

                    b.Property<Guid?>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.HasKey("Id")
                        .HasName("mail_message_reaction_pkey");

                    b.HasIndex("GuestId");

                    b.HasIndex("PartnerId");

                    b.HasIndex(new[] { "MessageId", "Content", "GuestId" }, "mail_message_reaction_guest_unique")
                        .IsUnique()
                        .HasDatabaseName("mail_message_reaction_guest_unique")
                        .HasFilter("(guest_id IS NOT NULL)");

                    b.HasIndex(new[] { "MessageId", "Content", "PartnerId" }, "mail_message_reaction_partner_unique")
                        .IsUnique()
                        .HasDatabaseName("mail_message_reaction_partner_unique")
                        .HasFilter("(partner_id IS NOT NULL)");

                    b.ToTable("mail_message_reaction", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailMessageSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MailMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_message_id");

                    b.Property<string>("NotificationParameters")
                        .HasColumnType("text")
                        .HasColumnName("notification_parameters");

                    b.Property<DateTime?>("ScheduledDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("scheduled_datetime");

                    b.HasKey("Id")
                        .HasName("mail_message_schedule_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MailMessageId");

                    b.ToTable("mail_message_schedule", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailMessageSubtype", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("Default")
                        .HasColumnType("boolean")
                        .HasColumnName("default");

                    b.Property<string>("Description")
                        .HasColumnType("jsonb")
                        .HasColumnName("description");

                    b.Property<bool?>("Hidden")
                        .HasColumnType("boolean")
                        .HasColumnName("hidden");

                    b.Property<bool?>("Internal")
                        .HasColumnType("boolean")
                        .HasColumnName("internal");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<string>("RelationField")
                        .HasColumnType("text")
                        .HasColumnName("relation_field");

                    b.Property<string>("ResModel")
                        .HasColumnType("text")
                        .HasColumnName("res_model");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.Property<bool?>("TrackRecipients")
                        .HasColumnType("boolean")
                        .HasColumnName("track_recipients");

                    b.HasKey("Id")
                        .HasName("mail_message_subtype_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ParentId");

                    b.ToTable("mail_message_subtype", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<string>("FailureReason")
                        .HasColumnType("text")
                        .HasColumnName("failure_reason");

                    b.Property<string>("FailureType")
                        .HasColumnType("text")
                        .HasColumnName("failure_type");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<Guid?>("LetterId")
                        .HasColumnType("uuid")
                        .HasColumnName("letter_id");

                    b.Property<Guid?>("MailMailId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_mail_id");

                    b.Property<Guid?>("MailMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_message_id");

                    b.Property<string>("NotificationStatus")
                        .HasColumnType("text")
                        .HasColumnName("notification_status");

                    b.Property<string>("NotificationType")
                        .HasColumnType("text")
                        .HasColumnName("notification_type");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("read_date");

                    b.Property<Guid?>("ResPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_partner_id");

                    b.Property<Guid?>("SmsId")
                        .HasColumnType("uuid")
                        .HasColumnName("sms_id");

                    b.Property<string>("SmsNumber")
                        .HasColumnType("text")
                        .HasColumnName("sms_number");

                    b.HasKey("Id")
                        .HasName("mail_notification_pkey");

                    b.HasIndex(new[] { "AuthorId", "NotificationStatus" }, "mail_notification_author_id_notification_status_failure")
                        .HasDatabaseName("mail_notification_author_id_notification_status_failure")
                        .HasFilter("(notification_status = ANY (ARRAY[('bounce'::character varying)::text, ('exception'::character varying)::text]))");

                    b.HasIndex(new[] { "IsRead" }, "mail_notification_is_read_index")
                        .HasDatabaseName("mail_notification_is_read_index");

                    b.HasIndex(new[] { "LetterId" }, "mail_notification_letter_id_index")
                        .HasDatabaseName("mail_notification_letter_id_index")
                        .HasFilter("(letter_id IS NOT NULL)");

                    b.HasIndex(new[] { "MailMailId" }, "mail_notification_mail_mail_id_index")
                        .HasDatabaseName("mail_notification_mail_mail_id_index");

                    b.HasIndex(new[] { "MailMessageId" }, "mail_notification_mail_message_id_index")
                        .HasDatabaseName("mail_notification_mail_message_id_index");

                    b.HasIndex(new[] { "NotificationStatus" }, "mail_notification_notification_status_index")
                        .HasDatabaseName("mail_notification_notification_status_index");

                    b.HasIndex(new[] { "NotificationType" }, "mail_notification_notification_type_index")
                        .HasDatabaseName("mail_notification_notification_type_index");

                    b.HasIndex(new[] { "ResPartnerId" }, "mail_notification_res_partner_id_index")
                        .HasDatabaseName("mail_notification_res_partner_id_index");

                    b.HasIndex(new[] { "ResPartnerId", "IsRead", "NotificationStatus", "MailMessageId" }, "mail_notification_res_partner_id_is_read_notification_status_ma")
                        .HasDatabaseName("mail_notification_res_partner_id_is_read_notification_status_ma");

                    b.HasIndex(new[] { "SmsId" }, "mail_notification_sms_id_index")
                        .HasDatabaseName("mail_notification_sms_id_index")
                        .HasFilter("(sms_id IS NOT NULL)");

                    b.HasIndex(new[] { "MailMessageId", "ResPartnerId" }, "unique_mail_message_id_res_partner_id_if_set")
                        .IsUnique()
                        .HasDatabaseName("unique_mail_message_id_res_partner_id_if_set")
                        .HasFilter("(res_partner_id IS NOT NULL)");

                    b.ToTable("mail_notification", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailResendMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MailMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_message_id");

                    b.HasKey("Id")
                        .HasName("mail_resend_message_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MailMessageId");

                    b.ToTable("mail_resend_message", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailResendPartner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<bool?>("Resend")
                        .HasColumnType("boolean")
                        .HasColumnName("resend");

                    b.Property<Guid?>("ResendWizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("resend_wizard_id");

                    b.HasKey("Id")
                        .HasName("mail_resend_partner_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ResendWizardId");

                    b.ToTable("mail_resend_partner", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailShortcode", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("Substitution")
                        .HasColumnType("text")
                        .HasColumnName("substitution");

                    b.HasKey("Id")
                        .HasName("mail_shortcode_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Source" }, "mail_shortcode_source_index")
                        .HasDatabaseName("mail_shortcode_source_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "Source" }, "mail_shortcode_source_index"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Source" }, "mail_shortcode_source_index"), new[] { "gin_trgm_ops" });

                    b.ToTable("mail_shortcode", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<bool?>("AutoDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_delete");

                    b.Property<string>("BodyHtml")
                        .HasColumnType("jsonb")
                        .HasColumnName("body_html");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Description")
                        .HasColumnType("jsonb")
                        .HasColumnName("description");

                    b.Property<string>("EmailCc")
                        .HasColumnType("text")
                        .HasColumnName("email_cc");

                    b.Property<string>("EmailFrom")
                        .HasColumnType("text")
                        .HasColumnName("email_from");

                    b.Property<string>("EmailTo")
                        .HasColumnType("text")
                        .HasColumnName("email_to");

                    b.Property<string>("Lang")
                        .HasColumnType("text")
                        .HasColumnName("lang");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MailServerId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_server_id");

                    b.Property<string>("Model")
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("model_id");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("PartnerTo")
                        .HasColumnType("text")
                        .HasColumnName("partner_to");

                    b.Property<Guid?>("RefIrActWindow")
                        .HasColumnType("uuid")
                        .HasColumnName("ref_ir_act_window");

                    b.Property<string>("ReplyTo")
                        .HasColumnType("text")
                        .HasColumnName("reply_to");

                    b.Property<string>("ReportName")
                        .HasColumnType("jsonb")
                        .HasColumnName("report_name");

                    b.Property<Guid?>("ReportTemplate")
                        .HasColumnType("uuid")
                        .HasColumnName("report_template");

                    b.Property<string>("ScheduledDate")
                        .HasColumnType("text")
                        .HasColumnName("scheduled_date");

                    b.Property<string>("Subject")
                        .HasColumnType("jsonb")
                        .HasColumnName("subject");

                    b.Property<string>("TemplateFs")
                        .HasColumnType("text")
                        .HasColumnName("template_fs");

                    b.Property<bool?>("UseDefaultTo")
                        .HasColumnType("boolean")
                        .HasColumnName("use_default_to");

                    b.HasKey("Id")
                        .HasName("mail_template_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MailServerId");

                    b.HasIndex("ModelId");

                    b.HasIndex("RefIrActWindow");

                    b.HasIndex("ReportTemplate");

                    b.HasIndex(new[] { "Model" }, "mail_template_model_index")
                        .HasDatabaseName("mail_template_model_index");

                    b.ToTable("mail_template", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailTemplatePreview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("ErrorMsg")
                        .HasColumnType("text")
                        .HasColumnName("error_msg");

                    b.Property<string>("Lang")
                        .HasColumnType("text")
                        .HasColumnName("lang");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MailTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_template_id");

                    b.Property<string>("ResourceRef")
                        .HasColumnType("text")
                        .HasColumnName("resource_ref");

                    b.HasKey("Id")
                        .HasName("mail_template_preview_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MailTemplateId");

                    b.ToTable("mail_template_preview", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailTemplateReset", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("mail_template_reset_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("mail_template_reset", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailTrackingValue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<Guid?>("Field")
                        .HasColumnType("uuid")
                        .HasColumnName("field");

                    b.Property<string>("FieldDesc")
                        .HasColumnType("text")
                        .HasColumnName("field_desc");

                    b.Property<string>("FieldType")
                        .HasColumnType("text")
                        .HasColumnName("field_type");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MailMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_message_id");

                    b.Property<string>("NewValueChar")
                        .HasColumnType("text")
                        .HasColumnName("new_value_char");

                    b.Property<DateTime?>("NewValueDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("new_value_datetime");

                    b.Property<double?>("NewValueFloat")
                        .HasColumnType("double precision")
                        .HasColumnName("new_value_float");

                    b.Property<long?>("NewValueInteger")
                        .HasColumnType("bigint")
                        .HasColumnName("new_value_integer");

                    b.Property<double?>("NewValueMonetary")
                        .HasColumnType("double precision")
                        .HasColumnName("new_value_monetary");

                    b.Property<string>("NewValueText")
                        .HasColumnType("text")
                        .HasColumnName("new_value_text");

                    b.Property<string>("OldValueChar")
                        .HasColumnType("text")
                        .HasColumnName("old_value_char");

                    b.Property<DateTime?>("OldValueDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("old_value_datetime");

                    b.Property<double?>("OldValueFloat")
                        .HasColumnType("double precision")
                        .HasColumnName("old_value_float");

                    b.Property<long?>("OldValueInteger")
                        .HasColumnType("bigint")
                        .HasColumnName("old_value_integer");

                    b.Property<double?>("OldValueMonetary")
                        .HasColumnType("double precision")
                        .HasColumnName("old_value_monetary");

                    b.Property<string>("OldValueText")
                        .HasColumnType("text")
                        .HasColumnName("old_value_text");

                    b.Property<long?>("TrackingSequence")
                        .HasColumnType("bigint")
                        .HasColumnName("tracking_sequence");

                    b.HasKey("Id")
                        .HasName("mail_tracking_value_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Field" }, "mail_tracking_value_field_index")
                        .HasDatabaseName("mail_tracking_value_field_index");

                    b.HasIndex(new[] { "MailMessageId" }, "mail_tracking_value_mail_message_id_index")
                        .HasDatabaseName("mail_tracking_value_mail_message_id_index");

                    b.ToTable("mail_tracking_value", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailWizardInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<Guid?>("ResId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_id");

                    b.Property<string>("ResModel")
                        .HasColumnType("text")
                        .HasColumnName("res_model");

                    b.Property<bool?>("SendMail")
                        .HasColumnType("boolean")
                        .HasColumnName("send_mail");

                    b.HasKey("Id")
                        .HasName("mail_wizard_invite_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("mail_wizard_invite", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MaintenanceEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("AssignDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("assign_date");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<double?>("Cost")
                        .HasColumnType("double precision")
                        .HasColumnName("cost");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("effective_date");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<string>("EquipmentAssignTo")
                        .HasColumnType("text")
                        .HasColumnName("equipment_assign_to");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<long?>("MaintenanceCount")
                        .HasColumnType("bigint")
                        .HasColumnName("maintenance_count");

                    b.Property<double?>("MaintenanceDuration")
                        .HasColumnType("double precision")
                        .HasColumnName("maintenance_duration");

                    b.Property<long?>("MaintenanceOpenCount")
                        .HasColumnType("bigint")
                        .HasColumnName("maintenance_open_count");

                    b.Property<Guid?>("MaintenanceTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("maintenance_team_id");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Model")
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<DateTime?>("NextActionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("next_action_date");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<Guid?>("OwnerUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_user_id");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<string>("PartnerRef")
                        .HasColumnType("text")
                        .HasColumnName("partner_ref");

                    b.Property<long?>("Period")
                        .HasColumnType("bigint")
                        .HasColumnName("period");

                    b.Property<DateTime?>("ScrapDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("scrap_date");

                    b.Property<string>("SerialNo")
                        .HasColumnType("text")
                        .HasColumnName("serial_no");

                    b.Property<Guid?>("TechnicianUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("technician_user_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("WarrantyDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("warranty_date");

                    b.HasKey("Id")
                        .HasName("maintenance_equipment_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MaintenanceTeamId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("TechnicianUserId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "SerialNo" }, "maintenance_equipment_serial_no")
                        .IsUnique()
                        .HasDatabaseName("maintenance_equipment_serial_no");

                    b.ToTable("maintenance_equipment", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MaintenanceEquipmentCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("alias_id");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("Fold")
                        .HasColumnType("boolean")
                        .HasColumnName("fold");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("jsonb")
                        .HasColumnName("note");

                    b.Property<Guid?>("TechnicianUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("technician_user_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("maintenance_equipment_category_pkey");

                    b.HasIndex("AliasId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("TechnicianUserId");

                    b.HasIndex("TenantId");

                    b.ToTable("maintenance_equipment_category", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MaintenanceRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Archive")
                        .HasColumnType("boolean")
                        .HasColumnName("archive");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("close_date");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<double?>("Duration")
                        .HasColumnType("double precision")
                        .HasColumnName("duration");

                    b.Property<string>("EmailCc")
                        .HasColumnType("text")
                        .HasColumnName("email_cc");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<Guid?>("EquipmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("equipment_id");

                    b.Property<string>("KanbanState")
                        .HasColumnType("text")
                        .HasColumnName("kanban_state");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MaintenanceTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("maintenance_team_id");

                    b.Property<string>("MaintenanceType")
                        .HasColumnType("text")
                        .HasColumnName("maintenance_type");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("OwnerUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_user_id");

                    b.Property<string>("Priority")
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("request_date");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("schedule_date");

                    b.Property<long?>("StageId")
                        .HasColumnType("bigint")
                        .HasColumnName("stage_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("maintenance_request_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MaintenanceTeamId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("StageId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "EquipmentId" }, "maintenance_request_equipment_id_index")
                        .HasDatabaseName("maintenance_request_equipment_id_index");

                    b.ToTable("maintenance_request", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MaintenanceStage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("Done")
                        .HasColumnType("boolean")
                        .HasColumnName("done");

                    b.Property<bool?>("Fold")
                        .HasColumnType("boolean")
                        .HasColumnName("fold");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.HasKey("Id")
                        .HasName("maintenance_stage_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("maintenance_stage", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MaintenanceTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("maintenance_team_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("maintenance_team", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpBom", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<bool?>("AllowOperationDependencies")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_operation_dependencies");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Consumption")
                        .HasColumnType("text")
                        .HasColumnName("consumption");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<Guid?>("PickingTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("picking_type_id");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<decimal?>("ProductQty")
                        .HasColumnType("numeric")
                        .HasColumnName("product_qty");

                    b.Property<Guid?>("ProductTmplId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_tmpl_id");

                    b.Property<Guid?>("ProductUomId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_uom_id");

                    b.Property<string>("ReadyToProduce")
                        .HasColumnType("text")
                        .HasColumnName("ready_to_produce");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("mrp_bom_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("PickingTypeId");

                    b.HasIndex("ProductUomId");

                    b.HasIndex(new[] { "TenantId" }, "mrp_bom_company_id_index")
                        .HasDatabaseName("mrp_bom_company_id_index");

                    b.HasIndex(new[] { "ProductId" }, "mrp_bom_product_id_index")
                        .HasDatabaseName("mrp_bom_product_id_index");

                    b.HasIndex(new[] { "ProductTmplId" }, "mrp_bom_product_tmpl_id_index")
                        .HasDatabaseName("mrp_bom_product_tmpl_id_index");

                    b.ToTable("mrp_bom", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpBomByproduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("BomId")
                        .HasColumnType("uuid")
                        .HasColumnName("bom_id");

                    b.Property<decimal?>("CostShare")
                        .HasColumnType("numeric")
                        .HasColumnName("cost_share");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("OperationId")
                        .HasColumnType("uuid")
                        .HasColumnName("operation_id");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<decimal?>("ProductQty")
                        .HasColumnType("numeric")
                        .HasColumnName("product_qty");

                    b.Property<Guid?>("ProductUomId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_uom_id");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("mrp_bom_byproduct_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("OperationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductUomId");

                    b.HasIndex(new[] { "BomId" }, "mrp_bom_byproduct_bom_id_index")
                        .HasDatabaseName("mrp_bom_byproduct_bom_id_index");

                    b.HasIndex(new[] { "TenantId" }, "mrp_bom_byproduct_company_id_index")
                        .HasDatabaseName("mrp_bom_byproduct_company_id_index");

                    b.ToTable("mrp_bom_byproduct", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpBomLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("BomId")
                        .HasColumnType("uuid")
                        .HasColumnName("bom_id");

                    b.Property<decimal?>("CostShare")
                        .HasColumnType("numeric")
                        .HasColumnName("cost_share");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<bool?>("ManualConsumption")
                        .HasColumnType("boolean")
                        .HasColumnName("manual_consumption");

                    b.Property<Guid?>("OperationId")
                        .HasColumnType("uuid")
                        .HasColumnName("operation_id");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<decimal?>("ProductQty")
                        .HasColumnType("numeric")
                        .HasColumnName("product_qty");

                    b.Property<Guid?>("ProductTmplId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_tmpl_id");

                    b.Property<Guid?>("ProductUomId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_uom_id");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("mrp_bom_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("OperationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductUomId");

                    b.HasIndex(new[] { "BomId" }, "mrp_bom_line_bom_id_index")
                        .HasDatabaseName("mrp_bom_line_bom_id_index");

                    b.HasIndex(new[] { "TenantId" }, "mrp_bom_line_company_id_index")
                        .HasDatabaseName("mrp_bom_line_company_id_index");

                    b.HasIndex(new[] { "ProductTmplId" }, "mrp_bom_line_product_tmpl_id_index")
                        .HasDatabaseName("mrp_bom_line_product_tmpl_id_index");

                    b.ToTable("mrp_bom_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpConsumptionWarning", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("mrp_consumption_warning_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("mrp_consumption_warning", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpConsumptionWarningLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MrpConsumptionWarningId")
                        .HasColumnType("uuid")
                        .HasColumnName("mrp_consumption_warning_id");

                    b.Property<Guid?>("MrpProductionId")
                        .HasColumnType("uuid")
                        .HasColumnName("mrp_production_id");

                    b.Property<double?>("ProductConsumedQtyUom")
                        .HasColumnType("double precision")
                        .HasColumnName("product_consumed_qty_uom");

                    b.Property<double?>("ProductExpectedQtyUom")
                        .HasColumnType("double precision")
                        .HasColumnName("product_expected_qty_uom");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("mrp_consumption_warning_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MrpConsumptionWarningId");

                    b.HasIndex("MrpProductionId");

                    b.HasIndex("ProductId");

                    b.ToTable("mrp_consumption_warning_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("IrAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("ir_attachment_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Priority")
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.HasKey("Id")
                        .HasName("mrp_document_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("IrAttachmentId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("mrp_document", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpImmediateProduction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("mrp_immediate_production_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("mrp_immediate_production", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpImmediateProductionLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("ImmediateProductionId")
                        .HasColumnType("uuid")
                        .HasColumnName("immediate_production_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ProductionId")
                        .HasColumnType("uuid")
                        .HasColumnName("production_id");

                    b.Property<bool?>("ToImmediate")
                        .HasColumnType("boolean")
                        .HasColumnName("to_immediate");

                    b.HasKey("Id")
                        .HasName("mrp_immediate_production_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ImmediateProductionId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductionId");

                    b.ToTable("mrp_immediate_production_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpProduction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("AllowWorkorderDependencies")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_workorder_dependencies");

                    b.Property<Guid?>("AnalyticAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("analytic_account_id");

                    b.Property<long>("BackorderSequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("backorder_sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("BackorderSequence"));

                    b.Property<Guid?>("BomId")
                        .HasColumnType("uuid")
                        .HasColumnName("bom_id");

                    b.Property<string>("Consumption")
                        .HasColumnType("text")
                        .HasColumnName("consumption");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateDeadline")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_deadline");

                    b.Property<DateTime?>("DateFinished")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_finished");

                    b.Property<DateTime?>("DatePlannedFinished")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_planned_finished");

                    b.Property<DateTime?>("DatePlannedStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_planned_start");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<double?>("ExtraCost")
                        .HasColumnType("double precision")
                        .HasColumnName("extra_cost");

                    b.Property<bool?>("IsLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_locked");

                    b.Property<bool?>("IsPlanned")
                        .HasColumnType("boolean")
                        .HasColumnName("is_planned");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LocationDestId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_dest_id");

                    b.Property<Guid?>("LocationSrcId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_src_id");

                    b.Property<Guid?>("LotProducingId")
                        .HasColumnType("uuid")
                        .HasColumnName("lot_producing_id");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("OrderpointId")
                        .HasColumnType("uuid")
                        .HasColumnName("orderpoint_id");

                    b.Property<string>("Origin")
                        .HasColumnType("text")
                        .HasColumnName("origin");

                    b.Property<Guid?>("PickingTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("picking_type_id");

                    b.Property<string>("Priority")
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<Guid?>("ProcurementGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("procurement_group_id");

                    b.Property<string>("ProductDescriptionVariants")
                        .HasColumnType("text")
                        .HasColumnName("product_description_variants");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<decimal?>("ProductQty")
                        .HasColumnType("numeric")
                        .HasColumnName("product_qty");

                    b.Property<Guid?>("ProductUomId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_uom_id");

                    b.Property<double?>("ProductUomQty")
                        .HasColumnType("double precision")
                        .HasColumnName("product_uom_qty");

                    b.Property<Guid?>("ProductionLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("production_location_id");

                    b.Property<bool?>("PropagateCancel")
                        .HasColumnType("boolean")
                        .HasColumnName("propagate_cancel");

                    b.Property<decimal?>("QtyProducing")
                        .HasColumnType("numeric")
                        .HasColumnName("qty_producing");

                    b.Property<string>("ReservationState")
                        .HasColumnType("text")
                        .HasColumnName("reservation_state");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("mrp_production_pkey");

                    b.HasIndex("AnalyticAccountId");

                    b.HasIndex("BomId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LocationDestId");

                    b.HasIndex("LocationSrcId");

                    b.HasIndex("LotProducingId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("ProcurementGroupId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductUomId");

                    b.HasIndex("ProductionLocationId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "TenantId" }, "mrp_production_company_id_index")
                        .HasDatabaseName("mrp_production_company_id_index");

                    b.HasIndex(new[] { "DatePlannedStart" }, "mrp_production_date_planned_start_index")
                        .HasDatabaseName("mrp_production_date_planned_start_index");

                    b.HasIndex(new[] { "Name", "TenantId" }, "mrp_production_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("mrp_production_name_uniq");

                    b.HasIndex(new[] { "OrderpointId" }, "mrp_production_orderpoint_id_index")
                        .HasDatabaseName("mrp_production_orderpoint_id_index")
                        .HasFilter("(orderpoint_id IS NOT NULL)");

                    b.HasIndex(new[] { "PickingTypeId" }, "mrp_production_picking_type_id_index")
                        .HasDatabaseName("mrp_production_picking_type_id_index");

                    b.HasIndex(new[] { "ReservationState" }, "mrp_production_reservation_state_index")
                        .HasDatabaseName("mrp_production_reservation_state_index");

                    b.HasIndex(new[] { "State" }, "mrp_production_state_index")
                        .HasDatabaseName("mrp_production_state_index");

                    b.ToTable("mrp_production", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpProductionBackorder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("mrp_production_backorder_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("mrp_production_backorder", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpProductionBackorderLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MrpProductionBackorderId")
                        .HasColumnType("uuid")
                        .HasColumnName("mrp_production_backorder_id");

                    b.Property<Guid?>("MrpProductionId")
                        .HasColumnType("uuid")
                        .HasColumnName("mrp_production_id");

                    b.Property<bool?>("ToBackorder")
                        .HasColumnType("boolean")
                        .HasColumnName("to_backorder");

                    b.HasKey("Id")
                        .HasName("mrp_production_backorder_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MrpProductionBackorderId");

                    b.HasIndex("MrpProductionId");

                    b.ToTable("mrp_production_backorder_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpProductionSplit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<long?>("Counter")
                        .HasColumnType("bigint")
                        .HasColumnName("counter");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ProductionId")
                        .HasColumnType("uuid")
                        .HasColumnName("production_id");

                    b.Property<Guid?>("ProductionSplitMultiId")
                        .HasColumnType("uuid")
                        .HasColumnName("production_split_multi_id");

                    b.HasKey("Id")
                        .HasName("mrp_production_split_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductionId");

                    b.HasIndex("ProductionSplitMultiId");

                    b.ToTable("mrp_production_split", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpProductionSplitLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MrpProductionSplitId")
                        .HasColumnType("uuid")
                        .HasColumnName("mrp_production_split_id");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("mrp_production_split_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MrpProductionSplitId");

                    b.HasIndex("UserId");

                    b.ToTable("mrp_production_split_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpProductionSplitMulti", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("mrp_production_split_multi_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("mrp_production_split_multi", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpRoutingWorkcenter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<Guid?>("BomId")
                        .HasColumnType("uuid")
                        .HasColumnName("bom_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<double?>("TimeCycleManual")
                        .HasColumnType("double precision")
                        .HasColumnName("time_cycle_manual");

                    b.Property<string>("TimeMode")
                        .HasColumnType("text")
                        .HasColumnName("time_mode");

                    b.Property<long?>("TimeModeBatch")
                        .HasColumnType("bigint")
                        .HasColumnName("time_mode_batch");

                    b.Property<Guid?>("WorkcenterId")
                        .HasColumnType("uuid")
                        .HasColumnName("workcenter_id");

                    b.Property<string>("WorksheetGoogleSlide")
                        .HasColumnType("text")
                        .HasColumnName("worksheet_google_slide");

                    b.Property<string>("WorksheetType")
                        .HasColumnType("text")
                        .HasColumnName("worksheet_type");

                    b.HasKey("Id")
                        .HasName("mrp_routing_workcenter_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("WorkcenterId");

                    b.HasIndex(new[] { "BomId" }, "mrp_routing_workcenter_bom_id_index")
                        .HasDatabaseName("mrp_routing_workcenter_bom_id_index");

                    b.ToTable("mrp_routing_workcenter", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpUnbuild", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("BomId")
                        .HasColumnType("uuid")
                        .HasColumnName("bom_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LocationDestId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_dest_id");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<Guid?>("LotId")
                        .HasColumnType("uuid")
                        .HasColumnName("lot_id");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<Guid?>("MoId")
                        .HasColumnType("uuid")
                        .HasColumnName("mo_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<double?>("ProductQty")
                        .HasColumnType("double precision")
                        .HasColumnName("product_qty");

                    b.Property<Guid?>("ProductUomId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_uom_id");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("mrp_unbuild_pkey");

                    b.HasIndex("BomId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LocationDestId");

                    b.HasIndex("LocationId");

                    b.HasIndex("LotId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("MoId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductUomId");

                    b.HasIndex(new[] { "TenantId" }, "mrp_unbuild_company_id_index")
                        .HasDatabaseName("mrp_unbuild_company_id_index");

                    b.ToTable("mrp_unbuild", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpWorkcenter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<double?>("CostsHour")
                        .HasColumnType("double precision")
                        .HasColumnName("costs_hour");

                    b.Property<Guid?>("CostsHourAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("costs_hour_account_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<double?>("DefaultCapacity")
                        .HasColumnType("double precision")
                        .HasColumnName("default_capacity");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<double?>("OeeTarget")
                        .HasColumnType("double precision")
                        .HasColumnName("oee_target");

                    b.Property<Guid?>("ResourceCalendarId")
                        .HasColumnType("uuid")
                        .HasColumnName("resource_calendar_id");

                    b.Property<Guid?>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("resource_id");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<double?>("TimeEfficiency")
                        .HasColumnType("double precision")
                        .HasColumnName("time_efficiency");

                    b.Property<double?>("TimeStart")
                        .HasColumnType("double precision")
                        .HasColumnName("time_start");

                    b.Property<double?>("TimeStop")
                        .HasColumnType("double precision")
                        .HasColumnName("time_stop");

                    b.Property<string>("WorkingState")
                        .HasColumnType("text")
                        .HasColumnName("working_state");

                    b.HasKey("Id")
                        .HasName("mrp_workcenter_pkey");

                    b.HasIndex("CostsHourAccountId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "TenantId" }, "mrp_workcenter_company_id_index")
                        .HasDatabaseName("mrp_workcenter_company_id_index");

                    b.HasIndex(new[] { "ResourceCalendarId" }, "mrp_workcenter_resource_calendar_id_index")
                        .HasDatabaseName("mrp_workcenter_resource_calendar_id_index");

                    b.HasIndex(new[] { "ResourceId" }, "mrp_workcenter_resource_id_index")
                        .HasDatabaseName("mrp_workcenter_resource_id_index");

                    b.ToTable("mrp_workcenter", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpWorkcenterCapacity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<double?>("Capacity")
                        .HasColumnType("double precision")
                        .HasColumnName("capacity");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<double?>("TimeStart")
                        .HasColumnType("double precision")
                        .HasColumnName("time_start");

                    b.Property<double?>("TimeStop")
                        .HasColumnType("double precision")
                        .HasColumnName("time_stop");

                    b.Property<Guid?>("WorkcenterId")
                        .HasColumnType("uuid")
                        .HasColumnName("workcenter_id");

                    b.HasKey("Id")
                        .HasName("mrp_workcenter_capacity_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "WorkcenterId", "ProductId" }, "mrp_workcenter_capacity_unique_product")
                        .IsUnique()
                        .HasDatabaseName("mrp_workcenter_capacity_unique_product");

                    b.ToTable("mrp_workcenter_capacity", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpWorkcenterProductivity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("CostAlreadyRecorded")
                        .HasColumnType("boolean")
                        .HasColumnName("cost_already_recorded");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<double?>("Duration")
                        .HasColumnType("double precision")
                        .HasColumnName("duration");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LossId")
                        .HasColumnType("uuid")
                        .HasColumnName("loss_id");

                    b.Property<string>("LossType")
                        .HasColumnType("text")
                        .HasColumnName("loss_type");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("WorkcenterId")
                        .HasColumnType("uuid")
                        .HasColumnName("workcenter_id");

                    b.Property<Guid?>("WorkorderId")
                        .HasColumnType("uuid")
                        .HasColumnName("workorder_id");

                    b.HasKey("Id")
                        .HasName("mrp_workcenter_productivity_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LossId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "TenantId" }, "mrp_workcenter_productivity_company_id_index")
                        .HasDatabaseName("mrp_workcenter_productivity_company_id_index");

                    b.HasIndex(new[] { "WorkcenterId" }, "mrp_workcenter_productivity_workcenter_id_index")
                        .HasDatabaseName("mrp_workcenter_productivity_workcenter_id_index");

                    b.HasIndex(new[] { "WorkorderId" }, "mrp_workcenter_productivity_workorder_id_index")
                        .HasDatabaseName("mrp_workcenter_productivity_workorder_id_index");

                    b.ToTable("mrp_workcenter_productivity", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpWorkcenterProductivityLoss", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("LossId")
                        .HasColumnType("bigint")
                        .HasColumnName("loss_id");

                    b.Property<string>("LossType")
                        .HasColumnType("text")
                        .HasColumnName("loss_type");

                    b.Property<bool?>("Manual")
                        .HasColumnType("boolean")
                        .HasColumnName("manual");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.HasKey("Id")
                        .HasName("mrp_workcenter_productivity_loss_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LossId");

                    b.ToTable("mrp_workcenter_productivity_loss", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpWorkcenterProductivityLossType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("LossType")
                        .HasColumnType("text")
                        .HasColumnName("loss_type");

                    b.HasKey("Id")
                        .HasName("mrp_workcenter_productivity_loss_type_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("mrp_workcenter_productivity_loss_type", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpWorkcenterTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("mrp_workcenter_tag_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Name" }, "mrp_workcenter_tag_tag_name_unique")
                        .IsUnique()
                        .HasDatabaseName("mrp_workcenter_tag_tag_name_unique");

                    b.ToTable("mrp_workcenter_tag", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpWorkorder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<double?>("CostsHour")
                        .HasColumnType("double precision")
                        .HasColumnName("costs_hour");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFinished")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_finished");

                    b.Property<DateTime?>("DatePlannedFinished")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_planned_finished");

                    b.Property<DateTime?>("DatePlannedStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_planned_start");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<double?>("Duration")
                        .HasColumnType("double precision")
                        .HasColumnName("duration");

                    b.Property<decimal?>("DurationExpected")
                        .HasColumnType("numeric")
                        .HasColumnName("duration_expected");

                    b.Property<long?>("DurationPercent")
                        .HasColumnType("bigint")
                        .HasColumnName("duration_percent");

                    b.Property<double?>("DurationUnit")
                        .HasColumnType("double precision")
                        .HasColumnName("duration_unit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LeaveId")
                        .HasColumnType("uuid")
                        .HasColumnName("leave_id");

                    b.Property<Guid?>("MoAnalyticAccountLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("mo_analytic_account_line_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("OperationId")
                        .HasColumnType("uuid")
                        .HasColumnName("operation_id");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ProductUomId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_uom_id");

                    b.Property<string>("ProductionAvailability")
                        .HasColumnType("text")
                        .HasColumnName("production_availability");

                    b.Property<DateTime?>("ProductionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("production_date");

                    b.Property<Guid?>("ProductionId")
                        .HasColumnType("uuid")
                        .HasColumnName("production_id");

                    b.Property<decimal?>("QtyProduced")
                        .HasColumnType("numeric")
                        .HasColumnName("qty_produced");

                    b.Property<decimal?>("QtyReportedFromPreviousWo")
                        .HasColumnType("numeric")
                        .HasColumnName("qty_reported_from_previous_wo");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("WcAnalyticAccountLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("wc_analytic_account_line_id");

                    b.Property<Guid?>("WorkcenterId")
                        .HasColumnType("uuid")
                        .HasColumnName("workcenter_id");

                    b.HasKey("Id")
                        .HasName("mrp_workorder_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LeaveId");

                    b.HasIndex("MoAnalyticAccountLineId");

                    b.HasIndex("OperationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductUomId");

                    b.HasIndex("ProductionId");

                    b.HasIndex("WcAnalyticAccountLineId");

                    b.HasIndex("WorkcenterId");

                    b.ToTable("mrp_workorder", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.NoteNote", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateDone")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_done");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Memo")
                        .HasColumnType("text")
                        .HasColumnName("memo");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool?>("Open")
                        .HasColumnType("boolean")
                        .HasColumnName("open");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("note_note_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("note_note", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.NoteStage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("Fold")
                        .HasColumnType("boolean")
                        .HasColumnName("fold");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("note_stage_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("UserId");

                    b.ToTable("note_stage", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.NoteTag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("note_tag_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Name" }, "note_tag_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("note_tag_name_uniq");

                    b.ToTable("note_tag", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PartnerStatRel", b =>
                {
                    b.Property<Guid>("OsvMemoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("osv_memory_id");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.HasKey("OsvMemoryId", "PartnerId")
                        .HasName("partner_stat_rel_pkey");

                    b.HasIndex(new[] { "PartnerId", "OsvMemoryId" }, "partner_stat_rel_partner_id_osv_memory_id_idx")
                        .HasDatabaseName("partner_stat_rel_partner_id_osv_memory_id_idx");

                    b.ToTable("partner_stat_rel", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PaymentIcon", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.HasKey("Id")
                        .HasName("payment_icon_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("payment_icon", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PaymentLinkWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<decimal?>("AmountMax")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_max");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<string>("PaymentProviderSelection")
                        .HasColumnType("text")
                        .HasColumnName("payment_provider_selection");

                    b.Property<Guid?>("ResId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_id");

                    b.Property<string>("ResModel")
                        .HasColumnType("text")
                        .HasColumnName("res_model");

                    b.HasKey("Id")
                        .HasName("payment_link_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PartnerId");

                    b.ToTable("payment_link_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PaymentProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("AllowExpressCheckout")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_express_checkout");

                    b.Property<bool?>("AllowTokenization")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_tokenization");

                    b.Property<string>("AuthMsg")
                        .HasColumnType("jsonb")
                        .HasColumnName("auth_msg");

                    b.Property<string>("CancelMsg")
                        .HasColumnType("jsonb")
                        .HasColumnName("cancel_msg");

                    b.Property<bool?>("CaptureManually")
                        .HasColumnType("boolean")
                        .HasColumnName("capture_manually");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("DisplayAs")
                        .HasColumnType("jsonb")
                        .HasColumnName("display_as");

                    b.Property<string>("DoneMsg")
                        .HasColumnType("jsonb")
                        .HasColumnName("done_msg");

                    b.Property<Guid?>("ExpressCheckoutFormViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("express_checkout_form_view_id");

                    b.Property<bool?>("FeesActive")
                        .HasColumnType("boolean")
                        .HasColumnName("fees_active");

                    b.Property<double?>("FeesDomFixed")
                        .HasColumnType("double precision")
                        .HasColumnName("fees_dom_fixed");

                    b.Property<double?>("FeesDomVar")
                        .HasColumnType("double precision")
                        .HasColumnName("fees_dom_var");

                    b.Property<double?>("FeesIntFixed")
                        .HasColumnType("double precision")
                        .HasColumnName("fees_int_fixed");

                    b.Property<double?>("FeesIntVar")
                        .HasColumnType("double precision")
                        .HasColumnName("fees_int_var");

                    b.Property<Guid?>("InlineFormViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("inline_form_view_id");

                    b.Property<bool?>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<decimal?>("MaximumAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("maximum_amount");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("module_id");

                    b.Property<string>("ModuleState")
                        .HasColumnType("text")
                        .HasColumnName("module_state");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("PendingMsg")
                        .HasColumnType("jsonb")
                        .HasColumnName("pending_msg");

                    b.Property<string>("PreMsg")
                        .HasColumnType("jsonb")
                        .HasColumnName("pre_msg");

                    b.Property<Guid?>("RedirectFormViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("redirect_form_view_id");

                    b.Property<long?>("Sequence")
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    b.Property<string>("SoReferenceType")
                        .HasColumnType("text")
                        .HasColumnName("so_reference_type");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("TokenInlineFormViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("token_inline_form_view_id");

                    b.Property<Guid?>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.HasKey("Id")
                        .HasName("payment_provider_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ExpressCheckoutFormViewId");

                    b.HasIndex("InlineFormViewId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RedirectFormViewId");

                    b.HasIndex("TokenInlineFormViewId");

                    b.HasIndex("WebsiteId");

                    b.HasIndex(new[] { "TenantId" }, "payment_provider_company_id_index")
                        .HasDatabaseName("payment_provider_company_id_index");

                    b.ToTable("payment_provider", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PaymentProviderOnboardingWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccNumber")
                        .HasColumnType("text")
                        .HasColumnName("acc_number");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("JournalName")
                        .HasColumnType("text")
                        .HasColumnName("journal_name");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("ManualName")
                        .HasColumnType("text")
                        .HasColumnName("manual_name");

                    b.Property<string>("ManualPostMsg")
                        .HasColumnType("text")
                        .HasColumnName("manual_post_msg");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaypalEmailAccount")
                        .HasColumnType("text")
                        .HasColumnName("paypal_email_account");

                    b.Property<string>("PaypalPdtToken")
                        .HasColumnType("text")
                        .HasColumnName("paypal_pdt_token");

                    b.Property<string>("PaypalSellerAccount")
                        .HasColumnType("text")
                        .HasColumnName("paypal_seller_account");

                    b.Property<string>("PaypalUserType")
                        .HasColumnType("text")
                        .HasColumnName("paypal_user_type");

                    b.HasKey("Id")
                        .HasName("payment_provider_onboarding_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("payment_provider_onboarding_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PaymentRefundWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<decimal?>("AmountToRefund")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_to_refund");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.HasKey("Id")
                        .HasName("payment_refund_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PaymentId");

                    b.ToTable("payment_refund_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PaymentToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<string>("PaymentDetails")
                        .HasColumnType("text")
                        .HasColumnName("payment_details");

                    b.Property<Guid?>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_id");

                    b.Property<string>("ProviderRef")
                        .HasColumnType("text")
                        .HasColumnName("provider_ref");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<bool?>("Verified")
                        .HasColumnType("boolean")
                        .HasColumnName("verified");

                    b.HasKey("Id")
                        .HasName("payment_token_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ProviderId");

                    b.HasIndex(new[] { "TenantId" }, "payment_token_company_id_index")
                        .HasDatabaseName("payment_token_company_id_index");

                    b.ToTable("payment_token", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PaymentTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("CallbackHash")
                        .HasColumnType("text")
                        .HasColumnName("callback_hash");

                    b.Property<bool?>("CallbackIsDone")
                        .HasColumnType("boolean")
                        .HasColumnName("callback_is_done");

                    b.Property<string>("CallbackMethod")
                        .HasColumnType("text")
                        .HasColumnName("callback_method");

                    b.Property<Guid?>("CallbackModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("callback_model_id");

                    b.Property<Guid?>("CallbackResId")
                        .HasColumnType("uuid")
                        .HasColumnName("callback_res_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<decimal?>("Fees")
                        .HasColumnType("numeric")
                        .HasColumnName("fees");

                    b.Property<bool?>("IsDonation")
                        .HasColumnType("boolean")
                        .HasColumnName("is_donation");

                    b.Property<bool?>("IsPostProcessed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_post_processed");

                    b.Property<string>("LandingRoute")
                        .HasColumnType("text")
                        .HasColumnName("landing_route");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<DateTime?>("LastStateChange")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_state_change");

                    b.Property<string>("Operation")
                        .HasColumnType("text")
                        .HasColumnName("operation");

                    b.Property<string>("PartnerAddress")
                        .HasColumnType("text")
                        .HasColumnName("partner_address");

                    b.Property<string>("PartnerCity")
                        .HasColumnType("text")
                        .HasColumnName("partner_city");

                    b.Property<long?>("PartnerCountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("partner_country_id");

                    b.Property<string>("PartnerEmail")
                        .HasColumnType("text")
                        .HasColumnName("partner_email");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<string>("PartnerLang")
                        .HasColumnType("text")
                        .HasColumnName("partner_lang");

                    b.Property<string>("PartnerName")
                        .HasColumnType("text")
                        .HasColumnName("partner_name");

                    b.Property<string>("PartnerPhone")
                        .HasColumnType("text")
                        .HasColumnName("partner_phone");

                    b.Property<long?>("PartnerStateId")
                        .HasColumnType("bigint")
                        .HasColumnName("partner_state_id");

                    b.Property<string>("PartnerZip")
                        .HasColumnType("text")
                        .HasColumnName("partner_zip");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<Guid?>("ProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("provider_id");

                    b.Property<string>("ProviderReference")
                        .HasColumnType("text")
                        .HasColumnName("provider_reference");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<Guid?>("SourceTransactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_transaction_id");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("StateMessage")
                        .HasColumnType("text")
                        .HasColumnName("state_message");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("TokenId")
                        .HasColumnType("uuid")
                        .HasColumnName("token_id");

                    b.Property<bool?>("Tokenize")
                        .HasColumnType("boolean")
                        .HasColumnName("tokenize");

                    b.HasKey("Id")
                        .HasName("payment_transaction_pkey");

                    b.HasIndex("CallbackModelId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PartnerCountryId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PartnerStateId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("SourceTransactionId");

                    b.HasIndex("TokenId");

                    b.HasIndex(new[] { "TenantId" }, "payment_transaction_company_id_index")
                        .HasDatabaseName("payment_transaction_company_id_index");

                    b.HasIndex(new[] { "Operation" }, "payment_transaction_operation_index")
                        .HasDatabaseName("payment_transaction_operation_index");

                    b.HasIndex(new[] { "Reference" }, "payment_transaction_reference_uniq")
                        .IsUnique()
                        .HasDatabaseName("payment_transaction_reference_uniq");

                    b.HasIndex(new[] { "State" }, "payment_transaction_state_index")
                        .HasDatabaseName("payment_transaction_state_index");

                    b.ToTable("payment_transaction", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PhoneBlacklist", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Number")
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("phone_blacklist_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex(new[] { "Number" }, "phone_blacklist_unique_number")
                        .IsUnique()
                        .HasDatabaseName("phone_blacklist_unique_number");

                    b.ToTable("phone_blacklist", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PhoneBlacklistRemove", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.HasKey("Id")
                        .HasName("phone_blacklist_remove_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("phone_blacklist_remove", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PickingLabelType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("LabelType")
                        .HasColumnType("text")
                        .HasColumnName("label_type");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("picking_label_type_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("picking_label_type", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PortalShare", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<Guid?>("ResId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_id");

                    b.Property<string>("ResModel")
                        .HasColumnType("text")
                        .HasColumnName("res_model");

                    b.HasKey("Id")
                        .HasName("portal_share_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("portal_share", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PortalWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("WelcomeMessage")
                        .HasColumnType("text")
                        .HasColumnName("welcome_message");

                    b.HasKey("Id")
                        .HasName("portal_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("portal_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PortalWizardUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid?>("WizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("wizard_id");

                    b.HasKey("Id")
                        .HasName("portal_wizard_user_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("WizardId");

                    b.ToTable("portal_wizard_user", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosBill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal?>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pos_bill_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("pos_bill", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<long?>("Sequence")
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    b.HasKey("Id")
                        .HasName("pos_category_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "ParentId" }, "pos_category_parent_id_index")
                        .HasDatabaseName("pos_category_parent_id_index");

                    b.ToTable("pos_category", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosCloseSessionWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<bool?>("AccountReadonly")
                        .HasColumnType("boolean")
                        .HasColumnName("account_readonly");

                    b.Property<double?>("AmountToBalance")
                        .HasColumnType("double precision")
                        .HasColumnName("amount_to_balance");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.HasKey("Id")
                        .HasName("pos_close_session_wizard_pkey");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("pos_close_session_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<double?>("AmountAuthorizedDiff")
                        .HasColumnType("double precision")
                        .HasColumnName("amount_authorized_diff");

                    b.Property<bool?>("CashRounding")
                        .HasColumnType("boolean")
                        .HasColumnName("cash_rounding");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("CrmTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("crm_team_id");

                    b.Property<Guid?>("DefaultFiscalPositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("default_fiscal_position_id");

                    b.Property<Guid?>("DownPaymentProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("down_payment_product_id");

                    b.Property<string>("EpsonPrinterIp")
                        .HasColumnType("text")
                        .HasColumnName("epson_printer_ip");

                    b.Property<Guid?>("GroupPosManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_pos_manager_id");

                    b.Property<Guid?>("GroupPosUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_pos_user_id");

                    b.Property<bool?>("IfaceBigScrollbars")
                        .HasColumnType("boolean")
                        .HasColumnName("iface_big_scrollbars");

                    b.Property<bool?>("IfaceCashdrawer")
                        .HasColumnType("boolean")
                        .HasColumnName("iface_cashdrawer");

                    b.Property<bool?>("IfaceCustomerFacingDisplayLocal")
                        .HasColumnType("boolean")
                        .HasColumnName("iface_customer_facing_display_local");

                    b.Property<bool?>("IfaceCustomerFacingDisplayViaProxy")
                        .HasColumnType("boolean")
                        .HasColumnName("iface_customer_facing_display_via_proxy");

                    b.Property<bool?>("IfaceElectronicScale")
                        .HasColumnType("boolean")
                        .HasColumnName("iface_electronic_scale");

                    b.Property<bool?>("IfacePrintAuto")
                        .HasColumnType("boolean")
                        .HasColumnName("iface_print_auto");

                    b.Property<bool?>("IfacePrintSkipScreen")
                        .HasColumnType("boolean")
                        .HasColumnName("iface_print_skip_screen");

                    b.Property<bool?>("IfacePrintViaProxy")
                        .HasColumnType("boolean")
                        .HasColumnName("iface_print_via_proxy");

                    b.Property<bool?>("IfaceScanViaProxy")
                        .HasColumnType("boolean")
                        .HasColumnName("iface_scan_via_proxy");

                    b.Property<long?>("IfaceStartCategId")
                        .HasColumnType("bigint")
                        .HasColumnName("iface_start_categ_id");

                    b.Property<string>("IfaceTaxIncluded")
                        .HasColumnType("text")
                        .HasColumnName("iface_tax_included");

                    b.Property<bool?>("IfaceTipproduct")
                        .HasColumnType("boolean")
                        .HasColumnName("iface_tipproduct");

                    b.Property<Guid?>("InvoiceJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_journal_id");

                    b.Property<bool?>("IsHeaderOrFooter")
                        .HasColumnType("boolean")
                        .HasColumnName("is_header_or_footer");

                    b.Property<bool?>("IsMarginsCostsAccessibleToEveryUser")
                        .HasColumnType("boolean")
                        .HasColumnName("is_margins_costs_accessible_to_every_user");

                    b.Property<bool?>("IsPosbox")
                        .HasColumnType("boolean")
                        .HasColumnName("is_posbox");

                    b.Property<Guid?>("JournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("journal_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<bool?>("LimitCategories")
                        .HasColumnType("boolean")
                        .HasColumnName("limit_categories");

                    b.Property<long?>("LimitedPartnersAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("limited_partners_amount");

                    b.Property<bool?>("LimitedPartnersLoading")
                        .HasColumnType("boolean")
                        .HasColumnName("limited_partners_loading");

                    b.Property<long?>("LimitedProductsAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("limited_products_amount");

                    b.Property<bool?>("LimitedProductsLoading")
                        .HasColumnType("boolean")
                        .HasColumnName("limited_products_loading");

                    b.Property<bool?>("ManualDiscount")
                        .HasColumnType("boolean")
                        .HasColumnName("manual_discount");

                    b.Property<bool?>("ModulePosDiscount")
                        .HasColumnType("boolean")
                        .HasColumnName("module_pos_discount");

                    b.Property<bool?>("ModulePosHr")
                        .HasColumnType("boolean")
                        .HasColumnName("module_pos_hr");

                    b.Property<bool?>("ModulePosMercury")
                        .HasColumnType("boolean")
                        .HasColumnName("module_pos_mercury");

                    b.Property<bool?>("ModulePosRestaurant")
                        .HasColumnType("boolean")
                        .HasColumnName("module_pos_restaurant");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool?>("OnlyRoundCashMethod")
                        .HasColumnType("boolean")
                        .HasColumnName("only_round_cash_method");

                    b.Property<bool?>("OtherDevices")
                        .HasColumnType("boolean")
                        .HasColumnName("other_devices");

                    b.Property<bool?>("PartnerLoadBackground")
                        .HasColumnType("boolean")
                        .HasColumnName("partner_load_background");

                    b.Property<string>("PickingPolicy")
                        .HasColumnType("text")
                        .HasColumnName("picking_policy");

                    b.Property<Guid?>("PickingTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("picking_type_id");

                    b.Property<Guid?>("PricelistId")
                        .HasColumnType("uuid")
                        .HasColumnName("pricelist_id");

                    b.Property<bool?>("ProductLoadBackground")
                        .HasColumnType("boolean")
                        .HasColumnName("product_load_background");

                    b.Property<string>("ProxyIp")
                        .HasColumnType("text")
                        .HasColumnName("proxy_ip");

                    b.Property<string>("ReceiptFooter")
                        .HasColumnType("text")
                        .HasColumnName("receipt_footer");

                    b.Property<string>("ReceiptHeader")
                        .HasColumnType("text")
                        .HasColumnName("receipt_header");

                    b.Property<bool?>("RestrictPriceControl")
                        .HasColumnType("boolean")
                        .HasColumnName("restrict_price_control");

                    b.Property<Guid?>("RoundingMethod")
                        .HasColumnType("uuid")
                        .HasColumnName("rounding_method");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.Property<Guid?>("SequenceId")
                        .HasColumnType("uuid")
                        .HasColumnName("sequence_id");

                    b.Property<Guid?>("SequenceLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("sequence_line_id");

                    b.Property<bool?>("SetMaximumDifference")
                        .HasColumnType("boolean")
                        .HasColumnName("set_maximum_difference");

                    b.Property<bool?>("ShipLater")
                        .HasColumnType("boolean")
                        .HasColumnName("ship_later");

                    b.Property<bool?>("StartCategory")
                        .HasColumnType("boolean")
                        .HasColumnName("start_category");

                    b.Property<bool?>("TaxRegimeSelection")
                        .HasColumnType("boolean")
                        .HasColumnName("tax_regime_selection");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("TipProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("tip_product_id");

                    b.Property<bool?>("UsePricelist")
                        .HasColumnType("boolean")
                        .HasColumnName("use_pricelist");

                    b.Property<string>("Uuid")
                        .HasColumnType("text")
                        .HasColumnName("uuid");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id")
                        .HasName("pos_config_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CrmTeamId");

                    b.HasIndex("DefaultFiscalPositionId");

                    b.HasIndex("DownPaymentProductId");

                    b.HasIndex("GroupPosManagerId");

                    b.HasIndex("GroupPosUserId");

                    b.HasIndex("IfaceStartCategId");

                    b.HasIndex("InvoiceJournalId");

                    b.HasIndex("JournalId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PickingTypeId");

                    b.HasIndex("PricelistId");

                    b.HasIndex("RoundingMethod");

                    b.HasIndex("RouteId");

                    b.HasIndex("SequenceId");

                    b.HasIndex("SequenceLineId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TipProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("pos_config", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosDetailsWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("pos_details_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("pos_details_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosMakePayment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<Guid?>("ConfigId")
                        .HasColumnType("uuid")
                        .HasColumnName("config_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("payment_date");

                    b.Property<Guid?>("PaymentMethodId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_method_id");

                    b.Property<string>("PaymentName")
                        .HasColumnType("text")
                        .HasColumnName("payment_name");

                    b.HasKey("Id")
                        .HasName("pos_make_payment_pkey");

                    b.HasIndex("ConfigId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("pos_make_payment", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<Guid?>("AccountMove")
                        .HasColumnType("uuid")
                        .HasColumnName("account_move");

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_paid");

                    b.Property<decimal?>("AmountReturn")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_return");

                    b.Property<decimal?>("AmountTax")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_tax");

                    b.Property<decimal?>("AmountTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_total");

                    b.Property<string>("Cashier")
                        .HasColumnType("text")
                        .HasColumnName("cashier");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("CrmTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("crm_team_id");

                    b.Property<decimal?>("CurrencyRate")
                        .HasColumnType("numeric")
                        .HasColumnName("currency_rate");

                    b.Property<DateTime?>("DateOrder")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_order");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<Guid?>("FiscalPositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("fiscal_position_id");

                    b.Property<bool?>("IsTipped")
                        .HasColumnType("boolean")
                        .HasColumnName("is_tipped");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("NbPrint")
                        .HasColumnType("bigint")
                        .HasColumnName("nb_print");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<string>("PosReference")
                        .HasColumnType("text")
                        .HasColumnName("pos_reference");

                    b.Property<Guid?>("PricelistId")
                        .HasColumnType("uuid")
                        .HasColumnName("pricelist_id");

                    b.Property<Guid?>("ProcurementGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("procurement_group_id");

                    b.Property<Guid?>("SaleJournal")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_journal");

                    b.Property<long>("SequenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence_number");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SequenceNumber"));

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("session_id");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<decimal?>("TipAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("tip_amount");

                    b.Property<bool?>("ToInvoice")
                        .HasColumnType("boolean")
                        .HasColumnName("to_invoice");

                    b.Property<bool?>("ToShip")
                        .HasColumnType("boolean")
                        .HasColumnName("to_ship");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pos_order_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CrmTeamId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FiscalPositionId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PricelistId");

                    b.HasIndex("ProcurementGroupId");

                    b.HasIndex("SaleJournal");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "AccountMove" }, "pos_order_account_move_index")
                        .HasDatabaseName("pos_order_account_move_index");

                    b.HasIndex(new[] { "DateOrder" }, "pos_order_date_order_index")
                        .HasDatabaseName("pos_order_date_order_index");

                    b.HasIndex(new[] { "PartnerId" }, "pos_order_partner_id_index")
                        .HasDatabaseName("pos_order_partner_id_index")
                        .HasFilter("(partner_id IS NOT NULL)");

                    b.HasIndex(new[] { "SessionId" }, "pos_order_session_id_index")
                        .HasDatabaseName("pos_order_session_id_index");

                    b.ToTable("pos_order", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosOrderLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("CustomerNote")
                        .HasColumnType("text")
                        .HasColumnName("customer_note");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric")
                        .HasColumnName("discount");

                    b.Property<string>("DownPaymentDetails")
                        .HasColumnType("text")
                        .HasColumnName("down_payment_details");

                    b.Property<string>("FullProductName")
                        .HasColumnType("text")
                        .HasColumnName("full_product_name");

                    b.Property<bool?>("IsTotalCostComputed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_total_cost_computed");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notice")
                        .HasColumnType("text")
                        .HasColumnName("notice");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<double?>("PriceExtra")
                        .HasColumnType("double precision")
                        .HasColumnName("price_extra");

                    b.Property<decimal?>("PriceSubtotal")
                        .HasColumnType("numeric")
                        .HasColumnName("price_subtotal");

                    b.Property<decimal?>("PriceSubtotalIncl")
                        .HasColumnType("numeric")
                        .HasColumnName("price_subtotal_incl");

                    b.Property<decimal?>("PriceUnit")
                        .HasColumnType("numeric")
                        .HasColumnName("price_unit");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<decimal?>("Qty")
                        .HasColumnType("numeric")
                        .HasColumnName("qty");

                    b.Property<Guid?>("RefundedOrderlineId")
                        .HasColumnType("uuid")
                        .HasColumnName("refunded_orderline_id");

                    b.Property<Guid?>("SaleOrderLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_order_line_id");

                    b.Property<Guid?>("SaleOrderOriginId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_order_origin_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("numeric")
                        .HasColumnName("total_cost");

                    b.HasKey("Id")
                        .HasName("pos_order_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RefundedOrderlineId");

                    b.HasIndex("SaleOrderLineId");

                    b.HasIndex("SaleOrderOriginId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "OrderId" }, "pos_order_line_order_id_index")
                        .HasDatabaseName("pos_order_line_order_id_index");

                    b.ToTable("pos_order_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosPackOperationLot", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("LotName")
                        .HasColumnType("text")
                        .HasColumnName("lot_name");

                    b.Property<Guid?>("PosOrderLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_order_line_id");

                    b.HasKey("Id")
                        .HasName("pos_pack_operation_lot_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PosOrderLineId");

                    b.ToTable("pos_pack_operation_lot", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AccountMoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_move_id");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("CardType")
                        .HasColumnType("text")
                        .HasColumnName("card_type");

                    b.Property<string>("CardholderName")
                        .HasColumnType("text")
                        .HasColumnName("cardholder_name");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("IsChange")
                        .HasColumnType("boolean")
                        .HasColumnName("is_change");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("payment_date");

                    b.Property<Guid?>("PaymentMethodId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_method_id");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("text")
                        .HasColumnName("payment_status");

                    b.Property<Guid?>("PosOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_order_id");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("session_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("Ticket")
                        .HasColumnType("text")
                        .HasColumnName("ticket");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text")
                        .HasColumnName("transaction_id");

                    b.HasKey("Id")
                        .HasName("pos_payment_pkey");

                    b.HasIndex("AccountMoveId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PosOrderId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "SessionId" }, "pos_payment_session_id_index")
                        .HasDatabaseName("pos_payment_session_id_index");

                    b.ToTable("pos_payment", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosPaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("IsCashCount")
                        .HasColumnType("boolean")
                        .HasColumnName("is_cash_count");

                    b.Property<Guid?>("JournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("journal_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<Guid?>("OutstandingAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("outstanding_account_id");

                    b.Property<Guid?>("ReceivableAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("receivable_account_id");

                    b.Property<bool?>("SplitTransactions")
                        .HasColumnType("boolean")
                        .HasColumnName("split_transactions");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("UsePaymentTerminal")
                        .HasColumnType("text")
                        .HasColumnName("use_payment_terminal");

                    b.HasKey("Id")
                        .HasName("pos_payment_method_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("JournalId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("OutstandingAccountId");

                    b.HasIndex("ReceivableAccountId");

                    b.HasIndex("TenantId");

                    b.ToTable("pos_payment_method", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosSession", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("CashJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("cash_journal_id");

                    b.Property<decimal?>("CashRealTransaction")
                        .HasColumnType("numeric")
                        .HasColumnName("cash_real_transaction");

                    b.Property<decimal?>("CashRegisterBalanceEndReal")
                        .HasColumnType("numeric")
                        .HasColumnName("cash_register_balance_end_real");

                    b.Property<decimal?>("CashRegisterBalanceStart")
                        .HasColumnType("numeric")
                        .HasColumnName("cash_register_balance_start");

                    b.Property<Guid?>("ConfigId")
                        .HasColumnType("uuid")
                        .HasColumnName("config_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("LoginNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("login_number");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<Guid?>("MoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("move_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("OpeningNotes")
                        .HasColumnType("text")
                        .HasColumnName("opening_notes");

                    b.Property<bool?>("Rescue")
                        .HasColumnType("boolean")
                        .HasColumnName("rescue");

                    b.Property<long?>("SequenceNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("sequence_number");

                    b.Property<DateTime?>("StartAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_at");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<DateTime?>("StopAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("stop_at");

                    b.Property<bool?>("UpdateStockAtClosing")
                        .HasColumnType("boolean")
                        .HasColumnName("update_stock_at_closing");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pos_session_pkey");

                    b.HasIndex("CashJournalId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex(new[] { "ConfigId" }, "pos_session_config_id_index")
                        .HasDatabaseName("pos_session_config_id_index");

                    b.HasIndex(new[] { "MoveId" }, "pos_session_move_id_index")
                        .HasDatabaseName("pos_session_move_id_index");

                    b.HasIndex(new[] { "State" }, "pos_session_state_index")
                        .HasDatabaseName("pos_session_state_index");

                    b.HasIndex(new[] { "Name" }, "pos_session_uniq_name")
                        .IsUnique()
                        .HasDatabaseName("pos_session_uniq_name");

                    b.HasIndex(new[] { "UserId" }, "pos_session_user_id_index")
                        .HasDatabaseName("pos_session_user_id_index");

                    b.ToTable("pos_session", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosSessionCheckProductWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("pos_session_check_product_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("pos_session_check_product_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PrivacyLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AdditionalNote")
                        .HasColumnType("text")
                        .HasColumnName("additional_note");

                    b.Property<string>("AnonymizedEmail")
                        .HasColumnType("text")
                        .HasColumnName("anonymized_email");

                    b.Property<string>("AnonymizedName")
                        .HasColumnType("text")
                        .HasColumnName("anonymized_name");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("ExecutionDetails")
                        .HasColumnType("text")
                        .HasColumnName("execution_details");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("RecordsDescription")
                        .HasColumnType("text")
                        .HasColumnName("records_description");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("privacy_log_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("UserId");

                    b.ToTable("privacy_log", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PrivacyLookupWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("ExecutionDetails")
                        .HasColumnType("text")
                        .HasColumnName("execution_details");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LogId")
                        .HasColumnType("uuid")
                        .HasColumnName("log_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("privacy_lookup_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LogId");

                    b.ToTable("privacy_lookup_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PrivacyLookupWizardLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("ExecutionDetails")
                        .HasColumnType("text")
                        .HasColumnName("execution_details");

                    b.Property<bool?>("HasActive")
                        .HasColumnType("boolean")
                        .HasColumnName("has_active");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsUnlinked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_unlinked");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ResId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_id");

                    b.Property<string>("ResModel")
                        .HasColumnType("text")
                        .HasColumnName("res_model");

                    b.Property<Guid?>("ResModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_model_id");

                    b.Property<string>("ResName")
                        .HasColumnType("text")
                        .HasColumnName("res_name");

                    b.Property<Guid?>("WizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("wizard_id");

                    b.HasKey("Id")
                        .HasName("privacy_lookup_wizard_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ResModelId");

                    b.HasIndex("WizardId");

                    b.ToTable("privacy_lookup_wizard_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProcurementGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("MoveType")
                        .HasColumnType("text")
                        .HasColumnName("move_type");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid?>("PosOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_order_id");

                    b.Property<Guid?>("SaleId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_id");

                    b.HasKey("Id")
                        .HasName("procurement_group_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PosOrderId");

                    b.HasIndex("SaleId");

                    b.ToTable("procurement_group", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductAttribute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CreateVariant")
                        .HasColumnType("text")
                        .HasColumnName("create_variant");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("DisplayType")
                        .HasColumnType("text")
                        .HasColumnName("display_type");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.Property<string>("Visibility")
                        .HasColumnType("text")
                        .HasColumnName("visibility");

                    b.HasKey("Id")
                        .HasName("product_attribute_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Sequence" }, "product_attribute_sequence_index")
                        .HasDatabaseName("product_attribute_sequence_index");

                    b.ToTable("product_attribute", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductAttributeCustomValue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("CustomProductTemplateAttributeValueId")
                        .HasColumnType("uuid")
                        .HasColumnName("custom_product_template_attribute_value_id");

                    b.Property<string>("CustomValue")
                        .HasColumnType("text")
                        .HasColumnName("custom_value");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("SaleOrderLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_order_line_id");

                    b.HasKey("Id")
                        .HasName("product_attribute_custom_value_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("SaleOrderLineId");

                    b.HasIndex(new[] { "CustomProductTemplateAttributeValueId", "SaleOrderLineId" }, "product_attribute_custom_value_sol_custom_value_unique")
                        .IsUnique()
                        .HasDatabaseName("product_attribute_custom_value_sol_custom_value_unique");

                    b.ToTable("product_attribute_custom_value", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductAttributeValue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<long?>("AttributeId")
                        .HasColumnType("bigint")
                        .HasColumnName("attribute_id");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("HtmlColor")
                        .HasColumnType("text")
                        .HasColumnName("html_color");

                    b.Property<bool?>("IsCustom")
                        .HasColumnType("boolean")
                        .HasColumnName("is_custom");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<long?>("Sequence")
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    b.HasKey("Id")
                        .HasName("product_attribute_value_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "AttributeId" }, "product_attribute_value_attribute_id_index")
                        .HasDatabaseName("product_attribute_value_attribute_id_index");

                    b.HasIndex(new[] { "Sequence" }, "product_attribute_value_sequence_index")
                        .HasDatabaseName("product_attribute_value_sequence_index");

                    b.HasIndex(new[] { "Name", "AttributeId" }, "product_attribute_value_value_company_uniq")
                        .IsUnique()
                        .HasDatabaseName("product_attribute_value_value_company_uniq");

                    b.ToTable("product_attribute_value", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CompleteName")
                        .HasColumnType("text")
                        .HasColumnName("complete_name");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PackagingReserveMethod")
                        .HasColumnType("text")
                        .HasColumnName("packaging_reserve_method");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<string>("ParentPath")
                        .HasColumnType("text")
                        .HasColumnName("parent_path");

                    b.Property<Guid?>("RemovalStrategyId")
                        .HasColumnType("uuid")
                        .HasColumnName("removal_strategy_id");

                    b.HasKey("Id")
                        .HasName("product_category_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("RemovalStrategyId");

                    b.HasIndex(new[] { "Name" }, "product_category_name_index")
                        .HasDatabaseName("product_category_name_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "Name" }, "product_category_name_index"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Name" }, "product_category_name_index"), new[] { "gin_trgm_ops" });

                    b.HasIndex(new[] { "ParentId" }, "product_category_parent_id_index")
                        .HasDatabaseName("product_category_parent_id_index");

                    b.HasIndex(new[] { "ParentPath" }, "product_category_parent_path_index")
                        .HasDatabaseName("product_category_parent_path_index");

                    b.ToTable("product_category", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("CanImage1024BeZoomed")
                        .HasColumnType("boolean")
                        .HasColumnName("can_image_1024_be_zoomed");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ProductTmplId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_tmpl_id");

                    b.Property<Guid?>("ProductVariantId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_variant_id");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<string>("VideoUrl")
                        .HasColumnType("text")
                        .HasColumnName("video_url");

                    b.HasKey("Id")
                        .HasName("product_image_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "ProductTmplId" }, "product_image_product_tmpl_id_index")
                        .HasDatabaseName("product_image_product_tmpl_id_index");

                    b.HasIndex(new[] { "ProductVariantId" }, "product_image_product_variant_id_index")
                        .HasDatabaseName("product_image_product_variant_id_index");

                    b.ToTable("product_image", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductLabelLayout", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CustomQuantity")
                        .HasColumnType("bigint")
                        .HasColumnName("custom_quantity");

                    b.Property<string>("ExtraHtml")
                        .HasColumnType("text")
                        .HasColumnName("extra_html");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("PickingQuantity")
                        .HasColumnType("text")
                        .HasColumnName("picking_quantity");

                    b.Property<string>("PrintFormat")
                        .HasColumnType("text")
                        .HasColumnName("print_format");

                    b.HasKey("Id")
                        .HasName("product_label_layout_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("product_label_layout", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductPackaging", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Barcode")
                        .HasColumnType("text")
                        .HasColumnName("barcode");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("PackageTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("package_type_id");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<bool?>("Purchase")
                        .HasColumnType("boolean")
                        .HasColumnName("purchase");

                    b.Property<decimal?>("Qty")
                        .HasColumnType("numeric")
                        .HasColumnName("qty");

                    b.Property<bool?>("Sales")
                        .HasColumnType("boolean")
                        .HasColumnName("sales");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("product_packaging_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PackageTypeId");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "Barcode" }, "product_packaging_barcode_uniq")
                        .IsUnique()
                        .HasDatabaseName("product_packaging_barcode_uniq");

                    b.HasIndex(new[] { "TenantId" }, "product_packaging_company_id_index")
                        .HasDatabaseName("product_packaging_company_id_index");

                    b.ToTable("product_packaging", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductPricelist", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<string>("DiscountPolicy")
                        .HasColumnType("text")
                        .HasColumnName("discount_policy");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<bool?>("Selectable")
                        .HasColumnType("boolean")
                        .HasColumnName("selectable");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.HasKey("Id")
                        .HasName("product_pricelist_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.HasIndex("WebsiteId");

                    b.ToTable("product_pricelist", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductPricelistItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("AppliedOn")
                        .HasColumnType("text")
                        .HasColumnName("applied_on");

                    b.Property<string>("Base")
                        .HasColumnType("text")
                        .HasColumnName("base");

                    b.Property<Guid?>("BasePricelistId")
                        .HasColumnType("uuid")
                        .HasColumnName("base_pricelist_id");

                    b.Property<long?>("CategId")
                        .HasColumnType("bigint")
                        .HasColumnName("categ_id");

                    b.Property<string>("ComputePrice")
                        .HasColumnType("text")
                        .HasColumnName("compute_price");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<decimal?>("FixedPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("fixed_price");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<decimal?>("MinQuantity")
                        .HasColumnType("numeric")
                        .HasColumnName("min_quantity");

                    b.Property<double?>("PercentPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("percent_price");

                    b.Property<decimal?>("PriceDiscount")
                        .HasColumnType("numeric")
                        .HasColumnName("price_discount");

                    b.Property<decimal?>("PriceMaxMargin")
                        .HasColumnType("numeric")
                        .HasColumnName("price_max_margin");

                    b.Property<decimal?>("PriceMinMargin")
                        .HasColumnType("numeric")
                        .HasColumnName("price_min_margin");

                    b.Property<decimal?>("PriceRound")
                        .HasColumnType("numeric")
                        .HasColumnName("price_round");

                    b.Property<decimal?>("PriceSurcharge")
                        .HasColumnType("numeric")
                        .HasColumnName("price_surcharge");

                    b.Property<Guid?>("PricelistId")
                        .HasColumnType("uuid")
                        .HasColumnName("pricelist_id");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ProductTmplId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_tmpl_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("product_pricelist_item_pkey");

                    b.HasIndex("BasePricelistId");

                    b.HasIndex("CategId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductTmplId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "ComputePrice" }, "product_pricelist_item_compute_price_index")
                        .HasDatabaseName("product_pricelist_item_compute_price_index");

                    b.HasIndex(new[] { "PricelistId" }, "product_pricelist_item_pricelist_id_index")
                        .HasDatabaseName("product_pricelist_item_pricelist_id_index");

                    b.ToTable("product_pricelist_item", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Barcode")
                        .HasColumnType("text")
                        .HasColumnName("barcode");

                    b.Property<double?>("BaseUnitCount")
                        .HasColumnType("double precision")
                        .HasColumnName("base_unit_count");

                    b.Property<Guid?>("BaseUnitId")
                        .HasColumnType("uuid")
                        .HasColumnName("base_unit_id");

                    b.Property<bool?>("CanImageVariant1024BeZoomed")
                        .HasColumnType("boolean")
                        .HasColumnName("can_image_variant_1024_be_zoomed");

                    b.Property<string>("CombinationIndices")
                        .HasColumnType("text")
                        .HasColumnName("combination_indices");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("DefaultCode")
                        .HasColumnType("text")
                        .HasColumnName("default_code");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<Guid?>("ProductTmplId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_tmpl_id");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("numeric")
                        .HasColumnName("volume");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("product_product_pkey");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex(new[] { "Barcode" }, "product_product_barcode_index")
                        .HasDatabaseName("product_product_barcode_index")
                        .HasFilter("(barcode IS NOT NULL)");

                    b.HasIndex(new[] { "CombinationIndices" }, "product_product_combination_indices_index")
                        .HasDatabaseName("product_product_combination_indices_index");

                    b.HasIndex(new[] { "ProductTmplId", "CombinationIndices" }, "product_product_combination_unique")
                        .IsUnique()
                        .HasDatabaseName("product_product_combination_unique")
                        .HasFilter("(active IS TRUE)");

                    b.HasIndex(new[] { "DefaultCode" }, "product_product_default_code_index")
                        .HasDatabaseName("product_product_default_code_index");

                    b.HasIndex(new[] { "ProductTmplId" }, "product_product_product_tmpl_id_index")
                        .HasDatabaseName("product_product_product_tmpl_id_index");

                    b.ToTable("product_product", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductPublicCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<string>("ParentPath")
                        .HasColumnType("text")
                        .HasColumnName("parent_path");

                    b.Property<string>("SeoName")
                        .HasColumnType("jsonb")
                        .HasColumnName("seo_name");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.Property<string>("WebsiteDescription")
                        .HasColumnType("jsonb")
                        .HasColumnName("website_description");

                    b.Property<Guid?>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.Property<string>("WebsiteMetaDescription")
                        .HasColumnType("jsonb")
                        .HasColumnName("website_meta_description");

                    b.Property<string>("WebsiteMetaKeywords")
                        .HasColumnType("jsonb")
                        .HasColumnName("website_meta_keywords");

                    b.Property<string>("WebsiteMetaOgImg")
                        .HasColumnType("text")
                        .HasColumnName("website_meta_og_img");

                    b.Property<string>("WebsiteMetaTitle")
                        .HasColumnType("jsonb")
                        .HasColumnName("website_meta_title");

                    b.HasKey("Id")
                        .HasName("product_public_category_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "ParentId" }, "product_public_category_parent_id_index")
                        .HasDatabaseName("product_public_category_parent_id_index");

                    b.HasIndex(new[] { "ParentPath" }, "product_public_category_parent_path_index")
                        .HasDatabaseName("product_public_category_parent_path_index");

                    b.HasIndex(new[] { "Sequence" }, "product_public_category_sequence_index")
                        .HasDatabaseName("product_public_category_sequence_index");

                    b.HasIndex(new[] { "WebsiteId" }, "product_public_category_website_id_index")
                        .HasDatabaseName("product_public_category_website_id_index");

                    b.ToTable("product_public_category", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductRemoval", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Method")
                        .HasColumnType("text")
                        .HasColumnName("method");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("product_removal_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("product_removal", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductReplenish", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DatePlanned")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_planned");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<bool?>("ProductHasVariants")
                        .HasColumnType("boolean")
                        .HasColumnName("product_has_variants");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ProductTmplId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_tmpl_id");

                    b.Property<Guid?>("ProductUomId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_uom_id");

                    b.Property<double?>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id")
                        .HasName("product_replenish_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductTmplId");

                    b.HasIndex("ProductUomId");

                    b.HasIndex("TenantId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("product_replenish", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductRibbon", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("BgColor")
                        .HasColumnType("text")
                        .HasColumnName("bg_color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Html")
                        .HasColumnType("jsonb")
                        .HasColumnName("html");

                    b.Property<string>("HtmlClass")
                        .HasColumnType("text")
                        .HasColumnName("html_class");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("TextColor")
                        .HasColumnType("text")
                        .HasColumnName("text_color");

                    b.HasKey("Id")
                        .HasName("product_ribbon_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("product_ribbon", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductSupplierinfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<long?>("Delay")
                        .HasColumnType("bigint")
                        .HasColumnName("delay");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<decimal?>("MinQty")
                        .HasColumnType("numeric")
                        .HasColumnName("min_qty");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("ProductCode")
                        .HasColumnType("text")
                        .HasColumnName("product_code");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductName")
                        .HasColumnType("text")
                        .HasColumnName("product_name");

                    b.Property<Guid?>("ProductTmplId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_tmpl_id");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("product_supplierinfo_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "TenantId" }, "product_supplierinfo_company_id_index")
                        .HasDatabaseName("product_supplierinfo_company_id_index");

                    b.HasIndex(new[] { "ProductTmplId" }, "product_supplierinfo_product_tmpl_id_index")
                        .HasDatabaseName("product_supplierinfo_product_tmpl_id_index");

                    b.ToTable("product_supplierinfo", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<Guid?>("RibbonId")
                        .HasColumnType("uuid")
                        .HasColumnName("ribbon_id");

                    b.Property<Guid?>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.HasKey("Id")
                        .HasName("product_tag_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("RibbonId");

                    b.HasIndex(new[] { "Name" }, "product_tag_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("product_tag_name_uniq");

                    b.HasIndex(new[] { "WebsiteId" }, "product_tag_website_id_index")
                        .HasDatabaseName("product_tag_website_id_index");

                    b.ToTable("product_tag", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<bool?>("AllowOutOfStockOrder")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_out_of_stock_order");

                    b.Property<bool?>("AvailableInPos")
                        .HasColumnType("boolean")
                        .HasColumnName("available_in_pos");

                    b.Property<double?>("AvailableThreshold")
                        .HasColumnType("double precision")
                        .HasColumnName("available_threshold");

                    b.Property<double?>("BaseUnitCount")
                        .HasColumnType("double precision")
                        .HasColumnName("base_unit_count");

                    b.Property<Guid?>("BaseUnitId")
                        .HasColumnType("uuid")
                        .HasColumnName("base_unit_id");

                    b.Property<bool?>("CanBeExpensed")
                        .HasColumnType("boolean")
                        .HasColumnName("can_be_expensed");

                    b.Property<bool?>("CanImage1024BeZoomed")
                        .HasColumnType("boolean")
                        .HasColumnName("can_image_1024_be_zoomed");

                    b.Property<long?>("CategId")
                        .HasColumnType("bigint")
                        .HasColumnName("categ_id");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<decimal?>("CompareListPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("compare_list_price");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<double?>("DaysToPrepareMo")
                        .HasColumnType("double precision")
                        .HasColumnName("days_to_prepare_mo");

                    b.Property<string>("DefaultCode")
                        .HasColumnType("text")
                        .HasColumnName("default_code");

                    b.Property<string>("Description")
                        .HasColumnType("jsonb")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionPicking")
                        .HasColumnType("jsonb")
                        .HasColumnName("description_picking");

                    b.Property<string>("DescriptionPickingin")
                        .HasColumnType("jsonb")
                        .HasColumnName("description_pickingin");

                    b.Property<string>("DescriptionPickingout")
                        .HasColumnType("jsonb")
                        .HasColumnName("description_pickingout");

                    b.Property<string>("DescriptionPurchase")
                        .HasColumnType("jsonb")
                        .HasColumnName("description_purchase");

                    b.Property<string>("DescriptionSale")
                        .HasColumnType("jsonb")
                        .HasColumnName("description_sale");

                    b.Property<string>("DetailedType")
                        .HasColumnType("text")
                        .HasColumnName("detailed_type");

                    b.Property<string>("ExpensePolicy")
                        .HasColumnType("text")
                        .HasColumnName("expense_policy");

                    b.Property<bool?>("HasConfigurableAttributes")
                        .HasColumnType("boolean")
                        .HasColumnName("has_configurable_attributes");

                    b.Property<string>("InvoicePolicy")
                        .HasColumnType("text")
                        .HasColumnName("invoice_policy");

                    b.Property<bool?>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<decimal?>("ListPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("list_price");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("OutOfStockMessage")
                        .HasColumnType("jsonb")
                        .HasColumnName("out_of_stock_message");

                    b.Property<long?>("PosCategId")
                        .HasColumnType("bigint")
                        .HasColumnName("pos_categ_id");

                    b.Property<string>("Priority")
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<double?>("ProduceDelay")
                        .HasColumnType("double precision")
                        .HasColumnName("produce_delay");

                    b.Property<string>("PurchaseLineWarn")
                        .HasColumnType("text")
                        .HasColumnName("purchase_line_warn");

                    b.Property<string>("PurchaseLineWarnMsg")
                        .HasColumnType("text")
                        .HasColumnName("purchase_line_warn_msg");

                    b.Property<string>("PurchaseMethod")
                        .HasColumnType("text")
                        .HasColumnName("purchase_method");

                    b.Property<bool?>("PurchaseOk")
                        .HasColumnType("boolean")
                        .HasColumnName("purchase_ok");

                    b.Property<double?>("RatingLastValue")
                        .HasColumnType("double precision")
                        .HasColumnName("rating_last_value");

                    b.Property<double?>("SaleDelay")
                        .HasColumnType("double precision")
                        .HasColumnName("sale_delay");

                    b.Property<string>("SaleLineWarn")
                        .HasColumnType("text")
                        .HasColumnName("sale_line_warn");

                    b.Property<string>("SaleLineWarnMsg")
                        .HasColumnType("text")
                        .HasColumnName("sale_line_warn_msg");

                    b.Property<bool?>("SaleOk")
                        .HasColumnType("boolean")
                        .HasColumnName("sale_ok");

                    b.Property<string>("SeoName")
                        .HasColumnType("jsonb")
                        .HasColumnName("seo_name");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<string>("ServiceTracking")
                        .HasColumnType("text")
                        .HasColumnName("service_tracking");

                    b.Property<string>("ServiceType")
                        .HasColumnType("text")
                        .HasColumnName("service_type");

                    b.Property<bool?>("ShowAvailability")
                        .HasColumnType("boolean")
                        .HasColumnName("show_availability");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<bool?>("ToWeight")
                        .HasColumnType("boolean")
                        .HasColumnName("to_weight");

                    b.Property<string>("Tracking")
                        .HasColumnType("text")
                        .HasColumnName("tracking");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<Guid?>("UomId")
                        .HasColumnType("uuid")
                        .HasColumnName("uom_id");

                    b.Property<Guid?>("UomPoId")
                        .HasColumnType("uuid")
                        .HasColumnName("uom_po_id");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("numeric")
                        .HasColumnName("volume");

                    b.Property<string>("WebsiteDescription")
                        .HasColumnType("jsonb")
                        .HasColumnName("website_description");

                    b.Property<Guid?>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.Property<string>("WebsiteMetaDescription")
                        .HasColumnType("jsonb")
                        .HasColumnName("website_meta_description");

                    b.Property<string>("WebsiteMetaKeywords")
                        .HasColumnType("jsonb")
                        .HasColumnName("website_meta_keywords");

                    b.Property<string>("WebsiteMetaOgImg")
                        .HasColumnType("text")
                        .HasColumnName("website_meta_og_img");

                    b.Property<string>("WebsiteMetaTitle")
                        .HasColumnType("jsonb")
                        .HasColumnName("website_meta_title");

                    b.Property<Guid?>("WebsiteRibbonId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_ribbon_id");

                    b.Property<long?>("WebsiteSequence")
                        .HasColumnType("bigint")
                        .HasColumnName("website_sequence");

                    b.Property<long?>("WebsiteSizeX")
                        .HasColumnType("bigint")
                        .HasColumnName("website_size_x");

                    b.Property<long?>("WebsiteSizeY")
                        .HasColumnType("bigint")
                        .HasColumnName("website_size_y");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("product_template_pkey");

                    b.HasIndex("BaseUnitId");

                    b.HasIndex("CategId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("PosCategId");

                    b.HasIndex("UomId");

                    b.HasIndex("UomPoId");

                    b.HasIndex("WebsiteRibbonId");

                    b.HasIndex(new[] { "TenantId" }, "product_template_company_id_index")
                        .HasDatabaseName("product_template_company_id_index");

                    b.HasIndex(new[] { "IsPublished" }, "product_template_is_published_index")
                        .HasDatabaseName("product_template_is_published_index");

                    b.HasIndex(new[] { "WebsiteId" }, "product_template_website_id_index")
                        .HasDatabaseName("product_template_website_id_index");

                    b.ToTable("product_template", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductTemplateAttributeExclusion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ProductTemplateAttributeValueId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_template_attribute_value_id");

                    b.Property<Guid?>("ProductTmplId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_tmpl_id");

                    b.HasKey("Id")
                        .HasName("product_template_attribute_exclusion_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "ProductTemplateAttributeValueId" }, "product_template_attribute_exclusion_product_template_attribute")
                        .HasDatabaseName("product_template_attribute_exclusion_product_template_attribute");

                    b.HasIndex(new[] { "ProductTmplId" }, "product_template_attribute_exclusion_product_tmpl_id_index")
                        .HasDatabaseName("product_template_attribute_exclusion_product_tmpl_id_index");

                    b.ToTable("product_template_attribute_exclusion", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductTemplateAttributeLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<long?>("AttributeId")
                        .HasColumnType("bigint")
                        .HasColumnName("attribute_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ProductTmplId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_tmpl_id");

                    b.Property<long?>("ValueCount")
                        .HasColumnType("bigint")
                        .HasColumnName("value_count");

                    b.HasKey("Id")
                        .HasName("product_template_attribute_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "AttributeId" }, "product_template_attribute_line_attribute_id_index")
                        .HasDatabaseName("product_template_attribute_line_attribute_id_index");

                    b.HasIndex(new[] { "ProductTmplId" }, "product_template_attribute_line_product_tmpl_id_index")
                        .HasDatabaseName("product_template_attribute_line_product_tmpl_id_index");

                    b.ToTable("product_template_attribute_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductTemplateAttributeValue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<long?>("AttributeId")
                        .HasColumnType("bigint")
                        .HasColumnName("attribute_id");

                    b.Property<Guid?>("AttributeLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("attribute_line_id");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<decimal?>("PriceExtra")
                        .HasColumnType("numeric")
                        .HasColumnName("price_extra");

                    b.Property<Guid?>("ProductAttributeValueId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_attribute_value_id");

                    b.Property<Guid?>("ProductTmplId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_tmpl_id");

                    b.Property<bool?>("PtavActive")
                        .HasColumnType("boolean")
                        .HasColumnName("ptav_active");

                    b.HasKey("Id")
                        .HasName("product_template_attribute_value_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "AttributeId" }, "product_template_attribute_value_attribute_id_index")
                        .HasDatabaseName("product_template_attribute_value_attribute_id_index");

                    b.HasIndex(new[] { "AttributeLineId" }, "product_template_attribute_value_attribute_line_id_index")
                        .HasDatabaseName("product_template_attribute_value_attribute_line_id_index");

                    b.HasIndex(new[] { "AttributeLineId", "ProductAttributeValueId" }, "product_template_attribute_value_attribute_value_unique")
                        .IsUnique()
                        .HasDatabaseName("product_template_attribute_value_attribute_value_unique");

                    b.HasIndex(new[] { "ProductAttributeValueId" }, "product_template_attribute_value_product_attribute_value_id_ind")
                        .HasDatabaseName("product_template_attribute_value_product_attribute_value_id_ind");

                    b.HasIndex(new[] { "ProductTmplId" }, "product_template_attribute_value_product_tmpl_id_index")
                        .HasDatabaseName("product_template_attribute_value_product_tmpl_id_index");

                    b.ToTable("product_template_attribute_value", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectCollaborator", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("project_collaborator_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PartnerId");

                    b.HasIndex(new[] { "ProjectId", "PartnerId" }, "project_collaborator_unique_collaborator")
                        .IsUnique()
                        .HasDatabaseName("project_collaborator_unique_collaborator");

                    b.ToTable("project_collaborator", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectMilestone", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deadline");

                    b.Property<bool?>("IsReached")
                        .HasColumnType("boolean")
                        .HasColumnName("is_reached");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<double?>("QuantityPercentage")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity_percentage");

                    b.Property<DateTime?>("ReachedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reached_date");

                    b.Property<Guid?>("SaleLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_line_id");

                    b.HasKey("Id")
                        .HasName("project_milestone_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SaleLineId");

                    b.ToTable("project_milestone", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectProject", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<Guid?>("AliasId")
                        .HasColumnType("uuid")
                        .HasColumnName("alias_id");

                    b.Property<bool?>("AllowBillable")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_billable");

                    b.Property<bool?>("AllowMilestones")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_milestones");

                    b.Property<bool?>("AllowRecurringTasks")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_recurring_tasks");

                    b.Property<bool?>("AllowSubtasks")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_subtasks");

                    b.Property<bool?>("AllowTaskDependencies")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_task_dependencies");

                    b.Property<Guid?>("AnalyticAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("analytic_account_id");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("LabelTasks")
                        .HasColumnType("jsonb")
                        .HasColumnName("label_tasks");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LastUpdateId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_update_id");

                    b.Property<string>("LastUpdateStatus")
                        .HasColumnType("text")
                        .HasColumnName("last_update_status");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("PartnerEmail")
                        .HasColumnType("text")
                        .HasColumnName("partner_email");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<string>("PartnerPhone")
                        .HasColumnType("text")
                        .HasColumnName("partner_phone");

                    b.Property<string>("PrivacyVisibility")
                        .HasColumnType("text")
                        .HasColumnName("privacy_visibility");

                    b.Property<bool?>("RatingActive")
                        .HasColumnType("boolean")
                        .HasColumnName("rating_active");

                    b.Property<DateTime?>("RatingRequestDeadline")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("rating_request_deadline");

                    b.Property<string>("RatingStatus")
                        .HasColumnType("text")
                        .HasColumnName("rating_status");

                    b.Property<string>("RatingStatusPeriod")
                        .HasColumnType("text")
                        .HasColumnName("rating_status_period");

                    b.Property<Guid?>("SaleLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_line_id");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<long?>("StageId")
                        .HasColumnType("bigint")
                        .HasColumnName("stage_id");

                    b.Property<string>("TaskPropertiesDefinition")
                        .HasColumnType("jsonb")
                        .HasColumnName("task_properties_definition");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("project_project_pkey");

                    b.HasIndex("AliasId");

                    b.HasIndex("AnalyticAccountId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LastUpdateId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Date" }, "project_project_date_index")
                        .HasDatabaseName("project_project_date_index");

                    b.HasIndex(new[] { "SaleLineId" }, "project_project_sale_line_id_index")
                        .HasDatabaseName("project_project_sale_line_id_index")
                        .HasFilter("(sale_line_id IS NOT NULL)");

                    b.HasIndex(new[] { "StageId" }, "project_project_stage_id_index")
                        .HasDatabaseName("project_project_stage_id_index");

                    b.ToTable("project_project", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectProjectStage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("Fold")
                        .HasColumnType("boolean")
                        .HasColumnName("fold");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MailTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_template_id");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.Property<Guid?>("SmsTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("sms_template_id");

                    b.HasKey("Id")
                        .HasName("project_project_stage_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MailTemplateId");

                    b.HasIndex("SmsTemplateId");

                    b.ToTable("project_project_stage", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectShareWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccessMode")
                        .HasColumnType("text")
                        .HasColumnName("access_mode");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("DisplayAccessMode")
                        .HasColumnType("boolean")
                        .HasColumnName("display_access_mode");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<Guid?>("ResId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_id");

                    b.Property<string>("ResModel")
                        .HasColumnType("text")
                        .HasColumnName("res_model");

                    b.HasKey("Id")
                        .HasName("project_share_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("project_share_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("project_tags_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Name" }, "project_tags_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("project_tags_name_uniq");

                    b.ToTable("project_tags", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectTask", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<Guid?>("AnalyticAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("analytic_account_id");

                    b.Property<Guid?>("AncestorId")
                        .HasColumnType("uuid")
                        .HasColumnName("ancestor_id");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateAssign")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_assign");

                    b.Property<DateTime?>("DateDeadline")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_deadline");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime?>("DateLastStageUpdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_last_stage_update");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DisplayProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("display_project_id");

                    b.Property<Guid?>("DisplayedImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("displayed_image_id");

                    b.Property<string>("EmailCc")
                        .HasColumnType("text")
                        .HasColumnName("email_cc");

                    b.Property<string>("EmailFrom")
                        .HasColumnType("text")
                        .HasColumnName("email_from");

                    b.Property<bool?>("IsAnalyticAccountIdChanged")
                        .HasColumnType("boolean")
                        .HasColumnName("is_analytic_account_id_changed");

                    b.Property<bool?>("IsBlocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_blocked");

                    b.Property<bool?>("IsClosed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_closed");

                    b.Property<string>("KanbanState")
                        .HasColumnType("text")
                        .HasColumnName("kanban_state");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<Guid?>("MilestoneId")
                        .HasColumnType("uuid")
                        .HasColumnName("milestone_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("PartnerEmail")
                        .HasColumnType("text")
                        .HasColumnName("partner_email");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<string>("PartnerPhone")
                        .HasColumnType("text")
                        .HasColumnName("partner_phone");

                    b.Property<double?>("PlannedHours")
                        .HasColumnType("double precision")
                        .HasColumnName("planned_hours");

                    b.Property<string>("Priority")
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<double?>("RatingLastValue")
                        .HasColumnType("double precision")
                        .HasColumnName("rating_last_value");

                    b.Property<Guid?>("RecurrenceId")
                        .HasColumnType("uuid")
                        .HasColumnName("recurrence_id");

                    b.Property<bool?>("RecurringTask")
                        .HasColumnType("boolean")
                        .HasColumnName("recurring_task");

                    b.Property<Guid?>("SaleLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_line_id");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_order_id");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<long?>("StageId")
                        .HasColumnType("bigint")
                        .HasColumnName("stage_id");

                    b.Property<string>("TaskProperties")
                        .HasColumnType("jsonb")
                        .HasColumnName("task_properties");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<double?>("WorkingDaysClose")
                        .HasColumnType("double precision")
                        .HasColumnName("working_days_close");

                    b.Property<double?>("WorkingDaysOpen")
                        .HasColumnType("double precision")
                        .HasColumnName("working_days_open");

                    b.Property<decimal?>("WorkingHoursClose")
                        .HasColumnType("numeric")
                        .HasColumnName("working_hours_close");

                    b.Property<decimal?>("WorkingHoursOpen")
                        .HasColumnType("numeric")
                        .HasColumnName("working_hours_open");

                    b.HasKey("Id")
                        .HasName("project_task_pkey");

                    b.HasIndex("AnalyticAccountId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DisplayedImageId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("MilestoneId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("RecurrenceId");

                    b.HasIndex("SaleOrderId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "AncestorId" }, "project_task_ancestor_id_index")
                        .HasDatabaseName("project_task_ancestor_id_index")
                        .HasFilter("(ancestor_id IS NOT NULL)");

                    b.HasIndex(new[] { "DateDeadline" }, "project_task_date_deadline_index")
                        .HasDatabaseName("project_task_date_deadline_index");

                    b.HasIndex(new[] { "DateEnd" }, "project_task_date_end_index")
                        .HasDatabaseName("project_task_date_end_index");

                    b.HasIndex(new[] { "DateLastStageUpdate" }, "project_task_date_last_stage_update_index")
                        .HasDatabaseName("project_task_date_last_stage_update_index");

                    b.HasIndex(new[] { "DisplayProjectId" }, "project_task_display_project_id_index")
                        .HasDatabaseName("project_task_display_project_id_index");

                    b.HasIndex(new[] { "EmailFrom" }, "project_task_email_from_index")
                        .HasDatabaseName("project_task_email_from_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "EmailFrom" }, "project_task_email_from_index"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "EmailFrom" }, "project_task_email_from_index"), new[] { "gin_trgm_ops" });

                    b.HasIndex(new[] { "IsClosed" }, "project_task_is_closed_index")
                        .HasDatabaseName("project_task_is_closed_index");

                    b.HasIndex(new[] { "Name" }, "project_task_name_index")
                        .HasDatabaseName("project_task_name_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "Name" }, "project_task_name_index"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Name" }, "project_task_name_index"), new[] { "gin_trgm_ops" });

                    b.HasIndex(new[] { "ParentId" }, "project_task_parent_id_index")
                        .HasDatabaseName("project_task_parent_id_index");

                    b.HasIndex(new[] { "Priority" }, "project_task_priority_index")
                        .HasDatabaseName("project_task_priority_index");

                    b.HasIndex(new[] { "ProjectId" }, "project_task_project_id_index")
                        .HasDatabaseName("project_task_project_id_index");

                    b.HasIndex(new[] { "SaleLineId" }, "project_task_sale_line_id_index")
                        .HasDatabaseName("project_task_sale_line_id_index")
                        .HasFilter("(sale_line_id IS NOT NULL)");

                    b.HasIndex(new[] { "StageId" }, "project_task_stage_id_index")
                        .HasDatabaseName("project_task_stage_id_index");

                    b.ToTable("project_task", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectTaskRecurrence", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("Fri")
                        .HasColumnType("boolean")
                        .HasColumnName("fri");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<bool?>("Mon")
                        .HasColumnType("boolean")
                        .HasColumnName("mon");

                    b.Property<DateTime?>("NextRecurrenceDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("next_recurrence_date");

                    b.Property<long?>("RecurrenceLeft")
                        .HasColumnType("bigint")
                        .HasColumnName("recurrence_left");

                    b.Property<string>("RepeatDay")
                        .HasColumnType("text")
                        .HasColumnName("repeat_day");

                    b.Property<long?>("RepeatInterval")
                        .HasColumnType("bigint")
                        .HasColumnName("repeat_interval");

                    b.Property<string>("RepeatMonth")
                        .HasColumnType("text")
                        .HasColumnName("repeat_month");

                    b.Property<long?>("RepeatNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("repeat_number");

                    b.Property<string>("RepeatOnMonth")
                        .HasColumnType("text")
                        .HasColumnName("repeat_on_month");

                    b.Property<string>("RepeatOnYear")
                        .HasColumnType("text")
                        .HasColumnName("repeat_on_year");

                    b.Property<string>("RepeatType")
                        .HasColumnType("text")
                        .HasColumnName("repeat_type");

                    b.Property<string>("RepeatUnit")
                        .HasColumnType("text")
                        .HasColumnName("repeat_unit");

                    b.Property<DateTime?>("RepeatUntil")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("repeat_until");

                    b.Property<string>("RepeatWeek")
                        .HasColumnType("text")
                        .HasColumnName("repeat_week");

                    b.Property<string>("RepeatWeekday")
                        .HasColumnType("text")
                        .HasColumnName("repeat_weekday");

                    b.Property<bool?>("Sat")
                        .HasColumnType("boolean")
                        .HasColumnName("sat");

                    b.Property<bool?>("Sun")
                        .HasColumnType("boolean")
                        .HasColumnName("sun");

                    b.Property<bool?>("Thu")
                        .HasColumnType("boolean")
                        .HasColumnName("thu");

                    b.Property<bool?>("Tue")
                        .HasColumnType("boolean")
                        .HasColumnName("tue");

                    b.Property<bool?>("Wed")
                        .HasColumnType("boolean")
                        .HasColumnName("wed");

                    b.HasKey("Id")
                        .HasName("project_task_recurrence_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("project_task_recurrence", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectTaskType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<bool?>("AutoValidationKanbanState")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_validation_kanban_state");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Description")
                        .HasColumnType("jsonb")
                        .HasColumnName("description");

                    b.Property<bool?>("Fold")
                        .HasColumnType("boolean")
                        .HasColumnName("fold");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("LegendBlocked")
                        .HasColumnType("jsonb")
                        .HasColumnName("legend_blocked");

                    b.Property<string>("LegendDone")
                        .HasColumnType("jsonb")
                        .HasColumnName("legend_done");

                    b.Property<string>("LegendNormal")
                        .HasColumnType("jsonb")
                        .HasColumnName("legend_normal");

                    b.Property<Guid?>("MailTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_template_id");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<Guid?>("RatingTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("rating_template_id");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.Property<Guid?>("SmsTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("sms_template_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("project_task_type_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MailTemplateId");

                    b.HasIndex("RatingTemplateId");

                    b.HasIndex("SmsTemplateId");

                    b.HasIndex(new[] { "UserId" }, "project_task_type_user_id_index")
                        .HasDatabaseName("project_task_type_user_id_index");

                    b.ToTable("project_task_type", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectTaskTypeDeleteWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("project_task_type_delete_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("project_task_type_delete_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectTaskUserRel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("StageId")
                        .HasColumnType("bigint")
                        .HasColumnName("stage_id");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("project_task_user_rel_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("StageId");

                    b.HasIndex(new[] { "TaskId", "UserId" }, "project_task_user_rel_project_personal_stage_unique")
                        .IsUnique()
                        .HasDatabaseName("project_task_user_rel_project_personal_stage_unique");

                    b.HasIndex(new[] { "TaskId" }, "project_task_user_rel_task_id_index")
                        .HasDatabaseName("project_task_user_rel_task_id_index");

                    b.HasIndex(new[] { "UserId" }, "project_task_user_rel_user_id_index")
                        .HasDatabaseName("project_task_user_rel_user_id_index");

                    b.ToTable("project_task_user_rel", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectUpdate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("EmailCc")
                        .HasColumnType("text")
                        .HasColumnName("email_cc");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("Progress")
                        .HasColumnType("bigint")
                        .HasColumnName("progress");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("project_update_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("project_update", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PurchaseOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<decimal?>("AmountTax")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_tax");

                    b.Property<decimal?>("AmountTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_total");

                    b.Property<decimal?>("AmountUntaxed")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_untaxed");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<double?>("CurrencyRate")
                        .HasColumnType("double precision")
                        .HasColumnName("currency_rate");

                    b.Property<DateTime?>("DateApprove")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_approve");

                    b.Property<DateTime?>("DateCalendarStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_calendar_start");

                    b.Property<DateTime?>("DateOrder")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_order");

                    b.Property<DateTime?>("DatePlanned")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_planned");

                    b.Property<Guid?>("DestAddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("dest_address_id");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("effective_date");

                    b.Property<Guid?>("FiscalPositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("fiscal_position_id");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid?>("IncotermId")
                        .HasColumnType("uuid")
                        .HasColumnName("incoterm_id");

                    b.Property<string>("IncotermLocation")
                        .HasColumnType("text")
                        .HasColumnName("incoterm_location");

                    b.Property<long?>("InvoiceCount")
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_count");

                    b.Property<string>("InvoiceStatus")
                        .HasColumnType("text")
                        .HasColumnName("invoice_status");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<bool?>("MailReceptionConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("mail_reception_confirmed");

                    b.Property<bool?>("MailReminderConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("mail_reminder_confirmed");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Origin")
                        .HasColumnType("text")
                        .HasColumnName("origin");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<string>("PartnerRef")
                        .HasColumnType("text")
                        .HasColumnName("partner_ref");

                    b.Property<Guid?>("PaymentTermId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_term_id");

                    b.Property<Guid?>("PickingTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("picking_type_id");

                    b.Property<string>("Priority")
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<string>("ReceiptStatus")
                        .HasColumnType("text")
                        .HasColumnName("receipt_status");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("purchase_order_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DestAddressId");

                    b.HasIndex("FiscalPositionId");

                    b.HasIndex("GroupId");

                    b.HasIndex("IncotermId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PaymentTermId");

                    b.HasIndex("PickingTypeId");

                    b.HasIndex(new[] { "TenantId" }, "purchase_order_company_id_index")
                        .HasDatabaseName("purchase_order_company_id_index");

                    b.HasIndex(new[] { "DateApprove" }, "purchase_order_date_approve_index")
                        .HasDatabaseName("purchase_order_date_approve_index");

                    b.HasIndex(new[] { "DateOrder" }, "purchase_order_date_order_index")
                        .HasDatabaseName("purchase_order_date_order_index");

                    b.HasIndex(new[] { "DatePlanned" }, "purchase_order_date_planned_index")
                        .HasDatabaseName("purchase_order_date_planned_index");

                    b.HasIndex(new[] { "Name" }, "purchase_order_name_index")
                        .HasDatabaseName("purchase_order_name_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "Name" }, "purchase_order_name_index"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Name" }, "purchase_order_name_index"), new[] { "gin_trgm_ops" });

                    b.HasIndex(new[] { "Priority" }, "purchase_order_priority_index")
                        .HasDatabaseName("purchase_order_priority_index");

                    b.HasIndex(new[] { "State" }, "purchase_order_state_index")
                        .HasDatabaseName("purchase_order_state_index");

                    b.HasIndex(new[] { "UserId" }, "purchase_order_user_id_index")
                        .HasDatabaseName("purchase_order_user_id_index");

                    b.ToTable("purchase_order", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.PurchaseOrderLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AnalyticDistribution")
                        .HasColumnType("jsonb")
                        .HasColumnName("analytic_distribution");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("DatePlanned")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_planned");

                    b.Property<string>("DisplayType")
                        .HasColumnType("text")
                        .HasColumnName("display_type");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid?>("OrderpointId")
                        .HasColumnType("uuid")
                        .HasColumnName("orderpoint_id");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<decimal?>("PriceSubtotal")
                        .HasColumnType("numeric")
                        .HasColumnName("price_subtotal");

                    b.Property<double?>("PriceTax")
                        .HasColumnType("double precision")
                        .HasColumnName("price_tax");

                    b.Property<decimal?>("PriceTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("price_total");

                    b.Property<decimal?>("PriceUnit")
                        .HasColumnType("numeric")
                        .HasColumnName("price_unit");

                    b.Property<string>("ProductDescriptionVariants")
                        .HasColumnType("text")
                        .HasColumnName("product_description_variants");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ProductPackagingId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_packaging_id");

                    b.Property<double?>("ProductPackagingQty")
                        .HasColumnType("double precision")
                        .HasColumnName("product_packaging_qty");

                    b.Property<decimal?>("ProductQty")
                        .HasColumnType("numeric")
                        .HasColumnName("product_qty");

                    b.Property<Guid?>("ProductUom")
                        .HasColumnType("uuid")
                        .HasColumnName("product_uom");

                    b.Property<double?>("ProductUomQty")
                        .HasColumnType("double precision")
                        .HasColumnName("product_uom_qty");

                    b.Property<bool?>("PropagateCancel")
                        .HasColumnType("boolean")
                        .HasColumnName("propagate_cancel");

                    b.Property<decimal?>("QtyInvoiced")
                        .HasColumnType("numeric")
                        .HasColumnName("qty_invoiced");

                    b.Property<decimal?>("QtyReceived")
                        .HasColumnType("numeric")
                        .HasColumnName("qty_received");

                    b.Property<decimal?>("QtyReceivedManual")
                        .HasColumnType("numeric")
                        .HasColumnName("qty_received_manual");

                    b.Property<string>("QtyReceivedMethod")
                        .HasColumnType("text")
                        .HasColumnName("qty_received_method");

                    b.Property<decimal?>("QtyToInvoice")
                        .HasColumnType("numeric")
                        .HasColumnName("qty_to_invoice");

                    b.Property<Guid?>("SaleLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_line_id");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_order_id");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("purchase_order_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ProductPackagingId");

                    b.HasIndex("ProductUom");

                    b.HasIndex("SaleOrderId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "AnalyticDistribution" }, "purchase_order_line_analytic_distribution_gin_index")
                        .HasDatabaseName("purchase_order_line_analytic_distribution_gin_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "AnalyticDistribution" }, "purchase_order_line_analytic_distribution_gin_index"), "gin");

                    b.HasIndex(new[] { "DatePlanned" }, "purchase_order_line_date_planned_index")
                        .HasDatabaseName("purchase_order_line_date_planned_index");

                    b.HasIndex(new[] { "OrderId" }, "purchase_order_line_order_id_index")
                        .HasDatabaseName("purchase_order_line_order_id_index");

                    b.HasIndex(new[] { "OrderpointId" }, "purchase_order_line_orderpoint_id_index")
                        .HasDatabaseName("purchase_order_line_orderpoint_id_index")
                        .HasFilter("(orderpoint_id IS NOT NULL)");

                    b.HasIndex(new[] { "ProductId" }, "purchase_order_line_product_id_index")
                        .HasDatabaseName("purchase_order_line_product_id_index")
                        .HasFilter("(product_id IS NOT NULL)");

                    b.HasIndex(new[] { "SaleLineId" }, "purchase_order_line_sale_line_id_index")
                        .HasDatabaseName("purchase_order_line_sale_line_id_index")
                        .HasFilter("(sale_line_id IS NOT NULL)");

                    b.ToTable("purchase_order_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.RatingRating", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<bool?>("Consumed")
                        .HasColumnType("boolean")
                        .HasColumnName("consumed");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Feedback")
                        .HasColumnType("text")
                        .HasColumnName("feedback");

                    b.Property<bool?>("IsInternal")
                        .HasColumnType("boolean")
                        .HasColumnName("is_internal");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<Guid?>("ParentResId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_res_id");

                    b.Property<string>("ParentResModel")
                        .HasColumnType("text")
                        .HasColumnName("parent_res_model");

                    b.Property<Guid?>("ParentResModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_res_model_id");

                    b.Property<string>("ParentResName")
                        .HasColumnType("text")
                        .HasColumnName("parent_res_name");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<string>("PublisherComment")
                        .HasColumnType("text")
                        .HasColumnName("publisher_comment");

                    b.Property<DateTime?>("PublisherDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("publisher_datetime");

                    b.Property<Guid?>("PublisherId")
                        .HasColumnType("uuid")
                        .HasColumnName("publisher_id");

                    b.Property<Guid?>("RatedPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("rated_partner_id");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<string>("RatingText")
                        .HasColumnType("text")
                        .HasColumnName("rating_text");

                    b.Property<Guid?>("ResId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_id");

                    b.Property<string>("ResModel")
                        .HasColumnType("text")
                        .HasColumnName("res_model");

                    b.Property<Guid?>("ResModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_model_id");

                    b.Property<string>("ResName")
                        .HasColumnType("text")
                        .HasColumnName("res_name");

                    b.HasKey("Id")
                        .HasName("rating_rating_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("RatedPartnerId");

                    b.HasIndex(new[] { "MessageId" }, "rating_rating_message_id_index")
                        .HasDatabaseName("rating_rating_message_id_index");

                    b.HasIndex(new[] { "ParentResId" }, "rating_rating_parent_res_id_index")
                        .HasDatabaseName("rating_rating_parent_res_id_index");

                    b.HasIndex(new[] { "ParentResModelId" }, "rating_rating_parent_res_model_id_index")
                        .HasDatabaseName("rating_rating_parent_res_model_id_index");

                    b.HasIndex(new[] { "ParentResModel" }, "rating_rating_parent_res_model_index")
                        .HasDatabaseName("rating_rating_parent_res_model_index");

                    b.HasIndex(new[] { "ResId" }, "rating_rating_res_id_index")
                        .HasDatabaseName("rating_rating_res_id_index");

                    b.HasIndex(new[] { "ResModelId" }, "rating_rating_res_model_id_index")
                        .HasDatabaseName("rating_rating_res_model_id_index");

                    b.HasIndex(new[] { "ResModel" }, "rating_rating_res_model_index")
                        .HasDatabaseName("rating_rating_res_model_index");

                    b.ToTable("rating_rating", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.RecurringPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateBegin")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_begin");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<string>("PaymentType")
                        .HasColumnType("text")
                        .HasColumnName("payment_type");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("recurring_payment_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("TenantId");

                    b.ToTable("recurring_payment", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.RecurringPaymentLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<Guid?>("JournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("journal_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<Guid?>("RecurringPaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("recurring_payment_id");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("recurring_payment_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("JournalId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("RecurringPaymentId");

                    b.HasIndex("TenantId");

                    b.ToTable("recurring_payment_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.RepairFee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("InvoiceLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_line_id");

                    b.Property<bool?>("Invoiced")
                        .HasColumnType("boolean")
                        .HasColumnName("invoiced");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal?>("PriceSubtotal")
                        .HasColumnType("numeric")
                        .HasColumnName("price_subtotal");

                    b.Property<decimal?>("PriceTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("price_total");

                    b.Property<decimal?>("PriceUnit")
                        .HasColumnType("numeric")
                        .HasColumnName("price_unit");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ProductUom")
                        .HasColumnType("uuid")
                        .HasColumnName("product_uom");

                    b.Property<decimal?>("ProductUomQty")
                        .HasColumnType("numeric")
                        .HasColumnName("product_uom_qty");

                    b.Property<Guid?>("RepairId")
                        .HasColumnType("uuid")
                        .HasColumnName("repair_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("repair_fee_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("InvoiceLineId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductUom");

                    b.HasIndex(new[] { "TenantId" }, "repair_fee_company_id_index")
                        .HasDatabaseName("repair_fee_company_id_index");

                    b.HasIndex(new[] { "Name" }, "repair_fee_name_index")
                        .HasDatabaseName("repair_fee_name_index");

                    b.HasIndex(new[] { "RepairId" }, "repair_fee_repair_id_index")
                        .HasDatabaseName("repair_fee_repair_id_index");

                    b.ToTable("repair_fee", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.RepairLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("InvoiceLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_line_id");

                    b.Property<bool?>("Invoiced")
                        .HasColumnType("boolean")
                        .HasColumnName("invoiced");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LocationDestId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_dest_id");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<Guid?>("LotId")
                        .HasColumnType("uuid")
                        .HasColumnName("lot_id");

                    b.Property<Guid?>("MoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("move_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal?>("PriceSubtotal")
                        .HasColumnType("numeric")
                        .HasColumnName("price_subtotal");

                    b.Property<decimal?>("PriceTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("price_total");

                    b.Property<decimal?>("PriceUnit")
                        .HasColumnType("numeric")
                        .HasColumnName("price_unit");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ProductUom")
                        .HasColumnType("uuid")
                        .HasColumnName("product_uom");

                    b.Property<decimal?>("ProductUomQty")
                        .HasColumnType("numeric")
                        .HasColumnName("product_uom_qty");

                    b.Property<Guid?>("RepairId")
                        .HasColumnType("uuid")
                        .HasColumnName("repair_id");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("repair_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("InvoiceLineId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LotId");

                    b.HasIndex("MoveId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductUom");

                    b.HasIndex(new[] { "TenantId" }, "repair_line_company_id_index")
                        .HasDatabaseName("repair_line_company_id_index");

                    b.HasIndex(new[] { "LocationDestId" }, "repair_line_location_dest_id_index")
                        .HasDatabaseName("repair_line_location_dest_id_index");

                    b.HasIndex(new[] { "LocationId" }, "repair_line_location_id_index")
                        .HasDatabaseName("repair_line_location_id_index");

                    b.HasIndex(new[] { "RepairId" }, "repair_line_repair_id_index")
                        .HasDatabaseName("repair_line_repair_id_index");

                    b.ToTable("repair_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.RepairOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<double?>("AmountTax")
                        .HasColumnType("double precision")
                        .HasColumnName("amount_tax");

                    b.Property<double?>("AmountTotal")
                        .HasColumnType("double precision")
                        .HasColumnName("amount_total");

                    b.Property<double?>("AmountUntaxed")
                        .HasColumnType("double precision")
                        .HasColumnName("amount_untaxed");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("GuaranteeLimit")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("guarantee_limit");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("text")
                        .HasColumnName("internal_notes");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_id");

                    b.Property<string>("InvoiceMethod")
                        .HasColumnType("text")
                        .HasColumnName("invoice_method");

                    b.Property<bool?>("Invoiced")
                        .HasColumnType("boolean")
                        .HasColumnName("invoiced");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<Guid?>("LotId")
                        .HasColumnType("uuid")
                        .HasColumnName("lot_id");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<Guid?>("MoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("move_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid?>("PartnerInvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_invoice_id");

                    b.Property<Guid?>("PickingId")
                        .HasColumnType("uuid")
                        .HasColumnName("picking_id");

                    b.Property<Guid?>("PricelistId")
                        .HasColumnType("uuid")
                        .HasColumnName("pricelist_id");

                    b.Property<string>("Priority")
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<decimal?>("ProductQty")
                        .HasColumnType("numeric")
                        .HasColumnName("product_qty");

                    b.Property<Guid?>("ProductUom")
                        .HasColumnType("uuid")
                        .HasColumnName("product_uom");

                    b.Property<string>("QuotationNotes")
                        .HasColumnType("text")
                        .HasColumnName("quotation_notes");

                    b.Property<bool?>("Repaired")
                        .HasColumnType("boolean")
                        .HasColumnName("repaired");

                    b.Property<Guid?>("SaleOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_order_id");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("schedule_date");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("repair_order_pkey");

                    b.HasIndex("AddressId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LotId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("MoveId");

                    b.HasIndex("PartnerInvoiceId");

                    b.HasIndex("PickingId");

                    b.HasIndex("PricelistId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductUom");

                    b.HasIndex("SaleOrderId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "TenantId" }, "repair_order_company_id_index")
                        .HasDatabaseName("repair_order_company_id_index");

                    b.HasIndex(new[] { "InvoiceMethod" }, "repair_order_invoice_method_index")
                        .HasDatabaseName("repair_order_invoice_method_index");

                    b.HasIndex(new[] { "LocationId" }, "repair_order_location_id_index")
                        .HasDatabaseName("repair_order_location_id_index");

                    b.HasIndex(new[] { "Name" }, "repair_order_name")
                        .IsUnique()
                        .HasDatabaseName("repair_order_name");

                    b.HasIndex(new[] { "Name" }, "repair_order_name_index")
                        .HasDatabaseName("repair_order_name_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "Name" }, "repair_order_name_index"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Name" }, "repair_order_name_index"), new[] { "gin_trgm_ops" });

                    b.HasIndex(new[] { "PartnerId" }, "repair_order_partner_id_index")
                        .HasDatabaseName("repair_order_partner_id_index");

                    b.ToTable("repair_order", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.RepairOrderMakeInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("Group")
                        .HasColumnType("boolean")
                        .HasColumnName("group");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("repair_order_make_invoice_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("repair_order_make_invoice", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.RepairTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("repair_tags_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Name" }, "repair_tags_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("repair_tags_name_uniq");

                    b.ToTable("repair_tags", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ReportLayout", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Pdf")
                        .HasColumnType("text")
                        .HasColumnName("pdf");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.Property<Guid?>("ViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("view_id");

                    b.HasKey("Id")
                        .HasName("report_layout_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ViewId");

                    b.ToTable("report_layout", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ReportPaperformat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("Default")
                        .HasColumnType("boolean")
                        .HasColumnName("default");

                    b.Property<bool?>("DisableShrinking")
                        .HasColumnType("boolean")
                        .HasColumnName("disable_shrinking");

                    b.Property<long?>("Dpi")
                        .HasColumnType("bigint")
                        .HasColumnName("dpi");

                    b.Property<string>("Format")
                        .HasColumnType("text")
                        .HasColumnName("format");

                    b.Property<bool?>("HeaderLine")
                        .HasColumnType("boolean")
                        .HasColumnName("header_line");

                    b.Property<long?>("HeaderSpacing")
                        .HasColumnType("bigint")
                        .HasColumnName("header_spacing");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<double?>("MarginBottom")
                        .HasColumnType("double precision")
                        .HasColumnName("margin_bottom");

                    b.Property<double?>("MarginLeft")
                        .HasColumnType("double precision")
                        .HasColumnName("margin_left");

                    b.Property<double?>("MarginRight")
                        .HasColumnType("double precision")
                        .HasColumnName("margin_right");

                    b.Property<double?>("MarginTop")
                        .HasColumnType("double precision")
                        .HasColumnName("margin_top");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Orientation")
                        .HasColumnType("text")
                        .HasColumnName("orientation");

                    b.Property<long?>("PageHeight")
                        .HasColumnType("bigint")
                        .HasColumnName("page_height");

                    b.Property<long?>("PageWidth")
                        .HasColumnType("bigint")
                        .HasColumnName("page_width");

                    b.HasKey("Id")
                        .HasName("report_paperformat_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("report_paperformat", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResBank", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Bic")
                        .HasColumnType("text")
                        .HasColumnName("bic");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<long?>("Country")
                        .HasColumnType("bigint")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<long?>("State")
                        .HasColumnType("bigint")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<string>("Street2")
                        .HasColumnType("text")
                        .HasColumnName("street2");

                    b.Property<string>("Zip")
                        .HasColumnType("text")
                        .HasColumnName("zip");

                    b.HasKey("Id")
                        .HasName("res_bank_pkey");

                    b.HasIndex("Country");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("State");

                    b.HasIndex(new[] { "Bic" }, "res_bank_bic_index")
                        .HasDatabaseName("res_bank_bic_index");

                    b.ToTable("res_bank", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AccountCashBasisBaseAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_cash_basis_base_account_id");

                    b.Property<string>("AccountDashboardOnboardingState")
                        .HasColumnType("text")
                        .HasColumnName("account_dashboard_onboarding_state");

                    b.Property<Guid?>("AccountDefaultPosReceivableAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_default_pos_receivable_account_id");

                    b.Property<long?>("AccountFiscalCountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_fiscal_country_id");

                    b.Property<string>("AccountInvoiceOnboardingState")
                        .HasColumnType("text")
                        .HasColumnName("account_invoice_onboarding_state");

                    b.Property<Guid?>("AccountJournalEarlyPayDiscountGainAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_early_pay_discount_gain_account_id");

                    b.Property<Guid?>("AccountJournalEarlyPayDiscountLossAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_early_pay_discount_loss_account_id");

                    b.Property<Guid?>("AccountJournalPaymentCreditAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_payment_credit_account_id");

                    b.Property<Guid?>("AccountJournalPaymentDebitAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_payment_debit_account_id");

                    b.Property<Guid?>("AccountJournalSuspenseAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_suspense_account_id");

                    b.Property<bool?>("AccountOnboardingCreateInvoiceStateFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("account_onboarding_create_invoice_state_flag");

                    b.Property<string>("AccountOnboardingInvoiceLayoutState")
                        .HasColumnType("text")
                        .HasColumnName("account_onboarding_invoice_layout_state");

                    b.Property<string>("AccountOnboardingSaleTaxState")
                        .HasColumnType("text")
                        .HasColumnName("account_onboarding_sale_tax_state");

                    b.Property<DateTime?>("AccountOpeningDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("account_opening_date");

                    b.Property<Guid?>("AccountOpeningMoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_opening_move_id");

                    b.Property<Guid?>("AccountPurchaseTaxId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_purchase_tax_id");

                    b.Property<Guid?>("AccountSaleTaxId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_sale_tax_id");

                    b.Property<string>("AccountSetupBankDataState")
                        .HasColumnType("text")
                        .HasColumnName("account_setup_bank_data_state");

                    b.Property<string>("AccountSetupBillState")
                        .HasColumnType("text")
                        .HasColumnName("account_setup_bill_state");

                    b.Property<string>("AccountSetupCoaState")
                        .HasColumnType("text")
                        .HasColumnName("account_setup_coa_state");

                    b.Property<string>("AccountSetupFyDataState")
                        .HasColumnType("text")
                        .HasColumnName("account_setup_fy_data_state");

                    b.Property<string>("AccountSetupTaxesState")
                        .HasColumnType("text")
                        .HasColumnName("account_setup_taxes_state");

                    b.Property<bool?>("AccountStorno")
                        .HasColumnType("boolean")
                        .HasColumnName("account_storno");

                    b.Property<bool?>("AccountUseCreditLimit")
                        .HasColumnType("boolean")
                        .HasColumnName("account_use_credit_limit");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<bool?>("AngloSaxonAccounting")
                        .HasColumnType("boolean")
                        .HasColumnName("anglo_saxon_accounting");

                    b.Property<long?>("AnnualInventoryDay")
                        .HasColumnType("bigint")
                        .HasColumnName("annual_inventory_day");

                    b.Property<string>("AnnualInventoryMonth")
                        .HasColumnType("text")
                        .HasColumnName("annual_inventory_month");

                    b.Property<string>("AttendanceBarcodeSource")
                        .HasColumnType("text")
                        .HasColumnName("attendance_barcode_source");

                    b.Property<long?>("AttendanceKioskDelay")
                        .HasColumnType("bigint")
                        .HasColumnName("attendance_kiosk_delay");

                    b.Property<string>("AttendanceKioskMode")
                        .HasColumnType("text")
                        .HasColumnName("attendance_kiosk_mode");

                    b.Property<Guid?>("AutomaticEntryDefaultJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("automatic_entry_default_journal_id");

                    b.Property<string>("BankAccountCodePrefix")
                        .HasColumnType("text")
                        .HasColumnName("bank_account_code_prefix");

                    b.Property<string>("BaseOnboardingCompanyState")
                        .HasColumnType("text")
                        .HasColumnName("base_onboarding_company_state");

                    b.Property<string>("CashAccountCodePrefix")
                        .HasColumnType("text")
                        .HasColumnName("cash_account_code_prefix");

                    b.Property<Guid?>("ChartTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("chart_template_id");

                    b.Property<string>("CompanyDetails")
                        .HasColumnType("text")
                        .HasColumnName("company_details");

                    b.Property<Guid?>("CompanyExpenseJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_expense_journal_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("CurrencyExchangeJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("currency_exchange_journal_id");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<double?>("DaysToPurchase")
                        .HasColumnType("double precision")
                        .HasColumnName("days_to_purchase");

                    b.Property<Guid?>("DefaultCashDifferenceExpenseAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("default_cash_difference_expense_account_id");

                    b.Property<Guid?>("DefaultCashDifferenceIncomeAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("default_cash_difference_income_account_id");

                    b.Property<string>("EarlyPayDiscountComputation")
                        .HasColumnType("text")
                        .HasColumnName("early_pay_discount_computation");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool?>("ExpectsChartOfAccounts")
                        .HasColumnType("boolean")
                        .HasColumnName("expects_chart_of_accounts");

                    b.Property<Guid?>("ExpenseAccrualAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("expense_accrual_account_id");

                    b.Property<Guid?>("ExpenseCurrencyExchangeAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("expense_currency_exchange_account_id");

                    b.Property<Guid?>("ExpenseJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("expense_journal_id");

                    b.Property<Guid?>("ExternalReportLayoutId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_report_layout_id");

                    b.Property<long?>("FiscalyearLastDay")
                        .HasColumnType("bigint")
                        .HasColumnName("fiscalyear_last_day");

                    b.Property<string>("FiscalyearLastMonth")
                        .HasColumnType("text")
                        .HasColumnName("fiscalyear_last_month");

                    b.Property<DateTime?>("FiscalyearLockDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fiscalyear_lock_date");

                    b.Property<string>("Font")
                        .HasColumnType("text")
                        .HasColumnName("font");

                    b.Property<bool?>("HasReceivedWarningStockSms")
                        .HasColumnType("boolean")
                        .HasColumnName("has_received_warning_stock_sms");

                    b.Property<bool?>("HrAttendanceOvertime")
                        .HasColumnType("boolean")
                        .HasColumnName("hr_attendance_overtime");

                    b.Property<long?>("HrPresenceControlEmailAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("hr_presence_control_email_amount");

                    b.Property<string>("HrPresenceControlIpList")
                        .HasColumnType("text")
                        .HasColumnName("hr_presence_control_ip_list");

                    b.Property<bool?>("IapEnrichAutoDone")
                        .HasColumnType("boolean")
                        .HasColumnName("iap_enrich_auto_done");

                    b.Property<Guid?>("IncomeCurrencyExchangeAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("income_currency_exchange_account_id");

                    b.Property<Guid?>("IncotermId")
                        .HasColumnType("uuid")
                        .HasColumnName("incoterm_id");

                    b.Property<Guid?>("InternalTransitLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("internal_transit_location_id");

                    b.Property<bool?>("InvoiceIsEmail")
                        .HasColumnType("boolean")
                        .HasColumnName("invoice_is_email");

                    b.Property<bool?>("InvoiceIsPrint")
                        .HasColumnType("boolean")
                        .HasColumnName("invoice_is_print");

                    b.Property<bool?>("InvoiceIsSnailmail")
                        .HasColumnType("boolean")
                        .HasColumnName("invoice_is_snailmail");

                    b.Property<string>("InvoiceTerms")
                        .HasColumnType("jsonb")
                        .HasColumnName("invoice_terms");

                    b.Property<string>("InvoiceTermsHtml")
                        .HasColumnType("jsonb")
                        .HasColumnName("invoice_terms_html");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("LayoutBackground")
                        .HasColumnType("text")
                        .HasColumnName("layout_background");

                    b.Property<byte[]>("LogoWeb")
                        .HasColumnType("bytea")
                        .HasColumnName("logo_web");

                    b.Property<double?>("LunchMinimumThreshold")
                        .HasColumnType("double precision")
                        .HasColumnName("lunch_minimum_threshold");

                    b.Property<string>("LunchNotifyMessage")
                        .HasColumnType("jsonb")
                        .HasColumnName("lunch_notify_message");

                    b.Property<double?>("ManufacturingLead")
                        .HasColumnType("double precision")
                        .HasColumnName("manufacturing_lead");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Mobile")
                        .HasColumnType("text")
                        .HasColumnName("mobile");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("NomenclatureId")
                        .HasColumnType("bigint")
                        .HasColumnName("nomenclature_id");

                    b.Property<long?>("OvertimeCompanyThreshold")
                        .HasColumnType("bigint")
                        .HasColumnName("overtime_company_threshold");

                    b.Property<long?>("OvertimeEmployeeThreshold")
                        .HasColumnType("bigint")
                        .HasColumnName("overtime_employee_threshold");

                    b.Property<DateTime?>("OvertimeStartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("overtime_start_date");

                    b.Property<long?>("PaperformatId")
                        .HasColumnType("bigint")
                        .HasColumnName("paperformat_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("PartnerGid")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_gid");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<string>("PaymentOnboardingPaymentMethod")
                        .HasColumnType("text")
                        .HasColumnName("payment_onboarding_payment_method");

                    b.Property<string>("PaymentProviderOnboardingState")
                        .HasColumnType("text")
                        .HasColumnName("payment_provider_onboarding_state");

                    b.Property<DateTime?>("PeriodLockDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("period_lock_date");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("PoDoubleValidation")
                        .HasColumnType("text")
                        .HasColumnName("po_double_validation");

                    b.Property<decimal?>("PoDoubleValidationAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("po_double_validation_amount");

                    b.Property<double?>("PoLead")
                        .HasColumnType("double precision")
                        .HasColumnName("po_lead");

                    b.Property<string>("PoLock")
                        .HasColumnType("text")
                        .HasColumnName("po_lock");

                    b.Property<string>("PointOfSaleUpdateStockQuantities")
                        .HasColumnType("text")
                        .HasColumnName("point_of_sale_update_stock_quantities");

                    b.Property<bool?>("PointOfSaleUseTicketQrCode")
                        .HasColumnType("boolean")
                        .HasColumnName("point_of_sale_use_ticket_qr_code");

                    b.Property<bool?>("PortalConfirmationPay")
                        .HasColumnType("boolean")
                        .HasColumnName("portal_confirmation_pay");

                    b.Property<bool?>("PortalConfirmationSign")
                        .HasColumnType("boolean")
                        .HasColumnName("portal_confirmation_sign");

                    b.Property<string>("PrimaryColor")
                        .HasColumnType("text")
                        .HasColumnName("primary_color");

                    b.Property<Guid?>("PropertyStockAccountInputCategId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_stock_account_input_categ_id");

                    b.Property<Guid?>("PropertyStockAccountOutputCategId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_stock_account_output_categ_id");

                    b.Property<Guid?>("PropertyStockValuationAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("property_stock_valuation_account_id");

                    b.Property<bool?>("QrCode")
                        .HasColumnType("boolean")
                        .HasColumnName("qr_code");

                    b.Property<string>("QuickEditMode")
                        .HasColumnType("text")
                        .HasColumnName("quick_edit_mode");

                    b.Property<long?>("QuotationValidityDays")
                        .HasColumnType("bigint")
                        .HasColumnName("quotation_validity_days");

                    b.Property<string>("ReportFooter")
                        .HasColumnType("jsonb")
                        .HasColumnName("report_footer");

                    b.Property<string>("ReportHeader")
                        .HasColumnType("text")
                        .HasColumnName("report_header");

                    b.Property<Guid?>("ResourceCalendarId")
                        .HasColumnType("uuid")
                        .HasColumnName("resource_calendar_id");

                    b.Property<Guid?>("RevenueAccrualAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("revenue_accrual_account_id");

                    b.Property<string>("SaleOnboardingOrderConfirmationState")
                        .HasColumnType("text")
                        .HasColumnName("sale_onboarding_order_confirmation_state");

                    b.Property<string>("SaleOnboardingPaymentMethod")
                        .HasColumnType("text")
                        .HasColumnName("sale_onboarding_payment_method");

                    b.Property<string>("SaleOnboardingSampleQuotationState")
                        .HasColumnType("text")
                        .HasColumnName("sale_onboarding_sample_quotation_state");

                    b.Property<Guid?>("SaleOrderTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_order_template_id");

                    b.Property<string>("SaleQuotationOnboardingState")
                        .HasColumnType("text")
                        .HasColumnName("sale_quotation_onboarding_state");

                    b.Property<string>("SecondaryColor")
                        .HasColumnType("text")
                        .HasColumnName("secondary_color");

                    b.Property<double?>("SecurityLead")
                        .HasColumnType("double precision")
                        .HasColumnName("security_lead");

                    b.Property<long?>("Sequence")
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    b.Property<bool?>("SnailmailColor")
                        .HasColumnType("boolean")
                        .HasColumnName("snailmail_color");

                    b.Property<bool?>("SnailmailCover")
                        .HasColumnType("boolean")
                        .HasColumnName("snailmail_cover");

                    b.Property<bool?>("SnailmailDuplex")
                        .HasColumnType("boolean")
                        .HasColumnName("snailmail_duplex");

                    b.Property<string>("SocialFacebook")
                        .HasColumnType("text")
                        .HasColumnName("social_facebook");

                    b.Property<string>("SocialGithub")
                        .HasColumnType("text")
                        .HasColumnName("social_github");

                    b.Property<string>("SocialInstagram")
                        .HasColumnType("text")
                        .HasColumnName("social_instagram");

                    b.Property<string>("SocialLinkedin")
                        .HasColumnType("text")
                        .HasColumnName("social_linkedin");

                    b.Property<string>("SocialTwitter")
                        .HasColumnType("text")
                        .HasColumnName("social_twitter");

                    b.Property<string>("SocialYoutube")
                        .HasColumnType("text")
                        .HasColumnName("social_youtube");

                    b.Property<Guid?>("StockMailConfirmationTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_mail_confirmation_template_id");

                    b.Property<bool?>("StockMoveEmailValidation")
                        .HasColumnType("boolean")
                        .HasColumnName("stock_move_email_validation");

                    b.Property<bool?>("StockMoveSmsValidation")
                        .HasColumnType("boolean")
                        .HasColumnName("stock_move_sms_validation");

                    b.Property<Guid?>("StockSmsConfirmationTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_sms_confirmation_template_id");

                    b.Property<string>("TaxCalculationRoundingMethod")
                        .HasColumnType("text")
                        .HasColumnName("tax_calculation_rounding_method");

                    b.Property<Guid?>("TaxCashBasisJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("tax_cash_basis_journal_id");

                    b.Property<bool?>("TaxExigibility")
                        .HasColumnType("boolean")
                        .HasColumnName("tax_exigibility");

                    b.Property<DateTime?>("TaxLockDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("tax_lock_date");

                    b.Property<string>("TermsType")
                        .HasColumnType("text")
                        .HasColumnName("terms_type");

                    b.Property<string>("TransferAccountCodePrefix")
                        .HasColumnType("text")
                        .HasColumnName("transfer_account_code_prefix");

                    b.Property<Guid?>("TransferAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("transfer_account_id");

                    b.Property<bool?>("VatCheckVies")
                        .HasColumnType("boolean")
                        .HasColumnName("vat_check_vies");

                    b.Property<Guid?>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.Property<string>("WebsiteSaleOnboardingPaymentProviderState")
                        .HasColumnType("text")
                        .HasColumnName("website_sale_onboarding_payment_provider_state");

                    b.HasKey("Id")
                        .HasName("res_company_pkey");

                    b.HasIndex("AccountCashBasisBaseAccountId");

                    b.HasIndex("AccountDefaultPosReceivableAccountId");

                    b.HasIndex("AccountFiscalCountryId");

                    b.HasIndex("AccountJournalEarlyPayDiscountGainAccountId");

                    b.HasIndex("AccountJournalEarlyPayDiscountLossAccountId");

                    b.HasIndex("AccountJournalPaymentCreditAccountId");

                    b.HasIndex("AccountJournalPaymentDebitAccountId");

                    b.HasIndex("AccountJournalSuspenseAccountId");

                    b.HasIndex("AccountOpeningMoveId");

                    b.HasIndex("AccountPurchaseTaxId");

                    b.HasIndex("AccountSaleTaxId");

                    b.HasIndex("AutomaticEntryDefaultJournalId");

                    b.HasIndex("ChartTemplateId");

                    b.HasIndex("CompanyExpenseJournalId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyExchangeJournalId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DefaultCashDifferenceExpenseAccountId");

                    b.HasIndex("DefaultCashDifferenceIncomeAccountId");

                    b.HasIndex("ExpenseAccrualAccountId");

                    b.HasIndex("ExpenseCurrencyExchangeAccountId");

                    b.HasIndex("ExpenseJournalId");

                    b.HasIndex("ExternalReportLayoutId");

                    b.HasIndex("IncomeCurrencyExchangeAccountId");

                    b.HasIndex("IncotermId");

                    b.HasIndex("InternalTransitLocationId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("NomenclatureId");

                    b.HasIndex("PaperformatId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PropertyStockAccountInputCategId");

                    b.HasIndex("PropertyStockAccountOutputCategId");

                    b.HasIndex("PropertyStockValuationAccountId");

                    b.HasIndex("ResourceCalendarId");

                    b.HasIndex("RevenueAccrualAccountId");

                    b.HasIndex("SaleOrderTemplateId");

                    b.HasIndex("StockMailConfirmationTemplateId");

                    b.HasIndex("StockSmsConfirmationTemplateId");

                    b.HasIndex("TaxCashBasisJournalId");

                    b.HasIndex("TransferAccountId");

                    b.HasIndex("WebsiteId");

                    b.HasIndex(new[] { "Name" }, "res_company_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("res_company_name_uniq");

                    b.HasIndex(new[] { "ParentId" }, "res_company_parent_id_index")
                        .HasDatabaseName("res_company_parent_id_index");

                    b.ToTable("res_company", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("res_config_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("res_config", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResConfigInstaller", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("res_config_installer_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("res_config_installer", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResConfigSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AliasDomain")
                        .HasColumnType("text")
                        .HasColumnName("alias_domain");

                    b.Property<bool?>("AllowOutOfStockOrder")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_out_of_stock_order");

                    b.Property<bool?>("AuthSignupResetPassword")
                        .HasColumnType("boolean")
                        .HasColumnName("auth_signup_reset_password");

                    b.Property<Guid?>("AuthSignupTemplateUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("auth_signup_template_user_id");

                    b.Property<string>("AuthSignupUninvited")
                        .HasColumnType("text")
                        .HasColumnName("auth_signup_uninvited");

                    b.Property<bool?>("AutomaticInvoice")
                        .HasColumnType("boolean")
                        .HasColumnName("automatic_invoice");

                    b.Property<double?>("AvailableThreshold")
                        .HasColumnType("double precision")
                        .HasColumnName("available_threshold");

                    b.Property<Guid?>("ChartTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("chart_template_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("CrmAutoAssignmentAction")
                        .HasColumnType("text")
                        .HasColumnName("crm_auto_assignment_action");

                    b.Property<long?>("CrmAutoAssignmentIntervalNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("crm_auto_assignment_interval_number");

                    b.Property<string>("CrmAutoAssignmentIntervalType")
                        .HasColumnType("text")
                        .HasColumnName("crm_auto_assignment_interval_type");

                    b.Property<DateTime?>("CrmAutoAssignmentRunDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("crm_auto_assignment_run_datetime");

                    b.Property<bool?>("CrmUseAutoAssignment")
                        .HasColumnType("boolean")
                        .HasColumnName("crm_use_auto_assignment");

                    b.Property<string>("DefaultInvoicePolicy")
                        .HasColumnType("text")
                        .HasColumnName("default_invoice_policy");

                    b.Property<string>("DefaultPickingPolicy")
                        .HasColumnType("text")
                        .HasColumnName("default_picking_policy");

                    b.Property<string>("DefaultPurchaseMethod")
                        .HasColumnType("text")
                        .HasColumnName("default_purchase_method");

                    b.Property<long?>("DelayAlertContract")
                        .HasColumnType("bigint")
                        .HasColumnName("delay_alert_contract");

                    b.Property<Guid?>("DepositDefaultProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("deposit_default_product_id");

                    b.Property<bool?>("DigestEmails")
                        .HasColumnType("boolean")
                        .HasColumnName("digest_emails");

                    b.Property<Guid?>("DigestId")
                        .HasColumnType("uuid")
                        .HasColumnName("digest_id");

                    b.Property<bool?>("EnabledBuyNowButton")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled_buy_now_button");

                    b.Property<bool?>("EnabledExtraCheckoutStep")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled_extra_checkout_step");

                    b.Property<string>("ExpenseAliasPrefix")
                        .HasColumnType("text")
                        .HasColumnName("expense_alias_prefix");

                    b.Property<bool?>("ExternalEmailServerDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("external_email_server_default");

                    b.Property<string>("GoogleGmailClientIdentifier")
                        .HasColumnType("text")
                        .HasColumnName("google_gmail_client_identifier");

                    b.Property<string>("GoogleGmailClientSecret")
                        .HasColumnType("text")
                        .HasColumnName("google_gmail_client_secret");

                    b.Property<bool?>("GroupAnalyticAccounting")
                        .HasColumnType("boolean")
                        .HasColumnName("group_analytic_accounting");

                    b.Property<bool?>("GroupApplicantCvDisplay")
                        .HasColumnType("boolean")
                        .HasColumnName("group_applicant_cv_display");

                    b.Property<bool?>("GroupAttendanceUsePin")
                        .HasColumnType("boolean")
                        .HasColumnName("group_attendance_use_pin");

                    b.Property<bool?>("GroupAutoDoneSetting")
                        .HasColumnType("boolean")
                        .HasColumnName("group_auto_done_setting");

                    b.Property<bool?>("GroupCashRounding")
                        .HasColumnType("boolean")
                        .HasColumnName("group_cash_rounding");

                    b.Property<bool?>("GroupDeliveryInvoiceAddress")
                        .HasColumnType("boolean")
                        .HasColumnName("group_delivery_invoice_address");

                    b.Property<bool?>("GroupDiscountPerSoLine")
                        .HasColumnType("boolean")
                        .HasColumnName("group_discount_per_so_line");

                    b.Property<bool?>("GroupDisplayIncoterm")
                        .HasColumnType("boolean")
                        .HasColumnName("group_display_incoterm");

                    b.Property<bool?>("GroupFiscalYear")
                        .HasColumnType("boolean")
                        .HasColumnName("group_fiscal_year");

                    b.Property<bool?>("GroupLotOnDeliverySlip")
                        .HasColumnType("boolean")
                        .HasColumnName("group_lot_on_delivery_slip");

                    b.Property<bool?>("GroupLotOnInvoice")
                        .HasColumnType("boolean")
                        .HasColumnName("group_lot_on_invoice");

                    b.Property<bool?>("GroupMrpByproducts")
                        .HasColumnType("boolean")
                        .HasColumnName("group_mrp_byproducts");

                    b.Property<bool?>("GroupMrpReceptionReport")
                        .HasColumnType("boolean")
                        .HasColumnName("group_mrp_reception_report");

                    b.Property<bool?>("GroupMrpRoutings")
                        .HasColumnType("boolean")
                        .HasColumnName("group_mrp_routings");

                    b.Property<bool?>("GroupMrpWorkorderDependencies")
                        .HasColumnType("boolean")
                        .HasColumnName("group_mrp_workorder_dependencies");

                    b.Property<bool?>("GroupMultiCurrency")
                        .HasColumnType("boolean")
                        .HasColumnName("group_multi_currency");

                    b.Property<bool?>("GroupMultiWebsite")
                        .HasColumnType("boolean")
                        .HasColumnName("group_multi_website");

                    b.Property<bool?>("GroupProductPriceComparison")
                        .HasColumnType("boolean")
                        .HasColumnName("group_product_price_comparison");

                    b.Property<bool?>("GroupProductPricelist")
                        .HasColumnType("boolean")
                        .HasColumnName("group_product_pricelist");

                    b.Property<bool?>("GroupProductVariant")
                        .HasColumnType("boolean")
                        .HasColumnName("group_product_variant");

                    b.Property<bool?>("GroupProformaSales")
                        .HasColumnType("boolean")
                        .HasColumnName("group_proforma_sales");

                    b.Property<bool?>("GroupProjectMilestone")
                        .HasColumnType("boolean")
                        .HasColumnName("group_project_milestone");

                    b.Property<bool?>("GroupProjectRating")
                        .HasColumnType("boolean")
                        .HasColumnName("group_project_rating");

                    b.Property<bool?>("GroupProjectRecurringTasks")
                        .HasColumnType("boolean")
                        .HasColumnName("group_project_recurring_tasks");

                    b.Property<bool?>("GroupProjectStages")
                        .HasColumnType("boolean")
                        .HasColumnName("group_project_stages");

                    b.Property<bool?>("GroupProjectTaskDependencies")
                        .HasColumnType("boolean")
                        .HasColumnName("group_project_task_dependencies");

                    b.Property<bool?>("GroupSaleDeliveryAddress")
                        .HasColumnType("boolean")
                        .HasColumnName("group_sale_delivery_address");

                    b.Property<bool?>("GroupSaleOrderTemplate")
                        .HasColumnType("boolean")
                        .HasColumnName("group_sale_order_template");

                    b.Property<bool?>("GroupSalePricelist")
                        .HasColumnType("boolean")
                        .HasColumnName("group_sale_pricelist");

                    b.Property<bool?>("GroupSendReminder")
                        .HasColumnType("boolean")
                        .HasColumnName("group_send_reminder");

                    b.Property<bool?>("GroupShowLineSubtotalsTaxExcluded")
                        .HasColumnType("boolean")
                        .HasColumnName("group_show_line_subtotals_tax_excluded");

                    b.Property<bool?>("GroupShowLineSubtotalsTaxIncluded")
                        .HasColumnType("boolean")
                        .HasColumnName("group_show_line_subtotals_tax_included");

                    b.Property<bool?>("GroupShowPurchaseReceipts")
                        .HasColumnType("boolean")
                        .HasColumnName("group_show_purchase_receipts");

                    b.Property<bool?>("GroupShowSaleReceipts")
                        .HasColumnType("boolean")
                        .HasColumnName("group_show_sale_receipts");

                    b.Property<bool?>("GroupShowUomPrice")
                        .HasColumnType("boolean")
                        .HasColumnName("group_show_uom_price");

                    b.Property<bool?>("GroupStockAdvLocation")
                        .HasColumnType("boolean")
                        .HasColumnName("group_stock_adv_location");

                    b.Property<bool?>("GroupStockLotPrintGs1")
                        .HasColumnType("boolean")
                        .HasColumnName("group_stock_lot_print_gs1");

                    b.Property<bool?>("GroupStockMultiLocations")
                        .HasColumnType("boolean")
                        .HasColumnName("group_stock_multi_locations");

                    b.Property<bool?>("GroupStockPackaging")
                        .HasColumnType("boolean")
                        .HasColumnName("group_stock_packaging");

                    b.Property<bool?>("GroupStockPickingWave")
                        .HasColumnType("boolean")
                        .HasColumnName("group_stock_picking_wave");

                    b.Property<bool?>("GroupStockProductionLot")
                        .HasColumnType("boolean")
                        .HasColumnName("group_stock_production_lot");

                    b.Property<bool?>("GroupStockReceptionReport")
                        .HasColumnType("boolean")
                        .HasColumnName("group_stock_reception_report");

                    b.Property<bool?>("GroupStockSignDelivery")
                        .HasColumnType("boolean")
                        .HasColumnName("group_stock_sign_delivery");

                    b.Property<bool?>("GroupStockStorageCategories")
                        .HasColumnType("boolean")
                        .HasColumnName("group_stock_storage_categories");

                    b.Property<bool?>("GroupStockTrackingLot")
                        .HasColumnType("boolean")
                        .HasColumnName("group_stock_tracking_lot");

                    b.Property<bool?>("GroupStockTrackingOwner")
                        .HasColumnType("boolean")
                        .HasColumnName("group_stock_tracking_owner");

                    b.Property<bool?>("GroupSubtaskProject")
                        .HasColumnType("boolean")
                        .HasColumnName("group_subtask_project");

                    b.Property<bool?>("GroupUnlockedByDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("group_unlocked_by_default");

                    b.Property<bool?>("GroupUom")
                        .HasColumnType("boolean")
                        .HasColumnName("group_uom");

                    b.Property<bool?>("GroupUseLead")
                        .HasColumnType("boolean")
                        .HasColumnName("group_use_lead");

                    b.Property<bool?>("GroupUseRecurringRevenues")
                        .HasColumnType("boolean")
                        .HasColumnName("group_use_recurring_revenues");

                    b.Property<bool?>("GroupWarningAccount")
                        .HasColumnType("boolean")
                        .HasColumnName("group_warning_account");

                    b.Property<bool?>("GroupWarningPurchase")
                        .HasColumnType("boolean")
                        .HasColumnName("group_warning_purchase");

                    b.Property<bool?>("GroupWarningSale")
                        .HasColumnType("boolean")
                        .HasColumnName("group_warning_sale");

                    b.Property<bool?>("GroupWarningStock")
                        .HasColumnType("boolean")
                        .HasColumnName("group_warning_stock");

                    b.Property<bool?>("HrAttendanceOvertime")
                        .HasColumnType("boolean")
                        .HasColumnName("hr_attendance_overtime");

                    b.Property<bool?>("HrEmployeeSelfEdit")
                        .HasColumnType("boolean")
                        .HasColumnName("hr_employee_self_edit");

                    b.Property<bool?>("HrPresenceControlEmail")
                        .HasColumnType("boolean")
                        .HasColumnName("hr_presence_control_email");

                    b.Property<bool?>("HrPresenceControlIp")
                        .HasColumnType("boolean")
                        .HasColumnName("hr_presence_control_ip");

                    b.Property<bool?>("HrPresenceControlLogin")
                        .HasColumnType("boolean")
                        .HasColumnName("hr_presence_control_login");

                    b.Property<Guid?>("InvoiceMailTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_mail_template_id");

                    b.Property<bool?>("IsInstalledSale")
                        .HasColumnType("boolean")
                        .HasColumnName("is_installed_sale");

                    b.Property<bool?>("IsMembershipMulti")
                        .HasColumnType("boolean")
                        .HasColumnName("is_membership_multi");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("LeadEnrichAuto")
                        .HasColumnType("text")
                        .HasColumnName("lead_enrich_auto");

                    b.Property<bool?>("LeadMiningInPipeline")
                        .HasColumnType("boolean")
                        .HasColumnName("lead_mining_in_pipeline");

                    b.Property<bool?>("LockConfirmedPo")
                        .HasColumnType("boolean")
                        .HasColumnName("lock_confirmed_po");

                    b.Property<bool?>("ModuleAccount")
                        .HasColumnType("boolean")
                        .HasColumnName("module_account");

                    b.Property<bool?>("ModuleAccount3wayMatch")
                        .HasColumnType("boolean")
                        .HasColumnName("module_account_3way_match");

                    b.Property<bool?>("ModuleAccountAccountant")
                        .HasColumnType("boolean")
                        .HasColumnName("module_account_accountant");

                    b.Property<bool?>("ModuleAccountBankStatementImportCamt")
                        .HasColumnType("boolean")
                        .HasColumnName("module_account_bank_statement_import_camt");

                    b.Property<bool?>("ModuleAccountBankStatementImportCsv")
                        .HasColumnType("boolean")
                        .HasColumnName("module_account_bank_statement_import_csv");

                    b.Property<bool?>("ModuleAccountBankStatementImportOfx")
                        .HasColumnType("boolean")
                        .HasColumnName("module_account_bank_statement_import_ofx");

                    b.Property<bool?>("ModuleAccountBankStatementImportQif")
                        .HasColumnType("boolean")
                        .HasColumnName("module_account_bank_statement_import_qif");

                    b.Property<bool?>("ModuleAccountBatchPayment")
                        .HasColumnType("boolean")
                        .HasColumnName("module_account_batch_payment");

                    b.Property<bool?>("ModuleAccountBudget")
                        .HasColumnType("boolean")
                        .HasColumnName("module_account_budget");

                    b.Property<bool?>("ModuleAccountCheckPrinting")
                        .HasColumnType("boolean")
                        .HasColumnName("module_account_check_printing");

                    b.Property<bool?>("ModuleAccountInterCompanyRules")
                        .HasColumnType("boolean")
                        .HasColumnName("module_account_inter_company_rules");

                    b.Property<bool?>("ModuleAccountIntrastat")
                        .HasColumnType("boolean")
                        .HasColumnName("module_account_intrastat");

                    b.Property<bool?>("ModuleAccountInvoiceExtract")
                        .HasColumnType("boolean")
                        .HasColumnName("module_account_invoice_extract");

                    b.Property<bool?>("ModuleAccountPayment")
                        .HasColumnType("boolean")
                        .HasColumnName("module_account_payment");

                    b.Property<bool?>("ModuleAccountReports")
                        .HasColumnType("boolean")
                        .HasColumnName("module_account_reports");

                    b.Property<bool?>("ModuleAccountSepa")
                        .HasColumnType("boolean")
                        .HasColumnName("module_account_sepa");

                    b.Property<bool?>("ModuleAccountSepaDirectDebit")
                        .HasColumnType("boolean")
                        .HasColumnName("module_account_sepa_direct_debit");

                    b.Property<bool?>("ModuleAccountTaxcloud")
                        .HasColumnType("boolean")
                        .HasColumnName("module_account_taxcloud");

                    b.Property<bool?>("ModuleAuthLdap")
                        .HasColumnType("boolean")
                        .HasColumnName("module_auth_ldap");

                    b.Property<bool?>("ModuleAuthOauth")
                        .HasColumnType("boolean")
                        .HasColumnName("module_auth_oauth");

                    b.Property<bool?>("ModuleBaseGengo")
                        .HasColumnType("boolean")
                        .HasColumnName("module_base_gengo");

                    b.Property<bool?>("ModuleBaseGeolocalize")
                        .HasColumnType("boolean")
                        .HasColumnName("module_base_geolocalize");

                    b.Property<bool?>("ModuleBaseImport")
                        .HasColumnType("boolean")
                        .HasColumnName("module_base_import");

                    b.Property<bool?>("ModuleCrmIapEnrich")
                        .HasColumnType("boolean")
                        .HasColumnName("module_crm_iap_enrich");

                    b.Property<bool?>("ModuleCrmIapMine")
                        .HasColumnType("boolean")
                        .HasColumnName("module_crm_iap_mine");

                    b.Property<bool?>("ModuleCurrencyRateLive")
                        .HasColumnType("boolean")
                        .HasColumnName("module_currency_rate_live");

                    b.Property<bool?>("ModuleDelivery")
                        .HasColumnType("boolean")
                        .HasColumnName("module_delivery");

                    b.Property<bool?>("ModuleDeliveryBpost")
                        .HasColumnType("boolean")
                        .HasColumnName("module_delivery_bpost");

                    b.Property<bool?>("ModuleDeliveryDhl")
                        .HasColumnType("boolean")
                        .HasColumnName("module_delivery_dhl");

                    b.Property<bool?>("ModuleDeliveryEasypost")
                        .HasColumnType("boolean")
                        .HasColumnName("module_delivery_easypost");

                    b.Property<bool?>("ModuleDeliveryFedex")
                        .HasColumnType("boolean")
                        .HasColumnName("module_delivery_fedex");

                    b.Property<bool?>("ModuleDeliveryMondialrelay")
                        .HasColumnType("boolean")
                        .HasColumnName("module_delivery_mondialrelay");

                    b.Property<bool?>("ModuleDeliverySendcloud")
                        .HasColumnType("boolean")
                        .HasColumnName("module_delivery_sendcloud");

                    b.Property<bool?>("ModuleDeliveryUps")
                        .HasColumnType("boolean")
                        .HasColumnName("module_delivery_ups");

                    b.Property<bool?>("ModuleDeliveryUsps")
                        .HasColumnType("boolean")
                        .HasColumnName("module_delivery_usps");

                    b.Property<bool?>("ModuleGoogleCalendar")
                        .HasColumnType("boolean")
                        .HasColumnName("module_google_calendar");

                    b.Property<bool?>("ModuleGoogleGmail")
                        .HasColumnType("boolean")
                        .HasColumnName("module_google_gmail");

                    b.Property<bool?>("ModuleGoogleRecaptcha")
                        .HasColumnType("boolean")
                        .HasColumnName("module_google_recaptcha");

                    b.Property<bool?>("ModuleHrAttendance")
                        .HasColumnType("boolean")
                        .HasColumnName("module_hr_attendance");

                    b.Property<bool?>("ModuleHrExpenseExtract")
                        .HasColumnType("boolean")
                        .HasColumnName("module_hr_expense_extract");

                    b.Property<bool?>("ModuleHrHomeworking")
                        .HasColumnType("boolean")
                        .HasColumnName("module_hr_homeworking");

                    b.Property<bool?>("ModuleHrPayrollExpense")
                        .HasColumnType("boolean")
                        .HasColumnName("module_hr_payroll_expense");

                    b.Property<bool?>("ModuleHrPresence")
                        .HasColumnType("boolean")
                        .HasColumnName("module_hr_presence");

                    b.Property<bool?>("ModuleHrRecruitmentExtract")
                        .HasColumnType("boolean")
                        .HasColumnName("module_hr_recruitment_extract");

                    b.Property<bool?>("ModuleHrRecruitmentSurvey")
                        .HasColumnType("boolean")
                        .HasColumnName("module_hr_recruitment_survey");

                    b.Property<bool?>("ModuleHrSkills")
                        .HasColumnType("boolean")
                        .HasColumnName("module_hr_skills");

                    b.Property<bool?>("ModuleHrTimesheet")
                        .HasColumnType("boolean")
                        .HasColumnName("module_hr_timesheet");

                    b.Property<bool?>("ModuleL10nEuOss")
                        .HasColumnType("boolean")
                        .HasColumnName("module_l10n_eu_oss");

                    b.Property<bool?>("ModuleLoyalty")
                        .HasColumnType("boolean")
                        .HasColumnName("module_loyalty");

                    b.Property<bool?>("ModuleMailPlugin")
                        .HasColumnType("boolean")
                        .HasColumnName("module_mail_plugin");

                    b.Property<bool?>("ModuleMarketingAutomation")
                        .HasColumnType("boolean")
                        .HasColumnName("module_marketing_automation");

                    b.Property<bool?>("ModuleMicrosoftCalendar")
                        .HasColumnType("boolean")
                        .HasColumnName("module_microsoft_calendar");

                    b.Property<bool?>("ModuleMicrosoftOutlook")
                        .HasColumnType("boolean")
                        .HasColumnName("module_microsoft_outlook");

                    b.Property<bool?>("ModuleMrpMps")
                        .HasColumnType("boolean")
                        .HasColumnName("module_mrp_mps");

                    b.Property<bool?>("ModuleMrpPlm")
                        .HasColumnType("boolean")
                        .HasColumnName("module_mrp_plm");

                    b.Property<bool?>("ModuleMrpSubcontracting")
                        .HasColumnType("boolean")
                        .HasColumnName("module_mrp_subcontracting");

                    b.Property<bool?>("ModuleMrpWorkorder")
                        .HasColumnType("boolean")
                        .HasColumnName("module_mrp_workorder");

                    b.Property<bool?>("ModulePartnerAutocomplete")
                        .HasColumnType("boolean")
                        .HasColumnName("module_partner_autocomplete");

                    b.Property<bool?>("ModulePaymentPaypal")
                        .HasColumnType("boolean")
                        .HasColumnName("module_payment_paypal");

                    b.Property<bool?>("ModulePosAdyen")
                        .HasColumnType("boolean")
                        .HasColumnName("module_pos_adyen");

                    b.Property<bool?>("ModulePosMercury")
                        .HasColumnType("boolean")
                        .HasColumnName("module_pos_mercury");

                    b.Property<bool?>("ModulePosSix")
                        .HasColumnType("boolean")
                        .HasColumnName("module_pos_six");

                    b.Property<bool?>("ModulePosStripe")
                        .HasColumnType("boolean")
                        .HasColumnName("module_pos_stripe");

                    b.Property<bool?>("ModuleProductEmailTemplate")
                        .HasColumnType("boolean")
                        .HasColumnName("module_product_email_template");

                    b.Property<bool?>("ModuleProductExpiry")
                        .HasColumnType("boolean")
                        .HasColumnName("module_product_expiry");

                    b.Property<bool?>("ModuleProductImages")
                        .HasColumnType("boolean")
                        .HasColumnName("module_product_images");

                    b.Property<bool?>("ModuleProductMargin")
                        .HasColumnType("boolean")
                        .HasColumnName("module_product_margin");

                    b.Property<bool?>("ModuleProjectForecast")
                        .HasColumnType("boolean")
                        .HasColumnName("module_project_forecast");

                    b.Property<bool?>("ModulePurchaseProductMatrix")
                        .HasColumnType("boolean")
                        .HasColumnName("module_purchase_product_matrix");

                    b.Property<bool?>("ModulePurchaseRequisition")
                        .HasColumnType("boolean")
                        .HasColumnName("module_purchase_requisition");

                    b.Property<bool?>("ModuleQualityControl")
                        .HasColumnType("boolean")
                        .HasColumnName("module_quality_control");

                    b.Property<bool?>("ModuleQualityControlWorksheet")
                        .HasColumnType("boolean")
                        .HasColumnName("module_quality_control_worksheet");

                    b.Property<bool?>("ModuleSaleAmazon")
                        .HasColumnType("boolean")
                        .HasColumnName("module_sale_amazon");

                    b.Property<bool?>("ModuleSaleLoyalty")
                        .HasColumnType("boolean")
                        .HasColumnName("module_sale_loyalty");

                    b.Property<bool?>("ModuleSaleMargin")
                        .HasColumnType("boolean")
                        .HasColumnName("module_sale_margin");

                    b.Property<bool?>("ModuleSaleProductMatrix")
                        .HasColumnType("boolean")
                        .HasColumnName("module_sale_product_matrix");

                    b.Property<bool?>("ModuleSaleQuotationBuilder")
                        .HasColumnType("boolean")
                        .HasColumnName("module_sale_quotation_builder");

                    b.Property<bool?>("ModuleSnailmailAccount")
                        .HasColumnType("boolean")
                        .HasColumnName("module_snailmail_account");

                    b.Property<bool?>("ModuleStockBarcode")
                        .HasColumnType("boolean")
                        .HasColumnName("module_stock_barcode");

                    b.Property<bool?>("ModuleStockDropshipping")
                        .HasColumnType("boolean")
                        .HasColumnName("module_stock_dropshipping");

                    b.Property<bool?>("ModuleStockLandedCosts")
                        .HasColumnType("boolean")
                        .HasColumnName("module_stock_landed_costs");

                    b.Property<bool?>("ModuleStockPickingBatch")
                        .HasColumnType("boolean")
                        .HasColumnName("module_stock_picking_batch");

                    b.Property<bool?>("ModuleStockSms")
                        .HasColumnType("boolean")
                        .HasColumnName("module_stock_sms");

                    b.Property<bool?>("ModuleVoip")
                        .HasColumnType("boolean")
                        .HasColumnName("module_voip");

                    b.Property<bool?>("ModuleWebUnsplash")
                        .HasColumnType("boolean")
                        .HasColumnName("module_web_unsplash");

                    b.Property<bool?>("ModuleWebsiteCrmIapReveal")
                        .HasColumnType("boolean")
                        .HasColumnName("module_website_crm_iap_reveal");

                    b.Property<bool?>("ModuleWebsiteHrRecruitment")
                        .HasColumnType("boolean")
                        .HasColumnName("module_website_hr_recruitment");

                    b.Property<bool?>("ModuleWebsiteLivechat")
                        .HasColumnType("boolean")
                        .HasColumnName("module_website_livechat");

                    b.Property<bool?>("ModuleWebsiteSaleAutocomplete")
                        .HasColumnType("boolean")
                        .HasColumnName("module_website_sale_autocomplete");

                    b.Property<bool?>("ModuleWebsiteSaleComparison")
                        .HasColumnType("boolean")
                        .HasColumnName("module_website_sale_comparison");

                    b.Property<bool?>("ModuleWebsiteSaleDelivery")
                        .HasColumnType("boolean")
                        .HasColumnName("module_website_sale_delivery");

                    b.Property<bool?>("ModuleWebsiteSaleDigital")
                        .HasColumnType("boolean")
                        .HasColumnName("module_website_sale_digital");

                    b.Property<bool?>("ModuleWebsiteSalePicking")
                        .HasColumnType("boolean")
                        .HasColumnName("module_website_sale_picking");

                    b.Property<bool?>("ModuleWebsiteSaleWishlist")
                        .HasColumnType("boolean")
                        .HasColumnName("module_website_sale_wishlist");

                    b.Property<long?>("OvertimeCompanyThreshold")
                        .HasColumnType("bigint")
                        .HasColumnName("overtime_company_threshold");

                    b.Property<long?>("OvertimeEmployeeThreshold")
                        .HasColumnType("bigint")
                        .HasColumnName("overtime_employee_threshold");

                    b.Property<DateTime?>("OvertimeStartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("overtime_start_date");

                    b.Property<bool?>("PoOrderApproval")
                        .HasColumnType("boolean")
                        .HasColumnName("po_order_approval");

                    b.Property<Guid?>("PosConfigId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_config_id");

                    b.Property<Guid?>("PosDefaultFiscalPositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_default_fiscal_position_id");

                    b.Property<string>("PosEpsonPrinterIp")
                        .HasColumnType("text")
                        .HasColumnName("pos_epson_printer_ip");

                    b.Property<bool?>("PosIfaceCashdrawer")
                        .HasColumnType("boolean")
                        .HasColumnName("pos_iface_cashdrawer");

                    b.Property<bool?>("PosIfaceCustomerFacingDisplayViaProxy")
                        .HasColumnType("boolean")
                        .HasColumnName("pos_iface_customer_facing_display_via_proxy");

                    b.Property<bool?>("PosIfaceElectronicScale")
                        .HasColumnType("boolean")
                        .HasColumnName("pos_iface_electronic_scale");

                    b.Property<bool?>("PosIfacePrintViaProxy")
                        .HasColumnType("boolean")
                        .HasColumnName("pos_iface_print_via_proxy");

                    b.Property<bool?>("PosIfaceScanViaProxy")
                        .HasColumnType("boolean")
                        .HasColumnName("pos_iface_scan_via_proxy");

                    b.Property<long?>("PosIfaceStartCategId")
                        .HasColumnType("bigint")
                        .HasColumnName("pos_iface_start_categ_id");

                    b.Property<Guid?>("PosPricelistId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_pricelist_id");

                    b.Property<string>("PosProxyIp")
                        .HasColumnType("text")
                        .HasColumnName("pos_proxy_ip");

                    b.Property<string>("PosReceiptFooter")
                        .HasColumnType("text")
                        .HasColumnName("pos_receipt_footer");

                    b.Property<string>("PosReceiptHeader")
                        .HasColumnType("text")
                        .HasColumnName("pos_receipt_header");

                    b.Property<Guid?>("PosTipProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_tip_product_id");

                    b.Property<string>("PredictiveLeadScoringFieldsStr")
                        .HasColumnType("text")
                        .HasColumnName("predictive_lead_scoring_fields_str");

                    b.Property<string>("PredictiveLeadScoringStartDateStr")
                        .HasColumnType("text")
                        .HasColumnName("predictive_lead_scoring_start_date_str");

                    b.Property<string>("ProductPricelistSetting")
                        .HasColumnType("text")
                        .HasColumnName("product_pricelist_setting");

                    b.Property<string>("ProductVolumeVolumeInCubicFeet")
                        .HasColumnType("text")
                        .HasColumnName("product_volume_volume_in_cubic_feet");

                    b.Property<string>("ProductWeightInLbs")
                        .HasColumnType("text")
                        .HasColumnName("product_weight_in_lbs");

                    b.Property<DateTime?>("ProfilingEnabledUntil")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("profiling_enabled_until");

                    b.Property<double?>("RecaptchaMinScore")
                        .HasColumnType("double precision")
                        .HasColumnName("recaptcha_min_score");

                    b.Property<string>("RecaptchaPrivateKey")
                        .HasColumnType("text")
                        .HasColumnName("recaptcha_private_key");

                    b.Property<string>("RecaptchaPublicKey")
                        .HasColumnType("text")
                        .HasColumnName("recaptcha_public_key");

                    b.Property<bool?>("RestrictTemplateRendering")
                        .HasColumnType("boolean")
                        .HasColumnName("restrict_template_rendering");

                    b.Property<string>("SaleDeliverySettings")
                        .HasColumnType("text")
                        .HasColumnName("sale_delivery_settings");

                    b.Property<bool?>("ShowAvailability")
                        .HasColumnType("boolean")
                        .HasColumnName("show_availability");

                    b.Property<bool?>("ShowEffect")
                        .HasColumnType("boolean")
                        .HasColumnName("show_effect");

                    b.Property<string>("ShowLineSubtotalsTaxSelection")
                        .HasColumnType("text")
                        .HasColumnName("show_line_subtotals_tax_selection");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("TwilioAccountSid")
                        .HasColumnType("text")
                        .HasColumnName("twilio_account_sid");

                    b.Property<string>("TwilioAccountToken")
                        .HasColumnType("text")
                        .HasColumnName("twilio_account_token");

                    b.Property<string>("UnsplashAccessKey")
                        .HasColumnType("text")
                        .HasColumnName("unsplash_access_key");

                    b.Property<string>("UnsplashAppId")
                        .HasColumnType("text")
                        .HasColumnName("unsplash_app_id");

                    b.Property<bool?>("UseInvoiceTerms")
                        .HasColumnType("boolean")
                        .HasColumnName("use_invoice_terms");

                    b.Property<bool?>("UseMailgateway")
                        .HasColumnType("boolean")
                        .HasColumnName("use_mailgateway");

                    b.Property<bool?>("UseManufacturingLead")
                        .HasColumnType("boolean")
                        .HasColumnName("use_manufacturing_lead");

                    b.Property<bool?>("UsePoLead")
                        .HasColumnType("boolean")
                        .HasColumnName("use_po_lead");

                    b.Property<bool?>("UseQuotationValidityDays")
                        .HasColumnType("boolean")
                        .HasColumnName("use_quotation_validity_days");

                    b.Property<bool?>("UseSecurityLead")
                        .HasColumnType("boolean")
                        .HasColumnName("use_security_lead");

                    b.Property<bool?>("UseTwilioRtcServers")
                        .HasColumnType("boolean")
                        .HasColumnName("use_twilio_rtc_servers");

                    b.Property<bool?>("UserDefaultRights")
                        .HasColumnType("boolean")
                        .HasColumnName("user_default_rights");

                    b.Property<Guid?>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.HasKey("Id")
                        .HasName("res_config_settings_pkey");

                    b.HasIndex("AuthSignupTemplateUserId");

                    b.HasIndex("ChartTemplateId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DepositDefaultProductId");

                    b.HasIndex("DigestId");

                    b.HasIndex("InvoiceMailTemplateId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PosConfigId");

                    b.HasIndex("PosDefaultFiscalPositionId");

                    b.HasIndex("PosIfaceStartCategId");

                    b.HasIndex("PosPricelistId");

                    b.HasIndex("PosTipProductId");

                    b.HasIndex("TenantId");

                    b.HasIndex("WebsiteId");

                    b.ToTable("res_config_settings", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResCountry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AddressFormat")
                        .HasColumnType("text")
                        .HasColumnName("address_format");

                    b.Property<Guid?>("AddressViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_view_id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("NamePosition")
                        .HasColumnType("text")
                        .HasColumnName("name_position");

                    b.Property<long?>("PhoneCode")
                        .HasColumnType("bigint")
                        .HasColumnName("phone_code");

                    b.Property<bool?>("StateRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("state_required");

                    b.Property<string>("VatLabel")
                        .HasColumnType("jsonb")
                        .HasColumnName("vat_label");

                    b.Property<bool?>("ZipRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("zip_required");

                    b.HasKey("Id")
                        .HasName("res_country_pkey");

                    b.HasIndex("AddressViewId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Code" }, "res_country_code_uniq")
                        .IsUnique()
                        .HasDatabaseName("res_country_code_uniq");

                    b.HasIndex(new[] { "Name" }, "res_country_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("res_country_name_uniq");

                    b.ToTable("res_country", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResCountryGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("res_country_group_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("res_country_group", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResCountryState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("res_country_state_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "CountryId", "Code" }, "res_country_state_name_code_uniq")
                        .IsUnique()
                        .HasDatabaseName("res_country_state_name_code_uniq");

                    b.ToTable("res_country_state", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResCurrency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("CurrencySubunitLabel")
                        .HasColumnType("text")
                        .HasColumnName("currency_subunit_label");

                    b.Property<string>("CurrencyUnitLabel")
                        .HasColumnType("text")
                        .HasColumnName("currency_unit_label");

                    b.Property<long?>("DecimalPlaces")
                        .HasColumnType("bigint")
                        .HasColumnName("decimal_places");

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Position")
                        .HasColumnType("text")
                        .HasColumnName("position");

                    b.Property<decimal?>("Rounding")
                        .HasColumnType("numeric")
                        .HasColumnName("rounding");

                    b.Property<string>("Symbol")
                        .HasColumnType("text")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("res_currency_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Name" }, "res_currency_unique_name")
                        .IsUnique()
                        .HasDatabaseName("res_currency_unique_name");

                    b.ToTable("res_currency", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResCurrencyRate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<DateTime?>("Name")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("name");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("numeric")
                        .HasColumnName("rate");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("res_currency_rate_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "Name" }, "res_currency_rate_name_index")
                        .HasDatabaseName("res_currency_rate_name_index");

                    b.HasIndex(new[] { "Name", "CurrencyId", "TenantId" }, "res_currency_rate_unique_name_per_day")
                        .IsUnique()
                        .HasDatabaseName("res_currency_rate_unique_name_per_day");

                    b.ToTable("res_currency_rate", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<string>("Comment")
                        .HasColumnType("jsonb")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<bool?>("Share")
                        .HasColumnType("boolean")
                        .HasColumnName("share");

                    b.HasKey("Id")
                        .HasName("res_groups_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "CategoryId" }, "res_groups_category_id_index")
                        .HasDatabaseName("res_groups_category_id_index");

                    b.HasIndex(new[] { "CategoryId", "Name" }, "res_groups_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("res_groups_name_uniq");

                    b.ToTable("res_groups", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResLang", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("DateFormat")
                        .HasColumnType("text")
                        .HasColumnName("date_format");

                    b.Property<string>("DecimalPoint")
                        .HasColumnType("text")
                        .HasColumnName("decimal_point");

                    b.Property<string>("Direction")
                        .HasColumnType("text")
                        .HasColumnName("direction");

                    b.Property<string>("Grouping")
                        .HasColumnType("text")
                        .HasColumnName("grouping");

                    b.Property<string>("IsoCode")
                        .HasColumnType("text")
                        .HasColumnName("iso_code");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ThousandsSep")
                        .HasColumnType("text")
                        .HasColumnName("thousands_sep");

                    b.Property<string>("TimeFormat")
                        .HasColumnType("text")
                        .HasColumnName("time_format");

                    b.Property<string>("UrlCode")
                        .HasColumnType("text")
                        .HasColumnName("url_code");

                    b.Property<string>("WeekStart")
                        .HasColumnType("text")
                        .HasColumnName("week_start");

                    b.HasKey("Id")
                        .HasName("res_lang_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Code" }, "res_lang_code_uniq")
                        .IsUnique()
                        .HasDatabaseName("res_lang_code_uniq");

                    b.HasIndex(new[] { "Name" }, "res_lang_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("res_lang_name_uniq");

                    b.HasIndex(new[] { "UrlCode" }, "res_lang_url_code_uniq")
                        .IsUnique()
                        .HasDatabaseName("res_lang_url_code_uniq");

                    b.ToTable("res_lang", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResPartner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text")
                        .HasColumnName("additional_info");

                    b.Property<DateTime?>("CalendarLastNotifAck")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("calendar_last_notif_ack");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<string>("CommercialCompanyName")
                        .HasColumnType("text")
                        .HasColumnName("commercial_company_name");

                    b.Property<Guid?>("CommercialPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("commercial_partner_id");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text")
                        .HasColumnName("company_name");

                    b.Property<string>("CompanyRegistry")
                        .HasColumnType("text")
                        .HasColumnName("company_registry");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CustomerRank")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_rank");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<decimal?>("DebitLimit")
                        .HasColumnType("numeric")
                        .HasColumnName("debit_limit");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("EmailNormalized")
                        .HasColumnType("text")
                        .HasColumnName("email_normalized");

                    b.Property<bool?>("Employee")
                        .HasColumnType("boolean")
                        .HasColumnName("employee");

                    b.Property<string>("Function")
                        .HasColumnType("text")
                        .HasColumnName("function");

                    b.Property<long?>("IndustryId")
                        .HasColumnType("bigint")
                        .HasColumnName("industry_id");

                    b.Property<string>("InvoiceWarn")
                        .HasColumnType("text")
                        .HasColumnName("invoice_warn");

                    b.Property<string>("InvoiceWarnMsg")
                        .HasColumnType("text")
                        .HasColumnName("invoice_warn_msg");

                    b.Property<bool?>("IsCompany")
                        .HasColumnType("boolean")
                        .HasColumnName("is_company");

                    b.Property<bool?>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<string>("Lang")
                        .HasColumnType("text")
                        .HasColumnName("lang");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<DateTime?>("LastTimeEntriesChecked")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_time_entries_checked");

                    b.Property<Guid?>("LatestFollowupLevelIdWithoutLit")
                        .HasColumnType("uuid")
                        .HasColumnName("latest_followup_level_id_without_lit");

                    b.Property<long?>("LatestFollowupSequence")
                        .HasColumnType("bigint")
                        .HasColumnName("latest_followup_sequence");

                    b.Property<long?>("MessageBounce")
                        .HasColumnType("bigint")
                        .HasColumnName("message_bounce");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Mobile")
                        .HasColumnType("text")
                        .HasColumnName("mobile");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("PartnerGid")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_gid");

                    b.Property<decimal?>("PartnerLatitude")
                        .HasColumnType("numeric")
                        .HasColumnName("partner_latitude");

                    b.Property<decimal?>("PartnerLongitude")
                        .HasColumnType("numeric")
                        .HasColumnName("partner_longitude");

                    b.Property<bool?>("PartnerShare")
                        .HasColumnType("boolean")
                        .HasColumnName("partner_share");

                    b.Property<string>("PaymentNextAction")
                        .HasColumnType("text")
                        .HasColumnName("payment_next_action");

                    b.Property<DateTime?>("PaymentNextActionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("payment_next_action_date");

                    b.Property<string>("PaymentNote")
                        .HasColumnType("text")
                        .HasColumnName("payment_note");

                    b.Property<Guid?>("PaymentResponsibleId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_responsible_id");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("PhoneSanitized")
                        .HasColumnType("text")
                        .HasColumnName("phone_sanitized");

                    b.Property<string>("PickingWarn")
                        .HasColumnType("text")
                        .HasColumnName("picking_warn");

                    b.Property<string>("PickingWarnMsg")
                        .HasColumnType("text")
                        .HasColumnName("picking_warn_msg");

                    b.Property<bool?>("PlanToChangeBike")
                        .HasColumnType("boolean")
                        .HasColumnName("plan_to_change_bike");

                    b.Property<bool?>("PlanToChangeCar")
                        .HasColumnType("boolean")
                        .HasColumnName("plan_to_change_car");

                    b.Property<string>("PurchaseWarn")
                        .HasColumnType("text")
                        .HasColumnName("purchase_warn");

                    b.Property<string>("PurchaseWarnMsg")
                        .HasColumnType("text")
                        .HasColumnName("purchase_warn_msg");

                    b.Property<string>("Ref")
                        .HasColumnType("text")
                        .HasColumnName("ref");

                    b.Property<string>("SaleWarn")
                        .HasColumnType("text")
                        .HasColumnName("sale_warn");

                    b.Property<string>("SaleWarnMsg")
                        .HasColumnType("text")
                        .HasColumnName("sale_warn_msg");

                    b.Property<DateTime?>("SignupExpiration")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("signup_expiration");

                    b.Property<string>("SignupToken")
                        .HasColumnType("text")
                        .HasColumnName("signup_token");

                    b.Property<string>("SignupType")
                        .HasColumnType("text")
                        .HasColumnName("signup_type");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint")
                        .HasColumnName("state_id");

                    b.Property<string>("Street")
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<string>("Street2")
                        .HasColumnType("text")
                        .HasColumnName("street2");

                    b.Property<long?>("SupplierRank")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_rank");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<long?>("Title")
                        .HasColumnType("bigint")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Tz")
                        .HasColumnType("text")
                        .HasColumnName("tz");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Vat")
                        .HasColumnType("text")
                        .HasColumnName("vat");

                    b.Property<string>("Website")
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.Property<Guid?>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.Property<string>("Zip")
                        .HasColumnType("text")
                        .HasColumnName("zip");

                    b.HasKey("Id")
                        .HasName("res_partner_pkey");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LatestFollowupLevelIdWithoutLit");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("PaymentResponsibleId");

                    b.HasIndex("StateId");

                    b.HasIndex("TeamId");

                    b.HasIndex("Title");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "CommercialPartnerId" }, "res_partner_commercial_partner_id_index")
                        .HasDatabaseName("res_partner_commercial_partner_id_index");

                    b.HasIndex(new[] { "TenantId" }, "res_partner_company_id_index")
                        .HasDatabaseName("res_partner_company_id_index");

                    b.HasIndex(new[] { "Date" }, "res_partner_date_index")
                        .HasDatabaseName("res_partner_date_index");

                    b.HasIndex(new[] { "DisplayName" }, "res_partner_display_name_index")
                        .HasDatabaseName("res_partner_display_name_index");

                    b.HasIndex(new[] { "IsPublished" }, "res_partner_is_published_index")
                        .HasDatabaseName("res_partner_is_published_index");

                    b.HasIndex(new[] { "Name" }, "res_partner_name_index")
                        .HasDatabaseName("res_partner_name_index");

                    b.HasIndex(new[] { "ParentId" }, "res_partner_parent_id_index")
                        .HasDatabaseName("res_partner_parent_id_index");

                    b.HasIndex(new[] { "Ref" }, "res_partner_ref_index")
                        .HasDatabaseName("res_partner_ref_index");

                    b.HasIndex(new[] { "Vat" }, "res_partner_vat_index")
                        .HasDatabaseName("res_partner_vat_index");

                    b.HasIndex(new[] { "WebsiteId" }, "res_partner_website_id_index")
                        .HasDatabaseName("res_partner_website_id_index");

                    b.ToTable("res_partner", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResPartnerAutocompleteSync", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<bool?>("Synched")
                        .HasColumnType("boolean")
                        .HasColumnName("synched");

                    b.HasKey("Id")
                        .HasName("res_partner_autocomplete_sync_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PartnerId");

                    b.ToTable("res_partner_autocomplete_sync", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResPartnerBank", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccHolderName")
                        .HasColumnType("text")
                        .HasColumnName("acc_holder_name");

                    b.Property<string>("AccNumber")
                        .HasColumnType("text")
                        .HasColumnName("acc_number");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<bool?>("AllowOutPayment")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_out_payment");

                    b.Property<Guid?>("BankId")
                        .HasColumnType("uuid")
                        .HasColumnName("bank_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<string>("SanitizedAccNumber")
                        .HasColumnType("text")
                        .HasColumnName("sanitized_acc_number");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("res_partner_bank_pkey");

                    b.HasIndex("BankId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "PartnerId" }, "res_partner_bank_partner_id_index")
                        .HasDatabaseName("res_partner_bank_partner_id_index");

                    b.HasIndex(new[] { "SanitizedAccNumber", "PartnerId" }, "res_partner_bank_unique_number")
                        .IsUnique()
                        .HasDatabaseName("res_partner_bank_unique_number");

                    b.ToTable("res_partner_bank", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResPartnerCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<string>("ParentPath")
                        .HasColumnType("text")
                        .HasColumnName("parent_path");

                    b.HasKey("Id")
                        .HasName("res_partner_category_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "ParentId" }, "res_partner_category_parent_id_index")
                        .HasDatabaseName("res_partner_category_parent_id_index");

                    b.HasIndex(new[] { "ParentPath" }, "res_partner_category_parent_path_index")
                        .HasDatabaseName("res_partner_category_parent_path_index");

                    b.ToTable("res_partner_category", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResPartnerIndustry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("FullName")
                        .HasColumnType("jsonb")
                        .HasColumnName("full_name");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("res_partner_industry_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("res_partner_industry", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResPartnerTitle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<string>("Shortcut")
                        .HasColumnType("jsonb")
                        .HasColumnName("shortcut");

                    b.HasKey("Id")
                        .HasName("res_partner_title_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("res_partner_title", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("ActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("action_id");

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("LastLunchLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_lunch_location_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Login")
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("NotificationType")
                        .HasColumnType("text")
                        .HasColumnName("notification_type");

                    b.Property<bool?>("OdoobotFailed")
                        .HasColumnType("boolean")
                        .HasColumnName("odoobot_failed");

                    b.Property<string>("OdoobotState")
                        .HasColumnType("text")
                        .HasColumnName("odoobot_state");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<Guid?>("SaleTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_team_id");

                    b.Property<bool?>("Share")
                        .HasColumnType("boolean")
                        .HasColumnName("share");

                    b.Property<string>("Signature")
                        .HasColumnType("text")
                        .HasColumnName("signature");

                    b.Property<long?>("TargetSalesDone")
                        .HasColumnType("bigint")
                        .HasColumnName("target_sales_done");

                    b.Property<long?>("TargetSalesInvoiced")
                        .HasColumnType("bigint")
                        .HasColumnName("target_sales_invoiced");

                    b.Property<long?>("TargetSalesWon")
                        .HasColumnType("bigint")
                        .HasColumnName("target_sales_won");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("TotpSecret")
                        .HasColumnType("text")
                        .HasColumnName("totp_secret");

                    b.Property<Guid?>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.HasKey("Id")
                        .HasName("res_users_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastLunchLocationId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("SaleTeamId");

                    b.HasIndex("TenantId");

                    b.HasIndex("WebsiteId");

                    b.HasIndex(new[] { "Login", "WebsiteId" }, "res_users_login_key")
                        .IsUnique()
                        .HasDatabaseName("res_users_login_key");

                    b.HasIndex(new[] { "PartnerId" }, "res_users_partner_id_index")
                        .HasDatabaseName("res_users_partner_id_index");

                    b.ToTable("res_users", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResUsersApikey", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("(now() AT TIME ZONE 'utc'::text)");

                    b.Property<string>("Index")
                        .HasColumnType("text")
                        .HasColumnName("index");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Scope")
                        .HasColumnType("text")
                        .HasColumnName("scope");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("res_users_apikeys_pkey");

                    b.HasIndex(new[] { "UserId", "Index" }, "res_users_apikeys_user_id_index_idx")
                        .HasDatabaseName("res_users_apikeys_user_id_index_idx");

                    b.ToTable("res_users_apikeys", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResUsersApikeysDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("res_users_apikeys_description_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("res_users_apikeys_description", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResUsersDeletion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("UserIdInt")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id_int");

                    b.HasKey("Id")
                        .HasName("res_users_deletion_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("UserId");

                    b.ToTable("res_users_deletion", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResUsersIdentitycheck", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Request")
                        .HasColumnType("text")
                        .HasColumnName("request");

                    b.HasKey("Id")
                        .HasName("res_users_identitycheck_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("res_users_identitycheck", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResUsersLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("res_users_log_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("res_users_log", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResUsersSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("IsDiscussSidebarCategoryChannelOpen")
                        .HasColumnType("boolean")
                        .HasColumnName("is_discuss_sidebar_category_channel_open");

                    b.Property<bool?>("IsDiscussSidebarCategoryChatOpen")
                        .HasColumnType("boolean")
                        .HasColumnName("is_discuss_sidebar_category_chat_open");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("PushToTalkKey")
                        .HasColumnType("text")
                        .HasColumnName("push_to_talk_key");

                    b.Property<bool?>("UsePushToTalk")
                        .HasColumnType("boolean")
                        .HasColumnName("use_push_to_talk");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<long?>("VoiceActiveDuration")
                        .HasColumnType("bigint")
                        .HasColumnName("voice_active_duration");

                    b.HasKey("Id")
                        .HasName("res_users_settings_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "UserId" }, "res_users_settings_unique_user_id")
                        .IsUnique()
                        .HasDatabaseName("res_users_settings_unique_user_id");

                    b.ToTable("res_users_settings", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResUsersSettingsVolume", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("GuestId")
                        .HasColumnType("uuid")
                        .HasColumnName("guest_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid?>("UserSettingId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_setting_id");

                    b.Property<double?>("Volume")
                        .HasColumnType("double precision")
                        .HasColumnName("volume");

                    b.HasKey("Id")
                        .HasName("res_users_settings_volumes_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "GuestId" }, "res_users_settings_volumes_guest_id_index")
                        .HasDatabaseName("res_users_settings_volumes_guest_id_index");

                    b.HasIndex(new[] { "UserSettingId", "GuestId" }, "res_users_settings_volumes_guest_unique")
                        .IsUnique()
                        .HasDatabaseName("res_users_settings_volumes_guest_unique")
                        .HasFilter("(guest_id IS NOT NULL)");

                    b.HasIndex(new[] { "PartnerId" }, "res_users_settings_volumes_partner_id_index")
                        .HasDatabaseName("res_users_settings_volumes_partner_id_index");

                    b.HasIndex(new[] { "UserSettingId", "PartnerId" }, "res_users_settings_volumes_partner_unique")
                        .IsUnique()
                        .HasDatabaseName("res_users_settings_volumes_partner_unique")
                        .HasFilter("(partner_id IS NOT NULL)");

                    b.HasIndex(new[] { "UserSettingId" }, "res_users_settings_volumes_user_setting_id_index")
                        .HasDatabaseName("res_users_settings_volumes_user_setting_id_index");

                    b.ToTable("res_users_settings_volumes", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResetViewArchWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("CompareViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("compare_view_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("ResetMode")
                        .HasColumnType("text")
                        .HasColumnName("reset_mode");

                    b.Property<Guid?>("ViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("view_id");

                    b.HasKey("Id")
                        .HasName("reset_view_arch_wizard_pkey");

                    b.HasIndex("CompareViewId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ViewId");

                    b.ToTable("reset_view_arch_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResourceCalendar", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<double?>("HoursPerDay")
                        .HasColumnType("double precision")
                        .HasColumnName("hours_per_day");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<bool?>("TwoWeeksCalendar")
                        .HasColumnType("boolean")
                        .HasColumnName("two_weeks_calendar");

                    b.Property<string>("Tz")
                        .HasColumnType("text")
                        .HasColumnName("tz");

                    b.HasKey("Id")
                        .HasName("resource_calendar_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("resource_calendar", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResourceCalendarAttendance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("CalendarId")
                        .HasColumnType("uuid")
                        .HasColumnName("calendar_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to");

                    b.Property<string>("DayPeriod")
                        .HasColumnType("text")
                        .HasColumnName("day_period");

                    b.Property<string>("Dayofweek")
                        .HasColumnType("text")
                        .HasColumnName("dayofweek");

                    b.Property<string>("DisplayType")
                        .HasColumnType("text")
                        .HasColumnName("display_type");

                    b.Property<double?>("HourFrom")
                        .HasColumnType("double precision")
                        .HasColumnName("hour_from");

                    b.Property<double?>("HourTo")
                        .HasColumnType("double precision")
                        .HasColumnName("hour_to");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("resource_id");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<string>("WeekType")
                        .HasColumnType("text")
                        .HasColumnName("week_type");

                    b.HasKey("Id")
                        .HasName("resource_calendar_attendance_pkey");

                    b.HasIndex("CalendarId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ResourceId");

                    b.HasIndex(new[] { "Dayofweek" }, "resource_calendar_attendance_dayofweek_index")
                        .HasDatabaseName("resource_calendar_attendance_dayofweek_index");

                    b.HasIndex(new[] { "HourFrom" }, "resource_calendar_attendance_hour_from_index")
                        .HasDatabaseName("resource_calendar_attendance_hour_from_index");

                    b.ToTable("resource_calendar_attendance", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResourceCalendarLeaf", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("CalendarId")
                        .HasColumnType("uuid")
                        .HasColumnName("calendar_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_to");

                    b.Property<Guid?>("HolidayId")
                        .HasColumnType("uuid")
                        .HasColumnName("holiday_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("resource_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("TimeType")
                        .HasColumnType("text")
                        .HasColumnName("time_type");

                    b.HasKey("Id")
                        .HasName("resource_calendar_leaves_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("HolidayId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "CalendarId" }, "resource_calendar_leaves_calendar_id_index")
                        .HasDatabaseName("resource_calendar_leaves_calendar_id_index");

                    b.HasIndex(new[] { "ResourceId" }, "resource_calendar_leaves_resource_id_index")
                        .HasDatabaseName("resource_calendar_leaves_resource_id_index");

                    b.ToTable("resource_calendar_leaves", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResourceResource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<Guid?>("CalendarId")
                        .HasColumnType("uuid")
                        .HasColumnName("calendar_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ResourceType")
                        .HasColumnType("text")
                        .HasColumnName("resource_type");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<double?>("TimeEfficiency")
                        .HasColumnType("double precision")
                        .HasColumnName("time_efficiency");

                    b.Property<string>("Tz")
                        .HasColumnType("text")
                        .HasColumnName("tz");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("resource_resource_pkey");

                    b.HasIndex("CalendarId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("resource_resource", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.SaleAdvancePaymentInv", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AdvancePaymentMethod")
                        .HasColumnType("text")
                        .HasColumnName("advance_payment_method");

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<bool?>("DeductDownPayments")
                        .HasColumnType("boolean")
                        .HasColumnName("deduct_down_payments");

                    b.Property<Guid?>("DepositAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("deposit_account_id");

                    b.Property<decimal?>("FixedAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("fixed_amount");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("sale_advance_payment_inv_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DepositAccountId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantId");

                    b.ToTable("sale_advance_payment_inv", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.SaleOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<decimal?>("AmountTax")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_tax");

                    b.Property<decimal?>("AmountTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_total");

                    b.Property<decimal?>("AmountUnpaid")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_unpaid");

                    b.Property<decimal?>("AmountUntaxed")
                        .HasColumnType("numeric")
                        .HasColumnName("amount_untaxed");

                    b.Property<Guid?>("AnalyticAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("analytic_account_id");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uuid")
                        .HasColumnName("campaign_id");

                    b.Property<bool?>("CartRecoveryEmailSent")
                        .HasColumnType("boolean")
                        .HasColumnName("cart_recovery_email_sent");

                    b.Property<string>("ClientOrderRef")
                        .HasColumnType("text")
                        .HasColumnName("client_order_ref");

                    b.Property<DateTime?>("CommitmentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("commitment_date");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<decimal?>("CurrencyRate")
                        .HasColumnType("numeric")
                        .HasColumnName("currency_rate");

                    b.Property<DateTime?>("DateOrder")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_order");

                    b.Property<string>("DeliveryStatus")
                        .HasColumnType("text")
                        .HasColumnName("delivery_status");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("effective_date");

                    b.Property<Guid?>("FiscalPositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("fiscal_position_id");

                    b.Property<Guid?>("Incoterm")
                        .HasColumnType("uuid")
                        .HasColumnName("incoterm");

                    b.Property<string>("IncotermLocation")
                        .HasColumnType("text")
                        .HasColumnName("incoterm_location");

                    b.Property<string>("InvoiceStatus")
                        .HasColumnType("text")
                        .HasColumnName("invoice_status");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MediumId")
                        .HasColumnType("uuid")
                        .HasColumnName("medium_id");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<Guid?>("OpportunityId")
                        .HasColumnType("uuid")
                        .HasColumnName("opportunity_id");

                    b.Property<string>("Origin")
                        .HasColumnType("text")
                        .HasColumnName("origin");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid?>("PartnerInvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_invoice_id");

                    b.Property<Guid?>("PartnerShippingId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_shipping_id");

                    b.Property<Guid?>("PaymentTermId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_term_id");

                    b.Property<string>("PickingPolicy")
                        .HasColumnType("text")
                        .HasColumnName("picking_policy");

                    b.Property<Guid?>("PricelistId")
                        .HasColumnType("uuid")
                        .HasColumnName("pricelist_id");

                    b.Property<Guid?>("ProcurementGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("procurement_group_id");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<bool?>("RequirePayment")
                        .HasColumnType("boolean")
                        .HasColumnName("require_payment");

                    b.Property<bool?>("RequireSignature")
                        .HasColumnType("boolean")
                        .HasColumnName("require_signature");

                    b.Property<Guid?>("SaleOrderTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_order_template_id");

                    b.Property<string>("ShopWarning")
                        .HasColumnType("text")
                        .HasColumnName("shop_warning");

                    b.Property<string>("SignedBy")
                        .HasColumnType("text")
                        .HasColumnName("signed_by");

                    b.Property<DateTime?>("SignedOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("signed_on");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_id");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("ValidityDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("validity_date");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("warehouse_id");

                    b.Property<Guid?>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.HasKey("Id")
                        .HasName("sale_order_pkey");

                    b.HasIndex("AnalyticAccountId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FiscalPositionId");

                    b.HasIndex("Incoterm");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MediumId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("OpportunityId");

                    b.HasIndex("PartnerInvoiceId");

                    b.HasIndex("PartnerShippingId");

                    b.HasIndex("PaymentTermId");

                    b.HasIndex("PricelistId");

                    b.HasIndex("ProcurementGroupId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SaleOrderTemplateId");

                    b.HasIndex("SourceId");

                    b.HasIndex("TeamId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("WebsiteId");

                    b.HasIndex(new[] { "TenantId" }, "sale_order_company_id_index")
                        .HasDatabaseName("sale_order_company_id_index");

                    b.HasIndex(new[] { "CreationTime" }, "sale_order_create_date_index")
                        .HasDatabaseName("sale_order_create_date_index");

                    b.HasIndex(new[] { "DateOrder", "Id" }, "sale_order_date_order_id_idx")
                        .IsDescending()
                        .HasDatabaseName("sale_order_date_order_id_idx");

                    b.HasIndex(new[] { "Name" }, "sale_order_name_index")
                        .HasDatabaseName("sale_order_name_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "Name" }, "sale_order_name_index"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Name" }, "sale_order_name_index"), new[] { "gin_trgm_ops" });

                    b.HasIndex(new[] { "PartnerId" }, "sale_order_partner_id_index")
                        .HasDatabaseName("sale_order_partner_id_index");

                    b.HasIndex(new[] { "State" }, "sale_order_state_index")
                        .HasDatabaseName("sale_order_state_index");

                    b.HasIndex(new[] { "UserId" }, "sale_order_user_id_index")
                        .HasDatabaseName("sale_order_user_id_index");

                    b.ToTable("sale_order", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.SaleOrderCancel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("EmailFrom")
                        .HasColumnType("text")
                        .HasColumnName("email_from");

                    b.Property<string>("Lang")
                        .HasColumnType("text")
                        .HasColumnName("lang");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.HasKey("Id")
                        .HasName("sale_order_cancel_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TemplateId");

                    b.HasIndex(new[] { "AuthorId" }, "sale_order_cancel_author_id_index")
                        .HasDatabaseName("sale_order_cancel_author_id_index");

                    b.ToTable("sale_order_cancel", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.SaleOrderLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AnalyticDistribution")
                        .HasColumnType("jsonb")
                        .HasColumnName("analytic_distribution");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("currency_id");

                    b.Property<double?>("CustomerLead")
                        .HasColumnType("double precision")
                        .HasColumnName("customer_lead");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric")
                        .HasColumnName("discount");

                    b.Property<string>("DisplayType")
                        .HasColumnType("text")
                        .HasColumnName("display_type");

                    b.Property<string>("InvoiceStatus")
                        .HasColumnType("text")
                        .HasColumnName("invoice_status");

                    b.Property<bool?>("IsDownpayment")
                        .HasColumnType("boolean")
                        .HasColumnName("is_downpayment");

                    b.Property<bool?>("IsExpense")
                        .HasColumnType("boolean")
                        .HasColumnName("is_expense");

                    b.Property<bool?>("IsService")
                        .HasColumnType("boolean")
                        .HasColumnName("is_service");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LinkedLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("linked_line_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid?>("OrderPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_partner_id");

                    b.Property<decimal?>("PriceReduce")
                        .HasColumnType("numeric")
                        .HasColumnName("price_reduce");

                    b.Property<decimal?>("PriceReduceTaxexcl")
                        .HasColumnType("numeric")
                        .HasColumnName("price_reduce_taxexcl");

                    b.Property<decimal?>("PriceReduceTaxinc")
                        .HasColumnType("numeric")
                        .HasColumnName("price_reduce_taxinc");

                    b.Property<decimal?>("PriceSubtotal")
                        .HasColumnType("numeric")
                        .HasColumnName("price_subtotal");

                    b.Property<double?>("PriceTax")
                        .HasColumnType("double precision")
                        .HasColumnName("price_tax");

                    b.Property<decimal?>("PriceTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("price_total");

                    b.Property<decimal?>("PriceUnit")
                        .HasColumnType("numeric")
                        .HasColumnName("price_unit");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ProductPackagingId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_packaging_id");

                    b.Property<double?>("ProductPackagingQty")
                        .HasColumnType("double precision")
                        .HasColumnName("product_packaging_qty");

                    b.Property<Guid?>("ProductUom")
                        .HasColumnType("uuid")
                        .HasColumnName("product_uom");

                    b.Property<decimal?>("ProductUomQty")
                        .HasColumnType("numeric")
                        .HasColumnName("product_uom_qty");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<decimal?>("QtyDelivered")
                        .HasColumnType("numeric")
                        .HasColumnName("qty_delivered");

                    b.Property<string>("QtyDeliveredMethod")
                        .HasColumnType("text")
                        .HasColumnName("qty_delivered_method");

                    b.Property<decimal?>("QtyInvoiced")
                        .HasColumnType("numeric")
                        .HasColumnName("qty_invoiced");

                    b.Property<decimal?>("QtyToInvoice")
                        .HasColumnType("numeric")
                        .HasColumnName("qty_to_invoice");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.Property<Guid?>("SalesmanId")
                        .HasColumnType("uuid")
                        .HasColumnName("salesman_id");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<string>("ShopWarning")
                        .HasColumnType("text")
                        .HasColumnName("shop_warning");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<decimal?>("UntaxedAmountInvoiced")
                        .HasColumnType("numeric")
                        .HasColumnName("untaxed_amount_invoiced");

                    b.Property<decimal?>("UntaxedAmountToInvoice")
                        .HasColumnType("numeric")
                        .HasColumnName("untaxed_amount_to_invoice");

                    b.HasKey("Id")
                        .HasName("sale_order_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductPackagingId");

                    b.HasIndex("ProductUom");

                    b.HasIndex("RouteId");

                    b.HasIndex("SalesmanId");

                    b.HasIndex(new[] { "AnalyticDistribution" }, "sale_order_line_analytic_distribution_gin_index")
                        .HasDatabaseName("sale_order_line_analytic_distribution_gin_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "AnalyticDistribution" }, "sale_order_line_analytic_distribution_gin_index"), "gin");

                    b.HasIndex(new[] { "TenantId" }, "sale_order_line_company_id_index")
                        .HasDatabaseName("sale_order_line_company_id_index");

                    b.HasIndex(new[] { "LinkedLineId" }, "sale_order_line_linked_line_id_index")
                        .HasDatabaseName("sale_order_line_linked_line_id_index");

                    b.HasIndex(new[] { "OrderId" }, "sale_order_line_order_id_index")
                        .HasDatabaseName("sale_order_line_order_id_index");

                    b.HasIndex(new[] { "OrderPartnerId" }, "sale_order_line_order_partner_id_index")
                        .HasDatabaseName("sale_order_line_order_partner_id_index");

                    b.HasIndex(new[] { "ProductId" }, "sale_order_line_product_id_index")
                        .HasDatabaseName("sale_order_line_product_id_index")
                        .HasFilter("(product_id IS NOT NULL)");

                    b.HasIndex(new[] { "ProjectId" }, "sale_order_line_project_id_index")
                        .HasDatabaseName("sale_order_line_project_id_index");

                    b.HasIndex(new[] { "TaskId" }, "sale_order_line_task_id_index")
                        .HasDatabaseName("sale_order_line_task_id_index");

                    b.ToTable("sale_order_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.SaleOrderOption", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric")
                        .HasColumnName("discount");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LineId")
                        .HasColumnType("uuid")
                        .HasColumnName("line_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<decimal?>("PriceUnit")
                        .HasColumnType("numeric")
                        .HasColumnName("price_unit");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("UomId")
                        .HasColumnType("uuid")
                        .HasColumnName("uom_id");

                    b.HasKey("Id")
                        .HasName("sale_order_option_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LineId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UomId");

                    b.HasIndex(new[] { "OrderId" }, "sale_order_option_order_id_index")
                        .HasDatabaseName("sale_order_option_order_id_index");

                    b.ToTable("sale_order_option", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.SaleOrderTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MailTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_template_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("jsonb")
                        .HasColumnName("note");

                    b.Property<long?>("NumberOfDays")
                        .HasColumnType("bigint")
                        .HasColumnName("number_of_days");

                    b.Property<bool?>("RequirePayment")
                        .HasColumnType("boolean")
                        .HasColumnName("require_payment");

                    b.Property<bool?>("RequireSignature")
                        .HasColumnType("boolean")
                        .HasColumnName("require_signature");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("sale_order_template_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MailTemplateId");

                    b.HasIndex("TenantId");

                    b.ToTable("sale_order_template", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.SaleOrderTemplateLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("DisplayType")
                        .HasColumnType("text")
                        .HasColumnName("display_type");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ProductUomId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_uom_id");

                    b.Property<decimal?>("ProductUomQty")
                        .HasColumnType("numeric")
                        .HasColumnName("product_uom_qty");

                    b.Property<Guid?>("SaleOrderTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_order_template_id");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("sale_order_template_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductUomId");

                    b.HasIndex(new[] { "TenantId" }, "sale_order_template_line_company_id_index")
                        .HasDatabaseName("sale_order_template_line_company_id_index");

                    b.HasIndex(new[] { "SaleOrderTemplateId" }, "sale_order_template_line_sale_order_template_id_index")
                        .HasDatabaseName("sale_order_template_line_sale_order_template_id_index");

                    b.ToTable("sale_order_template_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.SaleOrderTemplateOption", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("SaleOrderTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_order_template_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("UomId")
                        .HasColumnType("uuid")
                        .HasColumnName("uom_id");

                    b.HasKey("Id")
                        .HasName("sale_order_template_option_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UomId");

                    b.HasIndex(new[] { "TenantId" }, "sale_order_template_option_company_id_index")
                        .HasDatabaseName("sale_order_template_option_company_id_index");

                    b.HasIndex(new[] { "SaleOrderTemplateId" }, "sale_order_template_option_sale_order_template_id_index")
                        .HasDatabaseName("sale_order_template_option_sale_order_template_id_index");

                    b.ToTable("sale_order_template_option", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.SalePaymentProviderOnboardingWizard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccNumber")
                        .HasColumnType("text")
                        .HasColumnName("acc_number");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("JournalName")
                        .HasColumnType("text")
                        .HasColumnName("journal_name");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("ManualName")
                        .HasColumnType("text")
                        .HasColumnName("manual_name");

                    b.Property<string>("ManualPostMsg")
                        .HasColumnType("text")
                        .HasColumnName("manual_post_msg");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaypalEmailAccount")
                        .HasColumnType("text")
                        .HasColumnName("paypal_email_account");

                    b.Property<string>("PaypalPdtToken")
                        .HasColumnType("text")
                        .HasColumnName("paypal_pdt_token");

                    b.Property<string>("PaypalSellerAccount")
                        .HasColumnType("text")
                        .HasColumnName("paypal_seller_account");

                    b.Property<string>("PaypalUserType")
                        .HasColumnType("text")
                        .HasColumnName("paypal_user_type");

                    b.HasKey("Id")
                        .HasName("sale_payment_provider_onboarding_wizard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("sale_payment_provider_onboarding_wizard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.SmsComposer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<string>("CompositionMode")
                        .HasColumnType("text")
                        .HasColumnName("composition_mode");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<bool?>("MassForceSend")
                        .HasColumnType("boolean")
                        .HasColumnName("mass_force_send");

                    b.Property<bool?>("MassKeepLog")
                        .HasColumnType("boolean")
                        .HasColumnName("mass_keep_log");

                    b.Property<bool?>("MassUseBlacklist")
                        .HasColumnType("boolean")
                        .HasColumnName("mass_use_blacklist");

                    b.Property<string>("NumberFieldName")
                        .HasColumnType("text")
                        .HasColumnName("number_field_name");

                    b.Property<string>("Numbers")
                        .HasColumnType("text")
                        .HasColumnName("numbers");

                    b.Property<string>("RecipientSingleNumberItf")
                        .HasColumnType("text")
                        .HasColumnName("recipient_single_number_itf");

                    b.Property<Guid?>("ResId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_id");

                    b.Property<string>("ResIds")
                        .HasColumnType("text")
                        .HasColumnName("res_ids");

                    b.Property<string>("ResModel")
                        .HasColumnType("text")
                        .HasColumnName("res_model");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.HasKey("Id")
                        .HasName("sms_composer_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TemplateId");

                    b.ToTable("sms_composer", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.SmsResend", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MailMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_message_id");

                    b.HasKey("Id")
                        .HasName("sms_resend_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MailMessageId");

                    b.ToTable("sms_resend", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.SmsResendRecipient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("NotificationId")
                        .HasColumnType("uuid")
                        .HasColumnName("notification_id");

                    b.Property<string>("PartnerName")
                        .HasColumnType("text")
                        .HasColumnName("partner_name");

                    b.Property<bool?>("Resend")
                        .HasColumnType("boolean")
                        .HasColumnName("resend");

                    b.Property<string>("SmsNumber")
                        .HasColumnType("text")
                        .HasColumnName("sms_number");

                    b.Property<Guid?>("SmsResendId")
                        .HasColumnType("uuid")
                        .HasColumnName("sms_resend_id");

                    b.HasKey("Id")
                        .HasName("sms_resend_recipient_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("SmsResendId");

                    b.ToTable("sms_resend_recipient", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.SmsSm", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("FailureType")
                        .HasColumnType("text")
                        .HasColumnName("failure_type");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MailMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_message_id");

                    b.Property<string>("Number")
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("sms_sms_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PartnerId");

                    b.HasIndex(new[] { "MailMessageId" }, "sms_sms_mail_message_id_index")
                        .HasDatabaseName("sms_sms_mail_message_id_index");

                    b.ToTable("sms_sms", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.SmsTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Body")
                        .HasColumnType("jsonb")
                        .HasColumnName("body");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Lang")
                        .HasColumnType("text")
                        .HasColumnName("lang");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Model")
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("model_id");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<Guid?>("SidebarActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("sidebar_action_id");

                    b.Property<string>("TemplateFs")
                        .HasColumnType("text")
                        .HasColumnName("template_fs");

                    b.HasKey("Id")
                        .HasName("sms_template_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ModelId");

                    b.HasIndex("SidebarActionId");

                    b.HasIndex(new[] { "Model" }, "sms_template_model_index")
                        .HasDatabaseName("sms_template_model_index");

                    b.ToTable("sms_template", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.SmsTemplatePreview", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Lang")
                        .HasColumnType("text")
                        .HasColumnName("lang");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("ResourceRef")
                        .HasColumnType("text")
                        .HasColumnName("resource_ref");

                    b.Property<Guid?>("SmsTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("sms_template_id");

                    b.HasKey("Id")
                        .HasName("sms_template_preview_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("SmsTemplateId");

                    b.ToTable("sms_template_preview", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.SmsTemplateReset", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("sms_template_reset_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("sms_template_reset", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.SnailmailConfirmInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("InvoiceSendId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_send_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("ModelName")
                        .HasColumnType("text")
                        .HasColumnName("model_name");

                    b.HasKey("Id")
                        .HasName("snailmail_confirm_invoice_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("InvoiceSendId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("snailmail_confirm_invoice", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.SnailmailLetter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("attachment_id");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<bool?>("Color")
                        .HasColumnType("boolean")
                        .HasColumnName("color");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<bool?>("Cover")
                        .HasColumnType("boolean")
                        .HasColumnName("cover");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("Duplex")
                        .HasColumnType("boolean")
                        .HasColumnName("duplex");

                    b.Property<string>("ErrorCode")
                        .HasColumnType("text")
                        .HasColumnName("error_code");

                    b.Property<string>("InfoMsg")
                        .HasColumnType("text")
                        .HasColumnName("info_msg");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<string>("Model")
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid?>("ReportTemplate")
                        .HasColumnType("uuid")
                        .HasColumnName("report_template");

                    b.Property<Guid?>("ResId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_id");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint")
                        .HasColumnName("state_id");

                    b.Property<string>("Street")
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<string>("Street2")
                        .HasColumnType("text")
                        .HasColumnName("street2");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Zip")
                        .HasColumnType("text")
                        .HasColumnName("zip");

                    b.HasKey("Id")
                        .HasName("snailmail_letter_pkey");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ReportTemplate");

                    b.HasIndex("StateId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("snailmail_letter", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.SnailmailLetterFormatError", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<bool?>("SnailmailCover")
                        .HasColumnType("boolean")
                        .HasColumnName("snailmail_cover");

                    b.HasKey("Id")
                        .HasName("snailmail_letter_format_error_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageId");

                    b.ToTable("snailmail_letter_format_error", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.SnailmailLetterMissingRequiredField", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LetterId")
                        .HasColumnType("uuid")
                        .HasColumnName("letter_id");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint")
                        .HasColumnName("state_id");

                    b.Property<string>("Street")
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<string>("Street2")
                        .HasColumnType("text")
                        .HasColumnName("street2");

                    b.Property<string>("Zip")
                        .HasColumnType("text")
                        .HasColumnName("zip");

                    b.HasKey("Id")
                        .HasName("snailmail_letter_missing_required_fields_pkey");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LetterId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("StateId");

                    b.ToTable("snailmail_letter_missing_required_fields", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.SpreadsheetDashboard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("DashboardGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("dashboard_group_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.HasKey("Id")
                        .HasName("spreadsheet_dashboard_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DashboardGroupId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("spreadsheet_dashboard", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.SpreadsheetDashboardGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.HasKey("Id")
                        .HasName("spreadsheet_dashboard_group_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("spreadsheet_dashboard_group", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockAssignSerial", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<decimal?>("ExpectedQty")
                        .HasColumnType("numeric")
                        .HasColumnName("expected_qty");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("move_id");

                    b.Property<string>("MultipleLotComponentsNames")
                        .HasColumnType("text")
                        .HasColumnName("multiple_lot_components_names");

                    b.Property<long?>("NextSerialCount")
                        .HasColumnType("bigint")
                        .HasColumnName("next_serial_count");

                    b.Property<string>("NextSerialNumber")
                        .HasColumnType("text")
                        .HasColumnName("next_serial_number");

                    b.Property<decimal?>("ProducedQty")
                        .HasColumnType("numeric")
                        .HasColumnName("produced_qty");

                    b.Property<Guid?>("ProductionId")
                        .HasColumnType("uuid")
                        .HasColumnName("production_id");

                    b.Property<string>("SerialNumbers")
                        .HasColumnType("text")
                        .HasColumnName("serial_numbers");

                    b.Property<bool?>("ShowApply")
                        .HasColumnType("boolean")
                        .HasColumnName("show_apply");

                    b.Property<bool?>("ShowBackorders")
                        .HasColumnType("boolean")
                        .HasColumnName("show_backorders");

                    b.HasKey("Id")
                        .HasName("stock_assign_serial_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MoveId");

                    b.HasIndex("ProductionId");

                    b.ToTable("stock_assign_serial", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockBackorderConfirmation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<bool?>("ShowTransfers")
                        .HasColumnType("boolean")
                        .HasColumnName("show_transfers");

                    b.HasKey("Id")
                        .HasName("stock_backorder_confirmation_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("stock_backorder_confirmation", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockBackorderConfirmationLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("BackorderConfirmationId")
                        .HasColumnType("uuid")
                        .HasColumnName("backorder_confirmation_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("PickingId")
                        .HasColumnType("uuid")
                        .HasColumnName("picking_id");

                    b.Property<bool?>("ToBackorder")
                        .HasColumnType("boolean")
                        .HasColumnName("to_backorder");

                    b.HasKey("Id")
                        .HasName("stock_backorder_confirmation_line_pkey");

                    b.HasIndex("BackorderConfirmationId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PickingId");

                    b.ToTable("stock_backorder_confirmation_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockChangeProductQty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<decimal?>("NewQuantity")
                        .HasColumnType("numeric")
                        .HasColumnName("new_quantity");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ProductTmplId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_tmpl_id");

                    b.HasKey("Id")
                        .HasName("stock_change_product_qty_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductTmplId");

                    b.ToTable("stock_change_product_qty", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockImmediateTransfer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<bool?>("ShowTransfers")
                        .HasColumnType("boolean")
                        .HasColumnName("show_transfers");

                    b.HasKey("Id")
                        .HasName("stock_immediate_transfer_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("stock_immediate_transfer", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockImmediateTransferLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("ImmediateTransferId")
                        .HasColumnType("uuid")
                        .HasColumnName("immediate_transfer_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("PickingId")
                        .HasColumnType("uuid")
                        .HasColumnName("picking_id");

                    b.Property<bool?>("ToImmediate")
                        .HasColumnType("boolean")
                        .HasColumnName("to_immediate");

                    b.HasKey("Id")
                        .HasName("stock_immediate_transfer_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ImmediateTransferId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PickingId");

                    b.ToTable("stock_immediate_transfer_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockInventoryAdjustmentName", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("InventoryAdjustmentName")
                        .HasColumnType("text")
                        .HasColumnName("inventory_adjustment_name");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<bool?>("ShowInfo")
                        .HasColumnType("boolean")
                        .HasColumnName("show_info");

                    b.HasKey("Id")
                        .HasName("stock_inventory_adjustment_name_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("stock_inventory_adjustment_name", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockInventoryConflict", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("stock_inventory_conflict_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("stock_inventory_conflict", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockInventoryWarning", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("stock_inventory_warning_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("stock_inventory_warning", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Barcode")
                        .HasColumnType("text")
                        .HasColumnName("barcode");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<string>("CompleteName")
                        .HasColumnType("text")
                        .HasColumnName("complete_name");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("CyclicInventoryFrequency")
                        .HasColumnType("bigint")
                        .HasColumnName("cyclic_inventory_frequency");

                    b.Property<DateTime?>("LastInventoryDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_inventory_date");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("NextInventoryDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("next_inventory_date");

                    b.Property<string>("ParentPath")
                        .HasColumnType("text")
                        .HasColumnName("parent_path");

                    b.Property<long?>("Posx")
                        .HasColumnType("bigint")
                        .HasColumnName("posx");

                    b.Property<long?>("Posy")
                        .HasColumnType("bigint")
                        .HasColumnName("posy");

                    b.Property<long?>("Posz")
                        .HasColumnType("bigint")
                        .HasColumnName("posz");

                    b.Property<Guid?>("RemovalStrategyId")
                        .HasColumnType("uuid")
                        .HasColumnName("removal_strategy_id");

                    b.Property<bool?>("ReplenishLocation")
                        .HasColumnType("boolean")
                        .HasColumnName("replenish_location");

                    b.Property<bool?>("ReturnLocation")
                        .HasColumnType("boolean")
                        .HasColumnName("return_location");

                    b.Property<bool?>("ScrapLocation")
                        .HasColumnType("boolean")
                        .HasColumnName("scrap_location");

                    b.Property<Guid?>("StorageCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("storage_category_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("Usage")
                        .HasColumnType("text")
                        .HasColumnName("usage");

                    b.Property<Guid?>("ValuationInAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("valuation_in_account_id");

                    b.Property<Guid?>("ValuationOutAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("valuation_out_account_id");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id")
                        .HasName("stock_location_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("RemovalStrategyId");

                    b.HasIndex("StorageCategoryId");

                    b.HasIndex("ValuationInAccountId");

                    b.HasIndex("ValuationOutAccountId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "Barcode", "TenantId" }, "stock_location_barcode_company_uniq")
                        .IsUnique()
                        .HasDatabaseName("stock_location_barcode_company_uniq");

                    b.HasIndex(new[] { "TenantId" }, "stock_location_company_id_index")
                        .HasDatabaseName("stock_location_company_id_index");

                    b.HasIndex(new[] { "LocationId" }, "stock_location_location_id_index")
                        .HasDatabaseName("stock_location_location_id_index");

                    b.HasIndex(new[] { "ParentPath" }, "stock_location_parent_path_index")
                        .HasDatabaseName("stock_location_parent_path_index");

                    b.HasIndex(new[] { "Usage" }, "stock_location_usage_index")
                        .HasDatabaseName("stock_location_usage_index");

                    b.ToTable("stock_location", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockLot", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ProductUomId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_uom_id");

                    b.Property<string>("Ref")
                        .HasColumnType("text")
                        .HasColumnName("ref");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("stock_lot_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("ProductUomId");

                    b.HasIndex(new[] { "TenantId" }, "stock_lot_company_id_index")
                        .HasDatabaseName("stock_lot_company_id_index");

                    b.HasIndex(new[] { "Name" }, "stock_lot_name_index")
                        .HasDatabaseName("stock_lot_name_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "Name" }, "stock_lot_name_index"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Name" }, "stock_lot_name_index"), new[] { "gin_trgm_ops" });

                    b.HasIndex(new[] { "ProductId" }, "stock_lot_product_id_index")
                        .HasDatabaseName("stock_lot_product_id_index");

                    b.ToTable("stock_lot", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockMove", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Additional")
                        .HasColumnType("boolean")
                        .HasColumnName("additional");

                    b.Property<Guid?>("AnalyticAccountLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("analytic_account_line_id");

                    b.Property<Guid?>("BomLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("bom_line_id");

                    b.Property<Guid?>("ByproductId")
                        .HasColumnType("uuid")
                        .HasColumnName("byproduct_id");

                    b.Property<Guid?>("ConsumeUnbuildId")
                        .HasColumnType("uuid")
                        .HasColumnName("consume_unbuild_id");

                    b.Property<decimal?>("CostShare")
                        .HasColumnType("numeric")
                        .HasColumnName("cost_share");

                    b.Property<Guid?>("CreatedProductionId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_production_id");

                    b.Property<Guid?>("CreatedPurchaseLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_purchase_line_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DateDeadline")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_deadline");

                    b.Property<DateTime?>("DelayAlertDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("delay_alert_date");

                    b.Property<string>("DescriptionPicking")
                        .HasColumnType("text")
                        .HasColumnName("description_picking");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<bool?>("IsDone")
                        .HasColumnType("boolean")
                        .HasColumnName("is_done");

                    b.Property<bool?>("IsInventory")
                        .HasColumnType("boolean")
                        .HasColumnName("is_inventory");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LocationDestId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_dest_id");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<bool?>("ManualConsumption")
                        .HasColumnType("boolean")
                        .HasColumnName("manual_consumption");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NextSerial")
                        .HasColumnType("text")
                        .HasColumnName("next_serial");

                    b.Property<long?>("NextSerialCount")
                        .HasColumnType("bigint")
                        .HasColumnName("next_serial_count");

                    b.Property<Guid?>("OperationId")
                        .HasColumnType("uuid")
                        .HasColumnName("operation_id");

                    b.Property<Guid?>("OrderFinishedLotId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_finished_lot_id");

                    b.Property<Guid?>("OrderpointId")
                        .HasColumnType("uuid")
                        .HasColumnName("orderpoint_id");

                    b.Property<string>("Origin")
                        .HasColumnType("text")
                        .HasColumnName("origin");

                    b.Property<Guid?>("OriginReturnedMoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("origin_returned_move_id");

                    b.Property<Guid?>("PackageLevelId")
                        .HasColumnType("uuid")
                        .HasColumnName("package_level_id");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid?>("PickingId")
                        .HasColumnType("uuid")
                        .HasColumnName("picking_id");

                    b.Property<Guid?>("PickingTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("picking_type_id");

                    b.Property<double?>("PriceUnit")
                        .HasColumnType("double precision")
                        .HasColumnName("price_unit");

                    b.Property<string>("Priority")
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<string>("ProcureMethod")
                        .HasColumnType("text")
                        .HasColumnName("procure_method");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ProductPackagingId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_packaging_id");

                    b.Property<decimal?>("ProductQty")
                        .HasColumnType("numeric")
                        .HasColumnName("product_qty");

                    b.Property<Guid?>("ProductUom")
                        .HasColumnType("uuid")
                        .HasColumnName("product_uom");

                    b.Property<decimal?>("ProductUomQty")
                        .HasColumnType("numeric")
                        .HasColumnName("product_uom_qty");

                    b.Property<Guid?>("ProductionId")
                        .HasColumnType("uuid")
                        .HasColumnName("production_id");

                    b.Property<bool?>("PropagateCancel")
                        .HasColumnType("boolean")
                        .HasColumnName("propagate_cancel");

                    b.Property<Guid?>("PurchaseLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("purchase_line_id");

                    b.Property<decimal?>("QuantityDone")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity_done");

                    b.Property<Guid?>("RawMaterialProductionId")
                        .HasColumnType("uuid")
                        .HasColumnName("raw_material_production_id");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<Guid?>("RepairId")
                        .HasColumnType("uuid")
                        .HasColumnName("repair_id");

                    b.Property<DateTime?>("ReservationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reservation_date");

                    b.Property<Guid?>("RestrictPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("restrict_partner_id");

                    b.Property<Guid?>("RuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("rule_id");

                    b.Property<Guid?>("SaleLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_line_id");

                    b.Property<bool?>("Scrapped")
                        .HasColumnType("boolean")
                        .HasColumnName("scrapped");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<bool?>("ToRefund")
                        .HasColumnType("boolean")
                        .HasColumnName("to_refund");

                    b.Property<Guid?>("UnbuildId")
                        .HasColumnType("uuid")
                        .HasColumnName("unbuild_id");

                    b.Property<double?>("UnitFactor")
                        .HasColumnType("double precision")
                        .HasColumnName("unit_factor");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("warehouse_id");

                    b.Property<Guid?>("WorkorderId")
                        .HasColumnType("uuid")
                        .HasColumnName("workorder_id");

                    b.HasKey("Id")
                        .HasName("stock_move_pkey");

                    b.HasIndex("AnalyticAccountLineId");

                    b.HasIndex("BomLineId");

                    b.HasIndex("ByproductId");

                    b.HasIndex("ConsumeUnbuildId");

                    b.HasIndex("CreatedProductionId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("OperationId");

                    b.HasIndex("OrderFinishedLotId");

                    b.HasIndex("PackageLevelId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PickingTypeId");

                    b.HasIndex("ProductPackagingId");

                    b.HasIndex("ProductUom");

                    b.HasIndex("RepairId");

                    b.HasIndex("RestrictPartnerId");

                    b.HasIndex("RuleId");

                    b.HasIndex("UnbuildId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("WorkorderId");

                    b.HasIndex(new[] { "TenantId" }, "stock_move_company_id_index")
                        .HasDatabaseName("stock_move_company_id_index");

                    b.HasIndex(new[] { "CreatedPurchaseLineId" }, "stock_move_created_purchase_line_id_index")
                        .HasDatabaseName("stock_move_created_purchase_line_id_index")
                        .HasFilter("(created_purchase_line_id IS NOT NULL)");

                    b.HasIndex(new[] { "Date" }, "stock_move_date_index")
                        .HasDatabaseName("stock_move_date_index");

                    b.HasIndex(new[] { "LocationDestId" }, "stock_move_location_dest_id_index")
                        .HasDatabaseName("stock_move_location_dest_id_index");

                    b.HasIndex(new[] { "LocationId" }, "stock_move_location_id_index")
                        .HasDatabaseName("stock_move_location_id_index");

                    b.HasIndex(new[] { "OrderpointId" }, "stock_move_orderpoint_id_index")
                        .HasDatabaseName("stock_move_orderpoint_id_index");

                    b.HasIndex(new[] { "OriginReturnedMoveId" }, "stock_move_origin_returned_move_id_index")
                        .HasDatabaseName("stock_move_origin_returned_move_id_index");

                    b.HasIndex(new[] { "PickingId" }, "stock_move_picking_id_index")
                        .HasDatabaseName("stock_move_picking_id_index");

                    b.HasIndex(new[] { "ProductId" }, "stock_move_product_id_index")
                        .HasDatabaseName("stock_move_product_id_index");

                    b.HasIndex(new[] { "ProductId", "LocationId", "LocationDestId", "TenantId", "State" }, "stock_move_product_location_index")
                        .HasDatabaseName("stock_move_product_location_index");

                    b.HasIndex(new[] { "ProductionId" }, "stock_move_production_id_index")
                        .HasDatabaseName("stock_move_production_id_index")
                        .HasFilter("(production_id IS NOT NULL)");

                    b.HasIndex(new[] { "PurchaseLineId" }, "stock_move_purchase_line_id_index")
                        .HasDatabaseName("stock_move_purchase_line_id_index")
                        .HasFilter("(purchase_line_id IS NOT NULL)");

                    b.HasIndex(new[] { "RawMaterialProductionId" }, "stock_move_raw_material_production_id_index")
                        .HasDatabaseName("stock_move_raw_material_production_id_index")
                        .HasFilter("(raw_material_production_id IS NOT NULL)");

                    b.HasIndex(new[] { "SaleLineId" }, "stock_move_sale_line_id_index")
                        .HasDatabaseName("stock_move_sale_line_id_index")
                        .HasFilter("(sale_line_id IS NOT NULL)");

                    b.HasIndex(new[] { "State" }, "stock_move_state_index")
                        .HasDatabaseName("stock_move_state_index");

                    b.ToTable("stock_move", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockMoveLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("DescriptionPicking")
                        .HasColumnType("text")
                        .HasColumnName("description_picking");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LocationDestId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_dest_id");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<Guid?>("LotId")
                        .HasColumnType("uuid")
                        .HasColumnName("lot_id");

                    b.Property<string>("LotName")
                        .HasColumnType("text")
                        .HasColumnName("lot_name");

                    b.Property<Guid?>("MoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("move_id");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("package_id");

                    b.Property<Guid?>("PackageLevelId")
                        .HasColumnType("uuid")
                        .HasColumnName("package_level_id");

                    b.Property<Guid?>("PickingId")
                        .HasColumnType("uuid")
                        .HasColumnName("picking_id");

                    b.Property<string>("ProductCategoryName")
                        .HasColumnType("text")
                        .HasColumnName("product_category_name");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ProductUomId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_uom_id");

                    b.Property<Guid?>("ProductionId")
                        .HasColumnType("uuid")
                        .HasColumnName("production_id");

                    b.Property<decimal?>("QtyDone")
                        .HasColumnType("numeric")
                        .HasColumnName("qty_done");

                    b.Property<string>("Reference")
                        .HasColumnType("text")
                        .HasColumnName("reference");

                    b.Property<decimal?>("ReservedQty")
                        .HasColumnType("numeric")
                        .HasColumnName("reserved_qty");

                    b.Property<decimal?>("ReservedUomQty")
                        .HasColumnType("numeric")
                        .HasColumnName("reserved_uom_qty");

                    b.Property<Guid?>("ResultPackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("result_package_id");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("WorkorderId")
                        .HasColumnType("uuid")
                        .HasColumnName("workorder_id");

                    b.HasKey("Id")
                        .HasName("stock_move_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LocationDestId");

                    b.HasIndex("LocationId");

                    b.HasIndex("LotId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PackageId");

                    b.HasIndex("PackageLevelId");

                    b.HasIndex("ProductUomId");

                    b.HasIndex("ProductionId");

                    b.HasIndex("ResultPackageId");

                    b.HasIndex("WorkorderId");

                    b.HasIndex(new[] { "TenantId" }, "stock_move_line_company_id_index")
                        .HasDatabaseName("stock_move_line_company_id_index");

                    b.HasIndex(new[] { "Id", "TenantId", "ProductId", "LotId", "LocationId", "OwnerId", "PackageId" }, "stock_move_line_free_reservation_index")
                        .HasDatabaseName("stock_move_line_free_reservation_index")
                        .HasFilter("(((state IS NULL) OR (state <> ALL (ARRAY[('cancel'::character varying)::text, ('done'::character varying)::text]))) AND (reserved_qty > (0)::numeric))");

                    b.HasIndex(new[] { "MoveId" }, "stock_move_line_move_id_index")
                        .HasDatabaseName("stock_move_line_move_id_index");

                    b.HasIndex(new[] { "PickingId" }, "stock_move_line_picking_id_index")
                        .HasDatabaseName("stock_move_line_picking_id_index");

                    b.HasIndex(new[] { "ProductId" }, "stock_move_line_product_id_index")
                        .HasDatabaseName("stock_move_line_product_id_index");

                    b.ToTable("stock_move_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockOrderpointSnooze", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("PredefinedDate")
                        .HasColumnType("text")
                        .HasColumnName("predefined_date");

                    b.Property<DateTime?>("SnoozedUntil")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("snoozed_until");

                    b.HasKey("Id")
                        .HasName("stock_orderpoint_snooze_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("stock_orderpoint_snooze", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockPackageDestination", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LocationDestId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_dest_id");

                    b.Property<Guid?>("PickingId")
                        .HasColumnType("uuid")
                        .HasColumnName("picking_id");

                    b.HasKey("Id")
                        .HasName("stock_package_destination_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LocationDestId");

                    b.HasIndex("PickingId");

                    b.ToTable("stock_package_destination", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockPackageLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LocationDestId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_dest_id");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("package_id");

                    b.Property<Guid?>("PickingId")
                        .HasColumnType("uuid")
                        .HasColumnName("picking_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("stock_package_level_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LocationDestId");

                    b.HasIndex("PackageId");

                    b.HasIndex("PickingId");

                    b.HasIndex(new[] { "TenantId" }, "stock_package_level_company_id_index")
                        .HasDatabaseName("stock_package_level_company_id_index");

                    b.ToTable("stock_package_level", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockPackageType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Barcode")
                        .HasColumnType("text")
                        .HasColumnName("barcode");

                    b.Property<double?>("BaseWeight")
                        .HasColumnType("double precision")
                        .HasColumnName("base_weight");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("Height")
                        .HasColumnType("bigint")
                        .HasColumnName("height");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<double?>("MaxWeight")
                        .HasColumnType("double precision")
                        .HasColumnName("max_weight");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("PackagingLength")
                        .HasColumnType("bigint")
                        .HasColumnName("packaging_length");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<long?>("Width")
                        .HasColumnType("bigint")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("stock_package_type_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Barcode" }, "stock_package_type_barcode_uniq")
                        .IsUnique()
                        .HasDatabaseName("stock_package_type_barcode_uniq");

                    b.HasIndex(new[] { "TenantId" }, "stock_package_type_company_id_index")
                        .HasDatabaseName("stock_package_type_company_id_index");

                    b.ToTable("stock_package_type", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockPicking", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("BackorderId")
                        .HasColumnType("uuid")
                        .HasColumnName("backorder_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DateDeadline")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_deadline");

                    b.Property<DateTime?>("DateDone")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_done");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<bool?>("HasDeadlineIssue")
                        .HasColumnType("boolean")
                        .HasColumnName("has_deadline_issue");

                    b.Property<bool?>("ImmediateTransfer")
                        .HasColumnType("boolean")
                        .HasColumnName("immediate_transfer");

                    b.Property<bool?>("IsLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_locked");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LocationDestId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_dest_id");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<string>("MoveType")
                        .HasColumnType("text")
                        .HasColumnName("move_type");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("Origin")
                        .HasColumnType("text")
                        .HasColumnName("origin");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid?>("PickingTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("picking_type_id");

                    b.Property<Guid?>("PosOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_order_id");

                    b.Property<Guid?>("PosSessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_session_id");

                    b.Property<bool?>("Printed")
                        .HasColumnType("boolean")
                        .HasColumnName("printed");

                    b.Property<string>("Priority")
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<Guid?>("SaleId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_id");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("scheduled_date");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.HasKey("Id")
                        .HasName("stock_picking_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LocationDestId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PosOrderId");

                    b.HasIndex("PosSessionId");

                    b.HasIndex("UserId");

                    b.HasIndex("WebsiteId");

                    b.HasIndex(new[] { "BackorderId" }, "stock_picking_backorder_id_index")
                        .HasDatabaseName("stock_picking_backorder_id_index")
                        .HasFilter("(backorder_id IS NOT NULL)");

                    b.HasIndex(new[] { "TenantId" }, "stock_picking_company_id_index")
                        .HasDatabaseName("stock_picking_company_id_index");

                    b.HasIndex(new[] { "Name" }, "stock_picking_name_index")
                        .HasDatabaseName("stock_picking_name_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "Name" }, "stock_picking_name_index"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Name" }, "stock_picking_name_index"), new[] { "gin_trgm_ops" });

                    b.HasIndex(new[] { "Name", "TenantId" }, "stock_picking_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("stock_picking_name_uniq");

                    b.HasIndex(new[] { "Origin" }, "stock_picking_origin_index")
                        .HasDatabaseName("stock_picking_origin_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "Origin" }, "stock_picking_origin_index"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Origin" }, "stock_picking_origin_index"), new[] { "gin_trgm_ops" });

                    b.HasIndex(new[] { "PickingTypeId" }, "stock_picking_picking_type_id_index")
                        .HasDatabaseName("stock_picking_picking_type_id_index");

                    b.HasIndex(new[] { "SaleId" }, "stock_picking_sale_id_index")
                        .HasDatabaseName("stock_picking_sale_id_index")
                        .HasFilter("(sale_id IS NOT NULL)");

                    b.HasIndex(new[] { "ScheduledDate" }, "stock_picking_scheduled_date_index")
                        .HasDatabaseName("stock_picking_scheduled_date_index");

                    b.HasIndex(new[] { "State" }, "stock_picking_state_index")
                        .HasDatabaseName("stock_picking_state_index");

                    b.ToTable("stock_picking", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockPickingType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<bool?>("AutoShowReceptionReport")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_show_reception_report");

                    b.Property<string>("Barcode")
                        .HasColumnType("text")
                        .HasColumnName("barcode");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<string>("CreateBackorder")
                        .HasColumnType("text")
                        .HasColumnName("create_backorder");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("DefaultLocationDestId")
                        .HasColumnType("uuid")
                        .HasColumnName("default_location_dest_id");

                    b.Property<Guid?>("DefaultLocationSrcId")
                        .HasColumnType("uuid")
                        .HasColumnName("default_location_src_id");

                    b.Property<bool?>("IsRepairable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_repairable");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<bool?>("PrintLabel")
                        .HasColumnType("boolean")
                        .HasColumnName("print_label");

                    b.Property<long?>("ReservationDaysBefore")
                        .HasColumnType("bigint")
                        .HasColumnName("reservation_days_before");

                    b.Property<long?>("ReservationDaysBeforePriority")
                        .HasColumnType("bigint")
                        .HasColumnName("reservation_days_before_priority");

                    b.Property<string>("ReservationMethod")
                        .HasColumnType("text")
                        .HasColumnName("reservation_method");

                    b.Property<Guid?>("ReturnPickingTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("return_picking_type_id");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<string>("SequenceCode")
                        .HasColumnType("text")
                        .HasColumnName("sequence_code");

                    b.Property<Guid?>("SequenceId")
                        .HasColumnType("uuid")
                        .HasColumnName("sequence_id");

                    b.Property<bool?>("ShowEntirePacks")
                        .HasColumnType("boolean")
                        .HasColumnName("show_entire_packs");

                    b.Property<bool?>("ShowOperations")
                        .HasColumnType("boolean")
                        .HasColumnName("show_operations");

                    b.Property<bool?>("ShowReserved")
                        .HasColumnType("boolean")
                        .HasColumnName("show_reserved");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<bool?>("UseAutoConsumeComponentsLots")
                        .HasColumnType("boolean")
                        .HasColumnName("use_auto_consume_components_lots");

                    b.Property<bool?>("UseCreateComponentsLots")
                        .HasColumnType("boolean")
                        .HasColumnName("use_create_components_lots");

                    b.Property<bool?>("UseCreateLots")
                        .HasColumnType("boolean")
                        .HasColumnName("use_create_lots");

                    b.Property<bool?>("UseExistingLots")
                        .HasColumnType("boolean")
                        .HasColumnName("use_existing_lots");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id")
                        .HasName("stock_picking_type_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DefaultLocationDestId");

                    b.HasIndex("DefaultLocationSrcId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ReturnPickingTypeId");

                    b.HasIndex("SequenceId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "TenantId" }, "stock_picking_type_company_id_index")
                        .HasDatabaseName("stock_picking_type_company_id_index");

                    b.ToTable("stock_picking_type", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockPutawayRule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LocationInId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_in_id");

                    b.Property<Guid?>("LocationOutId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_out_id");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("StorageCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("storage_category_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("stock_putaway_rule_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LocationOutId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StorageCategoryId");

                    b.HasIndex(new[] { "TenantId" }, "stock_putaway_rule_company_id_index")
                        .HasDatabaseName("stock_putaway_rule_company_id_index");

                    b.HasIndex(new[] { "LocationInId" }, "stock_putaway_rule_location_in_id_index")
                        .HasDatabaseName("stock_putaway_rule_location_in_id_index");

                    b.ToTable("stock_putaway_rule", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockQuant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("AccountingDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("accounting_date");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("InDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("in_date");

                    b.Property<DateTime?>("InventoryDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("inventory_date");

                    b.Property<decimal?>("InventoryDiffQuantity")
                        .HasColumnType("numeric")
                        .HasColumnName("inventory_diff_quantity");

                    b.Property<decimal?>("InventoryQuantity")
                        .HasColumnType("numeric")
                        .HasColumnName("inventory_quantity");

                    b.Property<bool?>("InventoryQuantitySet")
                        .HasColumnType("boolean")
                        .HasColumnName("inventory_quantity_set");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<Guid?>("LotId")
                        .HasColumnType("uuid")
                        .HasColumnName("lot_id");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("package_id");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("ReservedQuantity")
                        .HasColumnType("numeric")
                        .HasColumnName("reserved_quantity");

                    b.Property<Guid?>("StorageCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("storage_category_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("stock_quant_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("StorageCategoryId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "LocationId" }, "stock_quant_location_id_index")
                        .HasDatabaseName("stock_quant_location_id_index");

                    b.HasIndex(new[] { "LotId" }, "stock_quant_lot_id_index")
                        .HasDatabaseName("stock_quant_lot_id_index");

                    b.HasIndex(new[] { "PackageId" }, "stock_quant_package_id_index")
                        .HasDatabaseName("stock_quant_package_id_index");

                    b.HasIndex(new[] { "ProductId" }, "stock_quant_product_id_index")
                        .HasDatabaseName("stock_quant_product_id_index");

                    b.ToTable("stock_quant", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockQuantPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("PackDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("pack_date");

                    b.Property<Guid?>("PackageTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("package_type_id");

                    b.Property<string>("PackageUse")
                        .HasColumnType("text")
                        .HasColumnName("package_use");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("stock_quant_package_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "TenantId" }, "stock_quant_package_company_id_index")
                        .HasDatabaseName("stock_quant_package_company_id_index");

                    b.HasIndex(new[] { "LocationId" }, "stock_quant_package_location_id_index")
                        .HasDatabaseName("stock_quant_package_location_id_index");

                    b.HasIndex(new[] { "Name" }, "stock_quant_package_name_index")
                        .HasDatabaseName("stock_quant_package_name_index");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "Name" }, "stock_quant_package_name_index"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex(new[] { "Name" }, "stock_quant_package_name_index"), new[] { "gin_trgm_ops" });

                    b.HasIndex(new[] { "PackageTypeId" }, "stock_quant_package_package_type_id_index")
                        .HasDatabaseName("stock_quant_package_package_type_id_index");

                    b.ToTable("stock_quant_package", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockQuantityHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("InventoryDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("inventory_datetime");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("stock_quantity_history_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("stock_quantity_history", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockReplenishmentInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("OrderpointId")
                        .HasColumnType("uuid")
                        .HasColumnName("orderpoint_id");

                    b.HasKey("Id")
                        .HasName("stock_replenishment_info_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("OrderpointId");

                    b.ToTable("stock_replenishment_info", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockReplenishmentOption", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ReplenishmentInfoId")
                        .HasColumnType("uuid")
                        .HasColumnName("replenishment_info_id");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.HasKey("Id")
                        .HasName("stock_replenishment_option_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReplenishmentInfoId");

                    b.HasIndex("RouteId");

                    b.ToTable("stock_replenishment_option", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockRequestCount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("AccountingDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("accounting_date");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("InventoryDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("inventory_date");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("SetCount")
                        .HasColumnType("text")
                        .HasColumnName("set_count");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("stock_request_count_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("UserId");

                    b.ToTable("stock_request_count", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockReturnPicking", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<bool?>("MoveDestExists")
                        .HasColumnType("boolean")
                        .HasColumnName("move_dest_exists");

                    b.Property<Guid?>("OriginalLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("original_location_id");

                    b.Property<Guid?>("ParentLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_location_id");

                    b.Property<Guid?>("PickingId")
                        .HasColumnType("uuid")
                        .HasColumnName("picking_id");

                    b.HasKey("Id")
                        .HasName("stock_return_picking_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OriginalLocationId");

                    b.HasIndex("ParentLocationId");

                    b.HasIndex("PickingId");

                    b.ToTable("stock_return_picking", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockReturnPickingLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("move_id");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<bool?>("ToRefund")
                        .HasColumnType("boolean")
                        .HasColumnName("to_refund");

                    b.Property<Guid?>("WizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("wizard_id");

                    b.HasKey("Id")
                        .HasName("stock_return_picking_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MoveId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WizardId");

                    b.ToTable("stock_return_picking_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<bool?>("PackagingSelectable")
                        .HasColumnType("boolean")
                        .HasColumnName("packaging_selectable");

                    b.Property<bool?>("ProductCategSelectable")
                        .HasColumnType("boolean")
                        .HasColumnName("product_categ_selectable");

                    b.Property<bool?>("ProductSelectable")
                        .HasColumnType("boolean")
                        .HasColumnName("product_selectable");

                    b.Property<bool?>("SaleSelectable")
                        .HasColumnType("boolean")
                        .HasColumnName("sale_selectable");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("SuppliedWhId")
                        .HasColumnType("uuid")
                        .HasColumnName("supplied_wh_id");

                    b.Property<Guid?>("SupplierWhId")
                        .HasColumnType("uuid")
                        .HasColumnName("supplier_wh_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<bool?>("WarehouseSelectable")
                        .HasColumnType("boolean")
                        .HasColumnName("warehouse_selectable");

                    b.HasKey("Id")
                        .HasName("stock_route_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("SuppliedWhId");

                    b.HasIndex("SupplierWhId");

                    b.HasIndex(new[] { "TenantId" }, "stock_route_company_id_index")
                        .HasDatabaseName("stock_route_company_id_index");

                    b.ToTable("stock_route", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockRule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Action")
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Auto")
                        .HasColumnType("text")
                        .HasColumnName("auto");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("Delay")
                        .HasColumnType("bigint")
                        .HasColumnName("delay");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<string>("GroupPropagationOption")
                        .HasColumnType("text")
                        .HasColumnName("group_propagation_option");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LocationDestId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_dest_id");

                    b.Property<Guid?>("LocationSrcId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_src_id");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<Guid?>("PartnerAddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_address_id");

                    b.Property<Guid?>("PickingTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("picking_type_id");

                    b.Property<string>("ProcureMethod")
                        .HasColumnType("text")
                        .HasColumnName("procure_method");

                    b.Property<bool?>("PropagateCancel")
                        .HasColumnType("boolean")
                        .HasColumnName("propagate_cancel");

                    b.Property<bool?>("PropagateCarrier")
                        .HasColumnType("boolean")
                        .HasColumnName("propagate_carrier");

                    b.Property<Guid?>("PropagateWarehouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("propagate_warehouse_id");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.Property<long?>("RouteSequence")
                        .HasColumnType("bigint")
                        .HasColumnName("route_sequence");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id")
                        .HasName("stock_rule_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LocationDestId");

                    b.HasIndex("LocationSrcId");

                    b.HasIndex("PartnerAddressId");

                    b.HasIndex("PickingTypeId");

                    b.HasIndex("PropagateWarehouseId");

                    b.HasIndex("RouteId");

                    b.HasIndex("TenantId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("stock_rule", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockRulesReport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<bool?>("ProductHasVariants")
                        .HasColumnType("boolean")
                        .HasColumnName("product_has_variants");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ProductTmplId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_tmpl_id");

                    b.HasKey("Id")
                        .HasName("stock_rules_report_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductTmplId");

                    b.ToTable("stock_rules_report", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockSchedulerCompute", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("stock_scheduler_compute_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("stock_scheduler_compute", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockScrap", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DateDone")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_done");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<Guid?>("LotId")
                        .HasColumnType("uuid")
                        .HasColumnName("lot_id");

                    b.Property<Guid?>("MessageMainAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_main_attachment_id");

                    b.Property<Guid?>("MoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("move_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Origin")
                        .HasColumnType("text")
                        .HasColumnName("origin");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid?>("PackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("package_id");

                    b.Property<Guid?>("PickingId")
                        .HasColumnType("uuid")
                        .HasColumnName("picking_id");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ProductUomId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_uom_id");

                    b.Property<Guid?>("ProductionId")
                        .HasColumnType("uuid")
                        .HasColumnName("production_id");

                    b.Property<Guid?>("ScrapLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("scrap_location_id");

                    b.Property<decimal?>("ScrapQty")
                        .HasColumnType("numeric")
                        .HasColumnName("scrap_qty");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("WorkorderId")
                        .HasColumnType("uuid")
                        .HasColumnName("workorder_id");

                    b.HasKey("Id")
                        .HasName("stock_scrap_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LocationId");

                    b.HasIndex("LotId");

                    b.HasIndex("MessageMainAttachmentId");

                    b.HasIndex("MoveId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PackageId");

                    b.HasIndex("PickingId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductUomId");

                    b.HasIndex("ProductionId");

                    b.HasIndex("ScrapLocationId");

                    b.HasIndex("TenantId");

                    b.HasIndex("WorkorderId");

                    b.ToTable("stock_scrap", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockStorageCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AllowNewProduct")
                        .HasColumnType("text")
                        .HasColumnName("allow_new_product");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<decimal?>("MaxWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("max_weight");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("stock_storage_category_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("TenantId");

                    b.ToTable("stock_storage_category", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockStorageCategoryCapacity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("PackageTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("package_type_id");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<double?>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("StorageCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("storage_category_id");

                    b.HasKey("Id")
                        .HasName("stock_storage_category_capacity_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "StorageCategoryId" }, "stock_storage_category_capacity_storage_category_id_index")
                        .HasDatabaseName("stock_storage_category_capacity_storage_category_id_index");

                    b.HasIndex(new[] { "PackageTypeId", "StorageCategoryId" }, "stock_storage_category_capacity_unique_package_type")
                        .IsUnique()
                        .HasDatabaseName("stock_storage_category_capacity_unique_package_type");

                    b.HasIndex(new[] { "ProductId", "StorageCategoryId" }, "stock_storage_category_capacity_unique_product")
                        .IsUnique()
                        .HasDatabaseName("stock_storage_category_capacity_unique_product");

                    b.ToTable("stock_storage_category_capacity", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockTraceabilityReport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("stock_traceability_report_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("stock_traceability_report", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockTrackConfirmation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("stock_track_confirmation_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("stock_track_confirmation", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockTrackLine", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("WizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("wizard_id");

                    b.HasKey("Id")
                        .HasName("stock_track_line_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WizardId");

                    b.ToTable("stock_track_line", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockValuationLayer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AccountMoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_move_id");

                    b.Property<Guid?>("AccountMoveLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_move_line_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<double?>("PriceDiffValue")
                        .HasColumnType("double precision")
                        .HasColumnName("price_diff_value");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("RemainingQty")
                        .HasColumnType("numeric")
                        .HasColumnName("remaining_qty");

                    b.Property<decimal?>("RemainingValue")
                        .HasColumnType("numeric")
                        .HasColumnName("remaining_value");

                    b.Property<Guid?>("StockMoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_move_id");

                    b.Property<Guid?>("StockValuationLayerId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_valuation_layer_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("numeric")
                        .HasColumnName("unit_cost");

                    b.Property<decimal?>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("stock_valuation_layer_pkey");

                    b.HasIndex("AccountMoveId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("StockValuationLayerId");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "AccountMoveLineId" }, "stock_valuation_layer_account_move_line_id_index")
                        .HasDatabaseName("stock_valuation_layer_account_move_line_id_index");

                    b.HasIndex(new[] { "ProductId", "RemainingQty", "StockMoveId", "TenantId", "CreationTime" }, "stock_valuation_layer_index")
                        .HasDatabaseName("stock_valuation_layer_index");

                    b.HasIndex(new[] { "StockMoveId" }, "stock_valuation_layer_stock_move_id_index")
                        .HasDatabaseName("stock_valuation_layer_stock_move_id_index");

                    b.ToTable("stock_valuation_layer", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockValuationLayerRevaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<Guid?>("AccountJournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_journal_id");

                    b.Property<decimal?>("AddedValue")
                        .HasColumnType("numeric")
                        .HasColumnName("added_value");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.HasKey("Id")
                        .HasName("stock_valuation_layer_revaluation_pkey");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountJournalId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantId");

                    b.ToTable("stock_valuation_layer_revaluation", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockWarehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<Guid?>("BuyPullId")
                        .HasColumnType("uuid")
                        .HasColumnName("buy_pull_id");

                    b.Property<bool?>("BuyToResupply")
                        .HasColumnType("boolean")
                        .HasColumnName("buy_to_resupply");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("CrossdockRouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("crossdock_route_id");

                    b.Property<Guid?>("DeliveryRouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("delivery_route_id");

                    b.Property<string>("DeliverySteps")
                        .HasColumnType("text")
                        .HasColumnName("delivery_steps");

                    b.Property<Guid?>("InTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("in_type_id");

                    b.Property<Guid?>("IntTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("int_type_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LotStockId")
                        .HasColumnType("uuid")
                        .HasColumnName("lot_stock_id");

                    b.Property<Guid?>("ManuTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("manu_type_id");

                    b.Property<Guid?>("ManufactureMtoPullId")
                        .HasColumnType("uuid")
                        .HasColumnName("manufacture_mto_pull_id");

                    b.Property<Guid?>("ManufacturePullId")
                        .HasColumnType("uuid")
                        .HasColumnName("manufacture_pull_id");

                    b.Property<string>("ManufactureSteps")
                        .HasColumnType("text")
                        .HasColumnName("manufacture_steps");

                    b.Property<bool?>("ManufactureToResupply")
                        .HasColumnType("boolean")
                        .HasColumnName("manufacture_to_resupply");

                    b.Property<Guid?>("MtoPullId")
                        .HasColumnType("uuid")
                        .HasColumnName("mto_pull_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("OutTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("out_type_id");

                    b.Property<Guid?>("PackTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("pack_type_id");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<Guid?>("PbmLocId")
                        .HasColumnType("uuid")
                        .HasColumnName("pbm_loc_id");

                    b.Property<Guid?>("PbmMtoPullId")
                        .HasColumnType("uuid")
                        .HasColumnName("pbm_mto_pull_id");

                    b.Property<Guid?>("PbmRouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("pbm_route_id");

                    b.Property<Guid?>("PbmTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("pbm_type_id");

                    b.Property<Guid?>("PickTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("pick_type_id");

                    b.Property<Guid?>("PosTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_type_id");

                    b.Property<Guid?>("ReceptionRouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("reception_route_id");

                    b.Property<string>("ReceptionSteps")
                        .HasColumnType("text")
                        .HasColumnName("reception_steps");

                    b.Property<Guid?>("ReturnTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("return_type_id");

                    b.Property<Guid?>("SamLocId")
                        .HasColumnType("uuid")
                        .HasColumnName("sam_loc_id");

                    b.Property<Guid?>("SamRuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("sam_rule_id");

                    b.Property<Guid?>("SamTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("sam_type_id");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("ViewLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("view_location_id");

                    b.Property<Guid?>("WhInputStockLocId")
                        .HasColumnType("uuid")
                        .HasColumnName("wh_input_stock_loc_id");

                    b.Property<Guid?>("WhOutputStockLocId")
                        .HasColumnType("uuid")
                        .HasColumnName("wh_output_stock_loc_id");

                    b.Property<Guid?>("WhPackStockLocId")
                        .HasColumnType("uuid")
                        .HasColumnName("wh_pack_stock_loc_id");

                    b.Property<Guid?>("WhQcStockLocId")
                        .HasColumnType("uuid")
                        .HasColumnName("wh_qc_stock_loc_id");

                    b.HasKey("Id")
                        .HasName("stock_warehouse_pkey");

                    b.HasIndex("BuyPullId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CrossdockRouteId");

                    b.HasIndex("DeliveryRouteId");

                    b.HasIndex("InTypeId");

                    b.HasIndex("IntTypeId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LotStockId");

                    b.HasIndex("ManuTypeId");

                    b.HasIndex("ManufactureMtoPullId");

                    b.HasIndex("ManufacturePullId");

                    b.HasIndex("MtoPullId");

                    b.HasIndex("OutTypeId");

                    b.HasIndex("PackTypeId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("PbmLocId");

                    b.HasIndex("PbmMtoPullId");

                    b.HasIndex("PbmRouteId");

                    b.HasIndex("PbmTypeId");

                    b.HasIndex("PickTypeId");

                    b.HasIndex("PosTypeId");

                    b.HasIndex("ReceptionRouteId");

                    b.HasIndex("ReturnTypeId");

                    b.HasIndex("SamLocId");

                    b.HasIndex("SamRuleId");

                    b.HasIndex("SamTypeId");

                    b.HasIndex("TenantId");

                    b.HasIndex("ViewLocationId");

                    b.HasIndex("WhInputStockLocId");

                    b.HasIndex("WhOutputStockLocId");

                    b.HasIndex("WhPackStockLocId");

                    b.HasIndex("WhQcStockLocId");

                    b.HasIndex(new[] { "Code", "TenantId" }, "stock_warehouse_warehouse_code_uniq")
                        .IsUnique()
                        .HasDatabaseName("stock_warehouse_warehouse_code_uniq");

                    b.HasIndex(new[] { "Name", "TenantId" }, "stock_warehouse_warehouse_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("stock_warehouse_warehouse_name_uniq");

                    b.ToTable("stock_warehouse", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockWarehouseOrderpoint", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<Guid?>("BomId")
                        .HasColumnType("uuid")
                        .HasColumnName("bom_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<double?>("ManufacturingVisibilityDays")
                        .HasColumnType("double precision")
                        .HasColumnName("manufacturing_visibility_days");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("ProductCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_category_id");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<decimal?>("ProductMaxQty")
                        .HasColumnType("numeric")
                        .HasColumnName("product_max_qty");

                    b.Property<decimal?>("ProductMinQty")
                        .HasColumnType("numeric")
                        .HasColumnName("product_min_qty");

                    b.Property<double?>("PurchaseVisibilityDays")
                        .HasColumnType("double precision")
                        .HasColumnName("purchase_visibility_days");

                    b.Property<decimal?>("QtyMultiple")
                        .HasColumnType("numeric")
                        .HasColumnName("qty_multiple");

                    b.Property<decimal?>("QtyToOrder")
                        .HasColumnType("numeric")
                        .HasColumnName("qty_to_order");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.Property<DateTime?>("SnoozedUntil")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("snoozed_until");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid")
                        .HasColumnName("supplier_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("Trigger")
                        .HasColumnType("text")
                        .HasColumnName("trigger");

                    b.Property<Guid?>("VendorId")
                        .HasColumnType("uuid")
                        .HasColumnName("vendor_id");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id")
                        .HasName("stock_warehouse_orderpoint_pkey");

                    b.HasIndex("BomId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GroupId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("RouteId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("VendorId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "TenantId" }, "stock_warehouse_orderpoint_company_id_index")
                        .HasDatabaseName("stock_warehouse_orderpoint_company_id_index");

                    b.HasIndex(new[] { "LocationId" }, "stock_warehouse_orderpoint_location_id_index")
                        .HasDatabaseName("stock_warehouse_orderpoint_location_id_index");

                    b.HasIndex(new[] { "ProductId", "LocationId", "TenantId" }, "stock_warehouse_orderpoint_product_location_check")
                        .IsUnique()
                        .HasDatabaseName("stock_warehouse_orderpoint_product_location_check");

                    b.ToTable("stock_warehouse_orderpoint", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockWarnInsufficientQtyRepair", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductUomName")
                        .HasColumnType("text")
                        .HasColumnName("product_uom_name");

                    b.Property<double?>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("RepairId")
                        .HasColumnType("uuid")
                        .HasColumnName("repair_id");

                    b.HasKey("Id")
                        .HasName("stock_warn_insufficient_qty_repair_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RepairId");

                    b.ToTable("stock_warn_insufficient_qty_repair", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockWarnInsufficientQtyScrap", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductUomName")
                        .HasColumnType("text")
                        .HasColumnName("product_uom_name");

                    b.Property<double?>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("ScrapId")
                        .HasColumnType("uuid")
                        .HasColumnName("scrap_id");

                    b.HasKey("Id")
                        .HasName("stock_warn_insufficient_qty_scrap_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ScrapId");

                    b.ToTable("stock_warn_insufficient_qty_scrap", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockWarnInsufficientQtyUnbuild", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductUomName")
                        .HasColumnType("text")
                        .HasColumnName("product_uom_name");

                    b.Property<double?>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("UnbuildId")
                        .HasColumnType("uuid")
                        .HasColumnName("unbuild_id");

                    b.HasKey("Id")
                        .HasName("stock_warn_insufficient_qty_unbuild_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnbuildId");

                    b.ToTable("stock_warn_insufficient_qty_unbuild", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ThemeIrAsset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Bundle")
                        .HasColumnType("text")
                        .HasColumnName("bundle");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Directive")
                        .HasColumnType("text")
                        .HasColumnName("directive");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.Property<string>("Target")
                        .HasColumnType("text")
                        .HasColumnName("target");

                    b.HasKey("Id")
                        .HasName("theme_ir_asset_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("theme_ir_asset", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ThemeIrAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("theme_ir_attachment_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("theme_ir_attachment", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ThemeIrUiView", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Arch")
                        .HasColumnType("jsonb")
                        .HasColumnName("arch");

                    b.Property<string>("ArchFs")
                        .HasColumnType("text")
                        .HasColumnName("arch_fs");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("CustomizeShow")
                        .HasColumnType("boolean")
                        .HasColumnName("customize_show");

                    b.Property<string>("InheritId")
                        .HasColumnType("text")
                        .HasColumnName("inherit_id");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Mode")
                        .HasColumnType("text")
                        .HasColumnName("mode");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("Priority")
                        .HasColumnType("bigint")
                        .HasColumnName("priority");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("theme_ir_ui_view_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("theme_ir_ui_view", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ThemeWebsiteMenu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("MegaMenuClasses")
                        .HasColumnType("text")
                        .HasColumnName("mega_menu_classes");

                    b.Property<string>("MegaMenuContent")
                        .HasColumnType("text")
                        .HasColumnName("mega_menu_content");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<bool?>("NewWindow")
                        .HasColumnType("boolean")
                        .HasColumnName("new_window");

                    b.Property<long?>("PageId")
                        .HasColumnType("bigint")
                        .HasColumnName("page_id");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<bool?>("UseMainMenuAsParent")
                        .HasColumnType("boolean")
                        .HasColumnName("use_main_menu_as_parent");

                    b.HasKey("Id")
                        .HasName("theme_website_menu_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PageId");

                    b.HasIndex(new[] { "ParentId" }, "theme_website_menu_parent_id_index")
                        .HasDatabaseName("theme_website_menu_parent_id_index");

                    b.ToTable("theme_website_menu", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ThemeWebsitePage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("FooterVisible")
                        .HasColumnType("boolean")
                        .HasColumnName("footer_visible");

                    b.Property<string>("HeaderColor")
                        .HasColumnType("text")
                        .HasColumnName("header_color");

                    b.Property<bool?>("HeaderOverlay")
                        .HasColumnType("boolean")
                        .HasColumnName("header_overlay");

                    b.Property<bool?>("HeaderVisible")
                        .HasColumnType("boolean")
                        .HasColumnName("header_visible");

                    b.Property<bool?>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<long?>("ViewId")
                        .HasColumnType("bigint")
                        .HasColumnName("view_id");

                    b.Property<bool?>("WebsiteIndexed")
                        .HasColumnType("boolean")
                        .HasColumnName("website_indexed");

                    b.HasKey("Id")
                        .HasName("theme_website_page_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ViewId");

                    b.ToTable("theme_website_page", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.UomCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("IsPosGroupable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_pos_groupable");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("uom_category_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("uom_category", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.UomUom", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<decimal?>("Factor")
                        .HasColumnType("numeric")
                        .HasColumnName("factor");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<decimal?>("Rounding")
                        .HasColumnType("numeric")
                        .HasColumnName("rounding");

                    b.Property<string>("UomType")
                        .HasColumnType("text")
                        .HasColumnName("uom_type");

                    b.HasKey("Id")
                        .HasName("uom_uom_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("uom_uom", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.UtmCampaign", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("IsAutoCampaign")
                        .HasColumnType("boolean")
                        .HasColumnName("is_auto_campaign");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("StageId")
                        .HasColumnType("bigint")
                        .HasColumnName("stage_id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<string>("Title")
                        .HasColumnType("jsonb")
                        .HasColumnName("title");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("utm_campaign_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("StageId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Name" }, "utm_campaign_unique_name")
                        .IsUnique()
                        .HasDatabaseName("utm_campaign_unique_name");

                    b.ToTable("utm_campaign", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.UtmMedium", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("utm_medium_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Name" }, "utm_medium_unique_name")
                        .IsUnique()
                        .HasDatabaseName("utm_medium_unique_name");

                    b.ToTable("utm_medium", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.UtmSource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("utm_source_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Name" }, "utm_source_unique_name")
                        .IsUnique()
                        .HasDatabaseName("utm_source_unique_name");

                    b.ToTable("utm_source", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.UtmStage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigserial")
                        .HasColumnName("sequence");

                    b.HasKey("Id")
                        .HasName("utm_stage_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("utm_stage", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.UtmTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("Color")
                        .HasColumnType("bigint")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("utm_tag_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "Name" }, "utm_tag_name_uniq")
                        .IsUnique()
                        .HasDatabaseName("utm_tag_name_uniq");

                    b.ToTable("utm_tag", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.ValidateAccountMove", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<bool?>("ForcePost")
                        .HasColumnType("boolean")
                        .HasColumnName("force_post");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("validate_account_move_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("validate_account_move", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebEditorConverterTest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<byte[]>("Binary")
                        .HasColumnType("bytea")
                        .HasColumnName("binary");

                    b.Property<string>("Char")
                        .HasColumnType("text")
                        .HasColumnName("char");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("datetime");

                    b.Property<double?>("Float")
                        .HasColumnType("double precision")
                        .HasColumnName("float");

                    b.Property<string>("Html")
                        .HasColumnType("text")
                        .HasColumnName("html");

                    b.Property<long?>("Integer")
                        .HasColumnType("bigint")
                        .HasColumnName("integer");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("Many2one")
                        .HasColumnType("uuid")
                        .HasColumnName("many2one");

                    b.Property<decimal?>("Numeric")
                        .HasColumnType("numeric")
                        .HasColumnName("numeric");

                    b.Property<string>("SelectionStr")
                        .HasColumnType("text")
                        .HasColumnName("selection_str");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("web_editor_converter_test_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("Many2one");

                    b.ToTable("web_editor_converter_test", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebEditorConverterTestSub", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("web_editor_converter_test_sub_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("web_editor_converter_test_sub", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebTourTour", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("web_tour_tour_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("web_tour_tour", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.Website", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccountOnCheckout")
                        .HasColumnType("text")
                        .HasColumnName("account_on_checkout");

                    b.Property<string>("AddToCartAction")
                        .HasColumnType("text")
                        .HasColumnName("add_to_cart_action");

                    b.Property<string>("AuthSignupUninvited")
                        .HasColumnType("text")
                        .HasColumnName("auth_signup_uninvited");

                    b.Property<bool?>("AutoRedirectLang")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_redirect_lang");

                    b.Property<double?>("CartAbandonedDelay")
                        .HasColumnType("double precision")
                        .HasColumnName("cart_abandoned_delay");

                    b.Property<Guid?>("CartRecoveryMailTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("cart_recovery_mail_template_id");

                    b.Property<bool?>("CdnActivated")
                        .HasColumnType("boolean")
                        .HasColumnName("cdn_activated");

                    b.Property<string>("CdnFilters")
                        .HasColumnType("text")
                        .HasColumnName("cdn_filters");

                    b.Property<string>("CdnUrl")
                        .HasColumnType("text")
                        .HasColumnName("cdn_url");

                    b.Property<bool?>("ConfiguratorDone")
                        .HasColumnType("boolean")
                        .HasColumnName("configurator_done");

                    b.Property<string>("ContactUsButtonUrl")
                        .HasColumnType("jsonb")
                        .HasColumnName("contact_us_button_url");

                    b.Property<bool?>("CookiesBar")
                        .HasColumnType("boolean")
                        .HasColumnName("cookies_bar");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("CrmDefaultTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("crm_default_team_id");

                    b.Property<Guid?>("CrmDefaultUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("crm_default_user_id");

                    b.Property<string>("CustomCodeFooter")
                        .HasColumnType("text")
                        .HasColumnName("custom_code_footer");

                    b.Property<string>("CustomCodeHead")
                        .HasColumnType("text")
                        .HasColumnName("custom_code_head");

                    b.Property<long?>("DefaultLangId")
                        .HasColumnType("bigint")
                        .HasColumnName("default_lang_id");

                    b.Property<string>("Domain")
                        .HasColumnType("text")
                        .HasColumnName("domain");

                    b.Property<bool?>("EnabledPortalReorderButton")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled_portal_reorder_button");

                    b.Property<string>("GoogleAnalyticsKey")
                        .HasColumnType("text")
                        .HasColumnName("google_analytics_key");

                    b.Property<string>("GoogleMapsApiKey")
                        .HasColumnType("text")
                        .HasColumnName("google_maps_api_key");

                    b.Property<string>("GoogleSearchConsole")
                        .HasColumnType("text")
                        .HasColumnName("google_search_console");

                    b.Property<bool?>("HasSocialDefaultImage")
                        .HasColumnType("boolean")
                        .HasColumnName("has_social_default_image");

                    b.Property<string>("HomepageUrl")
                        .HasColumnType("text")
                        .HasColumnName("homepage_url");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PlausibleSharedKey")
                        .HasColumnType("text")
                        .HasColumnName("plausible_shared_key");

                    b.Property<string>("PlausibleSite")
                        .HasColumnType("text")
                        .HasColumnName("plausible_site");

                    b.Property<bool?>("PreventZeroPriceSale")
                        .HasColumnType("boolean")
                        .HasColumnName("prevent_zero_price_sale");

                    b.Property<string>("PreventZeroPriceSaleText")
                        .HasColumnType("jsonb")
                        .HasColumnName("prevent_zero_price_sale_text");

                    b.Property<long?>("ProductPageGridColumns")
                        .HasColumnType("bigint")
                        .HasColumnName("product_page_grid_columns");

                    b.Property<string>("ProductPageImageLayout")
                        .HasColumnType("text")
                        .HasColumnName("product_page_image_layout");

                    b.Property<string>("ProductPageImageSpacing")
                        .HasColumnType("text")
                        .HasColumnName("product_page_image_spacing");

                    b.Property<string>("ProductPageImageWidth")
                        .HasColumnType("text")
                        .HasColumnName("product_page_image_width");

                    b.Property<string>("RobotsTxt")
                        .HasColumnType("text")
                        .HasColumnName("robots_txt");

                    b.Property<Guid?>("SalespersonId")
                        .HasColumnType("uuid")
                        .HasColumnName("salesperson_id");

                    b.Property<Guid?>("SalesteamId")
                        .HasColumnType("uuid")
                        .HasColumnName("salesteam_id");

                    b.Property<bool?>("SendAbandonedCartEmail")
                        .HasColumnType("boolean")
                        .HasColumnName("send_abandoned_cart_email");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<string>("ShopDefaultSort")
                        .HasColumnType("text")
                        .HasColumnName("shop_default_sort");

                    b.Property<long?>("ShopPpg")
                        .HasColumnType("bigint")
                        .HasColumnName("shop_ppg");

                    b.Property<long?>("ShopPpr")
                        .HasColumnType("bigint")
                        .HasColumnName("shop_ppr");

                    b.Property<string>("SocialFacebook")
                        .HasColumnType("text")
                        .HasColumnName("social_facebook");

                    b.Property<string>("SocialGithub")
                        .HasColumnType("text")
                        .HasColumnName("social_github");

                    b.Property<string>("SocialInstagram")
                        .HasColumnType("text")
                        .HasColumnName("social_instagram");

                    b.Property<string>("SocialLinkedin")
                        .HasColumnType("text")
                        .HasColumnName("social_linkedin");

                    b.Property<string>("SocialTwitter")
                        .HasColumnType("text")
                        .HasColumnName("social_twitter");

                    b.Property<string>("SocialYoutube")
                        .HasColumnType("text")
                        .HasColumnName("social_youtube");

                    b.Property<bool?>("SpecificUserAccount")
                        .HasColumnType("boolean")
                        .HasColumnName("specific_user_account");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("ThemeId")
                        .HasColumnType("uuid")
                        .HasColumnName("theme_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id")
                        .HasName("website_pkey");

                    b.HasIndex("CartRecoveryMailTemplateId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CrmDefaultTeamId");

                    b.HasIndex("CrmDefaultUserId");

                    b.HasIndex("DefaultLangId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("SalespersonId");

                    b.HasIndex("SalesteamId");

                    b.HasIndex("TenantId");

                    b.HasIndex("ThemeId");

                    b.HasIndex("UserId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex(new[] { "Domain" }, "website_domain_unique")
                        .IsUnique()
                        .HasDatabaseName("website_domain_unique");

                    b.ToTable("website", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteBaseUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("website_base_unit_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("website_base_unit", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteConfiguratorFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("Description")
                        .HasColumnType("jsonb")
                        .HasColumnName("description");

                    b.Property<string>("FeatureUrl")
                        .HasColumnType("text")
                        .HasColumnName("feature_url");

                    b.Property<string>("IapPageCode")
                        .HasColumnType("text")
                        .HasColumnName("iap_page_code");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<bool?>("MenuCompany")
                        .HasColumnType("boolean")
                        .HasColumnName("menu_company");

                    b.Property<long?>("MenuSequence")
                        .HasColumnType("bigint")
                        .HasColumnName("menu_sequence");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("module_id");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<Guid?>("PageViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("page_view_id");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<string>("WebsiteConfigPreselection")
                        .HasColumnType("text")
                        .HasColumnName("website_config_preselection");

                    b.HasKey("Id")
                        .HasName("website_configurator_feature_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("PageViewId");

                    b.ToTable("website_configurator_feature", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("MegaMenuClasses")
                        .HasColumnType("text")
                        .HasColumnName("mega_menu_classes");

                    b.Property<string>("MegaMenuContent")
                        .HasColumnType("jsonb")
                        .HasColumnName("mega_menu_content");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<bool?>("NewWindow")
                        .HasColumnType("boolean")
                        .HasColumnName("new_window");

                    b.Property<Guid?>("PageId")
                        .HasColumnType("uuid")
                        .HasColumnName("page_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("ParentPath")
                        .HasColumnType("text")
                        .HasColumnName("parent_path");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<long?>("ThemeTemplateId")
                        .HasColumnType("bigint")
                        .HasColumnName("theme_template_id");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<Guid?>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.HasKey("Id")
                        .HasName("website_menu_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("PageId");

                    b.HasIndex("ThemeTemplateId");

                    b.HasIndex("WebsiteId");

                    b.HasIndex(new[] { "ParentId" }, "website_menu_parent_id_index")
                        .HasDatabaseName("website_menu_parent_id_index");

                    b.HasIndex(new[] { "ParentPath" }, "website_menu_parent_path_index")
                        .HasDatabaseName("website_menu_parent_path_index");

                    b.ToTable("website_menu", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsitePage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("DatePublish")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_publish");

                    b.Property<bool?>("FooterVisible")
                        .HasColumnType("boolean")
                        .HasColumnName("footer_visible");

                    b.Property<string>("HeaderColor")
                        .HasColumnType("text")
                        .HasColumnName("header_color");

                    b.Property<bool?>("HeaderOverlay")
                        .HasColumnType("boolean")
                        .HasColumnName("header_overlay");

                    b.Property<bool?>("HeaderVisible")
                        .HasColumnType("boolean")
                        .HasColumnName("header_visible");

                    b.Property<bool?>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("ThemeTemplateId")
                        .HasColumnType("bigint")
                        .HasColumnName("theme_template_id");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<Guid?>("ViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("view_id");

                    b.Property<Guid?>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.Property<bool?>("WebsiteIndexed")
                        .HasColumnType("boolean")
                        .HasColumnName("website_indexed");

                    b.HasKey("Id")
                        .HasName("website_page_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("ThemeTemplateId");

                    b.HasIndex("ViewId");

                    b.HasIndex(new[] { "IsPublished" }, "website_page_is_published_index")
                        .HasDatabaseName("website_page_is_published_index");

                    b.HasIndex(new[] { "WebsiteId" }, "website_page_website_id_index")
                        .HasDatabaseName("website_page_website_id_index");

                    b.ToTable("website_page", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteRewrite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("RedirectType")
                        .HasColumnType("text")
                        .HasColumnName("redirect_type");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<string>("UrlFrom")
                        .HasColumnType("text")
                        .HasColumnName("url_from");

                    b.Property<string>("UrlTo")
                        .HasColumnType("text")
                        .HasColumnName("url_to");

                    b.Property<Guid?>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.HasKey("Id")
                        .HasName("website_rewrite_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("RouteId");

                    b.HasIndex(new[] { "UrlFrom" }, "website_rewrite_url_from_index")
                        .HasDatabaseName("website_rewrite_url_from_index");

                    b.HasIndex(new[] { "WebsiteId" }, "website_rewrite_website_id_index")
                        .HasDatabaseName("website_rewrite_website_id_index");

                    b.ToTable("website_rewrite", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteRobot", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.HasKey("Id")
                        .HasName("website_robots_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("website_robots", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.HasKey("Id")
                        .HasName("website_route_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.ToTable("website_route", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteSaleExtraField", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<Guid?>("FieldId")
                        .HasColumnType("uuid")
                        .HasColumnName("field_id");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("sequence");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Sequence"));

                    b.Property<Guid?>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.HasKey("Id")
                        .HasName("website_sale_extra_field_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FieldId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("WebsiteId");

                    b.ToTable("website_sale_extra_field", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteSnippetFilter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("ActionServerId")
                        .HasColumnType("uuid")
                        .HasColumnName("action_server_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<string>("FieldNames")
                        .HasColumnType("text")
                        .HasColumnName("field_names");

                    b.Property<Guid?>("FilterId")
                        .HasColumnType("uuid")
                        .HasColumnName("filter_id");

                    b.Property<bool?>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<long?>("Limit")
                        .HasColumnType("bigint")
                        .HasColumnName("limit");

                    b.Property<string>("Name")
                        .HasColumnType("jsonb")
                        .HasColumnName("name");

                    b.Property<bool?>("ProductCrossSelling")
                        .HasColumnType("boolean")
                        .HasColumnName("product_cross_selling");

                    b.Property<Guid?>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.HasKey("Id")
                        .HasName("website_snippet_filter_pkey");

                    b.HasIndex("ActionServerId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FilterId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex(new[] { "IsPublished" }, "website_snippet_filter_is_published_index")
                        .HasDatabaseName("website_snippet_filter_is_published_index");

                    b.HasIndex(new[] { "WebsiteId" }, "website_snippet_filter_website_id_index")
                        .HasDatabaseName("website_snippet_filter_website_id_index");

                    b.ToTable("website_snippet_filter", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteTrack", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<Guid?>("PageId")
                        .HasColumnType("uuid")
                        .HasColumnName("page_id");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<DateTime?>("VisitDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("visit_datetime");

                    b.Property<Guid?>("VisitorId")
                        .HasColumnType("uuid")
                        .HasColumnName("visitor_id");

                    b.HasKey("Id")
                        .HasName("website_track_pkey");

                    b.HasIndex(new[] { "PageId" }, "website_track_page_id_index")
                        .HasDatabaseName("website_track_page_id_index");

                    b.HasIndex(new[] { "ProductId" }, "website_track_product_id_index")
                        .HasDatabaseName("website_track_product_id_index")
                        .HasFilter("(product_id IS NOT NULL)");

                    b.HasIndex(new[] { "Url" }, "website_track_url_index")
                        .HasDatabaseName("website_track_url_index");

                    b.HasIndex(new[] { "VisitorId" }, "website_track_visitor_id_index")
                        .HasDatabaseName("website_track_visitor_id_index");

                    b.ToTable("website_track", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteVisitor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<long?>("LangId")
                        .HasColumnType("bigint")
                        .HasColumnName("lang_id");

                    b.Property<DateTime?>("LastConnectionDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_connection_datetime");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.Property<string>("Timezone")
                        .HasColumnType("text")
                        .HasColumnName("timezone");

                    b.Property<long?>("VisitCount")
                        .HasColumnType("bigint")
                        .HasColumnName("visit_count");

                    b.Property<Guid?>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.HasKey("Id")
                        .HasName("website_visitor_pkey");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LangId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("WebsiteId");

                    b.HasIndex(new[] { "AccessToken" }, "website_visitor_access_token_unique")
                        .IsUnique()
                        .HasDatabaseName("website_visitor_access_token_unique");

                    b.HasIndex(new[] { "PartnerId" }, "website_visitor_partner_id_index")
                        .HasDatabaseName("website_visitor_partner_id_index")
                        .HasFilter("(partner_id IS NOT NULL)");

                    b.ToTable("website_visitor", (string)null);
                });

            modelBuilder.Entity("Bamboo.Core.Models.WizardIrModelMenuCreate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("next_uuid()");

                    b.Property<DateTime?>("CreationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("create_uid");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("write_date");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("write_uid");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("uuid")
                        .HasColumnName("menu_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("wizard_ir_model_menu_create_pkey");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastModifierId");

                    b.HasIndex("MenuId");

                    b.ToTable("wizard_ir_model_menu_create", (string)null);
                });

            modelBuilder.Entity("BaseLanguageInstallWebsiteRel", b =>
                {
                    b.Property<Guid>("BaseLanguageInstallId")
                        .HasColumnType("uuid")
                        .HasColumnName("base_language_install_id");

                    b.Property<Guid>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.HasKey("BaseLanguageInstallId", "WebsiteId")
                        .HasName("base_language_install_website_rel_pkey");

                    b.HasIndex(new[] { "WebsiteId", "BaseLanguageInstallId" }, "base_language_install_website_website_id_base_language_inst_idx")
                        .HasDatabaseName("base_language_install_website_website_id_base_language_inst_idx");

                    b.ToTable("base_language_install_website_rel", (string)null);
                });

            modelBuilder.Entity("BasePartnerMergeAutomaticWizardResPartnerRel", b =>
                {
                    b.Property<Guid>("BasePartnerMergeAutomaticWizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("base_partner_merge_automatic_wizard_id");

                    b.Property<Guid>("ResPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_partner_id");

                    b.HasKey("BasePartnerMergeAutomaticWizardId", "ResPartnerId")
                        .HasName("base_partner_merge_automatic_wizard_res_partner_rel_pkey");

                    b.HasIndex(new[] { "ResPartnerId", "BasePartnerMergeAutomaticWizardId" }, "base_partner_merge_automatic__res_partner_id_base_partner_m_idx")
                        .HasDatabaseName("base_partner_merge_automatic__res_partner_id_base_partner_m_idx");

                    b.ToTable("base_partner_merge_automatic_wizard_res_partner_rel", (string)null);
                });

            modelBuilder.Entity("CalendarAlarmCalendarEventRel", b =>
                {
                    b.Property<Guid>("CalendarEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("calendar_event_id");

                    b.Property<Guid>("CalendarAlarmId")
                        .HasColumnType("uuid")
                        .HasColumnName("calendar_alarm_id");

                    b.HasKey("CalendarEventId", "CalendarAlarmId")
                        .HasName("calendar_alarm_calendar_event_rel_pkey");

                    b.HasIndex(new[] { "CalendarAlarmId", "CalendarEventId" }, "calendar_alarm_calendar_event_calendar_alarm_id_calendar_ev_idx")
                        .HasDatabaseName("calendar_alarm_calendar_event_calendar_alarm_id_calendar_ev_idx");

                    b.ToTable("calendar_alarm_calendar_event_rel", (string)null);
                });

            modelBuilder.Entity("CalendarEventResPartnerRel", b =>
                {
                    b.Property<Guid>("ResPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_partner_id");

                    b.Property<Guid>("CalendarEventId")
                        .HasColumnType("uuid")
                        .HasColumnName("calendar_event_id");

                    b.HasKey("ResPartnerId", "CalendarEventId")
                        .HasName("calendar_event_res_partner_rel_pkey");

                    b.HasIndex(new[] { "CalendarEventId", "ResPartnerId" }, "calendar_event_res_partner_re_calendar_event_id_res_partner_idx")
                        .HasDatabaseName("calendar_event_res_partner_re_calendar_event_id_res_partner_idx");

                    b.ToTable("calendar_event_res_partner_rel", (string)null);
                });

            modelBuilder.Entity("CrmConvertLeadMassLeadRel", b =>
                {
                    b.Property<Guid>("CrmLead2opportunityPartnerMassId")
                        .HasColumnType("uuid")
                        .HasColumnName("crm_lead2opportunity_partner_mass_id");

                    b.Property<Guid>("CrmLeadId")
                        .HasColumnType("uuid")
                        .HasColumnName("crm_lead_id");

                    b.HasKey("CrmLead2opportunityPartnerMassId", "CrmLeadId")
                        .HasName("crm_convert_lead_mass_lead_rel_pkey");

                    b.HasIndex(new[] { "CrmLeadId", "CrmLead2opportunityPartnerMassId" }, "crm_convert_lead_mass_lead_re_crm_lead_id_crm_lead2opportun_idx")
                        .HasDatabaseName("crm_convert_lead_mass_lead_re_crm_lead_id_crm_lead2opportun_idx");

                    b.ToTable("crm_convert_lead_mass_lead_rel", (string)null);
                });

            modelBuilder.Entity("CrmIapLeadIndustryCrmIapLeadMiningRequestRel", b =>
                {
                    b.Property<Guid>("CrmIapLeadMiningRequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("crm_iap_lead_mining_request_id");

                    b.Property<long>("CrmIapLeadIndustryId")
                        .HasColumnType("bigint")
                        .HasColumnName("crm_iap_lead_industry_id");

                    b.HasKey("CrmIapLeadMiningRequestId", "CrmIapLeadIndustryId")
                        .HasName("crm_iap_lead_industry_crm_iap_lead_mining_request_rel_pkey");

                    b.HasIndex(new[] { "CrmIapLeadIndustryId", "CrmIapLeadMiningRequestId" }, "crm_iap_lead_industry_crm_iap_crm_iap_lead_industry_id_crm__idx")
                        .HasDatabaseName("crm_iap_lead_industry_crm_iap_crm_iap_lead_industry_id_crm__idx");

                    b.ToTable("crm_iap_lead_industry_crm_iap_lead_mining_request_rel", (string)null);
                });

            modelBuilder.Entity("CrmIapLeadMiningRequestCrmIapLeadRoleRel", b =>
                {
                    b.Property<Guid>("CrmIapLeadMiningRequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("crm_iap_lead_mining_request_id");

                    b.Property<long>("CrmIapLeadRoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("crm_iap_lead_role_id");

                    b.HasKey("CrmIapLeadMiningRequestId", "CrmIapLeadRoleId")
                        .HasName("crm_iap_lead_mining_request_crm_iap_lead_role_rel_pkey");

                    b.HasIndex(new[] { "CrmIapLeadRoleId", "CrmIapLeadMiningRequestId" }, "crm_iap_lead_mining_request_c_crm_iap_lead_role_id_crm_iap__idx")
                        .HasDatabaseName("crm_iap_lead_mining_request_c_crm_iap_lead_role_id_crm_iap__idx");

                    b.ToTable("crm_iap_lead_mining_request_crm_iap_lead_role_rel", (string)null);
                });

            modelBuilder.Entity("CrmIapLeadMiningRequestCrmTagRel", b =>
                {
                    b.Property<Guid>("CrmIapLeadMiningRequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("crm_iap_lead_mining_request_id");

                    b.Property<long>("CrmTagId")
                        .HasColumnType("bigint")
                        .HasColumnName("crm_tag_id");

                    b.HasKey("CrmIapLeadMiningRequestId", "CrmTagId")
                        .HasName("crm_iap_lead_mining_request_crm_tag_rel_pkey");

                    b.HasIndex(new[] { "CrmTagId", "CrmIapLeadMiningRequestId" }, "crm_iap_lead_mining_request_c_crm_tag_id_crm_iap_lead_minin_idx")
                        .HasDatabaseName("crm_iap_lead_mining_request_c_crm_tag_id_crm_iap_lead_minin_idx");

                    b.ToTable("crm_iap_lead_mining_request_crm_tag_rel", (string)null);
                });

            modelBuilder.Entity("CrmIapLeadMiningRequestResCountryRel", b =>
                {
                    b.Property<Guid>("CrmIapLeadMiningRequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("crm_iap_lead_mining_request_id");

                    b.Property<long>("ResCountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("res_country_id");

                    b.HasKey("CrmIapLeadMiningRequestId", "ResCountryId")
                        .HasName("crm_iap_lead_mining_request_res_country_rel_pkey");

                    b.HasIndex(new[] { "ResCountryId", "CrmIapLeadMiningRequestId" }, "crm_iap_lead_mining_request_r_res_country_id_crm_iap_lead_m_idx")
                        .HasDatabaseName("crm_iap_lead_mining_request_r_res_country_id_crm_iap_lead_m_idx");

                    b.ToTable("crm_iap_lead_mining_request_res_country_rel", (string)null);
                });

            modelBuilder.Entity("CrmIapLeadMiningRequestResCountryStateRel", b =>
                {
                    b.Property<Guid>("CrmIapLeadMiningRequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("crm_iap_lead_mining_request_id");

                    b.Property<long>("ResCountryStateId")
                        .HasColumnType("bigint")
                        .HasColumnName("res_country_state_id");

                    b.HasKey("CrmIapLeadMiningRequestId", "ResCountryStateId")
                        .HasName("crm_iap_lead_mining_request_res_country_state_rel_pkey");

                    b.HasIndex(new[] { "ResCountryStateId", "CrmIapLeadMiningRequestId" }, "crm_iap_lead_mining_request_r_res_country_state_id_crm_iap__idx")
                        .HasDatabaseName("crm_iap_lead_mining_request_r_res_country_state_id_crm_iap__idx");

                    b.ToTable("crm_iap_lead_mining_request_res_country_state_rel", (string)null);
                });

            modelBuilder.Entity("CrmLead2opportunityPartnerMassResUsersRel", b =>
                {
                    b.Property<Guid>("CrmLead2opportunityPartnerMassId")
                        .HasColumnType("uuid")
                        .HasColumnName("crm_lead2opportunity_partner_mass_id");

                    b.Property<Guid>("ResUsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_users_id");

                    b.HasKey("CrmLead2opportunityPartnerMassId", "ResUsersId")
                        .HasName("crm_lead2opportunity_partner_mass_res_users_rel_pkey");

                    b.HasIndex(new[] { "ResUsersId", "CrmLead2opportunityPartnerMassId" }, "crm_lead2opportunity_partner__res_users_id_crm_lead2opportu_idx")
                        .HasDatabaseName("crm_lead2opportunity_partner__res_users_id_crm_lead2opportu_idx");

                    b.ToTable("crm_lead2opportunity_partner_mass_res_users_rel", (string)null);
                });

            modelBuilder.Entity("CrmLeadCrmLead2opportunityPartnerMassRel", b =>
                {
                    b.Property<Guid>("CrmLead2opportunityPartnerMassId")
                        .HasColumnType("uuid")
                        .HasColumnName("crm_lead2opportunity_partner_mass_id");

                    b.Property<Guid>("CrmLeadId")
                        .HasColumnType("uuid")
                        .HasColumnName("crm_lead_id");

                    b.HasKey("CrmLead2opportunityPartnerMassId", "CrmLeadId")
                        .HasName("crm_lead_crm_lead2opportunity_partner_mass_rel_pkey");

                    b.HasIndex(new[] { "CrmLeadId", "CrmLead2opportunityPartnerMassId" }, "crm_lead_crm_lead2opportunity_crm_lead_id_crm_lead2opportu_idx1")
                        .HasDatabaseName("crm_lead_crm_lead2opportunity_crm_lead_id_crm_lead2opportu_idx1");

                    b.ToTable("crm_lead_crm_lead2opportunity_partner_mass_rel", (string)null);
                });

            modelBuilder.Entity("CrmLeadCrmLead2opportunityPartnerRel", b =>
                {
                    b.Property<Guid>("CrmLead2opportunityPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("crm_lead2opportunity_partner_id");

                    b.Property<Guid>("CrmLeadId")
                        .HasColumnType("uuid")
                        .HasColumnName("crm_lead_id");

                    b.HasKey("CrmLead2opportunityPartnerId", "CrmLeadId")
                        .HasName("crm_lead_crm_lead2opportunity_partner_rel_pkey");

                    b.HasIndex(new[] { "CrmLeadId", "CrmLead2opportunityPartnerId" }, "crm_lead_crm_lead2opportunity_crm_lead_id_crm_lead2opportun_idx")
                        .HasDatabaseName("crm_lead_crm_lead2opportunity_crm_lead_id_crm_lead2opportun_idx");

                    b.ToTable("crm_lead_crm_lead2opportunity_partner_rel", (string)null);
                });

            modelBuilder.Entity("CrmLeadPlsUpdateCrmLeadScoringFrequencyFieldRel", b =>
                {
                    b.Property<Guid>("CrmLeadPlsUpdateId")
                        .HasColumnType("uuid")
                        .HasColumnName("crm_lead_pls_update_id");

                    b.Property<Guid>("CrmLeadScoringFrequencyFieldId")
                        .HasColumnType("uuid")
                        .HasColumnName("crm_lead_scoring_frequency_field_id");

                    b.HasKey("CrmLeadPlsUpdateId", "CrmLeadScoringFrequencyFieldId")
                        .HasName("crm_lead_pls_update_crm_lead_scoring_frequency_field_rel_pkey");

                    b.HasIndex(new[] { "CrmLeadScoringFrequencyFieldId", "CrmLeadPlsUpdateId" }, "crm_lead_pls_update_crm_lead__crm_lead_scoring_frequency_fi_idx")
                        .HasDatabaseName("crm_lead_pls_update_crm_lead__crm_lead_scoring_frequency_fi_idx");

                    b.ToTable("crm_lead_pls_update_crm_lead_scoring_frequency_field_rel", (string)null);
                });

            modelBuilder.Entity("CrmLeadWebsiteVisitorRel", b =>
                {
                    b.Property<Guid>("CrmLeadId")
                        .HasColumnType("uuid")
                        .HasColumnName("crm_lead_id");

                    b.Property<Guid>("WebsiteVisitorId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_visitor_id");

                    b.HasKey("CrmLeadId", "WebsiteVisitorId")
                        .HasName("crm_lead_website_visitor_rel_pkey");

                    b.HasIndex(new[] { "WebsiteVisitorId", "CrmLeadId" }, "crm_lead_website_visitor_rel_website_visitor_id_crm_lead_id_idx")
                        .HasDatabaseName("crm_lead_website_visitor_rel_website_visitor_id_crm_lead_id_idx");

                    b.ToTable("crm_lead_website_visitor_rel", (string)null);
                });

            modelBuilder.Entity("CrmTagRel", b =>
                {
                    b.Property<Guid>("LeadId")
                        .HasColumnType("uuid")
                        .HasColumnName("lead_id");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.HasKey("LeadId", "TagId")
                        .HasName("crm_tag_rel_pkey");

                    b.HasIndex(new[] { "TagId", "LeadId" }, "crm_tag_rel_tag_id_lead_id_idx")
                        .HasDatabaseName("crm_tag_rel_tag_id_lead_id_idx");

                    b.ToTable("crm_tag_rel", (string)null);
                });

            modelBuilder.Entity("DigestDigestResUsersRel", b =>
                {
                    b.Property<Guid>("DigestDigestId")
                        .HasColumnType("uuid")
                        .HasColumnName("digest_digest_id");

                    b.Property<Guid>("ResUsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_users_id");

                    b.HasKey("DigestDigestId", "ResUsersId")
                        .HasName("digest_digest_res_users_rel_pkey");

                    b.HasIndex(new[] { "ResUsersId", "DigestDigestId" }, "digest_digest_res_users_rel_res_users_id_digest_digest_id_idx")
                        .HasDatabaseName("digest_digest_res_users_rel_res_users_id_digest_digest_id_idx");

                    b.ToTable("digest_digest_res_users_rel", (string)null);
                });

            modelBuilder.Entity("DigestTipResUsersRel", b =>
                {
                    b.Property<Guid>("DigestTipId")
                        .HasColumnType("uuid")
                        .HasColumnName("digest_tip_id");

                    b.Property<Guid>("ResUsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_users_id");

                    b.HasKey("DigestTipId", "ResUsersId")
                        .HasName("digest_tip_res_users_rel_pkey");

                    b.HasIndex(new[] { "ResUsersId", "DigestTipId" }, "digest_tip_res_users_rel_res_users_id_digest_tip_id_idx")
                        .HasDatabaseName("digest_tip_res_users_rel_res_users_id_digest_tip_id_idx");

                    b.ToTable("digest_tip_res_users_rel", (string)null);
                });

            modelBuilder.Entity("EmailTemplateAttachmentRel", b =>
                {
                    b.Property<Guid>("EmailTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("email_template_id");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("attachment_id");

                    b.HasKey("EmailTemplateId", "AttachmentId")
                        .HasName("email_template_attachment_rel_pkey");

                    b.HasIndex(new[] { "AttachmentId", "EmailTemplateId" }, "email_template_attachment_rel_attachment_id_email_template__idx")
                        .HasDatabaseName("email_template_attachment_rel_attachment_id_email_template__idx");

                    b.ToTable("email_template_attachment_rel", (string)null);
                });

            modelBuilder.Entity("EmployeeCategoryRel", b =>
                {
                    b.Property<Guid>("EmpId")
                        .HasColumnType("uuid")
                        .HasColumnName("emp_id");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.HasKey("EmpId", "CategoryId")
                        .HasName("employee_category_rel_pkey");

                    b.HasIndex(new[] { "CategoryId", "EmpId" }, "employee_category_rel_category_id_emp_id_idx")
                        .HasDatabaseName("employee_category_rel_category_id_emp_id_idx");

                    b.ToTable("employee_category_rel", (string)null);
                });

            modelBuilder.Entity("ExpenseTax", b =>
                {
                    b.Property<Guid>("ExpenseId")
                        .HasColumnType("uuid")
                        .HasColumnName("expense_id");

                    b.Property<Guid>("TaxId")
                        .HasColumnType("uuid")
                        .HasColumnName("tax_id");

                    b.HasKey("ExpenseId", "TaxId")
                        .HasName("expense_tax_pkey");

                    b.HasIndex(new[] { "TaxId", "ExpenseId" }, "expense_tax_tax_id_expense_id_idx")
                        .HasDatabaseName("expense_tax_tax_id_expense_id_idx");

                    b.ToTable("expense_tax", (string)null);
                });

            modelBuilder.Entity("FleetServiceTypeFleetVehicleLogContractRel", b =>
                {
                    b.Property<Guid>("FleetVehicleLogContractId")
                        .HasColumnType("uuid")
                        .HasColumnName("fleet_vehicle_log_contract_id");

                    b.Property<long>("FleetServiceTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("fleet_service_type_id");

                    b.HasKey("FleetVehicleLogContractId", "FleetServiceTypeId")
                        .HasName("fleet_service_type_fleet_vehicle_log_contract_rel_pkey");

                    b.HasIndex(new[] { "FleetServiceTypeId", "FleetVehicleLogContractId" }, "fleet_service_type_fleet_vehi_fleet_service_type_id_fleet_v_idx")
                        .HasDatabaseName("fleet_service_type_fleet_vehi_fleet_service_type_id_fleet_v_idx");

                    b.ToTable("fleet_service_type_fleet_vehicle_log_contract_rel", (string)null);
                });

            modelBuilder.Entity("FleetVehicleModelVendor", b =>
                {
                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("model_id");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.HasKey("ModelId", "PartnerId")
                        .HasName("fleet_vehicle_model_vendors_pkey");

                    b.HasIndex(new[] { "PartnerId", "ModelId" }, "fleet_vehicle_model_vendors_partner_id_model_id_idx")
                        .HasDatabaseName("fleet_vehicle_model_vendors_partner_id_model_id_idx");

                    b.ToTable("fleet_vehicle_model_vendors", (string)null);
                });

            modelBuilder.Entity("FleetVehicleVehicleTagRel", b =>
                {
                    b.Property<Guid>("VehicleTagId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_tag_id");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.HasKey("VehicleTagId", "TagId")
                        .HasName("fleet_vehicle_vehicle_tag_rel_pkey");

                    b.HasIndex(new[] { "TagId", "VehicleTagId" }, "fleet_vehicle_vehicle_tag_rel_tag_id_vehicle_tag_id_idx")
                        .HasDatabaseName("fleet_vehicle_vehicle_tag_rel_tag_id_vehicle_tag_id_idx");

                    b.ToTable("fleet_vehicle_vehicle_tag_rel", (string)null);
                });

            modelBuilder.Entity("HrApplicantHrApplicantCategoryRel", b =>
                {
                    b.Property<Guid>("HrApplicantId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_applicant_id");

                    b.Property<long>("HrApplicantCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("hr_applicant_category_id");

                    b.HasKey("HrApplicantId", "HrApplicantCategoryId")
                        .HasName("hr_applicant_hr_applicant_category_rel_pkey");

                    b.HasIndex(new[] { "HrApplicantCategoryId", "HrApplicantId" }, "hr_applicant_hr_applicant_cat_hr_applicant_category_id_hr_a_idx")
                        .HasDatabaseName("hr_applicant_hr_applicant_cat_hr_applicant_category_id_hr_a_idx");

                    b.ToTable("hr_applicant_hr_applicant_category_rel", (string)null);
                });

            modelBuilder.Entity("HrApplicantHrSkillRel", b =>
                {
                    b.Property<Guid>("HrApplicantId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_applicant_id");

                    b.Property<Guid>("HrSkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_skill_id");

                    b.HasKey("HrApplicantId", "HrSkillId")
                        .HasName("hr_applicant_hr_skill_rel_pkey");

                    b.HasIndex(new[] { "HrSkillId", "HrApplicantId" }, "hr_applicant_hr_skill_rel_hr_skill_id_hr_applicant_id_idx")
                        .HasDatabaseName("hr_applicant_hr_skill_rel_hr_skill_id_hr_applicant_id_idx");

                    b.ToTable("hr_applicant_hr_skill_rel", (string)null);
                });

            modelBuilder.Entity("HrApplicantResUsersInterviewersRel", b =>
                {
                    b.Property<Guid>("HrApplicantId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_applicant_id");

                    b.Property<Guid>("ResUsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_users_id");

                    b.HasKey("HrApplicantId", "ResUsersId")
                        .HasName("hr_applicant_res_users_interviewers_rel_pkey");

                    b.HasIndex(new[] { "ResUsersId", "HrApplicantId" }, "hr_applicant_res_users_intervi_res_users_id_hr_applicant_id_idx")
                        .HasDatabaseName("hr_applicant_res_users_intervi_res_users_id_hr_applicant_id_idx");

                    b.ToTable("hr_applicant_res_users_interviewers_rel", (string)null);
                });

            modelBuilder.Entity("HrDepartmentHrLeaveStressDayRel", b =>
                {
                    b.Property<Guid>("HrLeaveStressDayId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_leave_stress_day_id");

                    b.Property<Guid>("HrDepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_department_id");

                    b.HasKey("HrLeaveStressDayId", "HrDepartmentId")
                        .HasName("hr_department_hr_leave_stress_day_rel_pkey");

                    b.HasIndex(new[] { "HrDepartmentId", "HrLeaveStressDayId" }, "hr_department_hr_leave_stress_hr_department_id_hr_leave_str_idx")
                        .HasDatabaseName("hr_department_hr_leave_stress_hr_department_id_hr_leave_str_idx");

                    b.ToTable("hr_department_hr_leave_stress_day_rel", (string)null);
                });

            modelBuilder.Entity("HrDepartmentMailChannelRel", b =>
                {
                    b.Property<Guid>("MailChannelId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_channel_id");

                    b.Property<Guid>("HrDepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_department_id");

                    b.HasKey("MailChannelId", "HrDepartmentId")
                        .HasName("hr_department_mail_channel_rel_pkey");

                    b.HasIndex(new[] { "HrDepartmentId", "MailChannelId" }, "hr_department_mail_channel_re_hr_department_id_mail_channel_idx")
                        .HasDatabaseName("hr_department_mail_channel_re_hr_department_id_mail_channel_idx");

                    b.ToTable("hr_department_mail_channel_rel", (string)null);
                });

            modelBuilder.Entity("HrEmployeeHrLeaveAllocationRel", b =>
                {
                    b.Property<Guid>("HrLeaveAllocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_leave_allocation_id");

                    b.Property<Guid>("HrEmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_employee_id");

                    b.HasKey("HrLeaveAllocationId", "HrEmployeeId")
                        .HasName("hr_employee_hr_leave_allocation_rel_pkey");

                    b.HasIndex(new[] { "HrEmployeeId", "HrLeaveAllocationId" }, "hr_employee_hr_leave_allocati_hr_employee_id_hr_leave_alloc_idx")
                        .HasDatabaseName("hr_employee_hr_leave_allocati_hr_employee_id_hr_leave_alloc_idx");

                    b.ToTable("hr_employee_hr_leave_allocation_rel", (string)null);
                });

            modelBuilder.Entity("HrEmployeeHrLeaveRel", b =>
                {
                    b.Property<Guid>("HrLeaveId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_leave_id");

                    b.Property<Guid>("HrEmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_employee_id");

                    b.HasKey("HrLeaveId", "HrEmployeeId")
                        .HasName("hr_employee_hr_leave_rel_pkey");

                    b.HasIndex(new[] { "HrEmployeeId", "HrLeaveId" }, "hr_employee_hr_leave_rel_hr_employee_id_hr_leave_id_idx")
                        .HasDatabaseName("hr_employee_hr_leave_rel_hr_employee_id_hr_leave_id_idx");

                    b.ToTable("hr_employee_hr_leave_rel", (string)null);
                });

            modelBuilder.Entity("HrEmployeeHrPlanWizardRel", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<Guid>("PlanWizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("plan_wizard_id");

                    b.HasKey("EmployeeId", "PlanWizardId")
                        .HasName("hr_employee_hr_plan_wizard_rel_pkey");

                    b.HasIndex(new[] { "PlanWizardId", "EmployeeId" }, "hr_employee_hr_plan_wizard_rel_plan_wizard_id_employee_id_idx")
                        .HasDatabaseName("hr_employee_hr_plan_wizard_rel_plan_wizard_id_employee_id_idx");

                    b.ToTable("hr_employee_hr_plan_wizard_rel", (string)null);
                });

            modelBuilder.Entity("HrEmployeeHrSkillRel", b =>
                {
                    b.Property<Guid>("HrEmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_employee_id");

                    b.Property<Guid>("HrSkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_skill_id");

                    b.HasKey("HrEmployeeId", "HrSkillId")
                        .HasName("hr_employee_hr_skill_rel_pkey");

                    b.HasIndex(new[] { "HrSkillId", "HrEmployeeId" }, "hr_employee_hr_skill_rel_hr_skill_id_hr_employee_id_idx")
                        .HasDatabaseName("hr_employee_hr_skill_rel_hr_skill_id_hr_employee_id_idx");

                    b.ToTable("hr_employee_hr_skill_rel", (string)null);
                });

            modelBuilder.Entity("HrEmployeePosConfigRel", b =>
                {
                    b.Property<Guid>("PosConfigId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_config_id");

                    b.Property<Guid>("HrEmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_employee_id");

                    b.HasKey("PosConfigId", "HrEmployeeId")
                        .HasName("hr_employee_pos_config_rel_pkey");

                    b.HasIndex(new[] { "HrEmployeeId", "PosConfigId" }, "hr_employee_pos_config_rel_hr_employee_id_pos_config_id_idx")
                        .HasDatabaseName("hr_employee_pos_config_rel_hr_employee_id_pos_config_id_idx");

                    b.ToTable("hr_employee_pos_config_rel", (string)null);
                });

            modelBuilder.Entity("HrExpenseApproveDuplicateHrExpenseSheetRel", b =>
                {
                    b.Property<Guid>("HrExpenseApproveDuplicateId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_expense_approve_duplicate_id");

                    b.Property<Guid>("HrExpenseSheetId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_expense_sheet_id");

                    b.HasKey("HrExpenseApproveDuplicateId", "HrExpenseSheetId")
                        .HasName("hr_expense_approve_duplicate_hr_expense_sheet_rel_pkey");

                    b.HasIndex(new[] { "HrExpenseSheetId", "HrExpenseApproveDuplicateId" }, "hr_expense_approve_duplicate__hr_expense_sheet_id_hr_expens_idx")
                        .HasDatabaseName("hr_expense_approve_duplicate__hr_expense_sheet_id_hr_expens_idx");

                    b.ToTable("hr_expense_approve_duplicate_hr_expense_sheet_rel", (string)null);
                });

            modelBuilder.Entity("HrExpenseHrExpenseApproveDuplicateRel", b =>
                {
                    b.Property<Guid>("HrExpenseApproveDuplicateId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_expense_approve_duplicate_id");

                    b.Property<Guid>("HrExpenseId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_expense_id");

                    b.HasKey("HrExpenseApproveDuplicateId", "HrExpenseId")
                        .HasName("hr_expense_hr_expense_approve_duplicate_rel_pkey");

                    b.HasIndex(new[] { "HrExpenseId", "HrExpenseApproveDuplicateId" }, "hr_expense_hr_expense_approve_hr_expense_id_hr_expense_appr_idx")
                        .HasDatabaseName("hr_expense_hr_expense_approve_hr_expense_id_hr_expense_appr_idx");

                    b.ToTable("hr_expense_hr_expense_approve_duplicate_rel", (string)null);
                });

            modelBuilder.Entity("HrExpenseHrExpenseRefuseWizardRel", b =>
                {
                    b.Property<Guid>("HrExpenseRefuseWizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_expense_refuse_wizard_id");

                    b.Property<Guid>("HrExpenseId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_expense_id");

                    b.HasKey("HrExpenseRefuseWizardId", "HrExpenseId")
                        .HasName("hr_expense_hr_expense_refuse_wizard_rel_pkey");

                    b.HasIndex(new[] { "HrExpenseId", "HrExpenseRefuseWizardId" }, "hr_expense_hr_expense_refuse__hr_expense_id_hr_expense_refu_idx")
                        .HasDatabaseName("hr_expense_hr_expense_refuse__hr_expense_id_hr_expense_refu_idx");

                    b.ToTable("hr_expense_hr_expense_refuse_wizard_rel", (string)null);
                });

            modelBuilder.Entity("HrJobExtendedInterviewerResUser", b =>
                {
                    b.Property<Guid>("HrJobId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_job_id");

                    b.Property<Guid>("ResUsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_users_id");

                    b.HasKey("HrJobId", "ResUsersId")
                        .HasName("hr_job_extended_interviewer_res_users_pkey");

                    b.HasIndex(new[] { "ResUsersId", "HrJobId" }, "hr_job_extended_interviewer_res_user_res_users_id_hr_job_id_idx")
                        .HasDatabaseName("hr_job_extended_interviewer_res_user_res_users_id_hr_job_id_idx");

                    b.ToTable("hr_job_extended_interviewer_res_users", (string)null);
                });

            modelBuilder.Entity("HrJobHrRecruitmentStageRel", b =>
                {
                    b.Property<long>("HrRecruitmentStageId")
                        .HasColumnType("bigint")
                        .HasColumnName("hr_recruitment_stage_id");

                    b.Property<Guid>("HrJobId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_job_id");

                    b.HasKey("HrRecruitmentStageId", "HrJobId")
                        .HasName("hr_job_hr_recruitment_stage_rel_pkey");

                    b.HasIndex(new[] { "HrJobId", "HrRecruitmentStageId" }, "hr_job_hr_recruitment_stage_r_hr_job_id_hr_recruitment_stag_idx")
                        .HasDatabaseName("hr_job_hr_recruitment_stage_r_hr_job_id_hr_recruitment_stag_idx");

                    b.ToTable("hr_job_hr_recruitment_stage_rel", (string)null);
                });

            modelBuilder.Entity("HrJobResUsersRel", b =>
                {
                    b.Property<Guid>("HrJobId")
                        .HasColumnType("uuid")
                        .HasColumnName("hr_job_id");

                    b.Property<Guid>("ResUsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_users_id");

                    b.HasKey("HrJobId", "ResUsersId")
                        .HasName("hr_job_res_users_rel_pkey");

                    b.HasIndex(new[] { "ResUsersId", "HrJobId" }, "hr_job_res_users_rel_res_users_id_hr_job_id_idx")
                        .HasDatabaseName("hr_job_res_users_rel_res_users_id_hr_job_id_idx");

                    b.ToTable("hr_job_res_users_rel", (string)null);
                });

            modelBuilder.Entity("IapAccountResCompanyRel", b =>
                {
                    b.Property<Guid>("IapAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("iap_account_id");

                    b.Property<Guid>("ResCompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_company_id");

                    b.HasKey("IapAccountId", "ResCompanyId")
                        .HasName("iap_account_res_company_rel_pkey");

                    b.HasIndex(new[] { "ResCompanyId", "IapAccountId" }, "iap_account_res_company_rel_res_company_id_iap_account_id_idx")
                        .HasDatabaseName("iap_account_res_company_rel_res_company_id_iap_account_id_idx");

                    b.ToTable("iap_account_res_company_rel", (string)null);
                });

            modelBuilder.Entity("IrActServerGroupRel", b =>
                {
                    b.Property<Guid>("ActId")
                        .HasColumnType("uuid")
                        .HasColumnName("act_id");

                    b.Property<Guid>("Gid")
                        .HasColumnType("uuid")
                        .HasColumnName("gid");

                    b.HasKey("ActId", "Gid")
                        .HasName("ir_act_server_group_rel_pkey");

                    b.HasIndex(new[] { "Gid", "ActId" }, "ir_act_server_group_rel_gid_act_id_idx")
                        .HasDatabaseName("ir_act_server_group_rel_gid_act_id_idx");

                    b.ToTable("ir_act_server_group_rel", (string)null);
                });

            modelBuilder.Entity("IrActServerResPartnerRel", b =>
                {
                    b.Property<Guid>("IrActServerId")
                        .HasColumnType("uuid")
                        .HasColumnName("ir_act_server_id");

                    b.Property<Guid>("ResPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_partner_id");

                    b.HasKey("IrActServerId", "ResPartnerId")
                        .HasName("ir_act_server_res_partner_rel_pkey");

                    b.HasIndex(new[] { "ResPartnerId", "IrActServerId" }, "ir_act_server_res_partner_rel_res_partner_id_ir_act_server__idx")
                        .HasDatabaseName("ir_act_server_res_partner_rel_res_partner_id_ir_act_server__idx");

                    b.ToTable("ir_act_server_res_partner_rel", (string)null);
                });

            modelBuilder.Entity("IrActWindowGroupRel", b =>
                {
                    b.Property<Guid>("ActId")
                        .HasColumnType("uuid")
                        .HasColumnName("act_id");

                    b.Property<Guid>("Gid")
                        .HasColumnType("uuid")
                        .HasColumnName("gid");

                    b.HasKey("ActId", "Gid")
                        .HasName("ir_act_window_group_rel_pkey");

                    b.HasIndex(new[] { "Gid", "ActId" }, "ir_act_window_group_rel_gid_act_id_idx")
                        .HasDatabaseName("ir_act_window_group_rel_gid_act_id_idx");

                    b.ToTable("ir_act_window_group_rel", (string)null);
                });

            modelBuilder.Entity("IrModelFieldsGroupRel", b =>
                {
                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid")
                        .HasColumnName("field_id");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.HasKey("FieldId", "GroupId")
                        .HasName("ir_model_fields_group_rel_pkey");

                    b.HasIndex(new[] { "GroupId", "FieldId" }, "ir_model_fields_group_rel_group_id_field_id_idx")
                        .HasDatabaseName("ir_model_fields_group_rel_group_id_field_id_idx");

                    b.ToTable("ir_model_fields_group_rel", (string)null);
                });

            modelBuilder.Entity("IrUiMenuGroupRel", b =>
                {
                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid")
                        .HasColumnName("menu_id");

                    b.Property<Guid>("Gid")
                        .HasColumnType("uuid")
                        .HasColumnName("gid");

                    b.HasKey("MenuId", "Gid")
                        .HasName("ir_ui_menu_group_rel_pkey");

                    b.HasIndex(new[] { "Gid", "MenuId" }, "ir_ui_menu_group_rel_gid_menu_id_idx")
                        .HasDatabaseName("ir_ui_menu_group_rel_gid_menu_id_idx");

                    b.ToTable("ir_ui_menu_group_rel", (string)null);
                });

            modelBuilder.Entity("IrUiViewGroupRel", b =>
                {
                    b.Property<Guid>("ViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("view_id");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.HasKey("ViewId", "GroupId")
                        .HasName("ir_ui_view_group_rel_pkey");

                    b.HasIndex(new[] { "GroupId", "ViewId" }, "ir_ui_view_group_rel_group_id_view_id_idx")
                        .HasDatabaseName("ir_ui_view_group_rel_group_id_view_id_idx");

                    b.ToTable("ir_ui_view_group_rel", (string)null);
                });

            modelBuilder.Entity("JobFavoriteUserRel", b =>
                {
                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("JobId", "UserId")
                        .HasName("job_favorite_user_rel_pkey");

                    b.HasIndex(new[] { "UserId", "JobId" }, "job_favorite_user_rel_user_id_job_id_idx")
                        .HasDatabaseName("job_favorite_user_rel_user_id_job_id_idx");

                    b.ToTable("job_favorite_user_rel", (string)null);
                });

            modelBuilder.Entity("JournalAccountControlRel", b =>
                {
                    b.Property<Guid>("JournalId")
                        .HasColumnType("uuid")
                        .HasColumnName("journal_id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.HasKey("JournalId", "AccountId")
                        .HasName("journal_account_control_rel_pkey");

                    b.HasIndex(new[] { "AccountId", "JournalId" }, "journal_account_control_rel_account_id_journal_id_idx")
                        .HasDatabaseName("journal_account_control_rel_account_id_journal_id_idx");

                    b.ToTable("journal_account_control_rel", (string)null);
                });

            modelBuilder.Entity("LotLabelLayoutStockPickingRel", b =>
                {
                    b.Property<Guid>("LotLabelLayoutId")
                        .HasColumnType("uuid")
                        .HasColumnName("lot_label_layout_id");

                    b.Property<Guid>("StockPickingId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_picking_id");

                    b.HasKey("LotLabelLayoutId", "StockPickingId")
                        .HasName("lot_label_layout_stock_picking_rel_pkey");

                    b.HasIndex(new[] { "StockPickingId", "LotLabelLayoutId" }, "lot_label_layout_stock_pickin_stock_picking_id_lot_label_la_idx")
                        .HasDatabaseName("lot_label_layout_stock_pickin_stock_picking_id_lot_label_la_idx");

                    b.ToTable("lot_label_layout_stock_picking_rel", (string)null);
                });

            modelBuilder.Entity("LunchAlertLunchLocationRel", b =>
                {
                    b.Property<Guid>("LunchAlertId")
                        .HasColumnType("uuid")
                        .HasColumnName("lunch_alert_id");

                    b.Property<Guid>("LunchLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("lunch_location_id");

                    b.HasKey("LunchAlertId", "LunchLocationId")
                        .HasName("lunch_alert_lunch_location_rel_pkey");

                    b.HasIndex(new[] { "LunchLocationId", "LunchAlertId" }, "lunch_alert_lunch_location_re_lunch_location_id_lunch_alert_idx")
                        .HasDatabaseName("lunch_alert_lunch_location_re_lunch_location_id_lunch_alert_idx");

                    b.ToTable("lunch_alert_lunch_location_rel", (string)null);
                });

            modelBuilder.Entity("LunchLocationLunchSupplierRel", b =>
                {
                    b.Property<Guid>("LunchSupplierId")
                        .HasColumnType("uuid")
                        .HasColumnName("lunch_supplier_id");

                    b.Property<Guid>("LunchLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("lunch_location_id");

                    b.HasKey("LunchSupplierId", "LunchLocationId")
                        .HasName("lunch_location_lunch_supplier_rel_pkey");

                    b.HasIndex(new[] { "LunchLocationId", "LunchSupplierId" }, "lunch_location_lunch_supplier_lunch_location_id_lunch_suppl_idx")
                        .HasDatabaseName("lunch_location_lunch_supplier_lunch_location_id_lunch_suppl_idx");

                    b.ToTable("lunch_location_lunch_supplier_rel", (string)null);
                });

            modelBuilder.Entity("LunchOrderTopping", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ToppingId")
                        .HasColumnType("uuid")
                        .HasColumnName("topping_id");

                    b.HasKey("OrderId", "ToppingId")
                        .HasName("lunch_order_topping_pkey");

                    b.HasIndex(new[] { "ToppingId", "OrderId" }, "lunch_order_topping_topping_id_order_id_idx")
                        .HasDatabaseName("lunch_order_topping_topping_id_order_id_idx");

                    b.ToTable("lunch_order_topping", (string)null);
                });

            modelBuilder.Entity("LunchProductFavoriteUserRel", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("ProductId", "UserId")
                        .HasName("lunch_product_favorite_user_rel_pkey");

                    b.HasIndex(new[] { "UserId", "ProductId" }, "lunch_product_favorite_user_rel_user_id_product_id_idx")
                        .HasDatabaseName("lunch_product_favorite_user_rel_user_id_product_id_idx");

                    b.ToTable("lunch_product_favorite_user_rel", (string)null);
                });

            modelBuilder.Entity("MailActivityRel", b =>
                {
                    b.Property<long>("ActivityId")
                        .HasColumnType("bigint")
                        .HasColumnName("activity_id");

                    b.Property<long>("RecommendedId")
                        .HasColumnType("bigint")
                        .HasColumnName("recommended_id");

                    b.HasKey("ActivityId", "RecommendedId")
                        .HasName("mail_activity_rel_pkey");

                    b.HasIndex(new[] { "RecommendedId", "ActivityId" }, "mail_activity_rel_recommended_id_activity_id_idx")
                        .HasDatabaseName("mail_activity_rel_recommended_id_activity_id_idx");

                    b.ToTable("mail_activity_rel", (string)null);
                });

            modelBuilder.Entity("MailActivityTypeMailTemplateRel", b =>
                {
                    b.Property<long>("MailActivityTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("mail_activity_type_id");

                    b.Property<Guid>("MailTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_template_id");

                    b.HasKey("MailActivityTypeId", "MailTemplateId")
                        .HasName("mail_activity_type_mail_template_rel_pkey");

                    b.HasIndex(new[] { "MailTemplateId", "MailActivityTypeId" }, "mail_activity_type_mail_templ_mail_template_id_mail_activit_idx")
                        .HasDatabaseName("mail_activity_type_mail_templ_mail_template_id_mail_activit_idx");

                    b.ToTable("mail_activity_type_mail_template_rel", (string)null);
                });

            modelBuilder.Entity("MailChannelResGroupsRel", b =>
                {
                    b.Property<Guid>("MailChannelId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_channel_id");

                    b.Property<Guid>("ResGroupsId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_groups_id");

                    b.HasKey("MailChannelId", "ResGroupsId")
                        .HasName("mail_channel_res_groups_rel_pkey");

                    b.HasIndex(new[] { "ResGroupsId", "MailChannelId" }, "mail_channel_res_groups_rel_res_groups_id_mail_channel_id_idx")
                        .HasDatabaseName("mail_channel_res_groups_rel_res_groups_id_mail_channel_id_idx");

                    b.ToTable("mail_channel_res_groups_rel", (string)null);
                });

            modelBuilder.Entity("MailComposeMessageIrAttachmentsRel", b =>
                {
                    b.Property<Guid>("WizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("wizard_id");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("attachment_id");

                    b.HasKey("WizardId", "AttachmentId")
                        .HasName("mail_compose_message_ir_attachments_rel_pkey");

                    b.HasIndex(new[] { "AttachmentId", "WizardId" }, "mail_compose_message_ir_attachments_attachment_id_wizard_id_idx")
                        .HasDatabaseName("mail_compose_message_ir_attachments_attachment_id_wizard_id_idx");

                    b.ToTable("mail_compose_message_ir_attachments_rel", (string)null);
                });

            modelBuilder.Entity("MailComposeMessageResPartnerRel", b =>
                {
                    b.Property<Guid>("WizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("wizard_id");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.HasKey("WizardId", "PartnerId")
                        .HasName("mail_compose_message_res_partner_rel_pkey");

                    b.HasIndex(new[] { "PartnerId", "WizardId" }, "mail_compose_message_res_partner_rel_partner_id_wizard_id_idx")
                        .HasDatabaseName("mail_compose_message_res_partner_rel_partner_id_wizard_id_idx");

                    b.ToTable("mail_compose_message_res_partner_rel", (string)null);
                });

            modelBuilder.Entity("MailFollowersMailMessageSubtypeRel", b =>
                {
                    b.Property<Guid>("MailFollowersId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_followers_id");

                    b.Property<long>("MailMessageSubtypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("mail_message_subtype_id");

                    b.HasKey("MailFollowersId", "MailMessageSubtypeId")
                        .HasName("mail_followers_mail_message_subtype_rel_pkey");

                    b.HasIndex(new[] { "MailMessageSubtypeId", "MailFollowersId" }, "mail_followers_mail_message_s_mail_message_subtype_id_mail__idx")
                        .HasDatabaseName("mail_followers_mail_message_s_mail_message_subtype_id_mail__idx");

                    b.ToTable("mail_followers_mail_message_subtype_rel", (string)null);
                });

            modelBuilder.Entity("MailMailResPartnerRel", b =>
                {
                    b.Property<Guid>("MailMailId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_mail_id");

                    b.Property<Guid>("ResPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_partner_id");

                    b.HasKey("MailMailId", "ResPartnerId")
                        .HasName("mail_mail_res_partner_rel_pkey");

                    b.HasIndex(new[] { "ResPartnerId", "MailMailId" }, "mail_mail_res_partner_rel_res_partner_id_mail_mail_id_idx")
                        .HasDatabaseName("mail_mail_res_partner_rel_res_partner_id_mail_mail_id_idx");

                    b.ToTable("mail_mail_res_partner_rel", (string)null);
                });

            modelBuilder.Entity("MailMessageResPartnerRel", b =>
                {
                    b.Property<Guid>("MailMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_message_id");

                    b.Property<Guid>("ResPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_partner_id");

                    b.HasKey("MailMessageId", "ResPartnerId")
                        .HasName("mail_message_res_partner_rel_pkey");

                    b.HasIndex(new[] { "ResPartnerId", "MailMessageId" }, "mail_message_res_partner_rel_res_partner_id_mail_message_id_idx")
                        .HasDatabaseName("mail_message_res_partner_rel_res_partner_id_mail_message_id_idx");

                    b.ToTable("mail_message_res_partner_rel", (string)null);
                });

            modelBuilder.Entity("MailMessageResPartnerStarredRel", b =>
                {
                    b.Property<Guid>("MailMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_message_id");

                    b.Property<Guid>("ResPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_partner_id");

                    b.HasKey("MailMessageId", "ResPartnerId")
                        .HasName("mail_message_res_partner_starred_rel_pkey");

                    b.HasIndex(new[] { "ResPartnerId", "MailMessageId" }, "mail_message_res_partner_star_res_partner_id_mail_message_i_idx")
                        .HasDatabaseName("mail_message_res_partner_star_res_partner_id_mail_message_i_idx");

                    b.ToTable("mail_message_res_partner_starred_rel", (string)null);
                });

            modelBuilder.Entity("MailNotificationMailResendMessageRel", b =>
                {
                    b.Property<Guid>("MailResendMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_resend_message_id");

                    b.Property<Guid>("MailNotificationId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_notification_id");

                    b.HasKey("MailResendMessageId", "MailNotificationId")
                        .HasName("mail_notification_mail_resend_message_rel_pkey");

                    b.HasIndex(new[] { "MailNotificationId", "MailResendMessageId" }, "mail_notification_mail_resend_mail_notification_id_mail_res_idx")
                        .HasDatabaseName("mail_notification_mail_resend_mail_notification_id_mail_res_idx");

                    b.ToTable("mail_notification_mail_resend_message_rel", (string)null);
                });

            modelBuilder.Entity("MailTemplateMailTemplateResetRel", b =>
                {
                    b.Property<Guid>("MailTemplateResetId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_template_reset_id");

                    b.Property<Guid>("MailTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_template_id");

                    b.HasKey("MailTemplateResetId", "MailTemplateId")
                        .HasName("mail_template_mail_template_reset_rel_pkey");

                    b.HasIndex(new[] { "MailTemplateId", "MailTemplateResetId" }, "mail_template_mail_template_r_mail_template_id_mail_templat_idx")
                        .HasDatabaseName("mail_template_mail_template_r_mail_template_id_mail_templat_idx");

                    b.ToTable("mail_template_mail_template_reset_rel", (string)null);
                });

            modelBuilder.Entity("MailWizardInviteResPartnerRel", b =>
                {
                    b.Property<Guid>("MailWizardInviteId")
                        .HasColumnType("uuid")
                        .HasColumnName("mail_wizard_invite_id");

                    b.Property<Guid>("ResPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_partner_id");

                    b.HasKey("MailWizardInviteId", "ResPartnerId")
                        .HasName("mail_wizard_invite_res_partner_rel_pkey");

                    b.HasIndex(new[] { "ResPartnerId", "MailWizardInviteId" }, "mail_wizard_invite_res_partne_res_partner_id_mail_wizard_in_idx")
                        .HasDatabaseName("mail_wizard_invite_res_partne_res_partner_id_mail_wizard_in_idx");

                    b.ToTable("mail_wizard_invite_res_partner_rel", (string)null);
                });

            modelBuilder.Entity("MaintenanceTeamUsersRel", b =>
                {
                    b.Property<Guid>("MaintenanceTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("maintenance_team_id");

                    b.Property<Guid>("ResUsersId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_users_id");

                    b.HasKey("MaintenanceTeamId", "ResUsersId")
                        .HasName("maintenance_team_users_rel_pkey");

                    b.HasIndex(new[] { "ResUsersId", "MaintenanceTeamId" }, "maintenance_team_users_rel_res_users_id_maintenance_team_id_idx")
                        .HasDatabaseName("maintenance_team_users_rel_res_users_id_maintenance_team_id_idx");

                    b.ToTable("maintenance_team_users_rel", (string)null);
                });

            modelBuilder.Entity("MeetingCategoryRel", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("type_id");

                    b.HasKey("EventId", "TypeId")
                        .HasName("meeting_category_rel_pkey");

                    b.HasIndex(new[] { "TypeId", "EventId" }, "meeting_category_rel_type_id_event_id_idx")
                        .HasDatabaseName("meeting_category_rel_type_id_event_id_idx");

                    b.ToTable("meeting_category_rel", (string)null);
                });

            modelBuilder.Entity("MergeOpportunityRel", b =>
                {
                    b.Property<Guid>("MergeId")
                        .HasColumnType("uuid")
                        .HasColumnName("merge_id");

                    b.Property<Guid>("OpportunityId")
                        .HasColumnType("uuid")
                        .HasColumnName("opportunity_id");

                    b.HasKey("MergeId", "OpportunityId")
                        .HasName("merge_opportunity_rel_pkey");

                    b.HasIndex(new[] { "OpportunityId", "MergeId" }, "merge_opportunity_rel_opportunity_id_merge_id_idx")
                        .HasDatabaseName("merge_opportunity_rel_opportunity_id_merge_id_idx");

                    b.ToTable("merge_opportunity_rel", (string)null);
                });

            modelBuilder.Entity("MessageAttachmentRel", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("attachment_id");

                    b.HasKey("MessageId", "AttachmentId")
                        .HasName("message_attachment_rel_pkey");

                    b.HasIndex(new[] { "AttachmentId", "MessageId" }, "message_attachment_rel_attachment_id_message_id_idx")
                        .HasDatabaseName("message_attachment_rel_attachment_id_message_id_idx");

                    b.ToTable("message_attachment_rel", (string)null);
                });

            modelBuilder.Entity("MrpBomByproductProductTemplateAttributeValueRel", b =>
                {
                    b.Property<Guid>("MrpBomByproductId")
                        .HasColumnType("uuid")
                        .HasColumnName("mrp_bom_byproduct_id");

                    b.Property<Guid>("ProductTemplateAttributeValueId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_template_attribute_value_id");

                    b.HasKey("MrpBomByproductId", "ProductTemplateAttributeValueId")
                        .HasName("mrp_bom_byproduct_product_template_attribute_value_rel_pkey");

                    b.HasIndex(new[] { "ProductTemplateAttributeValueId", "MrpBomByproductId" }, "mrp_bom_byproduct_product_tem_product_template_attribute_va_idx")
                        .HasDatabaseName("mrp_bom_byproduct_product_tem_product_template_attribute_va_idx");

                    b.ToTable("mrp_bom_byproduct_product_template_attribute_value_rel", (string)null);
                });

            modelBuilder.Entity("MrpBomLineProductTemplateAttributeValueRel", b =>
                {
                    b.Property<Guid>("MrpBomLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("mrp_bom_line_id");

                    b.Property<Guid>("ProductTemplateAttributeValueId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_template_attribute_value_id");

                    b.HasKey("MrpBomLineId", "ProductTemplateAttributeValueId")
                        .HasName("mrp_bom_line_product_template_attribute_value_rel_pkey");

                    b.HasIndex(new[] { "ProductTemplateAttributeValueId", "MrpBomLineId" }, "mrp_bom_line_product_template_product_template_attribute_va_idx")
                        .HasDatabaseName("mrp_bom_line_product_template_product_template_attribute_va_idx");

                    b.ToTable("mrp_bom_line_product_template_attribute_value_rel", (string)null);
                });

            modelBuilder.Entity("MrpConsumptionWarningMrpProductionRel", b =>
                {
                    b.Property<Guid>("MrpConsumptionWarningId")
                        .HasColumnType("uuid")
                        .HasColumnName("mrp_consumption_warning_id");

                    b.Property<Guid>("MrpProductionId")
                        .HasColumnType("uuid")
                        .HasColumnName("mrp_production_id");

                    b.HasKey("MrpConsumptionWarningId", "MrpProductionId")
                        .HasName("mrp_consumption_warning_mrp_production_rel_pkey");

                    b.HasIndex(new[] { "MrpProductionId", "MrpConsumptionWarningId" }, "mrp_consumption_warning_mrp_p_mrp_production_id_mrp_consump_idx")
                        .HasDatabaseName("mrp_consumption_warning_mrp_p_mrp_production_id_mrp_consump_idx");

                    b.ToTable("mrp_consumption_warning_mrp_production_rel", (string)null);
                });

            modelBuilder.Entity("MrpProductionMrpProductionBackorderRel", b =>
                {
                    b.Property<Guid>("MrpProductionBackorderId")
                        .HasColumnType("uuid")
                        .HasColumnName("mrp_production_backorder_id");

                    b.Property<Guid>("MrpProductionId")
                        .HasColumnType("uuid")
                        .HasColumnName("mrp_production_id");

                    b.HasKey("MrpProductionBackorderId", "MrpProductionId")
                        .HasName("mrp_production_mrp_production_backorder_rel_pkey");

                    b.HasIndex(new[] { "MrpProductionId", "MrpProductionBackorderId" }, "mrp_production_mrp_production_mrp_production_id_mrp_product_idx")
                        .HasDatabaseName("mrp_production_mrp_production_mrp_production_id_mrp_product_idx");

                    b.ToTable("mrp_production_mrp_production_backorder_rel", (string)null);
                });

            modelBuilder.Entity("MrpProductionProductionRel", b =>
                {
                    b.Property<Guid>("MrpImmediateProductionId")
                        .HasColumnType("uuid")
                        .HasColumnName("mrp_immediate_production_id");

                    b.Property<Guid>("MrpProductionId")
                        .HasColumnType("uuid")
                        .HasColumnName("mrp_production_id");

                    b.HasKey("MrpImmediateProductionId", "MrpProductionId")
                        .HasName("mrp_production_production_rel_pkey");

                    b.HasIndex(new[] { "MrpProductionId", "MrpImmediateProductionId" }, "mrp_production_production_rel_mrp_production_id_mrp_immedia_idx")
                        .HasDatabaseName("mrp_production_production_rel_mrp_production_id_mrp_immedia_idx");

                    b.ToTable("mrp_production_production_rel", (string)null);
                });

            modelBuilder.Entity("MrpRoutingWorkcenterDependenciesRel", b =>
                {
                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid")
                        .HasColumnName("operation_id");

                    b.Property<Guid>("BlockedById")
                        .HasColumnType("uuid")
                        .HasColumnName("blocked_by_id");

                    b.HasKey("OperationId", "BlockedById")
                        .HasName("mrp_routing_workcenter_dependencies_rel_pkey");

                    b.HasIndex(new[] { "BlockedById", "OperationId" }, "mrp_routing_workcenter_dependenc_blocked_by_id_operation_id_idx")
                        .HasDatabaseName("mrp_routing_workcenter_dependenc_blocked_by_id_operation_id_idx");

                    b.ToTable("mrp_routing_workcenter_dependencies_rel", (string)null);
                });

            modelBuilder.Entity("MrpRoutingWorkcenterProductTemplateAttributeValueRel", b =>
                {
                    b.Property<Guid>("MrpRoutingWorkcenterId")
                        .HasColumnType("uuid")
                        .HasColumnName("mrp_routing_workcenter_id");

                    b.Property<Guid>("ProductTemplateAttributeValueId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_template_attribute_value_id");

                    b.HasKey("MrpRoutingWorkcenterId", "ProductTemplateAttributeValueId")
                        .HasName("mrp_routing_workcenter_product_template_attribute_value_re_pkey");

                    b.HasIndex(new[] { "ProductTemplateAttributeValueId", "MrpRoutingWorkcenterId" }, "mrp_routing_workcenter_produc_product_template_attribute_va_idx")
                        .HasDatabaseName("mrp_routing_workcenter_produc_product_template_attribute_va_idx");

                    b.ToTable("mrp_routing_workcenter_product_template_attribute_value_rel", (string)null);
                });

            modelBuilder.Entity("MrpWorkcenterAlternativeRel", b =>
                {
                    b.Property<Guid>("WorkcenterId")
                        .HasColumnType("uuid")
                        .HasColumnName("workcenter_id");

                    b.Property<Guid>("AlternativeWorkcenterId")
                        .HasColumnType("uuid")
                        .HasColumnName("alternative_workcenter_id");

                    b.HasKey("WorkcenterId", "AlternativeWorkcenterId")
                        .HasName("mrp_workcenter_alternative_rel_pkey");

                    b.HasIndex(new[] { "AlternativeWorkcenterId", "WorkcenterId" }, "mrp_workcenter_alternative_re_alternative_workcenter_id_wor_idx")
                        .HasDatabaseName("mrp_workcenter_alternative_re_alternative_workcenter_id_wor_idx");

                    b.ToTable("mrp_workcenter_alternative_rel", (string)null);
                });

            modelBuilder.Entity("MrpWorkcenterMrpWorkcenterTagRel", b =>
                {
                    b.Property<Guid>("MrpWorkcenterId")
                        .HasColumnType("uuid")
                        .HasColumnName("mrp_workcenter_id");

                    b.Property<long>("MrpWorkcenterTagId")
                        .HasColumnType("bigint")
                        .HasColumnName("mrp_workcenter_tag_id");

                    b.HasKey("MrpWorkcenterId", "MrpWorkcenterTagId")
                        .HasName("mrp_workcenter_mrp_workcenter_tag_rel_pkey");

                    b.HasIndex(new[] { "MrpWorkcenterTagId", "MrpWorkcenterId" }, "mrp_workcenter_mrp_workcenter_mrp_workcenter_tag_id_mrp_wor_idx")
                        .HasDatabaseName("mrp_workcenter_mrp_workcenter_mrp_workcenter_tag_id_mrp_wor_idx");

                    b.ToTable("mrp_workcenter_mrp_workcenter_tag_rel", (string)null);
                });

            modelBuilder.Entity("MrpWorkorderDependenciesRel", b =>
                {
                    b.Property<Guid>("WorkorderId")
                        .HasColumnType("uuid")
                        .HasColumnName("workorder_id");

                    b.Property<Guid>("BlockedById")
                        .HasColumnType("uuid")
                        .HasColumnName("blocked_by_id");

                    b.HasKey("WorkorderId", "BlockedById")
                        .HasName("mrp_workorder_dependencies_rel_pkey");

                    b.HasIndex(new[] { "BlockedById", "WorkorderId" }, "mrp_workorder_dependencies_rel_blocked_by_id_workorder_id_idx")
                        .HasDatabaseName("mrp_workorder_dependencies_rel_blocked_by_id_workorder_id_idx");

                    b.ToTable("mrp_workorder_dependencies_rel", (string)null);
                });

            modelBuilder.Entity("NoteStageRel", b =>
                {
                    b.Property<Guid>("NoteId")
                        .HasColumnType("uuid")
                        .HasColumnName("note_id");

                    b.Property<long>("StageId")
                        .HasColumnType("bigint")
                        .HasColumnName("stage_id");

                    b.HasKey("NoteId", "StageId")
                        .HasName("note_stage_rel_pkey");

                    b.HasIndex(new[] { "StageId", "NoteId" }, "note_stage_rel_stage_id_note_id_idx")
                        .HasDatabaseName("note_stage_rel_stage_id_note_id_idx");

                    b.ToTable("note_stage_rel", (string)null);
                });

            modelBuilder.Entity("NoteTagsRel", b =>
                {
                    b.Property<Guid>("NoteId")
                        .HasColumnType("uuid")
                        .HasColumnName("note_id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.HasKey("NoteId", "TagId")
                        .HasName("note_tags_rel_pkey");

                    b.HasIndex(new[] { "TagId", "NoteId" }, "note_tags_rel_tag_id_note_id_idx")
                        .HasDatabaseName("note_tags_rel_tag_id_note_id_idx");

                    b.ToTable("note_tags_rel", (string)null);
                });

            modelBuilder.Entity("PaymentCountryRel", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.HasKey("PaymentId", "CountryId")
                        .HasName("payment_country_rel_pkey");

                    b.HasIndex(new[] { "CountryId", "PaymentId" }, "payment_country_rel_country_id_payment_id_idx")
                        .HasDatabaseName("payment_country_rel_country_id_payment_id_idx");

                    b.ToTable("payment_country_rel", (string)null);
                });

            modelBuilder.Entity("PaymentIconPaymentProviderRel", b =>
                {
                    b.Property<Guid>("PaymentProviderId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_provider_id");

                    b.Property<Guid>("PaymentIconId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_icon_id");

                    b.HasKey("PaymentProviderId", "PaymentIconId")
                        .HasName("payment_icon_payment_provider_rel_pkey");

                    b.HasIndex(new[] { "PaymentIconId", "PaymentProviderId" }, "payment_icon_payment_provider_payment_icon_id_payment_provi_idx")
                        .HasDatabaseName("payment_icon_payment_provider_payment_icon_id_payment_provi_idx");

                    b.ToTable("payment_icon_payment_provider_rel", (string)null);
                });

            modelBuilder.Entity("PickingLabelTypeStockPickingRel", b =>
                {
                    b.Property<Guid>("PickingLabelTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("picking_label_type_id");

                    b.Property<Guid>("StockPickingId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_picking_id");

                    b.HasKey("PickingLabelTypeId", "StockPickingId")
                        .HasName("picking_label_type_stock_picking_rel_pkey");

                    b.HasIndex(new[] { "StockPickingId", "PickingLabelTypeId" }, "picking_label_type_stock_pick_stock_picking_id_picking_labe_idx")
                        .HasDatabaseName("picking_label_type_stock_pick_stock_picking_id_picking_labe_idx");

                    b.ToTable("picking_label_type_stock_picking_rel", (string)null);
                });

            modelBuilder.Entity("PortalShareResPartnerRel", b =>
                {
                    b.Property<Guid>("PortalShareId")
                        .HasColumnType("uuid")
                        .HasColumnName("portal_share_id");

                    b.Property<Guid>("ResPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_partner_id");

                    b.HasKey("PortalShareId", "ResPartnerId")
                        .HasName("portal_share_res_partner_rel_pkey");

                    b.HasIndex(new[] { "ResPartnerId", "PortalShareId" }, "portal_share_res_partner_rel_res_partner_id_portal_share_id_idx")
                        .HasDatabaseName("portal_share_res_partner_rel_res_partner_id_portal_share_id_idx");

                    b.ToTable("portal_share_res_partner_rel", (string)null);
                });

            modelBuilder.Entity("PortalWizardResPartnerRel", b =>
                {
                    b.Property<Guid>("PortalWizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("portal_wizard_id");

                    b.Property<Guid>("ResPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_partner_id");

                    b.HasKey("PortalWizardId", "ResPartnerId")
                        .HasName("portal_wizard_res_partner_rel_pkey");

                    b.HasIndex(new[] { "ResPartnerId", "PortalWizardId" }, "portal_wizard_res_partner_rel_res_partner_id_portal_wizard__idx")
                        .HasDatabaseName("portal_wizard_res_partner_rel_res_partner_id_portal_wizard__idx");

                    b.ToTable("portal_wizard_res_partner_rel", (string)null);
                });

            modelBuilder.Entity("PosBillPosConfigRel", b =>
                {
                    b.Property<Guid>("PosConfigId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_config_id");

                    b.Property<Guid>("PosBillId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_bill_id");

                    b.HasKey("PosConfigId", "PosBillId")
                        .HasName("pos_bill_pos_config_rel_pkey");

                    b.HasIndex(new[] { "PosBillId", "PosConfigId" }, "pos_bill_pos_config_rel_pos_bill_id_pos_config_id_idx")
                        .HasDatabaseName("pos_bill_pos_config_rel_pos_bill_id_pos_config_id_idx");

                    b.ToTable("pos_bill_pos_config_rel", (string)null);
                });

            modelBuilder.Entity("PosCategoryPosConfigRel", b =>
                {
                    b.Property<Guid>("PosConfigId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_config_id");

                    b.Property<long>("PosCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("pos_category_id");

                    b.HasKey("PosConfigId", "PosCategoryId")
                        .HasName("pos_category_pos_config_rel_pkey");

                    b.HasIndex(new[] { "PosCategoryId", "PosConfigId" }, "pos_category_pos_config_rel_pos_category_id_pos_config_id_idx")
                        .HasDatabaseName("pos_category_pos_config_rel_pos_category_id_pos_config_id_idx");

                    b.ToTable("pos_category_pos_config_rel", (string)null);
                });

            modelBuilder.Entity("PosCategoryResConfigSettingsRel", b =>
                {
                    b.Property<Guid>("ResConfigSettingsId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_config_settings_id");

                    b.Property<long>("PosCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("pos_category_id");

                    b.HasKey("ResConfigSettingsId", "PosCategoryId")
                        .HasName("pos_category_res_config_settings_rel_pkey");

                    b.HasIndex(new[] { "PosCategoryId", "ResConfigSettingsId" }, "pos_category_res_config_setti_pos_category_id_res_config_se_idx")
                        .HasDatabaseName("pos_category_res_config_setti_pos_category_id_res_config_se_idx");

                    b.ToTable("pos_category_res_config_settings_rel", (string)null);
                });

            modelBuilder.Entity("PosConfigPosPaymentMethodRel", b =>
                {
                    b.Property<Guid>("PosConfigId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_config_id");

                    b.Property<Guid>("PosPaymentMethodId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_payment_method_id");

                    b.HasKey("PosConfigId", "PosPaymentMethodId")
                        .HasName("pos_config_pos_payment_method_rel_pkey");

                    b.HasIndex(new[] { "PosPaymentMethodId", "PosConfigId" }, "pos_config_pos_payment_method_pos_payment_method_id_pos_con_idx")
                        .HasDatabaseName("pos_config_pos_payment_method_pos_payment_method_id_pos_con_idx");

                    b.ToTable("pos_config_pos_payment_method_rel", (string)null);
                });

            modelBuilder.Entity("PosConfigProductPricelistRel", b =>
                {
                    b.Property<Guid>("PosConfigId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_config_id");

                    b.Property<Guid>("ProductPricelistId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_pricelist_id");

                    b.HasKey("PosConfigId", "ProductPricelistId")
                        .HasName("pos_config_product_pricelist_rel_pkey");

                    b.HasIndex(new[] { "ProductPricelistId", "PosConfigId" }, "pos_config_product_pricelist__product_pricelist_id_pos_conf_idx")
                        .HasDatabaseName("pos_config_product_pricelist__product_pricelist_id_pos_conf_idx");

                    b.ToTable("pos_config_product_pricelist_rel", (string)null);
                });

            modelBuilder.Entity("PosDetailConfig", b =>
                {
                    b.Property<Guid>("PosDetailsWizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_details_wizard_id");

                    b.Property<Guid>("PosConfigId")
                        .HasColumnType("uuid")
                        .HasColumnName("pos_config_id");

                    b.HasKey("PosDetailsWizardId", "PosConfigId")
                        .HasName("pos_detail_configs_pkey");

                    b.HasIndex(new[] { "PosConfigId", "PosDetailsWizardId" }, "pos_detail_configs_pos_config_id_pos_details_wizard_id_idx")
                        .HasDatabaseName("pos_detail_configs_pos_config_id_pos_details_wizard_id_idx");

                    b.ToTable("pos_detail_configs", (string)null);
                });

            modelBuilder.Entity("ProductAccessoryRel", b =>
                {
                    b.Property<Guid>("SrcId")
                        .HasColumnType("uuid")
                        .HasColumnName("src_id");

                    b.Property<Guid>("DestId")
                        .HasColumnType("uuid")
                        .HasColumnName("dest_id");

                    b.HasKey("SrcId", "DestId")
                        .HasName("product_accessory_rel_pkey");

                    b.HasIndex(new[] { "DestId", "SrcId" }, "product_accessory_rel_dest_id_src_id_idx")
                        .HasDatabaseName("product_accessory_rel_dest_id_src_id_idx");

                    b.ToTable("product_accessory_rel", (string)null);
                });

            modelBuilder.Entity("ProductAlternativeRel", b =>
                {
                    b.Property<Guid>("SrcId")
                        .HasColumnType("uuid")
                        .HasColumnName("src_id");

                    b.Property<Guid>("DestId")
                        .HasColumnType("uuid")
                        .HasColumnName("dest_id");

                    b.HasKey("SrcId", "DestId")
                        .HasName("product_alternative_rel_pkey");

                    b.HasIndex(new[] { "DestId", "SrcId" }, "product_alternative_rel_dest_id_src_id_idx")
                        .HasDatabaseName("product_alternative_rel_dest_id_src_id_idx");

                    b.ToTable("product_alternative_rel", (string)null);
                });

            modelBuilder.Entity("ProductAttrExclusionValueIdsRel", b =>
                {
                    b.Property<Guid>("ProductTemplateAttributeExclusionId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_template_attribute_exclusion_id");

                    b.Property<Guid>("ProductTemplateAttributeValueId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_template_attribute_value_id");

                    b.HasKey("ProductTemplateAttributeExclusionId", "ProductTemplateAttributeValueId")
                        .HasName("product_attr_exclusion_value_ids_rel_pkey");

                    b.HasIndex(new[] { "ProductTemplateAttributeValueId", "ProductTemplateAttributeExclusionId" }, "product_attr_exclusion_value__product_template_attribute_va_idx")
                        .HasDatabaseName("product_attr_exclusion_value__product_template_attribute_va_idx");

                    b.ToTable("product_attr_exclusion_value_ids_rel", (string)null);
                });

            modelBuilder.Entity("ProductAttributeProductTemplateRel", b =>
                {
                    b.Property<long>("ProductAttributeId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_attribute_id");

                    b.Property<Guid>("ProductTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_template_id");

                    b.HasKey("ProductAttributeId", "ProductTemplateId")
                        .HasName("product_attribute_product_template_rel_pkey");

                    b.HasIndex(new[] { "ProductTemplateId", "ProductAttributeId" }, "product_attribute_product_tem_product_template_id_product_a_idx")
                        .HasDatabaseName("product_attribute_product_tem_product_template_id_product_a_idx");

                    b.ToTable("product_attribute_product_template_rel", (string)null);
                });

            modelBuilder.Entity("ProductAttributeValueProductTemplateAttributeLineRel", b =>
                {
                    b.Property<Guid>("ProductAttributeValueId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_attribute_value_id");

                    b.Property<Guid>("ProductTemplateAttributeLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_template_attribute_line_id");

                    b.HasKey("ProductAttributeValueId", "ProductTemplateAttributeLineId")
                        .HasName("product_attribute_value_product_template_attribute_line_re_pkey");

                    b.HasIndex(new[] { "ProductTemplateAttributeLineId", "ProductAttributeValueId" }, "product_attribute_value_produ_product_template_attribute_li_idx")
                        .HasDatabaseName("product_attribute_value_produ_product_template_attribute_li_idx");

                    b.ToTable("product_attribute_value_product_template_attribute_line_rel", (string)null);
                });

            modelBuilder.Entity("ProductLabelLayoutProductProductRel", b =>
                {
                    b.Property<Guid>("ProductLabelLayoutId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_label_layout_id");

                    b.Property<Guid>("ProductProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_product_id");

                    b.HasKey("ProductLabelLayoutId", "ProductProductId")
                        .HasName("product_label_layout_product_product_rel_pkey");

                    b.HasIndex(new[] { "ProductProductId", "ProductLabelLayoutId" }, "product_label_layout_product__product_product_id_product_la_idx")
                        .HasDatabaseName("product_label_layout_product__product_product_id_product_la_idx");

                    b.ToTable("product_label_layout_product_product_rel", (string)null);
                });

            modelBuilder.Entity("ProductLabelLayoutProductTemplateRel", b =>
                {
                    b.Property<Guid>("ProductLabelLayoutId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_label_layout_id");

                    b.Property<Guid>("ProductTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_template_id");

                    b.HasKey("ProductLabelLayoutId", "ProductTemplateId")
                        .HasName("product_label_layout_product_template_rel_pkey");

                    b.HasIndex(new[] { "ProductTemplateId", "ProductLabelLayoutId" }, "product_label_layout_product__product_template_id_product_l_idx")
                        .HasDatabaseName("product_label_layout_product__product_template_id_product_l_idx");

                    b.ToTable("product_label_layout_product_template_rel", (string)null);
                });

            modelBuilder.Entity("ProductLabelLayoutStockMoveLineRel", b =>
                {
                    b.Property<Guid>("ProductLabelLayoutId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_label_layout_id");

                    b.Property<Guid>("StockMoveLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_move_line_id");

                    b.HasKey("ProductLabelLayoutId", "StockMoveLineId")
                        .HasName("product_label_layout_stock_move_line_rel_pkey");

                    b.HasIndex(new[] { "StockMoveLineId", "ProductLabelLayoutId" }, "product_label_layout_stock_mo_stock_move_line_id_product_la_idx")
                        .HasDatabaseName("product_label_layout_stock_mo_stock_move_line_id_product_la_idx");

                    b.ToTable("product_label_layout_stock_move_line_rel", (string)null);
                });

            modelBuilder.Entity("ProductOptionalRel", b =>
                {
                    b.Property<Guid>("SrcId")
                        .HasColumnType("uuid")
                        .HasColumnName("src_id");

                    b.Property<Guid>("DestId")
                        .HasColumnType("uuid")
                        .HasColumnName("dest_id");

                    b.HasKey("SrcId", "DestId")
                        .HasName("product_optional_rel_pkey");

                    b.HasIndex(new[] { "DestId", "SrcId" }, "product_optional_rel_dest_id_src_id_idx")
                        .HasDatabaseName("product_optional_rel_dest_id_src_id_idx");

                    b.ToTable("product_optional_rel", (string)null);
                });

            modelBuilder.Entity("ProductPricelistResConfigSettingsRel", b =>
                {
                    b.Property<Guid>("ResConfigSettingsId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_config_settings_id");

                    b.Property<Guid>("ProductPricelistId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_pricelist_id");

                    b.HasKey("ResConfigSettingsId", "ProductPricelistId")
                        .HasName("product_pricelist_res_config_settings_rel_pkey");

                    b.HasIndex(new[] { "ProductPricelistId", "ResConfigSettingsId" }, "product_pricelist_res_config__product_pricelist_id_res_conf_idx")
                        .HasDatabaseName("product_pricelist_res_config__product_pricelist_id_res_conf_idx");

                    b.ToTable("product_pricelist_res_config_settings_rel", (string)null);
                });

            modelBuilder.Entity("ProductProductStockTrackConfirmationRel", b =>
                {
                    b.Property<Guid>("StockTrackConfirmationId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_track_confirmation_id");

                    b.Property<Guid>("ProductProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_product_id");

                    b.HasKey("StockTrackConfirmationId", "ProductProductId")
                        .HasName("product_product_stock_track_confirmation_rel_pkey");

                    b.HasIndex(new[] { "ProductProductId", "StockTrackConfirmationId" }, "product_product_stock_track_c_product_product_id_stock_trac_idx")
                        .HasDatabaseName("product_product_stock_track_c_product_product_id_stock_trac_idx");

                    b.ToTable("product_product_stock_track_confirmation_rel", (string)null);
                });

            modelBuilder.Entity("ProductPublicCategoryProductTemplateRel", b =>
                {
                    b.Property<long>("ProductPublicCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_public_category_id");

                    b.Property<Guid>("ProductTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_template_id");

                    b.HasKey("ProductPublicCategoryId", "ProductTemplateId")
                        .HasName("product_public_category_product_template_rel_pkey");

                    b.HasIndex(new[] { "ProductTemplateId", "ProductPublicCategoryId" }, "product_public_category_produ_product_template_id_product_p_idx")
                        .HasDatabaseName("product_public_category_produ_product_template_id_product_p_idx");

                    b.ToTable("product_public_category_product_template_rel", (string)null);
                });

            modelBuilder.Entity("ProductReplenishStockRouteRel", b =>
                {
                    b.Property<Guid>("ProductReplenishId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_replenish_id");

                    b.Property<Guid>("StockRouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_route_id");

                    b.HasKey("ProductReplenishId", "StockRouteId")
                        .HasName("product_replenish_stock_route_rel_pkey");

                    b.HasIndex(new[] { "StockRouteId", "ProductReplenishId" }, "product_replenish_stock_route_stock_route_id_product_replen_idx")
                        .HasDatabaseName("product_replenish_stock_route_stock_route_id_product_replen_idx");

                    b.ToTable("product_replenish_stock_route_rel", (string)null);
                });

            modelBuilder.Entity("ProductSupplierTaxesRel", b =>
                {
                    b.Property<Guid>("ProdId")
                        .HasColumnType("uuid")
                        .HasColumnName("prod_id");

                    b.Property<Guid>("TaxId")
                        .HasColumnType("uuid")
                        .HasColumnName("tax_id");

                    b.HasKey("ProdId", "TaxId")
                        .HasName("product_supplier_taxes_rel_pkey");

                    b.HasIndex(new[] { "TaxId", "ProdId" }, "product_supplier_taxes_rel_tax_id_prod_id_idx")
                        .HasDatabaseName("product_supplier_taxes_rel_tax_id_prod_id_idx");

                    b.ToTable("product_supplier_taxes_rel", (string)null);
                });

            modelBuilder.Entity("ProductSupplierinfoStockReplenishmentInfoRel", b =>
                {
                    b.Property<Guid>("StockReplenishmentInfoId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_replenishment_info_id");

                    b.Property<Guid>("ProductSupplierinfoId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_supplierinfo_id");

                    b.HasKey("StockReplenishmentInfoId", "ProductSupplierinfoId")
                        .HasName("product_supplierinfo_stock_replenishment_info_rel_pkey");

                    b.HasIndex(new[] { "ProductSupplierinfoId", "StockReplenishmentInfoId" }, "product_supplierinfo_stock_re_product_supplierinfo_id_stock_idx")
                        .HasDatabaseName("product_supplierinfo_stock_re_product_supplierinfo_id_stock_idx");

                    b.ToTable("product_supplierinfo_stock_replenishment_info_rel", (string)null);
                });

            modelBuilder.Entity("ProductTagProductProductRel", b =>
                {
                    b.Property<Guid>("ProductProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_product_id");

                    b.Property<long>("ProductTagId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_tag_id");

                    b.HasKey("ProductProductId", "ProductTagId")
                        .HasName("product_tag_product_product_rel_pkey");

                    b.HasIndex(new[] { "ProductTagId", "ProductProductId" }, "product_tag_product_product_r_product_tag_id_product_produc_idx")
                        .HasDatabaseName("product_tag_product_product_r_product_tag_id_product_produc_idx");

                    b.ToTable("product_tag_product_product_rel", (string)null);
                });

            modelBuilder.Entity("ProductTagProductTemplateRel", b =>
                {
                    b.Property<Guid>("ProductTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_template_id");

                    b.Property<long>("ProductTagId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_tag_id");

                    b.HasKey("ProductTemplateId", "ProductTagId")
                        .HasName("product_tag_product_template_rel_pkey");

                    b.HasIndex(new[] { "ProductTagId", "ProductTemplateId" }, "product_tag_product_template__product_tag_id_product_templa_idx")
                        .HasDatabaseName("product_tag_product_template__product_tag_id_product_templa_idx");

                    b.ToTable("product_tag_product_template_rel", (string)null);
                });

            modelBuilder.Entity("ProductTaxesRel", b =>
                {
                    b.Property<Guid>("ProdId")
                        .HasColumnType("uuid")
                        .HasColumnName("prod_id");

                    b.Property<Guid>("TaxId")
                        .HasColumnType("uuid")
                        .HasColumnName("tax_id");

                    b.HasKey("ProdId", "TaxId")
                        .HasName("product_taxes_rel_pkey");

                    b.HasIndex(new[] { "TaxId", "ProdId" }, "product_taxes_rel_tax_id_prod_id_idx")
                        .HasDatabaseName("product_taxes_rel_tax_id_prod_id_idx");

                    b.ToTable("product_taxes_rel", (string)null);
                });

            modelBuilder.Entity("ProductTemplateAttributeValueSaleOrderLineRel", b =>
                {
                    b.Property<Guid>("SaleOrderLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_order_line_id");

                    b.Property<Guid>("ProductTemplateAttributeValueId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_template_attribute_value_id");

                    b.HasKey("SaleOrderLineId", "ProductTemplateAttributeValueId")
                        .HasName("product_template_attribute_value_sale_order_line_rel_pkey");

                    b.HasIndex(new[] { "ProductTemplateAttributeValueId", "SaleOrderLineId" }, "product_template_attribute_va_product_template_attribute_va_idx")
                        .HasDatabaseName("product_template_attribute_va_product_template_attribute_va_idx");

                    b.ToTable("product_template_attribute_value_sale_order_line_rel", (string)null);
                });

            modelBuilder.Entity("ProductVariantCombination", b =>
                {
                    b.Property<Guid>("ProductProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_product_id");

                    b.Property<Guid>("ProductTemplateAttributeValueId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_template_attribute_value_id");

                    b.HasKey("ProductProductId", "ProductTemplateAttributeValueId")
                        .HasName("product_variant_combination_pkey");

                    b.HasIndex(new[] { "ProductTemplateAttributeValueId", "ProductProductId" }, "product_variant_combination_product_template_attribute_valu_idx")
                        .HasDatabaseName("product_variant_combination_product_template_attribute_valu_idx");

                    b.ToTable("product_variant_combination", (string)null);
                });

            modelBuilder.Entity("ProjectFavoriteUserRel", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("ProjectId", "UserId")
                        .HasName("project_favorite_user_rel_pkey");

                    b.HasIndex(new[] { "UserId", "ProjectId" }, "project_favorite_user_rel_user_id_project_id_idx")
                        .HasDatabaseName("project_favorite_user_rel_user_id_project_id_idx");

                    b.ToTable("project_favorite_user_rel", (string)null);
                });

            modelBuilder.Entity("ProjectProjectProjectTagsRel", b =>
                {
                    b.Property<Guid>("ProjectProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_project_id");

                    b.Property<long>("ProjectTagsId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_tags_id");

                    b.HasKey("ProjectProjectId", "ProjectTagsId")
                        .HasName("project_project_project_tags_rel_pkey");

                    b.HasIndex(new[] { "ProjectTagsId", "ProjectProjectId" }, "project_project_project_tags__project_tags_id_project_proje_idx")
                        .HasDatabaseName("project_project_project_tags__project_tags_id_project_proje_idx");

                    b.ToTable("project_project_project_tags_rel", (string)null);
                });

            modelBuilder.Entity("ProjectProjectProjectTaskTypeDeleteWizardRel", b =>
                {
                    b.Property<Guid>("ProjectTaskTypeDeleteWizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_task_type_delete_wizard_id");

                    b.Property<Guid>("ProjectProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_project_id");

                    b.HasKey("ProjectTaskTypeDeleteWizardId", "ProjectProjectId")
                        .HasName("project_project_project_task_type_delete_wizard_rel_pkey");

                    b.HasIndex(new[] { "ProjectProjectId", "ProjectTaskTypeDeleteWizardId" }, "project_project_project_task__project_project_id_project_ta_idx")
                        .HasDatabaseName("project_project_project_task__project_project_id_project_ta_idx");

                    b.ToTable("project_project_project_task_type_delete_wizard_rel", (string)null);
                });

            modelBuilder.Entity("ProjectShareWizardResPartnerRel", b =>
                {
                    b.Property<Guid>("ProjectShareWizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_share_wizard_id");

                    b.Property<Guid>("ResPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_partner_id");

                    b.HasKey("ProjectShareWizardId", "ResPartnerId")
                        .HasName("project_share_wizard_res_partner_rel_pkey");

                    b.HasIndex(new[] { "ResPartnerId", "ProjectShareWizardId" }, "project_share_wizard_res_part_res_partner_id_project_share__idx")
                        .HasDatabaseName("project_share_wizard_res_part_res_partner_id_project_share__idx");

                    b.ToTable("project_share_wizard_res_partner_rel", (string)null);
                });

            modelBuilder.Entity("ProjectTagsProjectTaskRel", b =>
                {
                    b.Property<Guid>("ProjectTaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_task_id");

                    b.Property<long>("ProjectTagsId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_tags_id");

                    b.HasKey("ProjectTaskId", "ProjectTagsId")
                        .HasName("project_tags_project_task_rel_pkey");

                    b.HasIndex(new[] { "ProjectTagsId", "ProjectTaskId" }, "project_tags_project_task_rel_project_tags_id_project_task__idx")
                        .HasDatabaseName("project_tags_project_task_rel_project_tags_id_project_task__idx");

                    b.ToTable("project_tags_project_task_rel", (string)null);
                });

            modelBuilder.Entity("ProjectTaskTypeProjectTaskTypeDeleteWizardRel", b =>
                {
                    b.Property<Guid>("ProjectTaskTypeDeleteWizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_task_type_delete_wizard_id");

                    b.Property<long>("ProjectTaskTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_task_type_id");

                    b.HasKey("ProjectTaskTypeDeleteWizardId", "ProjectTaskTypeId")
                        .HasName("project_task_type_project_task_type_delete_wizard_rel_pkey");

                    b.HasIndex(new[] { "ProjectTaskTypeId", "ProjectTaskTypeDeleteWizardId" }, "project_task_type_project_tas_project_task_type_id_project__idx")
                        .HasDatabaseName("project_task_type_project_tas_project_task_type_id_project__idx");

                    b.ToTable("project_task_type_project_task_type_delete_wizard_rel", (string)null);
                });

            modelBuilder.Entity("ProjectTaskTypeRel", b =>
                {
                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("type_id");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.HasKey("TypeId", "ProjectId")
                        .HasName("project_task_type_rel_pkey");

                    b.HasIndex(new[] { "ProjectId", "TypeId" }, "project_task_type_rel_project_id_type_id_idx")
                        .HasDatabaseName("project_task_type_rel_project_id_type_id_idx");

                    b.ToTable("project_task_type_rel", (string)null);
                });

            modelBuilder.Entity("PurchaseOrderStockPickingRel", b =>
                {
                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("purchase_order_id");

                    b.Property<Guid>("StockPickingId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_picking_id");

                    b.HasKey("PurchaseOrderId", "StockPickingId")
                        .HasName("purchase_order_stock_picking_rel_pkey");

                    b.HasIndex(new[] { "StockPickingId", "PurchaseOrderId" }, "purchase_order_stock_picking__stock_picking_id_purchase_ord_idx")
                        .HasDatabaseName("purchase_order_stock_picking__stock_picking_id_purchase_ord_idx");

                    b.ToTable("purchase_order_stock_picking_rel", (string)null);
                });

            modelBuilder.Entity("RelModulesLangexport", b =>
                {
                    b.Property<Guid>("WizId")
                        .HasColumnType("uuid")
                        .HasColumnName("wiz_id");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("module_id");

                    b.HasKey("WizId", "ModuleId")
                        .HasName("rel_modules_langexport_pkey");

                    b.HasIndex(new[] { "ModuleId", "WizId" }, "rel_modules_langexport_module_id_wiz_id_idx")
                        .HasDatabaseName("rel_modules_langexport_module_id_wiz_id_idx");

                    b.ToTable("rel_modules_langexport", (string)null);
                });

            modelBuilder.Entity("RelServerAction", b =>
                {
                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid")
                        .HasColumnName("server_id");

                    b.Property<Guid>("ActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("action_id");

                    b.HasKey("ServerId", "ActionId")
                        .HasName("rel_server_actions_pkey");

                    b.HasIndex(new[] { "ActionId", "ServerId" }, "rel_server_actions_action_id_server_id_idx")
                        .HasDatabaseName("rel_server_actions_action_id_server_id_idx");

                    b.ToTable("rel_server_actions", (string)null);
                });

            modelBuilder.Entity("RepairFeeLineTax", b =>
                {
                    b.Property<Guid>("RepairFeeLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("repair_fee_line_id");

                    b.Property<Guid>("TaxId")
                        .HasColumnType("uuid")
                        .HasColumnName("tax_id");

                    b.HasKey("RepairFeeLineId", "TaxId")
                        .HasName("repair_fee_line_tax_pkey");

                    b.HasIndex(new[] { "TaxId", "RepairFeeLineId" }, "repair_fee_line_tax_tax_id_repair_fee_line_id_idx")
                        .HasDatabaseName("repair_fee_line_tax_tax_id_repair_fee_line_id_idx");

                    b.ToTable("repair_fee_line_tax", (string)null);
                });

            modelBuilder.Entity("RepairOperationLineTax", b =>
                {
                    b.Property<Guid>("RepairOperationLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("repair_operation_line_id");

                    b.Property<Guid>("TaxId")
                        .HasColumnType("uuid")
                        .HasColumnName("tax_id");

                    b.HasKey("RepairOperationLineId", "TaxId")
                        .HasName("repair_operation_line_tax_pkey");

                    b.HasIndex(new[] { "TaxId", "RepairOperationLineId" }, "repair_operation_line_tax_tax_id_repair_operation_line_id_idx")
                        .HasDatabaseName("repair_operation_line_tax_tax_id_repair_operation_line_id_idx");

                    b.ToTable("repair_operation_line_tax", (string)null);
                });

            modelBuilder.Entity("RepairOrderRepairTagsRel", b =>
                {
                    b.Property<Guid>("RepairOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("repair_order_id");

                    b.Property<long>("RepairTagsId")
                        .HasColumnType("bigint")
                        .HasColumnName("repair_tags_id");

                    b.HasKey("RepairOrderId", "RepairTagsId")
                        .HasName("repair_order_repair_tags_rel_pkey");

                    b.HasIndex(new[] { "RepairTagsId", "RepairOrderId" }, "repair_order_repair_tags_rel_repair_tags_id_repair_order_id_idx")
                        .HasDatabaseName("repair_order_repair_tags_rel_repair_tags_id_repair_order_id_idx");

                    b.ToTable("repair_order_repair_tags_rel", (string)null);
                });

            modelBuilder.Entity("ResCompanyUsersRel", b =>
                {
                    b.Property<Guid>("Cid")
                        .HasColumnType("uuid")
                        .HasColumnName("cid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Cid", "UserId")
                        .HasName("res_company_users_rel_pkey");

                    b.HasIndex(new[] { "UserId", "Cid" }, "res_company_users_rel_user_id_cid_idx")
                        .HasDatabaseName("res_company_users_rel_user_id_cid_idx");

                    b.ToTable("res_company_users_rel", (string)null);
                });

            modelBuilder.Entity("ResCountryGroupPricelistRel", b =>
                {
                    b.Property<Guid>("PricelistId")
                        .HasColumnType("uuid")
                        .HasColumnName("pricelist_id");

                    b.Property<long>("ResCountryGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("res_country_group_id");

                    b.HasKey("PricelistId", "ResCountryGroupId")
                        .HasName("res_country_group_pricelist_rel_pkey");

                    b.HasIndex(new[] { "ResCountryGroupId", "PricelistId" }, "res_country_group_pricelist_r_res_country_group_id_pricelis_idx")
                        .HasDatabaseName("res_country_group_pricelist_r_res_country_group_id_pricelis_idx");

                    b.ToTable("res_country_group_pricelist_rel", (string)null);
                });

            modelBuilder.Entity("ResCountryResCountryGroupRel", b =>
                {
                    b.Property<long>("ResCountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("res_country_id");

                    b.Property<long>("ResCountryGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("res_country_group_id");

                    b.HasKey("ResCountryId", "ResCountryGroupId")
                        .HasName("res_country_res_country_group_rel_pkey");

                    b.HasIndex(new[] { "ResCountryGroupId", "ResCountryId" }, "res_country_res_country_group_res_country_group_id_res_coun_idx")
                        .HasDatabaseName("res_country_res_country_group_res_country_group_id_res_coun_idx");

                    b.ToTable("res_country_res_country_group_rel", (string)null);
                });

            modelBuilder.Entity("ResGroupsImpliedRel", b =>
                {
                    b.Property<Guid>("Gid")
                        .HasColumnType("uuid")
                        .HasColumnName("gid");

                    b.Property<Guid>("Hid")
                        .HasColumnType("uuid")
                        .HasColumnName("hid");

                    b.HasKey("Gid", "Hid")
                        .HasName("res_groups_implied_rel_pkey");

                    b.HasIndex(new[] { "Hid", "Gid" }, "res_groups_implied_rel_hid_gid_idx")
                        .HasDatabaseName("res_groups_implied_rel_hid_gid_idx");

                    b.ToTable("res_groups_implied_rel", (string)null);
                });

            modelBuilder.Entity("ResGroupsReportRel", b =>
                {
                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.Property<Guid>("Gid")
                        .HasColumnType("uuid")
                        .HasColumnName("gid");

                    b.HasKey("Uid", "Gid")
                        .HasName("res_groups_report_rel_pkey");

                    b.HasIndex(new[] { "Gid", "Uid" }, "res_groups_report_rel_gid_uid_idx")
                        .HasDatabaseName("res_groups_report_rel_gid_uid_idx");

                    b.ToTable("res_groups_report_rel", (string)null);
                });

            modelBuilder.Entity("ResGroupsSpreadsheetDashboardRel", b =>
                {
                    b.Property<Guid>("SpreadsheetDashboardId")
                        .HasColumnType("uuid")
                        .HasColumnName("spreadsheet_dashboard_id");

                    b.Property<Guid>("ResGroupsId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_groups_id");

                    b.HasKey("SpreadsheetDashboardId", "ResGroupsId")
                        .HasName("res_groups_spreadsheet_dashboard_rel_pkey");

                    b.HasIndex(new[] { "ResGroupsId", "SpreadsheetDashboardId" }, "res_groups_spreadsheet_dashbo_res_groups_id_spreadsheet_das_idx")
                        .HasDatabaseName("res_groups_spreadsheet_dashbo_res_groups_id_spreadsheet_das_idx");

                    b.ToTable("res_groups_spreadsheet_dashboard_rel", (string)null);
                });

            modelBuilder.Entity("ResGroupsUsersRel", b =>
                {
                    b.Property<Guid>("Gid")
                        .HasColumnType("uuid")
                        .HasColumnName("gid");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uuid")
                        .HasColumnName("uid");

                    b.HasKey("Gid", "Uid")
                        .HasName("res_groups_users_rel_pkey");

                    b.HasIndex(new[] { "Uid", "Gid" }, "res_groups_users_rel_uid_gid_idx")
                        .HasDatabaseName("res_groups_users_rel_uid_gid_idx");

                    b.ToTable("res_groups_users_rel", (string)null);
                });

            modelBuilder.Entity("ResLangInstallRel", b =>
                {
                    b.Property<Guid>("LanguageWizardId")
                        .HasColumnType("uuid")
                        .HasColumnName("language_wizard_id");

                    b.Property<long>("LangId")
                        .HasColumnType("bigint")
                        .HasColumnName("lang_id");

                    b.HasKey("LanguageWizardId", "LangId")
                        .HasName("res_lang_install_rel_pkey");

                    b.HasIndex(new[] { "LangId", "LanguageWizardId" }, "res_lang_install_rel_lang_id_language_wizard_id_idx")
                        .HasDatabaseName("res_lang_install_rel_lang_id_language_wizard_id_idx");

                    b.ToTable("res_lang_install_rel", (string)null);
                });

            modelBuilder.Entity("ResPartnerResPartnerCategoryRel", b =>
                {
                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<Guid>("PartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("partner_id");

                    b.HasKey("CategoryId", "PartnerId")
                        .HasName("res_partner_res_partner_category_rel_pkey");

                    b.HasIndex(new[] { "PartnerId", "CategoryId" }, "res_partner_res_partner_category_rel_partner_id_category_id_idx")
                        .HasDatabaseName("res_partner_res_partner_category_rel_partner_id_category_id_idx");

                    b.ToTable("res_partner_res_partner_category_rel", (string)null);
                });

            modelBuilder.Entity("RuleGroupRel", b =>
                {
                    b.Property<Guid>("RuleGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("rule_group_id");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.HasKey("RuleGroupId", "GroupId")
                        .HasName("rule_group_rel_pkey");

                    b.HasIndex(new[] { "GroupId", "RuleGroupId" }, "rule_group_rel_group_id_rule_group_id_idx")
                        .HasDatabaseName("rule_group_rel_group_id_rule_group_id_idx");

                    b.ToTable("rule_group_rel", (string)null);
                });

            modelBuilder.Entity("SaleAdvancePaymentInvSaleOrderRel", b =>
                {
                    b.Property<Guid>("SaleAdvancePaymentInvId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_advance_payment_inv_id");

                    b.Property<Guid>("SaleOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_order_id");

                    b.HasKey("SaleAdvancePaymentInvId", "SaleOrderId")
                        .HasName("sale_advance_payment_inv_sale_order_rel_pkey");

                    b.HasIndex(new[] { "SaleOrderId", "SaleAdvancePaymentInvId" }, "sale_advance_payment_inv_sale_sale_order_id_sale_advance_pa_idx")
                        .HasDatabaseName("sale_advance_payment_inv_sale_sale_order_id_sale_advance_pa_idx");

                    b.ToTable("sale_advance_payment_inv_sale_order_rel", (string)null);
                });

            modelBuilder.Entity("SaleOrderLineInvoiceRel", b =>
                {
                    b.Property<Guid>("InvoiceLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_line_id");

                    b.Property<Guid>("OrderLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_line_id");

                    b.HasKey("InvoiceLineId", "OrderLineId")
                        .HasName("sale_order_line_invoice_rel_pkey");

                    b.HasIndex(new[] { "OrderLineId", "InvoiceLineId" }, "sale_order_line_invoice_rel_order_line_id_invoice_line_id_idx")
                        .HasDatabaseName("sale_order_line_invoice_rel_order_line_id_invoice_line_id_idx");

                    b.ToTable("sale_order_line_invoice_rel", (string)null);
                });

            modelBuilder.Entity("SaleOrderTagRel", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.HasKey("OrderId", "TagId")
                        .HasName("sale_order_tag_rel_pkey");

                    b.HasIndex(new[] { "TagId", "OrderId" }, "sale_order_tag_rel_tag_id_order_id_idx")
                        .HasDatabaseName("sale_order_tag_rel_tag_id_order_id_idx");

                    b.ToTable("sale_order_tag_rel", (string)null);
                });

            modelBuilder.Entity("SaleOrderTransactionRel", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("transaction_id");

                    b.Property<Guid>("SaleOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_order_id");

                    b.HasKey("TransactionId", "SaleOrderId")
                        .HasName("sale_order_transaction_rel_pkey");

                    b.HasIndex(new[] { "SaleOrderId", "TransactionId" }, "sale_order_transaction_rel_sale_order_id_transaction_id_idx")
                        .HasDatabaseName("sale_order_transaction_rel_sale_order_id_transaction_id_idx");

                    b.ToTable("sale_order_transaction_rel", (string)null);
                });

            modelBuilder.Entity("SmsTemplateSmsTemplateResetRel", b =>
                {
                    b.Property<Guid>("SmsTemplateResetId")
                        .HasColumnType("uuid")
                        .HasColumnName("sms_template_reset_id");

                    b.Property<Guid>("SmsTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("sms_template_id");

                    b.HasKey("SmsTemplateResetId", "SmsTemplateId")
                        .HasName("sms_template_sms_template_reset_rel_pkey");

                    b.HasIndex(new[] { "SmsTemplateId", "SmsTemplateResetId" }, "sms_template_sms_template_res_sms_template_id_sms_template__idx")
                        .HasDatabaseName("sms_template_sms_template_res_sms_template_id_sms_template__idx");

                    b.ToTable("sms_template_sms_template_reset_rel", (string)null);
                });

            modelBuilder.Entity("StockConflictQuantRel", b =>
                {
                    b.Property<Guid>("StockInventoryConflictId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_inventory_conflict_id");

                    b.Property<Guid>("StockQuantId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_quant_id");

                    b.HasKey("StockInventoryConflictId", "StockQuantId")
                        .HasName("stock_conflict_quant_rel_pkey");

                    b.HasIndex(new[] { "StockQuantId", "StockInventoryConflictId" }, "stock_conflict_quant_rel_stock_quant_id_stock_inventory_con_idx")
                        .HasDatabaseName("stock_conflict_quant_rel_stock_quant_id_stock_inventory_con_idx");

                    b.ToTable("stock_conflict_quant_rel", (string)null);
                });

            modelBuilder.Entity("StockInventoryAdjustmentNameStockQuantRel", b =>
                {
                    b.Property<Guid>("StockInventoryAdjustmentNameId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_inventory_adjustment_name_id");

                    b.Property<Guid>("StockQuantId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_quant_id");

                    b.HasKey("StockInventoryAdjustmentNameId", "StockQuantId")
                        .HasName("stock_inventory_adjustment_name_stock_quant_rel_pkey");

                    b.HasIndex(new[] { "StockQuantId", "StockInventoryAdjustmentNameId" }, "stock_inventory_adjustment_na_stock_quant_id_stock_inventor_idx")
                        .HasDatabaseName("stock_inventory_adjustment_na_stock_quant_id_stock_inventor_idx");

                    b.ToTable("stock_inventory_adjustment_name_stock_quant_rel", (string)null);
                });

            modelBuilder.Entity("StockInventoryConflictStockQuantRel", b =>
                {
                    b.Property<Guid>("StockInventoryConflictId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_inventory_conflict_id");

                    b.Property<Guid>("StockQuantId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_quant_id");

                    b.HasKey("StockInventoryConflictId", "StockQuantId")
                        .HasName("stock_inventory_conflict_stock_quant_rel_pkey");

                    b.HasIndex(new[] { "StockQuantId", "StockInventoryConflictId" }, "stock_inventory_conflict_stoc_stock_quant_id_stock_inventor_idx")
                        .HasDatabaseName("stock_inventory_conflict_stoc_stock_quant_id_stock_inventor_idx");

                    b.ToTable("stock_inventory_conflict_stock_quant_rel", (string)null);
                });

            modelBuilder.Entity("StockInventoryWarningStockQuantRel", b =>
                {
                    b.Property<Guid>("StockInventoryWarningId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_inventory_warning_id");

                    b.Property<Guid>("StockQuantId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_quant_id");

                    b.HasKey("StockInventoryWarningId", "StockQuantId")
                        .HasName("stock_inventory_warning_stock_quant_rel_pkey");

                    b.HasIndex(new[] { "StockQuantId", "StockInventoryWarningId" }, "stock_inventory_warning_stock_stock_quant_id_stock_inventor_idx")
                        .HasDatabaseName("stock_inventory_warning_stock_stock_quant_id_stock_inventor_idx");

                    b.ToTable("stock_inventory_warning_stock_quant_rel", (string)null);
                });

            modelBuilder.Entity("StockMoveLineConsumeRel", b =>
                {
                    b.Property<Guid>("ConsumeLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("consume_line_id");

                    b.Property<Guid>("ProduceLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("produce_line_id");

                    b.HasKey("ConsumeLineId", "ProduceLineId")
                        .HasName("stock_move_line_consume_rel_pkey");

                    b.HasIndex(new[] { "ProduceLineId", "ConsumeLineId" }, "stock_move_line_consume_rel_produce_line_id_consume_line_id_idx")
                        .HasDatabaseName("stock_move_line_consume_rel_produce_line_id_consume_line_id_idx");

                    b.ToTable("stock_move_line_consume_rel", (string)null);
                });

            modelBuilder.Entity("StockMoveMoveRel", b =>
                {
                    b.Property<Guid>("MoveOrigId")
                        .HasColumnType("uuid")
                        .HasColumnName("move_orig_id");

                    b.Property<Guid>("MoveDestId")
                        .HasColumnType("uuid")
                        .HasColumnName("move_dest_id");

                    b.HasKey("MoveOrigId", "MoveDestId")
                        .HasName("stock_move_move_rel_pkey");

                    b.HasIndex(new[] { "MoveDestId", "MoveOrigId" }, "stock_move_move_rel_move_dest_id_move_orig_id_idx")
                        .HasDatabaseName("stock_move_move_rel_move_dest_id_move_orig_id_idx");

                    b.ToTable("stock_move_move_rel", (string)null);
                });

            modelBuilder.Entity("StockNotificationProductPartnerRel", b =>
                {
                    b.Property<Guid>("ProductProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_product_id");

                    b.Property<Guid>("ResPartnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("res_partner_id");

                    b.HasKey("ProductProductId", "ResPartnerId")
                        .HasName("stock_notification_product_partner_rel_pkey");

                    b.HasIndex(new[] { "ResPartnerId", "ProductProductId" }, "stock_notification_product_pa_res_partner_id_product_produc_idx")
                        .HasDatabaseName("stock_notification_product_pa_res_partner_id_product_produc_idx");

                    b.ToTable("stock_notification_product_partner_rel", (string)null);
                });

            modelBuilder.Entity("StockOrderpointSnoozeStockWarehouseOrderpointRel", b =>
                {
                    b.Property<Guid>("StockOrderpointSnoozeId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_orderpoint_snooze_id");

                    b.Property<Guid>("StockWarehouseOrderpointId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_warehouse_orderpoint_id");

                    b.HasKey("StockOrderpointSnoozeId", "StockWarehouseOrderpointId")
                        .HasName("stock_orderpoint_snooze_stock_warehouse_orderpoint_rel_pkey");

                    b.HasIndex(new[] { "StockWarehouseOrderpointId", "StockOrderpointSnoozeId" }, "stock_orderpoint_snooze_stock_stock_warehouse_orderpoint_id_idx")
                        .HasDatabaseName("stock_orderpoint_snooze_stock_stock_warehouse_orderpoint_id_idx");

                    b.ToTable("stock_orderpoint_snooze_stock_warehouse_orderpoint_rel", (string)null);
                });

            modelBuilder.Entity("StockPackageTypeStockPutawayRuleRel", b =>
                {
                    b.Property<Guid>("StockPutawayRuleId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_putaway_rule_id");

                    b.Property<Guid>("StockPackageTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_package_type_id");

                    b.HasKey("StockPutawayRuleId", "StockPackageTypeId")
                        .HasName("stock_package_type_stock_putaway_rule_rel_pkey");

                    b.HasIndex(new[] { "StockPackageTypeId", "StockPutawayRuleId" }, "stock_package_type_stock_puta_stock_package_type_id_stock_p_idx")
                        .HasDatabaseName("stock_package_type_stock_puta_stock_package_type_id_stock_p_idx");

                    b.ToTable("stock_package_type_stock_putaway_rule_rel", (string)null);
                });

            modelBuilder.Entity("StockPickingBackorderRel", b =>
                {
                    b.Property<Guid>("StockBackorderConfirmationId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_backorder_confirmation_id");

                    b.Property<Guid>("StockPickingId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_picking_id");

                    b.HasKey("StockBackorderConfirmationId", "StockPickingId")
                        .HasName("stock_picking_backorder_rel_pkey");

                    b.HasIndex(new[] { "StockPickingId", "StockBackorderConfirmationId" }, "stock_picking_backorder_rel_stock_picking_id_stock_backorde_idx")
                        .HasDatabaseName("stock_picking_backorder_rel_stock_picking_id_stock_backorde_idx");

                    b.ToTable("stock_picking_backorder_rel", (string)null);
                });

            modelBuilder.Entity("StockPickingSmsRel", b =>
                {
                    b.Property<Guid>("ConfirmStockSmsId")
                        .HasColumnType("uuid")
                        .HasColumnName("confirm_stock_sms_id");

                    b.Property<Guid>("StockPickingId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_picking_id");

                    b.HasKey("ConfirmStockSmsId", "StockPickingId")
                        .HasName("stock_picking_sms_rel_pkey");

                    b.HasIndex(new[] { "StockPickingId", "ConfirmStockSmsId" }, "stock_picking_sms_rel_stock_picking_id_confirm_stock_sms_id_idx")
                        .HasDatabaseName("stock_picking_sms_rel_stock_picking_id_confirm_stock_sms_id_idx");

                    b.ToTable("stock_picking_sms_rel", (string)null);
                });

            modelBuilder.Entity("StockPickingTransferRel", b =>
                {
                    b.Property<Guid>("StockImmediateTransferId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_immediate_transfer_id");

                    b.Property<Guid>("StockPickingId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_picking_id");

                    b.HasKey("StockImmediateTransferId", "StockPickingId")
                        .HasName("stock_picking_transfer_rel_pkey");

                    b.HasIndex(new[] { "StockPickingId", "StockImmediateTransferId" }, "stock_picking_transfer_rel_stock_picking_id_stock_immediate_idx")
                        .HasDatabaseName("stock_picking_transfer_rel_stock_picking_id_stock_immediate_idx");

                    b.ToTable("stock_picking_transfer_rel", (string)null);
                });

            modelBuilder.Entity("StockQuantStockRequestCountRel", b =>
                {
                    b.Property<Guid>("StockRequestCountId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_request_count_id");

                    b.Property<Guid>("StockQuantId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_quant_id");

                    b.HasKey("StockRequestCountId", "StockQuantId")
                        .HasName("stock_quant_stock_request_count_rel_pkey");

                    b.HasIndex(new[] { "StockQuantId", "StockRequestCountId" }, "stock_quant_stock_request_cou_stock_quant_id_stock_request__idx")
                        .HasDatabaseName("stock_quant_stock_request_cou_stock_quant_id_stock_request__idx");

                    b.ToTable("stock_quant_stock_request_count_rel", (string)null);
                });

            modelBuilder.Entity("StockQuantStockTrackConfirmationRel", b =>
                {
                    b.Property<Guid>("StockTrackConfirmationId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_track_confirmation_id");

                    b.Property<Guid>("StockQuantId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_quant_id");

                    b.HasKey("StockTrackConfirmationId", "StockQuantId")
                        .HasName("stock_quant_stock_track_confirmation_rel_pkey");

                    b.HasIndex(new[] { "StockQuantId", "StockTrackConfirmationId" }, "stock_quant_stock_track_confi_stock_quant_id_stock_track_co_idx")
                        .HasDatabaseName("stock_quant_stock_track_confi_stock_quant_id_stock_track_co_idx");

                    b.ToTable("stock_quant_stock_track_confirmation_rel", (string)null);
                });

            modelBuilder.Entity("StockRouteCateg", b =>
                {
                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.Property<long>("CategId")
                        .HasColumnType("bigint")
                        .HasColumnName("categ_id");

                    b.HasKey("RouteId", "CategId")
                        .HasName("stock_route_categ_pkey");

                    b.HasIndex(new[] { "CategId", "RouteId" }, "stock_route_categ_categ_id_route_id_idx")
                        .HasDatabaseName("stock_route_categ_categ_id_route_id_idx");

                    b.ToTable("stock_route_categ", (string)null);
                });

            modelBuilder.Entity("StockRouteMove", b =>
                {
                    b.Property<Guid>("MoveId")
                        .HasColumnType("uuid")
                        .HasColumnName("move_id");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.HasKey("MoveId", "RouteId")
                        .HasName("stock_route_move_pkey");

                    b.HasIndex(new[] { "RouteId", "MoveId" }, "stock_route_move_route_id_move_id_idx")
                        .HasDatabaseName("stock_route_move_route_id_move_id_idx");

                    b.ToTable("stock_route_move", (string)null);
                });

            modelBuilder.Entity("StockRoutePackaging", b =>
                {
                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.Property<Guid>("PackagingId")
                        .HasColumnType("uuid")
                        .HasColumnName("packaging_id");

                    b.HasKey("RouteId", "PackagingId")
                        .HasName("stock_route_packaging_pkey");

                    b.HasIndex(new[] { "PackagingId", "RouteId" }, "stock_route_packaging_packaging_id_route_id_idx")
                        .HasDatabaseName("stock_route_packaging_packaging_id_route_id_idx");

                    b.ToTable("stock_route_packaging", (string)null);
                });

            modelBuilder.Entity("StockRouteProduct", b =>
                {
                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasKey("RouteId", "ProductId")
                        .HasName("stock_route_product_pkey");

                    b.HasIndex(new[] { "ProductId", "RouteId" }, "stock_route_product_product_id_route_id_idx")
                        .HasDatabaseName("stock_route_product_product_id_route_id_idx");

                    b.ToTable("stock_route_product", (string)null);
                });

            modelBuilder.Entity("StockRouteStockRulesReportRel", b =>
                {
                    b.Property<Guid>("StockRulesReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_rules_report_id");

                    b.Property<Guid>("StockRouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_route_id");

                    b.HasKey("StockRulesReportId", "StockRouteId")
                        .HasName("stock_route_stock_rules_report_rel_pkey");

                    b.HasIndex(new[] { "StockRouteId", "StockRulesReportId" }, "stock_route_stock_rules_repor_stock_route_id_stock_rules_re_idx")
                        .HasDatabaseName("stock_route_stock_rules_repor_stock_route_id_stock_rules_re_idx");

                    b.ToTable("stock_route_stock_rules_report_rel", (string)null);
                });

            modelBuilder.Entity("StockRouteWarehouse", b =>
                {
                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid")
                        .HasColumnName("route_id");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("warehouse_id");

                    b.HasKey("RouteId", "WarehouseId")
                        .HasName("stock_route_warehouse_pkey");

                    b.HasIndex(new[] { "WarehouseId", "RouteId" }, "stock_route_warehouse_warehouse_id_route_id_idx")
                        .HasDatabaseName("stock_route_warehouse_warehouse_id_route_id_idx");

                    b.ToTable("stock_route_warehouse", (string)null);
                });

            modelBuilder.Entity("StockRulesReportStockWarehouseRel", b =>
                {
                    b.Property<Guid>("StockRulesReportId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_rules_report_id");

                    b.Property<Guid>("StockWarehouseId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_warehouse_id");

                    b.HasKey("StockRulesReportId", "StockWarehouseId")
                        .HasName("stock_rules_report_stock_warehouse_rel_pkey");

                    b.HasIndex(new[] { "StockWarehouseId", "StockRulesReportId" }, "stock_rules_report_stock_ware_stock_warehouse_id_stock_rule_idx")
                        .HasDatabaseName("stock_rules_report_stock_ware_stock_warehouse_id_stock_rule_idx");

                    b.ToTable("stock_rules_report_stock_warehouse_rel", (string)null);
                });

            modelBuilder.Entity("StockWhResupplyTable", b =>
                {
                    b.Property<Guid>("SuppliedWhId")
                        .HasColumnType("uuid")
                        .HasColumnName("supplied_wh_id");

                    b.Property<Guid>("SupplierWhId")
                        .HasColumnType("uuid")
                        .HasColumnName("supplier_wh_id");

                    b.HasKey("SuppliedWhId", "SupplierWhId")
                        .HasName("stock_wh_resupply_table_pkey");

                    b.HasIndex(new[] { "SupplierWhId", "SuppliedWhId" }, "stock_wh_resupply_table_supplier_wh_id_supplied_wh_id_idx")
                        .HasDatabaseName("stock_wh_resupply_table_supplier_wh_id_supplied_wh_id_idx");

                    b.ToTable("stock_wh_resupply_table", (string)null);
                });

            modelBuilder.Entity("SummaryEmpRel", b =>
                {
                    b.Property<Guid>("SumId")
                        .HasColumnType("uuid")
                        .HasColumnName("sum_id");

                    b.Property<Guid>("EmpId")
                        .HasColumnType("uuid")
                        .HasColumnName("emp_id");

                    b.HasKey("SumId", "EmpId")
                        .HasName("summary_emp_rel_pkey");

                    b.HasIndex(new[] { "EmpId", "SumId" }, "summary_emp_rel_emp_id_sum_id_idx")
                        .HasDatabaseName("summary_emp_rel_emp_id_sum_id_idx");

                    b.ToTable("summary_emp_rel", (string)null);
                });

            modelBuilder.Entity("TaskDependenciesRel", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_id");

                    b.Property<Guid>("DependsOnId")
                        .HasColumnType("uuid")
                        .HasColumnName("depends_on_id");

                    b.HasKey("TaskId", "DependsOnId")
                        .HasName("task_dependencies_rel_pkey");

                    b.HasIndex(new[] { "DependsOnId", "TaskId" }, "task_dependencies_rel_depends_on_id_task_id_idx")
                        .HasDatabaseName("task_dependencies_rel_depends_on_id_task_id_idx");

                    b.ToTable("task_dependencies_rel", (string)null);
                });

            modelBuilder.Entity("TeamFavoriteUserRel", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("TeamId", "UserId")
                        .HasName("team_favorite_user_rel_pkey");

                    b.HasIndex(new[] { "UserId", "TeamId" }, "team_favorite_user_rel_user_id_team_id_idx")
                        .HasDatabaseName("team_favorite_user_rel_user_id_team_id_idx");

                    b.ToTable("team_favorite_user_rel", (string)null);
                });

            modelBuilder.Entity("UtmTagRel", b =>
                {
                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.Property<long>("CampaignId")
                        .HasColumnType("bigint")
                        .HasColumnName("campaign_id");

                    b.HasKey("TagId", "CampaignId")
                        .HasName("utm_tag_rel_pkey");

                    b.HasIndex(new[] { "CampaignId", "TagId" }, "utm_tag_rel_campaign_id_tag_id_idx")
                        .HasDatabaseName("utm_tag_rel_campaign_id_tag_id_idx");

                    b.ToTable("utm_tag_rel", (string)null);
                });

            modelBuilder.Entity("WebsiteLangRel", b =>
                {
                    b.Property<Guid>("WebsiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("website_id");

                    b.Property<long>("LangId")
                        .HasColumnType("bigint")
                        .HasColumnName("lang_id");

                    b.HasKey("WebsiteId", "LangId")
                        .HasName("website_lang_rel_pkey");

                    b.HasIndex(new[] { "LangId", "WebsiteId" }, "website_lang_rel_lang_id_website_id_idx")
                        .HasDatabaseName("website_lang_rel_lang_id_website_id_idx");

                    b.ToTable("website_lang_rel", (string)null);
                });

            modelBuilder.Entity("AccountAccountAccountBalanceReportRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccount", null)
                        .WithMany()
                        .HasForeignKey("AccountAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_account_balance_report__account_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountBalanceReport", null)
                        .WithMany()
                        .HasForeignKey("AccountBalanceReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_account_balance__account_balance_report_id_fkey");
                });

            modelBuilder.Entity("AccountAccountAccountCommonAccountReportRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccount", null)
                        .WithMany()
                        .HasForeignKey("AccountAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_account_common_account__account_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountCommonAccountReport", null)
                        .WithMany()
                        .HasForeignKey("AccountCommonAccountReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_account_commo_account_common_account_repor_fkey");
                });

            modelBuilder.Entity("AccountAccountAccountJournalRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccount", null)
                        .WithMany()
                        .HasForeignKey("AccountAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_account_journal_rel_account_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", null)
                        .WithMany()
                        .HasForeignKey("AccountJournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_account_journal_rel_account_journal_id_fkey");
                });

            modelBuilder.Entity("AccountAccountAccountReportGeneralLedgerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccount", null)
                        .WithMany()
                        .HasForeignKey("AccountAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_account_report_general__account_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountReportGeneralLedger", null)
                        .WithMany()
                        .HasForeignKey("AccountReportGeneralLedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_account_repor_account_report_general_ledge_fkey");
                });

            modelBuilder.Entity("AccountAccountAccountTag", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccount", null)
                        .WithMany()
                        .HasForeignKey("AccountAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_account_tag_account_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTag", null)
                        .WithMany()
                        .HasForeignKey("AccountAccountTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_account_tag_account_account_tag_id_fkey");
                });

            modelBuilder.Entity("AccountAccountBankbookReport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccount", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_bankbook_report_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountBankbookReport", null)
                        .WithMany()
                        .HasForeignKey("ReportLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_bankbook_report_report_line_id_fkey");
                });

            modelBuilder.Entity("AccountAccountCashbookReport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccount", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_cashbook_report_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountCashbookReport", null)
                        .WithMany()
                        .HasForeignKey("ReportLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_cashbook_report_report_line_id_fkey");
                });

            modelBuilder.Entity("AccountAccountDaybookReport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccount", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_daybook_report_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountDaybookReport", null)
                        .WithMany()
                        .HasForeignKey("ReportLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_daybook_report_report_line_id_fkey");
                });

            modelBuilder.Entity("AccountAccountFinancialReport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccount", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_financial_report_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountFinancialReport", null)
                        .WithMany()
                        .HasForeignKey("ReportLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_financial_report_report_line_id_fkey");
                });

            modelBuilder.Entity("AccountAccountFinancialReportType", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccountType", null)
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_financial_report_type_account_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountFinancialReport", null)
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_financial_report_type_report_id_fkey");
                });

            modelBuilder.Entity("AccountAccountTagAccountMoveLineRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccountTag", null)
                        .WithMany()
                        .HasForeignKey("AccountAccountTagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("account_account_tag_account_move_li_account_account_tag_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMoveLine", null)
                        .WithMany()
                        .HasForeignKey("AccountMoveLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_tag_account_move_line_account_move_line_id_fkey");
                });

            modelBuilder.Entity("AccountAccountTagAccountTaxRepartitionLineRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccountTag", null)
                        .WithMany()
                        .HasForeignKey("AccountAccountTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_tag_account_tax_rep_account_account_tag_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTaxRepartitionLine", null)
                        .WithMany()
                        .HasForeignKey("AccountTaxRepartitionLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_tag_account_t_account_tax_repartition_line_fkey");
                });

            modelBuilder.Entity("AccountAccountTagProductTemplateRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccountTag", null)
                        .WithMany()
                        .HasForeignKey("AccountAccountTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_tag_product_templat_account_account_tag_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplate", null)
                        .WithMany()
                        .HasForeignKey("ProductTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_tag_product_template_r_product_template_id_fkey");
                });

            modelBuilder.Entity("AccountAccountTaxDefaultRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccount", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_tax_default_rel_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTax", null)
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_tax_default_rel_tax_id_fkey");
                });

            modelBuilder.Entity("AccountAccountTemplateAccountTag", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccountTag", null)
                        .WithMany()
                        .HasForeignKey("AccountAccountTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_template_account_ta_account_account_tag_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", null)
                        .WithMany()
                        .HasForeignKey("AccountAccountTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_template_accou_account_account_template_id_fkey");
                });

            modelBuilder.Entity("AccountAccountTemplateTaxRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_template_tax_rel_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTaxTemplate", null)
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_account_template_tax_rel_tax_id_fkey");
                });

            modelBuilder.Entity("AccountAgedTrialBalanceAccountJournalRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAgedTrialBalance", null)
                        .WithMany()
                        .HasForeignKey("AccountAgedTrialBalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_aged_trial_balance_ac_account_aged_trial_balance_i_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", null)
                        .WithMany()
                        .HasForeignKey("AccountJournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_aged_trial_balance_account_jour_account_journal_id_fkey");
                });

            modelBuilder.Entity("AccountAgedTrialBalanceResPartnerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAgedTrialBalance", null)
                        .WithMany()
                        .HasForeignKey("AccountAgedTrialBalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_aged_trial_balance_re_account_aged_trial_balance_i_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("ResPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_aged_trial_balance_res_partner_rel_res_partner_id_fkey");
                });

            modelBuilder.Entity("AccountAnalyticAccountAccountCommonAccountReportRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAnalyticAccount", null)
                        .WithMany()
                        .HasForeignKey("AccountAnalyticAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_analytic_account_accou_account_analytic_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountCommonAccountReport", null)
                        .WithMany()
                        .HasForeignKey("AccountCommonAccountReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_analytic_account_acco_account_common_account_repor_fkey");
                });

            modelBuilder.Entity("AccountAnalyticAccountAccountReportGeneralLedgerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAnalyticAccount", null)
                        .WithMany()
                        .HasForeignKey("AccountAnalyticAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_analytic_account_acco_account_analytic_account_id_fkey1");

                    b.HasOne("Bamboo.Core.Models.AccountReportGeneralLedger", null)
                        .WithMany()
                        .HasForeignKey("AccountReportGeneralLedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_analytic_account_acco_account_report_general_ledge_fkey");
                });

            modelBuilder.Entity("AccountAutomaticEntryWizardAccountMoveLineRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAutomaticEntryWizard", null)
                        .WithMany()
                        .HasForeignKey("AccountAutomaticEntryWizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_automatic_entry_wizar_account_automatic_entry_wiza_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMoveLine", null)
                        .WithMany()
                        .HasForeignKey("AccountMoveLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_automatic_entry_wizard_accoun_account_move_line_id_fkey");
                });

            modelBuilder.Entity("AccountBalanceReportJournalRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountBalanceReport", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_balance_report_journal_rel_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", null)
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_balance_report_journal_rel_journal_id_fkey");
                });

            modelBuilder.Entity("AccountBalanceReportResPartnerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountBalanceReport", null)
                        .WithMany()
                        .HasForeignKey("AccountBalanceReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_balance_report_res_partn_account_balance_report_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("ResPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_balance_report_res_partner_rel_res_partner_id_fkey");
                });

            modelBuilder.Entity("AccountBankStatementImportIrAttachmentRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountBankStatementImport", null)
                        .WithMany()
                        .HasForeignKey("AccountBankStatementImportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_bank_statement_import_account_bank_statement_impor_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", null)
                        .WithMany()
                        .HasForeignKey("IrAttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_bank_statement_import_ir_attachme_ir_attachment_id_fkey");
                });

            modelBuilder.Entity("AccountBankStatementIrAttachmentRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountBankStatement", null)
                        .WithMany()
                        .HasForeignKey("AccountBankStatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_bank_statement_ir_attach_account_bank_statement_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", null)
                        .WithMany()
                        .HasForeignKey("IrAttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_bank_statement_ir_attachment_rel_ir_attachment_id_fkey");
                });

            modelBuilder.Entity("AccountBankbookReportAccountJournalRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountBankbookReport", null)
                        .WithMany()
                        .HasForeignKey("AccountBankbookReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_bankbook_report_account_account_bankbook_report_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", null)
                        .WithMany()
                        .HasForeignKey("AccountJournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_bankbook_report_account_journal_account_journal_id_fkey");
                });

            modelBuilder.Entity("AccountBudgetRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccount", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_budget_rel_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountBudgetPost", null)
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_budget_rel_budget_id_fkey");
                });

            modelBuilder.Entity("AccountCashbookReportAccountJournalRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountCashbookReport", null)
                        .WithMany()
                        .HasForeignKey("AccountCashbookReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_cashbook_report_account_account_cashbook_report_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", null)
                        .WithMany()
                        .HasForeignKey("AccountJournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_cashbook_report_account_journal_account_journal_id_fkey");
                });

            modelBuilder.Entity("AccountCommonAccountReportAccountJournalRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountCommonAccountReport", null)
                        .WithMany()
                        .HasForeignKey("AccountCommonAccountReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_common_account_report_account_common_account_repor_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", null)
                        .WithMany()
                        .HasForeignKey("AccountJournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_common_account_report_account_j_account_journal_id_fkey");
                });

            modelBuilder.Entity("AccountCommonAccountReportResPartnerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountCommonAccountReport", null)
                        .WithMany()
                        .HasForeignKey("AccountCommonAccountReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_common_account_repor_account_common_account_repor_fkey1");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("ResPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_common_account_report_res_partner_r_res_partner_id_fkey");
                });

            modelBuilder.Entity("AccountCommonJournalReportAccountJournalRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountCommonJournalReport", null)
                        .WithMany()
                        .HasForeignKey("AccountCommonJournalReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_common_journal_report_account_common_journal_repor_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", null)
                        .WithMany()
                        .HasForeignKey("AccountJournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_common_journal_report_account_j_account_journal_id_fkey");
                });

            modelBuilder.Entity("AccountCommonPartnerReportAccountJournalRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountCommonPartnerReport", null)
                        .WithMany()
                        .HasForeignKey("AccountCommonPartnerReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_common_partner_report_account_common_partner_repor_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", null)
                        .WithMany()
                        .HasForeignKey("AccountJournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_common_partner_report_account_j_account_journal_id_fkey");
                });

            modelBuilder.Entity("AccountCommonPartnerReportResPartnerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountCommonPartnerReport", null)
                        .WithMany()
                        .HasForeignKey("AccountCommonPartnerReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_common_partner_repor_account_common_partner_repor_fkey1");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("ResPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_common_partner_report_res_partner_r_res_partner_id_fkey");
                });

            modelBuilder.Entity("AccountCommonReportAccountJournalRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountCommonReport", null)
                        .WithMany()
                        .HasForeignKey("AccountCommonReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_common_report_account_jou_account_common_report_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", null)
                        .WithMany()
                        .HasForeignKey("AccountJournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_common_report_account_journal_r_account_journal_id_fkey");
                });

            modelBuilder.Entity("AccountDaybookReportAccountJournalRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountDaybookReport", null)
                        .WithMany()
                        .HasForeignKey("AccountDaybookReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_daybook_report_account_j_account_daybook_report_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", null)
                        .WithMany()
                        .HasForeignKey("AccountJournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_daybook_report_account_journal__account_journal_id_fkey");
                });

            modelBuilder.Entity("AccountEdiFormatAccountJournalRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountEdiFormat", null)
                        .WithMany()
                        .HasForeignKey("AccountEdiFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_edi_format_account_journal_r_account_edi_format_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", null)
                        .WithMany()
                        .HasForeignKey("AccountJournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_edi_format_account_journal_rel_account_journal_id_fkey");
                });

            modelBuilder.Entity("AccountFiscalPositionPosConfigRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountFiscalPosition", null)
                        .WithMany()
                        .HasForeignKey("AccountFiscalPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_fiscal_position_pos_con_account_fiscal_position_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PosConfig", null)
                        .WithMany()
                        .HasForeignKey("PosConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_fiscal_position_pos_config_rel_pos_config_id_fkey");
                });

            modelBuilder.Entity("AccountFiscalPositionResConfigSettingsRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountFiscalPosition", null)
                        .WithMany()
                        .HasForeignKey("AccountFiscalPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_fiscal_position_res_con_account_fiscal_position_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResConfigSetting", null)
                        .WithMany()
                        .HasForeignKey("ResConfigSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_fiscal_position_res_config__res_config_settings_id_fkey");
                });

            modelBuilder.Entity("AccountFiscalPositionResCountryStateRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountFiscalPosition", null)
                        .WithMany()
                        .HasForeignKey("AccountFiscalPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_fiscal_position_res_cou_account_fiscal_position_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountryState", null)
                        .WithMany()
                        .HasForeignKey("ResCountryStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_fiscal_position_res_country_s_res_country_state_id_fkey");
                });

            modelBuilder.Entity("AccountFiscalPositionTemplateResCountryStateRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountFiscalPositionTemplate", null)
                        .WithMany()
                        .HasForeignKey("AccountFiscalPositionTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_fiscal_position_templ_account_fiscal_position_temp_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountryState", null)
                        .WithMany()
                        .HasForeignKey("ResCountryStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_fiscal_position_template_res__res_country_state_id_fkey");
                });

            modelBuilder.Entity("AccountInvoiceTransactionRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountMove", null)
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_invoice_transaction_rel_invoice_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PaymentTransaction", null)
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_invoice_transaction_rel_transaction_id_fkey");
                });

            modelBuilder.Entity("AccountJournalAccountJournalGroupRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountJournalGroup", null)
                        .WithMany()
                        .HasForeignKey("AccountJournalGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_journal_account_journal_g_account_journal_group_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", null)
                        .WithMany()
                        .HasForeignKey("AccountJournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_journal_account_journal_group_r_account_journal_id_fkey");
                });

            modelBuilder.Entity("AccountJournalAccountPrintJournalRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountJournal", null)
                        .WithMany()
                        .HasForeignKey("AccountJournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_journal_account_print_journal_r_account_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountPrintJournal", null)
                        .WithMany()
                        .HasForeignKey("AccountPrintJournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_journal_account_print_jou_account_print_journal_id_fkey");
                });

            modelBuilder.Entity("AccountJournalAccountReconcileModelRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountJournal", null)
                        .WithMany()
                        .HasForeignKey("AccountJournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_journal_account_reconcile_model_account_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountReconcileModel", null)
                        .WithMany()
                        .HasForeignKey("AccountReconcileModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_journal_account_reconci_account_reconcile_model_id_fkey");
                });

            modelBuilder.Entity("AccountJournalAccountReconcileModelTemplateRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountJournal", null)
                        .WithMany()
                        .HasForeignKey("AccountJournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_journal_account_reconcile_mode_account_journal_id_fkey1");

                    b.HasOne("Bamboo.Core.Models.AccountReconcileModelTemplate", null)
                        .WithMany()
                        .HasForeignKey("AccountReconcileModelTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_journal_account_recon_account_reconcile_model_temp_fkey");
                });

            modelBuilder.Entity("AccountJournalAccountReportPartnerLedgerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountJournal", null)
                        .WithMany()
                        .HasForeignKey("AccountJournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_journal_account_report_partner__account_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountReportPartnerLedger", null)
                        .WithMany()
                        .HasForeignKey("AccountReportPartnerLedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_journal_account_repor_account_report_partner_ledge_fkey");
                });

            modelBuilder.Entity("AccountJournalAccountTaxReportWizardRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountJournal", null)
                        .WithMany()
                        .HasForeignKey("AccountJournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_journal_account_tax_report_wiza_account_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTaxReportWizard", null)
                        .WithMany()
                        .HasForeignKey("AccountTaxReportWizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_journal_account_tax_r_account_tax_report_wizard_id_fkey");
                });

            modelBuilder.Entity("AccountJournalAccountingReportRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountJournal", null)
                        .WithMany()
                        .HasForeignKey("AccountJournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_journal_accounting_report_rel_account_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountingReport", null)
                        .WithMany()
                        .HasForeignKey("AccountingReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_journal_accounting_report_rel_accounting_report_id_fkey");
                });

            modelBuilder.Entity("AccountMoveAccountInvoiceSendRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountInvoiceSend", null)
                        .WithMany()
                        .HasForeignKey("AccountInvoiceSendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_move_account_invoice_send__account_invoice_send_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMove", null)
                        .WithMany()
                        .HasForeignKey("AccountMoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_move_account_invoice_send_rel_account_move_id_fkey");
                });

            modelBuilder.Entity("AccountMoveAccountResequenceWizardRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountMove", null)
                        .WithMany()
                        .HasForeignKey("AccountMoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_move_account_resequence_wizard_rel_account_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountResequenceWizard", null)
                        .WithMany()
                        .HasForeignKey("AccountResequenceWizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_move_account_resequen_account_resequence_wizard_id_fkey");
                });

            modelBuilder.Entity("AccountMoveLineAccountTaxRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountMoveLine", null)
                        .WithMany()
                        .HasForeignKey("AccountMoveLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_move_line_account_tax_rel_account_move_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTax", null)
                        .WithMany()
                        .HasForeignKey("AccountTaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_move_line_account_tax_rel_account_tax_id_fkey");
                });

            modelBuilder.Entity("AccountMovePurchaseOrderRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountMove", null)
                        .WithMany()
                        .HasForeignKey("AccountMoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_move_purchase_order_rel_account_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PurchaseOrder", null)
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_move_purchase_order_rel_purchase_order_id_fkey");
                });

            modelBuilder.Entity("AccountMoveReversalMove", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountMove", null)
                        .WithMany()
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_move_reversal_move_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMoveReversal", null)
                        .WithMany()
                        .HasForeignKey("ReversalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_move_reversal_move_reversal_id_fkey");
                });

            modelBuilder.Entity("AccountMoveReversalNewMove", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountMove", null)
                        .WithMany()
                        .HasForeignKey("NewMoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_move_reversal_new_move_new_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMoveReversal", null)
                        .WithMany()
                        .HasForeignKey("ReversalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_move_reversal_new_move_reversal_id_fkey");
                });

            modelBuilder.Entity("AccountPaymentAccountBankStatementLineRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountBankStatementLine", null)
                        .WithMany()
                        .HasForeignKey("AccountBankStatementLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_payment_account_bank__account_bank_statement_line__fkey");

                    b.HasOne("Bamboo.Core.Models.AccountPayment", null)
                        .WithMany()
                        .HasForeignKey("AccountPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_payment_account_bank_statement__account_payment_id_fkey");
                });

            modelBuilder.Entity("AccountPaymentRegisterMoveLineRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountMoveLine", null)
                        .WithMany()
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_payment_register_move_line_rel_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountPaymentRegister", null)
                        .WithMany()
                        .HasForeignKey("WizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_payment_register_move_line_rel_wizard_id_fkey");
                });

            modelBuilder.Entity("AccountReconcileModelLineAccountTaxRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountReconcileModelLine", null)
                        .WithMany()
                        .HasForeignKey("AccountReconcileModelLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_reconcile_model_line__account_reconcile_model_line_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTax", null)
                        .WithMany()
                        .HasForeignKey("AccountTaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("account_reconcile_model_line_account_tax_re_account_tax_id_fkey");
                });

            modelBuilder.Entity("AccountReconcileModelLineTemplateAccountTaxTemplateRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountReconcileModelLineTemplate", null)
                        .WithMany()
                        .HasForeignKey("AccountReconcileModelLineTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_reconcile_model_line_account_reconcile_model_line_fkey1");

                    b.HasOne("Bamboo.Core.Models.AccountTaxTemplate", null)
                        .WithMany()
                        .HasForeignKey("AccountTaxTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("account_reconcile_model_line_templ_account_tax_template_id_fkey");
                });

            modelBuilder.Entity("AccountReconcileModelResPartnerCategoryRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountReconcileModel", null)
                        .WithMany()
                        .HasForeignKey("AccountReconcileModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_reconcile_model_res_pa_account_reconcile_model_id_fkey1");

                    b.HasOne("Bamboo.Core.Models.ResPartnerCategory", null)
                        .WithMany()
                        .HasForeignKey("ResPartnerCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_reconcile_model_res_partne_res_partner_category_id_fkey");
                });

            modelBuilder.Entity("AccountReconcileModelResPartnerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountReconcileModel", null)
                        .WithMany()
                        .HasForeignKey("AccountReconcileModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_reconcile_model_res_par_account_reconcile_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("ResPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_reconcile_model_res_partner_rel_res_partner_id_fkey");
                });

            modelBuilder.Entity("AccountReconcileModelTemplateResPartnerCategoryRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountReconcileModelTemplate", null)
                        .WithMany()
                        .HasForeignKey("AccountReconcileModelTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_reconcile_model_temp_account_reconcile_model_temp_fkey1");

                    b.HasOne("Bamboo.Core.Models.ResPartnerCategory", null)
                        .WithMany()
                        .HasForeignKey("ResPartnerCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_reconcile_model_template_r_res_partner_category_id_fkey");
                });

            modelBuilder.Entity("AccountReconcileModelTemplateResPartnerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountReconcileModelTemplate", null)
                        .WithMany()
                        .HasForeignKey("AccountReconcileModelTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_reconcile_model_templ_account_reconcile_model_temp_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("ResPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_reconcile_model_template_res_partne_res_partner_id_fkey");
                });

            modelBuilder.Entity("AccountReportGeneralLedgerJournalRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountReportGeneralLedger", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_report_general_ledger_journal_rel_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", null)
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_report_general_ledger_journal_rel_journal_id_fkey");
                });

            modelBuilder.Entity("AccountReportGeneralLedgerResPartnerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountReportGeneralLedger", null)
                        .WithMany()
                        .HasForeignKey("AccountReportGeneralLedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_report_general_ledger_account_report_general_ledge_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("ResPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_report_general_ledger_res_partner_r_res_partner_id_fkey");
                });

            modelBuilder.Entity("AccountReportPartnerLedgerResPartnerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountReportPartnerLedger", null)
                        .WithMany()
                        .HasForeignKey("AccountReportPartnerLedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_report_partner_ledger_account_report_partner_ledge_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("ResPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_report_partner_ledger_res_partner_r_res_partner_id_fkey");
                });

            modelBuilder.Entity("AccountTaxFiliationRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountTax", null)
                        .WithMany()
                        .HasForeignKey("ChildTax")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_tax_filiation_rel_child_tax_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTax", null)
                        .WithMany()
                        .HasForeignKey("ParentTax")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_tax_filiation_rel_parent_tax_fkey");
                });

            modelBuilder.Entity("AccountTaxHrExpenseSplitRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountTax", null)
                        .WithMany()
                        .HasForeignKey("AccountTaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_tax_hr_expense_split_rel_account_tax_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrExpenseSplit", null)
                        .WithMany()
                        .HasForeignKey("HrExpenseSplitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_tax_hr_expense_split_rel_hr_expense_split_id_fkey");
                });

            modelBuilder.Entity("AccountTaxPosOrderLineRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountTax", null)
                        .WithMany()
                        .HasForeignKey("AccountTaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_tax_pos_order_line_rel_account_tax_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PosOrderLine", null)
                        .WithMany()
                        .HasForeignKey("PosOrderLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_tax_pos_order_line_rel_pos_order_line_id_fkey");
                });

            modelBuilder.Entity("AccountTaxPurchaseOrderLineRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountTax", null)
                        .WithMany()
                        .HasForeignKey("AccountTaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_tax_purchase_order_line_rel_account_tax_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PurchaseOrderLine", null)
                        .WithMany()
                        .HasForeignKey("PurchaseOrderLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_tax_purchase_order_line_rel_purchase_order_line_id_fkey");
                });

            modelBuilder.Entity("AccountTaxRepTemplateMinu", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountReportExpression", null)
                        .WithMany()
                        .HasForeignKey("AccountReportExpressionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_tax_rep_template_minu_account_report_expression_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTaxRepartitionLineTemplate", null)
                        .WithMany()
                        .HasForeignKey("AccountTaxRepartitionLineTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_tax_rep_template_minu_account_tax_repartition_line_fkey");
                });

            modelBuilder.Entity("AccountTaxRepTemplatePlu", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountReportExpression", null)
                        .WithMany()
                        .HasForeignKey("AccountReportExpressionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_tax_rep_template_plus_account_report_expression_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTaxRepartitionLineTemplate", null)
                        .WithMany()
                        .HasForeignKey("AccountTaxRepartitionLineTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_tax_rep_template_plus_account_tax_repartition_line_fkey");
                });

            modelBuilder.Entity("AccountTaxRepartitionFinancialTag", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccountTag", null)
                        .WithMany()
                        .HasForeignKey("AccountAccountTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_tax_repartition_financial_t_account_account_tag_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTaxRepartitionLineTemplate", null)
                        .WithMany()
                        .HasForeignKey("AccountTaxRepartitionLineTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_tax_repartition_finan_account_tax_repartition_line_fkey");
                });

            modelBuilder.Entity("AccountTaxSaleAdvancePaymentInvRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountTax", null)
                        .WithMany()
                        .HasForeignKey("AccountTaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_tax_sale_advance_payment_inv_rel_account_tax_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleAdvancePaymentInv", null)
                        .WithMany()
                        .HasForeignKey("SaleAdvancePaymentInvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_tax_sale_advance_payme_sale_advance_payment_inv_id_fkey");
                });

            modelBuilder.Entity("AccountTaxSaleOrderLineRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountTax", null)
                        .WithMany()
                        .HasForeignKey("AccountTaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_tax_sale_order_line_rel_account_tax_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrderLine", null)
                        .WithMany()
                        .HasForeignKey("SaleOrderLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_tax_sale_order_line_rel_sale_order_line_id_fkey");
                });

            modelBuilder.Entity("AccountTaxTemplateFiliationRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountTaxTemplate", null)
                        .WithMany()
                        .HasForeignKey("ChildTax")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_tax_template_filiation_rel_child_tax_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTaxTemplate", null)
                        .WithMany()
                        .HasForeignKey("ParentTax")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_tax_template_filiation_rel_parent_tax_fkey");
                });

            modelBuilder.Entity("AccountTourUploadBillIrAttachmentsRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountTourUploadBill", null)
                        .WithMany()
                        .HasForeignKey("AccountTourUploadBillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_tour_upload_bill_ir_at_account_tour_upload_bill_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", null)
                        .WithMany()
                        .HasForeignKey("IrAttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_tour_upload_bill_ir_attachments_r_ir_attachment_id_fkey");
                });

            modelBuilder.Entity("AccountTrialBalanceAnalyticRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAnalyticAccount", null)
                        .WithMany()
                        .HasForeignKey("AccountAnalyticAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_trial_balance_analytic_account_analytic_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountBalanceReport", null)
                        .WithMany()
                        .HasForeignKey("AccountBalanceReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("account_trial_balance_analytic_r_account_balance_report_id_fkey");
                });

            modelBuilder.Entity("ApplicantGetRefuseReasonHrApplicantRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ApplicantGetRefuseReason", null)
                        .WithMany()
                        .HasForeignKey("ApplicantGetRefuseReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("applicant_get_refuse_reason_h_applicant_get_refuse_reason__fkey");

                    b.HasOne("Bamboo.Core.Models.HrApplicant", null)
                        .WithMany()
                        .HasForeignKey("HrApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("applicant_get_refuse_reason_hr_applicant_r_hr_applicant_id_fkey");
                });

            modelBuilder.Entity("ApplicantSendMailHrApplicantRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ApplicantSendMail", null)
                        .WithMany()
                        .HasForeignKey("ApplicantSendMailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("applicant_send_mail_hr_applicant_re_applicant_send_mail_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrApplicant", null)
                        .WithMany()
                        .HasForeignKey("HrApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("applicant_send_mail_hr_applicant_rel_hr_applicant_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAccount", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_account_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_account_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountGroup", "Group")
                        .WithMany("AccountAccounts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_account_group_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_account_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("AccountAccounts")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_account_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_account_company_id_fkey");

                    b.Navigation("Group");

                    b.Navigation("MessageMainAttachment");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAccountTag", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResCountry", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_account_tag_country_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_account_tag_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_account_tag_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAccountTemplate", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountChartTemplate", "ChartTemplate")
                        .WithMany("AccountAccountTemplates")
                        .HasForeignKey("ChartTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_account_template_chart_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_account_template_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_account_template_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_account_template_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("AccountAccountTemplates")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_account_template_message_main_attachment_id_fkey");

                    b.Navigation("ChartTemplate");

                    b.Navigation("MessageMainAttachment");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAccountType", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_account_type_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_account_type_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAccruedOrdersWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccount", "Account")
                        .WithMany("AccountAccruedOrdersWizards")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_accrued_orders_wizard_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_accrued_orders_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_accrued_orders_wizard_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_accrued_orders_wizard_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_accrued_orders_wizard_company_id_fkey");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAgedTrialBalance", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_aged_trial_balance_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_aged_trial_balance_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_aged_trial_balance_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAnalyticAccount", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_account_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_account_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("AccountAnalyticAccounts")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_account_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_account_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAnalyticPlan", "Plan")
                        .WithMany("AccountAnalyticAccountPlans")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_analytic_account_plan_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAnalyticPlan", "RootPlan")
                        .WithMany("AccountAnalyticAccountRootPlans")
                        .HasForeignKey("RootPlanId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_account_root_plan_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_account_company_id_fkey");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Plan");

                    b.Navigation("RootPlan");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAnalyticApplicability", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAnalyticPlan", "AnalyticPlan")
                        .WithMany("AccountAnalyticApplicabilities")
                        .HasForeignKey("AnalyticPlanId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_applicability_analytic_plan_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_applicability_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_applicability_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductCategory", "ProductCateg")
                        .WithMany("AccountAnalyticApplicabilities")
                        .HasForeignKey("ProductCategId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_applicability_product_categ_id_fkey");

                    b.Navigation("AnalyticPlan");

                    b.Navigation("ProductCateg");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAnalyticDistributionModel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_distribution_model_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_distribution_model_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartnerCategory", "PartnerCategory")
                        .WithMany("AccountAnalyticDistributionModels")
                        .HasForeignKey("PartnerCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_analytic_distribution_model_partner_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_analytic_distribution_model_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductCategory", "ProductCateg")
                        .WithMany("AccountAnalyticDistributionModels")
                        .HasForeignKey("ProductCategId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_analytic_distribution_model_product_categ_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("AccountAnalyticDistributionModels")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_analytic_distribution_model_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_analytic_distribution_model_company_id_fkey");

                    b.Navigation("PartnerCategory");

                    b.Navigation("Product");

                    b.Navigation("ProductCateg");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAnalyticLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAnalyticAccount", "Account")
                        .WithMany("AccountAnalyticLines")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_analytic_line_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_line_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "GeneralAccount")
                        .WithMany("AccountAnalyticLines")
                        .HasForeignKey("GeneralAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_analytic_line_general_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "Journal")
                        .WithMany("AccountAnalyticLines")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_line_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMoveLine", "MoveLine")
                        .WithMany("AccountAnalyticLines")
                        .HasForeignKey("MoveLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_analytic_line_move_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_line_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAnalyticPlan", "Plan")
                        .WithMany("AccountAnalyticLines")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_line_plan_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("AccountAnalyticLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_line_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "ProductUom")
                        .WithMany("AccountAnalyticLines")
                        .HasForeignKey("ProductUomId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_line_product_uom_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrderLine", "SoLineNavigation")
                        .WithMany("AccountAnalyticLines")
                        .HasForeignKey("SoLine")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_line_so_line_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_analytic_line_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_line_user_id_fkey");

                    b.Navigation("Account");

                    b.Navigation("GeneralAccount");

                    b.Navigation("Journal");

                    b.Navigation("MoveLine");

                    b.Navigation("Plan");

                    b.Navigation("Product");

                    b.Navigation("ProductUom");

                    b.Navigation("SoLineNavigation");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAnalyticPlan", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_plan_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_plan_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAnalyticPlan", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_analytic_plan_parent_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_analytic_plan_company_id_fkey");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAssetAsset", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAnalyticAccount", "AccountAnalytic")
                        .WithMany("AccountAssetAssets")
                        .HasForeignKey("AccountAnalyticId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_asset_asset_account_analytic_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAssetCategory", "Category")
                        .WithMany("AccountAssetAssets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_asset_asset_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_asset_asset_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_asset_asset_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMove", "Invoice")
                        .WithMany("AccountAssetAssets")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_asset_asset_invoice_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_asset_asset_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("AccountAssetAssets")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_asset_asset_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_asset_asset_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_asset_asset_company_id_fkey");

                    b.Navigation("AccountAnalytic");

                    b.Navigation("Category");

                    b.Navigation("Invoice");

                    b.Navigation("MessageMainAttachment");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAssetCategory", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAnalyticAccount", "AccountAnalytic")
                        .WithMany("AccountAssetCategories")
                        .HasForeignKey("AccountAnalyticId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_asset_category_account_analytic_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "AccountAsset")
                        .WithMany("AccountAssetCategoryAccountAssets")
                        .HasForeignKey("AccountAssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_asset_category_account_asset_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "AccountDepreciationExpense")
                        .WithMany("AccountAssetCategoryAccountDepreciationExpenses")
                        .HasForeignKey("AccountDepreciationExpenseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_asset_category_account_depreciation_expense_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "AccountDepreciation")
                        .WithMany("AccountAssetCategoryAccountDepreciations")
                        .HasForeignKey("AccountDepreciationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_asset_category_account_depreciation_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_asset_category_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "Journal")
                        .WithMany("AccountAssetCategories")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_asset_category_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_asset_category_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("AccountAssetCategories")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_asset_category_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_asset_category_company_id_fkey");

                    b.Navigation("AccountAnalytic");

                    b.Navigation("AccountAsset");

                    b.Navigation("AccountDepreciation");

                    b.Navigation("AccountDepreciationExpense");

                    b.Navigation("Journal");

                    b.Navigation("MessageMainAttachment");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAssetDepreciationLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAssetAsset", "Asset")
                        .WithMany("AccountAssetDepreciationLines")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_asset_depreciation_line_asset_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_asset_depreciation_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_asset_depreciation_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMove", "Move")
                        .WithMany("AccountAssetDepreciationLines")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_asset_depreciation_line_move_id_fkey");

                    b.Navigation("Asset");

                    b.Navigation("Move");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAutomaticEntryWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_automatic_entry_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "DestinationAccount")
                        .WithMany("AccountAutomaticEntryWizards")
                        .HasForeignKey("DestinationAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_automatic_entry_wizard_destination_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_automatic_entry_wizard_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_automatic_entry_wizard_company_id_fkey");

                    b.Navigation("DestinationAccount");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountBalanceReport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_balance_report_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_balance_report_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_balance_report_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountBankStatement", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_bank_statement_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "Journal")
                        .WithMany("AccountBankStatements")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_bank_statement_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_bank_statement_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_bank_statement_company_id_fkey");

                    b.Navigation("Journal");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountBankStatementImport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_bank_statement_import_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_bank_statement_import_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountBankStatementImportJournalCreation", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_bank_statement_import_journal_creation_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "Journal")
                        .WithMany("AccountBankStatementImportJournalCreations")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_bank_statement_import_journal_creation_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_bank_statement_import_journal_creation_write_uid_fkey");

                    b.Navigation("Journal");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountBankStatementLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_bank_statement_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_bank_statement_line_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", "ForeignCurrency")
                        .WithMany("AccountBankStatementLineForeignCurrencies")
                        .HasForeignKey("ForeignCurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_bank_statement_line_foreign_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_bank_statement_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMove", "Move")
                        .WithMany("AccountBankStatementLines")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_bank_statement_line_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_bank_statement_line_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PosSession", "PosSession")
                        .WithMany("AccountBankStatementLines")
                        .HasForeignKey("PosSessionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_bank_statement_line_pos_session_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountBankStatement", "Statement")
                        .WithMany("AccountBankStatementLines")
                        .HasForeignKey("StatementId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_bank_statement_line_statement_id_fkey");

                    b.Navigation("ForeignCurrency");

                    b.Navigation("Move");

                    b.Navigation("PosSession");

                    b.Navigation("Statement");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountBankbookReport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_bankbook_report_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_bankbook_report_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountBudgetPost", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_budget_post_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_budget_post_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_budget_post_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountCashRounding", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_cash_rounding_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_cash_rounding_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountCashbookReport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_cashbook_report_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_cashbook_report_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountChartTemplate", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "AccountJournalEarlyPayDiscountGainAccount")
                        .WithMany("AccountChartTemplateAccountJournalEarlyPayDiscountGainAccounts")
                        .HasForeignKey("AccountJournalEarlyPayDiscountGainAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_account_journal_early_pay_discount_fkey1");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "AccountJournalEarlyPayDiscountLossAccount")
                        .WithMany("AccountChartTemplateAccountJournalEarlyPayDiscountLossAccounts")
                        .HasForeignKey("AccountJournalEarlyPayDiscountLossAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_account_journal_early_pay_discount__fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "AccountJournalPaymentCreditAccount")
                        .WithMany("AccountChartTemplateAccountJournalPaymentCreditAccounts")
                        .HasForeignKey("AccountJournalPaymentCreditAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_account_journal_payment_credit_acco_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "AccountJournalPaymentDebitAccount")
                        .WithMany("AccountChartTemplateAccountJournalPaymentDebitAccounts")
                        .HasForeignKey("AccountJournalPaymentDebitAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_account_journal_payment_debit_accou_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "AccountJournalSuspenseAccount")
                        .WithMany("AccountChartTemplateAccountJournalSuspenseAccounts")
                        .HasForeignKey("AccountJournalSuspenseAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_account_journal_suspense_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountry", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_country_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_chart_template_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "DefaultCashDifferenceExpenseAccount")
                        .WithMany("AccountChartTemplateDefaultCashDifferenceExpenseAccounts")
                        .HasForeignKey("DefaultCashDifferenceExpenseAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_default_cash_difference_expense_acc_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "DefaultCashDifferenceIncomeAccount")
                        .WithMany("AccountChartTemplateDefaultCashDifferenceIncomeAccounts")
                        .HasForeignKey("DefaultCashDifferenceIncomeAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_default_cash_difference_income_acco_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "DefaultPosReceivableAccount")
                        .WithMany("AccountChartTemplateDefaultPosReceivableAccounts")
                        .HasForeignKey("DefaultPosReceivableAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_default_pos_receivable_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "ExpenseCurrencyExchangeAccount")
                        .WithMany("AccountChartTemplateExpenseCurrencyExchangeAccounts")
                        .HasForeignKey("ExpenseCurrencyExchangeAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_expense_currency_exchange_account_i_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "IncomeCurrencyExchangeAccount")
                        .WithMany("AccountChartTemplateIncomeCurrencyExchangeAccounts")
                        .HasForeignKey("IncomeCurrencyExchangeAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_income_currency_exchange_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountChartTemplate", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_parent_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "PropertyAccountExpenseCateg")
                        .WithMany("AccountChartTemplatePropertyAccountExpenseCategs")
                        .HasForeignKey("PropertyAccountExpenseCategId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_property_account_expense_categ_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "PropertyAccountExpense")
                        .WithMany("AccountChartTemplatePropertyAccountExpenses")
                        .HasForeignKey("PropertyAccountExpenseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_property_account_expense_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "PropertyAccountIncomeCateg")
                        .WithMany("AccountChartTemplatePropertyAccountIncomeCategs")
                        .HasForeignKey("PropertyAccountIncomeCategId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_property_account_income_categ_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "PropertyAccountIncome")
                        .WithMany("AccountChartTemplatePropertyAccountIncomes")
                        .HasForeignKey("PropertyAccountIncomeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_property_account_income_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "PropertyAccountPayable")
                        .WithMany("AccountChartTemplatePropertyAccountPayables")
                        .HasForeignKey("PropertyAccountPayableId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_property_account_payable_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "PropertyAccountReceivable")
                        .WithMany("AccountChartTemplatePropertyAccountReceivables")
                        .HasForeignKey("PropertyAccountReceivableId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_property_account_receivable_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "PropertyAdvanceTaxPaymentAccount")
                        .WithMany("AccountChartTemplatePropertyAdvanceTaxPaymentAccounts")
                        .HasForeignKey("PropertyAdvanceTaxPaymentAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_property_advance_tax_payment_accoun_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "PropertyCashBasisBaseAccount")
                        .WithMany("AccountChartTemplatePropertyCashBasisBaseAccounts")
                        .HasForeignKey("PropertyCashBasisBaseAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_property_cash_basis_base_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "PropertyStockAccountInputCateg")
                        .WithMany("AccountChartTemplatePropertyStockAccountInputCategs")
                        .HasForeignKey("PropertyStockAccountInputCategId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_property_stock_account_input_categ__fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "PropertyStockAccountOutputCateg")
                        .WithMany("AccountChartTemplatePropertyStockAccountOutputCategs")
                        .HasForeignKey("PropertyStockAccountOutputCategId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_property_stock_account_output_categ_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "PropertyStockValuationAccount")
                        .WithMany("AccountChartTemplatePropertyStockValuationAccounts")
                        .HasForeignKey("PropertyStockValuationAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_property_stock_valuation_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "PropertyTaxPayableAccount")
                        .WithMany("AccountChartTemplatePropertyTaxPayableAccounts")
                        .HasForeignKey("PropertyTaxPayableAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_property_tax_payable_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "PropertyTaxReceivableAccount")
                        .WithMany("AccountChartTemplatePropertyTaxReceivableAccounts")
                        .HasForeignKey("PropertyTaxReceivableAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_chart_template_property_tax_receivable_account_id_fkey");

                    b.Navigation("AccountJournalEarlyPayDiscountGainAccount");

                    b.Navigation("AccountJournalEarlyPayDiscountLossAccount");

                    b.Navigation("AccountJournalPaymentCreditAccount");

                    b.Navigation("AccountJournalPaymentDebitAccount");

                    b.Navigation("AccountJournalSuspenseAccount");

                    b.Navigation("DefaultCashDifferenceExpenseAccount");

                    b.Navigation("DefaultCashDifferenceIncomeAccount");

                    b.Navigation("DefaultPosReceivableAccount");

                    b.Navigation("ExpenseCurrencyExchangeAccount");

                    b.Navigation("IncomeCurrencyExchangeAccount");

                    b.Navigation("Parent");

                    b.Navigation("PropertyAccountExpense");

                    b.Navigation("PropertyAccountExpenseCateg");

                    b.Navigation("PropertyAccountIncome");

                    b.Navigation("PropertyAccountIncomeCateg");

                    b.Navigation("PropertyAccountPayable");

                    b.Navigation("PropertyAccountReceivable");

                    b.Navigation("PropertyAdvanceTaxPaymentAccount");

                    b.Navigation("PropertyCashBasisBaseAccount");

                    b.Navigation("PropertyStockAccountInputCateg");

                    b.Navigation("PropertyStockAccountOutputCateg");

                    b.Navigation("PropertyStockValuationAccount");

                    b.Navigation("PropertyTaxPayableAccount");

                    b.Navigation("PropertyTaxReceivableAccount");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountCommonAccountReport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_common_account_report_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_common_account_report_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_common_account_report_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountCommonJournalReport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_common_journal_report_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_common_journal_report_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_common_journal_report_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountCommonPartnerReport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_common_partner_report_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_common_partner_report_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_common_partner_report_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountCommonReport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_common_report_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_common_report_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_common_report_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountDaybookReport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_daybook_report_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_daybook_report_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountEdiDocument", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrAttachment", "Attachment")
                        .WithMany("AccountEdiDocuments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_edi_document_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_edi_document_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountEdiFormat", "EdiFormat")
                        .WithMany("AccountEdiDocuments")
                        .HasForeignKey("EdiFormatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_edi_document_edi_format_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_edi_document_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMove", "Move")
                        .WithMany("AccountEdiDocuments")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_edi_document_move_id_fkey");

                    b.Navigation("Attachment");

                    b.Navigation("EdiFormat");

                    b.Navigation("Move");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountEdiFormat", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_edi_format_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_edi_format_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFinancialReport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountFinancialReport", "AccountReport")
                        .WithMany("InverseAccountReport")
                        .HasForeignKey("AccountReportId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_financial_report_account_report_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_financial_report_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_financial_report_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountFinancialReport", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_financial_report_parent_id_fkey");

                    b.Navigation("AccountReport");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFinancialYearOp", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_financial_year_op_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_financial_year_op_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_financial_year_op_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFiscalPosition", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResCountryGroup", "CountryGroup")
                        .WithMany("AccountFiscalPositions")
                        .HasForeignKey("CountryGroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_fiscal_position_country_group_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountry", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_fiscal_position_country_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_fiscal_position_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_fiscal_position_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_fiscal_position_company_id_fkey");

                    b.Navigation("CountryGroup");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFiscalPositionAccount", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccount", "AccountDest")
                        .WithMany("AccountFiscalPositionAccountAccountDests")
                        .HasForeignKey("AccountDestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_fiscal_position_account_account_dest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "AccountSrc")
                        .WithMany("AccountFiscalPositionAccountAccountSrcs")
                        .HasForeignKey("AccountSrcId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_fiscal_position_account_account_src_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_fiscal_position_account_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_fiscal_position_account_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountFiscalPosition", "Position")
                        .WithMany("AccountFiscalPositionAccounts")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_fiscal_position_account_position_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_fiscal_position_account_company_id_fkey");

                    b.Navigation("AccountDest");

                    b.Navigation("AccountSrc");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFiscalPositionAccountTemplate", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "AccountDest")
                        .WithMany("AccountFiscalPositionAccountTemplateAccountDests")
                        .HasForeignKey("AccountDestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_fiscal_position_account_template_account_dest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "AccountSrc")
                        .WithMany("AccountFiscalPositionAccountTemplateAccountSrcs")
                        .HasForeignKey("AccountSrcId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_fiscal_position_account_template_account_src_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_fiscal_position_account_template_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_fiscal_position_account_template_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountFiscalPositionTemplate", "Position")
                        .WithMany("AccountFiscalPositionAccountTemplates")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_fiscal_position_account_template_position_id_fkey");

                    b.Navigation("AccountDest");

                    b.Navigation("AccountSrc");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFiscalPositionTax", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_fiscal_position_tax_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_fiscal_position_tax_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountFiscalPosition", "Position")
                        .WithMany("AccountFiscalPositionTaxes")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_fiscal_position_tax_position_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTax", "TaxDest")
                        .WithMany("AccountFiscalPositionTaxTaxDests")
                        .HasForeignKey("TaxDestId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_fiscal_position_tax_tax_dest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTax", "TaxSrc")
                        .WithMany("AccountFiscalPositionTaxTaxSrcs")
                        .HasForeignKey("TaxSrcId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_fiscal_position_tax_tax_src_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_fiscal_position_tax_company_id_fkey");

                    b.Navigation("Position");

                    b.Navigation("TaxDest");

                    b.Navigation("TaxSrc");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFiscalPositionTaxTemplate", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_fiscal_position_tax_template_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_fiscal_position_tax_template_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountFiscalPositionTemplate", "Position")
                        .WithMany("AccountFiscalPositionTaxTemplates")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_fiscal_position_tax_template_position_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTaxTemplate", "TaxDest")
                        .WithMany("AccountFiscalPositionTaxTemplateTaxDests")
                        .HasForeignKey("TaxDestId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_fiscal_position_tax_template_tax_dest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTaxTemplate", "TaxSrc")
                        .WithMany("AccountFiscalPositionTaxTemplateTaxSrcs")
                        .HasForeignKey("TaxSrcId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_fiscal_position_tax_template_tax_src_id_fkey");

                    b.Navigation("Position");

                    b.Navigation("TaxDest");

                    b.Navigation("TaxSrc");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFiscalPositionTemplate", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountChartTemplate", "ChartTemplate")
                        .WithMany("AccountFiscalPositionTemplates")
                        .HasForeignKey("ChartTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_fiscal_position_template_chart_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountryGroup", "CountryGroup")
                        .WithMany("AccountFiscalPositionTemplates")
                        .HasForeignKey("CountryGroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_fiscal_position_template_country_group_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountry", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_fiscal_position_template_country_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_fiscal_position_template_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_fiscal_position_template_write_uid_fkey");

                    b.Navigation("ChartTemplate");

                    b.Navigation("CountryGroup");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFiscalYear", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_fiscal_year_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_fiscal_year_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_fiscal_year_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFullReconcile", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_full_reconcile_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMove", "ExchangeMove")
                        .WithMany("AccountFullReconciles")
                        .HasForeignKey("ExchangeMoveId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_full_reconcile_exchange_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_full_reconcile_write_uid_fkey");

                    b.Navigation("ExchangeMove");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountGroup", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_group_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_group_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountGroup", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_group_parent_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_group_company_id_fkey");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountGroupTemplate", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountChartTemplate", "ChartTemplate")
                        .WithMany("AccountGroupTemplates")
                        .HasForeignKey("ChartTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_group_template_chart_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_group_template_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_group_template_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountGroupTemplate", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_group_template_parent_id_fkey");

                    b.Navigation("ChartTemplate");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountIncoterm", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_incoterms_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_incoterms_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountInvoiceSend", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailComposeMessage", "Composer")
                        .WithMany("AccountInvoiceSends")
                        .HasForeignKey("ComposerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_invoice_send_composer_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_invoice_send_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_invoice_send_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailTemplate", "Template")
                        .WithMany("AccountInvoiceSends")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_invoice_send_template_id_fkey");

                    b.Navigation("Composer");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountJournal", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailAlias", "Alias")
                        .WithMany("AccountJournals")
                        .HasForeignKey("AliasId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_journal_alias_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartnerBank", "BankAccount")
                        .WithMany("AccountJournals")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_journal_bank_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_journal_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_journal_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "DefaultAccount")
                        .WithMany("AccountJournalDefaultAccounts")
                        .HasForeignKey("DefaultAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_journal_default_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_journal_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "LossAccount")
                        .WithMany("AccountJournalLossAccounts")
                        .HasForeignKey("LossAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_journal_loss_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("AccountJournals")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_journal_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "ProfitAccount")
                        .WithMany("AccountJournalProfitAccounts")
                        .HasForeignKey("ProfitAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_journal_profit_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailActivityType", "SaleActivityType")
                        .WithMany("AccountJournals")
                        .HasForeignKey("SaleActivityTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_journal_sale_activity_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("SaleActivityUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_journal_sale_activity_user_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrSequence", "SecureSequence")
                        .WithMany("AccountJournals")
                        .HasForeignKey("SecureSequenceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_journal_secure_sequence_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "SuspenseAccount")
                        .WithMany("AccountJournalSuspenseAccounts")
                        .HasForeignKey("SuspenseAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_journal_suspense_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_journal_company_id_fkey");

                    b.Navigation("Alias");

                    b.Navigation("BankAccount");

                    b.Navigation("DefaultAccount");

                    b.Navigation("LossAccount");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("ProfitAccount");

                    b.Navigation("SaleActivityType");

                    b.Navigation("SecureSequence");

                    b.Navigation("SuspenseAccount");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountJournalGroup", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_journal_group_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_journal_group_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_journal_group_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountMove", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountMove", "AutoPostOrigin")
                        .WithMany("InverseAutoPostOrigin")
                        .HasForeignKey("AutoPostOriginId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_auto_post_origin_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UtmCampaign", "Campaign")
                        .WithMany("AccountMoves")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_campaign_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "CommercialPartner")
                        .WithMany("AccountMoveCommercialPartners")
                        .HasForeignKey("CommercialPartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_move_commercial_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_move_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountFiscalPosition", "FiscalPosition")
                        .WithMany("AccountMoves")
                        .HasForeignKey("FiscalPositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_move_fiscal_position_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountCashRounding", "InvoiceCashRounding")
                        .WithMany("AccountMoves")
                        .HasForeignKey("InvoiceCashRoundingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_invoice_cash_rounding_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountIncoterm", "InvoiceIncoterm")
                        .WithMany("AccountMoves")
                        .HasForeignKey("InvoiceIncotermId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_invoice_incoterm_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountPaymentTerm", "InvoicePaymentTerm")
                        .WithMany("AccountMoves")
                        .HasForeignKey("InvoicePaymentTermId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_invoice_payment_term_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("InvoiceUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_invoice_user_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "Journal")
                        .WithMany("AccountMoves")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_move_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.UtmMedium", "Medium")
                        .WithMany("AccountMoves")
                        .HasForeignKey("MediumId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_medium_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("AccountMoves")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartnerBank", "PartnerBank")
                        .WithMany("AccountMoves")
                        .HasForeignKey("PartnerBankId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_partner_bank_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_move_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "PartnerShipping")
                        .WithMany("AccountMovePartnerShippings")
                        .HasForeignKey("PartnerShippingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_partner_shipping_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountPayment", "Payment")
                        .WithMany("AccountMoves")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_payment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMove", "ReversedEntry")
                        .WithMany("InverseReversedEntry")
                        .HasForeignKey("ReversedEntryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_reversed_entry_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UtmSource", "Source")
                        .WithMany("AccountMoves")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_source_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountBankStatementLine", "StatementLine")
                        .WithMany("AccountMoves")
                        .HasForeignKey("StatementLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_statement_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockMove", "StockMove")
                        .WithMany("AccountMoves")
                        .HasForeignKey("StockMoveId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_stock_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMove", "TaxCashBasisOriginMove")
                        .WithMany("InverseTaxCashBasisOriginMove")
                        .HasForeignKey("TaxCashBasisOriginMoveId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_tax_cash_basis_origin_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountPartialReconcile", "TaxCashBasisRec")
                        .WithMany("AccountMoves")
                        .HasForeignKey("TaxCashBasisRecId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_tax_cash_basis_rec_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmTeam", "Team")
                        .WithMany("AccountMoves")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_team_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", "Website")
                        .WithMany("AccountMoves")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_website_id_fkey");

                    b.Navigation("AutoPostOrigin");

                    b.Navigation("Campaign");

                    b.Navigation("CommercialPartner");

                    b.Navigation("FiscalPosition");

                    b.Navigation("InvoiceCashRounding");

                    b.Navigation("InvoiceIncoterm");

                    b.Navigation("InvoicePaymentTerm");

                    b.Navigation("Journal");

                    b.Navigation("Medium");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("PartnerBank");

                    b.Navigation("PartnerShipping");

                    b.Navigation("Payment");

                    b.Navigation("ReversedEntry");

                    b.Navigation("Source");

                    b.Navigation("StatementLine");

                    b.Navigation("StockMove");

                    b.Navigation("TaxCashBasisOriginMove");

                    b.Navigation("TaxCashBasisRec");

                    b.Navigation("Team");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountMoveLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccount", "Account")
                        .WithMany("AccountMoveLines")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_move_line_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAssetCategory", "AssetCategory")
                        .WithMany("AccountMoveLines")
                        .HasForeignKey("AssetCategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_line_asset_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", "CompanyCurrency")
                        .WithMany("AccountMoveLineCompanyCurrencies")
                        .HasForeignKey("CompanyCurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_line_company_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_move_line_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrExpense", "Expense")
                        .WithMany("AccountMoveLines")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_line_expense_id_fkey");

                    b.HasOne("Bamboo.Core.Models.FollowupLine", "FollowupLine")
                        .WithMany("AccountMoveLines")
                        .HasForeignKey("FollowupLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_line_followup_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountFullReconcile", "FullReconcile")
                        .WithMany("AccountMoveLines")
                        .HasForeignKey("FullReconcileId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_line_full_reconcile_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTax", "GroupTax")
                        .WithMany("AccountMoveLineGroupTaxes")
                        .HasForeignKey("GroupTaxId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_line_group_tax_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "Journal")
                        .WithMany("AccountMoveLines")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_line_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMove", "Move")
                        .WithMany("AccountMoveLines")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_move_line_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_move_line_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountPayment", "Payment")
                        .WithMany("AccountMoveLines")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_line_payment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("AccountMoveLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_move_line_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "ProductUom")
                        .WithMany("AccountMoveLines")
                        .HasForeignKey("ProductUomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_move_line_product_uom_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PurchaseOrderLine", "PurchaseLine")
                        .WithMany("AccountMoveLines")
                        .HasForeignKey("PurchaseLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_line_purchase_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountReconcileModel", "ReconcileModel")
                        .WithMany("AccountMoveLines")
                        .HasForeignKey("ReconcileModelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_line_reconcile_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountBankStatement", "Statement")
                        .WithMany("AccountMoveLines")
                        .HasForeignKey("StatementId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_line_statement_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountBankStatementLine", "StatementLine")
                        .WithMany("AccountMoveLines")
                        .HasForeignKey("StatementLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_line_statement_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTaxGroup", "TaxGroup")
                        .WithMany("AccountMoveLines")
                        .HasForeignKey("TaxGroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_line_tax_group_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTax", "TaxLine")
                        .WithMany("AccountMoveLineTaxLines")
                        .HasForeignKey("TaxLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_move_line_tax_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTaxRepartitionLine", "TaxRepartitionLine")
                        .WithMany("AccountMoveLines")
                        .HasForeignKey("TaxRepartitionLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_move_line_tax_repartition_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_line_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.FleetVehicle", "Vehicle")
                        .WithMany("AccountMoveLines")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_line_vehicle_id_fkey");

                    b.Navigation("Account");

                    b.Navigation("AssetCategory");

                    b.Navigation("CompanyCurrency");

                    b.Navigation("Expense");

                    b.Navigation("FollowupLine");

                    b.Navigation("FullReconcile");

                    b.Navigation("GroupTax");

                    b.Navigation("Journal");

                    b.Navigation("Move");

                    b.Navigation("Payment");

                    b.Navigation("Product");

                    b.Navigation("ProductUom");

                    b.Navigation("PurchaseLine");

                    b.Navigation("ReconcileModel");

                    b.Navigation("Statement");

                    b.Navigation("StatementLine");

                    b.Navigation("TaxGroup");

                    b.Navigation("TaxLine");

                    b.Navigation("TaxRepartitionLine");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountMoveReversal", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_reversal_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "Journal")
                        .WithMany("AccountMoveReversals")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_move_reversal_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_move_reversal_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_move_reversal_company_id_fkey");

                    b.Navigation("Journal");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountPartialReconcile", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_partial_reconcile_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", "CreditCurrency")
                        .WithMany("AccountPartialReconcileCreditCurrencies")
                        .HasForeignKey("CreditCurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_partial_reconcile_credit_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMoveLine", "CreditMove")
                        .WithMany("AccountPartialReconcileCreditMoves")
                        .HasForeignKey("CreditMoveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_partial_reconcile_credit_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", "DebitCurrency")
                        .WithMany("AccountPartialReconcileDebitCurrencies")
                        .HasForeignKey("DebitCurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_partial_reconcile_debit_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMoveLine", "DebitMove")
                        .WithMany("AccountPartialReconcileDebitMoves")
                        .HasForeignKey("DebitMoveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_partial_reconcile_debit_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMove", "ExchangeMove")
                        .WithMany("AccountPartialReconciles")
                        .HasForeignKey("ExchangeMoveId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_partial_reconcile_exchange_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountFullReconcile", "FullReconcile")
                        .WithMany("AccountPartialReconciles")
                        .HasForeignKey("FullReconcileId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_partial_reconcile_full_reconcile_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_partial_reconcile_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_partial_reconcile_company_id_fkey");

                    b.Navigation("CreditCurrency");

                    b.Navigation("CreditMove");

                    b.Navigation("DebitCurrency");

                    b.Navigation("DebitMove");

                    b.Navigation("ExchangeMove");

                    b.Navigation("FullReconcile");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountPayment", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "DestinationAccount")
                        .WithMany("AccountPaymentDestinationAccounts")
                        .HasForeignKey("DestinationAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_destination_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "DestinationJournal")
                        .WithMany("AccountPayments")
                        .HasForeignKey("DestinationJournalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_destination_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "ForceOutstandingAccount")
                        .WithMany("AccountPaymentForceOutstandingAccounts")
                        .HasForeignKey("ForceOutstandingAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_force_outstanding_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("AccountPayments")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMove", "Move")
                        .WithMany("AccountPayments")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_payment_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "OutstandingAccount")
                        .WithMany("AccountPaymentOutstandingAccounts")
                        .HasForeignKey("OutstandingAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_outstanding_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountPayment", "PairedInternalTransferPayment")
                        .WithMany("InversePairedInternalTransferPayment")
                        .HasForeignKey("PairedInternalTransferPaymentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_paired_internal_transfer_payment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartnerBank", "PartnerBank")
                        .WithMany("AccountPayments")
                        .HasForeignKey("PartnerBankId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_partner_bank_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_payment_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountPaymentMethod", "PaymentMethod")
                        .WithMany("AccountPayments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_payment_method_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountPaymentMethodLine", "PaymentMethodLine")
                        .WithMany("AccountPayments")
                        .HasForeignKey("PaymentMethodLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_payment_method_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PaymentToken", "PaymentToken")
                        .WithMany("AccountPayments")
                        .HasForeignKey("PaymentTokenId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_payment_token_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PaymentTransaction", "PaymentTransaction")
                        .WithMany("AccountPayments")
                        .HasForeignKey("PaymentTransactionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_payment_transaction_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PosPaymentMethod", "PosPaymentMethod")
                        .WithMany("AccountPayments")
                        .HasForeignKey("PosPaymentMethodId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_pos_payment_method_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PosSession", "PosSession")
                        .WithMany("AccountPayments")
                        .HasForeignKey("PosSessionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_pos_session_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountPayment", "SourcePayment")
                        .WithMany("InverseSourcePayment")
                        .HasForeignKey("SourcePaymentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_source_payment_id_fkey");

                    b.Navigation("DestinationAccount");

                    b.Navigation("DestinationJournal");

                    b.Navigation("ForceOutstandingAccount");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Move");

                    b.Navigation("OutstandingAccount");

                    b.Navigation("PairedInternalTransferPayment");

                    b.Navigation("PartnerBank");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PaymentMethodLine");

                    b.Navigation("PaymentToken");

                    b.Navigation("PaymentTransaction");

                    b.Navigation("PosPaymentMethod");

                    b.Navigation("PosSession");

                    b.Navigation("SourcePayment");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountPaymentMethod", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_method_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_method_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountPaymentMethodLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_method_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "Journal")
                        .WithMany("AccountPaymentMethodLines")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_payment_method_line_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_method_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "PaymentAccount")
                        .WithMany("AccountPaymentMethodLines")
                        .HasForeignKey("PaymentAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_payment_method_line_payment_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountPaymentMethod", "PaymentMethod")
                        .WithMany("AccountPaymentMethodLines")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_payment_method_line_payment_method_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PaymentProvider", "PaymentProvider")
                        .WithMany("AccountPaymentMethodLines")
                        .HasForeignKey("PaymentProviderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_method_line_payment_provider_id_fkey");

                    b.Navigation("Journal");

                    b.Navigation("PaymentAccount");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PaymentProvider");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountPaymentRegister", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_register_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_register_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "Journal")
                        .WithMany("AccountPaymentRegisters")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_register_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_register_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartnerBank", "PartnerBank")
                        .WithMany("AccountPaymentRegisters")
                        .HasForeignKey("PartnerBankId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_register_partner_bank_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_payment_register_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountPaymentMethodLine", "PaymentMethodLine")
                        .WithMany("AccountPaymentRegisters")
                        .HasForeignKey("PaymentMethodLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_register_payment_method_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PaymentToken", "PaymentToken")
                        .WithMany("AccountPaymentRegisters")
                        .HasForeignKey("PaymentTokenId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_register_payment_token_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", "SourceCurrency")
                        .WithMany("AccountPaymentRegisterSourceCurrencies")
                        .HasForeignKey("SourceCurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_register_source_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_register_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "WriteoffAccount")
                        .WithMany("AccountPaymentRegisters")
                        .HasForeignKey("WriteoffAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_register_writeoff_account_id_fkey");

                    b.Navigation("Journal");

                    b.Navigation("PartnerBank");

                    b.Navigation("PaymentMethodLine");

                    b.Navigation("PaymentToken");

                    b.Navigation("SourceCurrency");

                    b.Navigation("WriteoffAccount");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountPaymentTerm", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_term_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_term_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_term_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountPaymentTermLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_term_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_payment_term_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountPaymentTerm", "Payment")
                        .WithMany("AccountPaymentTermLines")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_payment_term_line_payment_id_fkey");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountPrintJournal", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_print_journal_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_print_journal_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_print_journal_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReconcileModel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_reconcile_model_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_reconcile_model_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("AccountReconcileModels")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_reconcile_model_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_reconcile_model_company_id_fkey");

                    b.Navigation("MessageMainAttachment");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReconcileModelLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccount", "Account")
                        .WithMany("AccountReconcileModelLines")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_reconcile_model_line_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_reconcile_model_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "Journal")
                        .WithMany("AccountReconcileModelLines")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_reconcile_model_line_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_reconcile_model_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountReconcileModel", "Model")
                        .WithMany("AccountReconcileModelLines")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_reconcile_model_line_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_reconcile_model_line_company_id_fkey");

                    b.Navigation("Account");

                    b.Navigation("Journal");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReconcileModelLineTemplate", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "Account")
                        .WithMany("AccountReconcileModelLineTemplates")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_reconcile_model_line_template_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_reconcile_model_line_template_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_reconcile_model_line_template_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountReconcileModelTemplate", "Model")
                        .WithMany("AccountReconcileModelLineTemplates")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_reconcile_model_line_template_model_id_fkey");

                    b.Navigation("Account");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReconcileModelPartnerMapping", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_reconcile_model_partner_mapping_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_reconcile_model_partner_mapping_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountReconcileModel", "Model")
                        .WithMany("AccountReconcileModelPartnerMappings")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_reconcile_model_partner_mapping_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_reconcile_model_partner_mapping_partner_id_fkey");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReconcileModelTemplate", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountChartTemplate", "ChartTemplate")
                        .WithMany("AccountReconcileModelTemplates")
                        .HasForeignKey("ChartTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_reconcile_model_template_chart_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_reconcile_model_template_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_reconcile_model_template_write_uid_fkey");

                    b.Navigation("ChartTemplate");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountRecurringTemplate", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_recurring_template_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "Journal")
                        .WithMany("AccountRecurringTemplates")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_recurring_template_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_recurring_template_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_recurring_template_company_id_fkey");

                    b.Navigation("Journal");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountChartTemplate", "ChartTemplate")
                        .WithMany("AccountReports")
                        .HasForeignKey("ChartTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_report_chart_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountry", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_report_country_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_report_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_report_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountReport", "RootReport")
                        .WithMany("InverseRootReport")
                        .HasForeignKey("RootReportId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_report_root_report_id_fkey");

                    b.Navigation("ChartTemplate");

                    b.Navigation("RootReport");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReportColumn", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_report_column_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrActWindow", "CustomAuditAction")
                        .WithMany("AccountReportColumns")
                        .HasForeignKey("CustomAuditActionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_report_column_custom_audit_action_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_report_column_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountReport", "Report")
                        .WithMany("AccountReportColumns")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_report_column_report_id_fkey");

                    b.Navigation("CustomAuditAction");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReportExpression", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_report_expression_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_report_expression_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountReportLine", "ReportLine")
                        .WithMany("AccountReportExpressions")
                        .HasForeignKey("ReportLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_report_expression_report_line_id_fkey");

                    b.Navigation("ReportLine");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReportExternalValue", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountReportLine", "CarryoverOriginReportLine")
                        .WithMany("AccountReportExternalValues")
                        .HasForeignKey("CarryoverOriginReportLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_report_external_value_carryover_origin_report_line_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_report_external_value_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountFiscalPosition", "ForeignVatFiscalPosition")
                        .WithMany("AccountReportExternalValues")
                        .HasForeignKey("ForeignVatFiscalPositionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_report_external_value_foreign_vat_fiscal_position__fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_report_external_value_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountReportExpression", "TargetReportExpression")
                        .WithMany("AccountReportExternalValues")
                        .HasForeignKey("TargetReportExpressionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_report_external_value_target_report_expression_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_report_external_value_company_id_fkey");

                    b.Navigation("CarryoverOriginReportLine");

                    b.Navigation("ForeignVatFiscalPosition");

                    b.Navigation("TargetReportExpression");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReportGeneralLedger", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_report_general_ledger_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_report_general_ledger_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_report_general_ledger_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReportLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_report_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_report_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountReportLine", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_report_line_parent_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountReport", "Report")
                        .WithMany("AccountReportLines")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_report_line_report_id_fkey");

                    b.Navigation("Parent");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReportPartnerLedger", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_report_partner_ledger_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_report_partner_ledger_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_report_partner_ledger_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountResequenceWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_resequence_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_resequence_wizard_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountSetupBankManualConfig", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_setup_bank_manual_config_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_setup_bank_manual_config_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartnerBank", "ResPartnerBank")
                        .WithMany("AccountSetupBankManualConfigs")
                        .HasForeignKey("ResPartnerBankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_setup_bank_manual_config_res_partner_bank_id_fkey");

                    b.Navigation("ResPartnerBank");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountTax", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccount", "CashBasisTransitionAccount")
                        .WithMany("AccountTaxes")
                        .HasForeignKey("CashBasisTransitionAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tax_cash_basis_transition_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountry", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_tax_country_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tax_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tax_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTaxGroup", "TaxGroup")
                        .WithMany("AccountTaxes")
                        .HasForeignKey("TaxGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_tax_tax_group_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_tax_company_id_fkey");

                    b.Navigation("CashBasisTransitionAccount");

                    b.Navigation("TaxGroup");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountTaxGroup", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResCountry", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tax_group_country_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tax_group_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tax_group_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountTaxRepartitionLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccount", "Account")
                        .WithMany("AccountTaxRepartitionLines")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tax_repartition_line_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tax_repartition_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTax", "InvoiceTax")
                        .WithMany("AccountTaxRepartitionLineInvoiceTaxes")
                        .HasForeignKey("InvoiceTaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_tax_repartition_line_invoice_tax_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tax_repartition_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTax", "RefundTax")
                        .WithMany("AccountTaxRepartitionLineRefundTaxes")
                        .HasForeignKey("RefundTaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_tax_repartition_line_refund_tax_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tax_repartition_line_company_id_fkey");

                    b.Navigation("Account");

                    b.Navigation("InvoiceTax");

                    b.Navigation("RefundTax");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountTaxRepartitionLineTemplate", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "Account")
                        .WithMany("AccountTaxRepartitionLineTemplates")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tax_repartition_line_template_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tax_repartition_line_template_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTaxTemplate", "InvoiceTax")
                        .WithMany("AccountTaxRepartitionLineTemplateInvoiceTaxes")
                        .HasForeignKey("InvoiceTaxId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tax_repartition_line_template_invoice_tax_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tax_repartition_line_template_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTaxTemplate", "RefundTax")
                        .WithMany("AccountTaxRepartitionLineTemplateRefundTaxes")
                        .HasForeignKey("RefundTaxId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tax_repartition_line_template_refund_tax_id_fkey");

                    b.Navigation("Account");

                    b.Navigation("InvoiceTax");

                    b.Navigation("RefundTax");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountTaxReportWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tax_report_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tax_report_wizard_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("account_tax_report_wizard_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountTaxTemplate", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccountTemplate", "CashBasisTransitionAccount")
                        .WithMany("AccountTaxTemplates")
                        .HasForeignKey("CashBasisTransitionAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tax_template_cash_basis_transition_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountChartTemplate", "ChartTemplate")
                        .WithMany("AccountTaxTemplates")
                        .HasForeignKey("ChartTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_tax_template_chart_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tax_template_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tax_template_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTaxGroup", "TaxGroup")
                        .WithMany("AccountTaxTemplates")
                        .HasForeignKey("TaxGroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tax_template_tax_group_id_fkey");

                    b.Navigation("CashBasisTransitionAccount");

                    b.Navigation("ChartTemplate");

                    b.Navigation("TaxGroup");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountTourUploadBill", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tour_upload_bill_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tour_upload_bill_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountTourUploadBillEmailConfirm", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tour_upload_bill_email_confirm_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_tour_upload_bill_email_confirm_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountUnreconcile", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_unreconcile_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("account_unreconcile_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountingReport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountFinancialReport", "AccountReport")
                        .WithMany("AccountingReports")
                        .HasForeignKey("AccountReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("accounting_report_account_report_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("accounting_report_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("accounting_report_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("accounting_report_company_id_fkey");

                    b.Navigation("AccountReport");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ApplicantGetRefuseReason", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("applicant_get_refuse_reason_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("applicant_get_refuse_reason_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrApplicantRefuseReason", "RefuseReason")
                        .WithMany("ApplicantGetRefuseReasons")
                        .HasForeignKey("RefuseReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("applicant_get_refuse_reason_refuse_reason_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailTemplate", "Template")
                        .WithMany("ApplicantGetRefuseReasons")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("applicant_get_refuse_reason_template_id_fkey");

                    b.Navigation("RefuseReason");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ApplicantSendMail", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResPartner", "Author")
                        .WithMany("ApplicantSendMails")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("applicant_send_mail_author_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("applicant_send_mail_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("applicant_send_mail_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailTemplate", "Template")
                        .WithMany("ApplicantSendMails")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("applicant_send_mail_template_id_fkey");

                    b.Navigation("Author");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AssetDepreciationConfirmationWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("asset_depreciation_confirmation_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("asset_depreciation_confirmation_wizard_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AssetModify", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("asset_modify_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("asset_modify_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AuthTotpDevice", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("auth_totp_device_user_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AuthTotpWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("auth_totp_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("auth_totp_wizard_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("auth_totp_wizard_user_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BarcodeNomenclature", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("barcode_nomenclature_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("barcode_nomenclature_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BarcodeRule", b =>
                {
                    b.HasOne("Bamboo.Core.Models.UomUom", "AssociatedUom")
                        .WithMany("BarcodeRules")
                        .HasForeignKey("AssociatedUomId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("barcode_rule_associated_uom_id_fkey");

                    b.HasOne("Bamboo.Core.Models.BarcodeNomenclature", "BarcodeNomenclature")
                        .WithMany("BarcodeRules")
                        .HasForeignKey("BarcodeNomenclatureId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("barcode_rule_barcode_nomenclature_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("barcode_rule_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("barcode_rule_write_uid_fkey");

                    b.Navigation("AssociatedUom");

                    b.Navigation("BarcodeNomenclature");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseDocumentLayout", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_document_layout_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_document_layout_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ReportLayout", "ReportLayout")
                        .WithMany("BaseDocumentLayouts")
                        .HasForeignKey("ReportLayoutId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_document_layout_report_layout_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("base_document_layout_company_id_fkey");

                    b.Navigation("ReportLayout");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseEnableProfilingWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_enable_profiling_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_enable_profiling_wizard_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportImport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_import_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_import_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportMapping", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_mapping_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_mapping_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsChar", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_char_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_char_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsCharNoreadonly", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_char_noreadonly_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_char_noreadonly_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsCharReadonly", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_char_readonly_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_char_readonly_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsCharRequired", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_char_required_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_char_required_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsCharState", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_char_states_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_char_states_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsCharStillreadonly", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_char_stillreadonly_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_char_stillreadonly_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsComplex", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_complex_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_complex_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_complex_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsFloat", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_float_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_float_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_float_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsM2o", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_m2o_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_m2o_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.BaseImportTestsModelsM2oRelated", "ValueNavigation")
                        .WithMany("BaseImportTestsModelsM2os")
                        .HasForeignKey("Value")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_m2o_value_fkey");

                    b.Navigation("ValueNavigation");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsM2oRelated", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_m2o_related_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_m2o_related_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsM2oRequired", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_m2o_required_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_m2o_required_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.BaseImportTestsModelsM2oRequiredRelated", "ValueNavigation")
                        .WithMany("BaseImportTestsModelsM2oRequireds")
                        .HasForeignKey("Value")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("base_import_tests_models_m2o_required_value_fkey");

                    b.Navigation("ValueNavigation");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsM2oRequiredRelated", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_m2o_required_related_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_m2o_required_related_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsO2m", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_o2m_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_o2m_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsO2mChild", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_o2m_child_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_o2m_child_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.BaseImportTestsModelsO2m", "Parent")
                        .WithMany("BaseImportTestsModelsO2mChildren")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_o2m_child_parent_id_fkey");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsPreview", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_preview_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_import_tests_models_preview_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseLanguageExport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_language_export_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_language_export_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseLanguageImport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_language_import_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_language_import_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseLanguageInstall", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_language_install_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_language_install_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseModuleInstallRequest", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_module_install_request_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_module_install_request_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModuleModule", "Module")
                        .WithMany("BaseModuleInstallRequests")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("base_module_install_request_module_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("base_module_install_request_user_id_fkey");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseModuleInstallReview", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_module_install_review_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_module_install_review_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModuleModule", "Module")
                        .WithMany("BaseModuleInstallReviews")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("base_module_install_review_module_id_fkey");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseModuleUninstall", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_module_uninstall_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_module_uninstall_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModuleModule", "Module")
                        .WithMany("BaseModuleUninstalls")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("base_module_uninstall_module_id_fkey");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseModuleUpdate", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_module_update_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_module_update_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseModuleUpgrade", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_module_upgrade_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_module_upgrade_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BasePartnerMergeAutomaticWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_partner_merge_automatic_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.BasePartnerMergeLine", "CurrentLine")
                        .WithMany("BasePartnerMergeAutomaticWizards")
                        .HasForeignKey("CurrentLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_partner_merge_automatic_wizard_current_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "DstPartner")
                        .WithMany("BasePartnerMergeAutomaticWizards")
                        .HasForeignKey("DstPartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_partner_merge_automatic_wizard_dst_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_partner_merge_automatic_wizard_write_uid_fkey");

                    b.Navigation("CurrentLine");

                    b.Navigation("DstPartner");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BasePartnerMergeLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_partner_merge_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_partner_merge_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.BasePartnerMergeAutomaticWizard", "Wizard")
                        .WithMany("BasePartnerMergeLines")
                        .HasForeignKey("WizardId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("base_partner_merge_line_wizard_id_fkey");

                    b.Navigation("Wizard");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BusBu", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("bus_bus_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("bus_bus_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BusPresence", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailGuest", "Guest")
                        .WithOne("BusPresence")
                        .HasForeignKey("Bamboo.Core.Models.BusPresence", "GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("bus_presence_guest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", "User")
                        .WithOne("BusPresence")
                        .HasForeignKey("Bamboo.Core.Models.BusPresence", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("bus_presence_user_id_fkey");

                    b.Navigation("Guest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CalendarAlarm", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_alarm_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_alarm_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailTemplate", "MailTemplate")
                        .WithMany("CalendarAlarms")
                        .HasForeignKey("MailTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_alarm_mail_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SmsTemplate", "SmsTemplate")
                        .WithMany("CalendarAlarms")
                        .HasForeignKey("SmsTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_alarm_sms_template_id_fkey");

                    b.Navigation("MailTemplate");

                    b.Navigation("SmsTemplate");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CalendarAttendee", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_attendee_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.CalendarEvent", "Event")
                        .WithMany("CalendarAttendees")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("calendar_attendee_event_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_attendee_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("calendar_attendee_partner_id_fkey");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CalendarEvent", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrApplicant", "Applicant")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_event_applicant_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_event_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_event_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_event_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmLead", "Opportunity")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_event_opportunity_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CalendarRecurrence", "Recurrence")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("RecurrenceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_event_recurrence_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModel", "ResModelNavigation")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("ResModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("calendar_event_res_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_event_user_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailChannel", "VideocallChannel")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("VideocallChannelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_event_videocall_channel_id_fkey");

                    b.Navigation("Applicant");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Opportunity");

                    b.Navigation("Recurrence");

                    b.Navigation("ResModelNavigation");

                    b.Navigation("VideocallChannel");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CalendarEventType", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_event_type_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_event_type_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CalendarFilter", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_filters_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_filters_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("calendar_filters_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("calendar_filters_user_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CalendarProviderConfig", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_provider_config_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_provider_config_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CalendarRecurrence", b =>
                {
                    b.HasOne("Bamboo.Core.Models.CalendarEvent", "BaseEvent")
                        .WithMany("CalendarRecurrences")
                        .HasForeignKey("BaseEventId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_recurrence_base_event_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_recurrence_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("calendar_recurrence_write_uid_fkey");

                    b.Navigation("BaseEvent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ChangeLockDate", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("change_lock_date_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("change_lock_date_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("change_lock_date_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ChangePasswordOwn", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("change_password_own_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("change_password_own_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ChangePasswordUser", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("change_password_user_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("change_password_user_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("change_password_user_user_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ChangePasswordWizard", "Wizard")
                        .WithMany("ChangePasswordUsers")
                        .HasForeignKey("WizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("change_password_user_wizard_id_fkey");

                    b.Navigation("Wizard");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ChangePasswordWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("change_password_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("change_password_wizard_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ChangeProductionQty", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("change_production_qty_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("change_production_qty_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpProduction", "Mo")
                        .WithMany("ChangeProductionQties")
                        .HasForeignKey("MoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("change_production_qty_mo_id_fkey");

                    b.Navigation("Mo");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ConfirmStockSm", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("confirm_stock_sms_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("confirm_stock_sms_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmIapLeadHelper", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_iap_lead_helpers_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_iap_lead_helpers_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmIapLeadIndustry", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_iap_lead_industry_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_iap_lead_industry_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmIapLeadMiningRequest", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_iap_lead_mining_request_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_iap_lead_mining_request_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmIapLeadRole", "PreferredRole")
                        .WithMany("CrmIapLeadMiningRequests")
                        .HasForeignKey("PreferredRoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_iap_lead_mining_request_preferred_role_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmIapLeadSeniority", "Seniority")
                        .WithMany("CrmIapLeadMiningRequests")
                        .HasForeignKey("SeniorityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_iap_lead_mining_request_seniority_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmTeam", "Team")
                        .WithMany("CrmIapLeadMiningRequests")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_iap_lead_mining_request_team_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_iap_lead_mining_request_user_id_fkey");

                    b.Navigation("PreferredRole");

                    b.Navigation("Seniority");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmIapLeadRole", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_iap_lead_role_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_iap_lead_role_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmIapLeadSeniority", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_iap_lead_seniority_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_iap_lead_seniority_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmLead", b =>
                {
                    b.HasOne("Bamboo.Core.Models.UtmCampaign", "Campaign")
                        .WithMany("CrmLeads")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_campaign_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountry", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_country_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResLang", "Lang")
                        .WithMany("CrmLeads")
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_lang_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmIapLeadMiningRequest", "LeadMiningRequest")
                        .WithMany("CrmLeads")
                        .HasForeignKey("LeadMiningRequestId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_lead_mining_request_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmLostReason", "LostReason")
                        .WithMany("CrmLeads")
                        .HasForeignKey("LostReasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("crm_lead_lost_reason_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UtmMedium", "Medium")
                        .WithMany("CrmLeads")
                        .HasForeignKey("MediumId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_medium_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("CrmLeads")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmRecurringPlan", "RecurringPlanNavigation")
                        .WithMany("CrmLeads")
                        .HasForeignKey("RecurringPlan")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_recurring_plan_fkey");

                    b.HasOne("Bamboo.Core.Models.UtmSource", "Source")
                        .WithMany("CrmLeads")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_source_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmStage", "Stage")
                        .WithMany("CrmLeads")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("crm_lead_stage_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountryState", "State")
                        .WithMany("CrmLeads")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_state_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmTeam", "Team")
                        .WithMany("CrmLeads")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_team_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartnerTitle", "TitleNavigation")
                        .WithMany("CrmLeads")
                        .HasForeignKey("Title")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_title_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_user_id_fkey");

                    b.Navigation("Campaign");

                    b.Navigation("Lang");

                    b.Navigation("LeadMiningRequest");

                    b.Navigation("LostReason");

                    b.Navigation("Medium");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("RecurringPlanNavigation");

                    b.Navigation("Source");

                    b.Navigation("Stage");

                    b.Navigation("State");

                    b.Navigation("Team");

                    b.Navigation("TitleNavigation");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmLead2opportunityPartner", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead2opportunity_partner_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead2opportunity_partner_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmLead", "Lead")
                        .WithMany("CrmLead2opportunityPartners")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("crm_lead2opportunity_partner_lead_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead2opportunity_partner_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmTeam", "Team")
                        .WithMany("CrmLead2opportunityPartners")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead2opportunity_partner_team_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead2opportunity_partner_user_id_fkey");

                    b.Navigation("Lead");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmLead2opportunityPartnerMass", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead2opportunity_partner_mass_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead2opportunity_partner_mass_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmLead", "Lead")
                        .WithMany("CrmLead2opportunityPartnerMassesNavigation")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead2opportunity_partner_mass_lead_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead2opportunity_partner_mass_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmTeam", "Team")
                        .WithMany("CrmLead2opportunityPartnerMasses")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead2opportunity_partner_mass_team_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead2opportunity_partner_mass_user_id_fkey");

                    b.Navigation("Lead");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmLeadLost", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_lost_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_lost_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmLostReason", "LostReason")
                        .WithMany("CrmLeadLosts")
                        .HasForeignKey("LostReasonId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_lost_lost_reason_id_fkey");

                    b.Navigation("LostReason");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmLeadPlsUpdate", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_pls_update_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_pls_update_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmLeadScoringFrequency", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_scoring_frequency_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_scoring_frequency_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmTeam", "Team")
                        .WithMany("CrmLeadScoringFrequencies")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("crm_lead_scoring_frequency_team_id_fkey");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmLeadScoringFrequencyField", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_scoring_frequency_field_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModelField", "Field")
                        .WithMany("CrmLeadScoringFrequencyFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("crm_lead_scoring_frequency_field_field_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lead_scoring_frequency_field_write_uid_fkey");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmLostReason", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lost_reason_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_lost_reason_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmMergeOpportunity", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_merge_opportunity_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_merge_opportunity_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmTeam", "Team")
                        .WithMany("CrmMergeOpportunities")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_merge_opportunity_team_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_merge_opportunity_user_id_fkey");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmQuotationPartner", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_quotation_partner_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_quotation_partner_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmLead", "Lead")
                        .WithMany("CrmQuotationPartners")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("crm_quotation_partner_lead_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_quotation_partner_partner_id_fkey");

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmRecurringPlan", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_recurring_plan_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_recurring_plan_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmStage", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_stage_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_stage_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmTeam", "Team")
                        .WithMany("CrmStages")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_stage_team_id_fkey");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmTag", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_tag_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_tag_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmTeam", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailAlias", "Alias")
                        .WithMany("CrmTeams")
                        .HasForeignKey("AliasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("crm_team_alias_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_team_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_team_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("CrmTeams")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_team_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_team_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_team_user_id_fkey");

                    b.Navigation("Alias");

                    b.Navigation("MessageMainAttachment");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmTeamMember", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_team_member_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmTeam", "CrmTeam")
                        .WithMany("CrmTeamMembers")
                        .HasForeignKey("CrmTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("crm_team_member_crm_team_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_team_member_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("CrmTeamMembers")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crm_team_member_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("crm_team_member_user_id_fkey");

                    b.Navigation("CrmTeam");

                    b.Navigation("MessageMainAttachment");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrossoveredBudget", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crossovered_budget_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crossovered_budget_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("CrossoveredBudgets")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crossovered_budget_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("crossovered_budget_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crossovered_budget_user_id_fkey");

                    b.Navigation("MessageMainAttachment");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrossoveredBudgetLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAnalyticAccount", "AnalyticAccount")
                        .WithMany("CrossoveredBudgetLines")
                        .HasForeignKey("AnalyticAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crossovered_budget_lines_analytic_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crossovered_budget_lines_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.CrossoveredBudget", "CrossoveredBudget")
                        .WithMany("CrossoveredBudgetLines")
                        .HasForeignKey("CrossoveredBudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("crossovered_budget_lines_crossovered_budget_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountBudgetPost", "GeneralBudget")
                        .WithMany("CrossoveredBudgetLines")
                        .HasForeignKey("GeneralBudgetId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crossovered_budget_lines_general_budget_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crossovered_budget_lines_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("crossovered_budget_lines_company_id_fkey");

                    b.Navigation("AnalyticAccount");

                    b.Navigation("CrossoveredBudget");

                    b.Navigation("GeneralBudget");
                });

            modelBuilder.Entity("Bamboo.Core.Models.DecimalPrecision", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("decimal_precision_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("decimal_precision_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.DigestDigest", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("digest_digest_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("digest_digest_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("digest_digest_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.DigestTip", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("digest_tip_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResGroup", "Group")
                        .WithMany("DigestTips")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("digest_tip_group_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("digest_tip_write_uid_fkey");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FetchmailServer", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fetchmail_server_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fetchmail_server_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModel", "Object")
                        .WithMany("FetchmailServers")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fetchmail_server_object_id_fkey");

                    b.Navigation("Object");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetServiceType", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_service_type_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_service_type_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicle", b =>
                {
                    b.HasOne("Bamboo.Core.Models.FleetVehicleModelBrand", "Brand")
                        .WithMany("FleetVehicles")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_brand_id_fkey");

                    b.HasOne("Bamboo.Core.Models.FleetVehicleModelCategory", "Category")
                        .WithMany("FleetVehicles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "DriverEmployee")
                        .WithMany("FleetVehicleDriverEmployees")
                        .HasForeignKey("DriverEmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_driver_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "Driver")
                        .WithMany("FleetVehicleDrivers")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_driver_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "FutureDriverEmployee")
                        .WithMany("FleetVehicleFutureDriverEmployees")
                        .HasForeignKey("FutureDriverEmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_future_driver_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "FutureDriver")
                        .WithMany("FleetVehicleFutureDrivers")
                        .HasForeignKey("FutureDriverId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_future_driver_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_manager_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("FleetVehicles")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.FleetVehicleModel", "Model")
                        .WithMany("FleetVehicles")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fleet_vehicle_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.FleetVehicleState", "State")
                        .WithMany("FleetVehicles")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_state_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_company_id_fkey");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Driver");

                    b.Navigation("DriverEmployee");

                    b.Navigation("FutureDriver");

                    b.Navigation("FutureDriverEmployee");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Model");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleAssignationLog", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_assignation_log_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "DriverEmployee")
                        .WithMany("FleetVehicleAssignationLogs")
                        .HasForeignKey("DriverEmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_assignation_log_driver_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "Driver")
                        .WithMany("FleetVehicleAssignationLogs")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fleet_vehicle_assignation_log_driver_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_assignation_log_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.FleetVehicle", "Vehicle")
                        .WithMany("FleetVehicleAssignationLogs")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fleet_vehicle_assignation_log_vehicle_id_fkey");

                    b.Navigation("Driver");

                    b.Navigation("DriverEmployee");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleLogContract", b =>
                {
                    b.HasOne("Bamboo.Core.Models.FleetServiceType", "CostSubtype")
                        .WithMany("FleetVehicleLogContractsNavigation")
                        .HasForeignKey("CostSubtypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_log_contract_cost_subtype_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_log_contract_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "Insurer")
                        .WithMany("FleetVehicleLogContracts")
                        .HasForeignKey("InsurerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_log_contract_insurer_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_log_contract_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("FleetVehicleLogContracts")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_log_contract_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_log_contract_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_log_contract_user_id_fkey");

                    b.HasOne("Bamboo.Core.Models.FleetVehicle", "Vehicle")
                        .WithMany("FleetVehicleLogContracts")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fleet_vehicle_log_contract_vehicle_id_fkey");

                    b.Navigation("CostSubtype");

                    b.Navigation("Insurer");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleLogService", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_log_services_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_log_services_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_log_services_manager_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("FleetVehicleLogServices")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_log_services_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.FleetVehicleOdometer", "Odometer")
                        .WithMany("FleetVehicleLogServices")
                        .HasForeignKey("OdometerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_log_services_odometer_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "PurchaserEmployee")
                        .WithMany("FleetVehicleLogServices")
                        .HasForeignKey("PurchaserEmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_log_services_purchaser_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "Purchaser")
                        .WithMany("FleetVehicleLogServicePurchasers")
                        .HasForeignKey("PurchaserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_log_services_purchaser_id_fkey");

                    b.HasOne("Bamboo.Core.Models.FleetServiceType", "ServiceType")
                        .WithMany("FleetVehicleLogServices")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fleet_vehicle_log_services_service_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_log_services_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.FleetVehicle", "Vehicle")
                        .WithMany("FleetVehicleLogServices")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fleet_vehicle_log_services_vehicle_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "Vendor")
                        .WithMany("FleetVehicleLogServiceVendors")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_log_services_vendor_id_fkey");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Odometer");

                    b.Navigation("Purchaser");

                    b.Navigation("PurchaserEmployee");

                    b.Navigation("ServiceType");

                    b.Navigation("Vehicle");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleModel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.FleetVehicleModelBrand", "Brand")
                        .WithMany("FleetVehicleModels")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fleet_vehicle_model_brand_id_fkey");

                    b.HasOne("Bamboo.Core.Models.FleetVehicleModelCategory", "Category")
                        .WithMany("FleetVehicleModels")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_model_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_model_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_model_write_uid_fkey");

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleModelBrand", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_model_brand_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_model_brand_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleModelCategory", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_model_category_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_model_category_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleOdometer", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_odometer_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_odometer_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.FleetVehicle", "Vehicle")
                        .WithMany("FleetVehicleOdometers")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fleet_vehicle_odometer_vehicle_id_fkey");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleState", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_state_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_state_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleTag", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_tag_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fleet_vehicle_tag_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FollowupFollowup", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("followup_followup_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("followup_followup_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", "Company")
                        .WithOne("FollowupFollowup")
                        .HasForeignKey("Bamboo.Core.Models.FollowupFollowup", "TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("followup_followup_company_id_fkey");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FollowupLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("followup_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailTemplate", "EmailTemplate")
                        .WithMany("FollowupLines")
                        .HasForeignKey("EmailTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("followup_line_email_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.FollowupFollowup", "Followup")
                        .WithMany("FollowupLines")
                        .HasForeignKey("FollowupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("followup_line_followup_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("followup_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("ManualActionResponsibleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("followup_line_manual_action_responsible_id_fkey");

                    b.Navigation("EmailTemplate");

                    b.Navigation("Followup");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FollowupPrint", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("followup_print_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.FollowupFollowup", "Followup")
                        .WithMany("FollowupPrints")
                        .HasForeignKey("FollowupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("followup_print_followup_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("followup_print_write_uid_fkey");

                    b.Navigation("Followup");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FollowupSendingResult", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("followup_sending_results_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("followup_sending_results_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrApplicant", b =>
                {
                    b.HasOne("Bamboo.Core.Models.UtmCampaign", "Campaign")
                        .WithMany("HrApplicants")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_applicant_campaign_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_applicant_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrDepartment", "Department")
                        .WithMany("HrApplicants")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_applicant_department_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "Emp")
                        .WithMany("HrApplicants")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_applicant_emp_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrJob", "Job")
                        .WithMany("HrApplicants")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_applicant_job_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_applicant_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrRecruitmentStage", "LastStage")
                        .WithMany("HrApplicantLastStages")
                        .HasForeignKey("LastStageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_applicant_last_stage_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UtmMedium", "Medium")
                        .WithMany("HrApplicants")
                        .HasForeignKey("MediumId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_applicant_medium_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("HrApplicants")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_applicant_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_applicant_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrApplicantRefuseReason", "RefuseReason")
                        .WithMany("HrApplicants")
                        .HasForeignKey("RefuseReasonId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_applicant_refuse_reason_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UtmSource", "Source")
                        .WithMany("HrApplicants")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_applicant_source_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrRecruitmentStage", "Stage")
                        .WithMany("HrApplicantStages")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_applicant_stage_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_applicant_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrRecruitmentDegree", "Type")
                        .WithMany("HrApplicants")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_applicant_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_applicant_user_id_fkey");

                    b.Navigation("Campaign");

                    b.Navigation("Department");

                    b.Navigation("Emp");

                    b.Navigation("Job");

                    b.Navigation("LastStage");

                    b.Navigation("Medium");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("RefuseReason");

                    b.Navigation("Source");

                    b.Navigation("Stage");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrApplicantCategory", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_applicant_category_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_applicant_category_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrApplicantRefuseReason", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_applicant_refuse_reason_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_applicant_refuse_reason_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailTemplate", "Template")
                        .WithMany("HrApplicantRefuseReasons")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_applicant_refuse_reason_template_id_fkey");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrApplicantSkill", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrApplicant", "Applicant")
                        .WithMany("HrApplicantSkills")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("hr_applicant_skill_applicant_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_applicant_skill_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_applicant_skill_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrSkill", "Skill")
                        .WithMany("HrApplicantSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_applicant_skill_skill_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrSkillLevel", "SkillLevel")
                        .WithMany("HrApplicantSkills")
                        .HasForeignKey("SkillLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_applicant_skill_skill_level_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrSkillType", "SkillType")
                        .WithMany("HrApplicantSkills")
                        .HasForeignKey("SkillTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_applicant_skill_skill_type_id_fkey");

                    b.Navigation("Applicant");

                    b.Navigation("Skill");

                    b.Navigation("SkillLevel");

                    b.Navigation("SkillType");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrAttendance", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_attendance_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "Employee")
                        .WithMany("HrAttendances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("hr_attendance_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_attendance_write_uid_fkey");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrAttendanceOvertime", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_attendance_overtime_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "Employee")
                        .WithMany("HrAttendanceOvertimes")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("hr_attendance_overtime_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_attendance_overtime_write_uid_fkey");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrContract", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrContractType", "ContractType")
                        .WithMany("HrContracts")
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_contract_contract_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_contract_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrDepartment", "Department")
                        .WithMany("HrContracts")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_contract_department_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "Employee")
                        .WithMany("HrContracts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_contract_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("HrResponsibleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_contract_hr_responsible_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrJob", "Job")
                        .WithMany("HrContracts")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_contract_job_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_contract_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("HrContracts")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_contract_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResourceCalendar", "ResourceCalendar")
                        .WithMany("HrContracts")
                        .HasForeignKey("ResourceCalendarId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_contract_resource_calendar_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrPayrollStructureType", "StructureType")
                        .WithMany("HrContracts")
                        .HasForeignKey("StructureTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_contract_structure_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_contract_company_id_fkey");

                    b.Navigation("ContractType");

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("Job");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("ResourceCalendar");

                    b.Navigation("StructureType");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrContractType", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_contract_type_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_contract_type_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrDepartment", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_department_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_department_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_department_manager_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrDepartment", "MasterDepartment")
                        .WithMany("InverseMasterDepartment")
                        .HasForeignKey("MasterDepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_department_master_department_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("HrDepartments")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_department_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrDepartment", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_department_parent_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_department_company_id_fkey");

                    b.Navigation("MasterDepartment");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrDepartureReason", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_departure_reason_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_departure_reason_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrDepartureWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_departure_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrDepartureReason", "DepartureReason")
                        .WithMany("HrDepartureWizards")
                        .HasForeignKey("DepartureReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("hr_departure_wizard_departure_reason_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "Employee")
                        .WithMany("HrDepartureWizards")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("hr_departure_wizard_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_departure_wizard_write_uid_fkey");

                    b.Navigation("DepartureReason");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrEmployee", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResPartner", "AddressHome")
                        .WithMany("HrEmployeeAddressHomes")
                        .HasForeignKey("AddressHomeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_address_home_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "Address")
                        .WithMany("HrEmployeeAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_address_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartnerBank", "BankAccount")
                        .WithMany("HrEmployees")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_bank_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "Coach")
                        .WithMany("InverseCoach")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_coach_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrContract", "Contract")
                        .WithMany("HrEmployees")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_contract_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountry", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_country_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountry", "CountryOfBirthNavigation")
                        .WithMany("HrEmployeeCountryOfBirthNavigations")
                        .HasForeignKey("CountryOfBirth")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_country_of_birth_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrDepartment", "Department")
                        .WithMany("HrEmployees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_department_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrDepartureReason", "DepartureReason")
                        .WithMany("HrEmployees")
                        .HasForeignKey("DepartureReasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_employee_departure_reason_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("ExpenseManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_expense_manager_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrJob", "Job")
                        .WithMany("HrEmployees")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_job_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrAttendance", "LastAttendance")
                        .WithMany("HrEmployees")
                        .HasForeignKey("LastAttendanceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_last_attendance_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LeaveManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_leave_manager_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("HrEmployees")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_parent_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResourceCalendar", "ResourceCalendar")
                        .WithMany("HrEmployees")
                        .HasForeignKey("ResourceCalendarId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_resource_calendar_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResourceResource", "Resource")
                        .WithMany("HrEmployees")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_employee_resource_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_user_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "WorkContact")
                        .WithMany("HrEmployeeWorkContacts")
                        .HasForeignKey("WorkContactId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_work_contact_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrWorkLocation", "WorkLocation")
                        .WithMany("HrEmployees")
                        .HasForeignKey("WorkLocationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_work_location_id_fkey");

                    b.Navigation("Address");

                    b.Navigation("AddressHome");

                    b.Navigation("BankAccount");

                    b.Navigation("Coach");

                    b.Navigation("Contract");

                    b.Navigation("CountryOfBirthNavigation");

                    b.Navigation("Department");

                    b.Navigation("DepartureReason");

                    b.Navigation("Job");

                    b.Navigation("LastAttendance");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Parent");

                    b.Navigation("Resource");

                    b.Navigation("ResourceCalendar");

                    b.Navigation("WorkContact");

                    b.Navigation("WorkLocation");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrEmployeeCategory", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_category_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_category_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrEmployeeSkill", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_skill_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "Employee")
                        .WithMany("HrEmployeeSkills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("hr_employee_skill_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_skill_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrSkill", "Skill")
                        .WithMany("HrEmployeeSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_employee_skill_skill_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrSkillLevel", "SkillLevel")
                        .WithMany("HrEmployeeSkills")
                        .HasForeignKey("SkillLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_employee_skill_skill_level_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrSkillType", "SkillType")
                        .WithMany("HrEmployeeSkills")
                        .HasForeignKey("SkillTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_employee_skill_skill_type_id_fkey");

                    b.Navigation("Employee");

                    b.Navigation("Skill");

                    b.Navigation("SkillLevel");

                    b.Navigation("SkillType");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrEmployeeSkillLog", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_skill_log_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrDepartment", "Department")
                        .WithMany("HrEmployeeSkillLogs")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_skill_log_department_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "Employee")
                        .WithMany("HrEmployeeSkillLogs")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("hr_employee_skill_log_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_employee_skill_log_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrSkill", "Skill")
                        .WithMany("HrEmployeeSkillLogs")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_employee_skill_log_skill_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrSkillLevel", "SkillLevel")
                        .WithMany("HrEmployeeSkillLogs")
                        .HasForeignKey("SkillLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_employee_skill_log_skill_level_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrSkillType", "SkillType")
                        .WithMany("HrEmployeeSkillLogs")
                        .HasForeignKey("SkillTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_employee_skill_log_skill_type_id_fkey");

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("Skill");

                    b.Navigation("SkillLevel");

                    b.Navigation("SkillType");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrExpense", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccount", "Account")
                        .WithMany("HrExpenses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_expense_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "Employee")
                        .WithMany("HrExpenses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_expense_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("HrExpenses")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("HrExpenses")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_expense_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "ProductUom")
                        .WithMany("HrExpenses")
                        .HasForeignKey("ProductUomId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_product_uom_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrder", "SaleOrder")
                        .WithMany("HrExpenses")
                        .HasForeignKey("SaleOrderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_sale_order_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrExpenseSheet", "Sheet")
                        .WithMany("HrExpenses")
                        .HasForeignKey("SheetId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_sheet_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_expense_company_id_fkey");

                    b.Navigation("Account");

                    b.Navigation("Employee");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Product");

                    b.Navigation("ProductUom");

                    b.Navigation("SaleOrder");

                    b.Navigation("Sheet");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrExpenseApproveDuplicate", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_approve_duplicate_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_approve_duplicate_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrExpenseRefuseWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_refuse_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrExpenseSheet", "HrExpenseSheet")
                        .WithMany("HrExpenseRefuseWizards")
                        .HasForeignKey("HrExpenseSheetId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_refuse_wizard_hr_expense_sheet_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_refuse_wizard_write_uid_fkey");

                    b.Navigation("HrExpenseSheet");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrExpenseSheet", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountMove", "AccountMove")
                        .WithMany("HrExpenseSheets")
                        .HasForeignKey("AccountMoveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_expense_sheet_account_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "Address")
                        .WithMany("HrExpenseSheets")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_sheet_address_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "BankJournal")
                        .WithMany("HrExpenseSheetBankJournals")
                        .HasForeignKey("BankJournalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_sheet_bank_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_sheet_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_sheet_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrDepartment", "Department")
                        .WithMany("HrExpenseSheets")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_sheet_department_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "Employee")
                        .WithMany("HrExpenseSheets")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_expense_sheet_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "Journal")
                        .WithMany("HrExpenseSheetJournals")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_sheet_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_sheet_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("HrExpenseSheets")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_sheet_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_expense_sheet_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_sheet_user_id_fkey");

                    b.Navigation("AccountMove");

                    b.Navigation("Address");

                    b.Navigation("BankJournal");

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("Journal");

                    b.Navigation("MessageMainAttachment");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrExpenseSplit", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_split_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_split_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "Employee")
                        .WithMany("HrExpenseSplits")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("hr_expense_split_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrExpense", "Expense")
                        .WithMany("HrExpenseSplits")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_split_expense_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_split_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("HrExpenseSplits")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("hr_expense_split_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrder", "SaleOrder")
                        .WithMany("HrExpenseSplits")
                        .HasForeignKey("SaleOrderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_split_sale_order_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_split_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrExpenseSplitWizard", "Wizard")
                        .WithMany("HrExpenseSplits")
                        .HasForeignKey("WizardId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_split_wizard_id_fkey");

                    b.Navigation("Employee");

                    b.Navigation("Expense");

                    b.Navigation("Product");

                    b.Navigation("SaleOrder");

                    b.Navigation("Wizard");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrExpenseSplitWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_split_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrExpense", "Expense")
                        .WithMany("HrExpenseSplitWizards")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("hr_expense_split_wizard_expense_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_expense_split_wizard_write_uid_fkey");

                    b.Navigation("Expense");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrHolidaysCancelLeave", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_holidays_cancel_leave_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_holidays_cancel_leave_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrLeave", "Leave")
                        .WithMany("HrHolidaysCancelLeaves")
                        .HasForeignKey("LeaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("hr_holidays_cancel_leave_leave_id_fkey");

                    b.Navigation("Leave");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrHolidaysSummaryEmployee", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_holidays_summary_employee_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_holidays_summary_employee_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrJob", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResPartner", "Address")
                        .WithMany("HrJobs")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_job_address_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailAlias", "Alias")
                        .WithMany("HrJobs")
                        .HasForeignKey("AliasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_job_alias_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrContractType", "ContractType")
                        .WithMany("HrJobs")
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_job_contract_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_job_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrDepartment", "Department")
                        .WithMany("HrJobs")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_job_department_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("HrResponsibleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_job_hr_responsible_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_job_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_job_manager_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("HrJobs")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_job_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_job_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_job_user_id_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", "Website")
                        .WithMany("HrJobs")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_job_website_id_fkey");

                    b.Navigation("Address");

                    b.Navigation("Alias");

                    b.Navigation("ContractType");

                    b.Navigation("Department");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrLeave", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrEmployeeCategory", "Category")
                        .WithMany("HrLeaves")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrDepartment", "Department")
                        .WithMany("HrLeaves")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_department_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", "EmployeeCompany")
                        .WithMany("HrLeaveEmployeeCompanies")
                        .HasForeignKey("EmployeeCompanyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_employee_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "Employee")
                        .WithMany("HrLeaveEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_leave_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "FirstApprover")
                        .WithMany("HrLeaveFirstApprovers")
                        .HasForeignKey("FirstApproverId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_first_approver_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrLeaveAllocation", "HolidayAllocation")
                        .WithMany("HrLeaves")
                        .HasForeignKey("HolidayAllocationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_holiday_allocation_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrLeaveType", "HolidayStatus")
                        .WithMany("HrLeaves")
                        .HasForeignKey("HolidayStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_leave_holiday_status_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_manager_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CalendarEvent", "Meeting")
                        .WithMany("HrLeaves")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_meeting_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("HrLeaves")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", "ModeCompany")
                        .WithMany("HrLeaveModeCompanies")
                        .HasForeignKey("ModeCompanyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_mode_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrAttendanceOvertime", "Overtime")
                        .WithMany("HrLeaves")
                        .HasForeignKey("OvertimeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_overtime_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrLeave", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_parent_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "SecondApprover")
                        .WithMany("HrLeaveSecondApprovers")
                        .HasForeignKey("SecondApproverId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_second_approver_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_user_id_fkey");

                    b.Navigation("Category");

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeCompany");

                    b.Navigation("FirstApprover");

                    b.Navigation("HolidayAllocation");

                    b.Navigation("HolidayStatus");

                    b.Navigation("Meeting");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("ModeCompany");

                    b.Navigation("Overtime");

                    b.Navigation("Parent");

                    b.Navigation("SecondApprover");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrLeaveAccrualLevel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrLeaveAccrualPlan", "AccrualPlan")
                        .WithMany("HrLeaveAccrualLevels")
                        .HasForeignKey("AccrualPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_leave_accrual_level_accrual_plan_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_accrual_level_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_accrual_level_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrLeaveAccrualLevel", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_accrual_level_parent_id_fkey");

                    b.Navigation("AccrualPlan");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrLeaveAccrualPlan", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_accrual_plan_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_accrual_plan_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrLeaveType", "TimeOffType")
                        .WithMany("HrLeaveAccrualPlans")
                        .HasForeignKey("TimeOffTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_accrual_plan_time_off_type_id_fkey");

                    b.Navigation("TimeOffType");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrLeaveAllocation", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrLeaveAccrualPlan", "AccrualPlan")
                        .WithMany("HrLeaveAllocations")
                        .HasForeignKey("AccrualPlanId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_allocation_accrual_plan_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "Approver")
                        .WithMany("HrLeaveAllocationApprovers")
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_allocation_approver_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployeeCategory", "Category")
                        .WithMany("HrLeaveAllocations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_allocation_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_allocation_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrDepartment", "Department")
                        .WithMany("HrLeaveAllocations")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_allocation_department_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", "EmployeeCompany")
                        .WithMany("HrLeaveAllocationEmployeeCompanies")
                        .HasForeignKey("EmployeeCompanyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_allocation_employee_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "Employee")
                        .WithMany("HrLeaveAllocationEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_leave_allocation_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrLeaveType", "HolidayStatus")
                        .WithMany("HrLeaveAllocations")
                        .HasForeignKey("HolidayStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_leave_allocation_holiday_status_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_allocation_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_allocation_manager_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("HrLeaveAllocations")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_allocation_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", "ModeCompany")
                        .WithMany("HrLeaveAllocationModeCompanies")
                        .HasForeignKey("ModeCompanyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_allocation_mode_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrAttendanceOvertime", "Overtime")
                        .WithMany("HrLeaveAllocations")
                        .HasForeignKey("OvertimeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_allocation_overtime_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrLeaveAllocation", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_allocation_parent_id_fkey");

                    b.Navigation("AccrualPlan");

                    b.Navigation("Approver");

                    b.Navigation("Category");

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeCompany");

                    b.Navigation("HolidayStatus");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("ModeCompany");

                    b.Navigation("Overtime");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrLeaveStressDay", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_stress_day_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_stress_day_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResourceCalendar", "ResourceCalendar")
                        .WithMany("HrLeaveStressDays")
                        .HasForeignKey("ResourceCalendarId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_stress_day_resource_calendar_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_leave_stress_day_company_id_fkey");

                    b.Navigation("ResourceCalendar");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrLeaveType", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailMessageSubtype", "AllocationNotifSubtype")
                        .WithMany("HrLeaveTypeAllocationNotifSubtypes")
                        .HasForeignKey("AllocationNotifSubtypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_type_allocation_notif_subtype_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_type_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "Icon")
                        .WithMany("HrLeaveTypes")
                        .HasForeignKey("IconId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_type_icon_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_type_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMessageSubtype", "LeaveNotifSubtype")
                        .WithMany("HrLeaveTypeLeaveNotifSubtypes")
                        .HasForeignKey("LeaveNotifSubtypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_type_leave_notif_subtype_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_type_responsible_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_leave_type_company_id_fkey");

                    b.Navigation("AllocationNotifSubtype");

                    b.Navigation("Icon");

                    b.Navigation("LeaveNotifSubtype");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrPayrollStructureType", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResCountry", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_payroll_structure_type_country_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_payroll_structure_type_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResourceCalendar", "DefaultResourceCalendar")
                        .WithMany("HrPayrollStructureTypes")
                        .HasForeignKey("DefaultResourceCalendarId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_payroll_structure_type_default_resource_calendar_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_payroll_structure_type_write_uid_fkey");

                    b.Navigation("DefaultResourceCalendar");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrPlan", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_plan_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrDepartment", "Department")
                        .WithMany("HrPlans")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_plan_department_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_plan_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_plan_company_id_fkey");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrPlanActivityType", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailActivityType", "ActivityType")
                        .WithMany("HrPlanActivityTypes")
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_plan_activity_type_activity_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_plan_activity_type_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_plan_activity_type_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrPlan", "Plan")
                        .WithMany("HrPlanActivityTypes")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_plan_activity_type_plan_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_plan_activity_type_responsible_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_plan_activity_type_company_id_fkey");

                    b.Navigation("ActivityType");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrPlanWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_plan_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_plan_wizard_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrPlan", "Plan")
                        .WithMany("HrPlanWizards")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_plan_wizard_plan_id_fkey");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrRecruitmentDegree", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_recruitment_degree_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_recruitment_degree_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrRecruitmentSource", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailAlias", "Alias")
                        .WithMany("HrRecruitmentSources")
                        .HasForeignKey("AliasId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_recruitment_source_alias_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_recruitment_source_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrJob", "Job")
                        .WithMany("HrRecruitmentSources")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("hr_recruitment_source_job_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_recruitment_source_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.UtmMedium", "Medium")
                        .WithMany("HrRecruitmentSources")
                        .HasForeignKey("MediumId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_recruitment_source_medium_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UtmSource", "Source")
                        .WithMany("HrRecruitmentSources")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_recruitment_source_source_id_fkey");

                    b.Navigation("Alias");

                    b.Navigation("Job");

                    b.Navigation("Medium");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrRecruitmentStage", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_recruitment_stage_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_recruitment_stage_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailTemplate", "Template")
                        .WithMany("HrRecruitmentStages")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_recruitment_stage_template_id_fkey");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrResumeLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_resume_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "Employee")
                        .WithMany("HrResumeLines")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("hr_resume_line_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_resume_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrResumeLineType", "LineType")
                        .WithMany("HrResumeLines")
                        .HasForeignKey("LineTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_resume_line_line_type_id_fkey");

                    b.Navigation("Employee");

                    b.Navigation("LineType");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrResumeLineType", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_resume_line_type_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_resume_line_type_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrSkill", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_skill_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_skill_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrSkillType", "SkillType")
                        .WithMany("HrSkills")
                        .HasForeignKey("SkillTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("hr_skill_skill_type_id_fkey");

                    b.Navigation("SkillType");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrSkillLevel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_skill_level_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_skill_level_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrSkillType", "SkillType")
                        .WithMany("HrSkillLevels")
                        .HasForeignKey("SkillTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("hr_skill_level_skill_type_id_fkey");

                    b.Navigation("SkillType");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrSkillType", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_skill_type_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_skill_type_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrWorkLocation", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResPartner", "Address")
                        .WithMany("HrWorkLocations")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_work_location_address_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_work_location_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("hr_work_location_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("hr_work_location_company_id_fkey");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IapAccount", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("iap_account_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("iap_account_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrActClient", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrModel", "BindingModel")
                        .WithMany("IrActClients")
                        .HasForeignKey("BindingModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_act_client_binding_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_act_client_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_act_client_write_uid_fkey");

                    b.Navigation("BindingModel");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrActReportXml", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrModel", "BindingModel")
                        .WithMany("IrActReportXmls")
                        .HasForeignKey("BindingModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_act_report_xml_binding_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_act_report_xml_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_act_report_xml_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ReportPaperformat", "Paperformat")
                        .WithMany("IrActReportXmls")
                        .HasForeignKey("PaperformatId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_act_report_xml_paperformat_id_fkey");

                    b.Navigation("BindingModel");

                    b.Navigation("Paperformat");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrActServer", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailActivityType", "ActivityType")
                        .WithMany("IrActServers")
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("ir_act_server_activity_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("ActivityUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_act_server_activity_user_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModel", "BindingModel")
                        .WithMany("IrActServerBindingModels")
                        .HasForeignKey("BindingModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_act_server_binding_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_act_server_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModel", "CrudModel")
                        .WithMany("IrActServerCrudModels")
                        .HasForeignKey("CrudModelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_act_server_crud_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_act_server_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModelField", "LinkField")
                        .WithMany("IrActServers")
                        .HasForeignKey("LinkFieldId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_act_server_link_field_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModel", "Model")
                        .WithMany("IrActServerModels")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_act_server_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SmsTemplate", "SmsTemplate")
                        .WithMany("IrActServers")
                        .HasForeignKey("SmsTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_act_server_sms_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailTemplate", "Template")
                        .WithMany("IrActServers")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_act_server_template_id_fkey");

                    b.Navigation("ActivityType");

                    b.Navigation("BindingModel");

                    b.Navigation("CrudModel");

                    b.Navigation("LinkField");

                    b.Navigation("Model");

                    b.Navigation("SmsTemplate");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrActUrl", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrModel", "BindingModel")
                        .WithMany("IrActUrls")
                        .HasForeignKey("BindingModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_act_url_binding_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_act_url_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_act_url_write_uid_fkey");

                    b.Navigation("BindingModel");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrActWindow", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrModel", "BindingModel")
                        .WithMany("IrActWindows")
                        .HasForeignKey("BindingModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_act_window_binding_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_act_window_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_act_window_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrUiView", "SearchView")
                        .WithMany("IrActWindowSearchViews")
                        .HasForeignKey("SearchViewId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_act_window_search_view_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrUiView", "View")
                        .WithMany("IrActWindowViews")
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_act_window_view_id_fkey");

                    b.Navigation("BindingModel");

                    b.Navigation("SearchView");

                    b.Navigation("View");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrActWindowView", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrActWindow", "ActWindow")
                        .WithMany("IrActWindowViews")
                        .HasForeignKey("ActWindowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_act_window_view_act_window_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_act_window_view_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_act_window_view_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrUiView", "View")
                        .WithMany("IrActWindowViewsNavigation")
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_act_window_view_view_id_fkey");

                    b.Navigation("ActWindow");

                    b.Navigation("View");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrAction", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrModel", "BindingModel")
                        .WithMany("IrActions")
                        .HasForeignKey("BindingModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_actions_binding_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_actions_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_actions_write_uid_fkey");

                    b.Navigation("BindingModel");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrActionsTodo", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_actions_todo_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_actions_todo_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrAsset", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_asset_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_asset_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ThemeIrAsset", "ThemeTemplate")
                        .WithMany("IrAssets")
                        .HasForeignKey("ThemeTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_asset_theme_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", "Website")
                        .WithMany("IrAssets")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_asset_website_id_fkey");

                    b.Navigation("ThemeTemplate");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrAttachment", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_attachment_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_attachment_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "Original")
                        .WithMany("InverseOriginal")
                        .HasForeignKey("OriginalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_attachment_original_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_attachment_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ThemeIrAttachment", "ThemeTemplate")
                        .WithMany("IrAttachments")
                        .HasForeignKey("ThemeTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_attachment_theme_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", "Website")
                        .WithMany("IrAttachments")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_attachment_website_id_fkey");

                    b.Navigation("Original");

                    b.Navigation("ThemeTemplate");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrConfigParameter", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_config_parameter_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_config_parameter_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrCron", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_cron_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrActServer", "IrActionsServer")
                        .WithMany("IrCrons")
                        .HasForeignKey("IrActionsServerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("ir_cron_ir_actions_server_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_cron_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("ir_cron_user_id_fkey");

                    b.Navigation("IrActionsServer");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrCronTrigger", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_cron_trigger_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrCron", "Cron")
                        .WithMany("IrCronTriggers")
                        .HasForeignKey("CronId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_cron_trigger_cron_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_cron_trigger_write_uid_fkey");

                    b.Navigation("Cron");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrDefault", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_default_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModelField", "Field")
                        .WithMany("IrDefaults")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_default_field_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_default_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_default_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_default_user_id_fkey");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrDemo", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_demo_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_demo_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrDemoFailure", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_demo_failure_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_demo_failure_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModuleModule", "Module")
                        .WithMany("IrDemoFailures")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_demo_failure_module_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrDemoFailureWizard", "Wizard")
                        .WithMany("IrDemoFailures")
                        .HasForeignKey("WizardId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_demo_failure_wizard_id_fkey");

                    b.Navigation("Module");

                    b.Navigation("Wizard");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrDemoFailureWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_demo_failure_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_demo_failure_wizard_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrExport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_exports_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_exports_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrExportsLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_exports_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrExport", "Export")
                        .WithMany("IrExportsLines")
                        .HasForeignKey("ExportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_exports_line_export_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_exports_line_write_uid_fkey");

                    b.Navigation("Export");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrFilter", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_filters_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_filters_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_filters_user_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrMailServer", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_mail_server_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_mail_server_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_model_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_model_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModelField", "WebsiteFormDefaultField")
                        .WithMany("IrModels")
                        .HasForeignKey("WebsiteFormDefaultFieldId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_model_website_form_default_field_id_fkey");

                    b.Navigation("WebsiteFormDefaultField");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModelAccess", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_model_access_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResGroup", "Group")
                        .WithMany("IrModelAccesses")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("ir_model_access_group_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_model_access_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModel", "Model")
                        .WithMany("IrModelAccesses")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_model_access_model_id_fkey");

                    b.Navigation("Group");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModelConstraint", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_model_constraint_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_model_constraint_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModel", "ModelNavigation")
                        .WithMany("IrModelConstraints")
                        .HasForeignKey("Model")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_model_constraint_model_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModuleModule", "ModuleNavigation")
                        .WithMany("IrModelConstraints")
                        .HasForeignKey("Module")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_model_constraint_module_fkey");

                    b.Navigation("ModelNavigation");

                    b.Navigation("ModuleNavigation");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModelDatum", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_model_data_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_model_data_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModelField", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_model_fields_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_model_fields_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModel", "ModelNavigation")
                        .WithMany("IrModelFields")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_model_fields_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModelField", "RelatedField")
                        .WithMany("InverseRelatedField")
                        .HasForeignKey("RelatedFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_model_fields_related_field_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModelField", "RelationFieldNavigation")
                        .WithMany("InverseRelationFieldNavigation")
                        .HasForeignKey("RelationFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_model_fields_relation_field_id_fkey");

                    b.Navigation("ModelNavigation");

                    b.Navigation("RelatedField");

                    b.Navigation("RelationFieldNavigation");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModelFieldsSelection", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_model_fields_selection_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModelField", "Field")
                        .WithMany("IrModelFieldsSelections")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_model_fields_selection_field_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_model_fields_selection_write_uid_fkey");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModelRelation", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_model_relation_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_model_relation_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModel", "ModelNavigation")
                        .WithMany("IrModelRelations")
                        .HasForeignKey("Model")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_model_relation_model_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModuleModule", "ModuleNavigation")
                        .WithMany("IrModelRelations")
                        .HasForeignKey("Module")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_model_relation_module_fkey");

                    b.Navigation("ModelNavigation");

                    b.Navigation("ModuleNavigation");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModuleCategory", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_module_category_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_module_category_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModuleCategory", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_module_category_parent_id_fkey");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModuleModule", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrModuleCategory", "Category")
                        .WithMany("IrModuleModules")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_module_module_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_module_module_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_module_module_write_uid_fkey");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModuleModuleDependency", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrModuleModule", "Module")
                        .WithMany("IrModuleModuleDependencies")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_module_module_dependency_module_id_fkey");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModuleModuleExclusion", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_module_module_exclusion_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_module_module_exclusion_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModuleModule", "Module")
                        .WithMany("IrModuleModuleExclusions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_module_module_exclusion_module_id_fkey");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrProperty", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_property_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModelField", "Fields")
                        .WithMany("IrProperties")
                        .HasForeignKey("FieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_property_fields_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_property_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_property_company_id_fkey");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrRule", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_rule_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_rule_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModel", "Model")
                        .WithMany("IrRules")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_rule_model_id_fkey");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrSequence", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_sequence_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_sequence_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_sequence_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrSequenceDateRange", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_sequence_date_range_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_sequence_date_range_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrSequence", "Sequence")
                        .WithMany("IrSequenceDateRanges")
                        .HasForeignKey("SequenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_sequence_date_range_sequence_id_fkey");

                    b.Navigation("Sequence");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrServerObjectLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrModelField", "Col1Navigation")
                        .WithMany("IrServerObjectLines")
                        .HasForeignKey("Col1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_server_object_lines_col1_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_server_object_lines_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_server_object_lines_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrActServer", "Server")
                        .WithMany("IrServerObjectLines")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_server_object_lines_server_id_fkey");

                    b.Navigation("Col1Navigation");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrUiMenu", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_ui_menu_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_ui_menu_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrUiMenu", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("ir_ui_menu_parent_id_fkey");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrUiView", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_ui_view_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrUiView", "Inherit")
                        .WithMany("InverseInherit")
                        .HasForeignKey("InheritId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("ir_ui_view_inherit_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_ui_view_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ThemeIrUiView", "ThemeTemplate")
                        .WithMany("IrUiViews")
                        .HasForeignKey("ThemeTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_ui_view_theme_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", "Website")
                        .WithMany("IrUiViews")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_ui_view_website_id_fkey");

                    b.Navigation("Inherit");

                    b.Navigation("ThemeTemplate");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrUiViewCustom", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_ui_view_custom_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("ir_ui_view_custom_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrUiView", "Ref")
                        .WithMany("IrUiViewCustoms")
                        .HasForeignKey("RefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_ui_view_custom_ref_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ir_ui_view_custom_user_id_fkey");

                    b.Navigation("Ref");
                });

            modelBuilder.Entity("Bamboo.Core.Models.LotLabelLayout", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lot_label_layout_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lot_label_layout_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.LunchAlert", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_alert_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrCron", "Cron")
                        .WithMany("LunchAlerts")
                        .HasForeignKey("CronId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("lunch_alert_cron_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_alert_write_uid_fkey");

                    b.Navigation("Cron");
                });

            modelBuilder.Entity("Bamboo.Core.Models.LunchCashmove", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_cashmove_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("lunch_cashmove_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_cashmove_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_cashmove_user_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.LunchLocation", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_location_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_location_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_location_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.LunchOrder", b =>
                {
                    b.HasOne("Bamboo.Core.Models.LunchProductCategory", "Category")
                        .WithMany("LunchOrders")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_order_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_order_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_order_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_order_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.LunchLocation", "LunchLocation")
                        .WithMany("LunchOrders")
                        .HasForeignKey("LunchLocationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_order_lunch_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.LunchProduct", "Product")
                        .WithMany("LunchOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("lunch_order_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.LunchSupplier", "Supplier")
                        .WithMany("LunchOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_order_supplier_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_order_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_order_user_id_fkey");

                    b.Navigation("Category");

                    b.Navigation("LunchLocation");

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Bamboo.Core.Models.LunchProduct", b =>
                {
                    b.HasOne("Bamboo.Core.Models.LunchProductCategory", "Category")
                        .WithMany("LunchProducts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("lunch_product_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_product_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_product_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.LunchSupplier", "Supplier")
                        .WithMany("LunchProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("lunch_product_supplier_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_product_company_id_fkey");

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Bamboo.Core.Models.LunchProductCategory", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_product_category_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_product_category_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_product_category_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.LunchSupplier", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_supplier_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrCron", "Cron")
                        .WithMany("LunchSuppliers")
                        .HasForeignKey("CronId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("lunch_supplier_cron_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_supplier_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("LunchSuppliers")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_supplier_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("lunch_supplier_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("ResponsibleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_supplier_responsible_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_supplier_company_id_fkey");

                    b.Navigation("Cron");

                    b.Navigation("MessageMainAttachment");
                });

            modelBuilder.Entity("Bamboo.Core.Models.LunchTopping", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_topping_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_topping_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.LunchSupplier", "Supplier")
                        .WithMany("LunchToppings")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("lunch_topping_supplier_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("lunch_topping_company_id_fkey");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailActivity", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailActivityType", "ActivityType")
                        .WithMany("MailActivityActivityTypes")
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mail_activity_activity_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CalendarEvent", "CalendarEvent")
                        .WithMany("MailActivities")
                        .HasForeignKey("CalendarEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mail_activity_calendar_event_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_activity_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_activity_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.NoteNote", "NoteNavigation")
                        .WithMany("MailActivities")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mail_activity_note_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailActivityType", "PreviousActivityType")
                        .WithMany("MailActivityPreviousActivityTypes")
                        .HasForeignKey("PreviousActivityTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_activity_previous_activity_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailActivityType", "RecommendedActivityType")
                        .WithMany("MailActivityRecommendedActivityTypes")
                        .HasForeignKey("RecommendedActivityTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_activity_recommended_activity_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "RequestPartner")
                        .WithMany("MailActivities")
                        .HasForeignKey("RequestPartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_activity_request_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModel", "ResModelNavigation")
                        .WithMany("MailActivities")
                        .HasForeignKey("ResModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mail_activity_res_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mail_activity_user_id_fkey");

                    b.Navigation("ActivityType");

                    b.Navigation("CalendarEvent");

                    b.Navigation("NoteNavigation");

                    b.Navigation("PreviousActivityType");

                    b.Navigation("RecommendedActivityType");

                    b.Navigation("RequestPartner");

                    b.Navigation("ResModelNavigation");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailActivityType", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_activity_type_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("DefaultUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_activity_type_default_user_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_activity_type_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailActivityType", "TriggeredNextType")
                        .WithMany("InverseTriggeredNextType")
                        .HasForeignKey("TriggeredNextTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mail_activity_type_triggered_next_type_id_fkey");

                    b.Navigation("TriggeredNextType");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailAlias", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrModel", "AliasModel")
                        .WithMany("MailAliasAliasModels")
                        .HasForeignKey("AliasModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mail_alias_alias_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModel", "AliasParentModel")
                        .WithMany("MailAliasAliasParentModels")
                        .HasForeignKey("AliasParentModelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_alias_alias_parent_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("AliasUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_alias_alias_user_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_alias_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_alias_write_uid_fkey");

                    b.Navigation("AliasModel");

                    b.Navigation("AliasParentModel");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailBlacklist", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_blacklist_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_blacklist_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("MailBlacklists")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_blacklist_message_main_attachment_id_fkey");

                    b.Navigation("MessageMainAttachment");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailBlacklistRemove", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_blacklist_remove_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_blacklist_remove_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailChannel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_channel_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResGroup", "GroupPublic")
                        .WithMany("MailChannels")
                        .HasForeignKey("GroupPublicId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_channel_group_public_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_channel_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("MailChannels")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_channel_message_main_attachment_id_fkey");

                    b.Navigation("GroupPublic");

                    b.Navigation("MessageMainAttachment");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailChannelMember", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailChannel", "Channel")
                        .WithMany("MailChannelMembers")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mail_channel_member_channel_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_channel_member_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMessage", "FetchedMessage")
                        .WithMany("MailChannelMemberFetchedMessages")
                        .HasForeignKey("FetchedMessageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_channel_member_fetched_message_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailGuest", "Guest")
                        .WithMany("MailChannelMembers")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mail_channel_member_guest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_channel_member_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mail_channel_member_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailChannelRtcSession", "RtcInvitingSession")
                        .WithMany("MailChannelMembers")
                        .HasForeignKey("RtcInvitingSessionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_channel_member_rtc_inviting_session_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMessage", "SeenMessage")
                        .WithMany("MailChannelMemberSeenMessages")
                        .HasForeignKey("SeenMessageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_channel_member_seen_message_id_fkey");

                    b.Navigation("Channel");

                    b.Navigation("FetchedMessage");

                    b.Navigation("Guest");

                    b.Navigation("RtcInvitingSession");

                    b.Navigation("SeenMessage");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailChannelRtcSession", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailChannel", "Channel")
                        .WithMany("MailChannelRtcSessions")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_channel_rtc_session_channel_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailChannelMember", "ChannelMember")
                        .WithOne("MailChannelRtcSession")
                        .HasForeignKey("Bamboo.Core.Models.MailChannelRtcSession", "ChannelMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mail_channel_rtc_session_channel_member_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_channel_rtc_session_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_channel_rtc_session_write_uid_fkey");

                    b.Navigation("Channel");

                    b.Navigation("ChannelMember");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailComposeMessage", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResPartner", "Author")
                        .WithMany("MailComposeMessages")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_compose_message_author_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_compose_message_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_compose_message_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailActivityType", "MailActivityType")
                        .WithMany("MailComposeMessages")
                        .HasForeignKey("MailActivityTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_compose_message_mail_activity_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrMailServer", "MailServer")
                        .WithMany("MailComposeMessages")
                        .HasForeignKey("MailServerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_compose_message_mail_server_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMessage", "Parent")
                        .WithMany("MailComposeMessages")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_compose_message_parent_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMessageSubtype", "Subtype")
                        .WithMany("MailComposeMessages")
                        .HasForeignKey("SubtypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_compose_message_subtype_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailTemplate", "Template")
                        .WithMany("MailComposeMessages")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_compose_message_template_id_fkey");

                    b.Navigation("Author");

                    b.Navigation("MailActivityType");

                    b.Navigation("MailServer");

                    b.Navigation("Parent");

                    b.Navigation("Subtype");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailFollower", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mail_followers_partner_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailGatewayAllowed", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_gateway_allowed_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_gateway_allowed_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailGuest", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResCountry", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_guest_country_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_guest_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_guest_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailIceServer", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_ice_server_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_ice_server_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailLinkPreview", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_link_preview_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_link_preview_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMessage", "Message")
                        .WithMany("MailLinkPreviews")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mail_link_preview_message_id_fkey");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailMail", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_mail_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.FetchmailServer", "FetchmailServer")
                        .WithMany("MailMails")
                        .HasForeignKey("FetchmailServerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_mail_fetchmail_server_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_mail_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMessage", "MailMessage")
                        .WithMany("MailMails")
                        .HasForeignKey("MailMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mail_mail_mail_message_id_fkey");

                    b.Navigation("FetchmailServer");

                    b.Navigation("MailMessage");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailMessage", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailGuest", "AuthorGuest")
                        .WithMany("MailMessages")
                        .HasForeignKey("AuthorGuestId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_message_author_guest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "Author")
                        .WithMany("MailMessages")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_message_author_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_message_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_message_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailActivityType", "MailActivityType")
                        .WithMany("MailMessages")
                        .HasForeignKey("MailActivityTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_message_mail_activity_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrMailServer", "MailServer")
                        .WithMany("MailMessages")
                        .HasForeignKey("MailServerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_message_mail_server_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMessage", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_message_parent_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMessageSubtype", "Subtype")
                        .WithMany("MailMessages")
                        .HasForeignKey("SubtypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_message_subtype_id_fkey");

                    b.Navigation("Author");

                    b.Navigation("AuthorGuest");

                    b.Navigation("MailActivityType");

                    b.Navigation("MailServer");

                    b.Navigation("Parent");

                    b.Navigation("Subtype");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailMessageReaction", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailGuest", "Guest")
                        .WithMany("MailMessageReactions")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mail_message_reaction_guest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMessage", "Message")
                        .WithMany("MailMessageReactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mail_message_reaction_message_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mail_message_reaction_partner_id_fkey");

                    b.Navigation("Guest");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailMessageSchedule", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_message_schedule_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_message_schedule_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMessage", "MailMessage")
                        .WithMany("MailMessageSchedules")
                        .HasForeignKey("MailMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mail_message_schedule_mail_message_id_fkey");

                    b.Navigation("MailMessage");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailMessageSubtype", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_message_subtype_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_message_subtype_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMessageSubtype", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_message_subtype_parent_id_fkey");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailNotification", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResPartner", "Author")
                        .WithMany("MailNotificationAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_notification_author_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SnailmailLetter", "Letter")
                        .WithMany("MailNotifications")
                        .HasForeignKey("LetterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mail_notification_letter_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMail", "MailMail")
                        .WithMany("MailNotifications")
                        .HasForeignKey("MailMailId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_notification_mail_mail_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMessage", "MailMessage")
                        .WithMany("MailNotifications")
                        .HasForeignKey("MailMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mail_notification_mail_message_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "ResPartner")
                        .WithMany("MailNotificationResPartners")
                        .HasForeignKey("ResPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mail_notification_res_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SmsSm", "Sms")
                        .WithMany("MailNotifications")
                        .HasForeignKey("SmsId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_notification_sms_id_fkey");

                    b.Navigation("Author");

                    b.Navigation("Letter");

                    b.Navigation("MailMail");

                    b.Navigation("MailMessage");

                    b.Navigation("ResPartner");

                    b.Navigation("Sms");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailResendMessage", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_resend_message_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_resend_message_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMessage", "MailMessage")
                        .WithMany("MailResendMessages")
                        .HasForeignKey("MailMessageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_resend_message_mail_message_id_fkey");

                    b.Navigation("MailMessage");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailResendPartner", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_resend_partner_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_resend_partner_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mail_resend_partner_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailResendMessage", "ResendWizard")
                        .WithMany("MailResendPartners")
                        .HasForeignKey("ResendWizardId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_resend_partner_resend_wizard_id_fkey");

                    b.Navigation("ResendWizard");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailShortcode", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_shortcode_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_shortcode_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailTemplate", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_template_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_template_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrMailServer", "MailServer")
                        .WithMany("MailTemplates")
                        .HasForeignKey("MailServerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_template_mail_server_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModel", "ModelNavigation")
                        .WithMany("MailTemplates")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_template_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrActWindow", "RefIrActWindowNavigation")
                        .WithMany("MailTemplates")
                        .HasForeignKey("RefIrActWindow")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_template_ref_ir_act_window_fkey");

                    b.HasOne("Bamboo.Core.Models.IrActReportXml", "ReportTemplateNavigation")
                        .WithMany("MailTemplates")
                        .HasForeignKey("ReportTemplate")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_template_report_template_fkey");

                    b.Navigation("MailServer");

                    b.Navigation("ModelNavigation");

                    b.Navigation("RefIrActWindowNavigation");

                    b.Navigation("ReportTemplateNavigation");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailTemplatePreview", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_template_preview_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_template_preview_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailTemplate", "MailTemplate")
                        .WithMany("MailTemplatePreviews")
                        .HasForeignKey("MailTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mail_template_preview_mail_template_id_fkey");

                    b.Navigation("MailTemplate");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailTemplateReset", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_template_reset_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_template_reset_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailTrackingValue", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_tracking_value_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_tracking_value_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModelField", "FieldNavigation")
                        .WithMany("MailTrackingValues")
                        .HasForeignKey("Field")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mail_tracking_value_field_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_tracking_value_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMessage", "MailMessage")
                        .WithMany("MailTrackingValues")
                        .HasForeignKey("MailMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mail_tracking_value_mail_message_id_fkey");

                    b.Navigation("FieldNavigation");

                    b.Navigation("MailMessage");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailWizardInvite", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_wizard_invite_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mail_wizard_invite_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MaintenanceEquipment", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MaintenanceEquipmentCategory", "Category")
                        .WithMany("MaintenanceEquipments")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_equipment_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_equipment_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrDepartment", "Department")
                        .WithMany("MaintenanceEquipments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_equipment_department_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "Employee")
                        .WithMany("MaintenanceEquipments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_equipment_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_equipment_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MaintenanceTeam", "MaintenanceTeam")
                        .WithMany("MaintenanceEquipments")
                        .HasForeignKey("MaintenanceTeamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_equipment_maintenance_team_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("MaintenanceEquipments")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_equipment_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_equipment_owner_user_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_equipment_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("TechnicianUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_equipment_technician_user_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_equipment_company_id_fkey");

                    b.Navigation("Category");

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("MaintenanceTeam");

                    b.Navigation("MessageMainAttachment");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MaintenanceEquipmentCategory", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailAlias", "Alias")
                        .WithMany("MaintenanceEquipmentCategories")
                        .HasForeignKey("AliasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("maintenance_equipment_category_alias_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_equipment_category_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_equipment_category_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("MaintenanceEquipmentCategories")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_equipment_category_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("TechnicianUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_equipment_category_technician_user_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_equipment_category_company_id_fkey");

                    b.Navigation("Alias");

                    b.Navigation("MessageMainAttachment");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MaintenanceRequest", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MaintenanceEquipmentCategory", "Category")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_request_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_request_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "Employee")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_request_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MaintenanceEquipment", "Equipment")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("maintenance_request_equipment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_request_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MaintenanceTeam", "MaintenanceTeam")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("MaintenanceTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("maintenance_request_maintenance_team_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_request_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_request_owner_user_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MaintenanceStage", "Stage")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("maintenance_request_stage_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_request_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_request_user_id_fkey");

                    b.Navigation("Category");

                    b.Navigation("Employee");

                    b.Navigation("Equipment");

                    b.Navigation("MaintenanceTeam");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MaintenanceStage", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_stage_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_stage_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MaintenanceTeam", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_team_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_team_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("maintenance_team_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpBom", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_bom_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_bom_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("MrpBoms")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_bom_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPickingType", "PickingType")
                        .WithMany("MrpBoms")
                        .HasForeignKey("PickingTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_bom_picking_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("MrpBoms")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_bom_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplate", "ProductTmpl")
                        .WithMany("MrpBoms")
                        .HasForeignKey("ProductTmplId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_bom_product_tmpl_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "ProductUom")
                        .WithMany("MrpBoms")
                        .HasForeignKey("ProductUomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_bom_product_uom_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_bom_company_id_fkey");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("PickingType");

                    b.Navigation("Product");

                    b.Navigation("ProductTmpl");

                    b.Navigation("ProductUom");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpBomByproduct", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MrpBom", "Bom")
                        .WithMany("MrpBomByproducts")
                        .HasForeignKey("BomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mrp_bom_byproduct_bom_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_bom_byproduct_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_bom_byproduct_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpRoutingWorkcenter", "Operation")
                        .WithMany("MrpBomByproducts")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_bom_byproduct_operation_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("MrpBomByproducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_bom_byproduct_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "ProductUom")
                        .WithMany("MrpBomByproducts")
                        .HasForeignKey("ProductUomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_bom_byproduct_product_uom_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_bom_byproduct_company_id_fkey");

                    b.Navigation("Bom");

                    b.Navigation("Operation");

                    b.Navigation("Product");

                    b.Navigation("ProductUom");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpBomLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MrpBom", "Bom")
                        .WithMany("MrpBomLines")
                        .HasForeignKey("BomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mrp_bom_line_bom_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_bom_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_bom_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpRoutingWorkcenter", "Operation")
                        .WithMany("MrpBomLines")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_bom_line_operation_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("MrpBomLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_bom_line_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplate", "ProductTmpl")
                        .WithMany("MrpBomLines")
                        .HasForeignKey("ProductTmplId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_bom_line_product_tmpl_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "ProductUom")
                        .WithMany("MrpBomLines")
                        .HasForeignKey("ProductUomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_bom_line_product_uom_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_bom_line_company_id_fkey");

                    b.Navigation("Bom");

                    b.Navigation("Operation");

                    b.Navigation("Product");

                    b.Navigation("ProductTmpl");

                    b.Navigation("ProductUom");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpConsumptionWarning", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_consumption_warning_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_consumption_warning_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpConsumptionWarningLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_consumption_warning_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_consumption_warning_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpConsumptionWarning", "MrpConsumptionWarning")
                        .WithMany("MrpConsumptionWarningLines")
                        .HasForeignKey("MrpConsumptionWarningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mrp_consumption_warning_line_mrp_consumption_warning_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpProduction", "MrpProduction")
                        .WithMany("MrpConsumptionWarningLines")
                        .HasForeignKey("MrpProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mrp_consumption_warning_line_mrp_production_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("MrpConsumptionWarningLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mrp_consumption_warning_line_product_id_fkey");

                    b.Navigation("MrpConsumptionWarning");

                    b.Navigation("MrpProduction");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpDocument", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_document_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "IrAttachment")
                        .WithMany("MrpDocuments")
                        .HasForeignKey("IrAttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mrp_document_ir_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_document_write_uid_fkey");

                    b.Navigation("IrAttachment");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpImmediateProduction", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_immediate_production_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_immediate_production_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpImmediateProductionLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_immediate_production_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpImmediateProduction", "ImmediateProduction")
                        .WithMany("MrpImmediateProductionLines")
                        .HasForeignKey("ImmediateProductionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_immediate_production_line_immediate_production_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_immediate_production_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpProduction", "Production")
                        .WithMany("MrpImmediateProductionLines")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mrp_immediate_production_line_production_id_fkey");

                    b.Navigation("ImmediateProduction");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpProduction", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAnalyticAccount", "AnalyticAccount")
                        .WithMany("MrpProductions")
                        .HasForeignKey("AnalyticAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_analytic_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpBom", "Bom")
                        .WithMany("MrpProductions")
                        .HasForeignKey("BomId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_bom_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "LocationDest")
                        .WithMany("MrpProductionLocationDests")
                        .HasForeignKey("LocationDestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_production_location_dest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "LocationSrc")
                        .WithMany("MrpProductionLocationSrcs")
                        .HasForeignKey("LocationSrcId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_production_location_src_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLot", "LotProducing")
                        .WithMany("MrpProductions")
                        .HasForeignKey("LotProducingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_lot_producing_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("MrpProductions")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockWarehouseOrderpoint", "Orderpoint")
                        .WithMany("MrpProductions")
                        .HasForeignKey("OrderpointId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_orderpoint_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPickingType", "PickingType")
                        .WithMany("MrpProductions")
                        .HasForeignKey("PickingTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_production_picking_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProcurementGroup", "ProcurementGroup")
                        .WithMany("MrpProductions")
                        .HasForeignKey("ProcurementGroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_procurement_group_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("MrpProductions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_production_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "ProductUom")
                        .WithMany("MrpProductions")
                        .HasForeignKey("ProductUomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_production_product_uom_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "ProductionLocation")
                        .WithMany("MrpProductionProductionLocations")
                        .HasForeignKey("ProductionLocationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_production_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_production_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_user_id_fkey");

                    b.Navigation("AnalyticAccount");

                    b.Navigation("Bom");

                    b.Navigation("LocationDest");

                    b.Navigation("LocationSrc");

                    b.Navigation("LotProducing");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Orderpoint");

                    b.Navigation("PickingType");

                    b.Navigation("ProcurementGroup");

                    b.Navigation("Product");

                    b.Navigation("ProductUom");

                    b.Navigation("ProductionLocation");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpProductionBackorder", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_backorder_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_backorder_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpProductionBackorderLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_backorder_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_backorder_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpProductionBackorder", "MrpProductionBackorder")
                        .WithMany("MrpProductionBackorderLines")
                        .HasForeignKey("MrpProductionBackorderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mrp_production_backorder_line_mrp_production_backorder_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpProduction", "MrpProduction")
                        .WithMany("MrpProductionBackorderLines")
                        .HasForeignKey("MrpProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mrp_production_backorder_line_mrp_production_id_fkey");

                    b.Navigation("MrpProduction");

                    b.Navigation("MrpProductionBackorder");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpProductionSplit", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_split_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_split_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpProduction", "Production")
                        .WithMany("MrpProductionSplits")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_split_production_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpProductionSplitMulti", "ProductionSplitMulti")
                        .WithMany("MrpProductionSplits")
                        .HasForeignKey("ProductionSplitMultiId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_split_production_split_multi_id_fkey");

                    b.Navigation("Production");

                    b.Navigation("ProductionSplitMulti");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpProductionSplitLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_split_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_split_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpProductionSplit", "MrpProductionSplit")
                        .WithMany("MrpProductionSplitLines")
                        .HasForeignKey("MrpProductionSplitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mrp_production_split_line_mrp_production_split_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_split_line_user_id_fkey");

                    b.Navigation("MrpProductionSplit");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpProductionSplitMulti", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_split_multi_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_production_split_multi_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpRoutingWorkcenter", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MrpBom", "Bom")
                        .WithMany("MrpRoutingWorkcenters")
                        .HasForeignKey("BomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("mrp_routing_workcenter_bom_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_routing_workcenter_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_routing_workcenter_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpWorkcenter", "Workcenter")
                        .WithMany("MrpRoutingWorkcenters")
                        .HasForeignKey("WorkcenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_routing_workcenter_workcenter_id_fkey");

                    b.Navigation("Bom");

                    b.Navigation("Workcenter");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpUnbuild", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MrpBom", "Bom")
                        .WithMany("MrpUnbuilds")
                        .HasForeignKey("BomId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_unbuild_bom_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_unbuild_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_unbuild_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "LocationDest")
                        .WithMany("MrpUnbuildLocationDests")
                        .HasForeignKey("LocationDestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_unbuild_location_dest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "Location")
                        .WithMany("MrpUnbuildLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_unbuild_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLot", "Lot")
                        .WithMany("MrpUnbuilds")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_unbuild_lot_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("MrpUnbuilds")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_unbuild_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpProduction", "Mo")
                        .WithMany("MrpUnbuilds")
                        .HasForeignKey("MoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_unbuild_mo_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("MrpUnbuilds")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_unbuild_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "ProductUom")
                        .WithMany("MrpUnbuilds")
                        .HasForeignKey("ProductUomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_unbuild_product_uom_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_unbuild_company_id_fkey");

                    b.Navigation("Bom");

                    b.Navigation("Location");

                    b.Navigation("LocationDest");

                    b.Navigation("Lot");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Mo");

                    b.Navigation("Product");

                    b.Navigation("ProductUom");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpWorkcenter", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAnalyticAccount", "CostsHourAccount")
                        .WithMany("MrpWorkcenters")
                        .HasForeignKey("CostsHourAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workcenter_costs_hour_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workcenter_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workcenter_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResourceCalendar", "ResourceCalendar")
                        .WithMany("MrpWorkcenters")
                        .HasForeignKey("ResourceCalendarId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workcenter_resource_calendar_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResourceResource", "Resource")
                        .WithMany("MrpWorkcenters")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_workcenter_resource_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workcenter_company_id_fkey");

                    b.Navigation("CostsHourAccount");

                    b.Navigation("Resource");

                    b.Navigation("ResourceCalendar");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpWorkcenterCapacity", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workcenter_capacity_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workcenter_capacity_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("MrpWorkcenterCapacities")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_workcenter_capacity_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpWorkcenter", "Workcenter")
                        .WithMany("MrpWorkcenterCapacities")
                        .HasForeignKey("WorkcenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_workcenter_capacity_workcenter_id_fkey");

                    b.Navigation("Product");

                    b.Navigation("Workcenter");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpWorkcenterProductivity", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workcenter_productivity_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workcenter_productivity_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpWorkcenterProductivityLoss", "Loss")
                        .WithMany("MrpWorkcenterProductivities")
                        .HasForeignKey("LossId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_workcenter_productivity_loss_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_workcenter_productivity_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workcenter_productivity_user_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpWorkcenter", "Workcenter")
                        .WithMany("MrpWorkcenterProductivities")
                        .HasForeignKey("WorkcenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_workcenter_productivity_workcenter_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpWorkorder", "Workorder")
                        .WithMany("MrpWorkcenterProductivities")
                        .HasForeignKey("WorkorderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workcenter_productivity_workorder_id_fkey");

                    b.Navigation("Loss");

                    b.Navigation("Workcenter");

                    b.Navigation("Workorder");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpWorkcenterProductivityLoss", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workcenter_productivity_loss_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workcenter_productivity_loss_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpWorkcenterProductivityLossType", "Loss")
                        .WithMany("MrpWorkcenterProductivityLosses")
                        .HasForeignKey("LossId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workcenter_productivity_loss_loss_id_fkey");

                    b.Navigation("Loss");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpWorkcenterProductivityLossType", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workcenter_productivity_loss_type_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workcenter_productivity_loss_type_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpWorkcenterTag", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workcenter_tag_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workcenter_tag_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpWorkorder", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workorder_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workorder_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResourceCalendarLeaf", "Leave")
                        .WithMany("MrpWorkorders")
                        .HasForeignKey("LeaveId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workorder_leave_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAnalyticLine", "MoAnalyticAccountLine")
                        .WithMany("MrpWorkorderMoAnalyticAccountLines")
                        .HasForeignKey("MoAnalyticAccountLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workorder_mo_analytic_account_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpRoutingWorkcenter", "Operation")
                        .WithMany("MrpWorkorders")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workorder_operation_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("MrpWorkorders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workorder_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "ProductUom")
                        .WithMany("MrpWorkorders")
                        .HasForeignKey("ProductUomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_workorder_product_uom_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpProduction", "Production")
                        .WithMany("MrpWorkorders")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_workorder_production_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAnalyticLine", "WcAnalyticAccountLine")
                        .WithMany("MrpWorkorderWcAnalyticAccountLines")
                        .HasForeignKey("WcAnalyticAccountLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("mrp_workorder_wc_analytic_account_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpWorkcenter", "Workcenter")
                        .WithMany("MrpWorkorders")
                        .HasForeignKey("WorkcenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_workorder_workcenter_id_fkey");

                    b.Navigation("Leave");

                    b.Navigation("MoAnalyticAccountLine");

                    b.Navigation("Operation");

                    b.Navigation("Product");

                    b.Navigation("ProductUom");

                    b.Navigation("Production");

                    b.Navigation("WcAnalyticAccountLine");

                    b.Navigation("Workcenter");
                });

            modelBuilder.Entity("Bamboo.Core.Models.NoteNote", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("note_note_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("note_note_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("NoteNotes")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("note_note_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("note_note_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("note_note_user_id_fkey");

                    b.Navigation("MessageMainAttachment");
                });

            modelBuilder.Entity("Bamboo.Core.Models.NoteStage", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("note_stage_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("note_stage_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("note_stage_user_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.NoteTag", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("note_tag_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("note_tag_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PartnerStatRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.FollowupPrint", "OsvMemory")
                        .WithMany("PartnerStatRels")
                        .HasForeignKey("OsvMemoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("partner_stat_rel_osv_memory_id_fkey");

                    b.Navigation("OsvMemory");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PaymentIcon", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_icon_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_icon_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PaymentLinkWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_link_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_link_wizard_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_link_wizard_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_link_wizard_partner_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PaymentProvider", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_provider_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrUiView", "ExpressCheckoutFormView")
                        .WithMany("PaymentProviderExpressCheckoutFormViews")
                        .HasForeignKey("ExpressCheckoutFormViewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("payment_provider_express_checkout_form_view_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrUiView", "InlineFormView")
                        .WithMany("PaymentProviderInlineFormViews")
                        .HasForeignKey("InlineFormViewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("payment_provider_inline_form_view_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_provider_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModuleModule", "Module")
                        .WithMany("PaymentProviders")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_provider_module_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrUiView", "RedirectFormView")
                        .WithMany("PaymentProviderRedirectFormViews")
                        .HasForeignKey("RedirectFormViewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("payment_provider_redirect_form_view_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("payment_provider_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrUiView", "TokenInlineFormView")
                        .WithMany("PaymentProviderTokenInlineFormViews")
                        .HasForeignKey("TokenInlineFormViewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("payment_provider_token_inline_form_view_id_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", "Website")
                        .WithMany("PaymentProviders")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("payment_provider_website_id_fkey");

                    b.Navigation("ExpressCheckoutFormView");

                    b.Navigation("InlineFormView");

                    b.Navigation("Module");

                    b.Navigation("RedirectFormView");

                    b.Navigation("TokenInlineFormView");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PaymentProviderOnboardingWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_provider_onboarding_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_provider_onboarding_wizard_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PaymentRefundWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_refund_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_refund_wizard_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountPayment", "Payment")
                        .WithMany("PaymentRefundWizards")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_refund_wizard_payment_id_fkey");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PaymentToken", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_token_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_token_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("payment_token_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PaymentProvider", "Provider")
                        .WithMany("PaymentTokens")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("payment_token_provider_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_token_company_id_fkey");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PaymentTransaction", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrModel", "CallbackModel")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("CallbackModelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_transaction_callback_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_transaction_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("payment_transaction_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_transaction_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountry", "PartnerCountry")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("PartnerCountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_transaction_partner_country_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("payment_transaction_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountryState", "PartnerState")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("PartnerStateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_transaction_partner_state_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountPayment", "Payment")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_transaction_payment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PaymentProvider", "Provider")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("payment_transaction_provider_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PaymentTransaction", "SourceTransaction")
                        .WithMany("InverseSourceTransaction")
                        .HasForeignKey("SourceTransactionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_transaction_source_transaction_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_transaction_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PaymentToken", "Token")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("TokenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("payment_transaction_token_id_fkey");

                    b.Navigation("CallbackModel");

                    b.Navigation("PartnerCountry");

                    b.Navigation("PartnerState");

                    b.Navigation("Payment");

                    b.Navigation("Provider");

                    b.Navigation("SourceTransaction");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PhoneBlacklist", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("phone_blacklist_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("phone_blacklist_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("PhoneBlacklists")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("phone_blacklist_message_main_attachment_id_fkey");

                    b.Navigation("MessageMainAttachment");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PhoneBlacklistRemove", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("phone_blacklist_remove_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("phone_blacklist_remove_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PickingLabelType", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("picking_label_type_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("picking_label_type_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PortalShare", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("portal_share_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("portal_share_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PortalWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("portal_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("portal_wizard_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PortalWizardUser", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("portal_wizard_user_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("portal_wizard_user_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("portal_wizard_user_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PortalWizard", "Wizard")
                        .WithMany("PortalWizardUsers")
                        .HasForeignKey("WizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("portal_wizard_user_wizard_id_fkey");

                    b.Navigation("Wizard");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosBill", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_bill_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_bill_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosCategory", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_category_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_category_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.PosCategory", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_category_parent_id_fkey");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosCloseSessionWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccount", "Account")
                        .WithMany("PosCloseSessionWizards")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_close_session_wizard_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_close_session_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_close_session_wizard_write_uid_fkey");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosConfig", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_config_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmTeam", "CrmTeam")
                        .WithMany("PosConfigs")
                        .HasForeignKey("CrmTeamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_config_crm_team_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountFiscalPosition", "DefaultFiscalPosition")
                        .WithMany("PosConfigsNavigation")
                        .HasForeignKey("DefaultFiscalPositionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_config_default_fiscal_position_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "DownPaymentProduct")
                        .WithMany("PosConfigDownPaymentProducts")
                        .HasForeignKey("DownPaymentProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_config_down_payment_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResGroup", "GroupPosManager")
                        .WithMany("PosConfigGroupPosManagers")
                        .HasForeignKey("GroupPosManagerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_config_group_pos_manager_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResGroup", "GroupPosUser")
                        .WithMany("PosConfigGroupPosUsers")
                        .HasForeignKey("GroupPosUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_config_group_pos_user_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PosCategory", "IfaceStartCateg")
                        .WithMany("PosConfigsNavigation")
                        .HasForeignKey("IfaceStartCategId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_config_iface_start_categ_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "InvoiceJournal")
                        .WithMany("PosConfigInvoiceJournals")
                        .HasForeignKey("InvoiceJournalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_config_invoice_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "Journal")
                        .WithMany("PosConfigJournals")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("pos_config_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_config_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPickingType", "PickingType")
                        .WithMany("PosConfigs")
                        .HasForeignKey("PickingTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("pos_config_picking_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductPricelist", "Pricelist")
                        .WithMany("PosConfigs")
                        .HasForeignKey("PricelistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("pos_config_pricelist_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountCashRounding", "RoundingMethodNavigation")
                        .WithMany("PosConfigs")
                        .HasForeignKey("RoundingMethod")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_config_rounding_method_fkey");

                    b.HasOne("Bamboo.Core.Models.StockRoute", "Route")
                        .WithMany("PosConfigs")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_config_route_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrSequence", "Sequence")
                        .WithMany("PosConfigSequences")
                        .HasForeignKey("SequenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("pos_config_sequence_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrSequence", "SequenceLine")
                        .WithMany("PosConfigSequenceLines")
                        .HasForeignKey("SequenceLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_config_sequence_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("pos_config_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "TipProduct")
                        .WithMany("PosConfigTipProducts")
                        .HasForeignKey("TipProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_config_tip_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockWarehouse", "Warehouse")
                        .WithMany("PosConfigs")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("pos_config_warehouse_id_fkey");

                    b.Navigation("CrmTeam");

                    b.Navigation("DefaultFiscalPosition");

                    b.Navigation("DownPaymentProduct");

                    b.Navigation("GroupPosManager");

                    b.Navigation("GroupPosUser");

                    b.Navigation("IfaceStartCateg");

                    b.Navigation("InvoiceJournal");

                    b.Navigation("Journal");

                    b.Navigation("PickingType");

                    b.Navigation("Pricelist");

                    b.Navigation("RoundingMethodNavigation");

                    b.Navigation("Route");

                    b.Navigation("Sequence");

                    b.Navigation("SequenceLine");

                    b.Navigation("TipProduct");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosDetailsWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_details_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_details_wizard_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosMakePayment", b =>
                {
                    b.HasOne("Bamboo.Core.Models.PosConfig", "Config")
                        .WithMany("PosMakePayments")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("pos_make_payment_config_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_make_payment_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_make_payment_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.PosPaymentMethod", "PaymentMethod")
                        .WithMany("PosMakePayments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("pos_make_payment_payment_method_id_fkey");

                    b.Navigation("Config");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosOrder", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountMove", "AccountMoveNavigation")
                        .WithMany("PosOrders")
                        .HasForeignKey("AccountMove")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_order_account_move_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_order_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmTeam", "CrmTeam")
                        .WithMany("PosOrders")
                        .HasForeignKey("CrmTeamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_order_crm_team_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", "Employee")
                        .WithMany("PosOrders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_order_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountFiscalPosition", "FiscalPosition")
                        .WithMany("PosOrders")
                        .HasForeignKey("FiscalPositionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_order_fiscal_position_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_order_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_order_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductPricelist", "Pricelist")
                        .WithMany("PosOrders")
                        .HasForeignKey("PricelistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("pos_order_pricelist_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProcurementGroup", "ProcurementGroup")
                        .WithMany("PosOrders")
                        .HasForeignKey("ProcurementGroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_order_procurement_group_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "SaleJournalNavigation")
                        .WithMany("PosOrders")
                        .HasForeignKey("SaleJournal")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("pos_order_sale_journal_fkey");

                    b.HasOne("Bamboo.Core.Models.PosSession", "Session")
                        .WithMany("PosOrders")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("pos_order_session_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("pos_order_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_order_user_id_fkey");

                    b.Navigation("AccountMoveNavigation");

                    b.Navigation("CrmTeam");

                    b.Navigation("Employee");

                    b.Navigation("FiscalPosition");

                    b.Navigation("Pricelist");

                    b.Navigation("ProcurementGroup");

                    b.Navigation("SaleJournalNavigation");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosOrderLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_order_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_order_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.PosOrder", "Order")
                        .WithMany("PosOrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("pos_order_line_order_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("PosOrderLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("pos_order_line_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PosOrderLine", "RefundedOrderline")
                        .WithMany("InverseRefundedOrderline")
                        .HasForeignKey("RefundedOrderlineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_order_line_refunded_orderline_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrderLine", "SaleOrderLine")
                        .WithMany("PosOrderLines")
                        .HasForeignKey("SaleOrderLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_order_line_sale_order_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrder", "SaleOrderOrigin")
                        .WithMany("PosOrderLines")
                        .HasForeignKey("SaleOrderOriginId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_order_line_sale_order_origin_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_order_line_company_id_fkey");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("RefundedOrderline");

                    b.Navigation("SaleOrderLine");

                    b.Navigation("SaleOrderOrigin");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosPackOperationLot", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_pack_operation_lot_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_pack_operation_lot_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.PosOrderLine", "PosOrderLine")
                        .WithMany("PosPackOperationLots")
                        .HasForeignKey("PosOrderLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_pack_operation_lot_pos_order_line_id_fkey");

                    b.Navigation("PosOrderLine");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosPayment", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountMove", "AccountMove")
                        .WithMany("PosPayments")
                        .HasForeignKey("AccountMoveId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_payment_account_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_payment_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_payment_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.PosPaymentMethod", "PaymentMethod")
                        .WithMany("PosPayments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("pos_payment_payment_method_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PosOrder", "PosOrder")
                        .WithMany("PosPayments")
                        .HasForeignKey("PosOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("pos_payment_pos_order_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PosSession", "Session")
                        .WithMany("PosPayments")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_payment_session_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_payment_company_id_fkey");

                    b.Navigation("AccountMove");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PosOrder");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosPaymentMethod", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_payment_method_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "Journal")
                        .WithMany("PosPaymentMethods")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("pos_payment_method_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_payment_method_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "OutstandingAccount")
                        .WithMany("PosPaymentMethodOutstandingAccounts")
                        .HasForeignKey("OutstandingAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("pos_payment_method_outstanding_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "ReceivableAccount")
                        .WithMany("PosPaymentMethodReceivableAccounts")
                        .HasForeignKey("ReceivableAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("pos_payment_method_receivable_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_payment_method_company_id_fkey");

                    b.Navigation("Journal");

                    b.Navigation("OutstandingAccount");

                    b.Navigation("ReceivableAccount");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosSession", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountJournal", "CashJournal")
                        .WithMany("PosSessions")
                        .HasForeignKey("CashJournalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_session_cash_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PosConfig", "Config")
                        .WithMany("PosSessions")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("pos_session_config_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_session_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_session_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("PosSessions")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_session_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMove", "Move")
                        .WithMany("PosSessions")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_session_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("pos_session_user_id_fkey");

                    b.Navigation("CashJournal");

                    b.Navigation("Config");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Move");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosSessionCheckProductWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_session_check_product_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_session_check_product_wizard_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PrivacyLog", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("privacy_log_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("privacy_log_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("privacy_log_user_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PrivacyLookupWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("privacy_lookup_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("privacy_lookup_wizard_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.PrivacyLog", "Log")
                        .WithMany("PrivacyLookupWizards")
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("privacy_lookup_wizard_log_id_fkey");

                    b.Navigation("Log");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PrivacyLookupWizardLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("privacy_lookup_wizard_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("privacy_lookup_wizard_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModel", "ResModelNavigation")
                        .WithMany("PrivacyLookupWizardLines")
                        .HasForeignKey("ResModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("privacy_lookup_wizard_line_res_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PrivacyLookupWizard", "Wizard")
                        .WithMany("PrivacyLookupWizardLines")
                        .HasForeignKey("WizardId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("privacy_lookup_wizard_line_wizard_id_fkey");

                    b.Navigation("ResModelNavigation");

                    b.Navigation("Wizard");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProcurementGroup", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("procurement_group_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("procurement_group_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("procurement_group_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PosOrder", "PosOrder")
                        .WithMany("ProcurementGroups")
                        .HasForeignKey("PosOrderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("procurement_group_pos_order_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrder", "Sale")
                        .WithMany("ProcurementGroups")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("procurement_group_sale_id_fkey");

                    b.Navigation("PosOrder");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductAttribute", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_attribute_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_attribute_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductAttributeCustomValue", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_attribute_custom_value_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplateAttributeValue", "CustomProductTemplateAttributeValue")
                        .WithMany("ProductAttributeCustomValues")
                        .HasForeignKey("CustomProductTemplateAttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("product_attribute_custom_valu_custom_product_template_attr_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_attribute_custom_value_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrderLine", "SaleOrderLine")
                        .WithMany("ProductAttributeCustomValues")
                        .HasForeignKey("SaleOrderLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_attribute_custom_value_sale_order_line_id_fkey");

                    b.Navigation("CustomProductTemplateAttributeValue");

                    b.Navigation("SaleOrderLine");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductAttributeValue", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductAttribute", "Attribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_attribute_value_attribute_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_attribute_value_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_attribute_value_write_uid_fkey");

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductCategory", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_category_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_category_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductCategory", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_category_parent_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductRemoval", "RemovalStrategy")
                        .WithMany("ProductCategories")
                        .HasForeignKey("RemovalStrategyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_category_removal_strategy_id_fkey");

                    b.Navigation("Parent");

                    b.Navigation("RemovalStrategy");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductImage", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_image_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_image_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplate", "ProductTmpl")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductTmplId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_image_product_tmpl_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "ProductVariant")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_image_product_variant_id_fkey");

                    b.Navigation("ProductTmpl");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductLabelLayout", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_label_layout_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_label_layout_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductPackaging", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_packaging_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_packaging_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPackageType", "PackageType")
                        .WithMany("ProductPackagings")
                        .HasForeignKey("PackageTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_packaging_package_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("ProductPackagings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_packaging_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_packaging_company_id_fkey");

                    b.Navigation("PackageType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductPricelist", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_pricelist_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("product_pricelist_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_pricelist_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_pricelist_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", "Website")
                        .WithMany("ProductPricelists")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("product_pricelist_website_id_fkey");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductPricelistItem", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductPricelist", "BasePricelist")
                        .WithMany("ProductPricelistItemBasePricelists")
                        .HasForeignKey("BasePricelistId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_pricelist_item_base_pricelist_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductCategory", "Categ")
                        .WithMany("ProductPricelistItems")
                        .HasForeignKey("CategId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_pricelist_item_categ_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_pricelist_item_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_pricelist_item_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_pricelist_item_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductPricelist", "Pricelist")
                        .WithMany("ProductPricelistItemPricelists")
                        .HasForeignKey("PricelistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_pricelist_item_pricelist_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("ProductPricelistItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_pricelist_item_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplate", "ProductTmpl")
                        .WithMany("ProductPricelistItems")
                        .HasForeignKey("ProductTmplId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_pricelist_item_product_tmpl_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_pricelist_item_company_id_fkey");

                    b.Navigation("BasePricelist");

                    b.Navigation("Categ");

                    b.Navigation("Pricelist");

                    b.Navigation("Product");

                    b.Navigation("ProductTmpl");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductProduct", b =>
                {
                    b.HasOne("Bamboo.Core.Models.WebsiteBaseUnit", "BaseUnit")
                        .WithMany("ProductProducts")
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_product_base_unit_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_product_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_product_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("ProductProducts")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_product_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplate", "ProductTmpl")
                        .WithMany("ProductProducts")
                        .HasForeignKey("ProductTmplId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_product_product_tmpl_id_fkey");

                    b.Navigation("BaseUnit");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("ProductTmpl");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductPublicCategory", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_public_category_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_public_category_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductPublicCategory", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_public_category_parent_id_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", "Website")
                        .WithMany("ProductPublicCategories")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("product_public_category_website_id_fkey");

                    b.Navigation("Parent");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductRemoval", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_removal_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_removal_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductReplenish", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_replenish_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_replenish_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("ProductReplenishes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_replenish_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplate", "ProductTmpl")
                        .WithMany("ProductReplenishes")
                        .HasForeignKey("ProductTmplId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_replenish_product_tmpl_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "ProductUom")
                        .WithMany("ProductReplenishes")
                        .HasForeignKey("ProductUomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_replenish_product_uom_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_replenish_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockWarehouse", "Warehouse")
                        .WithMany("ProductReplenishes")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_replenish_warehouse_id_fkey");

                    b.Navigation("Product");

                    b.Navigation("ProductTmpl");

                    b.Navigation("ProductUom");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductRibbon", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_ribbon_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_ribbon_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductSupplierinfo", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_supplierinfo_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("product_supplierinfo_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_supplierinfo_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_supplierinfo_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("ProductSupplierinfos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_supplierinfo_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplate", "ProductTmpl")
                        .WithMany("ProductSupplierinfos")
                        .HasForeignKey("ProductTmplId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_supplierinfo_product_tmpl_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_supplierinfo_company_id_fkey");

                    b.Navigation("Product");

                    b.Navigation("ProductTmpl");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductTag", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_tag_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_tag_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductRibbon", "Ribbon")
                        .WithMany("ProductTags")
                        .HasForeignKey("RibbonId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_tag_ribbon_id_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", "Website")
                        .WithMany("ProductTags")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("product_tag_website_id_fkey");

                    b.Navigation("Ribbon");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductTemplate", b =>
                {
                    b.HasOne("Bamboo.Core.Models.WebsiteBaseUnit", "BaseUnit")
                        .WithMany("ProductTemplates")
                        .HasForeignKey("BaseUnitId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_template_base_unit_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductCategory", "Categ")
                        .WithMany("ProductTemplates")
                        .HasForeignKey("CategId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("product_template_categ_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_template_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_template_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("ProductTemplates")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_template_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PosCategory", "PosCateg")
                        .WithMany("ProductTemplates")
                        .HasForeignKey("PosCategId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_template_pos_categ_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_template_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "Uom")
                        .WithMany("ProductTemplateUoms")
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("product_template_uom_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "UomPo")
                        .WithMany("ProductTemplateUomPos")
                        .HasForeignKey("UomPoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("product_template_uom_po_id_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", "Website")
                        .WithMany("ProductTemplates")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("product_template_website_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductRibbon", "WebsiteRibbon")
                        .WithMany("ProductTemplates")
                        .HasForeignKey("WebsiteRibbonId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_template_website_ribbon_id_fkey");

                    b.Navigation("BaseUnit");

                    b.Navigation("Categ");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("PosCateg");

                    b.Navigation("Uom");

                    b.Navigation("UomPo");

                    b.Navigation("Website");

                    b.Navigation("WebsiteRibbon");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductTemplateAttributeExclusion", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_template_attribute_exclusion_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_template_attribute_exclusion_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplateAttributeValue", "ProductTemplateAttributeValue")
                        .WithMany("ProductTemplateAttributeExclusionsNavigation")
                        .HasForeignKey("ProductTemplateAttributeValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_template_attribute_ex_product_template_attribute_v_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplate", "ProductTmpl")
                        .WithMany("ProductTemplateAttributeExclusions")
                        .HasForeignKey("ProductTmplId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_template_attribute_exclusion_product_tmpl_id_fkey");

                    b.Navigation("ProductTemplateAttributeValue");

                    b.Navigation("ProductTmpl");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductTemplateAttributeLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductAttribute", "Attribute")
                        .WithMany("ProductTemplateAttributeLines")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("product_template_attribute_line_attribute_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_template_attribute_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_template_attribute_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplate", "ProductTmpl")
                        .WithMany("ProductTemplateAttributeLines")
                        .HasForeignKey("ProductTmplId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_template_attribute_line_product_tmpl_id_fkey");

                    b.Navigation("Attribute");

                    b.Navigation("ProductTmpl");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductTemplateAttributeValue", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductAttribute", "Attribute")
                        .WithMany("ProductTemplateAttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_template_attribute_value_attribute_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplateAttributeLine", "AttributeLine")
                        .WithMany("ProductTemplateAttributeValues")
                        .HasForeignKey("AttributeLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_template_attribute_value_attribute_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_template_attribute_value_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_template_attribute_value_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductAttributeValue", "ProductAttributeValue")
                        .WithMany("ProductTemplateAttributeValues")
                        .HasForeignKey("ProductAttributeValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("product_template_attribute_valu_product_attribute_value_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplate", "ProductTmpl")
                        .WithMany("ProductTemplateAttributeValues")
                        .HasForeignKey("ProductTmplId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_template_attribute_value_product_tmpl_id_fkey");

                    b.Navigation("Attribute");

                    b.Navigation("AttributeLine");

                    b.Navigation("ProductAttributeValue");

                    b.Navigation("ProductTmpl");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectCollaborator", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_collaborator_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_collaborator_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("project_collaborator_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectProject", "Project")
                        .WithMany("ProjectCollaborators")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("project_collaborator_project_id_fkey");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectMilestone", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_milestone_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_milestone_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("ProjectMilestones")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_milestone_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectProject", "Project")
                        .WithMany("ProjectMilestones")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("project_milestone_project_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrderLine", "SaleLine")
                        .WithMany("ProjectMilestones")
                        .HasForeignKey("SaleLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_milestone_sale_line_id_fkey");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Project");

                    b.Navigation("SaleLine");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectProject", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailAlias", "Alias")
                        .WithMany("ProjectProjects")
                        .HasForeignKey("AliasId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("project_project_alias_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAnalyticAccount", "AnalyticAccount")
                        .WithMany("ProjectProjects")
                        .HasForeignKey("AnalyticAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_project_analytic_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_project_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_project_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectUpdate", "LastUpdate")
                        .WithMany("ProjectProjects")
                        .HasForeignKey("LastUpdateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_project_last_update_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("ProjectProjects")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_project_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_project_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrderLine", "SaleLine")
                        .WithMany("ProjectProjects")
                        .HasForeignKey("SaleLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_project_sale_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectProjectStage", "Stage")
                        .WithMany("ProjectProjects")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("project_project_stage_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("project_project_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_project_user_id_fkey");

                    b.Navigation("Alias");

                    b.Navigation("AnalyticAccount");

                    b.Navigation("LastUpdate");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("SaleLine");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectProjectStage", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_project_stage_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_project_stage_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailTemplate", "MailTemplate")
                        .WithMany("ProjectProjectStages")
                        .HasForeignKey("MailTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_project_stage_mail_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SmsTemplate", "SmsTemplate")
                        .WithMany("ProjectProjectStages")
                        .HasForeignKey("SmsTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_project_stage_sms_template_id_fkey");

                    b.Navigation("MailTemplate");

                    b.Navigation("SmsTemplate");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectShareWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_share_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_share_wizard_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectTag", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_tags_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_tags_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectTask", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAnalyticAccount", "AnalyticAccount")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("AnalyticAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_analytic_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectTask", "Ancestor")
                        .WithMany("InverseAncestor")
                        .HasForeignKey("AncestorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_ancestor_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectProject", "DisplayProject")
                        .WithMany("ProjectTaskDisplayProjects")
                        .HasForeignKey("DisplayProjectId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_display_project_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "DisplayedImage")
                        .WithMany("ProjectTaskDisplayedImages")
                        .HasForeignKey("DisplayedImageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_displayed_image_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("ProjectTaskMessageMainAttachments")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectMilestone", "Milestone")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_milestone_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectTask", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_parent_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectProject", "Project")
                        .WithMany("ProjectTaskProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_project_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectTaskRecurrence", "Recurrence")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("RecurrenceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_recurrence_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrderLine", "SaleLine")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("SaleLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_sale_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrder", "SaleOrder")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("SaleOrderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_sale_order_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectTaskType", "Stage")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("project_task_stage_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("project_task_company_id_fkey");

                    b.Navigation("AnalyticAccount");

                    b.Navigation("Ancestor");

                    b.Navigation("DisplayProject");

                    b.Navigation("DisplayedImage");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Milestone");

                    b.Navigation("Parent");

                    b.Navigation("Project");

                    b.Navigation("Recurrence");

                    b.Navigation("SaleLine");

                    b.Navigation("SaleOrder");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectTaskRecurrence", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_recurrence_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_recurrence_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectTaskType", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_type_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_type_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailTemplate", "MailTemplate")
                        .WithMany("ProjectTaskTypeMailTemplates")
                        .HasForeignKey("MailTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_type_mail_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailTemplate", "RatingTemplate")
                        .WithMany("ProjectTaskTypeRatingTemplates")
                        .HasForeignKey("RatingTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_type_rating_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SmsTemplate", "SmsTemplate")
                        .WithMany("ProjectTaskTypes")
                        .HasForeignKey("SmsTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_type_sms_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_type_user_id_fkey");

                    b.Navigation("MailTemplate");

                    b.Navigation("RatingTemplate");

                    b.Navigation("SmsTemplate");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectTaskTypeDeleteWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_type_delete_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_type_delete_wizard_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectTaskUserRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_user_rel_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_task_user_rel_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectTaskType", "Stage")
                        .WithMany("ProjectTaskUserRels")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("project_task_user_rel_stage_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectTask", "Task")
                        .WithMany("ProjectTaskUserRels")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("project_task_user_rel_task_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("project_task_user_rel_user_id_fkey");

                    b.Navigation("Stage");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectUpdate", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_update_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_update_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("ProjectUpdates")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("project_update_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectProject", "Project")
                        .WithMany("ProjectUpdates")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("project_update_project_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("project_update_user_id_fkey");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PurchaseOrder", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchase_order_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("purchase_order_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "DestAddress")
                        .WithMany("PurchaseOrderDestAddresses")
                        .HasForeignKey("DestAddressId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchase_order_dest_address_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountFiscalPosition", "FiscalPosition")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("FiscalPositionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchase_order_fiscal_position_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProcurementGroup", "Group")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchase_order_group_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountIncoterm", "Incoterm")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("IncotermId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchase_order_incoterm_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchase_order_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchase_order_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("purchase_order_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountPaymentTerm", "PaymentTerm")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("PaymentTermId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchase_order_payment_term_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPickingType", "PickingType")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("PickingTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("purchase_order_picking_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("purchase_order_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchase_order_user_id_fkey");

                    b.Navigation("DestAddress");

                    b.Navigation("FiscalPosition");

                    b.Navigation("Group");

                    b.Navigation("Incoterm");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("PaymentTerm");

                    b.Navigation("PickingType");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PurchaseOrderLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchase_order_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchase_order_line_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchase_order_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.PurchaseOrder", "Order")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("purchase_order_line_order_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockWarehouseOrderpoint", "Orderpoint")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("OrderpointId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchase_order_line_orderpoint_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchase_order_line_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchase_order_line_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductPackaging", "ProductPackaging")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("ProductPackagingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchase_order_line_product_packaging_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "ProductUomNavigation")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("ProductUom")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchase_order_line_product_uom_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrderLine", "SaleLine")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("SaleLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchase_order_line_sale_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrder", "SaleOrder")
                        .WithMany("PurchaseOrderLines")
                        .HasForeignKey("SaleOrderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchase_order_line_sale_order_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchase_order_line_company_id_fkey");

                    b.Navigation("Order");

                    b.Navigation("Orderpoint");

                    b.Navigation("Product");

                    b.Navigation("ProductPackaging");

                    b.Navigation("ProductUomNavigation");

                    b.Navigation("SaleLine");

                    b.Navigation("SaleOrder");
                });

            modelBuilder.Entity("Bamboo.Core.Models.RatingRating", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("rating_rating_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("rating_rating_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMessage", "Message")
                        .WithMany("RatingRatings")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("rating_rating_message_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModel", "ParentResModelNavigation")
                        .WithMany("RatingRatingParentResModelNavigations")
                        .HasForeignKey("ParentResModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("rating_rating_parent_res_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("rating_rating_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "Publisher")
                        .WithMany("RatingRatingPublishers")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("rating_rating_publisher_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "RatedPartner")
                        .WithMany("RatingRatingRatedPartners")
                        .HasForeignKey("RatedPartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("rating_rating_rated_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModel", "ResModelNavigation")
                        .WithMany("RatingRatingResModelNavigations")
                        .HasForeignKey("ResModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("rating_rating_res_model_id_fkey");

                    b.Navigation("Message");

                    b.Navigation("ParentResModelNavigation");

                    b.Navigation("Publisher");

                    b.Navigation("RatedPartner");

                    b.Navigation("ResModelNavigation");
                });

            modelBuilder.Entity("Bamboo.Core.Models.RecurringPayment", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("recurring_payment_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("recurring_payment_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("recurring_payment_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountRecurringTemplate", "Template")
                        .WithMany("RecurringPayments")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("recurring_payment_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("recurring_payment_company_id_fkey");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Bamboo.Core.Models.RecurringPaymentLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("recurring_payment_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "Journal")
                        .WithMany("RecurringPaymentLines")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("recurring_payment_line_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("recurring_payment_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("recurring_payment_line_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountPayment", "Payment")
                        .WithMany("RecurringPaymentLines")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("recurring_payment_line_payment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.RecurringPayment", "RecurringPayment")
                        .WithMany("RecurringPaymentLines")
                        .HasForeignKey("RecurringPaymentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("recurring_payment_line_recurring_payment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("recurring_payment_line_company_id_fkey");

                    b.Navigation("Journal");

                    b.Navigation("Payment");

                    b.Navigation("RecurringPayment");
                });

            modelBuilder.Entity("Bamboo.Core.Models.RepairFee", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_fee_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMoveLine", "InvoiceLine")
                        .WithMany("RepairFees")
                        .HasForeignKey("InvoiceLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_fee_invoice_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_fee_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("RepairFees")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_fee_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "ProductUomNavigation")
                        .WithMany("RepairFees")
                        .HasForeignKey("ProductUom")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("repair_fee_product_uom_fkey");

                    b.HasOne("Bamboo.Core.Models.RepairOrder", "Repair")
                        .WithMany("RepairFees")
                        .HasForeignKey("RepairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("repair_fee_repair_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_fee_company_id_fkey");

                    b.Navigation("InvoiceLine");

                    b.Navigation("Product");

                    b.Navigation("ProductUomNavigation");

                    b.Navigation("Repair");
                });

            modelBuilder.Entity("Bamboo.Core.Models.RepairLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMoveLine", "InvoiceLine")
                        .WithMany("RepairLines")
                        .HasForeignKey("InvoiceLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_line_invoice_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "LocationDest")
                        .WithMany("RepairLineLocationDests")
                        .HasForeignKey("LocationDestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("repair_line_location_dest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "Location")
                        .WithMany("RepairLineLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("repair_line_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLot", "Lot")
                        .WithMany("RepairLines")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_line_lot_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockMove", "Move")
                        .WithMany("RepairLines")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_line_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("RepairLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("repair_line_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "ProductUomNavigation")
                        .WithMany("RepairLines")
                        .HasForeignKey("ProductUom")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("repair_line_product_uom_fkey");

                    b.HasOne("Bamboo.Core.Models.RepairOrder", "Repair")
                        .WithMany("RepairLines")
                        .HasForeignKey("RepairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("repair_line_repair_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_line_company_id_fkey");

                    b.Navigation("InvoiceLine");

                    b.Navigation("Location");

                    b.Navigation("LocationDest");

                    b.Navigation("Lot");

                    b.Navigation("Move");

                    b.Navigation("Product");

                    b.Navigation("ProductUomNavigation");

                    b.Navigation("Repair");
                });

            modelBuilder.Entity("Bamboo.Core.Models.RepairOrder", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResPartner", "Address")
                        .WithMany("RepairOrderAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_order_address_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_order_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMove", "Invoice")
                        .WithMany("RepairOrders")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_order_invoice_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_order_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "Location")
                        .WithMany("RepairOrders")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("repair_order_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLot", "Lot")
                        .WithMany("RepairOrders")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_order_lot_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("RepairOrders")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_order_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockMove", "Move")
                        .WithMany("RepairOrders")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_order_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_order_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "PartnerInvoice")
                        .WithMany("RepairOrderPartnerInvoices")
                        .HasForeignKey("PartnerInvoiceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_order_partner_invoice_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPicking", "Picking")
                        .WithMany("RepairOrders")
                        .HasForeignKey("PickingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_order_picking_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductPricelist", "Pricelist")
                        .WithMany("RepairOrders")
                        .HasForeignKey("PricelistId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_order_pricelist_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("RepairOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("repair_order_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "ProductUomNavigation")
                        .WithMany("RepairOrders")
                        .HasForeignKey("ProductUom")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("repair_order_product_uom_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrder", "SaleOrder")
                        .WithMany("RepairOrders")
                        .HasForeignKey("SaleOrderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_order_sale_order_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("repair_order_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_order_user_id_fkey");

                    b.Navigation("Address");

                    b.Navigation("Invoice");

                    b.Navigation("Location");

                    b.Navigation("Lot");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Move");

                    b.Navigation("PartnerInvoice");

                    b.Navigation("Picking");

                    b.Navigation("Pricelist");

                    b.Navigation("Product");

                    b.Navigation("ProductUomNavigation");

                    b.Navigation("SaleOrder");
                });

            modelBuilder.Entity("Bamboo.Core.Models.RepairOrderMakeInvoice", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_order_make_invoice_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_order_make_invoice_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.RepairTag", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_tags_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("repair_tags_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ReportLayout", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("report_layout_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("report_layout_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrUiView", "View")
                        .WithMany("ReportLayouts")
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("report_layout_view_id_fkey");

                    b.Navigation("View");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ReportPaperformat", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("report_paperformat_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("report_paperformat_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResBank", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResCountry", "CountryNavigation")
                        .WithMany("ResBanks")
                        .HasForeignKey("Country")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_bank_country_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_bank_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_bank_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountryState", "StateNavigation")
                        .WithMany("ResBanks")
                        .HasForeignKey("State")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_bank_state_fkey");

                    b.Navigation("CountryNavigation");

                    b.Navigation("StateNavigation");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResCompany", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccount", "AccountCashBasisBaseAccount")
                        .WithMany("ResCompanyAccountCashBasisBaseAccounts")
                        .HasForeignKey("AccountCashBasisBaseAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_account_cash_basis_base_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "AccountDefaultPosReceivableAccount")
                        .WithMany("ResCompanyAccountDefaultPosReceivableAccounts")
                        .HasForeignKey("AccountDefaultPosReceivableAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_account_default_pos_receivable_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountry", "AccountFiscalCountry")
                        .WithMany("ResCompanies")
                        .HasForeignKey("AccountFiscalCountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_account_fiscal_country_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "AccountJournalEarlyPayDiscountGainAccount")
                        .WithMany("ResCompanyAccountJournalEarlyPayDiscountGainAccounts")
                        .HasForeignKey("AccountJournalEarlyPayDiscountGainAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_account_journal_early_pay_discount_gain_accoun_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "AccountJournalEarlyPayDiscountLossAccount")
                        .WithMany("ResCompanyAccountJournalEarlyPayDiscountLossAccounts")
                        .HasForeignKey("AccountJournalEarlyPayDiscountLossAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_account_journal_early_pay_discount_loss_accoun_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "AccountJournalPaymentCreditAccount")
                        .WithMany("ResCompanyAccountJournalPaymentCreditAccounts")
                        .HasForeignKey("AccountJournalPaymentCreditAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_account_journal_payment_credit_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "AccountJournalPaymentDebitAccount")
                        .WithMany("ResCompanyAccountJournalPaymentDebitAccounts")
                        .HasForeignKey("AccountJournalPaymentDebitAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_account_journal_payment_debit_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "AccountJournalSuspenseAccount")
                        .WithMany("ResCompanyAccountJournalSuspenseAccounts")
                        .HasForeignKey("AccountJournalSuspenseAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_account_journal_suspense_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMove", "AccountOpeningMove")
                        .WithMany("ResCompanies")
                        .HasForeignKey("AccountOpeningMoveId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_account_opening_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTax", "AccountPurchaseTax")
                        .WithMany("ResCompanyAccountPurchaseTaxes")
                        .HasForeignKey("AccountPurchaseTaxId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_account_purchase_tax_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTax", "AccountSaleTax")
                        .WithMany("ResCompanyAccountSaleTaxes")
                        .HasForeignKey("AccountSaleTaxId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_account_sale_tax_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "AutomaticEntryDefaultJournal")
                        .WithMany("ResCompanyAutomaticEntryDefaultJournals")
                        .HasForeignKey("AutomaticEntryDefaultJournalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_automatic_entry_default_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountChartTemplate", "ChartTemplate")
                        .WithMany("ResCompanies")
                        .HasForeignKey("ChartTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_chart_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "CompanyExpenseJournal")
                        .WithMany("ResCompanyCompanyExpenseJournals")
                        .HasForeignKey("CompanyExpenseJournalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_company_expense_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "CurrencyExchangeJournal")
                        .WithMany("ResCompanyCurrencyExchangeJournals")
                        .HasForeignKey("CurrencyExchangeJournalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_currency_exchange_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("res_company_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "DefaultCashDifferenceExpenseAccount")
                        .WithMany("ResCompanyDefaultCashDifferenceExpenseAccounts")
                        .HasForeignKey("DefaultCashDifferenceExpenseAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_default_cash_difference_expense_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "DefaultCashDifferenceIncomeAccount")
                        .WithMany("ResCompanyDefaultCashDifferenceIncomeAccounts")
                        .HasForeignKey("DefaultCashDifferenceIncomeAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_default_cash_difference_income_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "ExpenseAccrualAccount")
                        .WithMany("ResCompanyExpenseAccrualAccounts")
                        .HasForeignKey("ExpenseAccrualAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_expense_accrual_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "ExpenseCurrencyExchangeAccount")
                        .WithMany("ResCompanyExpenseCurrencyExchangeAccounts")
                        .HasForeignKey("ExpenseCurrencyExchangeAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_expense_currency_exchange_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "ExpenseJournal")
                        .WithMany("ResCompanyExpenseJournals")
                        .HasForeignKey("ExpenseJournalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_expense_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrUiView", "ExternalReportLayout")
                        .WithMany("ResCompanies")
                        .HasForeignKey("ExternalReportLayoutId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_external_report_layout_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "IncomeCurrencyExchangeAccount")
                        .WithMany("ResCompanyIncomeCurrencyExchangeAccounts")
                        .HasForeignKey("IncomeCurrencyExchangeAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_income_currency_exchange_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountIncoterm", "Incoterm")
                        .WithMany("ResCompanies")
                        .HasForeignKey("IncotermId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_incoterm_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "InternalTransitLocation")
                        .WithMany("ResCompanies")
                        .HasForeignKey("InternalTransitLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("res_company_internal_transit_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("ResCompanies")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.BarcodeNomenclature", "Nomenclature")
                        .WithMany("ResCompanies")
                        .HasForeignKey("NomenclatureId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_nomenclature_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ReportPaperformat", "Paperformat")
                        .WithMany("ResCompanies")
                        .HasForeignKey("PaperformatId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_paperformat_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_parent_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("res_company_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "PropertyStockAccountInputCateg")
                        .WithMany("ResCompanyPropertyStockAccountInputCategs")
                        .HasForeignKey("PropertyStockAccountInputCategId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_property_stock_account_input_categ_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "PropertyStockAccountOutputCateg")
                        .WithMany("ResCompanyPropertyStockAccountOutputCategs")
                        .HasForeignKey("PropertyStockAccountOutputCategId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_property_stock_account_output_categ_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "PropertyStockValuationAccount")
                        .WithMany("ResCompanyPropertyStockValuationAccounts")
                        .HasForeignKey("PropertyStockValuationAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_property_stock_valuation_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResourceCalendar", "ResourceCalendar")
                        .WithMany("ResCompanies")
                        .HasForeignKey("ResourceCalendarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("res_company_resource_calendar_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "RevenueAccrualAccount")
                        .WithMany("ResCompanyRevenueAccrualAccounts")
                        .HasForeignKey("RevenueAccrualAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_revenue_accrual_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrderTemplate", "SaleOrderTemplate")
                        .WithMany("ResCompanies")
                        .HasForeignKey("SaleOrderTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_sale_order_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailTemplate", "StockMailConfirmationTemplate")
                        .WithMany("ResCompanies")
                        .HasForeignKey("StockMailConfirmationTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_stock_mail_confirmation_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SmsTemplate", "StockSmsConfirmationTemplate")
                        .WithMany("ResCompanies")
                        .HasForeignKey("StockSmsConfirmationTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_stock_sms_confirmation_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "TaxCashBasisJournal")
                        .WithMany("ResCompanyTaxCashBasisJournals")
                        .HasForeignKey("TaxCashBasisJournalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_tax_cash_basis_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "TransferAccount")
                        .WithMany("ResCompanyTransferAccounts")
                        .HasForeignKey("TransferAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_transfer_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", "Website")
                        .WithMany("ResCompanies")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_company_website_id_fkey");

                    b.Navigation("AccountCashBasisBaseAccount");

                    b.Navigation("AccountDefaultPosReceivableAccount");

                    b.Navigation("AccountFiscalCountry");

                    b.Navigation("AccountJournalEarlyPayDiscountGainAccount");

                    b.Navigation("AccountJournalEarlyPayDiscountLossAccount");

                    b.Navigation("AccountJournalPaymentCreditAccount");

                    b.Navigation("AccountJournalPaymentDebitAccount");

                    b.Navigation("AccountJournalSuspenseAccount");

                    b.Navigation("AccountOpeningMove");

                    b.Navigation("AccountPurchaseTax");

                    b.Navigation("AccountSaleTax");

                    b.Navigation("AutomaticEntryDefaultJournal");

                    b.Navigation("ChartTemplate");

                    b.Navigation("CompanyExpenseJournal");

                    b.Navigation("CurrencyExchangeJournal");

                    b.Navigation("DefaultCashDifferenceExpenseAccount");

                    b.Navigation("DefaultCashDifferenceIncomeAccount");

                    b.Navigation("ExpenseAccrualAccount");

                    b.Navigation("ExpenseCurrencyExchangeAccount");

                    b.Navigation("ExpenseJournal");

                    b.Navigation("ExternalReportLayout");

                    b.Navigation("IncomeCurrencyExchangeAccount");

                    b.Navigation("Incoterm");

                    b.Navigation("InternalTransitLocation");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Nomenclature");

                    b.Navigation("Paperformat");

                    b.Navigation("Parent");

                    b.Navigation("PropertyStockAccountInputCateg");

                    b.Navigation("PropertyStockAccountOutputCateg");

                    b.Navigation("PropertyStockValuationAccount");

                    b.Navigation("ResourceCalendar");

                    b.Navigation("RevenueAccrualAccount");

                    b.Navigation("SaleOrderTemplate");

                    b.Navigation("StockMailConfirmationTemplate");

                    b.Navigation("StockSmsConfirmationTemplate");

                    b.Navigation("TaxCashBasisJournal");

                    b.Navigation("TransferAccount");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResConfig", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_config_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_config_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResConfigInstaller", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_config_installer_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_config_installer_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResConfigSetting", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("AuthSignupTemplateUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_config_settings_auth_signup_template_user_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountChartTemplate", "ChartTemplate")
                        .WithMany("ResConfigSettings")
                        .HasForeignKey("ChartTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_config_settings_chart_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_config_settings_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "DepositDefaultProduct")
                        .WithMany("ResConfigSettingDepositDefaultProducts")
                        .HasForeignKey("DepositDefaultProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_config_settings_deposit_default_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.DigestDigest", "Digest")
                        .WithMany("ResConfigSettings")
                        .HasForeignKey("DigestId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_config_settings_digest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailTemplate", "InvoiceMailTemplate")
                        .WithMany("ResConfigSettings")
                        .HasForeignKey("InvoiceMailTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_config_settings_invoice_mail_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_config_settings_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.PosConfig", "PosConfig")
                        .WithMany("ResConfigSettings")
                        .HasForeignKey("PosConfigId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_config_settings_pos_config_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountFiscalPosition", "PosDefaultFiscalPosition")
                        .WithMany("ResConfigSettingsNavigation")
                        .HasForeignKey("PosDefaultFiscalPositionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_config_settings_pos_default_fiscal_position_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PosCategory", "PosIfaceStartCateg")
                        .WithMany("ResConfigSettingsNavigation")
                        .HasForeignKey("PosIfaceStartCategId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_config_settings_pos_iface_start_categ_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductPricelist", "PosPricelist")
                        .WithMany("ResConfigSettingsNavigation")
                        .HasForeignKey("PosPricelistId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_config_settings_pos_pricelist_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "PosTipProduct")
                        .WithMany("ResConfigSettingPosTipProducts")
                        .HasForeignKey("PosTipProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_config_settings_pos_tip_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("res_config_settings_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", "Website")
                        .WithMany("ResConfigSettings")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("res_config_settings_website_id_fkey");

                    b.Navigation("ChartTemplate");

                    b.Navigation("DepositDefaultProduct");

                    b.Navigation("Digest");

                    b.Navigation("InvoiceMailTemplate");

                    b.Navigation("PosConfig");

                    b.Navigation("PosDefaultFiscalPosition");

                    b.Navigation("PosIfaceStartCateg");

                    b.Navigation("PosPricelist");

                    b.Navigation("PosTipProduct");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResCountry", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrUiView", "AddressView")
                        .WithMany("ResCountries")
                        .HasForeignKey("AddressViewId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_country_address_view_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_country_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_country_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_country_write_uid_fkey");

                    b.Navigation("AddressView");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResCountryGroup", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_country_group_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_country_group_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResCountryState", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResCountry", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("res_country_state_country_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_country_state_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_country_state_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResCurrency", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_currency_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_currency_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResCurrencyRate", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_currency_rate_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("res_currency_rate_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_currency_rate_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_currency_rate_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResGroup", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrModuleCategory", "Category")
                        .WithMany("ResGroups")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_groups_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_groups_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_groups_write_uid_fkey");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResLang", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_lang_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_lang_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResPartner", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResPartner", "CommercialPartner")
                        .WithMany("InverseCommercialPartner")
                        .HasForeignKey("CommercialPartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_commercial_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountry", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("res_partner_country_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartnerIndustry", "Industry")
                        .WithMany("ResPartners")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_industry_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.FollowupLine", "LatestFollowupLevelIdWithoutLitNavigation")
                        .WithMany("ResPartners")
                        .HasForeignKey("LatestFollowupLevelIdWithoutLit")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_latest_followup_level_id_without_lit_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("ResPartners")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_parent_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("PaymentResponsibleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_payment_responsible_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountryState", "State")
                        .WithMany("ResPartners")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("res_partner_state_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmTeam", "Team")
                        .WithMany("ResPartners")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_team_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartnerTitle", "TitleNavigation")
                        .WithMany("ResPartners")
                        .HasForeignKey("Title")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_title_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_user_id_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", "WebsiteNavigation")
                        .WithMany("ResPartners")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("res_partner_website_id_fkey");

                    b.Navigation("CommercialPartner");

                    b.Navigation("Industry");

                    b.Navigation("LatestFollowupLevelIdWithoutLitNavigation");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Parent");

                    b.Navigation("State");

                    b.Navigation("Team");

                    b.Navigation("TitleNavigation");

                    b.Navigation("WebsiteNavigation");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResPartnerAutocompleteSync", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_autocomplete_sync_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_autocomplete_sync_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("res_partner_autocomplete_sync_partner_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResPartnerBank", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResBank", "Bank")
                        .WithMany("ResPartnerBanks")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_bank_bank_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_bank_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_bank_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_bank_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("ResPartnerBanks")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_bank_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("res_partner_bank_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_bank_company_id_fkey");

                    b.Navigation("Bank");

                    b.Navigation("MessageMainAttachment");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResPartnerCategory", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_category_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_category_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartnerCategory", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("res_partner_category_parent_id_fkey");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResPartnerIndustry", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_industry_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_industry_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResPartnerTitle", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_title_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_partner_title_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResUser", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_users_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.LunchLocation", "LastLunchLocation")
                        .WithMany("ResUsers")
                        .HasForeignKey("LastLunchLocationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_users_last_lunch_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_users_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("res_users_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmTeam", "SaleTeam")
                        .WithMany("ResUsers")
                        .HasForeignKey("SaleTeamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_users_sale_team_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("res_users_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", "Website")
                        .WithMany("ResUsers")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_users_website_id_fkey");

                    b.Navigation("LastLunchLocation");

                    b.Navigation("SaleTeam");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResUsersApikey", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("res_users_apikeys_user_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResUsersApikeysDescription", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_users_apikeys_description_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_users_apikeys_description_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResUsersDeletion", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_users_deletion_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_users_deletion_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_users_deletion_user_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResUsersIdentitycheck", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_users_identitycheck_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_users_identitycheck_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResUsersLog", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_users_log_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_users_log_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResUsersSetting", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_users_settings_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_users_settings_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", "User")
                        .WithOne("ResUsersSettingUser")
                        .HasForeignKey("Bamboo.Core.Models.ResUsersSetting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("res_users_settings_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResUsersSettingsVolume", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_users_settings_volumes_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "Guest")
                        .WithMany("ResUsersSettingsVolumeGuests")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("res_users_settings_volumes_guest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("res_users_settings_volumes_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("res_users_settings_volumes_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUsersSetting", "UserSetting")
                        .WithMany("ResUsersSettingsVolumes")
                        .HasForeignKey("UserSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("res_users_settings_volumes_user_setting_id_fkey");

                    b.Navigation("Guest");

                    b.Navigation("UserSetting");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResetViewArchWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrUiView", "CompareView")
                        .WithMany("ResetViewArchWizardCompareViews")
                        .HasForeignKey("CompareViewId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("reset_view_arch_wizard_compare_view_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("reset_view_arch_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("reset_view_arch_wizard_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrUiView", "View")
                        .WithMany("ResetViewArchWizardViews")
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("reset_view_arch_wizard_view_id_fkey");

                    b.Navigation("CompareView");

                    b.Navigation("View");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResourceCalendar", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("resource_calendar_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("resource_calendar_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("resource_calendar_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResourceCalendarAttendance", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResourceCalendar", "Calendar")
                        .WithMany("ResourceCalendarAttendances")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("resource_calendar_attendance_calendar_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("resource_calendar_attendance_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("resource_calendar_attendance_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResourceResource", "Resource")
                        .WithMany("ResourceCalendarAttendances")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("resource_calendar_attendance_resource_id_fkey");

                    b.Navigation("Calendar");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResourceCalendarLeaf", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResourceCalendar", "Calendar")
                        .WithMany("ResourceCalendarLeaves")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("resource_calendar_leaves_calendar_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("resource_calendar_leaves_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.HrLeave", "Holiday")
                        .WithMany("ResourceCalendarLeaves")
                        .HasForeignKey("HolidayId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("resource_calendar_leaves_holiday_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("resource_calendar_leaves_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResourceResource", "Resource")
                        .WithMany("ResourceCalendarLeaves")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("resource_calendar_leaves_resource_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("resource_calendar_leaves_company_id_fkey");

                    b.Navigation("Calendar");

                    b.Navigation("Holiday");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResourceResource", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResourceCalendar", "Calendar")
                        .WithMany("ResourceResources")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("resource_resource_calendar_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("resource_resource_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("resource_resource_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("resource_resource_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("resource_resource_user_id_fkey");

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SaleAdvancePaymentInv", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_advance_payment_inv_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_advance_payment_inv_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "DepositAccount")
                        .WithMany("SaleAdvancePaymentInvs")
                        .HasForeignKey("DepositAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_advance_payment_inv_deposit_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_advance_payment_inv_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("SaleAdvancePaymentInvs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_advance_payment_inv_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_advance_payment_inv_company_id_fkey");

                    b.Navigation("DepositAccount");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SaleOrder", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAnalyticAccount", "AnalyticAccount")
                        .WithMany("SaleOrders")
                        .HasForeignKey("AnalyticAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_analytic_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UtmCampaign", "Campaign")
                        .WithMany("SaleOrders")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_campaign_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("sale_order_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountFiscalPosition", "FiscalPosition")
                        .WithMany("SaleOrders")
                        .HasForeignKey("FiscalPositionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_fiscal_position_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountIncoterm", "IncotermNavigation")
                        .WithMany("SaleOrders")
                        .HasForeignKey("Incoterm")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_incoterm_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.UtmMedium", "Medium")
                        .WithMany("SaleOrders")
                        .HasForeignKey("MediumId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_medium_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("SaleOrders")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmLead", "Opportunity")
                        .WithMany("SaleOrders")
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_opportunity_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("sale_order_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "PartnerInvoice")
                        .WithMany("SaleOrderPartnerInvoices")
                        .HasForeignKey("PartnerInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("sale_order_partner_invoice_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "PartnerShipping")
                        .WithMany("SaleOrderPartnerShippings")
                        .HasForeignKey("PartnerShippingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("sale_order_partner_shipping_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountPaymentTerm", "PaymentTerm")
                        .WithMany("SaleOrders")
                        .HasForeignKey("PaymentTermId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_payment_term_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductPricelist", "Pricelist")
                        .WithMany("SaleOrders")
                        .HasForeignKey("PricelistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("sale_order_pricelist_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProcurementGroup", "ProcurementGroup")
                        .WithMany("SaleOrders")
                        .HasForeignKey("ProcurementGroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_procurement_group_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectProject", "Project")
                        .WithMany("SaleOrders")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_project_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrderTemplate", "SaleOrderTemplate")
                        .WithMany("SaleOrders")
                        .HasForeignKey("SaleOrderTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_sale_order_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UtmSource", "Source")
                        .WithMany("SaleOrders")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_source_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmTeam", "Team")
                        .WithMany("SaleOrders")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_team_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("sale_order_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_user_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockWarehouse", "Warehouse")
                        .WithMany("SaleOrders")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("sale_order_warehouse_id_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", "Website")
                        .WithMany("SaleOrders")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_website_id_fkey");

                    b.Navigation("AnalyticAccount");

                    b.Navigation("Campaign");

                    b.Navigation("FiscalPosition");

                    b.Navigation("IncotermNavigation");

                    b.Navigation("Medium");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Opportunity");

                    b.Navigation("PartnerInvoice");

                    b.Navigation("PartnerShipping");

                    b.Navigation("PaymentTerm");

                    b.Navigation("Pricelist");

                    b.Navigation("ProcurementGroup");

                    b.Navigation("Project");

                    b.Navigation("SaleOrderTemplate");

                    b.Navigation("Source");

                    b.Navigation("Team");

                    b.Navigation("Warehouse");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SaleOrderCancel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResPartner", "Author")
                        .WithMany("SaleOrderCancels")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_cancel_author_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_cancel_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_cancel_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrder", "Order")
                        .WithMany("SaleOrderCancels")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("sale_order_cancel_order_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailTemplate", "Template")
                        .WithMany("SaleOrderCancels")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_cancel_template_id_fkey");

                    b.Navigation("Author");

                    b.Navigation("Order");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SaleOrderLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCurrency", null)
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_line_currency_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrderLine", "LinkedLine")
                        .WithMany("InverseLinkedLine")
                        .HasForeignKey("LinkedLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("sale_order_line_linked_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrder", "Order")
                        .WithMany("SaleOrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("sale_order_line_order_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "OrderPartner")
                        .WithMany("SaleOrderLines")
                        .HasForeignKey("OrderPartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_line_order_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("SaleOrderLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("sale_order_line_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductPackaging", "ProductPackaging")
                        .WithMany("SaleOrderLines")
                        .HasForeignKey("ProductPackagingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_line_product_packaging_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "ProductUomNavigation")
                        .WithMany("SaleOrderLines")
                        .HasForeignKey("ProductUom")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("sale_order_line_product_uom_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectProject", "Project")
                        .WithMany("SaleOrderLines")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_line_project_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockRoute", "Route")
                        .WithMany("SaleOrderLines")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("sale_order_line_route_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("SalesmanId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_line_salesman_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectTask", "Task")
                        .WithMany("SaleOrderLines")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_line_task_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_line_company_id_fkey");

                    b.Navigation("LinkedLine");

                    b.Navigation("Order");

                    b.Navigation("OrderPartner");

                    b.Navigation("Product");

                    b.Navigation("ProductPackaging");

                    b.Navigation("ProductUomNavigation");

                    b.Navigation("Project");

                    b.Navigation("Route");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SaleOrderOption", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_option_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_option_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrderLine", "Line")
                        .WithMany("SaleOrderOptions")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_option_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrder", "Order")
                        .WithMany("SaleOrderOptions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("sale_order_option_order_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("SaleOrderOptions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("sale_order_option_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "Uom")
                        .WithMany("SaleOrderOptions")
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("sale_order_option_uom_id_fkey");

                    b.Navigation("Line");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SaleOrderTemplate", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_template_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_template_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailTemplate", "MailTemplate")
                        .WithMany("SaleOrderTemplates")
                        .HasForeignKey("MailTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_template_mail_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_template_company_id_fkey");

                    b.Navigation("MailTemplate");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SaleOrderTemplateLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_template_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_template_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("SaleOrderTemplateLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_template_line_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "ProductUom")
                        .WithMany("SaleOrderTemplateLines")
                        .HasForeignKey("ProductUomId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_template_line_product_uom_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrderTemplate", "SaleOrderTemplate")
                        .WithMany("SaleOrderTemplateLines")
                        .HasForeignKey("SaleOrderTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("sale_order_template_line_sale_order_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_template_line_company_id_fkey");

                    b.Navigation("Product");

                    b.Navigation("ProductUom");

                    b.Navigation("SaleOrderTemplate");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SaleOrderTemplateOption", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_template_option_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_template_option_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("SaleOrderTemplateOptions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("sale_order_template_option_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrderTemplate", "SaleOrderTemplate")
                        .WithMany("SaleOrderTemplateOptions")
                        .HasForeignKey("SaleOrderTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("sale_order_template_option_sale_order_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_order_template_option_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "Uom")
                        .WithMany("SaleOrderTemplateOptions")
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("sale_order_template_option_uom_id_fkey");

                    b.Navigation("Product");

                    b.Navigation("SaleOrderTemplate");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SalePaymentProviderOnboardingWizard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_payment_provider_onboarding_wizard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sale_payment_provider_onboarding_wizard_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SmsComposer", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sms_composer_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sms_composer_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.SmsTemplate", "Template")
                        .WithMany("SmsComposers")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sms_composer_template_id_fkey");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SmsResend", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sms_resend_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sms_resend_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMessage", "MailMessage")
                        .WithMany("SmsResends")
                        .HasForeignKey("MailMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("sms_resend_mail_message_id_fkey");

                    b.Navigation("MailMessage");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SmsResendRecipient", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sms_resend_recipient_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sms_resend_recipient_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailNotification", "Notification")
                        .WithMany("SmsResendRecipients")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("sms_resend_recipient_notification_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SmsResend", "SmsResend")
                        .WithMany("SmsResendRecipients")
                        .HasForeignKey("SmsResendId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("sms_resend_recipient_sms_resend_id_fkey");

                    b.Navigation("Notification");

                    b.Navigation("SmsResend");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SmsSm", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sms_sms_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sms_sms_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMessage", "MailMessage")
                        .WithMany("SmsSms")
                        .HasForeignKey("MailMessageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sms_sms_mail_message_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sms_sms_partner_id_fkey");

                    b.Navigation("MailMessage");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SmsTemplate", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sms_template_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sms_template_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModel", "ModelNavigation")
                        .WithMany("SmsTemplates")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("sms_template_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrActWindow", "SidebarAction")
                        .WithMany("SmsTemplates")
                        .HasForeignKey("SidebarActionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sms_template_sidebar_action_id_fkey");

                    b.Navigation("ModelNavigation");

                    b.Navigation("SidebarAction");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SmsTemplatePreview", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sms_template_preview_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sms_template_preview_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.SmsTemplate", "SmsTemplate")
                        .WithMany("SmsTemplatePreviews")
                        .HasForeignKey("SmsTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("sms_template_preview_sms_template_id_fkey");

                    b.Navigation("SmsTemplate");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SmsTemplateReset", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sms_template_reset_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("sms_template_reset_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SnailmailConfirmInvoice", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("snailmail_confirm_invoice_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountInvoiceSend", "InvoiceSend")
                        .WithMany("SnailmailConfirmInvoices")
                        .HasForeignKey("InvoiceSendId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("snailmail_confirm_invoice_invoice_send_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("snailmail_confirm_invoice_write_uid_fkey");

                    b.Navigation("InvoiceSend");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SnailmailLetter", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrAttachment", "Attachment")
                        .WithMany("SnailmailLetters")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("snailmail_letter_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountry", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("snailmail_letter_country_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("snailmail_letter_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("snailmail_letter_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMessage", "Message")
                        .WithMany("SnailmailLetters")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("snailmail_letter_message_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("snailmail_letter_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrActReportXml", "ReportTemplateNavigation")
                        .WithMany("SnailmailLetters")
                        .HasForeignKey("ReportTemplate")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("snailmail_letter_report_template_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountryState", "StateNavigation")
                        .WithMany("SnailmailLetters")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("snailmail_letter_state_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("snailmail_letter_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("snailmail_letter_user_id_fkey");

                    b.Navigation("Attachment");

                    b.Navigation("Message");

                    b.Navigation("ReportTemplateNavigation");

                    b.Navigation("StateNavigation");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SnailmailLetterFormatError", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("snailmail_letter_format_error_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("snailmail_letter_format_error_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMessage", "Message")
                        .WithMany("SnailmailLetterFormatErrors")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("snailmail_letter_format_error_message_id_fkey");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SnailmailLetterMissingRequiredField", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResCountry", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("snailmail_letter_missing_required_fields_country_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("snailmail_letter_missing_required_fields_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("snailmail_letter_missing_required_fields_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.SnailmailLetter", "Letter")
                        .WithMany("SnailmailLetterMissingRequiredFields")
                        .HasForeignKey("LetterId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("snailmail_letter_missing_required_fields_letter_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("snailmail_letter_missing_required_fields_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountryState", "State")
                        .WithMany("SnailmailLetterMissingRequiredFields")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("snailmail_letter_missing_required_fields_state_id_fkey");

                    b.Navigation("Letter");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SpreadsheetDashboard", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("spreadsheet_dashboard_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.SpreadsheetDashboardGroup", "DashboardGroup")
                        .WithMany("SpreadsheetDashboards")
                        .HasForeignKey("DashboardGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("spreadsheet_dashboard_dashboard_group_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("spreadsheet_dashboard_write_uid_fkey");

                    b.Navigation("DashboardGroup");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SpreadsheetDashboardGroup", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("spreadsheet_dashboard_group_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("spreadsheet_dashboard_group_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockAssignSerial", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_assign_serial_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_assign_serial_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockMove", "Move")
                        .WithMany("StockAssignSerials")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_assign_serial_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpProduction", "Production")
                        .WithMany("StockAssignSerials")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_assign_serial_production_id_fkey");

                    b.Navigation("Move");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockBackorderConfirmation", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_backorder_confirmation_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_backorder_confirmation_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockBackorderConfirmationLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.StockBackorderConfirmation", "BackorderConfirmation")
                        .WithMany("StockBackorderConfirmationLines")
                        .HasForeignKey("BackorderConfirmationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_backorder_confirmation_lin_backorder_confirmation_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_backorder_confirmation_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_backorder_confirmation_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPicking", "Picking")
                        .WithMany("StockBackorderConfirmationLines")
                        .HasForeignKey("PickingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_backorder_confirmation_line_picking_id_fkey");

                    b.Navigation("BackorderConfirmation");

                    b.Navigation("Picking");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockChangeProductQty", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_change_product_qty_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_change_product_qty_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("StockChangeProductQties")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_change_product_qty_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplate", "ProductTmpl")
                        .WithMany("StockChangeProductQties")
                        .HasForeignKey("ProductTmplId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_change_product_qty_product_tmpl_id_fkey");

                    b.Navigation("Product");

                    b.Navigation("ProductTmpl");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockImmediateTransfer", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_immediate_transfer_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_immediate_transfer_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockImmediateTransferLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_immediate_transfer_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockImmediateTransfer", "ImmediateTransfer")
                        .WithMany("StockImmediateTransferLines")
                        .HasForeignKey("ImmediateTransferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_immediate_transfer_line_immediate_transfer_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_immediate_transfer_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPicking", "Picking")
                        .WithMany("StockImmediateTransferLines")
                        .HasForeignKey("PickingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_immediate_transfer_line_picking_id_fkey");

                    b.Navigation("ImmediateTransfer");

                    b.Navigation("Picking");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockInventoryAdjustmentName", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_inventory_adjustment_name_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_inventory_adjustment_name_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockInventoryConflict", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_inventory_conflict_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_inventory_conflict_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockInventoryWarning", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_inventory_warning_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_inventory_warning_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockLocation", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_location_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_location_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "Location")
                        .WithMany("InverseLocation")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_location_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductRemoval", "RemovalStrategy")
                        .WithMany("StockLocations")
                        .HasForeignKey("RemovalStrategyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_location_removal_strategy_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockStorageCategory", "StorageCategory")
                        .WithMany("StockLocations")
                        .HasForeignKey("StorageCategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_location_storage_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_location_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "ValuationInAccount")
                        .WithMany("StockLocationValuationInAccounts")
                        .HasForeignKey("ValuationInAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_location_valuation_in_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountAccount", "ValuationOutAccount")
                        .WithMany("StockLocationValuationOutAccounts")
                        .HasForeignKey("ValuationOutAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_location_valuation_out_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockWarehouse", "Warehouse")
                        .WithMany("StockLocations")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_location_warehouse_id_fkey");

                    b.Navigation("Location");

                    b.Navigation("RemovalStrategy");

                    b.Navigation("StorageCategory");

                    b.Navigation("ValuationInAccount");

                    b.Navigation("ValuationOutAccount");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockLot", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_lot_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_lot_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("StockLots")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_lot_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("StockLots")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_lot_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "ProductUom")
                        .WithMany("StockLots")
                        .HasForeignKey("ProductUomId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_lot_product_uom_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_lot_company_id_fkey");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Product");

                    b.Navigation("ProductUom");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockMove", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAnalyticLine", "AnalyticAccountLine")
                        .WithMany("StockMoves")
                        .HasForeignKey("AnalyticAccountLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_analytic_account_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpBomLine", "BomLine")
                        .WithMany("StockMoves")
                        .HasForeignKey("BomLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_bom_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpBomByproduct", "Byproduct")
                        .WithMany("StockMoves")
                        .HasForeignKey("ByproductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_byproduct_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpUnbuild", "ConsumeUnbuild")
                        .WithMany("StockMoveConsumeUnbuilds")
                        .HasForeignKey("ConsumeUnbuildId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_consume_unbuild_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpProduction", "CreatedProduction")
                        .WithMany("StockMoveCreatedProductions")
                        .HasForeignKey("CreatedProductionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_created_production_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PurchaseOrderLine", "CreatedPurchaseLine")
                        .WithMany("StockMoveCreatedPurchaseLines")
                        .HasForeignKey("CreatedPurchaseLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_created_purchase_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProcurementGroup", "Group")
                        .WithMany("StockMoves")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_group_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "LocationDest")
                        .WithMany("StockMoveLocationDests")
                        .HasForeignKey("LocationDestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_move_location_dest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "Location")
                        .WithMany("StockMoveLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_move_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpRoutingWorkcenter", "Operation")
                        .WithMany("StockMoves")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_operation_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLot", "OrderFinishedLot")
                        .WithMany("StockMoves")
                        .HasForeignKey("OrderFinishedLotId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_order_finished_lot_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockWarehouseOrderpoint", "Orderpoint")
                        .WithMany("StockMoves")
                        .HasForeignKey("OrderpointId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_orderpoint_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockMove", "OriginReturnedMove")
                        .WithMany("InverseOriginReturnedMove")
                        .HasForeignKey("OriginReturnedMoveId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_origin_returned_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPackageLevel", "PackageLevel")
                        .WithMany("StockMoves")
                        .HasForeignKey("PackageLevelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_package_level_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPicking", "Picking")
                        .WithMany("StockMoves")
                        .HasForeignKey("PickingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_picking_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPickingType", "PickingType")
                        .WithMany("StockMoves")
                        .HasForeignKey("PickingTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_picking_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("StockMoves")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_move_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductPackaging", "ProductPackaging")
                        .WithMany("StockMoves")
                        .HasForeignKey("ProductPackagingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_product_packaging_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "ProductUomNavigation")
                        .WithMany("StockMoves")
                        .HasForeignKey("ProductUom")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_move_product_uom_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpProduction", "Production")
                        .WithMany("StockMoveProductions")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_production_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PurchaseOrderLine", "PurchaseLine")
                        .WithMany("StockMovePurchaseLines")
                        .HasForeignKey("PurchaseLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_purchase_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpProduction", "RawMaterialProduction")
                        .WithMany("StockMoveRawMaterialProductions")
                        .HasForeignKey("RawMaterialProductionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_raw_material_production_id_fkey");

                    b.HasOne("Bamboo.Core.Models.RepairOrder", "Repair")
                        .WithMany("StockMoves")
                        .HasForeignKey("RepairId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_repair_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "RestrictPartner")
                        .WithMany("StockMoveRestrictPartners")
                        .HasForeignKey("RestrictPartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_restrict_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockRule", "Rule")
                        .WithMany("StockMoves")
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_move_rule_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrderLine", "SaleLine")
                        .WithMany("StockMoves")
                        .HasForeignKey("SaleLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_sale_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_move_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpUnbuild", "Unbuild")
                        .WithMany("StockMoveUnbuilds")
                        .HasForeignKey("UnbuildId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_unbuild_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockWarehouse", "Warehouse")
                        .WithMany("StockMoves")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_warehouse_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpWorkorder", "Workorder")
                        .WithMany("StockMoves")
                        .HasForeignKey("WorkorderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_workorder_id_fkey");

                    b.Navigation("AnalyticAccountLine");

                    b.Navigation("BomLine");

                    b.Navigation("Byproduct");

                    b.Navigation("ConsumeUnbuild");

                    b.Navigation("CreatedProduction");

                    b.Navigation("CreatedPurchaseLine");

                    b.Navigation("Group");

                    b.Navigation("Location");

                    b.Navigation("LocationDest");

                    b.Navigation("Operation");

                    b.Navigation("OrderFinishedLot");

                    b.Navigation("Orderpoint");

                    b.Navigation("OriginReturnedMove");

                    b.Navigation("PackageLevel");

                    b.Navigation("Picking");

                    b.Navigation("PickingType");

                    b.Navigation("Product");

                    b.Navigation("ProductPackaging");

                    b.Navigation("ProductUomNavigation");

                    b.Navigation("Production");

                    b.Navigation("PurchaseLine");

                    b.Navigation("RawMaterialProduction");

                    b.Navigation("Repair");

                    b.Navigation("RestrictPartner");

                    b.Navigation("Rule");

                    b.Navigation("SaleLine");

                    b.Navigation("Unbuild");

                    b.Navigation("Warehouse");

                    b.Navigation("Workorder");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockMoveLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "LocationDest")
                        .WithMany("StockMoveLineLocationDests")
                        .HasForeignKey("LocationDestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_move_line_location_dest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "Location")
                        .WithMany("StockMoveLineLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_move_line_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLot", "Lot")
                        .WithMany("StockMoveLines")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_line_lot_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockMove", "Move")
                        .WithMany("StockMoveLines")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_line_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "Owner")
                        .WithMany("StockMoveLines")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_line_owner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockQuantPackage", "Package")
                        .WithMany("StockMoveLinePackages")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_move_line_package_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPackageLevel", "PackageLevel")
                        .WithMany("StockMoveLines")
                        .HasForeignKey("PackageLevelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_line_package_level_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPicking", "Picking")
                        .WithMany("StockMoveLines")
                        .HasForeignKey("PickingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_line_picking_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("StockMoveLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_move_line_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "ProductUom")
                        .WithMany("StockMoveLines")
                        .HasForeignKey("ProductUomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_move_line_product_uom_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpProduction", "Production")
                        .WithMany("StockMoveLines")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_line_production_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockQuantPackage", "ResultPackage")
                        .WithMany("StockMoveLineResultPackages")
                        .HasForeignKey("ResultPackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_move_line_result_package_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_move_line_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpWorkorder", "Workorder")
                        .WithMany("StockMoveLines")
                        .HasForeignKey("WorkorderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_move_line_workorder_id_fkey");

                    b.Navigation("Location");

                    b.Navigation("LocationDest");

                    b.Navigation("Lot");

                    b.Navigation("Move");

                    b.Navigation("Owner");

                    b.Navigation("Package");

                    b.Navigation("PackageLevel");

                    b.Navigation("Picking");

                    b.Navigation("Product");

                    b.Navigation("ProductUom");

                    b.Navigation("Production");

                    b.Navigation("ResultPackage");

                    b.Navigation("Workorder");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockOrderpointSnooze", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_orderpoint_snooze_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_orderpoint_snooze_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockPackageDestination", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_package_destination_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_package_destination_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "LocationDest")
                        .WithMany("StockPackageDestinations")
                        .HasForeignKey("LocationDestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_package_destination_location_dest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPicking", "Picking")
                        .WithMany("StockPackageDestinations")
                        .HasForeignKey("PickingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_package_destination_picking_id_fkey");

                    b.Navigation("LocationDest");

                    b.Navigation("Picking");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockPackageLevel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_package_level_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_package_level_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "LocationDest")
                        .WithMany("StockPackageLevels")
                        .HasForeignKey("LocationDestId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_package_level_location_dest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockQuantPackage", "Package")
                        .WithMany("StockPackageLevels")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_package_level_package_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPicking", "Picking")
                        .WithMany("StockPackageLevels")
                        .HasForeignKey("PickingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_package_level_picking_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_package_level_company_id_fkey");

                    b.Navigation("LocationDest");

                    b.Navigation("Package");

                    b.Navigation("Picking");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockPackageType", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_package_type_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_package_type_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_package_type_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockPicking", b =>
                {
                    b.HasOne("Bamboo.Core.Models.StockPicking", "Backorder")
                        .WithMany("InverseBackorder")
                        .HasForeignKey("BackorderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_picking_backorder_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_picking_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProcurementGroup", "Group")
                        .WithMany("StockPickings")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_picking_group_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_picking_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "LocationDest")
                        .WithMany("StockPickingLocationDests")
                        .HasForeignKey("LocationDestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_picking_location_dest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "Location")
                        .WithMany("StockPickingLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_picking_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("StockPickings")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_picking_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "Owner")
                        .WithMany("StockPickingOwners")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_picking_owner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_picking_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPickingType", "PickingType")
                        .WithMany("StockPickings")
                        .HasForeignKey("PickingTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_picking_picking_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PosOrder", "PosOrder")
                        .WithMany("StockPickings")
                        .HasForeignKey("PosOrderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_picking_pos_order_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PosSession", "PosSession")
                        .WithMany("StockPickings")
                        .HasForeignKey("PosSessionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_picking_pos_session_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrder", "Sale")
                        .WithMany("StockPickings")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_picking_sale_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_picking_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_picking_user_id_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", "Website")
                        .WithMany("StockPickings")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_picking_website_id_fkey");

                    b.Navigation("Backorder");

                    b.Navigation("Group");

                    b.Navigation("Location");

                    b.Navigation("LocationDest");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Owner");

                    b.Navigation("PickingType");

                    b.Navigation("PosOrder");

                    b.Navigation("PosSession");

                    b.Navigation("Sale");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockPickingType", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_picking_type_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "DefaultLocationDest")
                        .WithMany("StockPickingTypeDefaultLocationDests")
                        .HasForeignKey("DefaultLocationDestId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_picking_type_default_location_dest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "DefaultLocationSrc")
                        .WithMany("StockPickingTypeDefaultLocationSrcs")
                        .HasForeignKey("DefaultLocationSrcId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_picking_type_default_location_src_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_picking_type_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPickingType", "ReturnPickingType")
                        .WithMany("InverseReturnPickingType")
                        .HasForeignKey("ReturnPickingTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_picking_type_return_picking_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrSequence", "SequenceNavigation")
                        .WithMany("StockPickingTypes")
                        .HasForeignKey("SequenceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_picking_type_sequence_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_picking_type_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockWarehouse", "Warehouse")
                        .WithMany("StockPickingTypes")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_picking_type_warehouse_id_fkey");

                    b.Navigation("DefaultLocationDest");

                    b.Navigation("DefaultLocationSrc");

                    b.Navigation("ReturnPickingType");

                    b.Navigation("SequenceNavigation");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockPutawayRule", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductCategory", "Category")
                        .WithMany("StockPutawayRules")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_putaway_rule_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_putaway_rule_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_putaway_rule_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "LocationIn")
                        .WithMany("StockPutawayRuleLocationIns")
                        .HasForeignKey("LocationInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_putaway_rule_location_in_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "LocationOut")
                        .WithMany("StockPutawayRuleLocationOuts")
                        .HasForeignKey("LocationOutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_putaway_rule_location_out_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("StockPutawayRules")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_putaway_rule_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockStorageCategory", "StorageCategory")
                        .WithMany("StockPutawayRules")
                        .HasForeignKey("StorageCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_putaway_rule_storage_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_putaway_rule_company_id_fkey");

                    b.Navigation("Category");

                    b.Navigation("LocationIn");

                    b.Navigation("LocationOut");

                    b.Navigation("Product");

                    b.Navigation("StorageCategory");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockQuant", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_quant_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_quant_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "Location")
                        .WithMany("StockQuants")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_quant_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLot", "Lot")
                        .WithMany("StockQuants")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_quant_lot_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "Owner")
                        .WithMany("StockQuants")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_quant_owner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockQuantPackage", "Package")
                        .WithMany("StockQuants")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_quant_package_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("StockQuants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_quant_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockStorageCategory", "StorageCategory")
                        .WithMany("StockQuants")
                        .HasForeignKey("StorageCategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_quant_storage_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_quant_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_quant_user_id_fkey");

                    b.Navigation("Location");

                    b.Navigation("Lot");

                    b.Navigation("Owner");

                    b.Navigation("Package");

                    b.Navigation("Product");

                    b.Navigation("StorageCategory");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockQuantPackage", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_quant_package_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_quant_package_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "Location")
                        .WithMany("StockQuantPackages")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_quant_package_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPackageType", "PackageType")
                        .WithMany("StockQuantPackages")
                        .HasForeignKey("PackageTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_quant_package_package_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_quant_package_company_id_fkey");

                    b.Navigation("Location");

                    b.Navigation("PackageType");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockQuantityHistory", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_quantity_history_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_quantity_history_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockReplenishmentInfo", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_replenishment_info_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_replenishment_info_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockWarehouseOrderpoint", "Orderpoint")
                        .WithMany("StockReplenishmentInfos")
                        .HasForeignKey("OrderpointId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_replenishment_info_orderpoint_id_fkey");

                    b.Navigation("Orderpoint");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockReplenishmentOption", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_replenishment_option_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_replenishment_option_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("StockReplenishmentOptions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_replenishment_option_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockReplenishmentInfo", "ReplenishmentInfo")
                        .WithMany("StockReplenishmentOptions")
                        .HasForeignKey("ReplenishmentInfoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_replenishment_option_replenishment_info_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockRoute", "Route")
                        .WithMany("StockReplenishmentOptions")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_replenishment_option_route_id_fkey");

                    b.Navigation("Product");

                    b.Navigation("ReplenishmentInfo");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockRequestCount", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_request_count_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_request_count_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_request_count_user_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockReturnPicking", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_return_picking_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_return_picking_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "Location")
                        .WithMany("StockReturnPickingLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_return_picking_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "OriginalLocation")
                        .WithMany("StockReturnPickingOriginalLocations")
                        .HasForeignKey("OriginalLocationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_return_picking_original_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "ParentLocation")
                        .WithMany("StockReturnPickingParentLocations")
                        .HasForeignKey("ParentLocationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_return_picking_parent_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPicking", "Picking")
                        .WithMany("StockReturnPickings")
                        .HasForeignKey("PickingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_return_picking_picking_id_fkey");

                    b.Navigation("Location");

                    b.Navigation("OriginalLocation");

                    b.Navigation("ParentLocation");

                    b.Navigation("Picking");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockReturnPickingLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_return_picking_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_return_picking_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockMove", "Move")
                        .WithMany("StockReturnPickingLines")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_return_picking_line_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("StockReturnPickingLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_return_picking_line_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockReturnPicking", "Wizard")
                        .WithMany("StockReturnPickingLines")
                        .HasForeignKey("WizardId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_return_picking_line_wizard_id_fkey");

                    b.Navigation("Move");

                    b.Navigation("Product");

                    b.Navigation("Wizard");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockRoute", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_route_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_route_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockWarehouse", "SuppliedWh")
                        .WithMany("StockRouteSuppliedWhs")
                        .HasForeignKey("SuppliedWhId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_route_supplied_wh_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockWarehouse", "SupplierWh")
                        .WithMany("StockRouteSupplierWhs")
                        .HasForeignKey("SupplierWhId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_route_supplier_wh_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_route_company_id_fkey");

                    b.Navigation("SuppliedWh");

                    b.Navigation("SupplierWh");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockRule", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_rule_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProcurementGroup", "Group")
                        .WithMany("StockRules")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_rule_group_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_rule_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "LocationDest")
                        .WithMany("StockRuleLocationDests")
                        .HasForeignKey("LocationDestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_rule_location_dest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "LocationSrc")
                        .WithMany("StockRuleLocationSrcs")
                        .HasForeignKey("LocationSrcId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_rule_location_src_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "PartnerAddress")
                        .WithMany("StockRules")
                        .HasForeignKey("PartnerAddressId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_rule_partner_address_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPickingType", "PickingType")
                        .WithMany("StockRules")
                        .HasForeignKey("PickingTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_rule_picking_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockWarehouse", "PropagateWarehouse")
                        .WithMany("StockRulePropagateWarehouses")
                        .HasForeignKey("PropagateWarehouseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_rule_propagate_warehouse_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockRoute", "Route")
                        .WithMany("StockRules")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_rule_route_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_rule_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockWarehouse", "Warehouse")
                        .WithMany("StockRuleWarehouses")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_rule_warehouse_id_fkey");

                    b.Navigation("Group");

                    b.Navigation("LocationDest");

                    b.Navigation("LocationSrc");

                    b.Navigation("PartnerAddress");

                    b.Navigation("PickingType");

                    b.Navigation("PropagateWarehouse");

                    b.Navigation("Route");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockRulesReport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_rules_report_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_rules_report_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("StockRulesReports")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_rules_report_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplate", "ProductTmpl")
                        .WithMany("StockRulesReports")
                        .HasForeignKey("ProductTmplId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_rules_report_product_tmpl_id_fkey");

                    b.Navigation("Product");

                    b.Navigation("ProductTmpl");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockSchedulerCompute", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_scheduler_compute_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_scheduler_compute_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockScrap", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_scrap_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_scrap_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "Location")
                        .WithMany("StockScrapLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_scrap_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLot", "Lot")
                        .WithMany("StockScraps")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_scrap_lot_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrAttachment", "MessageMainAttachment")
                        .WithMany("StockScraps")
                        .HasForeignKey("MessageMainAttachmentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_scrap_message_main_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockMove", "Move")
                        .WithMany("StockScraps")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_scrap_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "Owner")
                        .WithMany("StockScraps")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_scrap_owner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockQuantPackage", "Package")
                        .WithMany("StockScraps")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_scrap_package_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPicking", "Picking")
                        .WithMany("StockScraps")
                        .HasForeignKey("PickingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_scrap_picking_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("StockScraps")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_scrap_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UomUom", "ProductUom")
                        .WithMany("StockScraps")
                        .HasForeignKey("ProductUomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_scrap_product_uom_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpProduction", "Production")
                        .WithMany("StockScraps")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_scrap_production_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "ScrapLocation")
                        .WithMany("StockScrapScrapLocations")
                        .HasForeignKey("ScrapLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_scrap_scrap_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_scrap_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpWorkorder", "Workorder")
                        .WithMany("StockScraps")
                        .HasForeignKey("WorkorderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_scrap_workorder_id_fkey");

                    b.Navigation("Location");

                    b.Navigation("Lot");

                    b.Navigation("MessageMainAttachment");

                    b.Navigation("Move");

                    b.Navigation("Owner");

                    b.Navigation("Package");

                    b.Navigation("Picking");

                    b.Navigation("Product");

                    b.Navigation("ProductUom");

                    b.Navigation("Production");

                    b.Navigation("ScrapLocation");

                    b.Navigation("Workorder");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockStorageCategory", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_storage_category_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_storage_category_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_storage_category_company_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockStorageCategoryCapacity", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_storage_category_capacity_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_storage_category_capacity_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPackageType", "PackageType")
                        .WithMany("StockStorageCategoryCapacities")
                        .HasForeignKey("PackageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_storage_category_capacity_package_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("StockStorageCategoryCapacities")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_storage_category_capacity_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockStorageCategory", "StorageCategory")
                        .WithMany("StockStorageCategoryCapacities")
                        .HasForeignKey("StorageCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_storage_category_capacity_storage_category_id_fkey");

                    b.Navigation("PackageType");

                    b.Navigation("Product");

                    b.Navigation("StorageCategory");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockTraceabilityReport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_traceability_report_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_traceability_report_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockTrackConfirmation", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_track_confirmation_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_track_confirmation_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockTrackLine", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_track_line_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_track_line_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("StockTrackLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_track_line_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockTrackConfirmation", "Wizard")
                        .WithMany("StockTrackLines")
                        .HasForeignKey("WizardId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_track_line_wizard_id_fkey");

                    b.Navigation("Product");

                    b.Navigation("Wizard");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockValuationLayer", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountMove", "AccountMove")
                        .WithMany("StockValuationLayers")
                        .HasForeignKey("AccountMoveId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_valuation_layer_account_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountMoveLine", "AccountMoveLine")
                        .WithMany("StockValuationLayers")
                        .HasForeignKey("AccountMoveLineId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_valuation_layer_account_move_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_valuation_layer_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_valuation_layer_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("StockValuationLayers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_valuation_layer_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockMove", "StockMove")
                        .WithMany("StockValuationLayers")
                        .HasForeignKey("StockMoveId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_valuation_layer_stock_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockValuationLayer", "StockValuationLayerNavigation")
                        .WithMany("InverseStockValuationLayerNavigation")
                        .HasForeignKey("StockValuationLayerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_valuation_layer_stock_valuation_layer_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_valuation_layer_company_id_fkey");

                    b.Navigation("AccountMove");

                    b.Navigation("AccountMoveLine");

                    b.Navigation("Product");

                    b.Navigation("StockMove");

                    b.Navigation("StockValuationLayerNavigation");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockValuationLayerRevaluation", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccount", "Account")
                        .WithMany("StockValuationLayerRevaluations")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_valuation_layer_revaluation_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", "AccountJournal")
                        .WithMany("StockValuationLayerRevaluations")
                        .HasForeignKey("AccountJournalId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_valuation_layer_revaluation_account_journal_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_valuation_layer_revaluation_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_valuation_layer_revaluation_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("StockValuationLayerRevaluations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_valuation_layer_revaluation_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_valuation_layer_revaluation_company_id_fkey");

                    b.Navigation("Account");

                    b.Navigation("AccountJournal");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockWarehouse", b =>
                {
                    b.HasOne("Bamboo.Core.Models.StockRule", "BuyPull")
                        .WithMany("StockWarehouseBuyPulls")
                        .HasForeignKey("BuyPullId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_buy_pull_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockRoute", "CrossdockRoute")
                        .WithMany("StockWarehouseCrossdockRoutes")
                        .HasForeignKey("CrossdockRouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_warehouse_crossdock_route_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockRoute", "DeliveryRoute")
                        .WithMany("StockWarehouseDeliveryRoutes")
                        .HasForeignKey("DeliveryRouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_warehouse_delivery_route_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPickingType", "InType")
                        .WithMany("StockWarehouseInTypes")
                        .HasForeignKey("InTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_in_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPickingType", "IntType")
                        .WithMany("StockWarehouseIntTypes")
                        .HasForeignKey("IntTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_int_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "LotStock")
                        .WithMany("StockWarehouseLotStocks")
                        .HasForeignKey("LotStockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_warehouse_lot_stock_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPickingType", "ManuType")
                        .WithMany("StockWarehouseManuTypes")
                        .HasForeignKey("ManuTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_manu_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockRule", "ManufactureMtoPull")
                        .WithMany("StockWarehouseManufactureMtoPulls")
                        .HasForeignKey("ManufactureMtoPullId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_manufacture_mto_pull_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockRule", "ManufacturePull")
                        .WithMany("StockWarehouseManufacturePulls")
                        .HasForeignKey("ManufacturePullId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_manufacture_pull_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockRule", "MtoPull")
                        .WithMany("StockWarehouseMtoPulls")
                        .HasForeignKey("MtoPullId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_mto_pull_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPickingType", "OutType")
                        .WithMany("StockWarehouseOutTypes")
                        .HasForeignKey("OutTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_out_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPickingType", "PackType")
                        .WithMany("StockWarehousePackTypes")
                        .HasForeignKey("PackTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_pack_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "PbmLoc")
                        .WithMany("StockWarehousePbmLocs")
                        .HasForeignKey("PbmLocId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_pbm_loc_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockRule", "PbmMtoPull")
                        .WithMany("StockWarehousePbmMtoPulls")
                        .HasForeignKey("PbmMtoPullId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_pbm_mto_pull_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockRoute", "PbmRoute")
                        .WithMany("StockWarehousePbmRoutes")
                        .HasForeignKey("PbmRouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_warehouse_pbm_route_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPickingType", "PbmType")
                        .WithMany("StockWarehousePbmTypes")
                        .HasForeignKey("PbmTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_pbm_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPickingType", "PickType")
                        .WithMany("StockWarehousePickTypes")
                        .HasForeignKey("PickTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_pick_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPickingType", "PosType")
                        .WithMany("StockWarehousePosTypes")
                        .HasForeignKey("PosTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_pos_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockRoute", "ReceptionRoute")
                        .WithMany("StockWarehouseReceptionRoutes")
                        .HasForeignKey("ReceptionRouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_warehouse_reception_route_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPickingType", "ReturnType")
                        .WithMany("StockWarehouseReturnTypes")
                        .HasForeignKey("ReturnTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_return_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "SamLoc")
                        .WithMany("StockWarehouseSamLocs")
                        .HasForeignKey("SamLocId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_sam_loc_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockRule", "SamRule")
                        .WithMany("StockWarehouseSamRules")
                        .HasForeignKey("SamRuleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_sam_rule_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPickingType", "SamType")
                        .WithMany("StockWarehouseSamTypes")
                        .HasForeignKey("SamTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_sam_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_warehouse_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "ViewLocation")
                        .WithMany("StockWarehouseViewLocations")
                        .HasForeignKey("ViewLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_warehouse_view_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "WhInputStockLoc")
                        .WithMany("StockWarehouseWhInputStockLocs")
                        .HasForeignKey("WhInputStockLocId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_wh_input_stock_loc_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "WhOutputStockLoc")
                        .WithMany("StockWarehouseWhOutputStockLocs")
                        .HasForeignKey("WhOutputStockLocId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_wh_output_stock_loc_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "WhPackStockLoc")
                        .WithMany("StockWarehouseWhPackStockLocs")
                        .HasForeignKey("WhPackStockLocId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_wh_pack_stock_loc_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "WhQcStockLoc")
                        .WithMany("StockWarehouseWhQcStockLocs")
                        .HasForeignKey("WhQcStockLocId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_wh_qc_stock_loc_id_fkey");

                    b.Navigation("BuyPull");

                    b.Navigation("CrossdockRoute");

                    b.Navigation("DeliveryRoute");

                    b.Navigation("InType");

                    b.Navigation("IntType");

                    b.Navigation("LotStock");

                    b.Navigation("ManuType");

                    b.Navigation("ManufactureMtoPull");

                    b.Navigation("ManufacturePull");

                    b.Navigation("MtoPull");

                    b.Navigation("OutType");

                    b.Navigation("PackType");

                    b.Navigation("PbmLoc");

                    b.Navigation("PbmMtoPull");

                    b.Navigation("PbmRoute");

                    b.Navigation("PbmType");

                    b.Navigation("PickType");

                    b.Navigation("PosType");

                    b.Navigation("ReceptionRoute");

                    b.Navigation("ReturnType");

                    b.Navigation("SamLoc");

                    b.Navigation("SamRule");

                    b.Navigation("SamType");

                    b.Navigation("ViewLocation");

                    b.Navigation("WhInputStockLoc");

                    b.Navigation("WhOutputStockLoc");

                    b.Navigation("WhPackStockLoc");

                    b.Navigation("WhQcStockLoc");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockWarehouseOrderpoint", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MrpBom", "Bom")
                        .WithMany("StockWarehouseOrderpoints")
                        .HasForeignKey("BomId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_orderpoint_bom_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_orderpoint_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ProcurementGroup", "Group")
                        .WithMany("StockWarehouseOrderpoints")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_orderpoint_group_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_orderpoint_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "Location")
                        .WithMany("StockWarehouseOrderpoints")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_warehouse_orderpoint_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductCategory", "ProductCategory")
                        .WithMany("StockWarehouseOrderpoints")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_orderpoint_product_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("StockWarehouseOrderpoints")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_warehouse_orderpoint_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockRoute", "Route")
                        .WithMany("StockWarehouseOrderpoints")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_orderpoint_route_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductSupplierinfo", "Supplier")
                        .WithMany("StockWarehouseOrderpoints")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_orderpoint_supplier_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("stock_warehouse_orderpoint_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", "Vendor")
                        .WithMany("StockWarehouseOrderpoints")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warehouse_orderpoint_vendor_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockWarehouse", "Warehouse")
                        .WithMany("StockWarehouseOrderpoints")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_warehouse_orderpoint_warehouse_id_fkey");

                    b.Navigation("Bom");

                    b.Navigation("Group");

                    b.Navigation("Location");

                    b.Navigation("Product");

                    b.Navigation("ProductCategory");

                    b.Navigation("Route");

                    b.Navigation("Supplier");

                    b.Navigation("Vendor");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockWarnInsufficientQtyRepair", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warn_insufficient_qty_repair_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warn_insufficient_qty_repair_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "Location")
                        .WithMany("StockWarnInsufficientQtyRepairs")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_warn_insufficient_qty_repair_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("StockWarnInsufficientQtyRepairs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_warn_insufficient_qty_repair_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.RepairOrder", "Repair")
                        .WithMany("StockWarnInsufficientQtyRepairs")
                        .HasForeignKey("RepairId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warn_insufficient_qty_repair_repair_id_fkey");

                    b.Navigation("Location");

                    b.Navigation("Product");

                    b.Navigation("Repair");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockWarnInsufficientQtyScrap", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warn_insufficient_qty_scrap_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warn_insufficient_qty_scrap_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "Location")
                        .WithMany("StockWarnInsufficientQtyScraps")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_warn_insufficient_qty_scrap_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("StockWarnInsufficientQtyScraps")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_warn_insufficient_qty_scrap_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockScrap", "Scrap")
                        .WithMany("StockWarnInsufficientQtyScraps")
                        .HasForeignKey("ScrapId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warn_insufficient_qty_scrap_scrap_id_fkey");

                    b.Navigation("Location");

                    b.Navigation("Product");

                    b.Navigation("Scrap");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockWarnInsufficientQtyUnbuild", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warn_insufficient_qty_unbuild_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warn_insufficient_qty_unbuild_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.StockLocation", "Location")
                        .WithMany("StockWarnInsufficientQtyUnbuilds")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_warn_insufficient_qty_unbuild_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("StockWarnInsufficientQtyUnbuilds")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("stock_warn_insufficient_qty_unbuild_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpUnbuild", "Unbuild")
                        .WithMany("StockWarnInsufficientQtyUnbuilds")
                        .HasForeignKey("UnbuildId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("stock_warn_insufficient_qty_unbuild_unbuild_id_fkey");

                    b.Navigation("Location");

                    b.Navigation("Product");

                    b.Navigation("Unbuild");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ThemeIrAsset", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("theme_ir_asset_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("theme_ir_asset_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ThemeIrAttachment", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("theme_ir_attachment_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("theme_ir_attachment_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ThemeIrUiView", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("theme_ir_ui_view_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("theme_ir_ui_view_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ThemeWebsiteMenu", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("theme_website_menu_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("theme_website_menu_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ThemeWebsitePage", "Page")
                        .WithMany("ThemeWebsiteMenus")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("theme_website_menu_page_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ThemeWebsiteMenu", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("theme_website_menu_parent_id_fkey");

                    b.Navigation("Page");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ThemeWebsitePage", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("theme_website_page_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("theme_website_page_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ThemeIrUiView", "View")
                        .WithMany("ThemeWebsitePages")
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("theme_website_page_view_id_fkey");

                    b.Navigation("View");
                });

            modelBuilder.Entity("Bamboo.Core.Models.UomCategory", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("uom_category_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("uom_category_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.UomUom", b =>
                {
                    b.HasOne("Bamboo.Core.Models.UomCategory", "Category")
                        .WithMany("UomUoms")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("uom_uom_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("uom_uom_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("uom_uom_write_uid_fkey");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Bamboo.Core.Models.UtmCampaign", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("utm_campaign_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("utm_campaign_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.UtmStage", "Stage")
                        .WithMany("UtmCampaigns")
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("utm_campaign_stage_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("utm_campaign_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("utm_campaign_user_id_fkey");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Bamboo.Core.Models.UtmMedium", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("utm_medium_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("utm_medium_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.UtmSource", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("utm_source_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("utm_source_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.UtmStage", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("utm_stage_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("utm_stage_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.UtmTag", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("utm_tag_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("utm_tag_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ValidateAccountMove", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("validate_account_move_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("validate_account_move_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebEditorConverterTest", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("web_editor_converter_test_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("web_editor_converter_test_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.WebEditorConverterTestSub", "Many2oneNavigation")
                        .WithMany("WebEditorConverterTests")
                        .HasForeignKey("Many2one")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("web_editor_converter_test_many2one_fkey");

                    b.Navigation("Many2oneNavigation");
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebEditorConverterTestSub", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("web_editor_converter_test_sub_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("web_editor_converter_test_sub_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebTourTour", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("web_tour_tour_user_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.Website", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailTemplate", "CartRecoveryMailTemplate")
                        .WithMany("Websites")
                        .HasForeignKey("CartRecoveryMailTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_cart_recovery_mail_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmTeam", "CrmDefaultTeam")
                        .WithMany("WebsiteCrmDefaultTeams")
                        .HasForeignKey("CrmDefaultTeamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_crm_default_team_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CrmDefaultUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_crm_default_user_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResLang", "DefaultLang")
                        .WithMany("Websites")
                        .HasForeignKey("DefaultLangId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("website_default_lang_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("SalespersonId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_salesperson_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmTeam", "Salesteam")
                        .WithMany("WebsiteSalesteams")
                        .HasForeignKey("SalesteamId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_salesteam_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("website_company_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModuleModule", "Theme")
                        .WithMany("Websites")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_theme_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("website_user_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockWarehouse", "Warehouse")
                        .WithMany("Websites")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_warehouse_id_fkey");

                    b.Navigation("CartRecoveryMailTemplate");

                    b.Navigation("CrmDefaultTeam");

                    b.Navigation("DefaultLang");

                    b.Navigation("Salesteam");

                    b.Navigation("Theme");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteBaseUnit", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_base_unit_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_base_unit_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteConfiguratorFeature", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_configurator_feature_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_configurator_feature_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModuleModule", "Module")
                        .WithMany("WebsiteConfiguratorFeatures")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("website_configurator_feature_module_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrUiView", "PageView")
                        .WithMany("WebsiteConfiguratorFeatures")
                        .HasForeignKey("PageViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("website_configurator_feature_page_view_id_fkey");

                    b.Navigation("Module");

                    b.Navigation("PageView");
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteMenu", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_menu_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_menu_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.WebsitePage", "Page")
                        .WithMany("WebsiteMenus")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("website_menu_page_id_fkey");

                    b.HasOne("Bamboo.Core.Models.WebsiteMenu", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("website_menu_parent_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ThemeWebsiteMenu", "ThemeTemplate")
                        .WithMany("WebsiteMenus")
                        .HasForeignKey("ThemeTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_menu_theme_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", "Website")
                        .WithMany("WebsiteMenus")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("website_menu_website_id_fkey");

                    b.Navigation("Page");

                    b.Navigation("Parent");

                    b.Navigation("ThemeTemplate");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsitePage", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_page_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_page_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ThemeWebsitePage", "ThemeTemplate")
                        .WithMany("WebsitePages")
                        .HasForeignKey("ThemeTemplateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_page_theme_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrUiView", "View")
                        .WithMany("WebsitePages")
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("website_page_view_id_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", "Website")
                        .WithMany("WebsitePages")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("website_page_website_id_fkey");

                    b.Navigation("ThemeTemplate");

                    b.Navigation("View");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteRewrite", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_rewrite_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_rewrite_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.WebsiteRoute", "Route")
                        .WithMany("WebsiteRewrites")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_rewrite_route_id_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", "Website")
                        .WithMany("WebsiteRewrites")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("website_rewrite_website_id_fkey");

                    b.Navigation("Route");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteRobot", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_robots_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_robots_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteRoute", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_route_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_route_write_uid_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteSaleExtraField", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_sale_extra_field_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrModelField", "Field")
                        .WithMany("WebsiteSaleExtraFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("website_sale_extra_field_field_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_sale_extra_field_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", "Website")
                        .WithMany("WebsiteSaleExtraFields")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_sale_extra_field_website_id_fkey");

                    b.Navigation("Field");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteSnippetFilter", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrActServer", "ActionServer")
                        .WithMany("WebsiteSnippetFilters")
                        .HasForeignKey("ActionServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("website_snippet_filter_action_server_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_snippet_filter_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrFilter", "Filter")
                        .WithMany("WebsiteSnippetFilters")
                        .HasForeignKey("FilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("website_snippet_filter_filter_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_snippet_filter_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", "Website")
                        .WithMany("WebsiteSnippetFilters")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("website_snippet_filter_website_id_fkey");

                    b.Navigation("ActionServer");

                    b.Navigation("Filter");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteTrack", b =>
                {
                    b.HasOne("Bamboo.Core.Models.WebsitePage", "Page")
                        .WithMany("WebsiteTracks")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("website_track_page_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", "Product")
                        .WithMany("WebsiteTracks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("website_track_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.WebsiteVisitor", "Visitor")
                        .WithMany("WebsiteTracks")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("website_track_visitor_id_fkey");

                    b.Navigation("Page");

                    b.Navigation("Product");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteVisitor", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResCountry", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_visitor_country_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_visitor_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResLang", "Lang")
                        .WithMany("WebsiteVisitors")
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_visitor_lang_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_visitor_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_visitor_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", "Website")
                        .WithMany("WebsiteVisitors")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("website_visitor_website_id_fkey");

                    b.Navigation("Lang");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Bamboo.Core.Models.WizardIrModelMenuCreate", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("wizard_ir_model_menu_create_create_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifierId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("wizard_ir_model_menu_create_write_uid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrUiMenu", "Menu")
                        .WithMany("WizardIrModelMenuCreates")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("wizard_ir_model_menu_create_menu_id_fkey");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("BaseLanguageInstallWebsiteRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.BaseLanguageInstall", null)
                        .WithMany()
                        .HasForeignKey("BaseLanguageInstallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("base_language_install_website_rel_base_language_install_id_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", null)
                        .WithMany()
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("base_language_install_website_rel_website_id_fkey");
                });

            modelBuilder.Entity("BasePartnerMergeAutomaticWizardResPartnerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.BasePartnerMergeAutomaticWizard", null)
                        .WithMany()
                        .HasForeignKey("BasePartnerMergeAutomaticWizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("base_partner_merge_automatic__base_partner_merge_automatic_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("ResPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("base_partner_merge_automatic_wizard_res_par_res_partner_id_fkey");
                });

            modelBuilder.Entity("CalendarAlarmCalendarEventRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.CalendarAlarm", null)
                        .WithMany()
                        .HasForeignKey("CalendarAlarmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("calendar_alarm_calendar_event_rel_calendar_alarm_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CalendarEvent", null)
                        .WithMany()
                        .HasForeignKey("CalendarEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("calendar_alarm_calendar_event_rel_calendar_event_id_fkey");
                });

            modelBuilder.Entity("CalendarEventResPartnerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.CalendarEvent", null)
                        .WithMany()
                        .HasForeignKey("CalendarEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("calendar_event_res_partner_rel_calendar_event_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("ResPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("calendar_event_res_partner_rel_res_partner_id_fkey");
                });

            modelBuilder.Entity("CrmConvertLeadMassLeadRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.CrmLead2opportunityPartnerMass", null)
                        .WithMany()
                        .HasForeignKey("CrmLead2opportunityPartnerMassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_convert_lead_mass_lead_re_crm_lead2opportunity_partner_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmLead", null)
                        .WithMany()
                        .HasForeignKey("CrmLeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_convert_lead_mass_lead_rel_crm_lead_id_fkey");
                });

            modelBuilder.Entity("CrmIapLeadIndustryCrmIapLeadMiningRequestRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.CrmIapLeadIndustry", null)
                        .WithMany()
                        .HasForeignKey("CrmIapLeadIndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_iap_lead_industry_crm_iap_lea_crm_iap_lead_industry_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmIapLeadMiningRequest", null)
                        .WithMany()
                        .HasForeignKey("CrmIapLeadMiningRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_iap_lead_industry_crm_iap_crm_iap_lead_mining_request__fkey");
                });

            modelBuilder.Entity("CrmIapLeadMiningRequestCrmIapLeadRoleRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.CrmIapLeadMiningRequest", null)
                        .WithMany()
                        .HasForeignKey("CrmIapLeadMiningRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_iap_lead_mining_request__crm_iap_lead_mining_request__fkey2");

                    b.HasOne("Bamboo.Core.Models.CrmIapLeadRole", null)
                        .WithMany()
                        .HasForeignKey("CrmIapLeadRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_iap_lead_mining_request_crm_iap_l_crm_iap_lead_role_id_fkey");
                });

            modelBuilder.Entity("CrmIapLeadMiningRequestCrmTagRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.CrmIapLeadMiningRequest", null)
                        .WithMany()
                        .HasForeignKey("CrmIapLeadMiningRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_iap_lead_mining_request_c_crm_iap_lead_mining_request__fkey");

                    b.HasOne("Bamboo.Core.Models.CrmTag", null)
                        .WithMany()
                        .HasForeignKey("CrmTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_iap_lead_mining_request_crm_tag_rel_crm_tag_id_fkey");
                });

            modelBuilder.Entity("CrmIapLeadMiningRequestResCountryRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.CrmIapLeadMiningRequest", null)
                        .WithMany()
                        .HasForeignKey("CrmIapLeadMiningRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_iap_lead_mining_request_r_crm_iap_lead_mining_request__fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountry", null)
                        .WithMany()
                        .HasForeignKey("ResCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_iap_lead_mining_request_res_country_rel_res_country_id_fkey");
                });

            modelBuilder.Entity("CrmIapLeadMiningRequestResCountryStateRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.CrmIapLeadMiningRequest", null)
                        .WithMany()
                        .HasForeignKey("CrmIapLeadMiningRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_iap_lead_mining_request__crm_iap_lead_mining_request__fkey1");

                    b.HasOne("Bamboo.Core.Models.ResCountryState", null)
                        .WithMany()
                        .HasForeignKey("ResCountryStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_iap_lead_mining_request_res_count_res_country_state_id_fkey");
                });

            modelBuilder.Entity("CrmLead2opportunityPartnerMassResUsersRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.CrmLead2opportunityPartnerMass", null)
                        .WithMany()
                        .HasForeignKey("CrmLead2opportunityPartnerMassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_lead2opportunity_partner__crm_lead2opportunity_partner_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("ResUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_lead2opportunity_partner_mass_res_users_r_res_users_id_fkey");
                });

            modelBuilder.Entity("CrmLeadCrmLead2opportunityPartnerMassRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.CrmLead2opportunityPartnerMass", null)
                        .WithMany()
                        .HasForeignKey("CrmLead2opportunityPartnerMassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_lead_crm_lead2opportunit_crm_lead2opportunity_partner_fkey1");

                    b.HasOne("Bamboo.Core.Models.CrmLead", null)
                        .WithMany()
                        .HasForeignKey("CrmLeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_lead_crm_lead2opportunity_partner_mass_rel_crm_lead_id_fkey");
                });

            modelBuilder.Entity("CrmLeadCrmLead2opportunityPartnerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.CrmLead2opportunityPartner", null)
                        .WithMany()
                        .HasForeignKey("CrmLead2opportunityPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_lead_crm_lead2opportunity_crm_lead2opportunity_partner_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmLead", null)
                        .WithMany()
                        .HasForeignKey("CrmLeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_lead_crm_lead2opportunity_partner_rel_crm_lead_id_fkey");
                });

            modelBuilder.Entity("CrmLeadPlsUpdateCrmLeadScoringFrequencyFieldRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.CrmLeadPlsUpdate", null)
                        .WithMany()
                        .HasForeignKey("CrmLeadPlsUpdateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_lead_pls_update_crm_lead_scorin_crm_lead_pls_update_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmLeadScoringFrequencyField", null)
                        .WithMany()
                        .HasForeignKey("CrmLeadScoringFrequencyFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_lead_pls_update_crm_lead__crm_lead_scoring_frequency_f_fkey");
                });

            modelBuilder.Entity("CrmLeadWebsiteVisitorRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.CrmLead", null)
                        .WithMany()
                        .HasForeignKey("CrmLeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_lead_website_visitor_rel_crm_lead_id_fkey");

                    b.HasOne("Bamboo.Core.Models.WebsiteVisitor", null)
                        .WithMany()
                        .HasForeignKey("WebsiteVisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_lead_website_visitor_rel_website_visitor_id_fkey");
                });

            modelBuilder.Entity("CrmTagRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.CrmLead", null)
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_tag_rel_lead_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmTag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("crm_tag_rel_tag_id_fkey");
                });

            modelBuilder.Entity("DigestDigestResUsersRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.DigestDigest", null)
                        .WithMany()
                        .HasForeignKey("DigestDigestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("digest_digest_res_users_rel_digest_digest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("ResUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("digest_digest_res_users_rel_res_users_id_fkey");
                });

            modelBuilder.Entity("DigestTipResUsersRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.DigestTip", null)
                        .WithMany()
                        .HasForeignKey("DigestTipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("digest_tip_res_users_rel_digest_tip_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("ResUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("digest_tip_res_users_rel_res_users_id_fkey");
                });

            modelBuilder.Entity("EmailTemplateAttachmentRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrAttachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("email_template_attachment_rel_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailTemplate", null)
                        .WithMany()
                        .HasForeignKey("EmailTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("email_template_attachment_rel_email_template_id_fkey");
                });

            modelBuilder.Entity("EmployeeCategoryRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrEmployeeCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("employee_category_rel_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", null)
                        .WithMany()
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("employee_category_rel_emp_id_fkey");
                });

            modelBuilder.Entity("ExpenseTax", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrExpense", null)
                        .WithMany()
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("expense_tax_expense_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTax", null)
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("expense_tax_tax_id_fkey");
                });

            modelBuilder.Entity("FleetServiceTypeFleetVehicleLogContractRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.FleetServiceType", null)
                        .WithMany()
                        .HasForeignKey("FleetServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fleet_service_type_fleet_vehicle_log_fleet_service_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.FleetVehicleLogContract", null)
                        .WithMany()
                        .HasForeignKey("FleetVehicleLogContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fleet_service_type_fleet_vehi_fleet_vehicle_log_contract_i_fkey");
                });

            modelBuilder.Entity("FleetVehicleModelVendor", b =>
                {
                    b.HasOne("Bamboo.Core.Models.FleetVehicleModel", null)
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fleet_vehicle_model_vendors_model_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fleet_vehicle_model_vendors_partner_id_fkey");
                });

            modelBuilder.Entity("FleetVehicleVehicleTagRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.FleetVehicleTag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fleet_vehicle_vehicle_tag_rel_tag_id_fkey");

                    b.HasOne("Bamboo.Core.Models.FleetVehicle", null)
                        .WithMany()
                        .HasForeignKey("VehicleTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fleet_vehicle_vehicle_tag_rel_vehicle_tag_id_fkey");
                });

            modelBuilder.Entity("HrApplicantHrApplicantCategoryRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrApplicantCategory", null)
                        .WithMany()
                        .HasForeignKey("HrApplicantCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_applicant_hr_applicant_categor_hr_applicant_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrApplicant", null)
                        .WithMany()
                        .HasForeignKey("HrApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_applicant_hr_applicant_category_rel_hr_applicant_id_fkey");
                });

            modelBuilder.Entity("HrApplicantHrSkillRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrApplicant", null)
                        .WithMany()
                        .HasForeignKey("HrApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_applicant_hr_skill_rel_hr_applicant_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrSkill", null)
                        .WithMany()
                        .HasForeignKey("HrSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_applicant_hr_skill_rel_hr_skill_id_fkey");
                });

            modelBuilder.Entity("HrApplicantResUsersInterviewersRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrApplicant", null)
                        .WithMany()
                        .HasForeignKey("HrApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_applicant_res_users_interviewers_rel_hr_applicant_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("ResUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_applicant_res_users_interviewers_rel_res_users_id_fkey");
                });

            modelBuilder.Entity("HrDepartmentHrLeaveStressDayRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrDepartment", null)
                        .WithMany()
                        .HasForeignKey("HrDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_department_hr_leave_stress_day_rel_hr_department_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrLeaveStressDay", null)
                        .WithMany()
                        .HasForeignKey("HrLeaveStressDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_department_hr_leave_stress_day_r_hr_leave_stress_day_id_fkey");
                });

            modelBuilder.Entity("HrDepartmentMailChannelRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrDepartment", null)
                        .WithMany()
                        .HasForeignKey("HrDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_department_mail_channel_rel_hr_department_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailChannel", null)
                        .WithMany()
                        .HasForeignKey("MailChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_department_mail_channel_rel_mail_channel_id_fkey");
                });

            modelBuilder.Entity("HrEmployeeHrLeaveAllocationRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrEmployee", null)
                        .WithMany()
                        .HasForeignKey("HrEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_employee_hr_leave_allocation_rel_hr_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrLeaveAllocation", null)
                        .WithMany()
                        .HasForeignKey("HrLeaveAllocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_employee_hr_leave_allocation_rel_hr_leave_allocation_id_fkey");
                });

            modelBuilder.Entity("HrEmployeeHrLeaveRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrEmployee", null)
                        .WithMany()
                        .HasForeignKey("HrEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_employee_hr_leave_rel_hr_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrLeave", null)
                        .WithMany()
                        .HasForeignKey("HrLeaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_employee_hr_leave_rel_hr_leave_id_fkey");
                });

            modelBuilder.Entity("HrEmployeeHrPlanWizardRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrPlanWizard", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_employee_hr_plan_wizard_rel_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrEmployee", null)
                        .WithMany()
                        .HasForeignKey("PlanWizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_employee_hr_plan_wizard_rel_plan_wizard_id_fkey");
                });

            modelBuilder.Entity("HrEmployeeHrSkillRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrEmployee", null)
                        .WithMany()
                        .HasForeignKey("HrEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_employee_hr_skill_rel_hr_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrSkill", null)
                        .WithMany()
                        .HasForeignKey("HrSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_employee_hr_skill_rel_hr_skill_id_fkey");
                });

            modelBuilder.Entity("HrEmployeePosConfigRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrEmployee", null)
                        .WithMany()
                        .HasForeignKey("HrEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_employee_pos_config_rel_hr_employee_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PosConfig", null)
                        .WithMany()
                        .HasForeignKey("PosConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_employee_pos_config_rel_pos_config_id_fkey");
                });

            modelBuilder.Entity("HrExpenseApproveDuplicateHrExpenseSheetRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrExpenseApproveDuplicate", null)
                        .WithMany()
                        .HasForeignKey("HrExpenseApproveDuplicateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_expense_approve_duplicate__hr_expense_approve_duplicate_fkey");

                    b.HasOne("Bamboo.Core.Models.HrExpenseSheet", null)
                        .WithMany()
                        .HasForeignKey("HrExpenseSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_expense_approve_duplicate_hr_expens_hr_expense_sheet_id_fkey");
                });

            modelBuilder.Entity("HrExpenseHrExpenseApproveDuplicateRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrExpenseApproveDuplicate", null)
                        .WithMany()
                        .HasForeignKey("HrExpenseApproveDuplicateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_expense_hr_expense_approve_hr_expense_approve_duplicate_fkey");

                    b.HasOne("Bamboo.Core.Models.HrExpense", null)
                        .WithMany()
                        .HasForeignKey("HrExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_expense_hr_expense_approve_duplicate_rel_hr_expense_id_fkey");
                });

            modelBuilder.Entity("HrExpenseHrExpenseRefuseWizardRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrExpense", null)
                        .WithMany()
                        .HasForeignKey("HrExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_expense_hr_expense_refuse_wizard_rel_hr_expense_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrExpenseRefuseWizard", null)
                        .WithMany()
                        .HasForeignKey("HrExpenseRefuseWizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_expense_hr_expense_refuse_w_hr_expense_refuse_wizard_id_fkey");
                });

            modelBuilder.Entity("HrJobExtendedInterviewerResUser", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrJob", null)
                        .WithMany()
                        .HasForeignKey("HrJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_job_extended_interviewer_res_users_hr_job_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("ResUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_job_extended_interviewer_res_users_res_users_id_fkey");
                });

            modelBuilder.Entity("HrJobHrRecruitmentStageRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrJob", null)
                        .WithMany()
                        .HasForeignKey("HrJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_job_hr_recruitment_stage_rel_hr_job_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrRecruitmentStage", null)
                        .WithMany()
                        .HasForeignKey("HrRecruitmentStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_job_hr_recruitment_stage_rel_hr_recruitment_stage_id_fkey");
                });

            modelBuilder.Entity("HrJobResUsersRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrJob", null)
                        .WithMany()
                        .HasForeignKey("HrJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_job_res_users_rel_hr_job_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("ResUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hr_job_res_users_rel_res_users_id_fkey");
                });

            modelBuilder.Entity("IapAccountResCompanyRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IapAccount", null)
                        .WithMany()
                        .HasForeignKey("IapAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("iap_account_res_company_rel_iap_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("ResCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("iap_account_res_company_rel_res_company_id_fkey");
                });

            modelBuilder.Entity("IrActServerGroupRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrActServer", null)
                        .WithMany()
                        .HasForeignKey("ActId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ir_act_server_group_rel_act_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResGroup", null)
                        .WithMany()
                        .HasForeignKey("Gid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ir_act_server_group_rel_gid_fkey");
                });

            modelBuilder.Entity("IrActServerResPartnerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrActServer", null)
                        .WithMany()
                        .HasForeignKey("IrActServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ir_act_server_res_partner_rel_ir_act_server_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("ResPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ir_act_server_res_partner_rel_res_partner_id_fkey");
                });

            modelBuilder.Entity("IrActWindowGroupRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrActWindow", null)
                        .WithMany()
                        .HasForeignKey("ActId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ir_act_window_group_rel_act_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResGroup", null)
                        .WithMany()
                        .HasForeignKey("Gid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ir_act_window_group_rel_gid_fkey");
                });

            modelBuilder.Entity("IrModelFieldsGroupRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrModelField", null)
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ir_model_fields_group_rel_field_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ir_model_fields_group_rel_group_id_fkey");
                });

            modelBuilder.Entity("IrUiMenuGroupRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResGroup", null)
                        .WithMany()
                        .HasForeignKey("Gid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ir_ui_menu_group_rel_gid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrUiMenu", null)
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ir_ui_menu_group_rel_menu_id_fkey");
                });

            modelBuilder.Entity("IrUiViewGroupRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ir_ui_view_group_rel_group_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrUiView", null)
                        .WithMany()
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ir_ui_view_group_rel_view_id_fkey");
                });

            modelBuilder.Entity("JobFavoriteUserRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrJob", null)
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("job_favorite_user_rel_job_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("job_favorite_user_rel_user_id_fkey");
                });

            modelBuilder.Entity("JournalAccountControlRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountAccount", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("journal_account_control_rel_account_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountJournal", null)
                        .WithMany()
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("journal_account_control_rel_journal_id_fkey");
                });

            modelBuilder.Entity("LotLabelLayoutStockPickingRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.LotLabelLayout", null)
                        .WithMany()
                        .HasForeignKey("LotLabelLayoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("lot_label_layout_stock_picking_rel_lot_label_layout_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPicking", null)
                        .WithMany()
                        .HasForeignKey("StockPickingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("lot_label_layout_stock_picking_rel_stock_picking_id_fkey");
                });

            modelBuilder.Entity("LunchAlertLunchLocationRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.LunchAlert", null)
                        .WithMany()
                        .HasForeignKey("LunchAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("lunch_alert_lunch_location_rel_lunch_alert_id_fkey");

                    b.HasOne("Bamboo.Core.Models.LunchLocation", null)
                        .WithMany()
                        .HasForeignKey("LunchLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("lunch_alert_lunch_location_rel_lunch_location_id_fkey");
                });

            modelBuilder.Entity("LunchLocationLunchSupplierRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.LunchLocation", null)
                        .WithMany()
                        .HasForeignKey("LunchLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("lunch_location_lunch_supplier_rel_lunch_location_id_fkey");

                    b.HasOne("Bamboo.Core.Models.LunchSupplier", null)
                        .WithMany()
                        .HasForeignKey("LunchSupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("lunch_location_lunch_supplier_rel_lunch_supplier_id_fkey");
                });

            modelBuilder.Entity("LunchOrderTopping", b =>
                {
                    b.HasOne("Bamboo.Core.Models.LunchOrder", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("lunch_order_topping_order_id_fkey");

                    b.HasOne("Bamboo.Core.Models.LunchTopping", null)
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("lunch_order_topping_topping_id_fkey");
                });

            modelBuilder.Entity("LunchProductFavoriteUserRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.LunchProduct", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("lunch_product_favorite_user_rel_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("lunch_product_favorite_user_rel_user_id_fkey");
                });

            modelBuilder.Entity("MailActivityRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailActivityType", null)
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_activity_rel_activity_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailActivityType", null)
                        .WithMany()
                        .HasForeignKey("RecommendedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_activity_rel_recommended_id_fkey");
                });

            modelBuilder.Entity("MailActivityTypeMailTemplateRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailActivityType", null)
                        .WithMany()
                        .HasForeignKey("MailActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_activity_type_mail_template_rel_mail_activity_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailTemplate", null)
                        .WithMany()
                        .HasForeignKey("MailTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_activity_type_mail_template_rel_mail_template_id_fkey");
                });

            modelBuilder.Entity("MailChannelResGroupsRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailChannel", null)
                        .WithMany()
                        .HasForeignKey("MailChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_channel_res_groups_rel_mail_channel_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResGroup", null)
                        .WithMany()
                        .HasForeignKey("ResGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_channel_res_groups_rel_res_groups_id_fkey");
                });

            modelBuilder.Entity("MailComposeMessageIrAttachmentsRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrAttachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_compose_message_ir_attachments_rel_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailComposeMessage", null)
                        .WithMany()
                        .HasForeignKey("WizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_compose_message_ir_attachments_rel_wizard_id_fkey");
                });

            modelBuilder.Entity("MailComposeMessageResPartnerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_compose_message_res_partner_rel_partner_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailComposeMessage", null)
                        .WithMany()
                        .HasForeignKey("WizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_compose_message_res_partner_rel_wizard_id_fkey");
                });

            modelBuilder.Entity("MailFollowersMailMessageSubtypeRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailFollower", null)
                        .WithMany()
                        .HasForeignKey("MailFollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_followers_mail_message_subtype_rel_mail_followers_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMessageSubtype", null)
                        .WithMany()
                        .HasForeignKey("MailMessageSubtypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_followers_mail_message_subtyp_mail_message_subtype_id_fkey");
                });

            modelBuilder.Entity("MailMailResPartnerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailMail", null)
                        .WithMany()
                        .HasForeignKey("MailMailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_mail_res_partner_rel_mail_mail_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("ResPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_mail_res_partner_rel_res_partner_id_fkey");
                });

            modelBuilder.Entity("MailMessageResPartnerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailMessage", null)
                        .WithMany()
                        .HasForeignKey("MailMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_message_res_partner_rel_mail_message_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("ResPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_message_res_partner_rel_res_partner_id_fkey");
                });

            modelBuilder.Entity("MailMessageResPartnerStarredRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailMessage", null)
                        .WithMany()
                        .HasForeignKey("MailMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_message_res_partner_starred_rel_mail_message_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("ResPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_message_res_partner_starred_rel_res_partner_id_fkey");
                });

            modelBuilder.Entity("MailNotificationMailResendMessageRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailNotification", null)
                        .WithMany()
                        .HasForeignKey("MailNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_notification_mail_resend_message_mail_notification_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailResendMessage", null)
                        .WithMany()
                        .HasForeignKey("MailResendMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_notification_mail_resend_messa_mail_resend_message_id_fkey");
                });

            modelBuilder.Entity("MailTemplateMailTemplateResetRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailTemplate", null)
                        .WithMany()
                        .HasForeignKey("MailTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_template_mail_template_reset_rel_mail_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailTemplateReset", null)
                        .WithMany()
                        .HasForeignKey("MailTemplateResetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_template_mail_template_reset_r_mail_template_reset_id_fkey");
                });

            modelBuilder.Entity("MailWizardInviteResPartnerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MailWizardInvite", null)
                        .WithMany()
                        .HasForeignKey("MailWizardInviteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_wizard_invite_res_partner_rel_mail_wizard_invite_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("ResPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mail_wizard_invite_res_partner_rel_res_partner_id_fkey");
                });

            modelBuilder.Entity("MaintenanceTeamUsersRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MaintenanceTeam", null)
                        .WithMany()
                        .HasForeignKey("MaintenanceTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("maintenance_team_users_rel_maintenance_team_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("ResUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("maintenance_team_users_rel_res_users_id_fkey");
                });

            modelBuilder.Entity("MeetingCategoryRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.CalendarEvent", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("meeting_category_rel_event_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CalendarEventType", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("meeting_category_rel_type_id_fkey");
                });

            modelBuilder.Entity("MergeOpportunityRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.CrmMergeOpportunity", null)
                        .WithMany()
                        .HasForeignKey("MergeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("merge_opportunity_rel_merge_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmLead", null)
                        .WithMany()
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("merge_opportunity_rel_opportunity_id_fkey");
                });

            modelBuilder.Entity("MessageAttachmentRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrAttachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("message_attachment_rel_attachment_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MailMessage", null)
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("message_attachment_rel_message_id_fkey");
                });

            modelBuilder.Entity("MrpBomByproductProductTemplateAttributeValueRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MrpBomByproduct", null)
                        .WithMany()
                        .HasForeignKey("MrpBomByproductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mrp_bom_byproduct_product_template_at_mrp_bom_byproduct_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplateAttributeValue", null)
                        .WithMany()
                        .HasForeignKey("ProductTemplateAttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("mrp_bom_byproduct_product_tem_product_template_attribute_v_fkey");
                });

            modelBuilder.Entity("MrpBomLineProductTemplateAttributeValueRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MrpBomLine", null)
                        .WithMany()
                        .HasForeignKey("MrpBomLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mrp_bom_line_product_template_attribute_va_mrp_bom_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplateAttributeValue", null)
                        .WithMany()
                        .HasForeignKey("ProductTemplateAttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("mrp_bom_line_product_template_product_template_attribute_v_fkey");
                });

            modelBuilder.Entity("MrpConsumptionWarningMrpProductionRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MrpConsumptionWarning", null)
                        .WithMany()
                        .HasForeignKey("MrpConsumptionWarningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mrp_consumption_warning_mrp_pro_mrp_consumption_warning_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpProduction", null)
                        .WithMany()
                        .HasForeignKey("MrpProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mrp_consumption_warning_mrp_production_r_mrp_production_id_fkey");
                });

            modelBuilder.Entity("MrpProductionMrpProductionBackorderRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MrpProductionBackorder", null)
                        .WithMany()
                        .HasForeignKey("MrpProductionBackorderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mrp_production_mrp_production__mrp_production_backorder_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpProduction", null)
                        .WithMany()
                        .HasForeignKey("MrpProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mrp_production_mrp_production_backorder__mrp_production_id_fkey");
                });

            modelBuilder.Entity("MrpProductionProductionRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MrpImmediateProduction", null)
                        .WithMany()
                        .HasForeignKey("MrpImmediateProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mrp_production_production_rel_mrp_immediate_production_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpProduction", null)
                        .WithMany()
                        .HasForeignKey("MrpProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mrp_production_production_rel_mrp_production_id_fkey");
                });

            modelBuilder.Entity("MrpRoutingWorkcenterDependenciesRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MrpRoutingWorkcenter", null)
                        .WithMany()
                        .HasForeignKey("BlockedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mrp_routing_workcenter_dependencies_rel_blocked_by_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpRoutingWorkcenter", null)
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mrp_routing_workcenter_dependencies_rel_operation_id_fkey");
                });

            modelBuilder.Entity("MrpRoutingWorkcenterProductTemplateAttributeValueRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MrpRoutingWorkcenter", null)
                        .WithMany()
                        .HasForeignKey("MrpRoutingWorkcenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mrp_routing_workcenter_product_t_mrp_routing_workcenter_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplateAttributeValue", null)
                        .WithMany()
                        .HasForeignKey("ProductTemplateAttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("mrp_routing_workcenter_produc_product_template_attribute_v_fkey");
                });

            modelBuilder.Entity("MrpWorkcenterAlternativeRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MrpWorkcenter", null)
                        .WithMany()
                        .HasForeignKey("AlternativeWorkcenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mrp_workcenter_alternative_rel_alternative_workcenter_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpWorkcenter", null)
                        .WithMany()
                        .HasForeignKey("WorkcenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mrp_workcenter_alternative_rel_workcenter_id_fkey");
                });

            modelBuilder.Entity("MrpWorkcenterMrpWorkcenterTagRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MrpWorkcenter", null)
                        .WithMany()
                        .HasForeignKey("MrpWorkcenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mrp_workcenter_mrp_workcenter_tag_rel_mrp_workcenter_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpWorkcenterTag", null)
                        .WithMany()
                        .HasForeignKey("MrpWorkcenterTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mrp_workcenter_mrp_workcenter_tag_re_mrp_workcenter_tag_id_fkey");
                });

            modelBuilder.Entity("MrpWorkorderDependenciesRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.MrpWorkorder", null)
                        .WithMany()
                        .HasForeignKey("BlockedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mrp_workorder_dependencies_rel_blocked_by_id_fkey");

                    b.HasOne("Bamboo.Core.Models.MrpWorkorder", null)
                        .WithMany()
                        .HasForeignKey("WorkorderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mrp_workorder_dependencies_rel_workorder_id_fkey");
                });

            modelBuilder.Entity("NoteStageRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.NoteNote", null)
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("note_stage_rel_note_id_fkey");

                    b.HasOne("Bamboo.Core.Models.NoteStage", null)
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("note_stage_rel_stage_id_fkey");
                });

            modelBuilder.Entity("NoteTagsRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.NoteNote", null)
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("note_tags_rel_note_id_fkey");

                    b.HasOne("Bamboo.Core.Models.NoteTag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("note_tags_rel_tag_id_fkey");
                });

            modelBuilder.Entity("PaymentCountryRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResCountry", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("payment_country_rel_country_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PaymentProvider", null)
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("payment_country_rel_payment_id_fkey");
                });

            modelBuilder.Entity("PaymentIconPaymentProviderRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.PaymentIcon", null)
                        .WithMany()
                        .HasForeignKey("PaymentIconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("payment_icon_payment_provider_rel_payment_icon_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PaymentProvider", null)
                        .WithMany()
                        .HasForeignKey("PaymentProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("payment_icon_payment_provider_rel_payment_provider_id_fkey");
                });

            modelBuilder.Entity("PickingLabelTypeStockPickingRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.PickingLabelType", null)
                        .WithMany()
                        .HasForeignKey("PickingLabelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("picking_label_type_stock_picking_rel_picking_label_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPicking", null)
                        .WithMany()
                        .HasForeignKey("StockPickingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("picking_label_type_stock_picking_rel_stock_picking_id_fkey");
                });

            modelBuilder.Entity("PortalShareResPartnerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.PortalShare", null)
                        .WithMany()
                        .HasForeignKey("PortalShareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("portal_share_res_partner_rel_portal_share_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("ResPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("portal_share_res_partner_rel_res_partner_id_fkey");
                });

            modelBuilder.Entity("PortalWizardResPartnerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.PortalWizard", null)
                        .WithMany()
                        .HasForeignKey("PortalWizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("portal_wizard_res_partner_rel_portal_wizard_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("ResPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("portal_wizard_res_partner_rel_res_partner_id_fkey");
                });

            modelBuilder.Entity("PosBillPosConfigRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.PosBill", null)
                        .WithMany()
                        .HasForeignKey("PosBillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pos_bill_pos_config_rel_pos_bill_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PosConfig", null)
                        .WithMany()
                        .HasForeignKey("PosConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pos_bill_pos_config_rel_pos_config_id_fkey");
                });

            modelBuilder.Entity("PosCategoryPosConfigRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.PosCategory", null)
                        .WithMany()
                        .HasForeignKey("PosCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pos_category_pos_config_rel_pos_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PosConfig", null)
                        .WithMany()
                        .HasForeignKey("PosConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pos_category_pos_config_rel_pos_config_id_fkey");
                });

            modelBuilder.Entity("PosCategoryResConfigSettingsRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.PosCategory", null)
                        .WithMany()
                        .HasForeignKey("PosCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pos_category_res_config_settings_rel_pos_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResConfigSetting", null)
                        .WithMany()
                        .HasForeignKey("ResConfigSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pos_category_res_config_settings_re_res_config_settings_id_fkey");
                });

            modelBuilder.Entity("PosConfigPosPaymentMethodRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.PosConfig", null)
                        .WithMany()
                        .HasForeignKey("PosConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pos_config_pos_payment_method_rel_pos_config_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PosPaymentMethod", null)
                        .WithMany()
                        .HasForeignKey("PosPaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pos_config_pos_payment_method_rel_pos_payment_method_id_fkey");
                });

            modelBuilder.Entity("PosConfigProductPricelistRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.PosConfig", null)
                        .WithMany()
                        .HasForeignKey("PosConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pos_config_product_pricelist_rel_pos_config_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductPricelist", null)
                        .WithMany()
                        .HasForeignKey("ProductPricelistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pos_config_product_pricelist_rel_product_pricelist_id_fkey");
                });

            modelBuilder.Entity("PosDetailConfig", b =>
                {
                    b.HasOne("Bamboo.Core.Models.PosConfig", null)
                        .WithMany()
                        .HasForeignKey("PosConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pos_detail_configs_pos_config_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PosDetailsWizard", null)
                        .WithMany()
                        .HasForeignKey("PosDetailsWizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pos_detail_configs_pos_details_wizard_id_fkey");
                });

            modelBuilder.Entity("ProductAccessoryRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductProduct", null)
                        .WithMany()
                        .HasForeignKey("DestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_accessory_rel_dest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplate", null)
                        .WithMany()
                        .HasForeignKey("SrcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_accessory_rel_src_id_fkey");
                });

            modelBuilder.Entity("ProductAlternativeRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductTemplate", null)
                        .WithMany()
                        .HasForeignKey("DestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_alternative_rel_dest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplate", null)
                        .WithMany()
                        .HasForeignKey("SrcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_alternative_rel_src_id_fkey");
                });

            modelBuilder.Entity("ProductAttrExclusionValueIdsRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductTemplateAttributeExclusion", null)
                        .WithMany()
                        .HasForeignKey("ProductTemplateAttributeExclusionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_attr_exclusion_value__product_template_attribute_e_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplateAttributeValue", null)
                        .WithMany()
                        .HasForeignKey("ProductTemplateAttributeValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_attr_exclusion_value__product_template_attribute_v_fkey");
                });

            modelBuilder.Entity("ProductAttributeProductTemplateRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductAttribute", null)
                        .WithMany()
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_attribute_product_template_re_product_attribute_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplate", null)
                        .WithMany()
                        .HasForeignKey("ProductTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_attribute_product_template_rel_product_template_id_fkey");
                });

            modelBuilder.Entity("ProductAttributeValueProductTemplateAttributeLineRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductAttributeValue", null)
                        .WithMany()
                        .HasForeignKey("ProductAttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("product_attribute_value_product_product_attribute_value_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplateAttributeLine", null)
                        .WithMany()
                        .HasForeignKey("ProductTemplateAttributeLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_attribute_value_produ_product_template_attribute_l_fkey");
                });

            modelBuilder.Entity("ProductLabelLayoutProductProductRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductLabelLayout", null)
                        .WithMany()
                        .HasForeignKey("ProductLabelLayoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_label_layout_product_produ_product_label_layout_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductProduct", null)
                        .WithMany()
                        .HasForeignKey("ProductProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_label_layout_product_product_re_product_product_id_fkey");
                });

            modelBuilder.Entity("ProductLabelLayoutProductTemplateRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductLabelLayout", null)
                        .WithMany()
                        .HasForeignKey("ProductLabelLayoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_label_layout_product_templ_product_label_layout_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplate", null)
                        .WithMany()
                        .HasForeignKey("ProductTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_label_layout_product_template__product_template_id_fkey");
                });

            modelBuilder.Entity("ProductLabelLayoutStockMoveLineRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductLabelLayout", null)
                        .WithMany()
                        .HasForeignKey("ProductLabelLayoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_label_layout_stock_move_li_product_label_layout_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockMoveLine", null)
                        .WithMany()
                        .HasForeignKey("StockMoveLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_label_layout_stock_move_line_re_stock_move_line_id_fkey");
                });

            modelBuilder.Entity("ProductOptionalRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductTemplate", null)
                        .WithMany()
                        .HasForeignKey("DestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_optional_rel_dest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplate", null)
                        .WithMany()
                        .HasForeignKey("SrcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_optional_rel_src_id_fkey");
                });

            modelBuilder.Entity("ProductPricelistResConfigSettingsRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductPricelist", null)
                        .WithMany()
                        .HasForeignKey("ProductPricelistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_pricelist_res_config_settings_product_pricelist_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResConfigSetting", null)
                        .WithMany()
                        .HasForeignKey("ResConfigSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_pricelist_res_config_settin_res_config_settings_id_fkey");
                });

            modelBuilder.Entity("ProductProductStockTrackConfirmationRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductProduct", null)
                        .WithMany()
                        .HasForeignKey("ProductProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_product_stock_track_confirmatio_product_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockTrackConfirmation", null)
                        .WithMany()
                        .HasForeignKey("StockTrackConfirmationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_product_stock_track_co_stock_track_confirmation_id_fkey");
                });

            modelBuilder.Entity("ProductPublicCategoryProductTemplateRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductPublicCategory", null)
                        .WithMany()
                        .HasForeignKey("ProductPublicCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_public_category_product_product_public_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplate", null)
                        .WithMany()
                        .HasForeignKey("ProductTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_public_category_product_templa_product_template_id_fkey");
                });

            modelBuilder.Entity("ProductReplenishStockRouteRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductReplenish", null)
                        .WithMany()
                        .HasForeignKey("ProductReplenishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_replenish_stock_route_rel_product_replenish_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockRoute", null)
                        .WithMany()
                        .HasForeignKey("StockRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_replenish_stock_route_rel_stock_route_id_fkey");
                });

            modelBuilder.Entity("ProductSupplierTaxesRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductTemplate", null)
                        .WithMany()
                        .HasForeignKey("ProdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_supplier_taxes_rel_prod_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTax", null)
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_supplier_taxes_rel_tax_id_fkey");
                });

            modelBuilder.Entity("ProductSupplierinfoStockReplenishmentInfoRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductSupplierinfo", null)
                        .WithMany()
                        .HasForeignKey("ProductSupplierinfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_supplierinfo_stock_repleni_product_supplierinfo_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockReplenishmentInfo", null)
                        .WithMany()
                        .HasForeignKey("StockReplenishmentInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_supplierinfo_stock_rep_stock_replenishment_info_id_fkey");
                });

            modelBuilder.Entity("ProductTagProductProductRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductProduct", null)
                        .WithMany()
                        .HasForeignKey("ProductProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_tag_product_product_rel_product_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTag", null)
                        .WithMany()
                        .HasForeignKey("ProductTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_tag_product_product_rel_product_tag_id_fkey");
                });

            modelBuilder.Entity("ProductTagProductTemplateRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductTag", null)
                        .WithMany()
                        .HasForeignKey("ProductTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_tag_product_template_rel_product_tag_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplate", null)
                        .WithMany()
                        .HasForeignKey("ProductTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_tag_product_template_rel_product_template_id_fkey");
                });

            modelBuilder.Entity("ProductTaxesRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductTemplate", null)
                        .WithMany()
                        .HasForeignKey("ProdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_taxes_rel_prod_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTax", null)
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_taxes_rel_tax_id_fkey");
                });

            modelBuilder.Entity("ProductTemplateAttributeValueSaleOrderLineRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductTemplateAttributeValue", null)
                        .WithMany()
                        .HasForeignKey("ProductTemplateAttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("product_template_attribute_va_product_template_attribute_v_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrderLine", null)
                        .WithMany()
                        .HasForeignKey("SaleOrderLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_template_attribute_value_sale_o_sale_order_line_id_fkey");
                });

            modelBuilder.Entity("ProductVariantCombination", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductProduct", null)
                        .WithMany()
                        .HasForeignKey("ProductProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("product_variant_combination_product_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProductTemplateAttributeValue", null)
                        .WithMany()
                        .HasForeignKey("ProductTemplateAttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("product_variant_combination_product_template_attribute_val_fkey");
                });

            modelBuilder.Entity("ProjectFavoriteUserRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProjectProject", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("project_favorite_user_rel_project_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("project_favorite_user_rel_user_id_fkey");
                });

            modelBuilder.Entity("ProjectProjectProjectTagsRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProjectProject", null)
                        .WithMany()
                        .HasForeignKey("ProjectProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("project_project_project_tags_rel_project_project_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectTag", null)
                        .WithMany()
                        .HasForeignKey("ProjectTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("project_project_project_tags_rel_project_tags_id_fkey");
                });

            modelBuilder.Entity("ProjectProjectProjectTaskTypeDeleteWizardRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProjectProject", null)
                        .WithMany()
                        .HasForeignKey("ProjectProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("project_project_project_task_type_delet_project_project_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectTaskTypeDeleteWizard", null)
                        .WithMany()
                        .HasForeignKey("ProjectTaskTypeDeleteWizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("project_project_project_task__project_task_type_delete_wiz_fkey");
                });

            modelBuilder.Entity("ProjectShareWizardResPartnerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProjectShareWizard", null)
                        .WithMany()
                        .HasForeignKey("ProjectShareWizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("project_share_wizard_res_partner_r_project_share_wizard_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("ResPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("project_share_wizard_res_partner_rel_res_partner_id_fkey");
                });

            modelBuilder.Entity("ProjectTagsProjectTaskRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProjectTag", null)
                        .WithMany()
                        .HasForeignKey("ProjectTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("project_tags_project_task_rel_project_tags_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectTask", null)
                        .WithMany()
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("project_tags_project_task_rel_project_task_id_fkey");
                });

            modelBuilder.Entity("ProjectTaskTypeProjectTaskTypeDeleteWizardRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProjectTaskTypeDeleteWizard", null)
                        .WithMany()
                        .HasForeignKey("ProjectTaskTypeDeleteWizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("project_task_type_project_tas_project_task_type_delete_wiz_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectTaskType", null)
                        .WithMany()
                        .HasForeignKey("ProjectTaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("project_task_type_project_task_type_d_project_task_type_id_fkey");
                });

            modelBuilder.Entity("ProjectTaskTypeRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProjectProject", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("project_task_type_rel_project_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectTaskType", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("project_task_type_rel_type_id_fkey");
                });

            modelBuilder.Entity("PurchaseOrderStockPickingRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.PurchaseOrder", null)
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("purchase_order_stock_picking_rel_purchase_order_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPicking", null)
                        .WithMany()
                        .HasForeignKey("StockPickingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("purchase_order_stock_picking_rel_stock_picking_id_fkey");
                });

            modelBuilder.Entity("RelModulesLangexport", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrModuleModule", null)
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("rel_modules_langexport_module_id_fkey");

                    b.HasOne("Bamboo.Core.Models.BaseLanguageExport", null)
                        .WithMany()
                        .HasForeignKey("WizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("rel_modules_langexport_wiz_id_fkey");
                });

            modelBuilder.Entity("RelServerAction", b =>
                {
                    b.HasOne("Bamboo.Core.Models.IrActServer", null)
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("rel_server_actions_action_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrActServer", null)
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("rel_server_actions_server_id_fkey");
                });

            modelBuilder.Entity("RepairFeeLineTax", b =>
                {
                    b.HasOne("Bamboo.Core.Models.RepairFee", null)
                        .WithMany()
                        .HasForeignKey("RepairFeeLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("repair_fee_line_tax_repair_fee_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTax", null)
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("repair_fee_line_tax_tax_id_fkey");
                });

            modelBuilder.Entity("RepairOperationLineTax", b =>
                {
                    b.HasOne("Bamboo.Core.Models.RepairLine", null)
                        .WithMany()
                        .HasForeignKey("RepairOperationLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("repair_operation_line_tax_repair_operation_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.AccountTax", null)
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("repair_operation_line_tax_tax_id_fkey");
                });

            modelBuilder.Entity("RepairOrderRepairTagsRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.RepairOrder", null)
                        .WithMany()
                        .HasForeignKey("RepairOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("repair_order_repair_tags_rel_repair_order_id_fkey");

                    b.HasOne("Bamboo.Core.Models.RepairTag", null)
                        .WithMany()
                        .HasForeignKey("RepairTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("repair_order_repair_tags_rel_repair_tags_id_fkey");
                });

            modelBuilder.Entity("ResCompanyUsersRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResCompany", null)
                        .WithMany()
                        .HasForeignKey("Cid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("res_company_users_rel_cid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("res_company_users_rel_user_id_fkey");
                });

            modelBuilder.Entity("ResCountryGroupPricelistRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductPricelist", null)
                        .WithMany()
                        .HasForeignKey("PricelistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("res_country_group_pricelist_rel_pricelist_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountryGroup", null)
                        .WithMany()
                        .HasForeignKey("ResCountryGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("res_country_group_pricelist_rel_res_country_group_id_fkey");
                });

            modelBuilder.Entity("ResCountryResCountryGroupRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResCountryGroup", null)
                        .WithMany()
                        .HasForeignKey("ResCountryGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("res_country_res_country_group_rel_res_country_group_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResCountry", null)
                        .WithMany()
                        .HasForeignKey("ResCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("res_country_res_country_group_rel_res_country_id_fkey");
                });

            modelBuilder.Entity("ResGroupsImpliedRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResGroup", null)
                        .WithMany()
                        .HasForeignKey("Gid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("res_groups_implied_rel_gid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResGroup", null)
                        .WithMany()
                        .HasForeignKey("Hid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("res_groups_implied_rel_hid_fkey");
                });

            modelBuilder.Entity("ResGroupsReportRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResGroup", null)
                        .WithMany()
                        .HasForeignKey("Gid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("res_groups_report_rel_gid_fkey");

                    b.HasOne("Bamboo.Core.Models.IrActReportXml", null)
                        .WithMany()
                        .HasForeignKey("Uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("res_groups_report_rel_uid_fkey");
                });

            modelBuilder.Entity("ResGroupsSpreadsheetDashboardRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResGroup", null)
                        .WithMany()
                        .HasForeignKey("ResGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("res_groups_spreadsheet_dashboard_rel_res_groups_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SpreadsheetDashboard", null)
                        .WithMany()
                        .HasForeignKey("SpreadsheetDashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("res_groups_spreadsheet_dashboard__spreadsheet_dashboard_id_fkey");
                });

            modelBuilder.Entity("ResGroupsUsersRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResGroup", null)
                        .WithMany()
                        .HasForeignKey("Gid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("res_groups_users_rel_gid_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("Uid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("res_groups_users_rel_uid_fkey");
                });

            modelBuilder.Entity("ResLangInstallRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResLang", null)
                        .WithMany()
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("res_lang_install_rel_lang_id_fkey");

                    b.HasOne("Bamboo.Core.Models.BaseLanguageInstall", null)
                        .WithMany()
                        .HasForeignKey("LanguageWizardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("res_lang_install_rel_language_wizard_id_fkey");
                });

            modelBuilder.Entity("ResPartnerResPartnerCategoryRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResPartnerCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("res_partner_res_partner_category_rel_category_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("res_partner_res_partner_category_rel_partner_id_fkey");
                });

            modelBuilder.Entity("RuleGroupRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("rule_group_rel_group_id_fkey");

                    b.HasOne("Bamboo.Core.Models.IrRule", null)
                        .WithMany()
                        .HasForeignKey("RuleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("rule_group_rel_rule_group_id_fkey");
                });

            modelBuilder.Entity("SaleAdvancePaymentInvSaleOrderRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.SaleAdvancePaymentInv", null)
                        .WithMany()
                        .HasForeignKey("SaleAdvancePaymentInvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sale_advance_payment_inv_sale__sale_advance_payment_inv_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrder", null)
                        .WithMany()
                        .HasForeignKey("SaleOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sale_advance_payment_inv_sale_order_rel_sale_order_id_fkey");
                });

            modelBuilder.Entity("SaleOrderLineInvoiceRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.AccountMoveLine", null)
                        .WithMany()
                        .HasForeignKey("InvoiceLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sale_order_line_invoice_rel_invoice_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SaleOrderLine", null)
                        .WithMany()
                        .HasForeignKey("OrderLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sale_order_line_invoice_rel_order_line_id_fkey");
                });

            modelBuilder.Entity("SaleOrderTagRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.SaleOrder", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sale_order_tag_rel_order_id_fkey");

                    b.HasOne("Bamboo.Core.Models.CrmTag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sale_order_tag_rel_tag_id_fkey");
                });

            modelBuilder.Entity("SaleOrderTransactionRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.SaleOrder", null)
                        .WithMany()
                        .HasForeignKey("SaleOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sale_order_transaction_rel_sale_order_id_fkey");

                    b.HasOne("Bamboo.Core.Models.PaymentTransaction", null)
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sale_order_transaction_rel_transaction_id_fkey");
                });

            modelBuilder.Entity("SmsTemplateSmsTemplateResetRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.SmsTemplate", null)
                        .WithMany()
                        .HasForeignKey("SmsTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sms_template_sms_template_reset_rel_sms_template_id_fkey");

                    b.HasOne("Bamboo.Core.Models.SmsTemplateReset", null)
                        .WithMany()
                        .HasForeignKey("SmsTemplateResetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("sms_template_sms_template_reset_rel_sms_template_reset_id_fkey");
                });

            modelBuilder.Entity("StockConflictQuantRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.StockInventoryConflict", null)
                        .WithMany()
                        .HasForeignKey("StockInventoryConflictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_conflict_quant_rel_stock_inventory_conflict_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockQuant", null)
                        .WithMany()
                        .HasForeignKey("StockQuantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_conflict_quant_rel_stock_quant_id_fkey");
                });

            modelBuilder.Entity("StockInventoryAdjustmentNameStockQuantRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.StockInventoryAdjustmentName", null)
                        .WithMany()
                        .HasForeignKey("StockInventoryAdjustmentNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_inventory_adjustment_na_stock_inventory_adjustment_n_fkey");

                    b.HasOne("Bamboo.Core.Models.StockQuant", null)
                        .WithMany()
                        .HasForeignKey("StockQuantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_inventory_adjustment_name_stock_quant_stock_quant_id_fkey");
                });

            modelBuilder.Entity("StockInventoryConflictStockQuantRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.StockInventoryConflict", null)
                        .WithMany()
                        .HasForeignKey("StockInventoryConflictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_inventory_conflict_stock_stock_inventory_conflict_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockQuant", null)
                        .WithMany()
                        .HasForeignKey("StockQuantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_inventory_conflict_stock_quant_rel_stock_quant_id_fkey");
                });

            modelBuilder.Entity("StockInventoryWarningStockQuantRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.StockInventoryWarning", null)
                        .WithMany()
                        .HasForeignKey("StockInventoryWarningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_inventory_warning_stock_q_stock_inventory_warning_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockQuant", null)
                        .WithMany()
                        .HasForeignKey("StockQuantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_inventory_warning_stock_quant_rel_stock_quant_id_fkey");
                });

            modelBuilder.Entity("StockMoveLineConsumeRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.StockMoveLine", null)
                        .WithMany()
                        .HasForeignKey("ConsumeLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_move_line_consume_rel_consume_line_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockMoveLine", null)
                        .WithMany()
                        .HasForeignKey("ProduceLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_move_line_consume_rel_produce_line_id_fkey");
                });

            modelBuilder.Entity("StockMoveMoveRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.StockMove", null)
                        .WithMany()
                        .HasForeignKey("MoveDestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_move_move_rel_move_dest_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockMove", null)
                        .WithMany()
                        .HasForeignKey("MoveOrigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_move_move_rel_move_orig_id_fkey");
                });

            modelBuilder.Entity("StockNotificationProductPartnerRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductProduct", null)
                        .WithMany()
                        .HasForeignKey("ProductProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_notification_product_partner_rel_product_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResPartner", null)
                        .WithMany()
                        .HasForeignKey("ResPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_notification_product_partner_rel_res_partner_id_fkey");
                });

            modelBuilder.Entity("StockOrderpointSnoozeStockWarehouseOrderpointRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.StockOrderpointSnooze", null)
                        .WithMany()
                        .HasForeignKey("StockOrderpointSnoozeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_orderpoint_snooze_stock_w_stock_orderpoint_snooze_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockWarehouseOrderpoint", null)
                        .WithMany()
                        .HasForeignKey("StockWarehouseOrderpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_orderpoint_snooze_stock_stock_warehouse_orderpoint_i_fkey");
                });

            modelBuilder.Entity("StockPackageTypeStockPutawayRuleRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.StockPackageType", null)
                        .WithMany()
                        .HasForeignKey("StockPackageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_package_type_stock_putaway_rul_stock_package_type_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPutawayRule", null)
                        .WithMany()
                        .HasForeignKey("StockPutawayRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_package_type_stock_putaway_rul_stock_putaway_rule_id_fkey");
                });

            modelBuilder.Entity("StockPickingBackorderRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.StockBackorderConfirmation", null)
                        .WithMany()
                        .HasForeignKey("StockBackorderConfirmationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_picking_backorder_rel_stock_backorder_confirmation_i_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPicking", null)
                        .WithMany()
                        .HasForeignKey("StockPickingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_picking_backorder_rel_stock_picking_id_fkey");
                });

            modelBuilder.Entity("StockPickingSmsRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ConfirmStockSm", null)
                        .WithMany()
                        .HasForeignKey("ConfirmStockSmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_picking_sms_rel_confirm_stock_sms_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPicking", null)
                        .WithMany()
                        .HasForeignKey("StockPickingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_picking_sms_rel_stock_picking_id_fkey");
                });

            modelBuilder.Entity("StockPickingTransferRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.StockImmediateTransfer", null)
                        .WithMany()
                        .HasForeignKey("StockImmediateTransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_picking_transfer_rel_stock_immediate_transfer_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockPicking", null)
                        .WithMany()
                        .HasForeignKey("StockPickingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_picking_transfer_rel_stock_picking_id_fkey");
                });

            modelBuilder.Entity("StockQuantStockRequestCountRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.StockQuant", null)
                        .WithMany()
                        .HasForeignKey("StockQuantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_quant_stock_request_count_rel_stock_quant_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockRequestCount", null)
                        .WithMany()
                        .HasForeignKey("StockRequestCountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_quant_stock_request_count_rel_stock_request_count_id_fkey");
                });

            modelBuilder.Entity("StockQuantStockTrackConfirmationRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.StockQuant", null)
                        .WithMany()
                        .HasForeignKey("StockQuantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_quant_stock_track_confirmation_rel_stock_quant_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockTrackConfirmation", null)
                        .WithMany()
                        .HasForeignKey("StockTrackConfirmationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_quant_stock_track_confir_stock_track_confirmation_id_fkey");
                });

            modelBuilder.Entity("StockRouteCateg", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductCategory", null)
                        .WithMany()
                        .HasForeignKey("CategId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_route_categ_categ_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockRoute", null)
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_route_categ_route_id_fkey");
                });

            modelBuilder.Entity("StockRouteMove", b =>
                {
                    b.HasOne("Bamboo.Core.Models.StockMove", null)
                        .WithMany()
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_route_move_move_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockRoute", null)
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_route_move_route_id_fkey");
                });

            modelBuilder.Entity("StockRoutePackaging", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductPackaging", null)
                        .WithMany()
                        .HasForeignKey("PackagingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_route_packaging_packaging_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockRoute", null)
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_route_packaging_route_id_fkey");
                });

            modelBuilder.Entity("StockRouteProduct", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProductTemplate", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_route_product_product_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockRoute", null)
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_route_product_route_id_fkey");
                });

            modelBuilder.Entity("StockRouteStockRulesReportRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.StockRoute", null)
                        .WithMany()
                        .HasForeignKey("StockRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_route_stock_rules_report_rel_stock_route_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockRulesReport", null)
                        .WithMany()
                        .HasForeignKey("StockRulesReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_route_stock_rules_report_rel_stock_rules_report_id_fkey");
                });

            modelBuilder.Entity("StockRouteWarehouse", b =>
                {
                    b.HasOne("Bamboo.Core.Models.StockRoute", null)
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_route_warehouse_route_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockWarehouse", null)
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_route_warehouse_warehouse_id_fkey");
                });

            modelBuilder.Entity("StockRulesReportStockWarehouseRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.StockRulesReport", null)
                        .WithMany()
                        .HasForeignKey("StockRulesReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_rules_report_stock_warehouse_r_stock_rules_report_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockWarehouse", null)
                        .WithMany()
                        .HasForeignKey("StockWarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_rules_report_stock_warehouse_rel_stock_warehouse_id_fkey");
                });

            modelBuilder.Entity("StockWhResupplyTable", b =>
                {
                    b.HasOne("Bamboo.Core.Models.StockWarehouse", null)
                        .WithMany()
                        .HasForeignKey("SuppliedWhId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_wh_resupply_table_supplied_wh_id_fkey");

                    b.HasOne("Bamboo.Core.Models.StockWarehouse", null)
                        .WithMany()
                        .HasForeignKey("SupplierWhId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("stock_wh_resupply_table_supplier_wh_id_fkey");
                });

            modelBuilder.Entity("SummaryEmpRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.HrEmployee", null)
                        .WithMany()
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("summary_emp_rel_emp_id_fkey");

                    b.HasOne("Bamboo.Core.Models.HrHolidaysSummaryEmployee", null)
                        .WithMany()
                        .HasForeignKey("SumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("summary_emp_rel_sum_id_fkey");
                });

            modelBuilder.Entity("TaskDependenciesRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ProjectTask", null)
                        .WithMany()
                        .HasForeignKey("DependsOnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("task_dependencies_rel_depends_on_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ProjectTask", null)
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("task_dependencies_rel_task_id_fkey");
                });

            modelBuilder.Entity("TeamFavoriteUserRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.CrmTeam", null)
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("team_favorite_user_rel_team_id_fkey");

                    b.HasOne("Bamboo.Core.Models.ResUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("team_favorite_user_rel_user_id_fkey");
                });

            modelBuilder.Entity("UtmTagRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.UtmTag", null)
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("utm_tag_rel_campaign_id_fkey");

                    b.HasOne("Bamboo.Core.Models.UtmCampaign", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("utm_tag_rel_tag_id_fkey");
                });

            modelBuilder.Entity("WebsiteLangRel", b =>
                {
                    b.HasOne("Bamboo.Core.Models.ResLang", null)
                        .WithMany()
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("website_lang_rel_lang_id_fkey");

                    b.HasOne("Bamboo.Core.Models.Website", null)
                        .WithMany()
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("website_lang_rel_website_id_fkey");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAccount", b =>
                {
                    b.Navigation("AccountAccruedOrdersWizards");

                    b.Navigation("AccountAnalyticLines");

                    b.Navigation("AccountAssetCategoryAccountAssets");

                    b.Navigation("AccountAssetCategoryAccountDepreciationExpenses");

                    b.Navigation("AccountAssetCategoryAccountDepreciations");

                    b.Navigation("AccountAutomaticEntryWizards");

                    b.Navigation("AccountFiscalPositionAccountAccountDests");

                    b.Navigation("AccountFiscalPositionAccountAccountSrcs");

                    b.Navigation("AccountJournalDefaultAccounts");

                    b.Navigation("AccountJournalLossAccounts");

                    b.Navigation("AccountJournalProfitAccounts");

                    b.Navigation("AccountJournalSuspenseAccounts");

                    b.Navigation("AccountMoveLines");

                    b.Navigation("AccountPaymentDestinationAccounts");

                    b.Navigation("AccountPaymentForceOutstandingAccounts");

                    b.Navigation("AccountPaymentMethodLines");

                    b.Navigation("AccountPaymentOutstandingAccounts");

                    b.Navigation("AccountPaymentRegisters");

                    b.Navigation("AccountReconcileModelLines");

                    b.Navigation("AccountTaxRepartitionLines");

                    b.Navigation("AccountTaxes");

                    b.Navigation("HrExpenses");

                    b.Navigation("PosCloseSessionWizards");

                    b.Navigation("PosPaymentMethodOutstandingAccounts");

                    b.Navigation("PosPaymentMethodReceivableAccounts");

                    b.Navigation("ResCompanyAccountCashBasisBaseAccounts");

                    b.Navigation("ResCompanyAccountDefaultPosReceivableAccounts");

                    b.Navigation("ResCompanyAccountJournalEarlyPayDiscountGainAccounts");

                    b.Navigation("ResCompanyAccountJournalEarlyPayDiscountLossAccounts");

                    b.Navigation("ResCompanyAccountJournalPaymentCreditAccounts");

                    b.Navigation("ResCompanyAccountJournalPaymentDebitAccounts");

                    b.Navigation("ResCompanyAccountJournalSuspenseAccounts");

                    b.Navigation("ResCompanyDefaultCashDifferenceExpenseAccounts");

                    b.Navigation("ResCompanyDefaultCashDifferenceIncomeAccounts");

                    b.Navigation("ResCompanyExpenseAccrualAccounts");

                    b.Navigation("ResCompanyExpenseCurrencyExchangeAccounts");

                    b.Navigation("ResCompanyIncomeCurrencyExchangeAccounts");

                    b.Navigation("ResCompanyPropertyStockAccountInputCategs");

                    b.Navigation("ResCompanyPropertyStockAccountOutputCategs");

                    b.Navigation("ResCompanyPropertyStockValuationAccounts");

                    b.Navigation("ResCompanyRevenueAccrualAccounts");

                    b.Navigation("ResCompanyTransferAccounts");

                    b.Navigation("SaleAdvancePaymentInvs");

                    b.Navigation("StockLocationValuationInAccounts");

                    b.Navigation("StockLocationValuationOutAccounts");

                    b.Navigation("StockValuationLayerRevaluations");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAccountTemplate", b =>
                {
                    b.Navigation("AccountChartTemplateAccountJournalEarlyPayDiscountGainAccounts");

                    b.Navigation("AccountChartTemplateAccountJournalEarlyPayDiscountLossAccounts");

                    b.Navigation("AccountChartTemplateAccountJournalPaymentCreditAccounts");

                    b.Navigation("AccountChartTemplateAccountJournalPaymentDebitAccounts");

                    b.Navigation("AccountChartTemplateAccountJournalSuspenseAccounts");

                    b.Navigation("AccountChartTemplateDefaultCashDifferenceExpenseAccounts");

                    b.Navigation("AccountChartTemplateDefaultCashDifferenceIncomeAccounts");

                    b.Navigation("AccountChartTemplateDefaultPosReceivableAccounts");

                    b.Navigation("AccountChartTemplateExpenseCurrencyExchangeAccounts");

                    b.Navigation("AccountChartTemplateIncomeCurrencyExchangeAccounts");

                    b.Navigation("AccountChartTemplatePropertyAccountExpenseCategs");

                    b.Navigation("AccountChartTemplatePropertyAccountExpenses");

                    b.Navigation("AccountChartTemplatePropertyAccountIncomeCategs");

                    b.Navigation("AccountChartTemplatePropertyAccountIncomes");

                    b.Navigation("AccountChartTemplatePropertyAccountPayables");

                    b.Navigation("AccountChartTemplatePropertyAccountReceivables");

                    b.Navigation("AccountChartTemplatePropertyAdvanceTaxPaymentAccounts");

                    b.Navigation("AccountChartTemplatePropertyCashBasisBaseAccounts");

                    b.Navigation("AccountChartTemplatePropertyStockAccountInputCategs");

                    b.Navigation("AccountChartTemplatePropertyStockAccountOutputCategs");

                    b.Navigation("AccountChartTemplatePropertyStockValuationAccounts");

                    b.Navigation("AccountChartTemplatePropertyTaxPayableAccounts");

                    b.Navigation("AccountChartTemplatePropertyTaxReceivableAccounts");

                    b.Navigation("AccountFiscalPositionAccountTemplateAccountDests");

                    b.Navigation("AccountFiscalPositionAccountTemplateAccountSrcs");

                    b.Navigation("AccountReconcileModelLineTemplates");

                    b.Navigation("AccountTaxRepartitionLineTemplates");

                    b.Navigation("AccountTaxTemplates");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAnalyticAccount", b =>
                {
                    b.Navigation("AccountAnalyticLines");

                    b.Navigation("AccountAssetAssets");

                    b.Navigation("AccountAssetCategories");

                    b.Navigation("CrossoveredBudgetLines");

                    b.Navigation("MrpProductions");

                    b.Navigation("MrpWorkcenters");

                    b.Navigation("ProjectProjects");

                    b.Navigation("ProjectTasks");

                    b.Navigation("SaleOrders");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAnalyticLine", b =>
                {
                    b.Navigation("MrpWorkorderMoAnalyticAccountLines");

                    b.Navigation("MrpWorkorderWcAnalyticAccountLines");

                    b.Navigation("StockMoves");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAnalyticPlan", b =>
                {
                    b.Navigation("AccountAnalyticAccountPlans");

                    b.Navigation("AccountAnalyticAccountRootPlans");

                    b.Navigation("AccountAnalyticApplicabilities");

                    b.Navigation("AccountAnalyticLines");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAssetAsset", b =>
                {
                    b.Navigation("AccountAssetDepreciationLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountAssetCategory", b =>
                {
                    b.Navigation("AccountAssetAssets");

                    b.Navigation("AccountMoveLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountBankStatement", b =>
                {
                    b.Navigation("AccountBankStatementLines");

                    b.Navigation("AccountMoveLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountBankStatementLine", b =>
                {
                    b.Navigation("AccountMoveLines");

                    b.Navigation("AccountMoves");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountBudgetPost", b =>
                {
                    b.Navigation("CrossoveredBudgetLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountCashRounding", b =>
                {
                    b.Navigation("AccountMoves");

                    b.Navigation("PosConfigs");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountChartTemplate", b =>
                {
                    b.Navigation("AccountAccountTemplates");

                    b.Navigation("AccountFiscalPositionTemplates");

                    b.Navigation("AccountGroupTemplates");

                    b.Navigation("AccountReconcileModelTemplates");

                    b.Navigation("AccountReports");

                    b.Navigation("AccountTaxTemplates");

                    b.Navigation("InverseParent");

                    b.Navigation("ResCompanies");

                    b.Navigation("ResConfigSettings");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountEdiFormat", b =>
                {
                    b.Navigation("AccountEdiDocuments");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFinancialReport", b =>
                {
                    b.Navigation("AccountingReports");

                    b.Navigation("InverseAccountReport");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFiscalPosition", b =>
                {
                    b.Navigation("AccountFiscalPositionAccounts");

                    b.Navigation("AccountFiscalPositionTaxes");

                    b.Navigation("AccountMoves");

                    b.Navigation("AccountReportExternalValues");

                    b.Navigation("PosConfigsNavigation");

                    b.Navigation("PosOrders");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("ResConfigSettingsNavigation");

                    b.Navigation("SaleOrders");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFiscalPositionTemplate", b =>
                {
                    b.Navigation("AccountFiscalPositionAccountTemplates");

                    b.Navigation("AccountFiscalPositionTaxTemplates");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountFullReconcile", b =>
                {
                    b.Navigation("AccountMoveLines");

                    b.Navigation("AccountPartialReconciles");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountGroup", b =>
                {
                    b.Navigation("AccountAccounts");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountGroupTemplate", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountIncoterm", b =>
                {
                    b.Navigation("AccountMoves");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("ResCompanies");

                    b.Navigation("SaleOrders");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountInvoiceSend", b =>
                {
                    b.Navigation("SnailmailConfirmInvoices");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountJournal", b =>
                {
                    b.Navigation("AccountAnalyticLines");

                    b.Navigation("AccountAssetCategories");

                    b.Navigation("AccountBankStatementImportJournalCreations");

                    b.Navigation("AccountBankStatements");

                    b.Navigation("AccountMoveLines");

                    b.Navigation("AccountMoveReversals");

                    b.Navigation("AccountMoves");

                    b.Navigation("AccountPaymentMethodLines");

                    b.Navigation("AccountPaymentRegisters");

                    b.Navigation("AccountPayments");

                    b.Navigation("AccountReconcileModelLines");

                    b.Navigation("AccountRecurringTemplates");

                    b.Navigation("HrExpenseSheetBankJournals");

                    b.Navigation("HrExpenseSheetJournals");

                    b.Navigation("PosConfigInvoiceJournals");

                    b.Navigation("PosConfigJournals");

                    b.Navigation("PosOrders");

                    b.Navigation("PosPaymentMethods");

                    b.Navigation("PosSessions");

                    b.Navigation("RecurringPaymentLines");

                    b.Navigation("ResCompanyAutomaticEntryDefaultJournals");

                    b.Navigation("ResCompanyCompanyExpenseJournals");

                    b.Navigation("ResCompanyCurrencyExchangeJournals");

                    b.Navigation("ResCompanyExpenseJournals");

                    b.Navigation("ResCompanyTaxCashBasisJournals");

                    b.Navigation("StockValuationLayerRevaluations");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountMove", b =>
                {
                    b.Navigation("AccountAssetAssets");

                    b.Navigation("AccountAssetDepreciationLines");

                    b.Navigation("AccountBankStatementLines");

                    b.Navigation("AccountEdiDocuments");

                    b.Navigation("AccountFullReconciles");

                    b.Navigation("AccountMoveLines");

                    b.Navigation("AccountPartialReconciles");

                    b.Navigation("AccountPayments");

                    b.Navigation("HrExpenseSheets");

                    b.Navigation("InverseAutoPostOrigin");

                    b.Navigation("InverseReversedEntry");

                    b.Navigation("InverseTaxCashBasisOriginMove");

                    b.Navigation("PosOrders");

                    b.Navigation("PosPayments");

                    b.Navigation("PosSessions");

                    b.Navigation("RepairOrders");

                    b.Navigation("ResCompanies");

                    b.Navigation("StockValuationLayers");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountMoveLine", b =>
                {
                    b.Navigation("AccountAnalyticLines");

                    b.Navigation("AccountPartialReconcileCreditMoves");

                    b.Navigation("AccountPartialReconcileDebitMoves");

                    b.Navigation("RepairFees");

                    b.Navigation("RepairLines");

                    b.Navigation("StockValuationLayers");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountPartialReconcile", b =>
                {
                    b.Navigation("AccountMoves");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountPayment", b =>
                {
                    b.Navigation("AccountMoveLines");

                    b.Navigation("AccountMoves");

                    b.Navigation("InversePairedInternalTransferPayment");

                    b.Navigation("InverseSourcePayment");

                    b.Navigation("PaymentRefundWizards");

                    b.Navigation("PaymentTransactions");

                    b.Navigation("RecurringPaymentLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountPaymentMethod", b =>
                {
                    b.Navigation("AccountPaymentMethodLines");

                    b.Navigation("AccountPayments");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountPaymentMethodLine", b =>
                {
                    b.Navigation("AccountPaymentRegisters");

                    b.Navigation("AccountPayments");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountPaymentTerm", b =>
                {
                    b.Navigation("AccountMoves");

                    b.Navigation("AccountPaymentTermLines");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("SaleOrders");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReconcileModel", b =>
                {
                    b.Navigation("AccountMoveLines");

                    b.Navigation("AccountReconcileModelLines");

                    b.Navigation("AccountReconcileModelPartnerMappings");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReconcileModelTemplate", b =>
                {
                    b.Navigation("AccountReconcileModelLineTemplates");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountRecurringTemplate", b =>
                {
                    b.Navigation("RecurringPayments");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReport", b =>
                {
                    b.Navigation("AccountReportColumns");

                    b.Navigation("AccountReportLines");

                    b.Navigation("InverseRootReport");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReportExpression", b =>
                {
                    b.Navigation("AccountReportExternalValues");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountReportLine", b =>
                {
                    b.Navigation("AccountReportExpressions");

                    b.Navigation("AccountReportExternalValues");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountTax", b =>
                {
                    b.Navigation("AccountFiscalPositionTaxTaxDests");

                    b.Navigation("AccountFiscalPositionTaxTaxSrcs");

                    b.Navigation("AccountMoveLineGroupTaxes");

                    b.Navigation("AccountMoveLineTaxLines");

                    b.Navigation("AccountTaxRepartitionLineInvoiceTaxes");

                    b.Navigation("AccountTaxRepartitionLineRefundTaxes");

                    b.Navigation("ResCompanyAccountPurchaseTaxes");

                    b.Navigation("ResCompanyAccountSaleTaxes");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountTaxGroup", b =>
                {
                    b.Navigation("AccountMoveLines");

                    b.Navigation("AccountTaxTemplates");

                    b.Navigation("AccountTaxes");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountTaxRepartitionLine", b =>
                {
                    b.Navigation("AccountMoveLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.AccountTaxTemplate", b =>
                {
                    b.Navigation("AccountFiscalPositionTaxTemplateTaxDests");

                    b.Navigation("AccountFiscalPositionTaxTemplateTaxSrcs");

                    b.Navigation("AccountTaxRepartitionLineTemplateInvoiceTaxes");

                    b.Navigation("AccountTaxRepartitionLineTemplateRefundTaxes");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BarcodeNomenclature", b =>
                {
                    b.Navigation("BarcodeRules");

                    b.Navigation("ResCompanies");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsM2oRelated", b =>
                {
                    b.Navigation("BaseImportTestsModelsM2os");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsM2oRequiredRelated", b =>
                {
                    b.Navigation("BaseImportTestsModelsM2oRequireds");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BaseImportTestsModelsO2m", b =>
                {
                    b.Navigation("BaseImportTestsModelsO2mChildren");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BasePartnerMergeAutomaticWizard", b =>
                {
                    b.Navigation("BasePartnerMergeLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.BasePartnerMergeLine", b =>
                {
                    b.Navigation("BasePartnerMergeAutomaticWizards");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CalendarEvent", b =>
                {
                    b.Navigation("CalendarAttendees");

                    b.Navigation("CalendarRecurrences");

                    b.Navigation("HrLeaves");

                    b.Navigation("MailActivities");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CalendarRecurrence", b =>
                {
                    b.Navigation("CalendarEvents");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ChangePasswordWizard", b =>
                {
                    b.Navigation("ChangePasswordUsers");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmIapLeadMiningRequest", b =>
                {
                    b.Navigation("CrmLeads");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmIapLeadRole", b =>
                {
                    b.Navigation("CrmIapLeadMiningRequests");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmIapLeadSeniority", b =>
                {
                    b.Navigation("CrmIapLeadMiningRequests");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmLead", b =>
                {
                    b.Navigation("CalendarEvents");

                    b.Navigation("CrmLead2opportunityPartnerMassesNavigation");

                    b.Navigation("CrmLead2opportunityPartners");

                    b.Navigation("CrmQuotationPartners");

                    b.Navigation("SaleOrders");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmLostReason", b =>
                {
                    b.Navigation("CrmLeadLosts");

                    b.Navigation("CrmLeads");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmRecurringPlan", b =>
                {
                    b.Navigation("CrmLeads");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmStage", b =>
                {
                    b.Navigation("CrmLeads");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrmTeam", b =>
                {
                    b.Navigation("AccountMoves");

                    b.Navigation("CrmIapLeadMiningRequests");

                    b.Navigation("CrmLead2opportunityPartnerMasses");

                    b.Navigation("CrmLead2opportunityPartners");

                    b.Navigation("CrmLeadScoringFrequencies");

                    b.Navigation("CrmLeads");

                    b.Navigation("CrmMergeOpportunities");

                    b.Navigation("CrmStages");

                    b.Navigation("CrmTeamMembers");

                    b.Navigation("PosConfigs");

                    b.Navigation("PosOrders");

                    b.Navigation("ResPartners");

                    b.Navigation("ResUsers");

                    b.Navigation("SaleOrders");

                    b.Navigation("WebsiteCrmDefaultTeams");

                    b.Navigation("WebsiteSalesteams");
                });

            modelBuilder.Entity("Bamboo.Core.Models.CrossoveredBudget", b =>
                {
                    b.Navigation("CrossoveredBudgetLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.DigestDigest", b =>
                {
                    b.Navigation("ResConfigSettings");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FetchmailServer", b =>
                {
                    b.Navigation("MailMails");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetServiceType", b =>
                {
                    b.Navigation("FleetVehicleLogContractsNavigation");

                    b.Navigation("FleetVehicleLogServices");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicle", b =>
                {
                    b.Navigation("AccountMoveLines");

                    b.Navigation("FleetVehicleAssignationLogs");

                    b.Navigation("FleetVehicleLogContracts");

                    b.Navigation("FleetVehicleLogServices");

                    b.Navigation("FleetVehicleOdometers");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleModel", b =>
                {
                    b.Navigation("FleetVehicles");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleModelBrand", b =>
                {
                    b.Navigation("FleetVehicleModels");

                    b.Navigation("FleetVehicles");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleModelCategory", b =>
                {
                    b.Navigation("FleetVehicleModels");

                    b.Navigation("FleetVehicles");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleOdometer", b =>
                {
                    b.Navigation("FleetVehicleLogServices");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FleetVehicleState", b =>
                {
                    b.Navigation("FleetVehicles");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FollowupFollowup", b =>
                {
                    b.Navigation("FollowupLines");

                    b.Navigation("FollowupPrints");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FollowupLine", b =>
                {
                    b.Navigation("AccountMoveLines");

                    b.Navigation("ResPartners");
                });

            modelBuilder.Entity("Bamboo.Core.Models.FollowupPrint", b =>
                {
                    b.Navigation("PartnerStatRels");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrApplicant", b =>
                {
                    b.Navigation("CalendarEvents");

                    b.Navigation("HrApplicantSkills");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrApplicantRefuseReason", b =>
                {
                    b.Navigation("ApplicantGetRefuseReasons");

                    b.Navigation("HrApplicants");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrAttendance", b =>
                {
                    b.Navigation("HrEmployees");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrAttendanceOvertime", b =>
                {
                    b.Navigation("HrLeaveAllocations");

                    b.Navigation("HrLeaves");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrContract", b =>
                {
                    b.Navigation("HrEmployees");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrContractType", b =>
                {
                    b.Navigation("HrContracts");

                    b.Navigation("HrJobs");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrDepartment", b =>
                {
                    b.Navigation("HrApplicants");

                    b.Navigation("HrContracts");

                    b.Navigation("HrEmployeeSkillLogs");

                    b.Navigation("HrEmployees");

                    b.Navigation("HrExpenseSheets");

                    b.Navigation("HrJobs");

                    b.Navigation("HrLeaveAllocations");

                    b.Navigation("HrLeaves");

                    b.Navigation("HrPlans");

                    b.Navigation("InverseMasterDepartment");

                    b.Navigation("InverseParent");

                    b.Navigation("MaintenanceEquipments");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrDepartureReason", b =>
                {
                    b.Navigation("HrDepartureWizards");

                    b.Navigation("HrEmployees");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrEmployee", b =>
                {
                    b.Navigation("FleetVehicleAssignationLogs");

                    b.Navigation("FleetVehicleDriverEmployees");

                    b.Navigation("FleetVehicleFutureDriverEmployees");

                    b.Navigation("FleetVehicleLogServices");

                    b.Navigation("HrApplicants");

                    b.Navigation("HrAttendanceOvertimes");

                    b.Navigation("HrAttendances");

                    b.Navigation("HrContracts");

                    b.Navigation("HrDepartureWizards");

                    b.Navigation("HrEmployeeSkillLogs");

                    b.Navigation("HrEmployeeSkills");

                    b.Navigation("HrExpenseSheets");

                    b.Navigation("HrExpenseSplits");

                    b.Navigation("HrExpenses");

                    b.Navigation("HrLeaveAllocationApprovers");

                    b.Navigation("HrLeaveAllocationEmployees");

                    b.Navigation("HrLeaveEmployees");

                    b.Navigation("HrLeaveFirstApprovers");

                    b.Navigation("HrLeaveSecondApprovers");

                    b.Navigation("HrResumeLines");

                    b.Navigation("InverseCoach");

                    b.Navigation("InverseParent");

                    b.Navigation("MaintenanceEquipments");

                    b.Navigation("MaintenanceRequests");

                    b.Navigation("PosOrders");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrEmployeeCategory", b =>
                {
                    b.Navigation("HrLeaveAllocations");

                    b.Navigation("HrLeaves");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrExpense", b =>
                {
                    b.Navigation("AccountMoveLines");

                    b.Navigation("HrExpenseSplitWizards");

                    b.Navigation("HrExpenseSplits");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrExpenseSheet", b =>
                {
                    b.Navigation("HrExpenseRefuseWizards");

                    b.Navigation("HrExpenses");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrExpenseSplitWizard", b =>
                {
                    b.Navigation("HrExpenseSplits");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrJob", b =>
                {
                    b.Navigation("HrApplicants");

                    b.Navigation("HrContracts");

                    b.Navigation("HrEmployees");

                    b.Navigation("HrRecruitmentSources");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrLeave", b =>
                {
                    b.Navigation("HrHolidaysCancelLeaves");

                    b.Navigation("InverseParent");

                    b.Navigation("ResourceCalendarLeaves");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrLeaveAccrualLevel", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrLeaveAccrualPlan", b =>
                {
                    b.Navigation("HrLeaveAccrualLevels");

                    b.Navigation("HrLeaveAllocations");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrLeaveAllocation", b =>
                {
                    b.Navigation("HrLeaves");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrLeaveType", b =>
                {
                    b.Navigation("HrLeaveAccrualPlans");

                    b.Navigation("HrLeaveAllocations");

                    b.Navigation("HrLeaves");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrPayrollStructureType", b =>
                {
                    b.Navigation("HrContracts");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrPlan", b =>
                {
                    b.Navigation("HrPlanActivityTypes");

                    b.Navigation("HrPlanWizards");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrRecruitmentDegree", b =>
                {
                    b.Navigation("HrApplicants");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrRecruitmentStage", b =>
                {
                    b.Navigation("HrApplicantLastStages");

                    b.Navigation("HrApplicantStages");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrResumeLineType", b =>
                {
                    b.Navigation("HrResumeLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrSkill", b =>
                {
                    b.Navigation("HrApplicantSkills");

                    b.Navigation("HrEmployeeSkillLogs");

                    b.Navigation("HrEmployeeSkills");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrSkillLevel", b =>
                {
                    b.Navigation("HrApplicantSkills");

                    b.Navigation("HrEmployeeSkillLogs");

                    b.Navigation("HrEmployeeSkills");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrSkillType", b =>
                {
                    b.Navigation("HrApplicantSkills");

                    b.Navigation("HrEmployeeSkillLogs");

                    b.Navigation("HrEmployeeSkills");

                    b.Navigation("HrSkillLevels");

                    b.Navigation("HrSkills");
                });

            modelBuilder.Entity("Bamboo.Core.Models.HrWorkLocation", b =>
                {
                    b.Navigation("HrEmployees");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrActReportXml", b =>
                {
                    b.Navigation("MailTemplates");

                    b.Navigation("SnailmailLetters");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrActServer", b =>
                {
                    b.Navigation("IrCrons");

                    b.Navigation("IrServerObjectLines");

                    b.Navigation("WebsiteSnippetFilters");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrActWindow", b =>
                {
                    b.Navigation("AccountReportColumns");

                    b.Navigation("IrActWindowViews");

                    b.Navigation("MailTemplates");

                    b.Navigation("SmsTemplates");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrAttachment", b =>
                {
                    b.Navigation("AccountAccountTemplates");

                    b.Navigation("AccountAccounts");

                    b.Navigation("AccountAnalyticAccounts");

                    b.Navigation("AccountAssetAssets");

                    b.Navigation("AccountAssetCategories");

                    b.Navigation("AccountEdiDocuments");

                    b.Navigation("AccountJournals");

                    b.Navigation("AccountMoves");

                    b.Navigation("AccountPayments");

                    b.Navigation("AccountReconcileModels");

                    b.Navigation("CalendarEvents");

                    b.Navigation("CrmLeads");

                    b.Navigation("CrmTeamMembers");

                    b.Navigation("CrmTeams");

                    b.Navigation("CrossoveredBudgets");

                    b.Navigation("FleetVehicleLogContracts");

                    b.Navigation("FleetVehicleLogServices");

                    b.Navigation("FleetVehicles");

                    b.Navigation("HrApplicants");

                    b.Navigation("HrContracts");

                    b.Navigation("HrDepartments");

                    b.Navigation("HrEmployees");

                    b.Navigation("HrExpenseSheets");

                    b.Navigation("HrExpenses");

                    b.Navigation("HrJobs");

                    b.Navigation("HrLeaveAllocations");

                    b.Navigation("HrLeaveTypes");

                    b.Navigation("HrLeaves");

                    b.Navigation("InverseOriginal");

                    b.Navigation("LunchSuppliers");

                    b.Navigation("MailBlacklists");

                    b.Navigation("MailChannels");

                    b.Navigation("MaintenanceEquipmentCategories");

                    b.Navigation("MaintenanceEquipments");

                    b.Navigation("MaintenanceRequests");

                    b.Navigation("MrpBoms");

                    b.Navigation("MrpDocuments");

                    b.Navigation("MrpProductions");

                    b.Navigation("MrpUnbuilds");

                    b.Navigation("NoteNotes");

                    b.Navigation("PhoneBlacklists");

                    b.Navigation("PosSessions");

                    b.Navigation("ProductProducts");

                    b.Navigation("ProductTemplates");

                    b.Navigation("ProjectMilestones");

                    b.Navigation("ProjectProjects");

                    b.Navigation("ProjectTaskDisplayedImages");

                    b.Navigation("ProjectTaskMessageMainAttachments");

                    b.Navigation("ProjectUpdates");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("RepairOrders");

                    b.Navigation("ResCompanies");

                    b.Navigation("ResPartnerBanks");

                    b.Navigation("ResPartners");

                    b.Navigation("SaleOrders");

                    b.Navigation("SnailmailLetters");

                    b.Navigation("StockLots");

                    b.Navigation("StockPickings");

                    b.Navigation("StockScraps");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrCron", b =>
                {
                    b.Navigation("IrCronTriggers");

                    b.Navigation("LunchAlerts");

                    b.Navigation("LunchSuppliers");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrDemoFailureWizard", b =>
                {
                    b.Navigation("IrDemoFailures");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrExport", b =>
                {
                    b.Navigation("IrExportsLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrFilter", b =>
                {
                    b.Navigation("WebsiteSnippetFilters");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrMailServer", b =>
                {
                    b.Navigation("MailComposeMessages");

                    b.Navigation("MailMessages");

                    b.Navigation("MailTemplates");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModel", b =>
                {
                    b.Navigation("CalendarEvents");

                    b.Navigation("FetchmailServers");

                    b.Navigation("IrActClients");

                    b.Navigation("IrActReportXmls");

                    b.Navigation("IrActServerBindingModels");

                    b.Navigation("IrActServerCrudModels");

                    b.Navigation("IrActServerModels");

                    b.Navigation("IrActUrls");

                    b.Navigation("IrActWindows");

                    b.Navigation("IrActions");

                    b.Navigation("IrModelAccesses");

                    b.Navigation("IrModelConstraints");

                    b.Navigation("IrModelFields");

                    b.Navigation("IrModelRelations");

                    b.Navigation("IrRules");

                    b.Navigation("MailActivities");

                    b.Navigation("MailAliasAliasModels");

                    b.Navigation("MailAliasAliasParentModels");

                    b.Navigation("MailTemplates");

                    b.Navigation("PaymentTransactions");

                    b.Navigation("PrivacyLookupWizardLines");

                    b.Navigation("RatingRatingParentResModelNavigations");

                    b.Navigation("RatingRatingResModelNavigations");

                    b.Navigation("SmsTemplates");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModelField", b =>
                {
                    b.Navigation("CrmLeadScoringFrequencyFields");

                    b.Navigation("InverseRelatedField");

                    b.Navigation("InverseRelationFieldNavigation");

                    b.Navigation("IrActServers");

                    b.Navigation("IrDefaults");

                    b.Navigation("IrModelFieldsSelections");

                    b.Navigation("IrModels");

                    b.Navigation("IrProperties");

                    b.Navigation("IrServerObjectLines");

                    b.Navigation("MailTrackingValues");

                    b.Navigation("WebsiteSaleExtraFields");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModuleCategory", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("IrModuleModules");

                    b.Navigation("ResGroups");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrModuleModule", b =>
                {
                    b.Navigation("BaseModuleInstallRequests");

                    b.Navigation("BaseModuleInstallReviews");

                    b.Navigation("BaseModuleUninstalls");

                    b.Navigation("IrDemoFailures");

                    b.Navigation("IrModelConstraints");

                    b.Navigation("IrModelRelations");

                    b.Navigation("IrModuleModuleDependencies");

                    b.Navigation("IrModuleModuleExclusions");

                    b.Navigation("PaymentProviders");

                    b.Navigation("WebsiteConfiguratorFeatures");

                    b.Navigation("Websites");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrSequence", b =>
                {
                    b.Navigation("AccountJournals");

                    b.Navigation("IrSequenceDateRanges");

                    b.Navigation("PosConfigSequenceLines");

                    b.Navigation("PosConfigSequences");

                    b.Navigation("StockPickingTypes");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrUiMenu", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("WizardIrModelMenuCreates");
                });

            modelBuilder.Entity("Bamboo.Core.Models.IrUiView", b =>
                {
                    b.Navigation("InverseInherit");

                    b.Navigation("IrActWindowSearchViews");

                    b.Navigation("IrActWindowViews");

                    b.Navigation("IrActWindowViewsNavigation");

                    b.Navigation("IrUiViewCustoms");

                    b.Navigation("PaymentProviderExpressCheckoutFormViews");

                    b.Navigation("PaymentProviderInlineFormViews");

                    b.Navigation("PaymentProviderRedirectFormViews");

                    b.Navigation("PaymentProviderTokenInlineFormViews");

                    b.Navigation("ReportLayouts");

                    b.Navigation("ResCompanies");

                    b.Navigation("ResCountries");

                    b.Navigation("ResetViewArchWizardCompareViews");

                    b.Navigation("ResetViewArchWizardViews");

                    b.Navigation("WebsiteConfiguratorFeatures");

                    b.Navigation("WebsitePages");
                });

            modelBuilder.Entity("Bamboo.Core.Models.LunchLocation", b =>
                {
                    b.Navigation("LunchOrders");

                    b.Navigation("ResUsers");
                });

            modelBuilder.Entity("Bamboo.Core.Models.LunchProduct", b =>
                {
                    b.Navigation("LunchOrders");
                });

            modelBuilder.Entity("Bamboo.Core.Models.LunchProductCategory", b =>
                {
                    b.Navigation("LunchOrders");

                    b.Navigation("LunchProducts");
                });

            modelBuilder.Entity("Bamboo.Core.Models.LunchSupplier", b =>
                {
                    b.Navigation("LunchOrders");

                    b.Navigation("LunchProducts");

                    b.Navigation("LunchToppings");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailActivityType", b =>
                {
                    b.Navigation("AccountJournals");

                    b.Navigation("HrPlanActivityTypes");

                    b.Navigation("InverseTriggeredNextType");

                    b.Navigation("IrActServers");

                    b.Navigation("MailActivityActivityTypes");

                    b.Navigation("MailActivityPreviousActivityTypes");

                    b.Navigation("MailActivityRecommendedActivityTypes");

                    b.Navigation("MailComposeMessages");

                    b.Navigation("MailMessages");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailAlias", b =>
                {
                    b.Navigation("AccountJournals");

                    b.Navigation("CrmTeams");

                    b.Navigation("HrJobs");

                    b.Navigation("HrRecruitmentSources");

                    b.Navigation("MaintenanceEquipmentCategories");

                    b.Navigation("ProjectProjects");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailChannel", b =>
                {
                    b.Navigation("CalendarEvents");

                    b.Navigation("MailChannelMembers");

                    b.Navigation("MailChannelRtcSessions");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailChannelMember", b =>
                {
                    b.Navigation("MailChannelRtcSession");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailChannelRtcSession", b =>
                {
                    b.Navigation("MailChannelMembers");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailComposeMessage", b =>
                {
                    b.Navigation("AccountInvoiceSends");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailGuest", b =>
                {
                    b.Navigation("BusPresence");

                    b.Navigation("MailChannelMembers");

                    b.Navigation("MailMessageReactions");

                    b.Navigation("MailMessages");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailMail", b =>
                {
                    b.Navigation("MailNotifications");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailMessage", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("MailChannelMemberFetchedMessages");

                    b.Navigation("MailChannelMemberSeenMessages");

                    b.Navigation("MailComposeMessages");

                    b.Navigation("MailLinkPreviews");

                    b.Navigation("MailMails");

                    b.Navigation("MailMessageReactions");

                    b.Navigation("MailMessageSchedules");

                    b.Navigation("MailNotifications");

                    b.Navigation("MailResendMessages");

                    b.Navigation("MailTrackingValues");

                    b.Navigation("RatingRatings");

                    b.Navigation("SmsResends");

                    b.Navigation("SmsSms");

                    b.Navigation("SnailmailLetterFormatErrors");

                    b.Navigation("SnailmailLetters");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailMessageSubtype", b =>
                {
                    b.Navigation("HrLeaveTypeAllocationNotifSubtypes");

                    b.Navigation("HrLeaveTypeLeaveNotifSubtypes");

                    b.Navigation("InverseParent");

                    b.Navigation("MailComposeMessages");

                    b.Navigation("MailMessages");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailNotification", b =>
                {
                    b.Navigation("SmsResendRecipients");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailResendMessage", b =>
                {
                    b.Navigation("MailResendPartners");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MailTemplate", b =>
                {
                    b.Navigation("AccountInvoiceSends");

                    b.Navigation("ApplicantGetRefuseReasons");

                    b.Navigation("ApplicantSendMails");

                    b.Navigation("CalendarAlarms");

                    b.Navigation("FollowupLines");

                    b.Navigation("HrApplicantRefuseReasons");

                    b.Navigation("HrRecruitmentStages");

                    b.Navigation("IrActServers");

                    b.Navigation("MailComposeMessages");

                    b.Navigation("MailTemplatePreviews");

                    b.Navigation("ProjectProjectStages");

                    b.Navigation("ProjectTaskTypeMailTemplates");

                    b.Navigation("ProjectTaskTypeRatingTemplates");

                    b.Navigation("ResCompanies");

                    b.Navigation("ResConfigSettings");

                    b.Navigation("SaleOrderCancels");

                    b.Navigation("SaleOrderTemplates");

                    b.Navigation("Websites");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MaintenanceEquipment", b =>
                {
                    b.Navigation("MaintenanceRequests");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MaintenanceEquipmentCategory", b =>
                {
                    b.Navigation("MaintenanceEquipments");

                    b.Navigation("MaintenanceRequests");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MaintenanceStage", b =>
                {
                    b.Navigation("MaintenanceRequests");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MaintenanceTeam", b =>
                {
                    b.Navigation("MaintenanceEquipments");

                    b.Navigation("MaintenanceRequests");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpBom", b =>
                {
                    b.Navigation("MrpBomByproducts");

                    b.Navigation("MrpBomLines");

                    b.Navigation("MrpProductions");

                    b.Navigation("MrpRoutingWorkcenters");

                    b.Navigation("MrpUnbuilds");

                    b.Navigation("StockWarehouseOrderpoints");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpBomByproduct", b =>
                {
                    b.Navigation("StockMoves");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpBomLine", b =>
                {
                    b.Navigation("StockMoves");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpConsumptionWarning", b =>
                {
                    b.Navigation("MrpConsumptionWarningLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpImmediateProduction", b =>
                {
                    b.Navigation("MrpImmediateProductionLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpProduction", b =>
                {
                    b.Navigation("ChangeProductionQties");

                    b.Navigation("MrpConsumptionWarningLines");

                    b.Navigation("MrpImmediateProductionLines");

                    b.Navigation("MrpProductionBackorderLines");

                    b.Navigation("MrpProductionSplits");

                    b.Navigation("MrpUnbuilds");

                    b.Navigation("MrpWorkorders");

                    b.Navigation("StockAssignSerials");

                    b.Navigation("StockMoveCreatedProductions");

                    b.Navigation("StockMoveLines");

                    b.Navigation("StockMoveProductions");

                    b.Navigation("StockMoveRawMaterialProductions");

                    b.Navigation("StockScraps");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpProductionBackorder", b =>
                {
                    b.Navigation("MrpProductionBackorderLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpProductionSplit", b =>
                {
                    b.Navigation("MrpProductionSplitLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpProductionSplitMulti", b =>
                {
                    b.Navigation("MrpProductionSplits");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpRoutingWorkcenter", b =>
                {
                    b.Navigation("MrpBomByproducts");

                    b.Navigation("MrpBomLines");

                    b.Navigation("MrpWorkorders");

                    b.Navigation("StockMoves");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpUnbuild", b =>
                {
                    b.Navigation("StockMoveConsumeUnbuilds");

                    b.Navigation("StockMoveUnbuilds");

                    b.Navigation("StockWarnInsufficientQtyUnbuilds");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpWorkcenter", b =>
                {
                    b.Navigation("MrpRoutingWorkcenters");

                    b.Navigation("MrpWorkcenterCapacities");

                    b.Navigation("MrpWorkcenterProductivities");

                    b.Navigation("MrpWorkorders");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpWorkcenterProductivityLoss", b =>
                {
                    b.Navigation("MrpWorkcenterProductivities");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpWorkcenterProductivityLossType", b =>
                {
                    b.Navigation("MrpWorkcenterProductivityLosses");
                });

            modelBuilder.Entity("Bamboo.Core.Models.MrpWorkorder", b =>
                {
                    b.Navigation("MrpWorkcenterProductivities");

                    b.Navigation("StockMoveLines");

                    b.Navigation("StockMoves");

                    b.Navigation("StockScraps");
                });

            modelBuilder.Entity("Bamboo.Core.Models.NoteNote", b =>
                {
                    b.Navigation("MailActivities");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PaymentProvider", b =>
                {
                    b.Navigation("AccountPaymentMethodLines");

                    b.Navigation("PaymentTokens");

                    b.Navigation("PaymentTransactions");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PaymentToken", b =>
                {
                    b.Navigation("AccountPaymentRegisters");

                    b.Navigation("AccountPayments");

                    b.Navigation("PaymentTransactions");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PaymentTransaction", b =>
                {
                    b.Navigation("AccountPayments");

                    b.Navigation("InverseSourceTransaction");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PortalWizard", b =>
                {
                    b.Navigation("PortalWizardUsers");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosCategory", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("PosConfigsNavigation");

                    b.Navigation("ProductTemplates");

                    b.Navigation("ResConfigSettingsNavigation");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosConfig", b =>
                {
                    b.Navigation("PosMakePayments");

                    b.Navigation("PosSessions");

                    b.Navigation("ResConfigSettings");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosOrder", b =>
                {
                    b.Navigation("PosOrderLines");

                    b.Navigation("PosPayments");

                    b.Navigation("ProcurementGroups");

                    b.Navigation("StockPickings");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosOrderLine", b =>
                {
                    b.Navigation("InverseRefundedOrderline");

                    b.Navigation("PosPackOperationLots");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosPaymentMethod", b =>
                {
                    b.Navigation("AccountPayments");

                    b.Navigation("PosMakePayments");

                    b.Navigation("PosPayments");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PosSession", b =>
                {
                    b.Navigation("AccountBankStatementLines");

                    b.Navigation("AccountPayments");

                    b.Navigation("PosOrders");

                    b.Navigation("PosPayments");

                    b.Navigation("StockPickings");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PrivacyLog", b =>
                {
                    b.Navigation("PrivacyLookupWizards");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PrivacyLookupWizard", b =>
                {
                    b.Navigation("PrivacyLookupWizardLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProcurementGroup", b =>
                {
                    b.Navigation("MrpProductions");

                    b.Navigation("PosOrders");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("SaleOrders");

                    b.Navigation("StockMoves");

                    b.Navigation("StockPickings");

                    b.Navigation("StockRules");

                    b.Navigation("StockWarehouseOrderpoints");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductAttribute", b =>
                {
                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductTemplateAttributeLines");

                    b.Navigation("ProductTemplateAttributeValues");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductAttributeValue", b =>
                {
                    b.Navigation("ProductTemplateAttributeValues");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductCategory", b =>
                {
                    b.Navigation("AccountAnalyticApplicabilities");

                    b.Navigation("AccountAnalyticDistributionModels");

                    b.Navigation("InverseParent");

                    b.Navigation("ProductPricelistItems");

                    b.Navigation("ProductTemplates");

                    b.Navigation("StockPutawayRules");

                    b.Navigation("StockWarehouseOrderpoints");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductPackaging", b =>
                {
                    b.Navigation("PurchaseOrderLines");

                    b.Navigation("SaleOrderLines");

                    b.Navigation("StockMoves");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductPricelist", b =>
                {
                    b.Navigation("PosConfigs");

                    b.Navigation("PosOrders");

                    b.Navigation("ProductPricelistItemBasePricelists");

                    b.Navigation("ProductPricelistItemPricelists");

                    b.Navigation("RepairOrders");

                    b.Navigation("ResConfigSettingsNavigation");

                    b.Navigation("SaleOrders");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductProduct", b =>
                {
                    b.Navigation("AccountAnalyticDistributionModels");

                    b.Navigation("AccountAnalyticLines");

                    b.Navigation("AccountMoveLines");

                    b.Navigation("HrExpenseSplits");

                    b.Navigation("HrExpenses");

                    b.Navigation("MrpBomByproducts");

                    b.Navigation("MrpBomLines");

                    b.Navigation("MrpBoms");

                    b.Navigation("MrpConsumptionWarningLines");

                    b.Navigation("MrpProductions");

                    b.Navigation("MrpUnbuilds");

                    b.Navigation("MrpWorkcenterCapacities");

                    b.Navigation("MrpWorkorders");

                    b.Navigation("PosConfigDownPaymentProducts");

                    b.Navigation("PosConfigTipProducts");

                    b.Navigation("PosOrderLines");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductPackagings");

                    b.Navigation("ProductPricelistItems");

                    b.Navigation("ProductReplenishes");

                    b.Navigation("ProductSupplierinfos");

                    b.Navigation("PurchaseOrderLines");

                    b.Navigation("RepairFees");

                    b.Navigation("RepairLines");

                    b.Navigation("RepairOrders");

                    b.Navigation("ResConfigSettingDepositDefaultProducts");

                    b.Navigation("ResConfigSettingPosTipProducts");

                    b.Navigation("SaleAdvancePaymentInvs");

                    b.Navigation("SaleOrderLines");

                    b.Navigation("SaleOrderOptions");

                    b.Navigation("SaleOrderTemplateLines");

                    b.Navigation("SaleOrderTemplateOptions");

                    b.Navigation("StockChangeProductQties");

                    b.Navigation("StockLots");

                    b.Navigation("StockMoveLines");

                    b.Navigation("StockMoves");

                    b.Navigation("StockPutawayRules");

                    b.Navigation("StockQuants");

                    b.Navigation("StockReplenishmentOptions");

                    b.Navigation("StockReturnPickingLines");

                    b.Navigation("StockRulesReports");

                    b.Navigation("StockScraps");

                    b.Navigation("StockStorageCategoryCapacities");

                    b.Navigation("StockTrackLines");

                    b.Navigation("StockValuationLayerRevaluations");

                    b.Navigation("StockValuationLayers");

                    b.Navigation("StockWarehouseOrderpoints");

                    b.Navigation("StockWarnInsufficientQtyRepairs");

                    b.Navigation("StockWarnInsufficientQtyScraps");

                    b.Navigation("StockWarnInsufficientQtyUnbuilds");

                    b.Navigation("WebsiteTracks");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductPublicCategory", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductRemoval", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("StockLocations");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductRibbon", b =>
                {
                    b.Navigation("ProductTags");

                    b.Navigation("ProductTemplates");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductSupplierinfo", b =>
                {
                    b.Navigation("StockWarehouseOrderpoints");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductTemplate", b =>
                {
                    b.Navigation("MrpBomLines");

                    b.Navigation("MrpBoms");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductPricelistItems");

                    b.Navigation("ProductProducts");

                    b.Navigation("ProductReplenishes");

                    b.Navigation("ProductSupplierinfos");

                    b.Navigation("ProductTemplateAttributeExclusions");

                    b.Navigation("ProductTemplateAttributeLines");

                    b.Navigation("ProductTemplateAttributeValues");

                    b.Navigation("StockChangeProductQties");

                    b.Navigation("StockRulesReports");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductTemplateAttributeLine", b =>
                {
                    b.Navigation("ProductTemplateAttributeValues");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProductTemplateAttributeValue", b =>
                {
                    b.Navigation("ProductAttributeCustomValues");

                    b.Navigation("ProductTemplateAttributeExclusionsNavigation");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectMilestone", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectProject", b =>
                {
                    b.Navigation("ProjectCollaborators");

                    b.Navigation("ProjectMilestones");

                    b.Navigation("ProjectTaskDisplayProjects");

                    b.Navigation("ProjectTaskProjects");

                    b.Navigation("ProjectUpdates");

                    b.Navigation("SaleOrderLines");

                    b.Navigation("SaleOrders");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectProjectStage", b =>
                {
                    b.Navigation("ProjectProjects");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectTask", b =>
                {
                    b.Navigation("InverseAncestor");

                    b.Navigation("InverseParent");

                    b.Navigation("ProjectTaskUserRels");

                    b.Navigation("SaleOrderLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectTaskRecurrence", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectTaskType", b =>
                {
                    b.Navigation("ProjectTaskUserRels");

                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ProjectUpdate", b =>
                {
                    b.Navigation("ProjectProjects");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.PurchaseOrderLine", b =>
                {
                    b.Navigation("AccountMoveLines");

                    b.Navigation("StockMoveCreatedPurchaseLines");

                    b.Navigation("StockMovePurchaseLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.RecurringPayment", b =>
                {
                    b.Navigation("RecurringPaymentLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.RepairOrder", b =>
                {
                    b.Navigation("RepairFees");

                    b.Navigation("RepairLines");

                    b.Navigation("StockMoves");

                    b.Navigation("StockWarnInsufficientQtyRepairs");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ReportLayout", b =>
                {
                    b.Navigation("BaseDocumentLayouts");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ReportPaperformat", b =>
                {
                    b.Navigation("IrActReportXmls");

                    b.Navigation("ResCompanies");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResBank", b =>
                {
                    b.Navigation("ResPartnerBanks");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResCompany", b =>
                {
                    b.Navigation("FollowupFollowup");

                    b.Navigation("HrLeaveAllocationEmployeeCompanies");

                    b.Navigation("HrLeaveAllocationModeCompanies");

                    b.Navigation("HrLeaveEmployeeCompanies");

                    b.Navigation("HrLeaveModeCompanies");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResCountry", b =>
                {
                    b.Navigation("HrEmployeeCountryOfBirthNavigations");

                    b.Navigation("PaymentTransactions");

                    b.Navigation("ResBanks");

                    b.Navigation("ResCompanies");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResCountryGroup", b =>
                {
                    b.Navigation("AccountFiscalPositionTemplates");

                    b.Navigation("AccountFiscalPositions");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResCountryState", b =>
                {
                    b.Navigation("CrmLeads");

                    b.Navigation("PaymentTransactions");

                    b.Navigation("ResBanks");

                    b.Navigation("ResPartners");

                    b.Navigation("SnailmailLetterMissingRequiredFields");

                    b.Navigation("SnailmailLetters");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResCurrency", b =>
                {
                    b.Navigation("AccountBankStatementLineForeignCurrencies");

                    b.Navigation("AccountMoveLineCompanyCurrencies");

                    b.Navigation("AccountPartialReconcileCreditCurrencies");

                    b.Navigation("AccountPartialReconcileDebitCurrencies");

                    b.Navigation("AccountPaymentRegisterSourceCurrencies");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResGroup", b =>
                {
                    b.Navigation("DigestTips");

                    b.Navigation("IrModelAccesses");

                    b.Navigation("MailChannels");

                    b.Navigation("PosConfigGroupPosManagers");

                    b.Navigation("PosConfigGroupPosUsers");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResLang", b =>
                {
                    b.Navigation("CrmLeads");

                    b.Navigation("WebsiteVisitors");

                    b.Navigation("Websites");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResPartner", b =>
                {
                    b.Navigation("AccountMoveCommercialPartners");

                    b.Navigation("AccountMovePartnerShippings");

                    b.Navigation("ApplicantSendMails");

                    b.Navigation("BasePartnerMergeAutomaticWizards");

                    b.Navigation("FleetVehicleAssignationLogs");

                    b.Navigation("FleetVehicleDrivers");

                    b.Navigation("FleetVehicleFutureDrivers");

                    b.Navigation("FleetVehicleLogContracts");

                    b.Navigation("FleetVehicleLogServicePurchasers");

                    b.Navigation("FleetVehicleLogServiceVendors");

                    b.Navigation("HrEmployeeAddressHomes");

                    b.Navigation("HrEmployeeAddresses");

                    b.Navigation("HrEmployeeWorkContacts");

                    b.Navigation("HrExpenseSheets");

                    b.Navigation("HrJobs");

                    b.Navigation("HrWorkLocations");

                    b.Navigation("InverseCommercialPartner");

                    b.Navigation("InverseParent");

                    b.Navigation("MailActivities");

                    b.Navigation("MailComposeMessages");

                    b.Navigation("MailMessages");

                    b.Navigation("MailNotificationAuthors");

                    b.Navigation("MailNotificationResPartners");

                    b.Navigation("PurchaseOrderDestAddresses");

                    b.Navigation("RatingRatingPublishers");

                    b.Navigation("RatingRatingRatedPartners");

                    b.Navigation("RepairOrderAddresses");

                    b.Navigation("RepairOrderPartnerInvoices");

                    b.Navigation("ResUsersSettingsVolumeGuests");

                    b.Navigation("SaleOrderCancels");

                    b.Navigation("SaleOrderLines");

                    b.Navigation("SaleOrderPartnerInvoices");

                    b.Navigation("SaleOrderPartnerShippings");

                    b.Navigation("StockMoveLines");

                    b.Navigation("StockMoveRestrictPartners");

                    b.Navigation("StockPickingOwners");

                    b.Navigation("StockQuants");

                    b.Navigation("StockRules");

                    b.Navigation("StockScraps");

                    b.Navigation("StockWarehouseOrderpoints");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResPartnerBank", b =>
                {
                    b.Navigation("AccountJournals");

                    b.Navigation("AccountMoves");

                    b.Navigation("AccountPaymentRegisters");

                    b.Navigation("AccountPayments");

                    b.Navigation("AccountSetupBankManualConfigs");

                    b.Navigation("HrEmployees");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResPartnerCategory", b =>
                {
                    b.Navigation("AccountAnalyticDistributionModels");

                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResPartnerIndustry", b =>
                {
                    b.Navigation("ResPartners");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResPartnerTitle", b =>
                {
                    b.Navigation("CrmLeads");

                    b.Navigation("ResPartners");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResUser", b =>
                {
                    b.Navigation("BusPresence");

                    b.Navigation("ResUsersSettingUser");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResUsersSetting", b =>
                {
                    b.Navigation("ResUsersSettingsVolumes");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResourceCalendar", b =>
                {
                    b.Navigation("HrContracts");

                    b.Navigation("HrEmployees");

                    b.Navigation("HrLeaveStressDays");

                    b.Navigation("HrPayrollStructureTypes");

                    b.Navigation("MrpWorkcenters");

                    b.Navigation("ResCompanies");

                    b.Navigation("ResourceCalendarAttendances");

                    b.Navigation("ResourceCalendarLeaves");

                    b.Navigation("ResourceResources");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResourceCalendarLeaf", b =>
                {
                    b.Navigation("MrpWorkorders");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ResourceResource", b =>
                {
                    b.Navigation("HrEmployees");

                    b.Navigation("MrpWorkcenters");

                    b.Navigation("ResourceCalendarAttendances");

                    b.Navigation("ResourceCalendarLeaves");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SaleOrder", b =>
                {
                    b.Navigation("HrExpenseSplits");

                    b.Navigation("HrExpenses");

                    b.Navigation("PosOrderLines");

                    b.Navigation("ProcurementGroups");

                    b.Navigation("ProjectTasks");

                    b.Navigation("PurchaseOrderLines");

                    b.Navigation("RepairOrders");

                    b.Navigation("SaleOrderCancels");

                    b.Navigation("SaleOrderLines");

                    b.Navigation("SaleOrderOptions");

                    b.Navigation("StockPickings");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SaleOrderLine", b =>
                {
                    b.Navigation("AccountAnalyticLines");

                    b.Navigation("InverseLinkedLine");

                    b.Navigation("PosOrderLines");

                    b.Navigation("ProductAttributeCustomValues");

                    b.Navigation("ProjectMilestones");

                    b.Navigation("ProjectProjects");

                    b.Navigation("ProjectTasks");

                    b.Navigation("PurchaseOrderLines");

                    b.Navigation("SaleOrderOptions");

                    b.Navigation("StockMoves");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SaleOrderTemplate", b =>
                {
                    b.Navigation("ResCompanies");

                    b.Navigation("SaleOrderTemplateLines");

                    b.Navigation("SaleOrderTemplateOptions");

                    b.Navigation("SaleOrders");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SmsResend", b =>
                {
                    b.Navigation("SmsResendRecipients");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SmsSm", b =>
                {
                    b.Navigation("MailNotifications");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SmsTemplate", b =>
                {
                    b.Navigation("CalendarAlarms");

                    b.Navigation("IrActServers");

                    b.Navigation("ProjectProjectStages");

                    b.Navigation("ProjectTaskTypes");

                    b.Navigation("ResCompanies");

                    b.Navigation("SmsComposers");

                    b.Navigation("SmsTemplatePreviews");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SnailmailLetter", b =>
                {
                    b.Navigation("MailNotifications");

                    b.Navigation("SnailmailLetterMissingRequiredFields");
                });

            modelBuilder.Entity("Bamboo.Core.Models.SpreadsheetDashboardGroup", b =>
                {
                    b.Navigation("SpreadsheetDashboards");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockBackorderConfirmation", b =>
                {
                    b.Navigation("StockBackorderConfirmationLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockImmediateTransfer", b =>
                {
                    b.Navigation("StockImmediateTransferLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockLocation", b =>
                {
                    b.Navigation("InverseLocation");

                    b.Navigation("MrpProductionLocationDests");

                    b.Navigation("MrpProductionLocationSrcs");

                    b.Navigation("MrpProductionProductionLocations");

                    b.Navigation("MrpUnbuildLocationDests");

                    b.Navigation("MrpUnbuildLocations");

                    b.Navigation("RepairLineLocationDests");

                    b.Navigation("RepairLineLocations");

                    b.Navigation("RepairOrders");

                    b.Navigation("ResCompanies");

                    b.Navigation("StockMoveLineLocationDests");

                    b.Navigation("StockMoveLineLocations");

                    b.Navigation("StockMoveLocationDests");

                    b.Navigation("StockMoveLocations");

                    b.Navigation("StockPackageDestinations");

                    b.Navigation("StockPackageLevels");

                    b.Navigation("StockPickingLocationDests");

                    b.Navigation("StockPickingLocations");

                    b.Navigation("StockPickingTypeDefaultLocationDests");

                    b.Navigation("StockPickingTypeDefaultLocationSrcs");

                    b.Navigation("StockPutawayRuleLocationIns");

                    b.Navigation("StockPutawayRuleLocationOuts");

                    b.Navigation("StockQuantPackages");

                    b.Navigation("StockQuants");

                    b.Navigation("StockReturnPickingLocations");

                    b.Navigation("StockReturnPickingOriginalLocations");

                    b.Navigation("StockReturnPickingParentLocations");

                    b.Navigation("StockRuleLocationDests");

                    b.Navigation("StockRuleLocationSrcs");

                    b.Navigation("StockScrapLocations");

                    b.Navigation("StockScrapScrapLocations");

                    b.Navigation("StockWarehouseLotStocks");

                    b.Navigation("StockWarehouseOrderpoints");

                    b.Navigation("StockWarehousePbmLocs");

                    b.Navigation("StockWarehouseSamLocs");

                    b.Navigation("StockWarehouseViewLocations");

                    b.Navigation("StockWarehouseWhInputStockLocs");

                    b.Navigation("StockWarehouseWhOutputStockLocs");

                    b.Navigation("StockWarehouseWhPackStockLocs");

                    b.Navigation("StockWarehouseWhQcStockLocs");

                    b.Navigation("StockWarnInsufficientQtyRepairs");

                    b.Navigation("StockWarnInsufficientQtyScraps");

                    b.Navigation("StockWarnInsufficientQtyUnbuilds");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockLot", b =>
                {
                    b.Navigation("MrpProductions");

                    b.Navigation("MrpUnbuilds");

                    b.Navigation("RepairLines");

                    b.Navigation("RepairOrders");

                    b.Navigation("StockMoveLines");

                    b.Navigation("StockMoves");

                    b.Navigation("StockQuants");

                    b.Navigation("StockScraps");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockMove", b =>
                {
                    b.Navigation("AccountMoves");

                    b.Navigation("InverseOriginReturnedMove");

                    b.Navigation("RepairLines");

                    b.Navigation("RepairOrders");

                    b.Navigation("StockAssignSerials");

                    b.Navigation("StockMoveLines");

                    b.Navigation("StockReturnPickingLines");

                    b.Navigation("StockScraps");

                    b.Navigation("StockValuationLayers");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockPackageLevel", b =>
                {
                    b.Navigation("StockMoveLines");

                    b.Navigation("StockMoves");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockPackageType", b =>
                {
                    b.Navigation("ProductPackagings");

                    b.Navigation("StockQuantPackages");

                    b.Navigation("StockStorageCategoryCapacities");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockPicking", b =>
                {
                    b.Navigation("InverseBackorder");

                    b.Navigation("RepairOrders");

                    b.Navigation("StockBackorderConfirmationLines");

                    b.Navigation("StockImmediateTransferLines");

                    b.Navigation("StockMoveLines");

                    b.Navigation("StockMoves");

                    b.Navigation("StockPackageDestinations");

                    b.Navigation("StockPackageLevels");

                    b.Navigation("StockReturnPickings");

                    b.Navigation("StockScraps");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockPickingType", b =>
                {
                    b.Navigation("InverseReturnPickingType");

                    b.Navigation("MrpBoms");

                    b.Navigation("MrpProductions");

                    b.Navigation("PosConfigs");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("StockMoves");

                    b.Navigation("StockPickings");

                    b.Navigation("StockRules");

                    b.Navigation("StockWarehouseInTypes");

                    b.Navigation("StockWarehouseIntTypes");

                    b.Navigation("StockWarehouseManuTypes");

                    b.Navigation("StockWarehouseOutTypes");

                    b.Navigation("StockWarehousePackTypes");

                    b.Navigation("StockWarehousePbmTypes");

                    b.Navigation("StockWarehousePickTypes");

                    b.Navigation("StockWarehousePosTypes");

                    b.Navigation("StockWarehouseReturnTypes");

                    b.Navigation("StockWarehouseSamTypes");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockQuantPackage", b =>
                {
                    b.Navigation("StockMoveLinePackages");

                    b.Navigation("StockMoveLineResultPackages");

                    b.Navigation("StockPackageLevels");

                    b.Navigation("StockQuants");

                    b.Navigation("StockScraps");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockReplenishmentInfo", b =>
                {
                    b.Navigation("StockReplenishmentOptions");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockReturnPicking", b =>
                {
                    b.Navigation("StockReturnPickingLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockRoute", b =>
                {
                    b.Navigation("PosConfigs");

                    b.Navigation("SaleOrderLines");

                    b.Navigation("StockReplenishmentOptions");

                    b.Navigation("StockRules");

                    b.Navigation("StockWarehouseCrossdockRoutes");

                    b.Navigation("StockWarehouseDeliveryRoutes");

                    b.Navigation("StockWarehouseOrderpoints");

                    b.Navigation("StockWarehousePbmRoutes");

                    b.Navigation("StockWarehouseReceptionRoutes");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockRule", b =>
                {
                    b.Navigation("StockMoves");

                    b.Navigation("StockWarehouseBuyPulls");

                    b.Navigation("StockWarehouseManufactureMtoPulls");

                    b.Navigation("StockWarehouseManufacturePulls");

                    b.Navigation("StockWarehouseMtoPulls");

                    b.Navigation("StockWarehousePbmMtoPulls");

                    b.Navigation("StockWarehouseSamRules");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockScrap", b =>
                {
                    b.Navigation("StockWarnInsufficientQtyScraps");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockStorageCategory", b =>
                {
                    b.Navigation("StockLocations");

                    b.Navigation("StockPutawayRules");

                    b.Navigation("StockQuants");

                    b.Navigation("StockStorageCategoryCapacities");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockTrackConfirmation", b =>
                {
                    b.Navigation("StockTrackLines");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockValuationLayer", b =>
                {
                    b.Navigation("InverseStockValuationLayerNavigation");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockWarehouse", b =>
                {
                    b.Navigation("PosConfigs");

                    b.Navigation("ProductReplenishes");

                    b.Navigation("SaleOrders");

                    b.Navigation("StockLocations");

                    b.Navigation("StockMoves");

                    b.Navigation("StockPickingTypes");

                    b.Navigation("StockRouteSuppliedWhs");

                    b.Navigation("StockRouteSupplierWhs");

                    b.Navigation("StockRulePropagateWarehouses");

                    b.Navigation("StockRuleWarehouses");

                    b.Navigation("StockWarehouseOrderpoints");

                    b.Navigation("Websites");
                });

            modelBuilder.Entity("Bamboo.Core.Models.StockWarehouseOrderpoint", b =>
                {
                    b.Navigation("MrpProductions");

                    b.Navigation("PurchaseOrderLines");

                    b.Navigation("StockMoves");

                    b.Navigation("StockReplenishmentInfos");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ThemeIrAsset", b =>
                {
                    b.Navigation("IrAssets");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ThemeIrAttachment", b =>
                {
                    b.Navigation("IrAttachments");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ThemeIrUiView", b =>
                {
                    b.Navigation("IrUiViews");

                    b.Navigation("ThemeWebsitePages");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ThemeWebsiteMenu", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("WebsiteMenus");
                });

            modelBuilder.Entity("Bamboo.Core.Models.ThemeWebsitePage", b =>
                {
                    b.Navigation("ThemeWebsiteMenus");

                    b.Navigation("WebsitePages");
                });

            modelBuilder.Entity("Bamboo.Core.Models.UomCategory", b =>
                {
                    b.Navigation("UomUoms");
                });

            modelBuilder.Entity("Bamboo.Core.Models.UomUom", b =>
                {
                    b.Navigation("AccountAnalyticLines");

                    b.Navigation("AccountMoveLines");

                    b.Navigation("BarcodeRules");

                    b.Navigation("HrExpenses");

                    b.Navigation("MrpBomByproducts");

                    b.Navigation("MrpBomLines");

                    b.Navigation("MrpBoms");

                    b.Navigation("MrpProductions");

                    b.Navigation("MrpUnbuilds");

                    b.Navigation("MrpWorkorders");

                    b.Navigation("ProductReplenishes");

                    b.Navigation("ProductTemplateUomPos");

                    b.Navigation("ProductTemplateUoms");

                    b.Navigation("PurchaseOrderLines");

                    b.Navigation("RepairFees");

                    b.Navigation("RepairLines");

                    b.Navigation("RepairOrders");

                    b.Navigation("SaleOrderLines");

                    b.Navigation("SaleOrderOptions");

                    b.Navigation("SaleOrderTemplateLines");

                    b.Navigation("SaleOrderTemplateOptions");

                    b.Navigation("StockLots");

                    b.Navigation("StockMoveLines");

                    b.Navigation("StockMoves");

                    b.Navigation("StockScraps");
                });

            modelBuilder.Entity("Bamboo.Core.Models.UtmCampaign", b =>
                {
                    b.Navigation("AccountMoves");

                    b.Navigation("CrmLeads");

                    b.Navigation("HrApplicants");

                    b.Navigation("SaleOrders");
                });

            modelBuilder.Entity("Bamboo.Core.Models.UtmMedium", b =>
                {
                    b.Navigation("AccountMoves");

                    b.Navigation("CrmLeads");

                    b.Navigation("HrApplicants");

                    b.Navigation("HrRecruitmentSources");

                    b.Navigation("SaleOrders");
                });

            modelBuilder.Entity("Bamboo.Core.Models.UtmSource", b =>
                {
                    b.Navigation("AccountMoves");

                    b.Navigation("CrmLeads");

                    b.Navigation("HrApplicants");

                    b.Navigation("HrRecruitmentSources");

                    b.Navigation("SaleOrders");
                });

            modelBuilder.Entity("Bamboo.Core.Models.UtmStage", b =>
                {
                    b.Navigation("UtmCampaigns");
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebEditorConverterTestSub", b =>
                {
                    b.Navigation("WebEditorConverterTests");
                });

            modelBuilder.Entity("Bamboo.Core.Models.Website", b =>
                {
                    b.Navigation("AccountMoves");

                    b.Navigation("HrJobs");

                    b.Navigation("IrAssets");

                    b.Navigation("IrAttachments");

                    b.Navigation("IrUiViews");

                    b.Navigation("PaymentProviders");

                    b.Navigation("ProductPricelists");

                    b.Navigation("ProductPublicCategories");

                    b.Navigation("ProductTags");

                    b.Navigation("ProductTemplates");

                    b.Navigation("ResCompanies");

                    b.Navigation("ResConfigSettings");

                    b.Navigation("ResPartners");

                    b.Navigation("ResUsers");

                    b.Navigation("SaleOrders");

                    b.Navigation("StockPickings");

                    b.Navigation("WebsiteMenus");

                    b.Navigation("WebsitePages");

                    b.Navigation("WebsiteRewrites");

                    b.Navigation("WebsiteSaleExtraFields");

                    b.Navigation("WebsiteSnippetFilters");

                    b.Navigation("WebsiteVisitors");
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteBaseUnit", b =>
                {
                    b.Navigation("ProductProducts");

                    b.Navigation("ProductTemplates");
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteMenu", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsitePage", b =>
                {
                    b.Navigation("WebsiteMenus");

                    b.Navigation("WebsiteTracks");
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteRoute", b =>
                {
                    b.Navigation("WebsiteRewrites");
                });

            modelBuilder.Entity("Bamboo.Core.Models.WebsiteVisitor", b =>
                {
                    b.Navigation("WebsiteTracks");
                });
#pragma warning restore 612, 618
        }
    }
}

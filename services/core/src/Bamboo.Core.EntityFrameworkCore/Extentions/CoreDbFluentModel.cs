using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

using Bamboo.Core.Models;

namespace Bamboo.Core.EntityFrameworkCore;
public static class CoreDbtModelFluentCreatingExtensions
{

    public static void ConfigureCoreFluentExt(this ModelBuilder modelBuilder)
    {
        modelBuilder.HasPostgresExtension("pg_trgm");

        modelBuilder.Entity<AccountAccount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_account_pkey");

            entity.ToTable("account_account");

            entity.HasIndex(e => new { e.Code, e.TenantId }, "account_account_code_company_uniq").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountType).HasColumnName("account_type");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.Deprecated).HasColumnName("deprecated");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.IncludeInitialBalance).HasColumnName("include_initial_balance");
            entity.Property(e => e.InternalGroup).HasColumnName("internal_group");
            entity.Property(e => e.IsOffBalance).HasColumnName("is_off_balance");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.NonTrade).HasColumnName("non_trade");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.Reconcile).HasColumnName("reconcile");
            entity.Property(e => e.RootId).HasColumnName("root_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_account_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_currency_id_fkey");

            entity.HasOne(d => d.Group).WithMany(p => p.AccountAccounts)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_group_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.AccountAccounts)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_message_main_attachment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_write_uid_fkey");
            
            // modelBuilder.SharedTypeEntity<Dictionary<string, object>>("AccountAccountAccountTag", builder =>
            // {
            //     builder.Property<Guid>("AccountAccountId");
            //     builder.Property<long>("AccountAccountTagId");
            // });

            // No new tables
            //entity.HasMany(d => d.AccountAccountTags).WithMany(p => p.AccountAccounts)
            entity.HasMany<AccountAccountTag>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountAccountTag",
                    r => r.HasOne<AccountAccountTag>().WithMany()
                        .HasForeignKey("AccountAccountTagId")
                        .HasConstraintName("account_account_account_tag_account_account_tag_id_fkey"),
                    l => l.HasOne<AccountAccount>().WithMany()
                        .HasForeignKey("AccountAccountId")
                        .HasConstraintName("account_account_account_tag_account_account_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountAccountId", "AccountAccountTagId").HasName("account_account_account_tag_pkey");
                        j.ToTable("account_account_account_tag");
                        j.HasIndex(new[] { "AccountAccountTagId", "AccountAccountId" }, "account_account_account_tag_account_account_tag_id_account__idx");
                    });

            //entity.HasMany(d => d.AccountJournals).WithMany(p => p.AccountAccounts)
            entity.HasMany<AccountJournal>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountAccountJournalRel",
                    r => r.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("AccountJournalId")
                        .HasConstraintName("account_account_account_journal_rel_account_journal_id_fkey"),
                    l => l.HasOne<AccountAccount>().WithMany()
                        .HasForeignKey("AccountAccountId")
                        .HasConstraintName("account_account_account_journal_rel_account_account_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountAccountId", "AccountJournalId").HasName("account_account_account_journal_rel_pkey");
                        j.ToTable("account_account_account_journal_rel");
                        j.HasIndex(new[] { "AccountJournalId", "AccountAccountId" }, "account_account_account_journ_account_journal_id_account_ac_idx");
                    });

            //entity.HasMany(d => d.Taxes).WithMany(p => p.Accounts)
            entity.HasMany<AccountTax>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountTaxDefaultRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("TaxId")
                        .HasConstraintName("account_account_tax_default_rel_tax_id_fkey"),
                    l => l.HasOne<AccountAccount>().WithMany()
                        .HasForeignKey("AccountId")
                        .HasConstraintName("account_account_tax_default_rel_account_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountId", "TaxId").HasName("account_account_tax_default_rel_pkey");
                        j.ToTable("account_account_tax_default_rel");
                        j.HasIndex(new[] { "TaxId", "AccountId" }, "account_account_tax_default_rel_tax_id_account_id_idx");
                    });
        });

        modelBuilder.Entity<AccountAccountTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_account_tag_pkey");

            entity.ToTable("account_account_tag");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Applicability).HasColumnName("applicability");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.CountryId).HasColumnName("country_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.TaxNegate).HasColumnName("tax_negate");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCountry>().WithMany()
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_tag_country_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_tag_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_tag_write_uid_fkey");
        });

        modelBuilder.Entity<AccountAccountTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_account_template_pkey");

            entity.ToTable("account_account_template");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountType).HasColumnName("account_type");
            entity.Property(e => e.ChartTemplateId).HasColumnName("chart_template_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Nocreate).HasColumnName("nocreate");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.Reconcile).HasColumnName("reconcile");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.ChartTemplate).WithMany(p => p.AccountAccountTemplates)
                .HasForeignKey(d => d.ChartTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_template_chart_template_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_template_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_template_currency_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.AccountAccountTemplates)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_template_message_main_attachment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_template_write_uid_fkey");

            //entity.HasMany(d => d.AccountAccountTags).WithMany(p => p.AccountAccountTemplates)
            entity.HasMany<AccountAccountTag>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountTemplateAccountTag",
                    r => r.HasOne<AccountAccountTag>().WithMany()
                        .HasForeignKey("AccountAccountTagId")
                        .HasConstraintName("account_account_template_account_ta_account_account_tag_id_fkey"),
                    l => l.HasOne<AccountAccountTemplate>().WithMany()
                        .HasForeignKey("AccountAccountTemplateId")
                        .HasConstraintName("account_account_template_accou_account_account_template_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountAccountTemplateId", "AccountAccountTagId").HasName("account_account_template_account_tag_pkey");
                        j.ToTable("account_account_template_account_tag");
                        j.HasIndex(new[] { "AccountAccountTagId", "AccountAccountTemplateId" }, "account_account_template_acco_account_account_tag_id_accoun_idx");
                    });

            //entity.HasMany(d => d.Taxes).WithMany(p => p.Accounts)
            entity.HasMany<AccountTaxTemplate>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountTemplateTaxRel",
                    r => r.HasOne<AccountTaxTemplate>().WithMany()
                        .HasForeignKey("TaxId")
                        .HasConstraintName("account_account_template_tax_rel_tax_id_fkey"),
                    l => l.HasOne<AccountAccountTemplate>().WithMany()
                        .HasForeignKey("AccountId")
                        .HasConstraintName("account_account_template_tax_rel_account_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountId", "TaxId").HasName("account_account_template_tax_rel_pkey");
                        j.ToTable("account_account_template_tax_rel");
                        j.HasIndex(new[] { "TaxId", "AccountId" }, "account_account_template_tax_rel_tax_id_account_id_idx");
                    });
        });

        modelBuilder.Entity<AccountAccountType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_account_type_pkey");

            entity.ToTable("account_account_type");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_type_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_account_type_write_uid_fkey");
        });

        modelBuilder.Entity<AccountAccruedOrdersWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_accrued_orders_wizard_pkey");

            entity.ToTable("account_accrued_orders_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.ReversalDate).HasColumnName("reversal_date");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Account).WithMany(p => p.AccountAccruedOrdersWizards)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_accrued_orders_wizard_account_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_accrued_orders_wizard_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_accrued_orders_wizard_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_accrued_orders_wizard_currency_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_accrued_orders_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<AccountAgedTrialBalance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_aged_trial_balance_pkey");

            entity.ToTable("account_aged_trial_balance");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.PeriodLength).HasColumnName("period_length");
            entity.Property(e => e.ResultSelection).HasColumnName("result_selection");
            entity.Property(e => e.TargetMove).HasColumnName("target_move");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_aged_trial_balance_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_aged_trial_balance_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_aged_trial_balance_write_uid_fkey");

            //entity.HasMany(d => d.AccountJournals).WithMany(p => p.AccountAgedTrialBalances)
            entity.HasMany<AccountJournal>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAgedTrialBalanceAccountJournalRel",
                    r => r.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("AccountJournalId")
                        .HasConstraintName("account_aged_trial_balance_account_jour_account_journal_id_fkey"),
                    l => l.HasOne<AccountAgedTrialBalance>().WithMany()
                        .HasForeignKey("AccountAgedTrialBalanceId")
                        .HasConstraintName("account_aged_trial_balance_ac_account_aged_trial_balance_i_fkey"),
                    j =>
                    {
                        j.HasKey("AccountAgedTrialBalanceId", "AccountJournalId").HasName("account_aged_trial_balance_account_journal_rel_pkey");
                        j.ToTable("account_aged_trial_balance_account_journal_rel");
                        j.HasIndex(new[] { "AccountJournalId", "AccountAgedTrialBalanceId" }, "account_aged_trial_balance_ac_account_journal_id_account_ag_idx");
                    });

            //entity.HasMany(d => d.ResPartners).WithMany(p => p.AccountAgedTrialBalances)
            entity.HasMany<ResPartner>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAgedTrialBalanceResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("account_aged_trial_balance_res_partner_rel_res_partner_id_fkey"),
                    l => l.HasOne<AccountAgedTrialBalance>().WithMany()
                        .HasForeignKey("AccountAgedTrialBalanceId")
                        .HasConstraintName("account_aged_trial_balance_re_account_aged_trial_balance_i_fkey"),
                    j =>
                    {
                        j.HasKey("AccountAgedTrialBalanceId", "ResPartnerId").HasName("account_aged_trial_balance_res_partner_rel_pkey");
                        j.ToTable("account_aged_trial_balance_res_partner_rel");
                        j.HasIndex(new[] { "ResPartnerId", "AccountAgedTrialBalanceId" }, "account_aged_trial_balance_re_res_partner_id_account_aged_t_idx");
                    });
        });

        modelBuilder.Entity<AccountAnalyticAccount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_analytic_account_pkey");

            entity.ToTable("account_analytic_account");

            entity.HasIndex(e => e.Code, "account_analytic_account_code_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PlanId).HasColumnName("plan_id");
            entity.Property(e => e.RootPlanId).HasColumnName("root_plan_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_account_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_account_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.AccountAnalyticAccounts)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_account_message_main_attachment_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_account_partner_id_fkey");

            entity.HasOne(d => d.Plan).WithMany(p => p.AccountAnalyticAccountPlans)
                .HasForeignKey(d => d.PlanId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_analytic_account_plan_id_fkey");

            entity.HasOne(d => d.RootPlan).WithMany(p => p.AccountAnalyticAccountRootPlans)
                .HasForeignKey(d => d.RootPlanId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_account_root_plan_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_account_write_uid_fkey");
        });

        modelBuilder.Entity<AccountAnalyticApplicability>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_analytic_applicability_pkey");

            entity.ToTable("account_analytic_applicability");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountPrefix).HasColumnName("account_prefix");
            entity.Property(e => e.AnalyticPlanId).HasColumnName("analytic_plan_id");
            entity.Property(e => e.Applicability).HasColumnName("applicability");
            entity.Property(e => e.BusinessDomain).HasColumnName("business_domain");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ProductCategId).HasColumnName("product_categ_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AnalyticPlan).WithMany(p => p.AccountAnalyticApplicabilities)
                .HasForeignKey(d => d.AnalyticPlanId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_applicability_analytic_plan_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_applicability_create_uid_fkey");

            entity.HasOne(d => d.ProductCateg).WithMany(p => p.AccountAnalyticApplicabilities)
                .HasForeignKey(d => d.ProductCategId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_applicability_product_categ_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_applicability_write_uid_fkey");
        });

        modelBuilder.Entity<AccountAnalyticDistributionModel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_analytic_distribution_model_pkey");

            entity.ToTable("account_analytic_distribution_model");

            entity.HasIndex(e => e.AnalyticDistribution, "account_analytic_distribution_model_analytic_distribution_gin_i").HasMethod("gin");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountPrefix).HasColumnName("account_prefix");
            entity.Property(e => e.AnalyticDistribution)
                .HasColumnType("jsonb")
                .HasColumnName("analytic_distribution");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.PartnerCategoryId).HasColumnName("partner_category_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.ProductCategId).HasColumnName("product_categ_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_analytic_distribution_model_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_distribution_model_create_uid_fkey");

            entity.HasOne(d => d.PartnerCategory).WithMany(p => p.AccountAnalyticDistributionModels)
                .HasForeignKey(d => d.PartnerCategoryId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_analytic_distribution_model_partner_category_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_analytic_distribution_model_partner_id_fkey");

            entity.HasOne(d => d.ProductCateg).WithMany(p => p.AccountAnalyticDistributionModels)
                .HasForeignKey(d => d.ProductCategId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_analytic_distribution_model_product_categ_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.AccountAnalyticDistributionModels)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_analytic_distribution_model_product_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_distribution_model_write_uid_fkey");
        });

        modelBuilder.Entity<AccountAnalyticLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_analytic_line_pkey");

            entity.ToTable("account_analytic_line");

            entity.HasIndex(e => e.AccountId, "account_analytic_line_account_id_index");

            entity.HasIndex(e => e.Date, "account_analytic_line_date_index");

            entity.HasIndex(e => e.MoveLineId, "account_analytic_line_move_line_id_index");

            entity.HasIndex(e => e.UserId, "account_analytic_line_user_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.Category).HasColumnName("category");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.GeneralAccountId).HasColumnName("general_account_id");
            entity.Property(e => e.JournalId).HasColumnName("journal_id");
            entity.Property(e => e.MoveLineId).HasColumnName("move_line_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PlanId).HasColumnName("plan_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductUomId).HasColumnName("product_uom_id");
            entity.Property(e => e.Ref).HasColumnName("ref");
            entity.Property(e => e.SoLine).HasColumnName("so_line");
            entity.Property(e => e.UnitAmount).HasColumnName("unit_amount");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Account).WithMany(p => p.AccountAnalyticLines)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_analytic_line_account_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_analytic_line_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_line_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_line_currency_id_fkey");

            entity.HasOne(d => d.GeneralAccount).WithMany(p => p.AccountAnalyticLines)
                .HasForeignKey(d => d.GeneralAccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_analytic_line_general_account_id_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.AccountAnalyticLines)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_line_journal_id_fkey");

            entity.HasOne(d => d.MoveLine).WithMany(p => p.AccountAnalyticLines)
                .HasForeignKey(d => d.MoveLineId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_analytic_line_move_line_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_line_partner_id_fkey");

            entity.HasOne(d => d.Plan).WithMany(p => p.AccountAnalyticLines)
                .HasForeignKey(d => d.PlanId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_line_plan_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.AccountAnalyticLines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_line_product_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.AccountAnalyticLines)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_line_product_uom_id_fkey");

            entity.HasOne(d => d.SoLineNavigation).WithMany(p => p.AccountAnalyticLines)
                .HasForeignKey(d => d.SoLine)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_line_so_line_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_line_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_line_write_uid_fkey");
        });

        modelBuilder.Entity<AccountAnalyticPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_analytic_plan_pkey");

            entity.ToTable("account_analytic_plan");

            entity.HasIndex(e => e.ParentPath, "account_analytic_plan_parent_path_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CompleteName).HasColumnName("complete_name");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DefaultApplicability).HasColumnName("default_applicability");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.ParentPath).HasColumnName("parent_path");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_plan_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_plan_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_analytic_plan_parent_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_analytic_plan_write_uid_fkey");
        });

        modelBuilder.Entity<AccountAssetAsset>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_asset_asset_pkey");

            entity.ToTable("account_asset_asset");

            entity.HasIndex(e => e.AnalyticDistribution, "account_asset_asset_analytic_distribution_gin_index").HasMethod("gin");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountAnalyticId).HasColumnName("account_analytic_id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AnalyticDistribution)
                .HasColumnType("jsonb")
                .HasColumnName("analytic_distribution");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.DateFirstDepreciation).HasColumnName("date_first_depreciation");
            entity.Property(e => e.FirstDepreciationManualDate).HasColumnName("first_depreciation_manual_date");
            entity.Property(e => e.InvoiceId).HasColumnName("invoice_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Method).HasColumnName("method");
            entity.Property(e => e.MethodEnd).HasColumnName("method_end");
            entity.Property(e => e.MethodNumber).HasColumnName("method_number");
            entity.Property(e => e.MethodPeriod).HasColumnName("method_period");
            entity.Property(e => e.MethodProgressFactor).HasColumnName("method_progress_factor");
            entity.Property(e => e.MethodTime).HasColumnName("method_time");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.Prorata).HasColumnName("prorata");
            entity.Property(e => e.SalvageValue).HasColumnName("salvage_value");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AccountAnalytic).WithMany(p => p.AccountAssetAssets)
                .HasForeignKey(d => d.AccountAnalyticId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_asset_asset_account_analytic_id_fkey");

            entity.HasOne(d => d.Category).WithMany(p => p.AccountAssetAssets)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_asset_asset_category_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_asset_asset_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_asset_asset_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_asset_asset_currency_id_fkey");

            entity.HasOne(d => d.Invoice).WithMany(p => p.AccountAssetAssets)
                .HasForeignKey(d => d.InvoiceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_asset_asset_invoice_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.AccountAssetAssets)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_asset_asset_message_main_attachment_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_asset_asset_partner_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_asset_asset_write_uid_fkey");
        });

        modelBuilder.Entity<AccountAssetCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_asset_category_pkey");

            entity.ToTable("account_asset_category");

            entity.HasIndex(e => e.AnalyticDistribution, "account_asset_category_analytic_distribution_gin_index").HasMethod("gin");

            entity.HasIndex(e => e.Name, "account_asset_category_name_index");

            entity.HasIndex(e => e.Type, "account_asset_category_type_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountAnalyticId).HasColumnName("account_analytic_id");
            entity.Property(e => e.AccountAssetId).HasColumnName("account_asset_id");
            entity.Property(e => e.AccountDepreciationExpenseId).HasColumnName("account_depreciation_expense_id");
            entity.Property(e => e.AccountDepreciationId).HasColumnName("account_depreciation_id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AnalyticDistribution)
                .HasColumnType("jsonb")
                .HasColumnName("analytic_distribution");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFirstDepreciation).HasColumnName("date_first_depreciation");
            entity.Property(e => e.GroupEntries).HasColumnName("group_entries");
            entity.Property(e => e.JournalId).HasColumnName("journal_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Method).HasColumnName("method");
            entity.Property(e => e.MethodEnd).HasColumnName("method_end");
            entity.Property(e => e.MethodNumber).HasColumnName("method_number");
            entity.Property(e => e.MethodPeriod).HasColumnName("method_period");
            entity.Property(e => e.MethodProgressFactor).HasColumnName("method_progress_factor");
            entity.Property(e => e.MethodTime).HasColumnName("method_time");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OpenAsset).HasColumnName("open_asset");
            entity.Property(e => e.Prorata).HasColumnName("prorata");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AccountAnalytic).WithMany(p => p.AccountAssetCategories)
                .HasForeignKey(d => d.AccountAnalyticId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_asset_category_account_analytic_id_fkey");

            entity.HasOne(d => d.AccountAsset).WithMany(p => p.AccountAssetCategoryAccountAssets)
                .HasForeignKey(d => d.AccountAssetId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_asset_category_account_asset_id_fkey");

            entity.HasOne(d => d.AccountDepreciationExpense).WithMany(p => p.AccountAssetCategoryAccountDepreciationExpenses)
                .HasForeignKey(d => d.AccountDepreciationExpenseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_asset_category_account_depreciation_expense_id_fkey");

            entity.HasOne(d => d.AccountDepreciation).WithMany(p => p.AccountAssetCategoryAccountDepreciations)
                .HasForeignKey(d => d.AccountDepreciationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_asset_category_account_depreciation_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_asset_category_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_asset_category_create_uid_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.AccountAssetCategories)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_asset_category_journal_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.AccountAssetCategories)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_asset_category_message_main_attachment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_asset_category_write_uid_fkey");
        });

        modelBuilder.Entity<AccountAssetDepreciationLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_asset_depreciation_line_pkey");

            entity.ToTable("account_asset_depreciation_line");

            entity.HasIndex(e => e.DepreciationDate, "account_asset_depreciation_line_depreciation_date_index");

            entity.HasIndex(e => e.Name, "account_asset_depreciation_line_name_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.AssetId).HasColumnName("asset_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DepreciatedValue).HasColumnName("depreciated_value");
            entity.Property(e => e.DepreciationDate).HasColumnName("depreciation_date");
            entity.Property(e => e.MoveCheck).HasColumnName("move_check");
            entity.Property(e => e.MoveId).HasColumnName("move_id");
            entity.Property(e => e.MovePostedCheck).HasColumnName("move_posted_check");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.RemainingValue).HasColumnName("remaining_value");
            entity.Property(e => e.Sequence).HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Asset).WithMany(p => p.AccountAssetDepreciationLines)
                .HasForeignKey(d => d.AssetId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_asset_depreciation_line_asset_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_asset_depreciation_line_create_uid_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.AccountAssetDepreciationLines)
                .HasForeignKey(d => d.MoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_asset_depreciation_line_move_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_asset_depreciation_line_write_uid_fkey");
        });

        modelBuilder.Entity<AccountAutomaticEntryWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_automatic_entry_wizard_pkey");

            entity.ToTable("account_automatic_entry_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountType).HasColumnName("account_type");
            entity.Property(e => e.Action).HasColumnName("action");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.DestinationAccountId).HasColumnName("destination_account_id");
            entity.Property(e => e.Percentage).HasColumnName("percentage");
            entity.Property(e => e.TotalAmount).HasColumnName("total_amount");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_automatic_entry_wizard_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_automatic_entry_wizard_create_uid_fkey");

            entity.HasOne(d => d.DestinationAccount).WithMany(p => p.AccountAutomaticEntryWizards)
                .HasForeignKey(d => d.DestinationAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_automatic_entry_wizard_destination_account_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_automatic_entry_wizard_write_uid_fkey");

            //entity.HasMany(d => d.AccountMoveLines).WithMany(p => p.AccountAutomaticEntryWizards)
            entity.HasMany<AccountMoveLine>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAutomaticEntryWizardAccountMoveLineRel",
                    r => r.HasOne<AccountMoveLine>().WithMany()
                        .HasForeignKey("AccountMoveLineId")
                        .HasConstraintName("account_automatic_entry_wizard_accoun_account_move_line_id_fkey"),
                    l => l.HasOne<AccountAutomaticEntryWizard>().WithMany()
                        .HasForeignKey("AccountAutomaticEntryWizardId")
                        .HasConstraintName("account_automatic_entry_wizar_account_automatic_entry_wiza_fkey"),
                    j =>
                    {
                        j.HasKey("AccountAutomaticEntryWizardId", "AccountMoveLineId").HasName("account_automatic_entry_wizard_account_move_line_rel_pkey");
                        j.ToTable("account_automatic_entry_wizard_account_move_line_rel");
                        j.HasIndex(new[] { "AccountMoveLineId", "AccountAutomaticEntryWizardId" }, "account_automatic_entry_wizar_account_move_line_id_account__idx");
                    });
        });

        modelBuilder.Entity<AccountBalanceReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_balance_report_pkey");

            entity.ToTable("account_balance_report");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.DisplayAccount).HasColumnName("display_account");
            entity.Property(e => e.TargetMove).HasColumnName("target_move");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_balance_report_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_balance_report_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_balance_report_write_uid_fkey");

            //entity.HasMany(d => d.AccountAccounts).WithMany(p => p.AccountBalanceReports)
            entity.HasMany<AccountAccount>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountAccountBalanceReportRel",
                    r => r.HasOne<AccountAccount>().WithMany()
                        .HasForeignKey("AccountAccountId")
                        .HasConstraintName("account_account_account_balance_report__account_account_id_fkey"),
                    l => l.HasOne<AccountBalanceReport>().WithMany()
                        .HasForeignKey("AccountBalanceReportId")
                        .HasConstraintName("account_account_account_balance__account_balance_report_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountBalanceReportId", "AccountAccountId").HasName("account_account_account_balance_report_rel_pkey");
                        j.ToTable("account_account_account_balance_report_rel");
                        j.HasIndex(new[] { "AccountAccountId", "AccountBalanceReportId" }, "account_account_account_balan_account_account_id_account_ba_idx");
                    });

            //entity.HasMany(d => d.AccountAnalyticAccounts).WithMany(p => p.AccountBalanceReports)
            entity.HasMany<AccountAnalyticAccount>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTrialBalanceAnalyticRel",
                    r => r.HasOne<AccountAnalyticAccount>().WithMany()
                        .HasForeignKey("AccountAnalyticAccountId")
                        .HasConstraintName("account_trial_balance_analytic_account_analytic_account_id_fkey"),
                    l => l.HasOne<AccountBalanceReport>().WithMany()
                        .HasForeignKey("AccountBalanceReportId")
                        .HasConstraintName("account_trial_balance_analytic_r_account_balance_report_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountBalanceReportId", "AccountAnalyticAccountId").HasName("account_trial_balance_analytic_rel_pkey");
                        j.ToTable("account_trial_balance_analytic_rel");
                        j.HasIndex(new[] { "AccountAnalyticAccountId", "AccountBalanceReportId" }, "account_trial_balance_analyti_account_analytic_account_id_a_idx");
                    });

            //entity.HasMany(d => d.Journals).WithMany(p => p.Accounts)
            entity.HasMany<AccountJournal>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountBalanceReportJournalRel",
                    r => r.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("JournalId")
                        .HasConstraintName("account_balance_report_journal_rel_journal_id_fkey"),
                    l => l.HasOne<AccountBalanceReport>().WithMany()
                        .HasForeignKey("AccountId")
                        .HasConstraintName("account_balance_report_journal_rel_account_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountId", "JournalId").HasName("account_balance_report_journal_rel_pkey");
                        j.ToTable("account_balance_report_journal_rel");
                        j.HasIndex(new[] { "JournalId", "AccountId" }, "account_balance_report_journal_rel_journal_id_account_id_idx");
                    });

            //entity.HasMany(d => d.ResPartners).WithMany(p => p.AccountBalanceReports)
            entity.HasMany<ResPartner>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountBalanceReportResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("account_balance_report_res_partner_rel_res_partner_id_fkey"),
                    l => l.HasOne<AccountBalanceReport>().WithMany()
                        .HasForeignKey("AccountBalanceReportId")
                        .HasConstraintName("account_balance_report_res_partn_account_balance_report_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountBalanceReportId", "ResPartnerId").HasName("account_balance_report_res_partner_rel_pkey");
                        j.ToTable("account_balance_report_res_partner_rel");
                        j.HasIndex(new[] { "ResPartnerId", "AccountBalanceReportId" }, "account_balance_report_res_pa_res_partner_id_account_balanc_idx");
                    });
        });

        modelBuilder.Entity<AccountBankStatement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_bank_statement_pkey");

            entity.ToTable("account_bank_statement");

            entity.HasIndex(e => e.FirstLineIndex, "account_bank_statement_first_line_index_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.BalanceEnd).HasColumnName("balance_end");
            entity.Property(e => e.BalanceEndReal).HasColumnName("balance_end_real");
            entity.Property(e => e.BalanceStart).HasColumnName("balance_start");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.FirstLineIndex).HasColumnName("first_line_index");
            entity.Property(e => e.IsComplete).HasColumnName("is_complete");
            entity.Property(e => e.JournalId).HasColumnName("journal_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Reference).HasColumnName("reference");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_create_uid_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.AccountBankStatements)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_journal_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_write_uid_fkey");

            //entity.HasMany(d => d.IrAttachments).WithMany(p => p.AccountBankStatements)
            entity.HasMany<IrAttachment>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountBankStatementIrAttachmentRel",
                    r => r.HasOne<IrAttachment>().WithMany()
                        .HasForeignKey("IrAttachmentId")
                        .HasConstraintName("account_bank_statement_ir_attachment_rel_ir_attachment_id_fkey"),
                    l => l.HasOne<AccountBankStatement>().WithMany()
                        .HasForeignKey("AccountBankStatementId")
                        .HasConstraintName("account_bank_statement_ir_attach_account_bank_statement_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountBankStatementId", "IrAttachmentId").HasName("account_bank_statement_ir_attachment_rel_pkey");
                        j.ToTable("account_bank_statement_ir_attachment_rel");
                        j.HasIndex(new[] { "IrAttachmentId", "AccountBankStatementId" }, "account_bank_statement_ir_att_ir_attachment_id_account_bank_idx");
                    });
        });

        modelBuilder.Entity<AccountBankStatementImport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_bank_statement_import_pkey");

            entity.ToTable("account_bank_statement_import");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_import_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_import_write_uid_fkey");

            //entity.HasMany(d => d.IrAttachments).WithMany(p => p.AccountBankStatementImports)
            entity.HasMany<IrAttachment>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountBankStatementImportIrAttachmentRel",
                    r => r.HasOne<IrAttachment>().WithMany()
                        .HasForeignKey("IrAttachmentId")
                        .HasConstraintName("account_bank_statement_import_ir_attachme_ir_attachment_id_fkey"),
                    l => l.HasOne<AccountBankStatementImport>().WithMany()
                        .HasForeignKey("AccountBankStatementImportId")
                        .HasConstraintName("account_bank_statement_import_account_bank_statement_impor_fkey"),
                    j =>
                    {
                        j.HasKey("AccountBankStatementImportId", "IrAttachmentId").HasName("account_bank_statement_import_ir_attachment_rel_pkey");
                        j.ToTable("account_bank_statement_import_ir_attachment_rel");
                        j.HasIndex(new[] { "IrAttachmentId", "AccountBankStatementImportId" }, "account_bank_statement_import_ir_attachment_id_account_bank_idx");
                    });
        });

        modelBuilder.Entity<AccountBankStatementImportJournalCreation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_bank_statement_import_journal_creation_pkey");

            entity.ToTable("account_bank_statement_import_journal_creation");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.JournalId).HasColumnName("journal_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_import_journal_creation_create_uid_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.AccountBankStatementImportJournalCreations)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_bank_statement_import_journal_creation_journal_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_import_journal_creation_write_uid_fkey");
        });

        modelBuilder.Entity<AccountBankStatementLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_bank_statement_line_pkey");

            entity.ToTable("account_bank_statement_line");

            entity.HasIndex(e => e.InternalIndex, "account_bank_statement_line_internal_index_index");

            entity.HasIndex(e => e.UniqueImportId, "account_bank_statement_line_unique_import_id").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountNumber).HasColumnName("account_number");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.AmountCurrency).HasColumnName("amount_currency");
            entity.Property(e => e.AmountResidual).HasColumnName("amount_residual");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.ForeignCurrencyId).HasColumnName("foreign_currency_id");
            entity.Property(e => e.InternalIndex).HasColumnName("internal_index");
            entity.Property(e => e.IsReconciled).HasColumnName("is_reconciled");
            entity.Property(e => e.MoveId).HasColumnName("move_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PartnerName).HasColumnName("partner_name");
            entity.Property(e => e.PaymentRef).HasColumnName("payment_ref");
            entity.Property(e => e.PosSessionId).HasColumnName("pos_session_id");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.StatementId).HasColumnName("statement_id");
            entity.Property(e => e.TransactionType).HasColumnName("transaction_type");
            entity.Property(e => e.UniqueImportId).HasColumnName("unique_import_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_line_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_line_currency_id_fkey");

            entity.HasOne(d => d.ForeignCurrency).WithMany(p => p.AccountBankStatementLineForeignCurrencies)
                .HasForeignKey(d => d.ForeignCurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_line_foreign_currency_id_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.AccountBankStatementLines)
                .HasForeignKey(d => d.MoveId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_bank_statement_line_move_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_bank_statement_line_partner_id_fkey");

            entity.HasOne(d => d.PosSession).WithMany(p => p.AccountBankStatementLines)
                .HasForeignKey(d => d.PosSessionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_line_pos_session_id_fkey");

            entity.HasOne(d => d.Statement).WithMany(p => p.AccountBankStatementLines)
                .HasForeignKey(d => d.StatementId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_line_statement_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bank_statement_line_write_uid_fkey");

            //entity.HasMany(d => d.AccountPayments).WithMany(p => p.AccountBankStatementLines)
            entity.HasMany<AccountPayment>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountPaymentAccountBankStatementLineRel",
                    r => r.HasOne<AccountPayment>().WithMany()
                        .HasForeignKey("AccountPaymentId")
                        .HasConstraintName("account_payment_account_bank_statement__account_payment_id_fkey"),
                    l => l.HasOne<AccountBankStatementLine>().WithMany()
                        .HasForeignKey("AccountBankStatementLineId")
                        .HasConstraintName("account_payment_account_bank__account_bank_statement_line__fkey"),
                    j =>
                    {
                        j.HasKey("AccountBankStatementLineId", "AccountPaymentId").HasName("account_payment_account_bank_statement_line_rel_pkey");
                        j.ToTable("account_payment_account_bank_statement_line_rel");
                        j.HasIndex(new[] { "AccountPaymentId", "AccountBankStatementLineId" }, "account_payment_account_bank__account_payment_id_account_ba_idx");
                    });
        });

        modelBuilder.Entity<AccountBankbookReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_bankbook_report_pkey");

            entity.ToTable("account_bankbook_report");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.DisplayAccount).HasColumnName("display_account");
            entity.Property(e => e.InitialBalance).HasColumnName("initial_balance");
            entity.Property(e => e.Sortby).HasColumnName("sortby");
            entity.Property(e => e.TargetMove).HasColumnName("target_move");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bankbook_report_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_bankbook_report_write_uid_fkey");

            //entity.HasMany(d => d.AccountJournals).WithMany(p => p.AccountBankbookReports)
            entity.HasMany<AccountJournal>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountBankbookReportAccountJournalRel",
                    r => r.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("AccountJournalId")
                        .HasConstraintName("account_bankbook_report_account_journal_account_journal_id_fkey"),
                    l => l.HasOne<AccountBankbookReport>().WithMany()
                        .HasForeignKey("AccountBankbookReportId")
                        .HasConstraintName("account_bankbook_report_account_account_bankbook_report_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountBankbookReportId", "AccountJournalId").HasName("account_bankbook_report_account_journal_rel_pkey");
                        j.ToTable("account_bankbook_report_account_journal_rel");
                        j.HasIndex(new[] { "AccountJournalId", "AccountBankbookReportId" }, "account_bankbook_report_accou_account_journal_id_account_ba_idx");
                    });

            //entity.HasMany(d => d.Accounts).WithMany(p => p.ReportLines)
            entity.HasMany<AccountAccount>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountBankbookReport",
                    r => r.HasOne<AccountAccount>().WithMany()
                        .HasForeignKey("AccountId")
                        .HasConstraintName("account_account_bankbook_report_account_id_fkey"),
                    l => l.HasOne<AccountBankbookReport>().WithMany()
                        .HasForeignKey("ReportLineId")
                        .HasConstraintName("account_account_bankbook_report_report_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("ReportLineId", "AccountId").HasName("account_account_bankbook_report_pkey");
                        j.ToTable("account_account_bankbook_report");
                        j.HasIndex(new[] { "AccountId", "ReportLineId" }, "account_account_bankbook_report_account_id_report_line_id_idx");
                    });
        });

        modelBuilder.Entity<AccountBudgetPost>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_budget_post_pkey");

            entity.ToTable("account_budget_post");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_budget_post_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_budget_post_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_budget_post_write_uid_fkey");

            //entity.HasMany(d => d.Accounts).WithMany(p => p.Budgets)
            entity.HasMany<AccountAccount>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountBudgetRel",
                    r => r.HasOne<AccountAccount>().WithMany()
                        .HasForeignKey("AccountId")
                        .HasConstraintName("account_budget_rel_account_id_fkey"),
                    l => l.HasOne<AccountBudgetPost>().WithMany()
                        .HasForeignKey("BudgetId")
                        .HasConstraintName("account_budget_rel_budget_id_fkey"),
                    j =>
                    {
                        j.HasKey("BudgetId", "AccountId").HasName("account_budget_rel_pkey");
                        j.ToTable("account_budget_rel");
                        j.HasIndex(new[] { "AccountId", "BudgetId" }, "account_budget_rel_account_id_budget_id_idx");
                    });
        });

        modelBuilder.Entity<AccountCashRounding>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_cash_rounding_pkey");

            entity.ToTable("account_cash_rounding");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Rounding).HasColumnName("rounding");
            entity.Property(e => e.RoundingMethod).HasColumnName("rounding_method");
            entity.Property(e => e.Strategy).HasColumnName("strategy");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_cash_rounding_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_cash_rounding_write_uid_fkey");
        });

        modelBuilder.Entity<AccountCashbookReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_cashbook_report_pkey");

            entity.ToTable("account_cashbook_report");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.DisplayAccount).HasColumnName("display_account");
            entity.Property(e => e.InitialBalance).HasColumnName("initial_balance");
            entity.Property(e => e.Sortby).HasColumnName("sortby");
            entity.Property(e => e.TargetMove).HasColumnName("target_move");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_cashbook_report_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_cashbook_report_write_uid_fkey");

            //entity.HasMany(d => d.AccountJournals).WithMany(p => p.AccountCashbookReports)
            entity.HasMany<AccountJournal>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountCashbookReportAccountJournalRel",
                    r => r.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("AccountJournalId")
                        .HasConstraintName("account_cashbook_report_account_journal_account_journal_id_fkey"),
                    l => l.HasOne<AccountCashbookReport>().WithMany()
                        .HasForeignKey("AccountCashbookReportId")
                        .HasConstraintName("account_cashbook_report_account_account_cashbook_report_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountCashbookReportId", "AccountJournalId").HasName("account_cashbook_report_account_journal_rel_pkey");
                        j.ToTable("account_cashbook_report_account_journal_rel");
                        j.HasIndex(new[] { "AccountJournalId", "AccountCashbookReportId" }, "account_cashbook_report_accou_account_journal_id_account_ca_idx");
                    });

            //entity.HasMany(d => d.Accounts).WithMany(p => p.ReportLinesNavigation)
            entity.HasMany<AccountAccount>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountCashbookReport",
                    r => r.HasOne<AccountAccount>().WithMany()
                        .HasForeignKey("AccountId")
                        .HasConstraintName("account_account_cashbook_report_account_id_fkey"),
                    l => l.HasOne<AccountCashbookReport>().WithMany()
                        .HasForeignKey("ReportLineId")
                        .HasConstraintName("account_account_cashbook_report_report_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("ReportLineId", "AccountId").HasName("account_account_cashbook_report_pkey");
                        j.ToTable("account_account_cashbook_report");
                        j.HasIndex(new[] { "AccountId", "ReportLineId" }, "account_account_cashbook_report_account_id_report_line_id_idx");
                    });
        });

        modelBuilder.Entity<AccountChartTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_chart_template_pkey");

            entity.ToTable("account_chart_template");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountJournalEarlyPayDiscountGainAccountId).HasColumnName("account_journal_early_pay_discount_gain_account_id");
            entity.Property(e => e.AccountJournalEarlyPayDiscountLossAccountId).HasColumnName("account_journal_early_pay_discount_loss_account_id");
            entity.Property(e => e.AccountJournalPaymentCreditAccountId).HasColumnName("account_journal_payment_credit_account_id");
            entity.Property(e => e.AccountJournalPaymentDebitAccountId).HasColumnName("account_journal_payment_debit_account_id");
            entity.Property(e => e.AccountJournalSuspenseAccountId).HasColumnName("account_journal_suspense_account_id");
            entity.Property(e => e.BankAccountCodePrefix).HasColumnName("bank_account_code_prefix");
            entity.Property(e => e.CashAccountCodePrefix).HasColumnName("cash_account_code_prefix");
            entity.Property(e => e.CodeDigits).HasColumnName("code_digits");
            entity.Property(e => e.CountryId).HasColumnName("country_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.DefaultCashDifferenceExpenseAccountId).HasColumnName("default_cash_difference_expense_account_id");
            entity.Property(e => e.DefaultCashDifferenceIncomeAccountId).HasColumnName("default_cash_difference_income_account_id");
            entity.Property(e => e.DefaultPosReceivableAccountId).HasColumnName("default_pos_receivable_account_id");
            entity.Property(e => e.ExpenseCurrencyExchangeAccountId).HasColumnName("expense_currency_exchange_account_id");
            entity.Property(e => e.IncomeCurrencyExchangeAccountId).HasColumnName("income_currency_exchange_account_id");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PropertyAccountExpenseCategId).HasColumnName("property_account_expense_categ_id");
            entity.Property(e => e.PropertyAccountExpenseId).HasColumnName("property_account_expense_id");
            entity.Property(e => e.PropertyAccountIncomeCategId).HasColumnName("property_account_income_categ_id");
            entity.Property(e => e.PropertyAccountIncomeId).HasColumnName("property_account_income_id");
            entity.Property(e => e.PropertyAccountPayableId).HasColumnName("property_account_payable_id");
            entity.Property(e => e.PropertyAccountReceivableId).HasColumnName("property_account_receivable_id");
            entity.Property(e => e.PropertyAdvanceTaxPaymentAccountId).HasColumnName("property_advance_tax_payment_account_id");
            entity.Property(e => e.PropertyCashBasisBaseAccountId).HasColumnName("property_cash_basis_base_account_id");
            entity.Property(e => e.PropertyStockAccountInputCategId).HasColumnName("property_stock_account_input_categ_id");
            entity.Property(e => e.PropertyStockAccountOutputCategId).HasColumnName("property_stock_account_output_categ_id");
            entity.Property(e => e.PropertyStockValuationAccountId).HasColumnName("property_stock_valuation_account_id");
            entity.Property(e => e.PropertyTaxPayableAccountId).HasColumnName("property_tax_payable_account_id");
            entity.Property(e => e.PropertyTaxReceivableAccountId).HasColumnName("property_tax_receivable_account_id");
            entity.Property(e => e.SpokenLanguages).HasColumnName("spoken_languages");
            entity.Property(e => e.TransferAccountCodePrefix).HasColumnName("transfer_account_code_prefix");
            entity.Property(e => e.UseAngloSaxon).HasColumnName("use_anglo_saxon");
            entity.Property(e => e.UseStornoAccounting).HasColumnName("use_storno_accounting");
            entity.Property(e => e.Visible).HasColumnName("visible");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AccountJournalEarlyPayDiscountGainAccount).WithMany(p => p.AccountChartTemplateAccountJournalEarlyPayDiscountGainAccounts)
                .HasForeignKey(d => d.AccountJournalEarlyPayDiscountGainAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_account_journal_early_pay_discount_fkey1");

            entity.HasOne(d => d.AccountJournalEarlyPayDiscountLossAccount).WithMany(p => p.AccountChartTemplateAccountJournalEarlyPayDiscountLossAccounts)
                .HasForeignKey(d => d.AccountJournalEarlyPayDiscountLossAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_account_journal_early_pay_discount__fkey");

            entity.HasOne(d => d.AccountJournalPaymentCreditAccount).WithMany(p => p.AccountChartTemplateAccountJournalPaymentCreditAccounts)
                .HasForeignKey(d => d.AccountJournalPaymentCreditAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_account_journal_payment_credit_acco_fkey");

            entity.HasOne(d => d.AccountJournalPaymentDebitAccount).WithMany(p => p.AccountChartTemplateAccountJournalPaymentDebitAccounts)
                .HasForeignKey(d => d.AccountJournalPaymentDebitAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_account_journal_payment_debit_accou_fkey");

            entity.HasOne(d => d.AccountJournalSuspenseAccount).WithMany(p => p.AccountChartTemplateAccountJournalSuspenseAccounts)
                .HasForeignKey(d => d.AccountJournalSuspenseAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_account_journal_suspense_account_id_fkey");

            entity.HasOne<ResCountry>().WithMany()
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_country_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_chart_template_currency_id_fkey");

            entity.HasOne(d => d.DefaultCashDifferenceExpenseAccount).WithMany(p => p.AccountChartTemplateDefaultCashDifferenceExpenseAccounts)
                .HasForeignKey(d => d.DefaultCashDifferenceExpenseAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_default_cash_difference_expense_acc_fkey");

            entity.HasOne(d => d.DefaultCashDifferenceIncomeAccount).WithMany(p => p.AccountChartTemplateDefaultCashDifferenceIncomeAccounts)
                .HasForeignKey(d => d.DefaultCashDifferenceIncomeAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_default_cash_difference_income_acco_fkey");

            entity.HasOne(d => d.DefaultPosReceivableAccount).WithMany(p => p.AccountChartTemplateDefaultPosReceivableAccounts)
                .HasForeignKey(d => d.DefaultPosReceivableAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_default_pos_receivable_account_id_fkey");

            entity.HasOne(d => d.ExpenseCurrencyExchangeAccount).WithMany(p => p.AccountChartTemplateExpenseCurrencyExchangeAccounts)
                .HasForeignKey(d => d.ExpenseCurrencyExchangeAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_expense_currency_exchange_account_i_fkey");

            entity.HasOne(d => d.IncomeCurrencyExchangeAccount).WithMany(p => p.AccountChartTemplateIncomeCurrencyExchangeAccounts)
                .HasForeignKey(d => d.IncomeCurrencyExchangeAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_income_currency_exchange_account_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_parent_id_fkey");

            entity.HasOne(d => d.PropertyAccountExpenseCateg).WithMany(p => p.AccountChartTemplatePropertyAccountExpenseCategs)
                .HasForeignKey(d => d.PropertyAccountExpenseCategId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_account_expense_categ_id_fkey");

            entity.HasOne(d => d.PropertyAccountExpense).WithMany(p => p.AccountChartTemplatePropertyAccountExpenses)
                .HasForeignKey(d => d.PropertyAccountExpenseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_account_expense_id_fkey");

            entity.HasOne(d => d.PropertyAccountIncomeCateg).WithMany(p => p.AccountChartTemplatePropertyAccountIncomeCategs)
                .HasForeignKey(d => d.PropertyAccountIncomeCategId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_account_income_categ_id_fkey");

            entity.HasOne(d => d.PropertyAccountIncome).WithMany(p => p.AccountChartTemplatePropertyAccountIncomes)
                .HasForeignKey(d => d.PropertyAccountIncomeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_account_income_id_fkey");

            entity.HasOne(d => d.PropertyAccountPayable).WithMany(p => p.AccountChartTemplatePropertyAccountPayables)
                .HasForeignKey(d => d.PropertyAccountPayableId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_account_payable_id_fkey");

            entity.HasOne(d => d.PropertyAccountReceivable).WithMany(p => p.AccountChartTemplatePropertyAccountReceivables)
                .HasForeignKey(d => d.PropertyAccountReceivableId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_account_receivable_id_fkey");

            entity.HasOne(d => d.PropertyAdvanceTaxPaymentAccount).WithMany(p => p.AccountChartTemplatePropertyAdvanceTaxPaymentAccounts)
                .HasForeignKey(d => d.PropertyAdvanceTaxPaymentAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_advance_tax_payment_accoun_fkey");

            entity.HasOne(d => d.PropertyCashBasisBaseAccount).WithMany(p => p.AccountChartTemplatePropertyCashBasisBaseAccounts)
                .HasForeignKey(d => d.PropertyCashBasisBaseAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_cash_basis_base_account_id_fkey");

            entity.HasOne(d => d.PropertyStockAccountInputCateg).WithMany(p => p.AccountChartTemplatePropertyStockAccountInputCategs)
                .HasForeignKey(d => d.PropertyStockAccountInputCategId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_stock_account_input_categ__fkey");

            entity.HasOne(d => d.PropertyStockAccountOutputCateg).WithMany(p => p.AccountChartTemplatePropertyStockAccountOutputCategs)
                .HasForeignKey(d => d.PropertyStockAccountOutputCategId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_stock_account_output_categ_fkey");

            entity.HasOne(d => d.PropertyStockValuationAccount).WithMany(p => p.AccountChartTemplatePropertyStockValuationAccounts)
                .HasForeignKey(d => d.PropertyStockValuationAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_stock_valuation_account_id_fkey");

            entity.HasOne(d => d.PropertyTaxPayableAccount).WithMany(p => p.AccountChartTemplatePropertyTaxPayableAccounts)
                .HasForeignKey(d => d.PropertyTaxPayableAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_tax_payable_account_id_fkey");

            entity.HasOne(d => d.PropertyTaxReceivableAccount).WithMany(p => p.AccountChartTemplatePropertyTaxReceivableAccounts)
                .HasForeignKey(d => d.PropertyTaxReceivableAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_property_tax_receivable_account_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_chart_template_write_uid_fkey");
        });

        modelBuilder.Entity<AccountCommonAccountReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_common_account_report_pkey");

            entity.ToTable("account_common_account_report");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.DisplayAccount).HasColumnName("display_account");
            entity.Property(e => e.TargetMove).HasColumnName("target_move");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_common_account_report_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_common_account_report_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_common_account_report_write_uid_fkey");

            //entity.HasMany(d => d.AccountAccounts).WithMany(p => p.AccountCommonAccountReports)
            entity.HasMany<AccountAccount>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountAccountCommonAccountReportRel",
                    r => r.HasOne<AccountAccount>().WithMany()
                        .HasForeignKey("AccountAccountId")
                        .HasConstraintName("account_account_account_common_account__account_account_id_fkey"),
                    l => l.HasOne<AccountCommonAccountReport>().WithMany()
                        .HasForeignKey("AccountCommonAccountReportId")
                        .HasConstraintName("account_account_account_commo_account_common_account_repor_fkey"),
                    j =>
                    {
                        j.HasKey("AccountCommonAccountReportId", "AccountAccountId").HasName("account_account_account_common_account_report_rel_pkey");
                        j.ToTable("account_account_account_common_account_report_rel");
                        j.HasIndex(new[] { "AccountAccountId", "AccountCommonAccountReportId" }, "account_account_account_commo_account_account_id_account_co_idx");
                    });

            //entity.HasMany(d => d.AccountAnalyticAccounts).WithMany(p => p.AccountCommonAccountReports)
            entity.HasMany<AccountAnalyticAccount>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAnalyticAccountAccountCommonAccountReportRel",
                    r => r.HasOne<AccountAnalyticAccount>().WithMany()
                        .HasForeignKey("AccountAnalyticAccountId")
                        .HasConstraintName("account_analytic_account_accou_account_analytic_account_id_fkey"),
                    l => l.HasOne<AccountCommonAccountReport>().WithMany()
                        .HasForeignKey("AccountCommonAccountReportId")
                        .HasConstraintName("account_analytic_account_acco_account_common_account_repor_fkey"),
                    j =>
                    {
                        j.HasKey("AccountCommonAccountReportId", "AccountAnalyticAccountId").HasName("account_analytic_account_account_common_account_report_rel_pkey");
                        j.ToTable("account_analytic_account_account_common_account_report_rel");
                        j.HasIndex(new[] { "AccountAnalyticAccountId", "AccountCommonAccountReportId" }, "account_analytic_account_acco_account_analytic_account_id_a_idx");
                    });

            //entity.HasMany(d => d.AccountJournals).WithMany(p => p.AccountCommonAccountReports)
            entity.HasMany<AccountJournal>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountCommonAccountReportAccountJournalRel",
                    r => r.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("AccountJournalId")
                        .HasConstraintName("account_common_account_report_account_j_account_journal_id_fkey"),
                    l => l.HasOne<AccountCommonAccountReport>().WithMany()
                        .HasForeignKey("AccountCommonAccountReportId")
                        .HasConstraintName("account_common_account_report_account_common_account_repor_fkey"),
                    j =>
                    {
                        j.HasKey("AccountCommonAccountReportId", "AccountJournalId").HasName("account_common_account_report_account_journal_rel_pkey");
                        j.ToTable("account_common_account_report_account_journal_rel");
                        j.HasIndex(new[] { "AccountJournalId", "AccountCommonAccountReportId" }, "account_common_account_report_account_journal_id_account_co_idx");
                    });

            //entity.HasMany(d => d.ResPartners).WithMany(p => p.AccountCommonAccountReports)
            entity.HasMany<ResPartner>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountCommonAccountReportResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("account_common_account_report_res_partner_r_res_partner_id_fkey"),
                    l => l.HasOne<AccountCommonAccountReport>().WithMany()
                        .HasForeignKey("AccountCommonAccountReportId")
                        .HasConstraintName("account_common_account_repor_account_common_account_repor_fkey1"),
                    j =>
                    {
                        j.HasKey("AccountCommonAccountReportId", "ResPartnerId").HasName("account_common_account_report_res_partner_rel_pkey");
                        j.ToTable("account_common_account_report_res_partner_rel");
                        j.HasIndex(new[] { "ResPartnerId", "AccountCommonAccountReportId" }, "account_common_account_report_res_partner_id_account_common_idx");
                    });
        });

        modelBuilder.Entity<AccountCommonJournalReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_common_journal_report_pkey");

            entity.ToTable("account_common_journal_report");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AmountCurrency).HasColumnName("amount_currency");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.TargetMove).HasColumnName("target_move");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_common_journal_report_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_common_journal_report_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_common_journal_report_write_uid_fkey");

            //entity.HasMany(d => d.AccountJournals).WithMany(p => p.AccountCommonJournalReports)
            entity.HasMany<AccountJournal>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountCommonJournalReportAccountJournalRel",
                    r => r.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("AccountJournalId")
                        .HasConstraintName("account_common_journal_report_account_j_account_journal_id_fkey"),
                    l => l.HasOne<AccountCommonJournalReport>().WithMany()
                        .HasForeignKey("AccountCommonJournalReportId")
                        .HasConstraintName("account_common_journal_report_account_common_journal_repor_fkey"),
                    j =>
                    {
                        j.HasKey("AccountCommonJournalReportId", "AccountJournalId").HasName("account_common_journal_report_account_journal_rel_pkey");
                        j.ToTable("account_common_journal_report_account_journal_rel");
                        j.HasIndex(new[] { "AccountJournalId", "AccountCommonJournalReportId" }, "account_common_journal_report_account_journal_id_account_co_idx");
                    });
        });

        modelBuilder.Entity<AccountCommonPartnerReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_common_partner_report_pkey");

            entity.ToTable("account_common_partner_report");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.ResultSelection).HasColumnName("result_selection");
            entity.Property(e => e.TargetMove).HasColumnName("target_move");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_common_partner_report_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_common_partner_report_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_common_partner_report_write_uid_fkey");

            //entity.HasMany(d => d.AccountJournals).WithMany(p => p.AccountCommonPartnerReports)
            entity.HasMany<AccountJournal>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountCommonPartnerReportAccountJournalRel",
                    r => r.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("AccountJournalId")
                        .HasConstraintName("account_common_partner_report_account_j_account_journal_id_fkey"),
                    l => l.HasOne<AccountCommonPartnerReport>().WithMany()
                        .HasForeignKey("AccountCommonPartnerReportId")
                        .HasConstraintName("account_common_partner_report_account_common_partner_repor_fkey"),
                    j =>
                    {
                        j.HasKey("AccountCommonPartnerReportId", "AccountJournalId").HasName("account_common_partner_report_account_journal_rel_pkey");
                        j.ToTable("account_common_partner_report_account_journal_rel");
                        j.HasIndex(new[] { "AccountJournalId", "AccountCommonPartnerReportId" }, "account_common_partner_report_account_journal_id_account_co_idx");
                    });

            //entity.HasMany(d => d.ResPartners).WithMany(p => p.AccountCommonPartnerReports)
            entity.HasMany<ResPartner>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountCommonPartnerReportResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("account_common_partner_report_res_partner_r_res_partner_id_fkey"),
                    l => l.HasOne<AccountCommonPartnerReport>().WithMany()
                        .HasForeignKey("AccountCommonPartnerReportId")
                        .HasConstraintName("account_common_partner_repor_account_common_partner_repor_fkey1"),
                    j =>
                    {
                        j.HasKey("AccountCommonPartnerReportId", "ResPartnerId").HasName("account_common_partner_report_res_partner_rel_pkey");
                        j.ToTable("account_common_partner_report_res_partner_rel");
                        j.HasIndex(new[] { "ResPartnerId", "AccountCommonPartnerReportId" }, "account_common_partner_report_res_partner_id_account_common_idx");
                    });
        });

        modelBuilder.Entity<AccountCommonReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_common_report_pkey");

            entity.ToTable("account_common_report");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.TargetMove).HasColumnName("target_move");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_common_report_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_common_report_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_common_report_write_uid_fkey");

            //entity.HasMany(d => d.AccountJournals).WithMany(p => p.AccountCommonReports)
            entity.HasMany<AccountJournal>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountCommonReportAccountJournalRel",
                    r => r.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("AccountJournalId")
                        .HasConstraintName("account_common_report_account_journal_r_account_journal_id_fkey"),
                    l => l.HasOne<AccountCommonReport>().WithMany()
                        .HasForeignKey("AccountCommonReportId")
                        .HasConstraintName("account_common_report_account_jou_account_common_report_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountCommonReportId", "AccountJournalId").HasName("account_common_report_account_journal_rel_pkey");
                        j.ToTable("account_common_report_account_journal_rel");
                        j.HasIndex(new[] { "AccountJournalId", "AccountCommonReportId" }, "account_common_report_account_account_journal_id_account_co_idx");
                    });
        });

        modelBuilder.Entity<AccountDaybookReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_daybook_report_pkey");

            entity.ToTable("account_daybook_report");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.TargetMove).HasColumnName("target_move");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_daybook_report_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_daybook_report_write_uid_fkey");

            //entity.HasMany(d => d.AccountJournals).WithMany(p => p.AccountDaybookReports)
            entity.HasMany<AccountJournal>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountDaybookReportAccountJournalRel",
                    r => r.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("AccountJournalId")
                        .HasConstraintName("account_daybook_report_account_journal__account_journal_id_fkey"),
                    l => l.HasOne<AccountDaybookReport>().WithMany()
                        .HasForeignKey("AccountDaybookReportId")
                        .HasConstraintName("account_daybook_report_account_j_account_daybook_report_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountDaybookReportId", "AccountJournalId").HasName("account_daybook_report_account_journal_rel_pkey");
                        j.ToTable("account_daybook_report_account_journal_rel");
                        j.HasIndex(new[] { "AccountJournalId", "AccountDaybookReportId" }, "account_daybook_report_accoun_account_journal_id_account_da_idx");
                    });

            //entity.HasMany(d => d.Accounts).WithMany(p => p.ReportLines1)
            entity.HasMany<AccountAccount>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountDaybookReport",
                    r => r.HasOne<AccountAccount>().WithMany()
                        .HasForeignKey("AccountId")
                        .HasConstraintName("account_account_daybook_report_account_id_fkey"),
                    l => l.HasOne<AccountDaybookReport>().WithMany()
                        .HasForeignKey("ReportLineId")
                        .HasConstraintName("account_account_daybook_report_report_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("ReportLineId", "AccountId").HasName("account_account_daybook_report_pkey");
                        j.ToTable("account_account_daybook_report");
                        j.HasIndex(new[] { "AccountId", "ReportLineId" }, "account_account_daybook_report_account_id_report_line_id_idx");
                    });
        });

        modelBuilder.Entity<AccountEdiDocument>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_edi_document_pkey");

            entity.ToTable("account_edi_document");

            entity.HasIndex(e => new { e.EdiFormatId, e.MoveId }, "account_edi_document_unique_edi_document_by_move_by_format").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AttachmentId).HasColumnName("attachment_id");
            entity.Property(e => e.BlockingLevel).HasColumnName("blocking_level");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.EdiFormatId).HasColumnName("edi_format_id");
            entity.Property(e => e.Error).HasColumnName("error");
            entity.Property(e => e.MoveId).HasColumnName("move_id");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Attachment).WithMany(p => p.AccountEdiDocuments)
                .HasForeignKey(d => d.AttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_edi_document_attachment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_edi_document_create_uid_fkey");

            entity.HasOne(d => d.EdiFormat).WithMany(p => p.AccountEdiDocuments)
                .HasForeignKey(d => d.EdiFormatId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_edi_document_edi_format_id_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.AccountEdiDocuments)
                .HasForeignKey(d => d.MoveId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_edi_document_move_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_edi_document_write_uid_fkey");
        });

        modelBuilder.Entity<AccountEdiFormat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_edi_format_pkey");

            entity.ToTable("account_edi_format");

            entity.HasIndex(e => e.Code, "account_edi_format_unique_code").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_edi_format_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_edi_format_write_uid_fkey");
        });

        modelBuilder.Entity<AccountFinancialReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_financial_report_pkey");

            entity.ToTable("account_financial_report");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountReportId).HasColumnName("account_report_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DisplayDetail).HasColumnName("display_detail");
            entity.Property(e => e.Level).HasColumnName("level");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.ReportDomain).HasColumnName("report_domain");
            entity.Property(e => e.Sequence).HasColumnName("sequence");
            entity.Property(e => e.Sign).HasColumnName("sign");
            entity.Property(e => e.StyleOverwrite).HasColumnName("style_overwrite");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AccountReport).WithMany(p => p.InverseAccountReport)
                .HasForeignKey(d => d.AccountReportId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_financial_report_account_report_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_financial_report_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_financial_report_parent_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_financial_report_write_uid_fkey");

            //entity.HasMany(d => d.AccountTypes).WithMany(p => p.Reports)
            entity.HasMany<AccountAccountType>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountFinancialReportType",
                    r => r.HasOne<AccountAccountType>().WithMany()
                        .HasForeignKey("AccountTypeId")
                        .HasConstraintName("account_account_financial_report_type_account_type_id_fkey"),
                    l => l.HasOne<AccountFinancialReport>().WithMany()
                        .HasForeignKey("ReportId")
                        .HasConstraintName("account_account_financial_report_type_report_id_fkey"),
                    j =>
                    {
                        j.HasKey("ReportId", "AccountTypeId").HasName("account_account_financial_report_type_pkey");
                        j.ToTable("account_account_financial_report_type");
                        j.HasIndex(new[] { "AccountTypeId", "ReportId" }, "account_account_financial_report__account_type_id_report_id_idx");
                    });

            //entity.HasMany(d => d.Accounts).WithMany(p => p.ReportLines2)
            entity.HasMany<AccountAccount>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountFinancialReport",
                    r => r.HasOne<AccountAccount>().WithMany()
                        .HasForeignKey("AccountId")
                        .HasConstraintName("account_account_financial_report_account_id_fkey"),
                    l => l.HasOne<AccountFinancialReport>().WithMany()
                        .HasForeignKey("ReportLineId")
                        .HasConstraintName("account_account_financial_report_report_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("ReportLineId", "AccountId").HasName("account_account_financial_report_pkey");
                        j.ToTable("account_account_financial_report");
                        j.HasIndex(new[] { "AccountId", "ReportLineId" }, "account_account_financial_report_account_id_report_line_id_idx");
                    });
        });

        modelBuilder.Entity<AccountFinancialYearOp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_financial_year_op_pkey");

            entity.ToTable("account_financial_year_op");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_financial_year_op_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_financial_year_op_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_financial_year_op_write_uid_fkey");
        });

        modelBuilder.Entity<AccountFiscalPosition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_fiscal_position_pkey");

            entity.ToTable("account_fiscal_position");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AutoApply).HasColumnName("auto_apply");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CountryGroupId).HasColumnName("country_group_id");
            entity.Property(e => e.CountryId).HasColumnName("country_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ForeignVat).HasColumnName("foreign_vat");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Note)
                .HasColumnType("jsonb")
                .HasColumnName("note");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.VatRequired).HasColumnName("vat_required");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");
            entity.Property(e => e.ZipFrom).HasColumnName("zip_from");
            entity.Property(e => e.ZipTo).HasColumnName("zip_to");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_fiscal_position_company_id_fkey");

            entity.HasOne(d => d.CountryGroup).WithMany(p => p.AccountFiscalPositions)
                .HasForeignKey(d => d.CountryGroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_country_group_id_fkey");

            entity.HasOne<ResCountry>().WithMany()
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_country_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_write_uid_fkey");

            //entity.HasMany(d => d.ResCountryStates).WithMany(p => p.AccountFiscalPositions)
            entity.HasMany<ResCountryState>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountFiscalPositionResCountryStateRel",
                    r => r.HasOne<ResCountryState>().WithMany()
                        .HasForeignKey("ResCountryStateId")
                        .HasConstraintName("account_fiscal_position_res_country_s_res_country_state_id_fkey"),
                    l => l.HasOne<AccountFiscalPosition>().WithMany()
                        .HasForeignKey("AccountFiscalPositionId")
                        .HasConstraintName("account_fiscal_position_res_cou_account_fiscal_position_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountFiscalPositionId", "ResCountryStateId").HasName("account_fiscal_position_res_country_state_rel_pkey");
                        j.ToTable("account_fiscal_position_res_country_state_rel");
                        j.HasIndex(new[] { "ResCountryStateId", "AccountFiscalPositionId" }, "account_fiscal_position_res_c_res_country_state_id_account__idx");
                    });
        });

        modelBuilder.Entity<AccountFiscalPositionAccount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_fiscal_position_account_pkey");

            entity.ToTable("account_fiscal_position_account");

            entity.HasIndex(e => new { e.PositionId, e.AccountSrcId, e.AccountDestId }, "account_fiscal_position_account_account_src_dest_uniq").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountDestId).HasColumnName("account_dest_id");
            entity.Property(e => e.AccountSrcId).HasColumnName("account_src_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.PositionId).HasColumnName("position_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AccountDest).WithMany(p => p.AccountFiscalPositionAccountAccountDests)
                .HasForeignKey(d => d.AccountDestId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_fiscal_position_account_account_dest_id_fkey");

            entity.HasOne(d => d.AccountSrc).WithMany(p => p.AccountFiscalPositionAccountAccountSrcs)
                .HasForeignKey(d => d.AccountSrcId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_fiscal_position_account_account_src_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_account_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_account_create_uid_fkey");

            entity.HasOne(d => d.Position).WithMany(p => p.AccountFiscalPositionAccounts)
                .HasForeignKey(d => d.PositionId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_fiscal_position_account_position_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_account_write_uid_fkey");
        });

        modelBuilder.Entity<AccountFiscalPositionAccountTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_fiscal_position_account_template_pkey");

            entity.ToTable("account_fiscal_position_account_template");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountDestId).HasColumnName("account_dest_id");
            entity.Property(e => e.AccountSrcId).HasColumnName("account_src_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.PositionId).HasColumnName("position_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AccountDest).WithMany(p => p.AccountFiscalPositionAccountTemplateAccountDests)
                .HasForeignKey(d => d.AccountDestId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_fiscal_position_account_template_account_dest_id_fkey");

            entity.HasOne(d => d.AccountSrc).WithMany(p => p.AccountFiscalPositionAccountTemplateAccountSrcs)
                .HasForeignKey(d => d.AccountSrcId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_fiscal_position_account_template_account_src_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_account_template_create_uid_fkey");

            entity.HasOne(d => d.Position).WithMany(p => p.AccountFiscalPositionAccountTemplates)
                .HasForeignKey(d => d.PositionId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_fiscal_position_account_template_position_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_account_template_write_uid_fkey");
        });

        modelBuilder.Entity<AccountFiscalPositionTax>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_fiscal_position_tax_pkey");

            entity.ToTable("account_fiscal_position_tax");

            entity.HasIndex(e => new { e.PositionId, e.TaxSrcId, e.TaxDestId }, "account_fiscal_position_tax_tax_src_dest_uniq").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.PositionId).HasColumnName("position_id");
            entity.Property(e => e.TaxDestId).HasColumnName("tax_dest_id");
            entity.Property(e => e.TaxSrcId).HasColumnName("tax_src_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_tax_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_tax_create_uid_fkey");

            entity.HasOne(d => d.Position).WithMany(p => p.AccountFiscalPositionTaxes)
                .HasForeignKey(d => d.PositionId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_fiscal_position_tax_position_id_fkey");

            entity.HasOne(d => d.TaxDest).WithMany(p => p.AccountFiscalPositionTaxTaxDests)
                .HasForeignKey(d => d.TaxDestId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_tax_tax_dest_id_fkey");

            entity.HasOne(d => d.TaxSrc).WithMany(p => p.AccountFiscalPositionTaxTaxSrcs)
                .HasForeignKey(d => d.TaxSrcId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_fiscal_position_tax_tax_src_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_tax_write_uid_fkey");
        });

        modelBuilder.Entity<AccountFiscalPositionTaxTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_fiscal_position_tax_template_pkey");

            entity.ToTable("account_fiscal_position_tax_template");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.PositionId).HasColumnName("position_id");
            entity.Property(e => e.TaxDestId).HasColumnName("tax_dest_id");
            entity.Property(e => e.TaxSrcId).HasColumnName("tax_src_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_tax_template_create_uid_fkey");

            entity.HasOne(d => d.Position).WithMany(p => p.AccountFiscalPositionTaxTemplates)
                .HasForeignKey(d => d.PositionId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_fiscal_position_tax_template_position_id_fkey");

            entity.HasOne(d => d.TaxDest).WithMany(p => p.AccountFiscalPositionTaxTemplateTaxDests)
                .HasForeignKey(d => d.TaxDestId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_tax_template_tax_dest_id_fkey");

            entity.HasOne(d => d.TaxSrc).WithMany(p => p.AccountFiscalPositionTaxTemplateTaxSrcs)
                .HasForeignKey(d => d.TaxSrcId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_fiscal_position_tax_template_tax_src_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_tax_template_write_uid_fkey");
        });

        modelBuilder.Entity<AccountFiscalPositionTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_fiscal_position_template_pkey");

            entity.ToTable("account_fiscal_position_template");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AutoApply).HasColumnName("auto_apply");
            entity.Property(e => e.ChartTemplateId).HasColumnName("chart_template_id");
            entity.Property(e => e.CountryGroupId).HasColumnName("country_group_id");
            entity.Property(e => e.CountryId).HasColumnName("country_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Note)
                .HasColumnType("jsonb")
                .HasColumnName("note");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.VatRequired).HasColumnName("vat_required");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");
            entity.Property(e => e.ZipFrom).HasColumnName("zip_from");
            entity.Property(e => e.ZipTo).HasColumnName("zip_to");

            entity.HasOne(d => d.ChartTemplate).WithMany(p => p.AccountFiscalPositionTemplates)
                .HasForeignKey(d => d.ChartTemplateId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_fiscal_position_template_chart_template_id_fkey");

            entity.HasOne(d => d.CountryGroup).WithMany(p => p.AccountFiscalPositionTemplates)
                .HasForeignKey(d => d.CountryGroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_template_country_group_id_fkey");

            entity.HasOne<ResCountry>().WithMany()
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_template_country_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_template_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_position_template_write_uid_fkey");

            //entity.HasMany(d => d.ResCountryStates).WithMany(p => p.AccountFiscalPositionTemplates)
            entity.HasMany<ResCountryState>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountFiscalPositionTemplateResCountryStateRel",
                    r => r.HasOne<ResCountryState>().WithMany()
                        .HasForeignKey("ResCountryStateId")
                        .HasConstraintName("account_fiscal_position_template_res__res_country_state_id_fkey"),
                    l => l.HasOne<AccountFiscalPositionTemplate>().WithMany()
                        .HasForeignKey("AccountFiscalPositionTemplateId")
                        .HasConstraintName("account_fiscal_position_templ_account_fiscal_position_temp_fkey"),
                    j =>
                    {
                        j.HasKey("AccountFiscalPositionTemplateId", "ResCountryStateId").HasName("account_fiscal_position_template_res_country_state_rel_pkey");
                        j.ToTable("account_fiscal_position_template_res_country_state_rel");
                        j.HasIndex(new[] { "ResCountryStateId", "AccountFiscalPositionTemplateId" }, "account_fiscal_position_templ_res_country_state_id_account__idx");
                    });
        });

        modelBuilder.Entity<AccountFiscalYear>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_fiscal_year_pkey");

            entity.ToTable("account_fiscal_year");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_fiscal_year_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_year_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_fiscal_year_write_uid_fkey");
        });

        modelBuilder.Entity<AccountFullReconcile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_full_reconcile_pkey");

            entity.ToTable("account_full_reconcile");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ExchangeMoveId).HasColumnName("exchange_move_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_full_reconcile_create_uid_fkey");

            entity.HasOne(d => d.ExchangeMove).WithMany(p => p.AccountFullReconciles)
                .HasForeignKey(d => d.ExchangeMoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_full_reconcile_exchange_move_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_full_reconcile_write_uid_fkey");
        });

        modelBuilder.Entity<AccountGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_group_pkey");

            entity.ToTable("account_group");

            entity.HasIndex(e => e.ParentId, "account_group_parent_id_index");

            entity.HasIndex(e => e.ParentPath, "account_group_parent_path_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CodePrefixEnd).HasColumnName("code_prefix_end");
            entity.Property(e => e.CodePrefixStart).HasColumnName("code_prefix_start");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.ParentPath).HasColumnName("parent_path");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_group_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_group_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_group_parent_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_group_write_uid_fkey");
        });

        modelBuilder.Entity<AccountGroupTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_group_template_pkey");

            entity.ToTable("account_group_template");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.ChartTemplateId).HasColumnName("chart_template_id");
            entity.Property(e => e.CodePrefixEnd).HasColumnName("code_prefix_end");
            entity.Property(e => e.CodePrefixStart).HasColumnName("code_prefix_start");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.ChartTemplate).WithMany(p => p.AccountGroupTemplates)
                .HasForeignKey(d => d.ChartTemplateId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_group_template_chart_template_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_group_template_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_group_template_parent_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_group_template_write_uid_fkey");
        });

        modelBuilder.Entity<AccountIncoterm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_incoterms_pkey");

            entity.ToTable("account_incoterms");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_incoterms_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_incoterms_write_uid_fkey");
        });

        modelBuilder.Entity<AccountInvoiceSend>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_invoice_send_pkey");

            entity.ToTable("account_invoice_send");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.ComposerId).HasColumnName("composer_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.IsEmail).HasColumnName("is_email");
            entity.Property(e => e.IsPrint).HasColumnName("is_print");
            entity.Property(e => e.Printed).HasColumnName("printed");
            entity.Property(e => e.SnailmailIsLetter).HasColumnName("snailmail_is_letter");
            entity.Property(e => e.TemplateId).HasColumnName("template_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Composer).WithMany(p => p.AccountInvoiceSends)
                .HasForeignKey(d => d.ComposerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_invoice_send_composer_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_invoice_send_create_uid_fkey");

            entity.HasOne(d => d.Template).WithMany(p => p.AccountInvoiceSends)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_invoice_send_template_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_invoice_send_write_uid_fkey");

            //entity.HasMany(d => d.AccountMoves).WithMany(p => p.AccountInvoiceSends)
            entity.HasMany<AccountMove>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountMoveAccountInvoiceSendRel",
                    r => r.HasOne<AccountMove>().WithMany()
                        .HasForeignKey("AccountMoveId")
                        .HasConstraintName("account_move_account_invoice_send_rel_account_move_id_fkey"),
                    l => l.HasOne<AccountInvoiceSend>().WithMany()
                        .HasForeignKey("AccountInvoiceSendId")
                        .HasConstraintName("account_move_account_invoice_send__account_invoice_send_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountInvoiceSendId", "AccountMoveId").HasName("account_move_account_invoice_send_rel_pkey");
                        j.ToTable("account_move_account_invoice_send_rel");
                        j.HasIndex(new[] { "AccountMoveId", "AccountInvoiceSendId" }, "account_move_account_invoice__account_move_id_account_invoi_idx");
                    });
        });

        modelBuilder.Entity<AccountJournal>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_journal_pkey");

            entity.ToTable("account_journal");

            entity.HasIndex(e => new { e.TenantId, e.Code }, "account_journal_code_company_uniq").IsUnique();

            entity.HasIndex(e => e.TenantId, "account_journal_company_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AliasId).HasColumnName("alias_id");
            entity.Property(e => e.BankAccountId).HasColumnName("bank_account_id");
            entity.Property(e => e.BankStatementsSource).HasColumnName("bank_statements_source");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.DefaultAccountId).HasColumnName("default_account_id");
            entity.Property(e => e.InvoiceReferenceModel).HasColumnName("invoice_reference_model");
            entity.Property(e => e.InvoiceReferenceType).HasColumnName("invoice_reference_type");
            entity.Property(e => e.LossAccountId).HasColumnName("loss_account_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PaymentSequence).HasColumnName("payment_sequence");
            entity.Property(e => e.ProfitAccountId).HasColumnName("profit_account_id");
            entity.Property(e => e.RefundSequence).HasColumnName("refund_sequence");
            entity.Property(e => e.RestrictModeHashTable).HasColumnName("restrict_mode_hash_table");
            entity.Property(e => e.SaleActivityNote).HasColumnName("sale_activity_note");
            entity.Property(e => e.SaleActivityTypeId).HasColumnName("sale_activity_type_id");
            entity.Property(e => e.SaleActivityUserId).HasColumnName("sale_activity_user_id");
            entity.Property(e => e.SecureSequenceId).HasColumnName("secure_sequence_id");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.SequenceOverrideRegex).HasColumnName("sequence_override_regex");
            entity.Property(e => e.ShowOnDashboard).HasColumnName("show_on_dashboard");
            entity.Property(e => e.SuspenseAccountId).HasColumnName("suspense_account_id");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Alias).WithMany(p => p.AccountJournals)
                .HasForeignKey(d => d.AliasId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_alias_id_fkey");

            entity.HasOne(d => d.BankAccount).WithMany(p => p.AccountJournals)
                .HasForeignKey(d => d.BankAccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_journal_bank_account_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_journal_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_currency_id_fkey");

            entity.HasOne(d => d.DefaultAccount).WithMany(p => p.AccountJournalDefaultAccounts)
                .HasForeignKey(d => d.DefaultAccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_journal_default_account_id_fkey");

            entity.HasOne(d => d.LossAccount).WithMany(p => p.AccountJournalLossAccounts)
                .HasForeignKey(d => d.LossAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_loss_account_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.AccountJournals)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_message_main_attachment_id_fkey");

            entity.HasOne(d => d.ProfitAccount).WithMany(p => p.AccountJournalProfitAccounts)
                .HasForeignKey(d => d.ProfitAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_profit_account_id_fkey");

            entity.HasOne(d => d.SaleActivityType).WithMany(p => p.AccountJournals)
                .HasForeignKey(d => d.SaleActivityTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_sale_activity_type_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.SaleActivityUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_sale_activity_user_id_fkey");

            entity.HasOne(d => d.SecureSequence).WithMany(p => p.AccountJournals)
                .HasForeignKey(d => d.SecureSequenceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_secure_sequence_id_fkey");

            entity.HasOne(d => d.SuspenseAccount).WithMany(p => p.AccountJournalSuspenseAccounts)
                .HasForeignKey(d => d.SuspenseAccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_journal_suspense_account_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_write_uid_fkey");

            //entity.HasMany(d => d.AccountEdiFormats).WithMany(p => p.AccountJournals)
            entity.HasMany<AccountEdiFormat>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountEdiFormatAccountJournalRel",
                    r => r.HasOne<AccountEdiFormat>().WithMany()
                        .HasForeignKey("AccountEdiFormatId")
                        .HasConstraintName("account_edi_format_account_journal_r_account_edi_format_id_fkey"),
                    l => l.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("AccountJournalId")
                        .HasConstraintName("account_edi_format_account_journal_rel_account_journal_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountJournalId", "AccountEdiFormatId").HasName("account_edi_format_account_journal_rel_pkey");
                        j.ToTable("account_edi_format_account_journal_rel");
                        j.HasIndex(new[] { "AccountEdiFormatId", "AccountJournalId" }, "account_edi_format_account_jo_account_edi_format_id_account_idx");
                    });

            //entity.HasMany(d => d.Accounts1).WithMany(p => p.Journals)
            entity.HasMany<AccountAccount>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "JournalAccountControlRel",
                    r => r.HasOne<AccountAccount>().WithMany()
                        .HasForeignKey("AccountId")
                        .HasConstraintName("journal_account_control_rel_account_id_fkey"),
                    l => l.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("JournalId")
                        .HasConstraintName("journal_account_control_rel_journal_id_fkey"),
                    j =>
                    {
                        j.HasKey("JournalId", "AccountId").HasName("journal_account_control_rel_pkey");
                        j.ToTable("journal_account_control_rel");
                        j.HasIndex(new[] { "AccountId", "JournalId" }, "journal_account_control_rel_account_id_journal_id_idx");
                    });
        });

        modelBuilder.Entity<AccountJournalGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_journal_group_pkey");

            entity.ToTable("account_journal_group");

            entity.HasIndex(e => new { e.TenantId, e.Name }, "account_journal_group_uniq_name").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_journal_group_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_group_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_journal_group_write_uid_fkey");

            //entity.HasMany(d => d.AccountJournals).WithMany(p => p.AccountJournalGroups)
            entity.HasMany<AccountJournal>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountJournalAccountJournalGroupRel",
                    r => r.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("AccountJournalId")
                        .HasConstraintName("account_journal_account_journal_group_r_account_journal_id_fkey"),
                    l => l.HasOne<AccountJournalGroup>().WithMany()
                        .HasForeignKey("AccountJournalGroupId")
                        .HasConstraintName("account_journal_account_journal_g_account_journal_group_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountJournalGroupId", "AccountJournalId").HasName("account_journal_account_journal_group_rel_pkey");
                        j.ToTable("account_journal_account_journal_group_rel");
                        j.HasIndex(new[] { "AccountJournalId", "AccountJournalGroupId" }, "account_journal_account_journ_account_journal_id_account_jo_idx");
                    });
        });

        modelBuilder.Entity<AccountMove>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_move_pkey");

            entity.ToTable("account_move");

            entity.HasIndex(e => e.TenantId, "account_move_company_id_index");

            entity.HasIndex(e => e.Date, "account_move_date_index");

            entity.HasIndex(e => e.InvoiceDateDue, "account_move_invoice_date_due_index");

            entity.HasIndex(e => e.InvoiceDate, "account_move_invoice_date_index");

            entity.HasIndex(e => e.MoveType, "account_move_move_type_index");

            entity.HasIndex(e => e.Name, "account_move_name_index");

            entity.HasIndex(e => e.Name, "account_move_name_trigram_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.PaymentId, "account_move_payment_id_index").HasFilter("(payment_id IS NOT NULL)");

            entity.HasIndex(e => new { e.JournalId, e.State, e.PaymentState, e.MoveType, e.Date }, "account_move_payment_idx");

            entity.HasIndex(e => e.PaymentReference, "account_move_payment_reference_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.ReversedEntryId, "account_move_reversed_entry_id_index").HasFilter("(reversed_entry_id IS NOT NULL)");

            entity.HasIndex(e => new { e.JournalId, e.SequencePrefix, e.SequenceNumber, e.Name }, "account_move_sequence_index").IsDescending(false, true, true, false);

            entity.HasIndex(e => new { e.JournalId, e.Id, e.SequencePrefix }, "account_move_sequence_index2").IsDescending(false, true, false);

            entity.HasIndex(e => e.StockMoveId, "account_move_stock_move_id_index").HasFilter("(stock_move_id IS NOT NULL)");

            entity.HasIndex(e => e.TaxCashBasisOriginMoveId, "account_move_tax_cash_basis_origin_move_id_index").HasFilter("(tax_cash_basis_origin_move_id IS NOT NULL)");

            entity.HasIndex(e => e.JournalId, "account_move_to_check_idx").HasFilter("(to_check = true)");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccessToken).HasColumnName("access_token");
            entity.Property(e => e.AlwaysTaxExigible).HasColumnName("always_tax_exigible");
            entity.Property(e => e.AmountResidual).HasColumnName("amount_residual");
            entity.Property(e => e.AmountResidualSigned).HasColumnName("amount_residual_signed");
            entity.Property(e => e.AmountTax).HasColumnName("amount_tax");
            entity.Property(e => e.AmountTaxSigned).HasColumnName("amount_tax_signed");
            entity.Property(e => e.AmountTotal).HasColumnName("amount_total");
            entity.Property(e => e.AmountTotalInCurrencySigned).HasColumnName("amount_total_in_currency_signed");
            entity.Property(e => e.AmountTotalSigned).HasColumnName("amount_total_signed");
            entity.Property(e => e.AmountUntaxed).HasColumnName("amount_untaxed");
            entity.Property(e => e.AmountUntaxedSigned).HasColumnName("amount_untaxed_signed");
            entity.Property(e => e.AutoPost).HasColumnName("auto_post");
            entity.Property(e => e.AutoPostOriginId).HasColumnName("auto_post_origin_id");
            entity.Property(e => e.AutoPostUntil).HasColumnName("auto_post_until");
            entity.Property(e => e.CampaignId).HasColumnName("campaign_id");
            entity.Property(e => e.CommercialPartnerId).HasColumnName("commercial_partner_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.EdiState).HasColumnName("edi_state");
            entity.Property(e => e.FiscalPositionId).HasColumnName("fiscal_position_id");
            entity.Property(e => e.InalterableHash).HasColumnName("inalterable_hash");
            entity.Property(e => e.InvoiceCashRoundingId).HasColumnName("invoice_cash_rounding_id");
            entity.Property(e => e.InvoiceDate).HasColumnName("invoice_date");
            entity.Property(e => e.InvoiceDateDue).HasColumnName("invoice_date_due");
            entity.Property(e => e.InvoiceIncotermId).HasColumnName("invoice_incoterm_id");
            entity.Property(e => e.InvoiceOrigin).HasColumnName("invoice_origin");
            entity.Property(e => e.InvoicePartnerDisplayName).HasColumnName("invoice_partner_display_name");
            entity.Property(e => e.InvoicePaymentTermId).HasColumnName("invoice_payment_term_id");
            entity.Property(e => e.InvoiceSourceEmail).HasColumnName("invoice_source_email");
            entity.Property(e => e.InvoiceUserId).HasColumnName("invoice_user_id");
            entity.Property(e => e.IsMoveSent).HasColumnName("is_move_sent");
            entity.Property(e => e.IsStorno).HasColumnName("is_storno");
            entity.Property(e => e.JournalId).HasColumnName("journal_id");
            entity.Property(e => e.MediumId).HasColumnName("medium_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.MoveType).HasColumnName("move_type");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Narration).HasColumnName("narration");
            entity.Property(e => e.PartnerBankId).HasColumnName("partner_bank_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PartnerShippingId).HasColumnName("partner_shipping_id");
            entity.Property(e => e.PaymentId).HasColumnName("payment_id");
            entity.Property(e => e.PaymentReference).HasColumnName("payment_reference");
            entity.Property(e => e.PaymentState).HasColumnName("payment_state");
            entity.Property(e => e.PostedBefore).HasColumnName("posted_before");
            entity.Property(e => e.QrCodeMethod).HasColumnName("qr_code_method");
            entity.Property(e => e.QuickEditTotalAmount).HasColumnName("quick_edit_total_amount");
            entity.Property(e => e.Ref).HasColumnName("ref");
            entity.Property(e => e.ReversedEntryId).HasColumnName("reversed_entry_id");
            entity.Property(e => e.SecureSequenceNumber).HasColumnName("secure_sequence_number");
            entity.Property(e => e.SequenceNumber)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence_number");
            entity.Property(e => e.SequencePrefix).HasColumnName("sequence_prefix");
            entity.Property(e => e.SourceId).HasColumnName("source_id");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.StatementLineId).HasColumnName("statement_line_id");
            entity.Property(e => e.StockMoveId).HasColumnName("stock_move_id");
            entity.Property(e => e.TaxCashBasisOriginMoveId).HasColumnName("tax_cash_basis_origin_move_id");
            entity.Property(e => e.TaxCashBasisRecId).HasColumnName("tax_cash_basis_rec_id");
            entity.Property(e => e.TeamId).HasColumnName("team_id");
            entity.Property(e => e.ToCheck).HasColumnName("to_check");
            entity.Property(e => e.WebsiteId).HasColumnName("website_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AutoPostOrigin).WithMany(p => p.InverseAutoPostOrigin)
                .HasForeignKey(d => d.AutoPostOriginId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_auto_post_origin_id_fkey");

            entity.HasOne(d => d.Campaign).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.CampaignId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_campaign_id_fkey");

            entity.HasOne(d => d.CommercialPartner).WithMany(p => p.AccountMoveCommercialPartners)
                .HasForeignKey(d => d.CommercialPartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_move_commercial_partner_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_move_currency_id_fkey");

            entity.HasOne(d => d.FiscalPosition).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.FiscalPositionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_move_fiscal_position_id_fkey");

            entity.HasOne(d => d.InvoiceCashRounding).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.InvoiceCashRoundingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_invoice_cash_rounding_id_fkey");

            entity.HasOne(d => d.InvoiceIncoterm).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.InvoiceIncotermId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_invoice_incoterm_id_fkey");

            entity.HasOne(d => d.InvoicePaymentTerm).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.InvoicePaymentTermId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_invoice_payment_term_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.InvoiceUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_invoice_user_id_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_move_journal_id_fkey");

            entity.HasOne(d => d.Medium).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.MediumId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_medium_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_message_main_attachment_id_fkey");

            entity.HasOne(d => d.PartnerBank).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.PartnerBankId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_partner_bank_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_move_partner_id_fkey");

            entity.HasOne(d => d.PartnerShipping).WithMany(p => p.AccountMovePartnerShippings)
                .HasForeignKey(d => d.PartnerShippingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_partner_shipping_id_fkey");

            entity.HasOne(d => d.Payment).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.PaymentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_payment_id_fkey");

            entity.HasOne(d => d.ReversedEntry).WithMany(p => p.InverseReversedEntry)
                .HasForeignKey(d => d.ReversedEntryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_reversed_entry_id_fkey");

            entity.HasOne(d => d.Source).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_source_id_fkey");

            entity.HasOne(d => d.StatementLine).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.StatementLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_statement_line_id_fkey");

            entity.HasOne(d => d.StockMove).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.StockMoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_stock_move_id_fkey");

            entity.HasOne(d => d.TaxCashBasisOriginMove).WithMany(p => p.InverseTaxCashBasisOriginMove)
                .HasForeignKey(d => d.TaxCashBasisOriginMoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_tax_cash_basis_origin_move_id_fkey");

            entity.HasOne(d => d.TaxCashBasisRec).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.TaxCashBasisRecId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_tax_cash_basis_rec_id_fkey");

            entity.HasOne(d => d.Team).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_team_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.AccountMoves)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_website_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_write_uid_fkey");

            //entity.HasMany(d => d.Transactions).WithMany(p => p.Invoices)
            entity.HasMany<PaymentTransaction>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountInvoiceTransactionRel",
                    r => r.HasOne<PaymentTransaction>().WithMany()
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("account_invoice_transaction_rel_transaction_id_fkey"),
                    l => l.HasOne<AccountMove>().WithMany()
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("account_invoice_transaction_rel_invoice_id_fkey"),
                    j =>
                    {
                        j.HasKey("InvoiceId", "TransactionId").HasName("account_invoice_transaction_rel_pkey");
                        j.ToTable("account_invoice_transaction_rel");
                        j.HasIndex(new[] { "TransactionId", "InvoiceId" }, "account_invoice_transaction_rel_transaction_id_invoice_id_idx");
                    });
        });

        modelBuilder.Entity<AccountMoveLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_move_line_pkey");

            entity.ToTable("account_move_line");

            entity.HasIndex(e => e.AccountId, "account_move_line_account_id_index");

            entity.HasIndex(e => e.TenantId, "account_move_line_company_id_index");

            entity.HasIndex(e => e.DateMaturity, "account_move_line_date_maturity_index");

            entity.HasIndex(e => new { e.Date, e.MoveName, e.Id }, "account_move_line_date_name_id_idx").IsDescending(true, true, false);

            entity.HasIndex(e => e.FullReconcileId, "account_move_line_full_reconcile_id_index").HasFilter("(full_reconcile_id IS NOT NULL)");

            entity.HasIndex(e => e.GroupTaxId, "account_move_line_group_tax_id_index").HasFilter("(group_tax_id IS NOT NULL)");

            entity.HasIndex(e => e.JournalId, "account_move_line_journal_id_index");

            entity.HasIndex(e => e.MoveId, "account_move_line_move_id_index");

            entity.HasIndex(e => e.MoveName, "account_move_line_move_name_index");

            entity.HasIndex(e => new { e.PartnerId, e.Ref }, "account_move_line_partner_id_ref_idx");

            entity.HasIndex(e => e.PaymentId, "account_move_line_payment_id_index").HasFilter("(payment_id IS NOT NULL)");

            entity.HasIndex(e => e.PurchaseLineId, "account_move_line_purchase_line_id_index").HasFilter("(purchase_line_id IS NOT NULL)");

            entity.HasIndex(e => e.Ref, "account_move_line_ref_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.StatementId, "account_move_line_statement_id_index").HasFilter("(statement_id IS NOT NULL)");

            entity.HasIndex(e => e.StatementLineId, "account_move_line_statement_line_id_index").HasFilter("(statement_line_id IS NOT NULL)");

            entity.HasIndex(e => e.VehicleId, "account_move_line_vehicle_id_index").HasFilter("(vehicle_id IS NOT NULL)");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.AccountRootId).HasColumnName("account_root_id");
            entity.Property(e => e.AmountCurrency).HasColumnName("amount_currency");
            entity.Property(e => e.AmountResidual).HasColumnName("amount_residual");
            entity.Property(e => e.AmountResidualCurrency).HasColumnName("amount_residual_currency");
            entity.Property(e => e.AnalyticDistribution)
                .HasColumnType("jsonb")
                .HasColumnName("analytic_distribution");
            entity.Property(e => e.AssetCategoryId).HasColumnName("asset_category_id");
            entity.Property(e => e.AssetEndDate).HasColumnName("asset_end_date");
            entity.Property(e => e.AssetMrr).HasColumnName("asset_mrr");
            entity.Property(e => e.AssetStartDate).HasColumnName("asset_start_date");
            entity.Property(e => e.Balance).HasColumnName("balance");
            entity.Property(e => e.Blocked).HasColumnName("blocked");
            entity.Property(e => e.CompanyCurrencyId).HasColumnName("company_currency_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Credit).HasColumnName("credit");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.DateMaturity).HasColumnName("date_maturity");
            entity.Property(e => e.Debit).HasColumnName("debit");
            entity.Property(e => e.Discount).HasColumnName("discount");
            entity.Property(e => e.DiscountAmountCurrency).HasColumnName("discount_amount_currency");
            entity.Property(e => e.DiscountBalance).HasColumnName("discount_balance");
            entity.Property(e => e.DiscountDate).HasColumnName("discount_date");
            entity.Property(e => e.DiscountPercentage).HasColumnName("discount_percentage");
            entity.Property(e => e.DisplayType).HasColumnName("display_type");
            entity.Property(e => e.ExpenseId).HasColumnName("expense_id");
            entity.Property(e => e.FollowupDate).HasColumnName("followup_date");
            entity.Property(e => e.FollowupLineId).HasColumnName("followup_line_id");
            entity.Property(e => e.FullReconcileId).HasColumnName("full_reconcile_id");
            entity.Property(e => e.GroupTaxId).HasColumnName("group_tax_id");
            entity.Property(e => e.IsDownpayment).HasColumnName("is_downpayment");
            entity.Property(e => e.JournalId).HasColumnName("journal_id");
            entity.Property(e => e.MatchingNumber).HasColumnName("matching_number");
            entity.Property(e => e.MoveId).HasColumnName("move_id");
            entity.Property(e => e.MoveName).HasColumnName("move_name");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.ParentState).HasColumnName("parent_state");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PaymentId).HasColumnName("payment_id");
            entity.Property(e => e.PriceSubtotal).HasColumnName("price_subtotal");
            entity.Property(e => e.PriceTotal).HasColumnName("price_total");
            entity.Property(e => e.PriceUnit).HasColumnName("price_unit");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductUomId).HasColumnName("product_uom_id");
            entity.Property(e => e.PurchaseLineId).HasColumnName("purchase_line_id");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.ReconcileModelId).HasColumnName("reconcile_model_id");
            entity.Property(e => e.Reconciled).HasColumnName("reconciled");
            entity.Property(e => e.Ref).HasColumnName("ref");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.StatementId).HasColumnName("statement_id");
            entity.Property(e => e.StatementLineId).HasColumnName("statement_line_id");
            entity.Property(e => e.TaxAudit).HasColumnName("tax_audit");
            entity.Property(e => e.TaxBaseAmount).HasColumnName("tax_base_amount");
            entity.Property(e => e.TaxGroupId).HasColumnName("tax_group_id");
            entity.Property(e => e.TaxLineId).HasColumnName("tax_line_id");
            entity.Property(e => e.TaxRepartitionLineId).HasColumnName("tax_repartition_line_id");
            entity.Property(e => e.TaxTagInvert).HasColumnName("tax_tag_invert");
            entity.Property(e => e.VehicleId).HasColumnName("vehicle_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Account).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_move_line_account_id_fkey");

            entity.HasOne(d => d.AssetCategory).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.AssetCategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_asset_category_id_fkey");

            entity.HasOne(d => d.CompanyCurrency).WithMany(p => p.AccountMoveLineCompanyCurrencies)
                .HasForeignKey(d => d.CompanyCurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_company_currency_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_move_line_currency_id_fkey");

            entity.HasOne(d => d.Expense).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.ExpenseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_expense_id_fkey");

            entity.HasOne(d => d.FollowupLine).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.FollowupLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_followup_line_id_fkey");

            entity.HasOne(d => d.FullReconcile).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.FullReconcileId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_full_reconcile_id_fkey");

            entity.HasOne(d => d.GroupTax).WithMany(p => p.AccountMoveLineGroupTaxes)
                .HasForeignKey(d => d.GroupTaxId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_group_tax_id_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_journal_id_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.MoveId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_move_line_move_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_move_line_partner_id_fkey");

            entity.HasOne(d => d.Payment).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.PaymentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_payment_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_move_line_product_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_move_line_product_uom_id_fkey");

            entity.HasOne(d => d.PurchaseLine).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.PurchaseLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_purchase_line_id_fkey");

            entity.HasOne(d => d.ReconcileModel).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.ReconcileModelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_reconcile_model_id_fkey");

            entity.HasOne(d => d.Statement).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.StatementId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_statement_id_fkey");

            entity.HasOne(d => d.StatementLine).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.StatementLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_statement_line_id_fkey");

            entity.HasOne(d => d.TaxGroup).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.TaxGroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_tax_group_id_fkey");

            entity.HasOne(d => d.TaxLine).WithMany(p => p.AccountMoveLineTaxLines)
                .HasForeignKey(d => d.TaxLineId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_move_line_tax_line_id_fkey");

            entity.HasOne(d => d.TaxRepartitionLine).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.TaxRepartitionLineId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_move_line_tax_repartition_line_id_fkey");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.AccountMoveLines)
                .HasForeignKey(d => d.VehicleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_vehicle_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_line_write_uid_fkey");

            //entity.HasMany(d => d.AccountAccountTags).WithMany(p => p.AccountMoveLines)
            entity.HasMany<AccountAccountTag>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountTagAccountMoveLineRel",
                    r => r.HasOne<AccountAccountTag>().WithMany()
                        .HasForeignKey("AccountAccountTagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_account_tag_account_move_li_account_account_tag_id_fkey"),
                    l => l.HasOne<AccountMoveLine>().WithMany()
                        .HasForeignKey("AccountMoveLineId")
                        .HasConstraintName("account_account_tag_account_move_line_account_move_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountMoveLineId", "AccountAccountTagId").HasName("account_account_tag_account_move_line_rel_pkey");
                        j.ToTable("account_account_tag_account_move_line_rel");
                        j.HasIndex(new[] { "AccountAccountTagId", "AccountMoveLineId" }, "account_account_tag_account_m_account_account_tag_id_accoun_idx");
                    });

            //entity.HasMany(d => d.AccountTaxes).WithMany(p => p.AccountMoveLines)
            entity.HasMany<AccountTax>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountMoveLineAccountTaxRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("AccountTaxId")
                        .HasConstraintName("account_move_line_account_tax_rel_account_tax_id_fkey"),
                    l => l.HasOne<AccountMoveLine>().WithMany()
                        .HasForeignKey("AccountMoveLineId")
                        .HasConstraintName("account_move_line_account_tax_rel_account_move_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountMoveLineId", "AccountTaxId").HasName("account_move_line_account_tax_rel_pkey");
                        j.ToTable("account_move_line_account_tax_rel");
                        j.HasIndex(new[] { "AccountTaxId", "AccountMoveLineId" }, "account_move_line_account_tax_account_tax_id_account_move_l_idx");
                    });

            //entity.HasMany(d => d.OrderLines).WithMany(p => p.InvoiceLines)
            entity.HasMany<SaleOrderLine>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "SaleOrderLineInvoiceRel",
                    r => r.HasOne<SaleOrderLine>().WithMany()
                        .HasForeignKey("OrderLineId")
                        .HasConstraintName("sale_order_line_invoice_rel_order_line_id_fkey"),
                    l => l.HasOne<AccountMoveLine>().WithMany()
                        .HasForeignKey("InvoiceLineId")
                        .HasConstraintName("sale_order_line_invoice_rel_invoice_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("InvoiceLineId", "OrderLineId").HasName("sale_order_line_invoice_rel_pkey");
                        j.ToTable("sale_order_line_invoice_rel");
                        j.HasIndex(new[] { "OrderLineId", "InvoiceLineId" }, "sale_order_line_invoice_rel_order_line_id_invoice_line_id_idx");
                    });
        });

        modelBuilder.Entity<AccountMoveReversal>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_move_reversal_pkey");

            entity.ToTable("account_move_reversal");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.DateMode).HasColumnName("date_mode");
            entity.Property(e => e.JournalId).HasColumnName("journal_id");
            entity.Property(e => e.Reason).HasColumnName("reason");
            entity.Property(e => e.RefundMethod).HasColumnName("refund_method");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_move_reversal_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_reversal_create_uid_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.AccountMoveReversals)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_move_reversal_journal_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_move_reversal_write_uid_fkey");
            
            /// TODO: Add SharedTypeEntity
            //entity.HasMany(d => d.Moves).WithMany(p => p.Reversals)
            entity.HasMany<AccountMove>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountMoveReversalMove",
                    r => r.HasOne<AccountMove>().WithMany()
                        .HasForeignKey("MoveId")
                        .HasConstraintName("account_move_reversal_move_move_id_fkey"),
                    l => l.HasOne<AccountMoveReversal>().WithMany()
                        .HasForeignKey("ReversalId")
                        .HasConstraintName("account_move_reversal_move_reversal_id_fkey"),
                    j =>
                    {
                        j.HasKey("ReversalId", "MoveId").HasName("account_move_reversal_move_pkey");
                        j.ToTable("account_move_reversal_move");
                        j.HasIndex(new[] { "MoveId", "ReversalId" }, "account_move_reversal_move_move_id_reversal_id_idx");
                    });

            /// TODO: Add SharedTypeEntity
            //entity.HasMany(d => d.NewMoves).WithMany(p => p.ReversalsNavigation)
            entity.HasMany<AccountMove>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountMoveReversalNewMove",
                    r => r.HasOne<AccountMove>().WithMany()
                        .HasForeignKey("NewMoveId")
                        .HasConstraintName("account_move_reversal_new_move_new_move_id_fkey"),
                    l => l.HasOne<AccountMoveReversal>().WithMany()
                        .HasForeignKey("ReversalId")
                        .HasConstraintName("account_move_reversal_new_move_reversal_id_fkey"),
                    j =>
                    {
                        j.HasKey("ReversalId", "NewMoveId").HasName("account_move_reversal_new_move_pkey");
                        j.ToTable("account_move_reversal_new_move");
                        j.HasIndex(new[] { "NewMoveId", "ReversalId" }, "account_move_reversal_new_move_new_move_id_reversal_id_idx");
                    });
        });

        modelBuilder.Entity<AccountPartialReconcile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_partial_reconcile_pkey");

            entity.ToTable("account_partial_reconcile");

            entity.HasIndex(e => e.CreditMoveId, "account_partial_reconcile_credit_move_id_index");

            entity.HasIndex(e => e.DebitMoveId, "account_partial_reconcile_debit_move_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CreditAmountCurrency).HasColumnName("credit_amount_currency");
            entity.Property(e => e.CreditCurrencyId).HasColumnName("credit_currency_id");
            entity.Property(e => e.CreditMoveId).HasColumnName("credit_move_id");
            entity.Property(e => e.DebitAmountCurrency).HasColumnName("debit_amount_currency");
            entity.Property(e => e.DebitCurrencyId).HasColumnName("debit_currency_id");
            entity.Property(e => e.DebitMoveId).HasColumnName("debit_move_id");
            entity.Property(e => e.ExchangeMoveId).HasColumnName("exchange_move_id");
            entity.Property(e => e.FullReconcileId).HasColumnName("full_reconcile_id");
            entity.Property(e => e.MaxDate).HasColumnName("max_date");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_partial_reconcile_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_partial_reconcile_create_uid_fkey");

            entity.HasOne(d => d.CreditCurrency).WithMany(p => p.AccountPartialReconcileCreditCurrencies)
                .HasForeignKey(d => d.CreditCurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_partial_reconcile_credit_currency_id_fkey");

            entity.HasOne(d => d.CreditMove).WithMany(p => p.AccountPartialReconcileCreditMoves)
                .HasForeignKey(d => d.CreditMoveId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_partial_reconcile_credit_move_id_fkey");

            entity.HasOne(d => d.DebitCurrency).WithMany(p => p.AccountPartialReconcileDebitCurrencies)
                .HasForeignKey(d => d.DebitCurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_partial_reconcile_debit_currency_id_fkey");

            entity.HasOne(d => d.DebitMove).WithMany(p => p.AccountPartialReconcileDebitMoves)
                .HasForeignKey(d => d.DebitMoveId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_partial_reconcile_debit_move_id_fkey");

            entity.HasOne(d => d.ExchangeMove).WithMany(p => p.AccountPartialReconciles)
                .HasForeignKey(d => d.ExchangeMoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_partial_reconcile_exchange_move_id_fkey");

            entity.HasOne(d => d.FullReconcile).WithMany(p => p.AccountPartialReconciles)
                .HasForeignKey(d => d.FullReconcileId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_partial_reconcile_full_reconcile_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_partial_reconcile_write_uid_fkey");
        });

        modelBuilder.Entity<AccountPayment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_payment_pkey");

            entity.ToTable("account_payment");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.AmountCompanyCurrencySigned).HasColumnName("amount_company_currency_signed");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.DestinationAccountId).HasColumnName("destination_account_id");
            entity.Property(e => e.DestinationJournalId).HasColumnName("destination_journal_id");
            entity.Property(e => e.ForceOutstandingAccountId).HasColumnName("force_outstanding_account_id");
            entity.Property(e => e.IsInternalTransfer).HasColumnName("is_internal_transfer");
            entity.Property(e => e.IsMatched).HasColumnName("is_matched");
            entity.Property(e => e.IsReconciled).HasColumnName("is_reconciled");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.MoveId).HasColumnName("move_id");
            entity.Property(e => e.OutstandingAccountId).HasColumnName("outstanding_account_id");
            entity.Property(e => e.PairedInternalTransferPaymentId).HasColumnName("paired_internal_transfer_payment_id");
            entity.Property(e => e.PartnerBankId).HasColumnName("partner_bank_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PartnerType).HasColumnName("partner_type");
            entity.Property(e => e.PaymentMethodId).HasColumnName("payment_method_id");
            entity.Property(e => e.PaymentMethodLineId).HasColumnName("payment_method_line_id");
            entity.Property(e => e.PaymentReference).HasColumnName("payment_reference");
            entity.Property(e => e.PaymentTokenId).HasColumnName("payment_token_id");
            entity.Property(e => e.PaymentTransactionId).HasColumnName("payment_transaction_id");
            entity.Property(e => e.PaymentType).HasColumnName("payment_type");
            entity.Property(e => e.PosPaymentMethodId).HasColumnName("pos_payment_method_id");
            entity.Property(e => e.PosSessionId).HasColumnName("pos_session_id");
            entity.Property(e => e.SourcePaymentId).HasColumnName("source_payment_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_currency_id_fkey");

            entity.HasOne(d => d.DestinationAccount).WithMany(p => p.AccountPaymentDestinationAccounts)
                .HasForeignKey(d => d.DestinationAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_destination_account_id_fkey");

            entity.HasOne(d => d.DestinationJournal).WithMany(p => p.AccountPayments)
                .HasForeignKey(d => d.DestinationJournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_destination_journal_id_fkey");

            entity.HasOne(d => d.ForceOutstandingAccount).WithMany(p => p.AccountPaymentForceOutstandingAccounts)
                .HasForeignKey(d => d.ForceOutstandingAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_force_outstanding_account_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.AccountPayments)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.AccountPayments)
                .HasForeignKey(d => d.MoveId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_payment_move_id_fkey");

            entity.HasOne(d => d.OutstandingAccount).WithMany(p => p.AccountPaymentOutstandingAccounts)
                .HasForeignKey(d => d.OutstandingAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_outstanding_account_id_fkey");

            entity.HasOne(d => d.PairedInternalTransferPayment).WithMany(p => p.InversePairedInternalTransferPayment)
                .HasForeignKey(d => d.PairedInternalTransferPaymentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_paired_internal_transfer_payment_id_fkey");

            entity.HasOne(d => d.PartnerBank).WithMany(p => p.AccountPayments)
                .HasForeignKey(d => d.PartnerBankId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_partner_bank_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_payment_partner_id_fkey");

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.AccountPayments)
                .HasForeignKey(d => d.PaymentMethodId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_payment_method_id_fkey");

            entity.HasOne(d => d.PaymentMethodLine).WithMany(p => p.AccountPayments)
                .HasForeignKey(d => d.PaymentMethodLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_payment_method_line_id_fkey");

            entity.HasOne(d => d.PaymentToken).WithMany(p => p.AccountPayments)
                .HasForeignKey(d => d.PaymentTokenId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_payment_token_id_fkey");

            entity.HasOne(d => d.PaymentTransaction).WithMany(p => p.AccountPayments)
                .HasForeignKey(d => d.PaymentTransactionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_payment_transaction_id_fkey");

            entity.HasOne(d => d.PosPaymentMethod).WithMany(p => p.AccountPayments)
                .HasForeignKey(d => d.PosPaymentMethodId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_pos_payment_method_id_fkey");

            entity.HasOne(d => d.PosSession).WithMany(p => p.AccountPayments)
                .HasForeignKey(d => d.PosSessionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_pos_session_id_fkey");

            entity.HasOne(d => d.SourcePayment).WithMany(p => p.InverseSourcePayment)
                .HasForeignKey(d => d.SourcePaymentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_source_payment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_write_uid_fkey");
        });

        modelBuilder.Entity<AccountPaymentMethod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_payment_method_pkey");

            entity.ToTable("account_payment_method");

            entity.HasIndex(e => new { e.Code, e.PaymentType }, "account_payment_method_name_code_unique").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PaymentType).HasColumnName("payment_type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_method_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_method_write_uid_fkey");
        });

        modelBuilder.Entity<AccountPaymentMethodLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_payment_method_line_pkey");

            entity.ToTable("account_payment_method_line");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.JournalId).HasColumnName("journal_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PaymentAccountId).HasColumnName("payment_account_id");
            entity.Property(e => e.PaymentMethodId).HasColumnName("payment_method_id");
            entity.Property(e => e.PaymentProviderId).HasColumnName("payment_provider_id");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_method_line_create_uid_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.AccountPaymentMethodLines)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_payment_method_line_journal_id_fkey");

            entity.HasOne(d => d.PaymentAccount).WithMany(p => p.AccountPaymentMethodLines)
                .HasForeignKey(d => d.PaymentAccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_payment_method_line_payment_account_id_fkey");

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.AccountPaymentMethodLines)
                .HasForeignKey(d => d.PaymentMethodId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_payment_method_line_payment_method_id_fkey");

            entity.HasOne(d => d.PaymentProvider).WithMany(p => p.AccountPaymentMethodLines)
                .HasForeignKey(d => d.PaymentProviderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_method_line_payment_provider_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_method_line_write_uid_fkey");
        });

        modelBuilder.Entity<AccountPaymentRegister>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_payment_register_pkey");

            entity.ToTable("account_payment_register");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.CanEditWizard).HasColumnName("can_edit_wizard");
            entity.Property(e => e.CanGroupPayments).HasColumnName("can_group_payments");
            entity.Property(e => e.Communication).HasColumnName("communication");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.GroupPayment).HasColumnName("group_payment");
            entity.Property(e => e.JournalId).HasColumnName("journal_id");
            entity.Property(e => e.PartnerBankId).HasColumnName("partner_bank_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PartnerType).HasColumnName("partner_type");
            entity.Property(e => e.PaymentDate).HasColumnName("payment_date");
            entity.Property(e => e.PaymentDifferenceHandling).HasColumnName("payment_difference_handling");
            entity.Property(e => e.PaymentMethodLineId).HasColumnName("payment_method_line_id");
            entity.Property(e => e.PaymentTokenId).HasColumnName("payment_token_id");
            entity.Property(e => e.PaymentType).HasColumnName("payment_type");
            entity.Property(e => e.SourceAmount).HasColumnName("source_amount");
            entity.Property(e => e.SourceAmountCurrency).HasColumnName("source_amount_currency");
            entity.Property(e => e.SourceCurrencyId).HasColumnName("source_currency_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");
            entity.Property(e => e.WriteoffAccountId).HasColumnName("writeoff_account_id");
            entity.Property(e => e.WriteoffLabel).HasColumnName("writeoff_label");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_register_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_register_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_register_currency_id_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.AccountPaymentRegisters)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_register_journal_id_fkey");

            entity.HasOne(d => d.PartnerBank).WithMany(p => p.AccountPaymentRegisters)
                .HasForeignKey(d => d.PartnerBankId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_register_partner_bank_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_payment_register_partner_id_fkey");

            entity.HasOne(d => d.PaymentMethodLine).WithMany(p => p.AccountPaymentRegisters)
                .HasForeignKey(d => d.PaymentMethodLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_register_payment_method_line_id_fkey");

            entity.HasOne(d => d.PaymentToken).WithMany(p => p.AccountPaymentRegisters)
                .HasForeignKey(d => d.PaymentTokenId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_register_payment_token_id_fkey");

            entity.HasOne(d => d.SourceCurrency).WithMany(p => p.AccountPaymentRegisterSourceCurrencies)
                .HasForeignKey(d => d.SourceCurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_register_source_currency_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_register_write_uid_fkey");

            entity.HasOne(d => d.WriteoffAccount).WithMany(p => p.AccountPaymentRegisters)
                .HasForeignKey(d => d.WriteoffAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_register_writeoff_account_id_fkey");

            //entity.HasMany(d => d.Lines).WithMany(p => p.Wizards)
            entity.HasMany<AccountMoveLine>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountPaymentRegisterMoveLineRel",
                    r => r.HasOne<AccountMoveLine>().WithMany()
                        .HasForeignKey("LineId")
                        .HasConstraintName("account_payment_register_move_line_rel_line_id_fkey"),
                    l => l.HasOne<AccountPaymentRegister>().WithMany()
                        .HasForeignKey("WizardId")
                        .HasConstraintName("account_payment_register_move_line_rel_wizard_id_fkey"),
                    j =>
                    {
                        j.HasKey("WizardId", "LineId").HasName("account_payment_register_move_line_rel_pkey");
                        j.ToTable("account_payment_register_move_line_rel");
                        j.HasIndex(new[] { "LineId", "WizardId" }, "account_payment_register_move_line_rel_line_id_wizard_id_idx");
                    });
        });

        modelBuilder.Entity<AccountPaymentTerm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_payment_term_pkey");

            entity.ToTable("account_payment_term");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DisplayOnInvoice).HasColumnName("display_on_invoice");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Note)
                .HasColumnType("jsonb")
                .HasColumnName("note");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_term_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_term_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_term_write_uid_fkey");
        });

        modelBuilder.Entity<AccountPaymentTermLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_payment_term_line_pkey");

            entity.ToTable("account_payment_term_line");

            entity.HasIndex(e => e.PaymentId, "account_payment_term_line_payment_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Days).HasColumnName("days");
            entity.Property(e => e.DaysAfter).HasColumnName("days_after");
            entity.Property(e => e.DiscountDays).HasColumnName("discount_days");
            entity.Property(e => e.DiscountPercentage).HasColumnName("discount_percentage");
            entity.Property(e => e.EndMonth).HasColumnName("end_month");
            entity.Property(e => e.Months).HasColumnName("months");
            entity.Property(e => e.PaymentId).HasColumnName("payment_id");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.ValueAmount).HasColumnName("value_amount");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_term_line_create_uid_fkey");

            entity.HasOne(d => d.Payment).WithMany(p => p.AccountPaymentTermLines)
                .HasForeignKey(d => d.PaymentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_payment_term_line_payment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_payment_term_line_write_uid_fkey");
        });

        modelBuilder.Entity<AccountPrintJournal>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_print_journal_pkey");

            entity.ToTable("account_print_journal");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AmountCurrency).HasColumnName("amount_currency");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.SortSelection).HasColumnName("sort_selection");
            entity.Property(e => e.TargetMove).HasColumnName("target_move");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_print_journal_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_print_journal_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_print_journal_write_uid_fkey");

            //entity.HasMany(d => d.AccountJournals).WithMany(p => p.AccountPrintJournals)
            entity.HasMany<AccountJournal>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountJournalAccountPrintJournalRel",
                    r => r.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("AccountJournalId")
                        .HasConstraintName("account_journal_account_print_journal_r_account_journal_id_fkey"),
                    l => l.HasOne<AccountPrintJournal>().WithMany()
                        .HasForeignKey("AccountPrintJournalId")
                        .HasConstraintName("account_journal_account_print_jou_account_print_journal_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountPrintJournalId", "AccountJournalId").HasName("account_journal_account_print_journal_rel_pkey");
                        j.ToTable("account_journal_account_print_journal_rel");
                        j.HasIndex(new[] { "AccountJournalId", "AccountPrintJournalId" }, "account_journal_account_print_account_journal_id_account_pr_idx");
                    });
        });

        modelBuilder.Entity<AccountReconcileModel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_reconcile_model_pkey");

            entity.ToTable("account_reconcile_model");

            entity.HasIndex(e => new { e.Name, e.TenantId }, "account_reconcile_model_name_unique").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AllowPaymentTolerance).HasColumnName("allow_payment_tolerance");
            entity.Property(e => e.AutoReconcile).HasColumnName("auto_reconcile");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DecimalSeparator).HasColumnName("decimal_separator");
            entity.Property(e => e.MatchAmount).HasColumnName("match_amount");
            entity.Property(e => e.MatchAmountMax).HasColumnName("match_amount_max");
            entity.Property(e => e.MatchAmountMin).HasColumnName("match_amount_min");
            entity.Property(e => e.MatchLabel).HasColumnName("match_label");
            entity.Property(e => e.MatchLabelParam).HasColumnName("match_label_param");
            entity.Property(e => e.MatchNature).HasColumnName("match_nature");
            entity.Property(e => e.MatchNote).HasColumnName("match_note");
            entity.Property(e => e.MatchNoteParam).HasColumnName("match_note_param");
            entity.Property(e => e.MatchPartner).HasColumnName("match_partner");
            entity.Property(e => e.MatchSameCurrency).HasColumnName("match_same_currency");
            entity.Property(e => e.MatchTextLocationLabel).HasColumnName("match_text_location_label");
            entity.Property(e => e.MatchTextLocationNote).HasColumnName("match_text_location_note");
            entity.Property(e => e.MatchTextLocationReference).HasColumnName("match_text_location_reference");
            entity.Property(e => e.MatchTransactionType).HasColumnName("match_transaction_type");
            entity.Property(e => e.MatchTransactionTypeParam).HasColumnName("match_transaction_type_param");
            entity.Property(e => e.MatchingOrder).HasColumnName("matching_order");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PastMonthsLimit).HasColumnName("past_months_limit");
            entity.Property(e => e.PaymentToleranceParam).HasColumnName("payment_tolerance_param");
            entity.Property(e => e.PaymentToleranceType).HasColumnName("payment_tolerance_type");
            entity.Property(e => e.RuleType).HasColumnName("rule_type");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.ToCheck).HasColumnName("to_check");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_reconcile_model_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.AccountReconcileModels)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_message_main_attachment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_write_uid_fkey");

            //entity.HasMany(d => d.AccountJournals).WithMany(p => p.AccountReconcileModels)
            entity.HasMany<AccountJournal>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountJournalAccountReconcileModelRel",
                    r => r.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("AccountJournalId")
                        .HasConstraintName("account_journal_account_reconcile_model_account_journal_id_fkey"),
                    l => l.HasOne<AccountReconcileModel>().WithMany()
                        .HasForeignKey("AccountReconcileModelId")
                        .HasConstraintName("account_journal_account_reconci_account_reconcile_model_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountReconcileModelId", "AccountJournalId").HasName("account_journal_account_reconcile_model_rel_pkey");
                        j.ToTable("account_journal_account_reconcile_model_rel");
                        j.HasIndex(new[] { "AccountJournalId", "AccountReconcileModelId" }, "account_journal_account_recon_account_journal_id_account_re_idx");
                    });

            //entity.HasMany(d => d.ResPartnerCategories).WithMany(p => p.AccountReconcileModels)
            entity.HasMany<ResPartnerCategory>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountReconcileModelResPartnerCategoryRel",
                    r => r.HasOne<ResPartnerCategory>().WithMany()
                        .HasForeignKey("ResPartnerCategoryId")
                        .HasConstraintName("account_reconcile_model_res_partne_res_partner_category_id_fkey"),
                    l => l.HasOne<AccountReconcileModel>().WithMany()
                        .HasForeignKey("AccountReconcileModelId")
                        .HasConstraintName("account_reconcile_model_res_pa_account_reconcile_model_id_fkey1"),
                    j =>
                    {
                        j.HasKey("AccountReconcileModelId", "ResPartnerCategoryId").HasName("account_reconcile_model_res_partner_category_rel_pkey");
                        j.ToTable("account_reconcile_model_res_partner_category_rel");
                        j.HasIndex(new[] { "ResPartnerCategoryId", "AccountReconcileModelId" }, "account_reconcile_model_res_p_res_partner_category_id_accou_idx");
                    });

            //entity.HasMany(d => d.ResPartners).WithMany(p => p.AccountReconcileModels)
            entity.HasMany<ResPartner>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountReconcileModelResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("account_reconcile_model_res_partner_rel_res_partner_id_fkey"),
                    l => l.HasOne<AccountReconcileModel>().WithMany()
                        .HasForeignKey("AccountReconcileModelId")
                        .HasConstraintName("account_reconcile_model_res_par_account_reconcile_model_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountReconcileModelId", "ResPartnerId").HasName("account_reconcile_model_res_partner_rel_pkey");
                        j.ToTable("account_reconcile_model_res_partner_rel");
                        j.HasIndex(new[] { "ResPartnerId", "AccountReconcileModelId" }, "account_reconcile_model_res_p_res_partner_id_account_reconc_idx");
                    });
        });

        modelBuilder.Entity<AccountReconcileModelLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_reconcile_model_line_pkey");

            entity.ToTable("account_reconcile_model_line");

            entity.HasIndex(e => e.AnalyticDistribution, "account_reconcile_model_line_analytic_distribution_gin_index").HasMethod("gin");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.AmountString).HasColumnName("amount_string");
            entity.Property(e => e.AmountType).HasColumnName("amount_type");
            entity.Property(e => e.AnalyticDistribution)
                .HasColumnType("jsonb")
                .HasColumnName("analytic_distribution");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ForceTaxIncluded).HasColumnName("force_tax_included");
            entity.Property(e => e.JournalId).HasColumnName("journal_id");
            entity.Property(e => e.Label).HasColumnName("label");
            entity.Property(e => e.ModelId).HasColumnName("model_id");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Account).WithMany(p => p.AccountReconcileModelLines)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_reconcile_model_line_account_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_line_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_line_create_uid_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.AccountReconcileModelLines)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_reconcile_model_line_journal_id_fkey");

            entity.HasOne(d => d.Model).WithMany(p => p.AccountReconcileModelLines)
                .HasForeignKey(d => d.ModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_reconcile_model_line_model_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_line_write_uid_fkey");

            //entity.HasMany(d => d.AccountTaxes).WithMany(p => p.AccountReconcileModelLines)
            entity.HasMany<AccountTax>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountReconcileModelLineAccountTaxRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("AccountTaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_reconcile_model_line_account_tax_re_account_tax_id_fkey"),
                    l => l.HasOne<AccountReconcileModelLine>().WithMany()
                        .HasForeignKey("AccountReconcileModelLineId")
                        .HasConstraintName("account_reconcile_model_line__account_reconcile_model_line_fkey"),
                    j =>
                    {
                        j.HasKey("AccountReconcileModelLineId", "AccountTaxId").HasName("account_reconcile_model_line_account_tax_rel_pkey");
                        j.ToTable("account_reconcile_model_line_account_tax_rel");
                        j.HasIndex(new[] { "AccountTaxId", "AccountReconcileModelLineId" }, "account_reconcile_model_line__account_tax_id_account_reconc_idx");
                    });
        });

        modelBuilder.Entity<AccountReconcileModelLineTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_reconcile_model_line_template_pkey");

            entity.ToTable("account_reconcile_model_line_template");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.AmountString).HasColumnName("amount_string");
            entity.Property(e => e.AmountType).HasColumnName("amount_type");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ForceTaxIncluded).HasColumnName("force_tax_included");
            entity.Property(e => e.Label).HasColumnName("label");
            entity.Property(e => e.ModelId).HasColumnName("model_id");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Account).WithMany(p => p.AccountReconcileModelLineTemplates)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_reconcile_model_line_template_account_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_line_template_create_uid_fkey");

            entity.HasOne(d => d.Model).WithMany(p => p.AccountReconcileModelLineTemplates)
                .HasForeignKey(d => d.ModelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_line_template_model_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_line_template_write_uid_fkey");

            //entity.HasMany(d => d.AccountTaxTemplates).WithMany(p => p.AccountReconcileModelLineTemplates)
            entity.HasMany<AccountTaxTemplate>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountReconcileModelLineTemplateAccountTaxTemplateRel",
                    r => r.HasOne<AccountTaxTemplate>().WithMany()
                        .HasForeignKey("AccountTaxTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("account_reconcile_model_line_templ_account_tax_template_id_fkey"),
                    l => l.HasOne<AccountReconcileModelLineTemplate>().WithMany()
                        .HasForeignKey("AccountReconcileModelLineTemplateId")
                        .HasConstraintName("account_reconcile_model_line_account_reconcile_model_line_fkey1"),
                    j =>
                    {
                        j.HasKey("AccountReconcileModelLineTemplateId", "AccountTaxTemplateId").HasName("account_reconcile_model_line_template_account_tax_template_pkey");
                        j.ToTable("account_reconcile_model_line_template_account_tax_template_rel");
                        j.HasIndex(new[] { "AccountTaxTemplateId", "AccountReconcileModelLineTemplateId" }, "account_reconcile_model_line__account_tax_template_id_accou_idx");
                    });
        });

        modelBuilder.Entity<AccountReconcileModelPartnerMapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_reconcile_model_partner_mapping_pkey");

            entity.ToTable("account_reconcile_model_partner_mapping");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ModelId).HasColumnName("model_id");
            entity.Property(e => e.NarrationRegex).HasColumnName("narration_regex");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PaymentRefRegex).HasColumnName("payment_ref_regex");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_partner_mapping_create_uid_fkey");

            entity.HasOne(d => d.Model).WithMany(p => p.AccountReconcileModelPartnerMappings)
                .HasForeignKey(d => d.ModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_reconcile_model_partner_mapping_model_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_reconcile_model_partner_mapping_partner_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_partner_mapping_write_uid_fkey");
        });

        modelBuilder.Entity<AccountReconcileModelTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_reconcile_model_template_pkey");

            entity.ToTable("account_reconcile_model_template");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AllowPaymentTolerance).HasColumnName("allow_payment_tolerance");
            entity.Property(e => e.AutoReconcile).HasColumnName("auto_reconcile");
            entity.Property(e => e.ChartTemplateId).HasColumnName("chart_template_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DecimalSeparator).HasColumnName("decimal_separator");
            entity.Property(e => e.MatchAmount).HasColumnName("match_amount");
            entity.Property(e => e.MatchAmountMax).HasColumnName("match_amount_max");
            entity.Property(e => e.MatchAmountMin).HasColumnName("match_amount_min");
            entity.Property(e => e.MatchLabel).HasColumnName("match_label");
            entity.Property(e => e.MatchLabelParam).HasColumnName("match_label_param");
            entity.Property(e => e.MatchNature).HasColumnName("match_nature");
            entity.Property(e => e.MatchNote).HasColumnName("match_note");
            entity.Property(e => e.MatchNoteParam).HasColumnName("match_note_param");
            entity.Property(e => e.MatchPartner).HasColumnName("match_partner");
            entity.Property(e => e.MatchSameCurrency).HasColumnName("match_same_currency");
            entity.Property(e => e.MatchTextLocationLabel).HasColumnName("match_text_location_label");
            entity.Property(e => e.MatchTextLocationNote).HasColumnName("match_text_location_note");
            entity.Property(e => e.MatchTextLocationReference).HasColumnName("match_text_location_reference");
            entity.Property(e => e.MatchTransactionType).HasColumnName("match_transaction_type");
            entity.Property(e => e.MatchTransactionTypeParam).HasColumnName("match_transaction_type_param");
            entity.Property(e => e.MatchingOrder).HasColumnName("matching_order");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PaymentToleranceParam).HasColumnName("payment_tolerance_param");
            entity.Property(e => e.PaymentToleranceType).HasColumnName("payment_tolerance_type");
            entity.Property(e => e.RuleType).HasColumnName("rule_type");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.ToCheck).HasColumnName("to_check");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.ChartTemplate).WithMany(p => p.AccountReconcileModelTemplates)
                .HasForeignKey(d => d.ChartTemplateId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_reconcile_model_template_chart_template_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_template_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_reconcile_model_template_write_uid_fkey");

            //entity.HasMany(d => d.AccountJournals).WithMany(p => p.AccountReconcileModelTemplates)
            entity.HasMany<AccountJournal>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountJournalAccountReconcileModelTemplateRel",
                    r => r.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("AccountJournalId")
                        .HasConstraintName("account_journal_account_reconcile_mode_account_journal_id_fkey1"),
                    l => l.HasOne<AccountReconcileModelTemplate>().WithMany()
                        .HasForeignKey("AccountReconcileModelTemplateId")
                        .HasConstraintName("account_journal_account_recon_account_reconcile_model_temp_fkey"),
                    j =>
                    {
                        j.HasKey("AccountReconcileModelTemplateId", "AccountJournalId").HasName("account_journal_account_reconcile_model_template_rel_pkey");
                        j.ToTable("account_journal_account_reconcile_model_template_rel");
                        j.HasIndex(new[] { "AccountJournalId", "AccountReconcileModelTemplateId" }, "account_journal_account_recon_account_journal_id_account_r_idx1");
                    });

            //entity.HasMany(d => d.ResPartnerCategories).WithMany(p => p.AccountReconcileModelTemplates)
            entity.HasMany<ResPartnerCategory>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountReconcileModelTemplateResPartnerCategoryRel",
                    r => r.HasOne<ResPartnerCategory>().WithMany()
                        .HasForeignKey("ResPartnerCategoryId")
                        .HasConstraintName("account_reconcile_model_template_r_res_partner_category_id_fkey"),
                    l => l.HasOne<AccountReconcileModelTemplate>().WithMany()
                        .HasForeignKey("AccountReconcileModelTemplateId")
                        .HasConstraintName("account_reconcile_model_temp_account_reconcile_model_temp_fkey1"),
                    j =>
                    {
                        j.HasKey("AccountReconcileModelTemplateId", "ResPartnerCategoryId").HasName("account_reconcile_model_template_res_partner_category_rel_pkey");
                        j.ToTable("account_reconcile_model_template_res_partner_category_rel");
                        j.HasIndex(new[] { "ResPartnerCategoryId", "AccountReconcileModelTemplateId" }, "account_reconcile_model_templ_res_partner_category_id_accou_idx");
                    });

            //entity.HasMany(d => d.ResPartners).WithMany(p => p.AccountReconcileModelTemplates)
            entity.HasMany<ResPartner>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountReconcileModelTemplateResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("account_reconcile_model_template_res_partne_res_partner_id_fkey"),
                    l => l.HasOne<AccountReconcileModelTemplate>().WithMany()
                        .HasForeignKey("AccountReconcileModelTemplateId")
                        .HasConstraintName("account_reconcile_model_templ_account_reconcile_model_temp_fkey"),
                    j =>
                    {
                        j.HasKey("AccountReconcileModelTemplateId", "ResPartnerId").HasName("account_reconcile_model_template_res_partner_rel_pkey");
                        j.ToTable("account_reconcile_model_template_res_partner_rel");
                        j.HasIndex(new[] { "ResPartnerId", "AccountReconcileModelTemplateId" }, "account_reconcile_model_templ_res_partner_id_account_reconc_idx");
                    });
        });

        modelBuilder.Entity<AccountRecurringTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_recurring_template_pkey");

            entity.ToTable("account_recurring_template");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.JournalId).HasColumnName("journal_id");
            entity.Property(e => e.JournalState).HasColumnName("journal_state");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.RecurringInterval).HasColumnName("recurring_interval");
            entity.Property(e => e.RecurringPeriod).HasColumnName("recurring_period");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_recurring_template_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_recurring_template_create_uid_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.AccountRecurringTemplates)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_recurring_template_journal_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_recurring_template_write_uid_fkey");
        });

        modelBuilder.Entity<AccountReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_report_pkey");

            entity.ToTable("account_report");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AvailabilityCondition).HasColumnName("availability_condition");
            entity.Property(e => e.ChartTemplateId).HasColumnName("chart_template_id");
            entity.Property(e => e.CountryId).HasColumnName("country_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DefaultOpeningDateFilter).HasColumnName("default_opening_date_filter");
            entity.Property(e => e.FilterAccountType).HasColumnName("filter_account_type");
            entity.Property(e => e.FilterAnalytic).HasColumnName("filter_analytic");
            entity.Property(e => e.FilterDateRange).HasColumnName("filter_date_range");
            entity.Property(e => e.FilterFiscalPosition).HasColumnName("filter_fiscal_position");
            entity.Property(e => e.FilterGrowthComparison).HasColumnName("filter_growth_comparison");
            entity.Property(e => e.FilterHierarchy).HasColumnName("filter_hierarchy");
            entity.Property(e => e.FilterJournals).HasColumnName("filter_journals");
            entity.Property(e => e.FilterMultiCompany).HasColumnName("filter_multi_company");
            entity.Property(e => e.FilterPartner).HasColumnName("filter_partner");
            entity.Property(e => e.FilterPeriodComparison).HasColumnName("filter_period_comparison");
            entity.Property(e => e.FilterShowDraft).HasColumnName("filter_show_draft");
            entity.Property(e => e.FilterUnfoldAll).HasColumnName("filter_unfold_all");
            entity.Property(e => e.FilterUnreconciled).HasColumnName("filter_unreconciled");
            entity.Property(e => e.LoadMoreLimit).HasColumnName("load_more_limit");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.OnlyTaxExigible).HasColumnName("only_tax_exigible");
            entity.Property(e => e.RootReportId).HasColumnName("root_report_id");
            entity.Property(e => e.SearchBar).HasColumnName("search_bar");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.ChartTemplate).WithMany(p => p.AccountReports)
                .HasForeignKey(d => d.ChartTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_chart_template_id_fkey");

            entity.HasOne<ResCountry>().WithMany()
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_country_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_create_uid_fkey");

            entity.HasOne(d => d.RootReport).WithMany(p => p.InverseRootReport)
                .HasForeignKey(d => d.RootReportId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_root_report_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_write_uid_fkey");
        });

        modelBuilder.Entity<AccountReportColumn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_report_column_pkey");

            entity.ToTable("account_report_column");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.BlankIfZero).HasColumnName("blank_if_zero");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CustomAuditActionId).HasColumnName("custom_audit_action_id");
            entity.Property(e => e.ExpressionLabel).HasColumnName("expression_label");
            entity.Property(e => e.FigureType).HasColumnName("figure_type");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ReportId).HasColumnName("report_id");
            entity.Property(e => e.Sequence).HasColumnName("sequence");
            entity.Property(e => e.Sortable).HasColumnName("sortable");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_column_create_uid_fkey");

            entity.HasOne(d => d.CustomAuditAction).WithMany(p => p.AccountReportColumns)
                .HasForeignKey(d => d.CustomAuditActionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_column_custom_audit_action_id_fkey");

            entity.HasOne(d => d.Report).WithMany(p => p.AccountReportColumns)
                .HasForeignKey(d => d.ReportId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_column_report_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_column_write_uid_fkey");
        });

        modelBuilder.Entity<AccountReportExpression>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_report_expression_pkey");

            entity.ToTable("account_report_expression");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Auditable).HasColumnName("auditable");
            entity.Property(e => e.BlankIfZero).HasColumnName("blank_if_zero");
            entity.Property(e => e.CarryoverTarget).HasColumnName("carryover_target");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateScope).HasColumnName("date_scope");
            entity.Property(e => e.Engine).HasColumnName("engine");
            entity.Property(e => e.FigureType).HasColumnName("figure_type");
            entity.Property(e => e.Formula).HasColumnName("formula");
            entity.Property(e => e.GreenOnPositive).HasColumnName("green_on_positive");
            entity.Property(e => e.Label).HasColumnName("label");
            entity.Property(e => e.ReportLineId).HasColumnName("report_line_id");
            entity.Property(e => e.Subformula).HasColumnName("subformula");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_expression_create_uid_fkey");

            entity.HasOne(d => d.ReportLine).WithMany(p => p.AccountReportExpressions)
                .HasForeignKey(d => d.ReportLineId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_report_expression_report_line_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_expression_write_uid_fkey");
        });

        modelBuilder.Entity<AccountReportExternalValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_report_external_value_pkey");

            entity.ToTable("account_report_external_value");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CarryoverOriginExpressionLabel).HasColumnName("carryover_origin_expression_label");
            entity.Property(e => e.CarryoverOriginReportLineId).HasColumnName("carryover_origin_report_line_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.ForeignVatFiscalPositionId).HasColumnName("foreign_vat_fiscal_position_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.TargetReportExpressionId).HasColumnName("target_report_expression_id");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.CarryoverOriginReportLine).WithMany(p => p.AccountReportExternalValues)
                .HasForeignKey(d => d.CarryoverOriginReportLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_external_value_carryover_origin_report_line_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_report_external_value_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_external_value_create_uid_fkey");

            entity.HasOne(d => d.ForeignVatFiscalPosition).WithMany(p => p.AccountReportExternalValues)
                .HasForeignKey(d => d.ForeignVatFiscalPositionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_external_value_foreign_vat_fiscal_position__fkey");

            entity.HasOne(d => d.TargetReportExpression).WithMany(p => p.AccountReportExternalValues)
                .HasForeignKey(d => d.TargetReportExpressionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_report_external_value_target_report_expression_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_external_value_write_uid_fkey");
        });

        modelBuilder.Entity<AccountReportGeneralLedger>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_report_general_ledger_pkey");

            entity.ToTable("account_report_general_ledger");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.DisplayAccount).HasColumnName("display_account");
            entity.Property(e => e.InitialBalance).HasColumnName("initial_balance");
            entity.Property(e => e.Sortby).HasColumnName("sortby");
            entity.Property(e => e.TargetMove).HasColumnName("target_move");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_report_general_ledger_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_general_ledger_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_general_ledger_write_uid_fkey");

            //entity.HasMany(d => d.AccountAccounts).WithMany(p => p.AccountReportGeneralLedgers)
            entity.HasMany<AccountAccount>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountAccountReportGeneralLedgerRel",
                    r => r.HasOne<AccountAccount>().WithMany()
                        .HasForeignKey("AccountAccountId")
                        .HasConstraintName("account_account_account_report_general__account_account_id_fkey"),
                    l => l.HasOne<AccountReportGeneralLedger>().WithMany()
                        .HasForeignKey("AccountReportGeneralLedgerId")
                        .HasConstraintName("account_account_account_repor_account_report_general_ledge_fkey"),
                    j =>
                    {
                        j.HasKey("AccountReportGeneralLedgerId", "AccountAccountId").HasName("account_account_account_report_general_ledger_rel_pkey");
                        j.ToTable("account_account_account_report_general_ledger_rel");
                        j.HasIndex(new[] { "AccountAccountId", "AccountReportGeneralLedgerId" }, "account_account_account_repor_account_account_id_account_re_idx");
                    });

            //entity.HasMany(d => d.AccountAnalyticAccounts).WithMany(p => p.AccountReportGeneralLedgers)
            entity.HasMany<AccountAnalyticAccount>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAnalyticAccountAccountReportGeneralLedgerRel",
                    r => r.HasOne<AccountAnalyticAccount>().WithMany()
                        .HasForeignKey("AccountAnalyticAccountId")
                        .HasConstraintName("account_analytic_account_acco_account_analytic_account_id_fkey1"),
                    l => l.HasOne<AccountReportGeneralLedger>().WithMany()
                        .HasForeignKey("AccountReportGeneralLedgerId")
                        .HasConstraintName("account_analytic_account_acco_account_report_general_ledge_fkey"),
                    j =>
                    {
                        j.HasKey("AccountReportGeneralLedgerId", "AccountAnalyticAccountId").HasName("account_analytic_account_account_report_general_ledger_rel_pkey");
                        j.ToTable("account_analytic_account_account_report_general_ledger_rel");
                        j.HasIndex(new[] { "AccountAnalyticAccountId", "AccountReportGeneralLedgerId" }, "account_analytic_account_acco_account_analytic_account_id__idx1");
                    });

            //entity.HasMany(d => d.Journals).WithMany(p => p.AccountsNavigation)
            entity.HasMany<AccountJournal>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountReportGeneralLedgerJournalRel",
                    r => r.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("JournalId")
                        .HasConstraintName("account_report_general_ledger_journal_rel_journal_id_fkey"),
                    l => l.HasOne<AccountReportGeneralLedger>().WithMany()
                        .HasForeignKey("AccountId")
                        .HasConstraintName("account_report_general_ledger_journal_rel_account_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountId", "JournalId").HasName("account_report_general_ledger_journal_rel_pkey");
                        j.ToTable("account_report_general_ledger_journal_rel");
                        j.HasIndex(new[] { "JournalId", "AccountId" }, "account_report_general_ledger_journal_journal_id_account_id_idx");
                    });

            //entity.HasMany(d => d.ResPartners).WithMany(p => p.AccountReportGeneralLedgers)
            entity.HasMany<ResPartner>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountReportGeneralLedgerResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("account_report_general_ledger_res_partner_r_res_partner_id_fkey"),
                    l => l.HasOne<AccountReportGeneralLedger>().WithMany()
                        .HasForeignKey("AccountReportGeneralLedgerId")
                        .HasConstraintName("account_report_general_ledger_account_report_general_ledge_fkey"),
                    j =>
                    {
                        j.HasKey("AccountReportGeneralLedgerId", "ResPartnerId").HasName("account_report_general_ledger_res_partner_rel_pkey");
                        j.ToTable("account_report_general_ledger_res_partner_rel");
                        j.HasIndex(new[] { "ResPartnerId", "AccountReportGeneralLedgerId" }, "account_report_general_ledger_res_partner_id_account_report_idx");
                    });
        });

        modelBuilder.Entity<AccountReportLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_report_line_pkey");

            entity.ToTable("account_report_line");

            entity.HasIndex(e => e.Code, "account_report_line_code_uniq").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.ActionId).HasColumnName("action_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Foldable).HasColumnName("foldable");
            entity.Property(e => e.Groupby).HasColumnName("groupby");
            entity.Property(e => e.HideIfZero).HasColumnName("hide_if_zero");
            entity.Property(e => e.HierarchyLevel).HasColumnName("hierarchy_level");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PrintOnNewPage).HasColumnName("print_on_new_page");
            entity.Property(e => e.ReportId).HasColumnName("report_id");
            entity.Property(e => e.Sequence).HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_line_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_line_parent_id_fkey");

            entity.HasOne(d => d.Report).WithMany(p => p.AccountReportLines)
                .HasForeignKey(d => d.ReportId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_report_line_report_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_line_write_uid_fkey");
        });

        modelBuilder.Entity<AccountReportPartnerLedger>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_report_partner_ledger_pkey");

            entity.ToTable("account_report_partner_ledger");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AmountCurrency).HasColumnName("amount_currency");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.Reconciled).HasColumnName("reconciled");
            entity.Property(e => e.ResultSelection).HasColumnName("result_selection");
            entity.Property(e => e.TargetMove).HasColumnName("target_move");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_report_partner_ledger_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_partner_ledger_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_report_partner_ledger_write_uid_fkey");

            //entity.HasMany(d => d.AccountJournals).WithMany(p => p.AccountReportPartnerLedgers)
            entity.HasMany<AccountJournal>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountJournalAccountReportPartnerLedgerRel",
                    r => r.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("AccountJournalId")
                        .HasConstraintName("account_journal_account_report_partner__account_journal_id_fkey"),
                    l => l.HasOne<AccountReportPartnerLedger>().WithMany()
                        .HasForeignKey("AccountReportPartnerLedgerId")
                        .HasConstraintName("account_journal_account_repor_account_report_partner_ledge_fkey"),
                    j =>
                    {
                        j.HasKey("AccountReportPartnerLedgerId", "AccountJournalId").HasName("account_journal_account_report_partner_ledger_rel_pkey");
                        j.ToTable("account_journal_account_report_partner_ledger_rel");
                        j.HasIndex(new[] { "AccountJournalId", "AccountReportPartnerLedgerId" }, "account_journal_account_repor_account_journal_id_account_re_idx");
                    });

            //entity.HasMany(d => d.ResPartners).WithMany(p => p.AccountReportPartnerLedgers)
            entity.HasMany<ResPartner>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountReportPartnerLedgerResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("account_report_partner_ledger_res_partner_r_res_partner_id_fkey"),
                    l => l.HasOne<AccountReportPartnerLedger>().WithMany()
                        .HasForeignKey("AccountReportPartnerLedgerId")
                        .HasConstraintName("account_report_partner_ledger_account_report_partner_ledge_fkey"),
                    j =>
                    {
                        j.HasKey("AccountReportPartnerLedgerId", "ResPartnerId").HasName("account_report_partner_ledger_res_partner_rel_pkey");
                        j.ToTable("account_report_partner_ledger_res_partner_rel");
                        j.HasIndex(new[] { "ResPartnerId", "AccountReportPartnerLedgerId" }, "account_report_partner_ledger_res_partner_id_account_report_idx");
                    });
        });

        modelBuilder.Entity<AccountResequenceWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_resequence_wizard_pkey");

            entity.ToTable("account_resequence_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.FirstDate).HasColumnName("first_date");
            entity.Property(e => e.FirstName).HasColumnName("first_name");
            entity.Property(e => e.Ordering).HasColumnName("ordering");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_resequence_wizard_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_resequence_wizard_write_uid_fkey");

            //entity.HasMany(d => d.AccountMoves).WithMany(p => p.AccountResequenceWizards)
            entity.HasMany<AccountMove>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountMoveAccountResequenceWizardRel",
                    r => r.HasOne<AccountMove>().WithMany()
                        .HasForeignKey("AccountMoveId")
                        .HasConstraintName("account_move_account_resequence_wizard_rel_account_move_id_fkey"),
                    l => l.HasOne<AccountResequenceWizard>().WithMany()
                        .HasForeignKey("AccountResequenceWizardId")
                        .HasConstraintName("account_move_account_resequen_account_resequence_wizard_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountResequenceWizardId", "AccountMoveId").HasName("account_move_account_resequence_wizard_rel_pkey");
                        j.ToTable("account_move_account_resequence_wizard_rel");
                        j.HasIndex(new[] { "AccountMoveId", "AccountResequenceWizardId" }, "account_move_account_resequen_account_move_id_account_reseq_idx");
                    });
        });

        modelBuilder.Entity<AccountSetupBankManualConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_setup_bank_manual_config_pkey");

            entity.ToTable("account_setup_bank_manual_config");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.NewJournalName).HasColumnName("new_journal_name");
            entity.Property(e => e.NumJournalsWithoutAccount).HasColumnName("num_journals_without_account");
            entity.Property(e => e.ResPartnerBankId).HasColumnName("res_partner_bank_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_setup_bank_manual_config_create_uid_fkey");

            entity.HasOne(d => d.ResPartnerBank).WithMany(p => p.AccountSetupBankManualConfigs)
                .HasForeignKey(d => d.ResPartnerBankId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_setup_bank_manual_config_res_partner_bank_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_setup_bank_manual_config_write_uid_fkey");
        });

        modelBuilder.Entity<AccountTax>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_tax_pkey");

            entity.ToTable("account_tax");

            entity.HasIndex(e => new { e.Name, e.TenantId, e.TypeTaxUse, e.TaxScope }, "account_tax_name_company_uniq").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.AmountType).HasColumnName("amount_type");
            entity.Property(e => e.Analytic).HasColumnName("analytic");
            entity.Property(e => e.CashBasisTransitionAccountId).HasColumnName("cash_basis_transition_account_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CountryId).HasColumnName("country_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.IncludeBaseAmount).HasColumnName("include_base_amount");
            entity.Property(e => e.IsBaseAffected).HasColumnName("is_base_affected");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PriceInclude).HasColumnName("price_include");
            entity.Property(e => e.RealAmount).HasColumnName("real_amount");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.TaxExigibility).HasColumnName("tax_exigibility");
            entity.Property(e => e.TaxGroupId).HasColumnName("tax_group_id");
            entity.Property(e => e.TaxScope).HasColumnName("tax_scope");
            entity.Property(e => e.TypeTaxUse).HasColumnName("type_tax_use");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.CashBasisTransitionAccount).WithMany(p => p.AccountTaxes)
                .HasForeignKey(d => d.CashBasisTransitionAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_cash_basis_transition_account_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_tax_company_id_fkey");

            entity.HasOne<ResCountry>().WithMany()
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_tax_country_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_create_uid_fkey");

            entity.HasOne(d => d.TaxGroup).WithMany(p => p.AccountTaxes)
                .HasForeignKey(d => d.TaxGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_tax_tax_group_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_write_uid_fkey");

            //entity.HasMany(d => d.ChildTaxes).WithMany(p => p.ParentTaxes)
            entity.HasMany<AccountTax>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxFiliationRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("ChildTax")
                        .HasConstraintName("account_tax_filiation_rel_child_tax_fkey"),
                    l => l.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("ParentTax")
                        .HasConstraintName("account_tax_filiation_rel_parent_tax_fkey"),
                    j =>
                    {
                        j.HasKey("ParentTax", "ChildTax").HasName("account_tax_filiation_rel_pkey");
                        j.ToTable("account_tax_filiation_rel");
                        j.HasIndex(new[] { "ChildTax", "ParentTax" }, "account_tax_filiation_rel_child_tax_parent_tax_idx");
                    });

            //entity.HasMany(d => d.ParentTaxes).WithMany(p => p.ChildTaxes)
            entity.HasMany<AccountTax>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxFiliationRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("ParentTax")
                        .HasConstraintName("account_tax_filiation_rel_parent_tax_fkey"),
                    l => l.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("ChildTax")
                        .HasConstraintName("account_tax_filiation_rel_child_tax_fkey"),
                    j =>
                    {
                        j.HasKey("ParentTax", "ChildTax").HasName("account_tax_filiation_rel_pkey");
                        j.ToTable("account_tax_filiation_rel");
                        j.HasIndex(new[] { "ChildTax", "ParentTax" }, "account_tax_filiation_rel_child_tax_parent_tax_idx");
                    });
        });

        modelBuilder.Entity<AccountTaxGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_tax_group_pkey");

            entity.ToTable("account_tax_group");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CountryId).HasColumnName("country_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PrecedingSubtotal).HasColumnName("preceding_subtotal");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCountry>().WithMany()
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_group_country_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_group_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_group_write_uid_fkey");
        });

        modelBuilder.Entity<AccountTaxRepartitionLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_tax_repartition_line_pkey");

            entity.ToTable("account_tax_repartition_line");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.FactorPercent).HasColumnName("factor_percent");
            entity.Property(e => e.InvoiceTaxId).HasColumnName("invoice_tax_id");
            entity.Property(e => e.RefundTaxId).HasColumnName("refund_tax_id");
            entity.Property(e => e.RepartitionType).HasColumnName("repartition_type");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.UseInTaxClosing).HasColumnName("use_in_tax_closing");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Account).WithMany(p => p.AccountTaxRepartitionLines)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_repartition_line_account_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_repartition_line_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_repartition_line_create_uid_fkey");

            entity.HasOne(d => d.InvoiceTax).WithMany(p => p.AccountTaxRepartitionLineInvoiceTaxes)
                .HasForeignKey(d => d.InvoiceTaxId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_tax_repartition_line_invoice_tax_id_fkey");

            entity.HasOne(d => d.RefundTax).WithMany(p => p.AccountTaxRepartitionLineRefundTaxes)
                .HasForeignKey(d => d.RefundTaxId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_tax_repartition_line_refund_tax_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_repartition_line_write_uid_fkey");

            //entity.HasMany(d => d.AccountAccountTags).WithMany(p => p.AccountTaxRepartitionLines)
            entity.HasMany<AccountAccountTag>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountTagAccountTaxRepartitionLineRel",
                    r => r.HasOne<AccountAccountTag>().WithMany()
                        .HasForeignKey("AccountAccountTagId")
                        .HasConstraintName("account_account_tag_account_tax_rep_account_account_tag_id_fkey"),
                    l => l.HasOne<AccountTaxRepartitionLine>().WithMany()
                        .HasForeignKey("AccountTaxRepartitionLineId")
                        .HasConstraintName("account_account_tag_account_t_account_tax_repartition_line_fkey"),
                    j =>
                    {
                        j.HasKey("AccountTaxRepartitionLineId", "AccountAccountTagId").HasName("account_account_tag_account_tax_repartition_line_rel_pkey");
                        j.ToTable("account_account_tag_account_tax_repartition_line_rel");
                        j.HasIndex(new[] { "AccountAccountTagId", "AccountTaxRepartitionLineId" }, "account_account_tag_account_t_account_account_tag_id_accoun_idx");
                    });
        });

        modelBuilder.Entity<AccountTaxRepartitionLineTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_tax_repartition_line_template_pkey");

            entity.ToTable("account_tax_repartition_line_template");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.FactorPercent).HasColumnName("factor_percent");
            entity.Property(e => e.InvoiceTaxId).HasColumnName("invoice_tax_id");
            entity.Property(e => e.RefundTaxId).HasColumnName("refund_tax_id");
            entity.Property(e => e.RepartitionType).HasColumnName("repartition_type");
            entity.Property(e => e.UseInTaxClosing).HasColumnName("use_in_tax_closing");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Account).WithMany(p => p.AccountTaxRepartitionLineTemplates)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_repartition_line_template_account_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_repartition_line_template_create_uid_fkey");

            entity.HasOne(d => d.InvoiceTax).WithMany(p => p.AccountTaxRepartitionLineTemplateInvoiceTaxes)
                .HasForeignKey(d => d.InvoiceTaxId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_repartition_line_template_invoice_tax_id_fkey");

            entity.HasOne(d => d.RefundTax).WithMany(p => p.AccountTaxRepartitionLineTemplateRefundTaxes)
                .HasForeignKey(d => d.RefundTaxId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_repartition_line_template_refund_tax_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_repartition_line_template_write_uid_fkey");

            //entity.HasMany(d => d.AccountAccountTags).WithMany(p => p.AccountTaxRepartitionLineTemplates)
            entity.HasMany<AccountAccountTag>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxRepartitionFinancialTag",
                    r => r.HasOne<AccountAccountTag>().WithMany()
                        .HasForeignKey("AccountAccountTagId")
                        .HasConstraintName("account_tax_repartition_financial_t_account_account_tag_id_fkey"),
                    l => l.HasOne<AccountTaxRepartitionLineTemplate>().WithMany()
                        .HasForeignKey("AccountTaxRepartitionLineTemplateId")
                        .HasConstraintName("account_tax_repartition_finan_account_tax_repartition_line_fkey"),
                    j =>
                    {
                        j.HasKey("AccountTaxRepartitionLineTemplateId", "AccountAccountTagId").HasName("account_tax_repartition_financial_tags_pkey");
                        j.ToTable("account_tax_repartition_financial_tags");
                        j.HasIndex(new[] { "AccountAccountTagId", "AccountTaxRepartitionLineTemplateId" }, "account_tax_repartition_finan_account_account_tag_id_accoun_idx");
                    });

            /// TODO: SharedTypeEntity
            //entity.HasMany(d => d.AccountReportExpressions).WithMany(p => p.AccountTaxRepartitionLineTemplates)
            entity.HasMany<AccountReportExpression>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxRepTemplateMinu",
                    r => r.HasOne<AccountReportExpression>().WithMany()
                        .HasForeignKey("AccountReportExpressionId")
                        .HasConstraintName("account_tax_rep_template_minu_account_report_expression_id_fkey"),
                    l => l.HasOne<AccountTaxRepartitionLineTemplate>().WithMany()
                        .HasForeignKey("AccountTaxRepartitionLineTemplateId")
                        .HasConstraintName("account_tax_rep_template_minu_account_tax_repartition_line_fkey"),
                    j =>
                    {
                        j.HasKey("AccountTaxRepartitionLineTemplateId", "AccountReportExpressionId").HasName("account_tax_rep_template_minus_pkey");
                        j.ToTable("account_tax_rep_template_minus");
                        j.HasIndex(new[] { "AccountReportExpressionId", "AccountTaxRepartitionLineTemplateId" }, "account_tax_rep_template_minu_account_report_expression_id__idx");
                    });

            /// TODO: SharedTypeEntity
            //entity.HasMany(d => d.AccountReportExpressionsNavigation).WithMany(p => p.AccountTaxRepartitionLineTemplatesNavigation)
            entity.HasMany<AccountReportExpression>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxRepTemplatePlu",
                    r => r.HasOne<AccountReportExpression>().WithMany()
                        .HasForeignKey("AccountReportExpressionId")
                        .HasConstraintName("account_tax_rep_template_plus_account_report_expression_id_fkey"),
                    l => l.HasOne<AccountTaxRepartitionLineTemplate>().WithMany()
                        .HasForeignKey("AccountTaxRepartitionLineTemplateId")
                        .HasConstraintName("account_tax_rep_template_plus_account_tax_repartition_line_fkey"),
                    j =>
                    {
                        j.HasKey("AccountTaxRepartitionLineTemplateId", "AccountReportExpressionId").HasName("account_tax_rep_template_plus_pkey");
                        j.ToTable("account_tax_rep_template_plus");
                        j.HasIndex(new[] { "AccountReportExpressionId", "AccountTaxRepartitionLineTemplateId" }, "account_tax_rep_template_plus_account_report_expression_id__idx");
                    });
        });

        modelBuilder.Entity<AccountTaxReportWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_tax_report_wizard_pkey");

            entity.ToTable("account_tax_report_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.TargetMove).HasColumnName("target_move");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("account_tax_report_wizard_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_report_wizard_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_report_wizard_write_uid_fkey");

            //entity.HasMany(d => d.AccountJournals).WithMany(p => p.AccountTaxReportWizards)
            entity.HasMany<AccountJournal>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountJournalAccountTaxReportWizardRel",
                    r => r.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("AccountJournalId")
                        .HasConstraintName("account_journal_account_tax_report_wiza_account_journal_id_fkey"),
                    l => l.HasOne<AccountTaxReportWizard>().WithMany()
                        .HasForeignKey("AccountTaxReportWizardId")
                        .HasConstraintName("account_journal_account_tax_r_account_tax_report_wizard_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountTaxReportWizardId", "AccountJournalId").HasName("account_journal_account_tax_report_wizard_rel_pkey");
                        j.ToTable("account_journal_account_tax_report_wizard_rel");
                        j.HasIndex(new[] { "AccountJournalId", "AccountTaxReportWizardId" }, "account_journal_account_tax_r_account_journal_id_account_ta_idx");
                    });
        });

        modelBuilder.Entity<AccountTaxTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_tax_template_pkey");

            entity.ToTable("account_tax_template");

            entity.HasIndex(e => new { e.Name, e.TypeTaxUse, e.TaxScope, e.ChartTemplateId }, "account_tax_template_name_company_uniq").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.AmountType).HasColumnName("amount_type");
            entity.Property(e => e.Analytic).HasColumnName("analytic");
            entity.Property(e => e.CashBasisTransitionAccountId).HasColumnName("cash_basis_transition_account_id");
            entity.Property(e => e.ChartTemplateId).HasColumnName("chart_template_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.IncludeBaseAmount).HasColumnName("include_base_amount");
            entity.Property(e => e.IsBaseAffected).HasColumnName("is_base_affected");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PriceInclude).HasColumnName("price_include");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.TaxExigibility).HasColumnName("tax_exigibility");
            entity.Property(e => e.TaxGroupId).HasColumnName("tax_group_id");
            entity.Property(e => e.TaxScope).HasColumnName("tax_scope");
            entity.Property(e => e.TypeTaxUse).HasColumnName("type_tax_use");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.CashBasisTransitionAccount).WithMany(p => p.AccountTaxTemplates)
                .HasForeignKey(d => d.CashBasisTransitionAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_template_cash_basis_transition_account_id_fkey");

            entity.HasOne(d => d.ChartTemplate).WithMany(p => p.AccountTaxTemplates)
                .HasForeignKey(d => d.ChartTemplateId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("account_tax_template_chart_template_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_template_create_uid_fkey");

            entity.HasOne(d => d.TaxGroup).WithMany(p => p.AccountTaxTemplates)
                .HasForeignKey(d => d.TaxGroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_template_tax_group_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tax_template_write_uid_fkey");

            //entity.HasMany(d => d.ChildTaxes).WithMany(p => p.ParentTaxes)
            entity.HasMany<AccountTaxTemplate>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxTemplateFiliationRel",
                    r => r.HasOne<AccountTaxTemplate>().WithMany()
                        .HasForeignKey("ChildTax")
                        .HasConstraintName("account_tax_template_filiation_rel_child_tax_fkey"),
                    l => l.HasOne<AccountTaxTemplate>().WithMany()
                        .HasForeignKey("ParentTax")
                        .HasConstraintName("account_tax_template_filiation_rel_parent_tax_fkey"),
                    j =>
                    {
                        j.HasKey("ParentTax", "ChildTax").HasName("account_tax_template_filiation_rel_pkey");
                        j.ToTable("account_tax_template_filiation_rel");
                        j.HasIndex(new[] { "ChildTax", "ParentTax" }, "account_tax_template_filiation_rel_child_tax_parent_tax_idx");
                    });

            //entity.HasMany(d => d.ParentTaxes).WithMany(p => p.ChildTaxes)
            entity.HasMany<AccountTaxTemplate>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxTemplateFiliationRel",
                    r => r.HasOne<AccountTaxTemplate>().WithMany()
                        .HasForeignKey("ParentTax")
                        .HasConstraintName("account_tax_template_filiation_rel_parent_tax_fkey"),
                    l => l.HasOne<AccountTaxTemplate>().WithMany()
                        .HasForeignKey("ChildTax")
                        .HasConstraintName("account_tax_template_filiation_rel_child_tax_fkey"),
                    j =>
                    {
                        j.HasKey("ParentTax", "ChildTax").HasName("account_tax_template_filiation_rel_pkey");
                        j.ToTable("account_tax_template_filiation_rel");
                        j.HasIndex(new[] { "ChildTax", "ParentTax" }, "account_tax_template_filiation_rel_child_tax_parent_tax_idx");
                    });
        });

        modelBuilder.Entity<AccountTourUploadBill>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_tour_upload_bill_pkey");

            entity.ToTable("account_tour_upload_bill");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Selection).HasColumnName("selection");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tour_upload_bill_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tour_upload_bill_write_uid_fkey");

            //entity.HasMany(d => d.IrAttachments).WithMany(p => p.AccountTourUploadBills)
            entity.HasMany<IrAttachment>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTourUploadBillIrAttachmentsRel",
                    r => r.HasOne<IrAttachment>().WithMany()
                        .HasForeignKey("IrAttachmentId")
                        .HasConstraintName("account_tour_upload_bill_ir_attachments_r_ir_attachment_id_fkey"),
                    l => l.HasOne<AccountTourUploadBill>().WithMany()
                        .HasForeignKey("AccountTourUploadBillId")
                        .HasConstraintName("account_tour_upload_bill_ir_at_account_tour_upload_bill_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountTourUploadBillId", "IrAttachmentId").HasName("account_tour_upload_bill_ir_attachments_rel_pkey");
                        j.ToTable("account_tour_upload_bill_ir_attachments_rel");
                        j.HasIndex(new[] { "IrAttachmentId", "AccountTourUploadBillId" }, "account_tour_upload_bill_ir_a_ir_attachment_id_account_tour_idx");
                    });
        });

        modelBuilder.Entity<AccountTourUploadBillEmailConfirm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_tour_upload_bill_email_confirm_pkey");

            entity.ToTable("account_tour_upload_bill_email_confirm");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.EmailAlias).HasColumnName("email_alias");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tour_upload_bill_email_confirm_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_tour_upload_bill_email_confirm_write_uid_fkey");
        });

        modelBuilder.Entity<AccountUnreconcile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("account_unreconcile_pkey");

            entity.ToTable("account_unreconcile");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_unreconcile_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("account_unreconcile_write_uid_fkey");
        });

        modelBuilder.Entity<AccountingReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("accounting_report_pkey");

            entity.ToTable("accounting_report");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountReportId).HasColumnName("account_report_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateFromCmp).HasColumnName("date_from_cmp");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.DateToCmp).HasColumnName("date_to_cmp");
            entity.Property(e => e.DebitCredit).HasColumnName("debit_credit");
            entity.Property(e => e.EnableFilter).HasColumnName("enable_filter");
            entity.Property(e => e.FilterCmp).HasColumnName("filter_cmp");
            entity.Property(e => e.LabelFilter).HasColumnName("label_filter");
            entity.Property(e => e.TargetMove).HasColumnName("target_move");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AccountReport).WithMany(p => p.AccountingReports)
                .HasForeignKey(d => d.AccountReportId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("accounting_report_account_report_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("accounting_report_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("accounting_report_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("accounting_report_write_uid_fkey");

            //entity.HasMany(d => d.AccountJournals).WithMany(p => p.AccountingReports)
            entity.HasMany<AccountJournal>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountJournalAccountingReportRel",
                    r => r.HasOne<AccountJournal>().WithMany()
                        .HasForeignKey("AccountJournalId")
                        .HasConstraintName("account_journal_accounting_report_rel_account_journal_id_fkey"),
                    l => l.HasOne<AccountingReport>().WithMany()
                        .HasForeignKey("AccountingReportId")
                        .HasConstraintName("account_journal_accounting_report_rel_accounting_report_id_fkey"),
                    j =>
                    {
                        j.HasKey("AccountingReportId", "AccountJournalId").HasName("account_journal_accounting_report_rel_pkey");
                        j.ToTable("account_journal_accounting_report_rel");
                        j.HasIndex(new[] { "AccountJournalId", "AccountingReportId" }, "account_journal_accounting_re_account_journal_id_accounting_idx");
                    });
        });

        modelBuilder.Entity<ApplicantGetRefuseReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("applicant_get_refuse_reason_pkey");

            entity.ToTable("applicant_get_refuse_reason");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.RefuseReasonId).HasColumnName("refuse_reason_id");
            entity.Property(e => e.SendMail).HasColumnName("send_mail");
            entity.Property(e => e.TemplateId).HasColumnName("template_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("applicant_get_refuse_reason_create_uid_fkey");

            entity.HasOne(d => d.RefuseReason).WithMany(p => p.ApplicantGetRefuseReasons)
                .HasForeignKey(d => d.RefuseReasonId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("applicant_get_refuse_reason_refuse_reason_id_fkey");

            entity.HasOne(d => d.Template).WithMany(p => p.ApplicantGetRefuseReasons)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("applicant_get_refuse_reason_template_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("applicant_get_refuse_reason_write_uid_fkey");

            //entity.HasMany(d => d.HrApplicants).WithMany(p => p.ApplicantGetRefuseReasons)
            entity.HasMany<HrApplicant>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ApplicantGetRefuseReasonHrApplicantRel",
                    r => r.HasOne<HrApplicant>().WithMany()
                        .HasForeignKey("HrApplicantId")
                        .HasConstraintName("applicant_get_refuse_reason_hr_applicant_r_hr_applicant_id_fkey"),
                    l => l.HasOne<ApplicantGetRefuseReason>().WithMany()
                        .HasForeignKey("ApplicantGetRefuseReasonId")
                        .HasConstraintName("applicant_get_refuse_reason_h_applicant_get_refuse_reason__fkey"),
                    j =>
                    {
                        j.HasKey("ApplicantGetRefuseReasonId", "HrApplicantId").HasName("applicant_get_refuse_reason_hr_applicant_rel_pkey");
                        j.ToTable("applicant_get_refuse_reason_hr_applicant_rel");
                        j.HasIndex(new[] { "HrApplicantId", "ApplicantGetRefuseReasonId" }, "applicant_get_refuse_reason_h_hr_applicant_id_applicant_get_idx");
                    });
        });

        modelBuilder.Entity<ApplicantSendMail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("applicant_send_mail_pkey");

            entity.ToTable("applicant_send_mail");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AuthorId).HasColumnName("author_id");
            entity.Property(e => e.Body).HasColumnName("body");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Lang).HasColumnName("lang");
            entity.Property(e => e.Subject).HasColumnName("subject");
            entity.Property(e => e.TemplateId).HasColumnName("template_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Author).WithMany(p => p.ApplicantSendMails)
                .HasForeignKey(d => d.AuthorId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("applicant_send_mail_author_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("applicant_send_mail_create_uid_fkey");

            entity.HasOne(d => d.Template).WithMany(p => p.ApplicantSendMails)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("applicant_send_mail_template_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("applicant_send_mail_write_uid_fkey");

            //entity.HasMany(d => d.HrApplicants).WithMany(p => p.ApplicantSendMails)
            entity.HasMany<HrApplicant>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ApplicantSendMailHrApplicantRel",
                    r => r.HasOne<HrApplicant>().WithMany()
                        .HasForeignKey("HrApplicantId")
                        .HasConstraintName("applicant_send_mail_hr_applicant_rel_hr_applicant_id_fkey"),
                    l => l.HasOne<ApplicantSendMail>().WithMany()
                        .HasForeignKey("ApplicantSendMailId")
                        .HasConstraintName("applicant_send_mail_hr_applicant_re_applicant_send_mail_id_fkey"),
                    j =>
                    {
                        j.HasKey("ApplicantSendMailId", "HrApplicantId").HasName("applicant_send_mail_hr_applicant_rel_pkey");
                        j.ToTable("applicant_send_mail_hr_applicant_rel");
                        j.HasIndex(new[] { "HrApplicantId", "ApplicantSendMailId" }, "applicant_send_mail_hr_applic_hr_applicant_id_applicant_sen_idx");
                    });
        });

        modelBuilder.Entity<AssetDepreciationConfirmationWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("asset_depreciation_confirmation_wizard_pkey");

            entity.ToTable("asset_depreciation_confirmation_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("asset_depreciation_confirmation_wizard_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("asset_depreciation_confirmation_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<AssetModify>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("asset_modify_pkey");

            entity.ToTable("asset_modify");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.MethodEnd).HasColumnName("method_end");
            entity.Property(e => e.MethodNumber).HasColumnName("method_number");
            entity.Property(e => e.MethodPeriod).HasColumnName("method_period");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("asset_modify_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("asset_modify_write_uid_fkey");
        });

        modelBuilder.Entity<AuthTotpDevice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("auth_totp_device_pkey");

            entity.ToTable("auth_totp_device");

            entity.HasIndex(e => new { e.UserId, e.Index }, "auth_totp_device_user_id_index_idx");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasDefaultValueSql("(now() AT TIME ZONE 'utc'::text)")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.Index).HasColumnName("index");
            entity.Property(e => e.Key).HasColumnName("key");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Scope).HasColumnName("scope");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("auth_totp_device_user_id_fkey");
        });

        modelBuilder.Entity<AuthTotpWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("auth_totp_wizard_pkey");

            entity.ToTable("auth_totp_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Qrcode).HasColumnName("qrcode");
            entity.Property(e => e.Secret).HasColumnName("secret");
            entity.Property(e => e.Url).HasColumnName("url");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("auth_totp_wizard_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("auth_totp_wizard_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("auth_totp_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<BarcodeNomenclature>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("barcode_nomenclature_pkey");

            entity.ToTable("barcode_nomenclature");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Gs1SeparatorFnc1).HasColumnName("gs1_separator_fnc1");
            entity.Property(e => e.IsGs1Nomenclature).HasColumnName("is_gs1_nomenclature");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.UpcEanConv).HasColumnName("upc_ean_conv");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("barcode_nomenclature_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("barcode_nomenclature_write_uid_fkey");
        });

        modelBuilder.Entity<BarcodeRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("barcode_rule_pkey");

            entity.ToTable("barcode_rule");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Alias).HasColumnName("alias");
            entity.Property(e => e.AssociatedUomId).HasColumnName("associated_uom_id");
            entity.Property(e => e.BarcodeNomenclatureId).HasColumnName("barcode_nomenclature_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Encoding).HasColumnName("encoding");
            entity.Property(e => e.Gs1ContentType).HasColumnName("gs1_content_type");
            entity.Property(e => e.Gs1DecimalUsage).HasColumnName("gs1_decimal_usage");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Pattern).HasColumnName("pattern");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AssociatedUom).WithMany(p => p.BarcodeRules)
                .HasForeignKey(d => d.AssociatedUomId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("barcode_rule_associated_uom_id_fkey");

            entity.HasOne(d => d.BarcodeNomenclature).WithMany(p => p.BarcodeRules)
                .HasForeignKey(d => d.BarcodeNomenclatureId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("barcode_rule_barcode_nomenclature_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("barcode_rule_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("barcode_rule_write_uid_fkey");
        });

        modelBuilder.Entity<BaseDocumentLayout>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_document_layout_pkey");

            entity.ToTable("base_document_layout");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ReportLayoutId).HasColumnName("report_layout_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("base_document_layout_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_document_layout_create_uid_fkey");

            entity.HasOne(d => d.ReportLayout).WithMany(p => p.BaseDocumentLayouts)
                .HasForeignKey(d => d.ReportLayoutId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_document_layout_report_layout_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_document_layout_write_uid_fkey");
        });

        modelBuilder.Entity<BaseEnableProfilingWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_enable_profiling_wizard_pkey");

            entity.ToTable("base_enable_profiling_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.Expiration)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("expiration");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_enable_profiling_wizard_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_enable_profiling_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportImport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_import_pkey");

            entity.ToTable("base_import_import");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.File).HasColumnName("file");
            entity.Property(e => e.FileName).HasColumnName("file_name");
            entity.Property(e => e.FileType).HasColumnName("file_type");
            entity.Property(e => e.ResModel).HasColumnName("res_model");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_import_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_import_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportMapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_mapping_pkey");

            entity.ToTable("base_import_mapping");

            entity.HasIndex(e => e.ResModel, "base_import_mapping_res_model_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.ColumnName).HasColumnName("column_name");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.FieldName).HasColumnName("field_name");
            entity.Property(e => e.ResModel).HasColumnName("res_model");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_mapping_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_mapping_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsChar>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_char_pkey");

            entity.ToTable("base_import_tests_models_char");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsCharNoreadonly>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_char_noreadonly_pkey");

            entity.ToTable("base_import_tests_models_char_noreadonly");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_noreadonly_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_noreadonly_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsCharReadonly>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_char_readonly_pkey");

            entity.ToTable("base_import_tests_models_char_readonly");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_readonly_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_readonly_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsCharRequired>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_char_required_pkey");

            entity.ToTable("base_import_tests_models_char_required");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_required_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_required_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsCharState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_char_states_pkey");

            entity.ToTable("base_import_tests_models_char_states");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_states_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_states_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsCharStillreadonly>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_char_stillreadonly_pkey");

            entity.ToTable("base_import_tests_models_char_stillreadonly");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_stillreadonly_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_char_stillreadonly_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsComplex>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_complex_pkey");

            entity.ToTable("base_import_tests_models_complex");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.C).HasColumnName("c");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.D).HasColumnName("d");
            entity.Property(e => e.Dt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("dt");
            entity.Property(e => e.F).HasColumnName("f");
            entity.Property(e => e.M).HasColumnName("m");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_complex_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_complex_currency_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_complex_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsFloat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_float_pkey");

            entity.ToTable("base_import_tests_models_float");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.Value2).HasColumnName("value2");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_float_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_float_currency_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_float_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsM2o>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_m2o_pkey");

            entity.ToTable("base_import_tests_models_m2o");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_m2o_create_uid_fkey");

            entity.HasOne(d => d.ValueNavigation).WithMany(p => p.BaseImportTestsModelsM2os)
                .HasForeignKey(d => d.Value)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_m2o_value_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_m2o_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsM2oRelated>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_m2o_related_pkey");

            entity.ToTable("base_import_tests_models_m2o_related");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_m2o_related_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_m2o_related_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsM2oRequired>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_m2o_required_pkey");

            entity.ToTable("base_import_tests_models_m2o_required");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_m2o_required_create_uid_fkey");

            entity.HasOne(d => d.ValueNavigation).WithMany(p => p.BaseImportTestsModelsM2oRequireds)
                .HasForeignKey(d => d.Value)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("base_import_tests_models_m2o_required_value_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_m2o_required_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsM2oRequiredRelated>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_m2o_required_related_pkey");

            entity.ToTable("base_import_tests_models_m2o_required_related");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_m2o_required_related_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_m2o_required_related_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsO2m>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_o2m_pkey");

            entity.ToTable("base_import_tests_models_o2m");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_o2m_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_o2m_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsO2mChild>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_o2m_child_pkey");

            entity.ToTable("base_import_tests_models_o2m_child");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_o2m_child_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.BaseImportTestsModelsO2mChildren)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_o2m_child_parent_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_o2m_child_write_uid_fkey");
        });

        modelBuilder.Entity<BaseImportTestsModelsPreview>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_import_tests_models_preview_pkey");

            entity.ToTable("base_import_tests_models_preview");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Othervalue).HasColumnName("othervalue");
            entity.Property(e => e.Somevalue).HasColumnName("somevalue");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_preview_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_import_tests_models_preview_write_uid_fkey");
        });

        modelBuilder.Entity<BaseLanguageExport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_language_export_pkey");

            entity.ToTable("base_language_export");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Data).HasColumnName("data");
            entity.Property(e => e.Format).HasColumnName("format");
            entity.Property(e => e.Lang).HasColumnName("lang");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_language_export_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_language_export_write_uid_fkey");

            //entity.HasMany(d => d.Modules).WithMany(p => p.Wizs)
            entity.HasMany<IrModuleModule>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "RelModulesLangexport",
                    r => r.HasOne<IrModuleModule>().WithMany()
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("rel_modules_langexport_module_id_fkey"),
                    l => l.HasOne<BaseLanguageExport>().WithMany()
                        .HasForeignKey("WizId")
                        .HasConstraintName("rel_modules_langexport_wiz_id_fkey"),
                    j =>
                    {
                        j.HasKey("WizId", "ModuleId").HasName("rel_modules_langexport_pkey");
                        j.ToTable("rel_modules_langexport");
                        j.HasIndex(new[] { "ModuleId", "WizId" }, "rel_modules_langexport_module_id_wiz_id_idx");
                    });
        });

        modelBuilder.Entity<BaseLanguageImport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_language_import_pkey");

            entity.ToTable("base_language_import");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Data).HasColumnName("data");
            entity.Property(e => e.Filename).HasColumnName("filename");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Overwrite).HasColumnName("overwrite");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_language_import_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_language_import_write_uid_fkey");
        });

        modelBuilder.Entity<BaseLanguageInstall>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_language_install_pkey");

            entity.ToTable("base_language_install");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Overwrite).HasColumnName("overwrite");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_language_install_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_language_install_write_uid_fkey");

            //entity.HasMany(d => d.Langs).WithMany(p => p.LanguageWizards)
            entity.HasMany<ResLang>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ResLangInstallRel",
                    r => r.HasOne<ResLang>().WithMany()
                        .HasForeignKey("LangId")
                        .HasConstraintName("res_lang_install_rel_lang_id_fkey"),
                    l => l.HasOne<BaseLanguageInstall>().WithMany()
                        .HasForeignKey("LanguageWizardId")
                        .HasConstraintName("res_lang_install_rel_language_wizard_id_fkey"),
                    j =>
                    {
                        j.HasKey("LanguageWizardId", "LangId").HasName("res_lang_install_rel_pkey");
                        j.ToTable("res_lang_install_rel");
                        j.HasIndex(new[] { "LangId", "LanguageWizardId" }, "res_lang_install_rel_lang_id_language_wizard_id_idx");
                    });

            //entity.HasMany(d => d.Websites).WithMany(p => p.BaseLanguageInstalls)
            entity.HasMany<Website>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "BaseLanguageInstallWebsiteRel",
                    r => r.HasOne<Website>().WithMany()
                        .HasForeignKey("WebsiteId")
                        .HasConstraintName("base_language_install_website_rel_website_id_fkey"),
                    l => l.HasOne<BaseLanguageInstall>().WithMany()
                        .HasForeignKey("BaseLanguageInstallId")
                        .HasConstraintName("base_language_install_website_rel_base_language_install_id_fkey"),
                    j =>
                    {
                        j.HasKey("BaseLanguageInstallId", "WebsiteId").HasName("base_language_install_website_rel_pkey");
                        j.ToTable("base_language_install_website_rel");
                        j.HasIndex(new[] { "WebsiteId", "BaseLanguageInstallId" }, "base_language_install_website_website_id_base_language_inst_idx");
                    });
        });

        modelBuilder.Entity<BaseModuleInstallRequest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_module_install_request_pkey");

            entity.ToTable("base_module_install_request");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.BodyHtml).HasColumnName("body_html");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ModuleId).HasColumnName("module_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_module_install_request_create_uid_fkey");

            entity.HasOne(d => d.Module).WithMany(p => p.BaseModuleInstallRequests)
                .HasForeignKey(d => d.ModuleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("base_module_install_request_module_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("base_module_install_request_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_module_install_request_write_uid_fkey");
        });

        modelBuilder.Entity<BaseModuleInstallReview>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_module_install_review_pkey");

            entity.ToTable("base_module_install_review");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ModuleId).HasColumnName("module_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_module_install_review_create_uid_fkey");

            entity.HasOne(d => d.Module).WithMany(p => p.BaseModuleInstallReviews)
                .HasForeignKey(d => d.ModuleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("base_module_install_review_module_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_module_install_review_write_uid_fkey");
        });

        modelBuilder.Entity<BaseModuleUninstall>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_module_uninstall_pkey");

            entity.ToTable("base_module_uninstall");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ModuleId).HasColumnName("module_id");
            entity.Property(e => e.ShowAll).HasColumnName("show_all");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_module_uninstall_create_uid_fkey");

            entity.HasOne(d => d.Module).WithMany(p => p.BaseModuleUninstalls)
                .HasForeignKey(d => d.ModuleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("base_module_uninstall_module_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_module_uninstall_write_uid_fkey");
        });

        modelBuilder.Entity<BaseModuleUpdate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_module_update_pkey");

            entity.ToTable("base_module_update");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Added).HasColumnName("added");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.Updated).HasColumnName("updated");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_module_update_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_module_update_write_uid_fkey");
        });

        modelBuilder.Entity<BaseModuleUpgrade>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_module_upgrade_pkey");

            entity.ToTable("base_module_upgrade");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ModuleInfo).HasColumnName("module_info");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_module_upgrade_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_module_upgrade_write_uid_fkey");
        });

        modelBuilder.Entity<BasePartnerMergeAutomaticWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_partner_merge_automatic_wizard_pkey");

            entity.ToTable("base_partner_merge_automatic_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrentLineId).HasColumnName("current_line_id");
            entity.Property(e => e.DstPartnerId).HasColumnName("dst_partner_id");
            entity.Property(e => e.ExcludeContact).HasColumnName("exclude_contact");
            entity.Property(e => e.ExcludeJournalItem).HasColumnName("exclude_journal_item");
            entity.Property(e => e.GroupByEmail).HasColumnName("group_by_email");
            entity.Property(e => e.GroupByIsCompany).HasColumnName("group_by_is_company");
            entity.Property(e => e.GroupByName).HasColumnName("group_by_name");
            entity.Property(e => e.GroupByParentId).HasColumnName("group_by_parent_id");
            entity.Property(e => e.GroupByVat).HasColumnName("group_by_vat");
            entity.Property(e => e.MaximumGroup).HasColumnName("maximum_group");
            entity.Property(e => e.NumberGroup).HasColumnName("number_group");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_partner_merge_automatic_wizard_create_uid_fkey");

            entity.HasOne(d => d.CurrentLine).WithMany(p => p.BasePartnerMergeAutomaticWizards)
                .HasForeignKey(d => d.CurrentLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_partner_merge_automatic_wizard_current_line_id_fkey");

            entity.HasOne(d => d.DstPartner).WithMany(p => p.BasePartnerMergeAutomaticWizards)
                .HasForeignKey(d => d.DstPartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_partner_merge_automatic_wizard_dst_partner_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_partner_merge_automatic_wizard_write_uid_fkey");

            //entity.HasMany(d => d.ResPartners).WithMany(p => p.BasePartnerMergeAutomaticWizardsNavigation)
            entity.HasMany<ResPartner>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "BasePartnerMergeAutomaticWizardResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("base_partner_merge_automatic_wizard_res_par_res_partner_id_fkey"),
                    l => l.HasOne<BasePartnerMergeAutomaticWizard>().WithMany()
                        .HasForeignKey("BasePartnerMergeAutomaticWizardId")
                        .HasConstraintName("base_partner_merge_automatic__base_partner_merge_automatic_fkey"),
                    j =>
                    {
                        j.HasKey("BasePartnerMergeAutomaticWizardId", "ResPartnerId").HasName("base_partner_merge_automatic_wizard_res_partner_rel_pkey");
                        j.ToTable("base_partner_merge_automatic_wizard_res_partner_rel");
                        j.HasIndex(new[] { "ResPartnerId", "BasePartnerMergeAutomaticWizardId" }, "base_partner_merge_automatic__res_partner_id_base_partner_m_idx");
                    });
        });

        modelBuilder.Entity<BasePartnerMergeLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("base_partner_merge_line_pkey");

            entity.ToTable("base_partner_merge_line");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AggrIds).HasColumnName("aggr_ids");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.MinId).HasColumnName("min_id");
            entity.Property(e => e.WizardId).HasColumnName("wizard_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_partner_merge_line_create_uid_fkey");

            entity.HasOne(d => d.Wizard).WithMany(p => p.BasePartnerMergeLines)
                .HasForeignKey(d => d.WizardId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_partner_merge_line_wizard_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("base_partner_merge_line_write_uid_fkey");
        });

        modelBuilder.Entity<BusBu>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("bus_bus_pkey");

            entity.ToTable("bus_bus");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Channel).HasColumnName("channel");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Message).HasColumnName("message");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("bus_bus_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("bus_bus_write_uid_fkey");
        });

        modelBuilder.Entity<BusPresence>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("bus_presence_pkey");

            entity.ToTable("bus_presence");

            entity.HasIndex(e => e.GuestId, "bus_presence_guest_unique")
                .IsUnique()
                .HasFilter("(guest_id IS NOT NULL)");

            entity.HasIndex(e => e.UserId, "bus_presence_user_unique")
                .IsUnique()
                .HasFilter("(user_id IS NOT NULL)");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.GuestId).HasColumnName("guest_id");
            entity.Property(e => e.LastPoll)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_poll");
            entity.Property(e => e.LastPresence)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_presence");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Guest).WithOne(p => p.BusPresence)
                .HasForeignKey<BusPresence>(d => d.GuestId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("bus_presence_guest_id_fkey");

            entity.HasOne(d => d.User).WithOne(p => p.BusPresence)
                .HasForeignKey<BusPresence>(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("bus_presence_user_id_fkey");
        });

        modelBuilder.Entity<CalendarAlarm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("calendar_alarm_pkey");

            entity.ToTable("calendar_alarm");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AlarmType).HasColumnName("alarm_type");
            entity.Property(e => e.Body).HasColumnName("body");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.DurationMinutes).HasColumnName("duration_minutes");
            entity.Property(e => e.Interval).HasColumnName("interval");
            entity.Property(e => e.MailTemplateId).HasColumnName("mail_template_id");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.SmsTemplateId).HasColumnName("sms_template_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_alarm_create_uid_fkey");

            entity.HasOne(d => d.MailTemplate).WithMany(p => p.CalendarAlarms)
                .HasForeignKey(d => d.MailTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_alarm_mail_template_id_fkey");

            entity.HasOne(d => d.SmsTemplate).WithMany(p => p.CalendarAlarms)
                .HasForeignKey(d => d.SmsTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_alarm_sms_template_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_alarm_write_uid_fkey");
        });

        modelBuilder.Entity<CalendarAttendee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("calendar_attendee_pkey");

            entity.ToTable("calendar_attendee");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccessToken).HasColumnName("access_token");
            entity.Property(e => e.Availability).HasColumnName("availability");
            entity.Property(e => e.CommonName).HasColumnName("common_name");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_attendee_create_uid_fkey");

            entity.HasOne(d => d.Event).WithMany(p => p.CalendarAttendees)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("calendar_attendee_event_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("calendar_attendee_partner_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_attendee_write_uid_fkey");
        });

        modelBuilder.Entity<CalendarEvent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("calendar_event_pkey");

            entity.ToTable("calendar_event");

            entity.HasIndex(e => e.AccessToken, "calendar_event_access_token_index");

            entity.HasIndex(e => e.ApplicantId, "calendar_event_applicant_id_index").HasFilter("(applicant_id IS NOT NULL)");

            entity.HasIndex(e => e.OpportunityId, "calendar_event_opportunity_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccessToken).HasColumnName("access_token");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Allday).HasColumnName("allday");
            entity.Property(e => e.ApplicantId).HasColumnName("applicant_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.FollowRecurrence).HasColumnName("follow_recurrence");
            entity.Property(e => e.Location).HasColumnName("location");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OpportunityId).HasColumnName("opportunity_id");
            entity.Property(e => e.Privacy).HasColumnName("privacy");
            entity.Property(e => e.RecurrenceId).HasColumnName("recurrence_id");
            entity.Property(e => e.Recurrency).HasColumnName("recurrency");
            entity.Property(e => e.ResId).HasColumnName("res_id");
            entity.Property(e => e.ResModel).HasColumnName("res_model");
            entity.Property(e => e.ResModelId).HasColumnName("res_model_id");
            entity.Property(e => e.ShowAs).HasColumnName("show_as");
            entity.Property(e => e.Start)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.Stop)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("stop");
            entity.Property(e => e.StopDate).HasColumnName("stop_date");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.VideocallChannelId).HasColumnName("videocall_channel_id");
            entity.Property(e => e.VideocallLocation).HasColumnName("videocall_location");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Applicant).WithMany(p => p.CalendarEvents)
                .HasForeignKey(d => d.ApplicantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_event_applicant_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_event_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.CalendarEvents)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_event_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Opportunity).WithMany(p => p.CalendarEvents)
                .HasForeignKey(d => d.OpportunityId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_event_opportunity_id_fkey");

            entity.HasOne(d => d.Recurrence).WithMany(p => p.CalendarEvents)
                .HasForeignKey(d => d.RecurrenceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_event_recurrence_id_fkey");

            entity.HasOne(d => d.ResModelNavigation).WithMany(p => p.CalendarEvents)
                .HasForeignKey(d => d.ResModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("calendar_event_res_model_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_event_user_id_fkey");

            entity.HasOne(d => d.VideocallChannel).WithMany(p => p.CalendarEvents)
                .HasForeignKey(d => d.VideocallChannelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_event_videocall_channel_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_event_write_uid_fkey");

            //entity.HasMany(d => d.CalendarAlarms).WithMany(p => p.CalendarEvents)
            entity.HasMany<CalendarAlarm>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "CalendarAlarmCalendarEventRel",
                    r => r.HasOne<CalendarAlarm>().WithMany()
                        .HasForeignKey("CalendarAlarmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("calendar_alarm_calendar_event_rel_calendar_alarm_id_fkey"),
                    l => l.HasOne<CalendarEvent>().WithMany()
                        .HasForeignKey("CalendarEventId")
                        .HasConstraintName("calendar_alarm_calendar_event_rel_calendar_event_id_fkey"),
                    j =>
                    {
                        j.HasKey("CalendarEventId", "CalendarAlarmId").HasName("calendar_alarm_calendar_event_rel_pkey");
                        j.ToTable("calendar_alarm_calendar_event_rel");
                        j.HasIndex(new[] { "CalendarAlarmId", "CalendarEventId" }, "calendar_alarm_calendar_event_calendar_alarm_id_calendar_ev_idx");
                    });

            //entity.HasMany(d => d.Types).WithMany(p => p.Events)
            entity.HasMany<CalendarEventType>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MeetingCategoryRel",
                    r => r.HasOne<CalendarEventType>().WithMany()
                        .HasForeignKey("TypeId")
                        .HasConstraintName("meeting_category_rel_type_id_fkey"),
                    l => l.HasOne<CalendarEvent>().WithMany()
                        .HasForeignKey("EventId")
                        .HasConstraintName("meeting_category_rel_event_id_fkey"),
                    j =>
                    {
                        j.HasKey("EventId", "TypeId").HasName("meeting_category_rel_pkey");
                        j.ToTable("meeting_category_rel");
                        j.HasIndex(new[] { "TypeId", "EventId" }, "meeting_category_rel_type_id_event_id_idx");
                    });
        });

        modelBuilder.Entity<CalendarEventType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("calendar_event_type_pkey");

            entity.ToTable("calendar_event_type");

            entity.HasIndex(e => e.Name, "calendar_event_type_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_event_type_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_event_type_write_uid_fkey");
        });

        modelBuilder.Entity<CalendarFilter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("calendar_filters_pkey");

            entity.ToTable("calendar_filters");

            entity.HasIndex(e => e.PartnerId, "calendar_filters_partner_id_index");

            entity.HasIndex(e => e.UserId, "calendar_filters_user_id_index");

            entity.HasIndex(e => new { e.UserId, e.PartnerId }, "calendar_filters_user_id_partner_id_unique").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.PartnerChecked).HasColumnName("partner_checked");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_filters_create_uid_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("calendar_filters_partner_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("calendar_filters_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_filters_write_uid_fkey");
        });

        modelBuilder.Entity<CalendarProviderConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("calendar_provider_config_pkey");

            entity.ToTable("calendar_provider_config");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CalClientId).HasColumnName("cal_client_id");
            entity.Property(e => e.CalClientSecret).HasColumnName("cal_client_secret");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ExternalCalendarProvider).HasColumnName("external_calendar_provider");
            entity.Property(e => e.MicrosoftOutlookClientIdentifier).HasColumnName("microsoft_outlook_client_identifier");
            entity.Property(e => e.MicrosoftOutlookClientSecret).HasColumnName("microsoft_outlook_client_secret");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_provider_config_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_provider_config_write_uid_fkey");
        });

        modelBuilder.Entity<CalendarRecurrence>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("calendar_recurrence_pkey");

            entity.ToTable("calendar_recurrence");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.BaseEventId).HasColumnName("base_event_id");
            entity.Property(e => e.Byday).HasColumnName("byday");
            entity.Property(e => e.Count).HasColumnName("count");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Day).HasColumnName("day");
            entity.Property(e => e.EndType).HasColumnName("end_type");
            entity.Property(e => e.EventTz).HasColumnName("event_tz");
            entity.Property(e => e.Fri).HasColumnName("fri");
            entity.Property(e => e.Interval).HasColumnName("interval");
            entity.Property(e => e.Mon).HasColumnName("mon");
            entity.Property(e => e.MonthBy).HasColumnName("month_by");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Rrule).HasColumnName("rrule");
            entity.Property(e => e.RruleType).HasColumnName("rrule_type");
            entity.Property(e => e.Sat).HasColumnName("sat");
            entity.Property(e => e.Sun).HasColumnName("sun");
            entity.Property(e => e.Thu).HasColumnName("thu");
            entity.Property(e => e.Tue).HasColumnName("tue");
            entity.Property(e => e.Until).HasColumnName("until");
            entity.Property(e => e.Wed).HasColumnName("wed");
            entity.Property(e => e.Weekday).HasColumnName("weekday");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.BaseEvent).WithMany(p => p.CalendarRecurrences)
                .HasForeignKey(d => d.BaseEventId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_recurrence_base_event_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_recurrence_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("calendar_recurrence_write_uid_fkey");
        });

        modelBuilder.Entity<ChangeLockDate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("change_lock_date_pkey");

            entity.ToTable("change_lock_date");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.FiscalyearLockDate).HasColumnName("fiscalyear_lock_date");
            entity.Property(e => e.PeriodLockDate).HasColumnName("period_lock_date");
            entity.Property(e => e.TaxLockDate).HasColumnName("tax_lock_date");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("change_lock_date_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("change_lock_date_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("change_lock_date_write_uid_fkey");
        });

        modelBuilder.Entity<ChangePasswordOwn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("change_password_own_pkey");

            entity.ToTable("change_password_own");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.ConfirmPassword).HasColumnName("confirm_password");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.NewPassword).HasColumnName("new_password");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("change_password_own_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("change_password_own_write_uid_fkey");
        });

        modelBuilder.Entity<ChangePasswordUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("change_password_user_pkey");

            entity.ToTable("change_password_user");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.NewPasswd).HasColumnName("new_passwd");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UserLogin).HasColumnName("user_login");
            entity.Property(e => e.WizardId).HasColumnName("wizard_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("change_password_user_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("change_password_user_user_id_fkey");

            entity.HasOne(d => d.Wizard).WithMany(p => p.ChangePasswordUsers)
                .HasForeignKey(d => d.WizardId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("change_password_user_wizard_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("change_password_user_write_uid_fkey");
        });

        modelBuilder.Entity<ChangePasswordWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("change_password_wizard_pkey");

            entity.ToTable("change_password_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("change_password_wizard_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("change_password_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<ChangeProductionQty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("change_production_qty_pkey");

            entity.ToTable("change_production_qty");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.MoId).HasColumnName("mo_id");
            entity.Property(e => e.ProductQty).HasColumnName("product_qty");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("change_production_qty_create_uid_fkey");

            entity.HasOne(d => d.Mo).WithMany(p => p.ChangeProductionQties)
                .HasForeignKey(d => d.MoId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("change_production_qty_mo_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("change_production_qty_write_uid_fkey");
        });

        modelBuilder.Entity<ConfirmStockSm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("confirm_stock_sms_pkey");

            entity.ToTable("confirm_stock_sms");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("confirm_stock_sms_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("confirm_stock_sms_write_uid_fkey");

            //entity.HasMany(d => d.StockPickings).WithMany(p => p.ConfirmStockSms)
            entity.HasMany<StockPicking>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockPickingSmsRel",
                    r => r.HasOne<StockPicking>().WithMany()
                        .HasForeignKey("StockPickingId")
                        .HasConstraintName("stock_picking_sms_rel_stock_picking_id_fkey"),
                    l => l.HasOne<ConfirmStockSm>().WithMany()
                        .HasForeignKey("ConfirmStockSmsId")
                        .HasConstraintName("stock_picking_sms_rel_confirm_stock_sms_id_fkey"),
                    j =>
                    {
                        j.HasKey("ConfirmStockSmsId", "StockPickingId").HasName("stock_picking_sms_rel_pkey");
                        j.ToTable("stock_picking_sms_rel");
                        j.HasIndex(new[] { "StockPickingId", "ConfirmStockSmsId" }, "stock_picking_sms_rel_stock_picking_id_confirm_stock_sms_id_idx");
                    });
        });

        modelBuilder.Entity<CrmIapLeadHelper>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_iap_lead_helpers_pkey");

            entity.ToTable("crm_iap_lead_helpers");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_helpers_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_helpers_write_uid_fkey");
        });

        modelBuilder.Entity<CrmIapLeadIndustry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_iap_lead_industry_pkey");

            entity.ToTable("crm_iap_lead_industry");

            entity.HasIndex(e => e.Name, "crm_iap_lead_industry_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.RevealIds).HasColumnName("reveal_ids");
            entity.Property(e => e.Sequence)
                //.ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_industry_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_industry_write_uid_fkey");
        });

        modelBuilder.Entity<CrmIapLeadMiningRequest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_iap_lead_mining_request_pkey");

            entity.ToTable("crm_iap_lead_mining_request");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CompanySizeMax).HasColumnName("company_size_max");
            entity.Property(e => e.CompanySizeMin).HasColumnName("company_size_min");
            entity.Property(e => e.ContactFilterType).HasColumnName("contact_filter_type");
            entity.Property(e => e.ContactNumber).HasColumnName("contact_number");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ErrorType).HasColumnName("error_type");
            entity.Property(e => e.FilterOnSize).HasColumnName("filter_on_size");
            entity.Property(e => e.LeadNumber).HasColumnName("lead_number");
            entity.Property(e => e.LeadType).HasColumnName("lead_type");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PreferredRoleId).HasColumnName("preferred_role_id");
            entity.Property(e => e.SearchType).HasColumnName("search_type");
            entity.Property(e => e.SeniorityId).HasColumnName("seniority_id");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.TeamId).HasColumnName("team_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_mining_request_create_uid_fkey");

            entity.HasOne(d => d.PreferredRole).WithMany(p => p.CrmIapLeadMiningRequests)
                .HasForeignKey(d => d.PreferredRoleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_mining_request_preferred_role_id_fkey");

            entity.HasOne(d => d.Seniority).WithMany(p => p.CrmIapLeadMiningRequests)
                .HasForeignKey(d => d.SeniorityId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_mining_request_seniority_id_fkey");

            entity.HasOne(d => d.Team).WithMany(p => p.CrmIapLeadMiningRequests)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_mining_request_team_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_mining_request_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_mining_request_write_uid_fkey");

            //entity.HasMany(d => d.CrmIapLeadIndustries).WithMany(p => p.CrmIapLeadMiningRequests)
            entity.HasMany<CrmIapLeadIndustry>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "CrmIapLeadIndustryCrmIapLeadMiningRequestRel",
                    r => r.HasOne<CrmIapLeadIndustry>().WithMany()
                        .HasForeignKey("CrmIapLeadIndustryId")
                        .HasConstraintName("crm_iap_lead_industry_crm_iap_lea_crm_iap_lead_industry_id_fkey"),
                    l => l.HasOne<CrmIapLeadMiningRequest>().WithMany()
                        .HasForeignKey("CrmIapLeadMiningRequestId")
                        .HasConstraintName("crm_iap_lead_industry_crm_iap_crm_iap_lead_mining_request__fkey"),
                    j =>
                    {
                        j.HasKey("CrmIapLeadMiningRequestId", "CrmIapLeadIndustryId").HasName("crm_iap_lead_industry_crm_iap_lead_mining_request_rel_pkey");
                        j.ToTable("crm_iap_lead_industry_crm_iap_lead_mining_request_rel");
                        j.HasIndex(new[] { "CrmIapLeadIndustryId", "CrmIapLeadMiningRequestId" }, "crm_iap_lead_industry_crm_iap_crm_iap_lead_industry_id_crm__idx");
                    });

            //entity.HasMany(d => d.CrmIapLeadRoles).WithMany(p => p.CrmIapLeadMiningRequestsNavigation)
            entity.HasMany<CrmIapLeadRole>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "CrmIapLeadMiningRequestCrmIapLeadRoleRel",
                    r => r.HasOne<CrmIapLeadRole>().WithMany()
                        .HasForeignKey("CrmIapLeadRoleId")
                        .HasConstraintName("crm_iap_lead_mining_request_crm_iap_l_crm_iap_lead_role_id_fkey"),
                    l => l.HasOne<CrmIapLeadMiningRequest>().WithMany()
                        .HasForeignKey("CrmIapLeadMiningRequestId")
                        .HasConstraintName("crm_iap_lead_mining_request__crm_iap_lead_mining_request__fkey2"),
                    j =>
                    {
                        j.HasKey("CrmIapLeadMiningRequestId", "CrmIapLeadRoleId").HasName("crm_iap_lead_mining_request_crm_iap_lead_role_rel_pkey");
                        j.ToTable("crm_iap_lead_mining_request_crm_iap_lead_role_rel");
                        j.HasIndex(new[] { "CrmIapLeadRoleId", "CrmIapLeadMiningRequestId" }, "crm_iap_lead_mining_request_c_crm_iap_lead_role_id_crm_iap__idx");
                    });

            //entity.HasMany(d => d.CrmTags).WithMany(p => p.CrmIapLeadMiningRequests)
            entity.HasMany<CrmTag>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "CrmIapLeadMiningRequestCrmTagRel",
                    r => r.HasOne<CrmTag>().WithMany()
                        .HasForeignKey("CrmTagId")
                        .HasConstraintName("crm_iap_lead_mining_request_crm_tag_rel_crm_tag_id_fkey"),
                    l => l.HasOne<CrmIapLeadMiningRequest>().WithMany()
                        .HasForeignKey("CrmIapLeadMiningRequestId")
                        .HasConstraintName("crm_iap_lead_mining_request_c_crm_iap_lead_mining_request__fkey"),
                    j =>
                    {
                        j.HasKey("CrmIapLeadMiningRequestId", "CrmTagId").HasName("crm_iap_lead_mining_request_crm_tag_rel_pkey");
                        j.ToTable("crm_iap_lead_mining_request_crm_tag_rel");
                        j.HasIndex(new[] { "CrmTagId", "CrmIapLeadMiningRequestId" }, "crm_iap_lead_mining_request_c_crm_tag_id_crm_iap_lead_minin_idx");
                    });

            //entity.HasMany(d => d.ResCountries).WithMany(p => p.CrmIapLeadMiningRequests)
            entity.HasMany<ResCountry>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "CrmIapLeadMiningRequestResCountryRel",
                    r => r.HasOne<ResCountry>().WithMany()
                        .HasForeignKey("ResCountryId")
                        .HasConstraintName("crm_iap_lead_mining_request_res_country_rel_res_country_id_fkey"),
                    l => l.HasOne<CrmIapLeadMiningRequest>().WithMany()
                        .HasForeignKey("CrmIapLeadMiningRequestId")
                        .HasConstraintName("crm_iap_lead_mining_request_r_crm_iap_lead_mining_request__fkey"),
                    j =>
                    {
                        j.HasKey("CrmIapLeadMiningRequestId", "ResCountryId").HasName("crm_iap_lead_mining_request_res_country_rel_pkey");
                        j.ToTable("crm_iap_lead_mining_request_res_country_rel");
                        j.HasIndex(new[] { "ResCountryId", "CrmIapLeadMiningRequestId" }, "crm_iap_lead_mining_request_r_res_country_id_crm_iap_lead_m_idx");
                    });

            //entity.HasMany(d => d.ResCountryStates).WithMany(p => p.CrmIapLeadMiningRequests)
            entity.HasMany<ResCountryState>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "CrmIapLeadMiningRequestResCountryStateRel",
                    r => r.HasOne<ResCountryState>().WithMany()
                        .HasForeignKey("ResCountryStateId")
                        .HasConstraintName("crm_iap_lead_mining_request_res_count_res_country_state_id_fkey"),
                    l => l.HasOne<CrmIapLeadMiningRequest>().WithMany()
                        .HasForeignKey("CrmIapLeadMiningRequestId")
                        .HasConstraintName("crm_iap_lead_mining_request__crm_iap_lead_mining_request__fkey1"),
                    j =>
                    {
                        j.HasKey("CrmIapLeadMiningRequestId", "ResCountryStateId").HasName("crm_iap_lead_mining_request_res_country_state_rel_pkey");
                        j.ToTable("crm_iap_lead_mining_request_res_country_state_rel");
                        j.HasIndex(new[] { "ResCountryStateId", "CrmIapLeadMiningRequestId" }, "crm_iap_lead_mining_request_r_res_country_state_id_crm_iap__idx");
                    });
        });

        modelBuilder.Entity<CrmIapLeadRole>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_iap_lead_role_pkey");

            entity.ToTable("crm_iap_lead_role");

            entity.HasIndex(e => e.Name, "crm_iap_lead_role_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.RevealId).HasColumnName("reveal_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_role_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_role_write_uid_fkey");
        });

        modelBuilder.Entity<CrmIapLeadSeniority>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_iap_lead_seniority_pkey");

            entity.ToTable("crm_iap_lead_seniority");

            entity.HasIndex(e => e.Name, "crm_iap_lead_seniority_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.RevealId).HasColumnName("reveal_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_seniority_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_iap_lead_seniority_write_uid_fkey");
        });

        modelBuilder.Entity<CrmLead>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_lead_pkey");

            entity.ToTable("crm_lead");

            entity.HasIndex(e => e.TenantId, "crm_lead_company_id_index");

            entity.HasIndex(e => new { e.CreationTime, e.TeamId }, "crm_lead_create_date_team_id_idx");

            entity.HasIndex(e => e.DateLastStageUpdate, "crm_lead_date_last_stage_update_index");

            entity.HasIndex(e => e.EmailFrom, "crm_lead_email_from_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.LeadMiningRequestId, "crm_lead_lead_mining_request_id_index").HasFilter("(lead_mining_request_id IS NOT NULL)");

            entity.HasIndex(e => e.LostReasonId, "crm_lead_lost_reason_id_index");

            entity.HasIndex(e => e.Name, "crm_lead_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.PartnerId, "crm_lead_partner_id_index");

            entity.HasIndex(e => e.Priority, "crm_lead_priority_index");

            entity.HasIndex(e => e.StageId, "crm_lead_stage_id_index");

            entity.HasIndex(e => e.TeamId, "crm_lead_team_id_index");

            entity.HasIndex(e => e.Type, "crm_lead_type_index");

            entity.HasIndex(e => e.UserId, "crm_lead_user_id_index");

            entity.HasIndex(e => new { e.UserId, e.TeamId, e.Type }, "crm_lead_user_id_team_id_type_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AutomatedProbability).HasColumnName("automated_probability");
            entity.Property(e => e.CampaignId).HasColumnName("campaign_id");
            entity.Property(e => e.City).HasColumnName("city");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.ContactName).HasColumnName("contact_name");
            entity.Property(e => e.CountryId).HasColumnName("country_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateActionLast)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_action_last");
            entity.Property(e => e.DateClosed)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_closed");
            entity.Property(e => e.DateConversion)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_conversion");
            entity.Property(e => e.DateDeadline).HasColumnName("date_deadline");
            entity.Property(e => e.DateLastStageUpdate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_last_stage_update");
            entity.Property(e => e.DateOpen)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_open");
            entity.Property(e => e.DayClose).HasColumnName("day_close");
            entity.Property(e => e.DayOpen).HasColumnName("day_open");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.EmailCc).HasColumnName("email_cc");
            entity.Property(e => e.EmailFrom).HasColumnName("email_from");
            entity.Property(e => e.EmailNormalized).HasColumnName("email_normalized");
            entity.Property(e => e.EmailState).HasColumnName("email_state");
            entity.Property(e => e.ExpectedRevenue).HasColumnName("expected_revenue");
            entity.Property(e => e.Function).HasColumnName("function");
            entity.Property(e => e.IapEnrichDone).HasColumnName("iap_enrich_done");
            entity.Property(e => e.LangId).HasColumnName("lang_id");
            entity.Property(e => e.LeadMiningRequestId).HasColumnName("lead_mining_request_id");
            entity.Property(e => e.LeadProperties)
                .HasColumnType("jsonb")
                .HasColumnName("lead_properties");
            entity.Property(e => e.LostReasonId).HasColumnName("lost_reason_id");
            entity.Property(e => e.MediumId).HasColumnName("medium_id");
            entity.Property(e => e.MessageBounce).HasColumnName("message_bounce");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Mobile).HasColumnName("mobile");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PartnerName).HasColumnName("partner_name");
            entity.Property(e => e.Phone).HasColumnName("phone");
            entity.Property(e => e.PhoneSanitized).HasColumnName("phone_sanitized");
            entity.Property(e => e.PhoneState).HasColumnName("phone_state");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.Probability).HasColumnName("probability");
            entity.Property(e => e.ProratedRevenue).HasColumnName("prorated_revenue");
            entity.Property(e => e.RecurringPlan).HasColumnName("recurring_plan");
            entity.Property(e => e.RecurringRevenue).HasColumnName("recurring_revenue");
            entity.Property(e => e.RecurringRevenueMonthly).HasColumnName("recurring_revenue_monthly");
            entity.Property(e => e.RecurringRevenueMonthlyProrated).HasColumnName("recurring_revenue_monthly_prorated");
            entity.Property(e => e.Referred).HasColumnName("referred");
            entity.Property(e => e.RevealId).HasColumnName("reveal_id");
            entity.Property(e => e.SourceId).HasColumnName("source_id");
            entity.Property(e => e.StageId).HasColumnName("stage_id");
            entity.Property(e => e.StateId).HasColumnName("state_id");
            entity.Property(e => e.Street).HasColumnName("street");
            entity.Property(e => e.Street2).HasColumnName("street2");
            entity.Property(e => e.TeamId).HasColumnName("team_id");
            entity.Property(e => e.Title).HasColumnName("title");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Website).HasColumnName("website");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");
            entity.Property(e => e.Zip).HasColumnName("zip");

            entity.HasOne(d => d.Campaign).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.CampaignId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_campaign_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_company_id_fkey");

            entity.HasOne<ResCountry>().WithMany()
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_country_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_create_uid_fkey");

            entity.HasOne(d => d.Lang).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.LangId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_lang_id_fkey");

            entity.HasOne(d => d.LeadMiningRequest).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.LeadMiningRequestId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_lead_mining_request_id_fkey");

            entity.HasOne(d => d.LostReason).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.LostReasonId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("crm_lead_lost_reason_id_fkey");

            entity.HasOne(d => d.Medium).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.MediumId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_medium_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_message_main_attachment_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_partner_id_fkey");

            entity.HasOne(d => d.RecurringPlanNavigation).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.RecurringPlan)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_recurring_plan_fkey");

            entity.HasOne(d => d.Source).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_source_id_fkey");

            entity.HasOne(d => d.Stage).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.StageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("crm_lead_stage_id_fkey");

            entity.HasOne(d => d.State).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.StateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_state_id_fkey");

            entity.HasOne(d => d.Team).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_team_id_fkey");

            entity.HasOne(d => d.TitleNavigation).WithMany(p => p.CrmLeads)
                .HasForeignKey(d => d.Title)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_title_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_write_uid_fkey");

            //entity.HasMany(d => d.Tags).WithMany(p => p.Leads)
            entity.HasMany<CrmTag>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "CrmTagRel",
                    r => r.HasOne<CrmTag>().WithMany()
                        .HasForeignKey("TagId")
                        .HasConstraintName("crm_tag_rel_tag_id_fkey"),
                    l => l.HasOne<CrmLead>().WithMany()
                        .HasForeignKey("LeadId")
                        .HasConstraintName("crm_tag_rel_lead_id_fkey"),
                    j =>
                    {
                        j.HasKey("LeadId", "TagId").HasName("crm_tag_rel_pkey");
                        j.ToTable("crm_tag_rel");
                        j.HasIndex(new[] { "TagId", "LeadId" }, "crm_tag_rel_tag_id_lead_id_idx");
                    });

            //entity.HasMany(d => d.WebsiteVisitors).WithMany(p => p.CrmLeads)
            entity.HasMany<WebsiteVisitor>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "CrmLeadWebsiteVisitorRel",
                    r => r.HasOne<WebsiteVisitor>().WithMany()
                        .HasForeignKey("WebsiteVisitorId")
                        .HasConstraintName("crm_lead_website_visitor_rel_website_visitor_id_fkey"),
                    l => l.HasOne<CrmLead>().WithMany()
                        .HasForeignKey("CrmLeadId")
                        .HasConstraintName("crm_lead_website_visitor_rel_crm_lead_id_fkey"),
                    j =>
                    {
                        j.HasKey("CrmLeadId", "WebsiteVisitorId").HasName("crm_lead_website_visitor_rel_pkey");
                        j.ToTable("crm_lead_website_visitor_rel");
                        j.HasIndex(new[] { "WebsiteVisitorId", "CrmLeadId" }, "crm_lead_website_visitor_rel_website_visitor_id_crm_lead_id_idx");
                    });
        });

        modelBuilder.Entity<CrmLead2opportunityPartner>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_lead2opportunity_partner_pkey");

            entity.ToTable("crm_lead2opportunity_partner");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Action).HasColumnName("action");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ForceAssignment).HasColumnName("force_assignment");
            entity.Property(e => e.LeadId).HasColumnName("lead_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.TeamId).HasColumnName("team_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead2opportunity_partner_create_uid_fkey");

            entity.HasOne(d => d.Lead).WithMany(p => p.CrmLead2opportunityPartners)
                .HasForeignKey(d => d.LeadId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("crm_lead2opportunity_partner_lead_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead2opportunity_partner_partner_id_fkey");

            entity.HasOne(d => d.Team).WithMany(p => p.CrmLead2opportunityPartners)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead2opportunity_partner_team_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead2opportunity_partner_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead2opportunity_partner_write_uid_fkey");

            //entity.HasMany(d => d.CrmLeads).WithMany(p => p.CrmLead2opportunityPartnersNavigation)
            entity.HasMany<CrmLead>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "CrmLeadCrmLead2opportunityPartnerRel",
                    r => r.HasOne<CrmLead>().WithMany()
                        .HasForeignKey("CrmLeadId")
                        .HasConstraintName("crm_lead_crm_lead2opportunity_partner_rel_crm_lead_id_fkey"),
                    l => l.HasOne<CrmLead2opportunityPartner>().WithMany()
                        .HasForeignKey("CrmLead2opportunityPartnerId")
                        .HasConstraintName("crm_lead_crm_lead2opportunity_crm_lead2opportunity_partner_fkey"),
                    j =>
                    {
                        j.HasKey("CrmLead2opportunityPartnerId", "CrmLeadId").HasName("crm_lead_crm_lead2opportunity_partner_rel_pkey");
                        j.ToTable("crm_lead_crm_lead2opportunity_partner_rel");
                        j.HasIndex(new[] { "CrmLeadId", "CrmLead2opportunityPartnerId" }, "crm_lead_crm_lead2opportunity_crm_lead_id_crm_lead2opportun_idx");
                    });
        });

        modelBuilder.Entity<CrmLead2opportunityPartnerMass>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_lead2opportunity_partner_mass_pkey");

            entity.ToTable("crm_lead2opportunity_partner_mass");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Action).HasColumnName("action");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Deduplicate).HasColumnName("deduplicate");
            entity.Property(e => e.ForceAssignment).HasColumnName("force_assignment");
            entity.Property(e => e.LeadId).HasColumnName("lead_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.TeamId).HasColumnName("team_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead2opportunity_partner_mass_create_uid_fkey");

            entity.HasOne(d => d.Lead).WithMany(p => p.CrmLead2opportunityPartnerMassesNavigation)
                .HasForeignKey(d => d.LeadId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead2opportunity_partner_mass_lead_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead2opportunity_partner_mass_partner_id_fkey");

            entity.HasOne(d => d.Team).WithMany(p => p.CrmLead2opportunityPartnerMasses)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead2opportunity_partner_mass_team_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead2opportunity_partner_mass_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead2opportunity_partner_mass_write_uid_fkey");
            /// TODO: 
            //entity.HasMany(d => d.CrmLeads).WithMany(p => p.CrmLead2opportunityPartnerMasses)
            entity.HasMany<CrmLead>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "CrmConvertLeadMassLeadRel",
                    r => r.HasOne<CrmLead>().WithMany()
                        .HasForeignKey("CrmLeadId")
                        .HasConstraintName("crm_convert_lead_mass_lead_rel_crm_lead_id_fkey"),
                    l => l.HasOne<CrmLead2opportunityPartnerMass>().WithMany()
                        .HasForeignKey("CrmLead2opportunityPartnerMassId")
                        .HasConstraintName("crm_convert_lead_mass_lead_re_crm_lead2opportunity_partner_fkey"),
                    j =>
                    {
                        j.HasKey("CrmLead2opportunityPartnerMassId", "CrmLeadId").HasName("crm_convert_lead_mass_lead_rel_pkey");
                        j.ToTable("crm_convert_lead_mass_lead_rel");
                        j.HasIndex(new[] { "CrmLeadId", "CrmLead2opportunityPartnerMassId" }, "crm_convert_lead_mass_lead_re_crm_lead_id_crm_lead2opportun_idx");
                    });

            /// TODO: 
            //entity.HasMany(d => d.CrmLeadsNavigation).WithMany(p => p.CrmLead2opportunityPartnerMasses1)
            entity.HasMany<CrmLead>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "CrmLeadCrmLead2opportunityPartnerMassRel",
                    r => r.HasOne<CrmLead>().WithMany()
                        .HasForeignKey("CrmLeadId")
                        .HasConstraintName("crm_lead_crm_lead2opportunity_partner_mass_rel_crm_lead_id_fkey"),
                    l => l.HasOne<CrmLead2opportunityPartnerMass>().WithMany()
                        .HasForeignKey("CrmLead2opportunityPartnerMassId")
                        .HasConstraintName("crm_lead_crm_lead2opportunit_crm_lead2opportunity_partner_fkey1"),
                    j =>
                    {
                        j.HasKey("CrmLead2opportunityPartnerMassId", "CrmLeadId").HasName("crm_lead_crm_lead2opportunity_partner_mass_rel_pkey");
                        j.ToTable("crm_lead_crm_lead2opportunity_partner_mass_rel");
                        j.HasIndex(new[] { "CrmLeadId", "CrmLead2opportunityPartnerMassId" }, "crm_lead_crm_lead2opportunity_crm_lead_id_crm_lead2opportu_idx1");
                    });

            //entity.HasMany(d => d.ResUsers).WithMany(p => p.CrmLead2opportunityPartnerMasses)
            entity.HasMany<ResUser>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "CrmLead2opportunityPartnerMassResUsersRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("ResUsersId")
                        .HasConstraintName("crm_lead2opportunity_partner_mass_res_users_r_res_users_id_fkey"),
                    l => l.HasOne<CrmLead2opportunityPartnerMass>().WithMany()
                        .HasForeignKey("CrmLead2opportunityPartnerMassId")
                        .HasConstraintName("crm_lead2opportunity_partner__crm_lead2opportunity_partner_fkey"),
                    j =>
                    {
                        j.HasKey("CrmLead2opportunityPartnerMassId", "ResUsersId").HasName("crm_lead2opportunity_partner_mass_res_users_rel_pkey");
                        j.ToTable("crm_lead2opportunity_partner_mass_res_users_rel");
                        j.HasIndex(new[] { "ResUsersId", "CrmLead2opportunityPartnerMassId" }, "crm_lead2opportunity_partner__res_users_id_crm_lead2opportu_idx");
                    });
        });

        modelBuilder.Entity<CrmLeadLost>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_lead_lost_pkey");

            entity.ToTable("crm_lead_lost");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LostFeedback).HasColumnName("lost_feedback");
            entity.Property(e => e.LostReasonId).HasColumnName("lost_reason_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_lost_create_uid_fkey");

            entity.HasOne(d => d.LostReason).WithMany(p => p.CrmLeadLosts)
                .HasForeignKey(d => d.LostReasonId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_lost_lost_reason_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_lost_write_uid_fkey");
        });

        modelBuilder.Entity<CrmLeadPlsUpdate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_lead_pls_update_pkey");

            entity.ToTable("crm_lead_pls_update");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.PlsStartDate).HasColumnName("pls_start_date");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_pls_update_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_pls_update_write_uid_fkey");

            //entity.HasMany(d => d.CrmLeadScoringFrequencyFields).WithMany(p => p.CrmLeadPlsUpdates)
            entity.HasMany<CrmLeadScoringFrequencyField>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "CrmLeadPlsUpdateCrmLeadScoringFrequencyFieldRel",
                    r => r.HasOne<CrmLeadScoringFrequencyField>().WithMany()
                        .HasForeignKey("CrmLeadScoringFrequencyFieldId")
                        .HasConstraintName("crm_lead_pls_update_crm_lead__crm_lead_scoring_frequency_f_fkey"),
                    l => l.HasOne<CrmLeadPlsUpdate>().WithMany()
                        .HasForeignKey("CrmLeadPlsUpdateId")
                        .HasConstraintName("crm_lead_pls_update_crm_lead_scorin_crm_lead_pls_update_id_fkey"),
                    j =>
                    {
                        j.HasKey("CrmLeadPlsUpdateId", "CrmLeadScoringFrequencyFieldId").HasName("crm_lead_pls_update_crm_lead_scoring_frequency_field_rel_pkey");
                        j.ToTable("crm_lead_pls_update_crm_lead_scoring_frequency_field_rel");
                        j.HasIndex(new[] { "CrmLeadScoringFrequencyFieldId", "CrmLeadPlsUpdateId" }, "crm_lead_pls_update_crm_lead__crm_lead_scoring_frequency_fi_idx");
                    });
        });

        modelBuilder.Entity<CrmLeadScoringFrequency>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_lead_scoring_frequency_pkey");

            entity.ToTable("crm_lead_scoring_frequency");

            entity.HasIndex(e => e.Variable, "crm_lead_scoring_frequency_variable_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LostCount).HasColumnName("lost_count");
            entity.Property(e => e.TeamId).HasColumnName("team_id");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.Variable).HasColumnName("variable");
            entity.Property(e => e.WonCount).HasColumnName("won_count");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_scoring_frequency_create_uid_fkey");

            entity.HasOne(d => d.Team).WithMany(p => p.CrmLeadScoringFrequencies)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("crm_lead_scoring_frequency_team_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_scoring_frequency_write_uid_fkey");
        });

        modelBuilder.Entity<CrmLeadScoringFrequencyField>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_lead_scoring_frequency_field_pkey");

            entity.ToTable("crm_lead_scoring_frequency_field");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.FieldId).HasColumnName("field_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_scoring_frequency_field_create_uid_fkey");

            entity.HasOne(d => d.Field).WithMany(p => p.CrmLeadScoringFrequencyFields)
                .HasForeignKey(d => d.FieldId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("crm_lead_scoring_frequency_field_field_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lead_scoring_frequency_field_write_uid_fkey");
        });

        modelBuilder.Entity<CrmLostReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_lost_reason_pkey");

            entity.ToTable("crm_lost_reason");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lost_reason_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_lost_reason_write_uid_fkey");
        });

        modelBuilder.Entity<CrmMergeOpportunity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_merge_opportunity_pkey");

            entity.ToTable("crm_merge_opportunity");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.TeamId).HasColumnName("team_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_merge_opportunity_create_uid_fkey");

            entity.HasOne(d => d.Team).WithMany(p => p.CrmMergeOpportunities)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_merge_opportunity_team_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_merge_opportunity_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_merge_opportunity_write_uid_fkey");

            //entity.HasMany(d => d.Opportunities).WithMany(p => p.Merges)
            entity.HasMany<CrmLead>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MergeOpportunityRel",
                    r => r.HasOne<CrmLead>().WithMany()
                        .HasForeignKey("OpportunityId")
                        .HasConstraintName("merge_opportunity_rel_opportunity_id_fkey"),
                    l => l.HasOne<CrmMergeOpportunity>().WithMany()
                        .HasForeignKey("MergeId")
                        .HasConstraintName("merge_opportunity_rel_merge_id_fkey"),
                    j =>
                    {
                        j.HasKey("MergeId", "OpportunityId").HasName("merge_opportunity_rel_pkey");
                        j.ToTable("merge_opportunity_rel");
                        j.HasIndex(new[] { "OpportunityId", "MergeId" }, "merge_opportunity_rel_opportunity_id_merge_id_idx");
                    });
        });

        modelBuilder.Entity<CrmQuotationPartner>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_quotation_partner_pkey");

            entity.ToTable("crm_quotation_partner");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Action).HasColumnName("action");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LeadId).HasColumnName("lead_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_quotation_partner_create_uid_fkey");

            entity.HasOne(d => d.Lead).WithMany(p => p.CrmQuotationPartners)
                .HasForeignKey(d => d.LeadId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("crm_quotation_partner_lead_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_quotation_partner_partner_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_quotation_partner_write_uid_fkey");
        });

        modelBuilder.Entity<CrmRecurringPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_recurring_plan_pkey");

            entity.ToTable("crm_recurring_plan");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.NumberOfMonths).HasColumnName("number_of_months");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_recurring_plan_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_recurring_plan_write_uid_fkey");
        });

        modelBuilder.Entity<CrmStage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_stage_pkey");

            entity.ToTable("crm_stage");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Fold).HasColumnName("fold");
            entity.Property(e => e.IsWon).HasColumnName("is_won");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Requirements).HasColumnName("requirements");
            entity.Property(e => e.Sequence)
                //.ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.TeamId).HasColumnName("team_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_stage_create_uid_fkey");

            entity.HasOne(d => d.Team).WithMany(p => p.CrmStages)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_stage_team_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_stage_write_uid_fkey");
        });

        modelBuilder.Entity<CrmTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_tag_pkey");

            entity.ToTable("crm_tag");

            entity.HasIndex(e => e.Name, "crm_tag_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_tag_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_tag_write_uid_fkey");
        });

        modelBuilder.Entity<CrmTeam>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_team_pkey");

            entity.ToTable("crm_team");

            entity.HasIndex(e => e.TenantId, "crm_team_company_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AliasId).HasColumnName("alias_id");
            entity.Property(e => e.AssignmentDomain).HasColumnName("assignment_domain");
            entity.Property(e => e.AssignmentOptout).HasColumnName("assignment_optout");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.InvoicedTarget).HasColumnName("invoiced_target");
            entity.Property(e => e.LeadPropertiesDefinition)
                .HasColumnType("jsonb")
                .HasColumnName("lead_properties_definition");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.UseLeads).HasColumnName("use_leads");
            entity.Property(e => e.UseOpportunities).HasColumnName("use_opportunities");
            entity.Property(e => e.UseQuotations).HasColumnName("use_quotations");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Alias).WithMany(p => p.CrmTeams)
                .HasForeignKey(d => d.AliasId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("crm_team_alias_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_team_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_team_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.CrmTeams)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_team_message_main_attachment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_team_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_team_write_uid_fkey");

            //entity.HasMany(d => d.Users).WithMany(p => p.Teams)
            entity.HasMany<ResUser>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "TeamFavoriteUserRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("team_favorite_user_rel_user_id_fkey"),
                    l => l.HasOne<CrmTeam>().WithMany()
                        .HasForeignKey("TeamId")
                        .HasConstraintName("team_favorite_user_rel_team_id_fkey"),
                    j =>
                    {
                        j.HasKey("TeamId", "UserId").HasName("team_favorite_user_rel_pkey");
                        j.ToTable("team_favorite_user_rel");
                        j.HasIndex(new[] { "UserId", "TeamId" }, "team_favorite_user_rel_user_id_team_id_idx");
                    });
        });

        modelBuilder.Entity<CrmTeamMember>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crm_team_member_pkey");

            entity.ToTable("crm_team_member");

            entity.HasIndex(e => e.CrmTeamId, "crm_team_member_crm_team_id_index");

            entity.HasIndex(e => e.UserId, "crm_team_member_user_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AssignmentDomain).HasColumnName("assignment_domain");
            entity.Property(e => e.AssignmentMax).HasColumnName("assignment_max");
            entity.Property(e => e.AssignmentOptout).HasColumnName("assignment_optout");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CrmTeamId).HasColumnName("crm_team_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_team_member_create_uid_fkey");

            entity.HasOne(d => d.CrmTeam).WithMany(p => p.CrmTeamMembers)
                .HasForeignKey(d => d.CrmTeamId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("crm_team_member_crm_team_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.CrmTeamMembers)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_team_member_message_main_attachment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("crm_team_member_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crm_team_member_write_uid_fkey");
        });

        modelBuilder.Entity<CrossoveredBudget>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crossovered_budget_pkey");

            entity.ToTable("crossovered_budget");

            entity.HasIndex(e => e.State, "crossovered_budget_state_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("crossovered_budget_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crossovered_budget_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.CrossoveredBudgets)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crossovered_budget_message_main_attachment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crossovered_budget_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crossovered_budget_write_uid_fkey");
        });

        modelBuilder.Entity<CrossoveredBudgetLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("crossovered_budget_lines_pkey");

            entity.ToTable("crossovered_budget_lines");

            entity.HasIndex(e => e.CrossoveredBudgetId, "crossovered_budget_lines_crossovered_budget_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AnalyticAccountId).HasColumnName("analytic_account_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CrossoveredBudgetId).HasColumnName("crossovered_budget_id");
            entity.Property(e => e.CrossoveredBudgetState).HasColumnName("crossovered_budget_state");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.GeneralBudgetId).HasColumnName("general_budget_id");
            entity.Property(e => e.PaidDate).HasColumnName("paid_date");
            entity.Property(e => e.PlannedAmount).HasColumnName("planned_amount");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AnalyticAccount).WithMany(p => p.CrossoveredBudgetLines)
                .HasForeignKey(d => d.AnalyticAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crossovered_budget_lines_analytic_account_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crossovered_budget_lines_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crossovered_budget_lines_create_uid_fkey");

            entity.HasOne(d => d.CrossoveredBudget).WithMany(p => p.CrossoveredBudgetLines)
                .HasForeignKey(d => d.CrossoveredBudgetId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("crossovered_budget_lines_crossovered_budget_id_fkey");

            entity.HasOne(d => d.GeneralBudget).WithMany(p => p.CrossoveredBudgetLines)
                .HasForeignKey(d => d.GeneralBudgetId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crossovered_budget_lines_general_budget_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("crossovered_budget_lines_write_uid_fkey");
        });

        modelBuilder.Entity<DecimalPrecision>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("decimal_precision_pkey");

            entity.ToTable("decimal_precision");

            entity.HasIndex(e => e.Name, "decimal_precision_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Digits).HasColumnName("digits");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("decimal_precision_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("decimal_precision_write_uid_fkey");
        });

        modelBuilder.Entity<DigestDigest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("digest_digest_pkey");

            entity.ToTable("digest_digest");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.KpiAccountTotalRevenue).HasColumnName("kpi_account_total_revenue");
            entity.Property(e => e.KpiAllSaleTotal).HasColumnName("kpi_all_sale_total");
            entity.Property(e => e.KpiCrmLeadCreated).HasColumnName("kpi_crm_lead_created");
            entity.Property(e => e.KpiCrmOpportunitiesWon).HasColumnName("kpi_crm_opportunities_won");
            entity.Property(e => e.KpiHrRecruitmentNewColleagues).HasColumnName("kpi_hr_recruitment_new_colleagues");
            entity.Property(e => e.KpiMailMessageTotal).HasColumnName("kpi_mail_message_total");
            entity.Property(e => e.KpiPosTotal).HasColumnName("kpi_pos_total");
            entity.Property(e => e.KpiProjectTaskOpened).HasColumnName("kpi_project_task_opened");
            entity.Property(e => e.KpiResUsersConnected).HasColumnName("kpi_res_users_connected");
            entity.Property(e => e.KpiWebsiteSaleTotal).HasColumnName("kpi_website_sale_total");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.NextRunDate).HasColumnName("next_run_date");
            entity.Property(e => e.Periodicity).HasColumnName("periodicity");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("digest_digest_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("digest_digest_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("digest_digest_write_uid_fkey");

            //entity.HasMany(d => d.ResUsers).WithMany(p => p.DigestDigests)
            entity.HasMany<ResUser>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "DigestDigestResUsersRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("ResUsersId")
                        .HasConstraintName("digest_digest_res_users_rel_res_users_id_fkey"),
                    l => l.HasOne<DigestDigest>().WithMany()
                        .HasForeignKey("DigestDigestId")
                        .HasConstraintName("digest_digest_res_users_rel_digest_digest_id_fkey"),
                    j =>
                    {
                        j.HasKey("DigestDigestId", "ResUsersId").HasName("digest_digest_res_users_rel_pkey");
                        j.ToTable("digest_digest_res_users_rel");
                        j.HasIndex(new[] { "ResUsersId", "DigestDigestId" }, "digest_digest_res_users_rel_res_users_id_digest_digest_id_idx");
                    });
        });

        modelBuilder.Entity<DigestTip>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("digest_tip_pkey");

            entity.ToTable("digest_tip");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.TipDescription)
                .HasColumnType("jsonb")
                .HasColumnName("tip_description");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("digest_tip_create_uid_fkey");

            entity.HasOne(d => d.Group).WithMany(p => p.DigestTips)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("digest_tip_group_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("digest_tip_write_uid_fkey");

            //entity.HasMany(d => d.ResUsers).WithMany(p => p.DigestTips)
            entity.HasMany<ResUser>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "DigestTipResUsersRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("ResUsersId")
                        .HasConstraintName("digest_tip_res_users_rel_res_users_id_fkey"),
                    l => l.HasOne<DigestTip>().WithMany()
                        .HasForeignKey("DigestTipId")
                        .HasConstraintName("digest_tip_res_users_rel_digest_tip_id_fkey"),
                    j =>
                    {
                        j.HasKey("DigestTipId", "ResUsersId").HasName("digest_tip_res_users_rel_pkey");
                        j.ToTable("digest_tip_res_users_rel");
                        j.HasIndex(new[] { "ResUsersId", "DigestTipId" }, "digest_tip_res_users_rel_res_users_id_digest_tip_id_idx");
                    });
        });

        modelBuilder.Entity<FetchmailServer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fetchmail_server_pkey");

            entity.ToTable("fetchmail_server");

            entity.HasIndex(e => e.ServerType, "fetchmail_server_server_type_index");

            entity.HasIndex(e => e.State, "fetchmail_server_state_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Attach).HasColumnName("attach");
            entity.Property(e => e.Configuration).HasColumnName("configuration");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.GoogleGmailAccessToken).HasColumnName("google_gmail_access_token");
            entity.Property(e => e.GoogleGmailAccessTokenExpiration).HasColumnName("google_gmail_access_token_expiration");
            entity.Property(e => e.GoogleGmailAuthorizationCode).HasColumnName("google_gmail_authorization_code");
            entity.Property(e => e.GoogleGmailRefreshToken).HasColumnName("google_gmail_refresh_token");
            entity.Property(e => e.IsSsl).HasColumnName("is_ssl");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.Original).HasColumnName("original");
            entity.Property(e => e.Password).HasColumnName("password");
            entity.Property(e => e.Port).HasColumnName("port");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.Script).HasColumnName("script");
            entity.Property(e => e.Server).HasColumnName("server");
            entity.Property(e => e.ServerType).HasColumnName("server_type");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.User).HasColumnName("user");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fetchmail_server_create_uid_fkey");

            entity.HasOne(d => d.Object).WithMany(p => p.FetchmailServers)
                .HasForeignKey(d => d.ObjectId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fetchmail_server_object_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fetchmail_server_write_uid_fkey");
        });

        modelBuilder.Entity<FleetServiceType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fleet_service_type_pkey");

            entity.ToTable("fleet_service_type");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Category).HasColumnName("category");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_service_type_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_service_type_write_uid_fkey");
        });

        modelBuilder.Entity<FleetVehicle>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fleet_vehicle_pkey");

            entity.ToTable("fleet_vehicle");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AcquisitionDate).HasColumnName("acquisition_date");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.BrandId).HasColumnName("brand_id");
            entity.Property(e => e.CarValue).HasColumnName("car_value");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.Co2).HasColumnName("co2");
            entity.Property(e => e.Co2Standard).HasColumnName("co2_standard");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Doors).HasColumnName("doors");
            entity.Property(e => e.DriverEmployeeId).HasColumnName("driver_employee_id");
            entity.Property(e => e.DriverId).HasColumnName("driver_id");
            entity.Property(e => e.ElectricAssistance).HasColumnName("electric_assistance");
            entity.Property(e => e.FirstContractDate).HasColumnName("first_contract_date");
            entity.Property(e => e.FrameSize).HasColumnName("frame_size");
            entity.Property(e => e.FrameType).HasColumnName("frame_type");
            entity.Property(e => e.FuelType).HasColumnName("fuel_type");
            entity.Property(e => e.FutureDriverEmployeeId).HasColumnName("future_driver_employee_id");
            entity.Property(e => e.FutureDriverId).HasColumnName("future_driver_id");
            entity.Property(e => e.Horsepower).HasColumnName("horsepower");
            entity.Property(e => e.HorsepowerTax).HasColumnName("horsepower_tax");
            entity.Property(e => e.LicensePlate).HasColumnName("license_plate");
            entity.Property(e => e.Location).HasColumnName("location");
            entity.Property(e => e.ManagerId).HasColumnName("manager_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.MobilityCard).HasColumnName("mobility_card");
            entity.Property(e => e.ModelId).HasColumnName("model_id");
            entity.Property(e => e.ModelYear).HasColumnName("model_year");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.NetCarValue).HasColumnName("net_car_value");
            entity.Property(e => e.NextAssignationDate).HasColumnName("next_assignation_date");
            entity.Property(e => e.OdometerUnit).HasColumnName("odometer_unit");
            entity.Property(e => e.PlanToChangeBike).HasColumnName("plan_to_change_bike");
            entity.Property(e => e.PlanToChangeCar).HasColumnName("plan_to_change_car");
            entity.Property(e => e.Power).HasColumnName("power");
            entity.Property(e => e.ResidualValue).HasColumnName("residual_value");
            entity.Property(e => e.Seats).HasColumnName("seats");
            entity.Property(e => e.StateId).HasColumnName("state_id");
            entity.Property(e => e.TrailerHook).HasColumnName("trailer_hook");
            entity.Property(e => e.Transmission).HasColumnName("transmission");
            entity.Property(e => e.VinSn).HasColumnName("vin_sn");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.WriteOffDate).HasColumnName("write_off_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Brand).WithMany(p => p.FleetVehicles)
                .HasForeignKey(d => d.BrandId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_brand_id_fkey");

            entity.HasOne(d => d.Category).WithMany(p => p.FleetVehicles)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_category_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_create_uid_fkey");

            entity.HasOne(d => d.DriverEmployee).WithMany(p => p.FleetVehicleDriverEmployees)
                .HasForeignKey(d => d.DriverEmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_driver_employee_id_fkey");

            entity.HasOne(d => d.Driver).WithMany(p => p.FleetVehicleDrivers)
                .HasForeignKey(d => d.DriverId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_driver_id_fkey");

            entity.HasOne(d => d.FutureDriverEmployee).WithMany(p => p.FleetVehicleFutureDriverEmployees)
                .HasForeignKey(d => d.FutureDriverEmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_future_driver_employee_id_fkey");

            entity.HasOne(d => d.FutureDriver).WithMany(p => p.FleetVehicleFutureDrivers)
                .HasForeignKey(d => d.FutureDriverId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_future_driver_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.ManagerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_manager_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.FleetVehicles)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Model).WithMany(p => p.FleetVehicles)
                .HasForeignKey(d => d.ModelId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("fleet_vehicle_model_id_fkey");

            entity.HasOne(d => d.State).WithMany(p => p.FleetVehicles)
                .HasForeignKey(d => d.StateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_state_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_write_uid_fkey");

            //entity.HasMany(d => d.Tags).WithMany(p => p.VehicleTags)
            entity.HasMany<FleetVehicleTag>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "FleetVehicleVehicleTagRel",
                    r => r.HasOne<FleetVehicleTag>().WithMany()
                        .HasForeignKey("TagId")
                        .HasConstraintName("fleet_vehicle_vehicle_tag_rel_tag_id_fkey"),
                    l => l.HasOne<FleetVehicle>().WithMany()
                        .HasForeignKey("VehicleTagId")
                        .HasConstraintName("fleet_vehicle_vehicle_tag_rel_vehicle_tag_id_fkey"),
                    j =>
                    {
                        j.HasKey("VehicleTagId", "TagId").HasName("fleet_vehicle_vehicle_tag_rel_pkey");
                        j.ToTable("fleet_vehicle_vehicle_tag_rel");
                        j.HasIndex(new[] { "TagId", "VehicleTagId" }, "fleet_vehicle_vehicle_tag_rel_tag_id_vehicle_tag_id_idx");
                    });
        });

        modelBuilder.Entity<FleetVehicleAssignationLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fleet_vehicle_assignation_log_pkey");

            entity.ToTable("fleet_vehicle_assignation_log");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateEnd).HasColumnName("date_end");
            entity.Property(e => e.DateStart).HasColumnName("date_start");
            entity.Property(e => e.DriverEmployeeId).HasColumnName("driver_employee_id");
            entity.Property(e => e.DriverId).HasColumnName("driver_id");
            entity.Property(e => e.VehicleId).HasColumnName("vehicle_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_assignation_log_create_uid_fkey");

            entity.HasOne(d => d.DriverEmployee).WithMany(p => p.FleetVehicleAssignationLogs)
                .HasForeignKey(d => d.DriverEmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_assignation_log_driver_employee_id_fkey");

            entity.HasOne(d => d.Driver).WithMany(p => p.FleetVehicleAssignationLogs)
                .HasForeignKey(d => d.DriverId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("fleet_vehicle_assignation_log_driver_id_fkey");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.FleetVehicleAssignationLogs)
                .HasForeignKey(d => d.VehicleId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("fleet_vehicle_assignation_log_vehicle_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_assignation_log_write_uid_fkey");
        });

        modelBuilder.Entity<FleetVehicleLogContract>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fleet_vehicle_log_contract_pkey");

            entity.ToTable("fleet_vehicle_log_contract");

            entity.HasIndex(e => e.UserId, "fleet_vehicle_log_contract_user_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CostFrequency).HasColumnName("cost_frequency");
            entity.Property(e => e.CostGenerated).HasColumnName("cost_generated");
            entity.Property(e => e.CostSubtypeId).HasColumnName("cost_subtype_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.ExpirationDate).HasColumnName("expiration_date");
            entity.Property(e => e.InsRef).HasColumnName("ins_ref");
            entity.Property(e => e.InsurerId).HasColumnName("insurer_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Notes).HasColumnName("notes");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.VehicleId).HasColumnName("vehicle_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_contract_company_id_fkey");

            entity.HasOne(d => d.CostSubtype).WithMany(p => p.FleetVehicleLogContractsNavigation)
                .HasForeignKey(d => d.CostSubtypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_contract_cost_subtype_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_contract_create_uid_fkey");

            entity.HasOne(d => d.Insurer).WithMany(p => p.FleetVehicleLogContracts)
                .HasForeignKey(d => d.InsurerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_contract_insurer_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.FleetVehicleLogContracts)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_contract_message_main_attachment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_contract_user_id_fkey");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.FleetVehicleLogContracts)
                .HasForeignKey(d => d.VehicleId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("fleet_vehicle_log_contract_vehicle_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_contract_write_uid_fkey");

            //entity.HasMany(d => d.FleetServiceTypes).WithMany(p => p.FleetVehicleLogContracts)
            entity.HasMany<FleetServiceType>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "FleetServiceTypeFleetVehicleLogContractRel",
                    r => r.HasOne<FleetServiceType>().WithMany()
                        .HasForeignKey("FleetServiceTypeId")
                        .HasConstraintName("fleet_service_type_fleet_vehicle_log_fleet_service_type_id_fkey"),
                    l => l.HasOne<FleetVehicleLogContract>().WithMany()
                        .HasForeignKey("FleetVehicleLogContractId")
                        .HasConstraintName("fleet_service_type_fleet_vehi_fleet_vehicle_log_contract_i_fkey"),
                    j =>
                    {
                        j.HasKey("FleetVehicleLogContractId", "FleetServiceTypeId").HasName("fleet_service_type_fleet_vehicle_log_contract_rel_pkey");
                        j.ToTable("fleet_service_type_fleet_vehicle_log_contract_rel");
                        j.HasIndex(new[] { "FleetServiceTypeId", "FleetVehicleLogContractId" }, "fleet_service_type_fleet_vehi_fleet_service_type_id_fleet_v_idx");
                    });
        });

        modelBuilder.Entity<FleetVehicleLogService>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fleet_vehicle_log_services_pkey");

            entity.ToTable("fleet_vehicle_log_services");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.InvRef).HasColumnName("inv_ref");
            entity.Property(e => e.ManagerId).HasColumnName("manager_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Notes).HasColumnName("notes");
            entity.Property(e => e.OdometerId).HasColumnName("odometer_id");
            entity.Property(e => e.PurchaserEmployeeId).HasColumnName("purchaser_employee_id");
            entity.Property(e => e.PurchaserId).HasColumnName("purchaser_id");
            entity.Property(e => e.ServiceTypeId).HasColumnName("service_type_id");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.VehicleId).HasColumnName("vehicle_id");
            entity.Property(e => e.VendorId).HasColumnName("vendor_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_services_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_services_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.ManagerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_services_manager_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.FleetVehicleLogServices)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_services_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Odometer).WithMany(p => p.FleetVehicleLogServices)
                .HasForeignKey(d => d.OdometerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_services_odometer_id_fkey");

            entity.HasOne(d => d.PurchaserEmployee).WithMany(p => p.FleetVehicleLogServices)
                .HasForeignKey(d => d.PurchaserEmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_services_purchaser_employee_id_fkey");

            entity.HasOne(d => d.Purchaser).WithMany(p => p.FleetVehicleLogServicePurchasers)
                .HasForeignKey(d => d.PurchaserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_services_purchaser_id_fkey");

            entity.HasOne(d => d.ServiceType).WithMany(p => p.FleetVehicleLogServices)
                .HasForeignKey(d => d.ServiceTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("fleet_vehicle_log_services_service_type_id_fkey");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.FleetVehicleLogServices)
                .HasForeignKey(d => d.VehicleId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("fleet_vehicle_log_services_vehicle_id_fkey");

            entity.HasOne(d => d.Vendor).WithMany(p => p.FleetVehicleLogServiceVendors)
                .HasForeignKey(d => d.VendorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_services_vendor_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_log_services_write_uid_fkey");
        });

        modelBuilder.Entity<FleetVehicleModel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fleet_vehicle_model_pkey");

            entity.ToTable("fleet_vehicle_model");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.BrandId).HasColumnName("brand_id");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.Co2Standard).HasColumnName("co2_standard");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DefaultCo2).HasColumnName("default_co2");
            entity.Property(e => e.DefaultFuelType).HasColumnName("default_fuel_type");
            entity.Property(e => e.Doors).HasColumnName("doors");
            entity.Property(e => e.ElectricAssistance).HasColumnName("electric_assistance");
            entity.Property(e => e.Horsepower).HasColumnName("horsepower");
            entity.Property(e => e.HorsepowerTax).HasColumnName("horsepower_tax");
            entity.Property(e => e.ModelYear).HasColumnName("model_year");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Power).HasColumnName("power");
            entity.Property(e => e.Seats).HasColumnName("seats");
            entity.Property(e => e.TrailerHook).HasColumnName("trailer_hook");
            entity.Property(e => e.Transmission).HasColumnName("transmission");
            entity.Property(e => e.VehicleType).HasColumnName("vehicle_type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Brand).WithMany(p => p.FleetVehicleModels)
                .HasForeignKey(d => d.BrandId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("fleet_vehicle_model_brand_id_fkey");

            entity.HasOne(d => d.Category).WithMany(p => p.FleetVehicleModels)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_model_category_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_model_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_model_write_uid_fkey");

            //entity.HasMany(d => d.Partners).WithMany(p => p.Models)
            entity.HasMany<ResPartner>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "FleetVehicleModelVendor",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("PartnerId")
                        .HasConstraintName("fleet_vehicle_model_vendors_partner_id_fkey"),
                    l => l.HasOne<FleetVehicleModel>().WithMany()
                        .HasForeignKey("ModelId")
                        .HasConstraintName("fleet_vehicle_model_vendors_model_id_fkey"),
                    j =>
                    {
                        j.HasKey("ModelId", "PartnerId").HasName("fleet_vehicle_model_vendors_pkey");
                        j.ToTable("fleet_vehicle_model_vendors");
                        j.HasIndex(new[] { "PartnerId", "ModelId" }, "fleet_vehicle_model_vendors_partner_id_model_id_idx");
                    });
        });

        modelBuilder.Entity<FleetVehicleModelBrand>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fleet_vehicle_model_brand_pkey");

            entity.ToTable("fleet_vehicle_model_brand");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ModelCount).HasColumnName("model_count");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_model_brand_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_model_brand_write_uid_fkey");
        });

        modelBuilder.Entity<FleetVehicleModelCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fleet_vehicle_model_category_pkey");

            entity.ToTable("fleet_vehicle_model_category");

            entity.HasIndex(e => e.Name, "fleet_vehicle_model_category_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Sequence).HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_model_category_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_model_category_write_uid_fkey");
        });

        modelBuilder.Entity<FleetVehicleOdometer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fleet_vehicle_odometer_pkey");

            entity.ToTable("fleet_vehicle_odometer");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.VehicleId).HasColumnName("vehicle_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_odometer_create_uid_fkey");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.FleetVehicleOdometers)
                .HasForeignKey(d => d.VehicleId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("fleet_vehicle_odometer_vehicle_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_odometer_write_uid_fkey");
        });

        modelBuilder.Entity<FleetVehicleState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fleet_vehicle_state_pkey");

            entity.ToTable("fleet_vehicle_state");

            entity.HasIndex(e => e.Name, "fleet_vehicle_state_fleet_state_name_unique").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                //.ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_state_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_state_write_uid_fkey");
        });

        modelBuilder.Entity<FleetVehicleTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("fleet_vehicle_tag_pkey");

            entity.ToTable("fleet_vehicle_tag");

            entity.HasIndex(e => e.Name, "fleet_vehicle_tag_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_tag_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fleet_vehicle_tag_write_uid_fkey");
        });

        modelBuilder.Entity<FollowupFollowup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("followup_followup_pkey");

            entity.ToTable("followup_followup");

            entity.HasIndex(e => e.TenantId, "followup_followup_company_uniq").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Company).WithOne(p => p.FollowupFollowup)
                .HasForeignKey<FollowupFollowup>(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("followup_followup_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("followup_followup_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("followup_followup_write_uid_fkey");
        });

        modelBuilder.Entity<FollowupLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("followup_line_pkey");

            entity.ToTable("followup_line");

            entity.HasIndex(e => new { e.FollowupId, e.Delay }, "followup_line_days_uniq").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Delay).HasColumnName("delay");
            entity.Property(e => e.Description)
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.EmailTemplateId).HasColumnName("email_template_id");
            entity.Property(e => e.FollowupId).HasColumnName("followup_id");
            entity.Property(e => e.ManualAction).HasColumnName("manual_action");
            entity.Property(e => e.ManualActionNote).HasColumnName("manual_action_note");
            entity.Property(e => e.ManualActionResponsibleId).HasColumnName("manual_action_responsible_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.SendEmail).HasColumnName("send_email");
            entity.Property(e => e.SendLetter).HasColumnName("send_letter");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("followup_line_create_uid_fkey");

            entity.HasOne(d => d.EmailTemplate).WithMany(p => p.FollowupLines)
                .HasForeignKey(d => d.EmailTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("followup_line_email_template_id_fkey");

            entity.HasOne(d => d.Followup).WithMany(p => p.FollowupLines)
                .HasForeignKey(d => d.FollowupId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("followup_line_followup_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.ManualActionResponsibleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("followup_line_manual_action_responsible_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("followup_line_write_uid_fkey");
        });

        modelBuilder.Entity<FollowupPrint>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("followup_print_pkey");

            entity.ToTable("followup_print");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.EmailBody).HasColumnName("email_body");
            entity.Property(e => e.EmailConf).HasColumnName("email_conf");
            entity.Property(e => e.EmailSubject).HasColumnName("email_subject");
            entity.Property(e => e.FollowupId).HasColumnName("followup_id");
            entity.Property(e => e.PartnerLang).HasColumnName("partner_lang");
            entity.Property(e => e.Summary).HasColumnName("summary");
            entity.Property(e => e.TestPrint).HasColumnName("test_print");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("followup_print_create_uid_fkey");

            entity.HasOne(d => d.Followup).WithMany(p => p.FollowupPrints)
                .HasForeignKey(d => d.FollowupId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("followup_print_followup_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("followup_print_write_uid_fkey");
        });

        modelBuilder.Entity<FollowupSendingResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("followup_sending_results_pkey");

            entity.ToTable("followup_sending_results");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Needprinting).HasColumnName("needprinting");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("followup_sending_results_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("followup_sending_results_write_uid_fkey");
        });

        modelBuilder.Entity<HrApplicant>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_applicant_pkey");

            entity.ToTable("hr_applicant");

            entity.HasIndex(e => e.DateLastStageUpdate, "hr_applicant_date_last_stage_update_index");

            entity.HasIndex(e => e.JobId, "hr_applicant_job_id_index");

            entity.HasIndex(e => e.Name, "hr_applicant_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.StageId, "hr_applicant_stage_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Availability).HasColumnName("availability");
            entity.Property(e => e.CampaignId).HasColumnName("campaign_id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateClosed)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_closed");
            entity.Property(e => e.DateLastStageUpdate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_last_stage_update");
            entity.Property(e => e.DateOpen)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_open");
            entity.Property(e => e.DelayClose).HasColumnName("delay_close");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.EmailCc).HasColumnName("email_cc");
            entity.Property(e => e.EmailFrom).HasColumnName("email_from");
            entity.Property(e => e.EmpId).HasColumnName("emp_id");
            entity.Property(e => e.JobId).HasColumnName("job_id");
            entity.Property(e => e.KanbanState).HasColumnName("kanban_state");
            entity.Property(e => e.LastStageId).HasColumnName("last_stage_id");
            entity.Property(e => e.LinkedinProfile).HasColumnName("linkedin_profile");
            entity.Property(e => e.MediumId).HasColumnName("medium_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PartnerMobile).HasColumnName("partner_mobile");
            entity.Property(e => e.PartnerName).HasColumnName("partner_name");
            entity.Property(e => e.PartnerPhone).HasColumnName("partner_phone");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.Probability).HasColumnName("probability");
            entity.Property(e => e.RefuseReasonId).HasColumnName("refuse_reason_id");
            entity.Property(e => e.SalaryExpected).HasColumnName("salary_expected");
            entity.Property(e => e.SalaryExpectedExtra).HasColumnName("salary_expected_extra");
            entity.Property(e => e.SalaryProposed).HasColumnName("salary_proposed");
            entity.Property(e => e.SalaryProposedExtra).HasColumnName("salary_proposed_extra");
            entity.Property(e => e.SourceId).HasColumnName("source_id");
            entity.Property(e => e.StageId).HasColumnName("stage_id");
            entity.Property(e => e.TypeId).HasColumnName("type_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Campaign).WithMany(p => p.HrApplicants)
                .HasForeignKey(d => d.CampaignId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_campaign_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_create_uid_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.HrApplicants)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_department_id_fkey");

            entity.HasOne(d => d.Emp).WithMany(p => p.HrApplicants)
                .HasForeignKey(d => d.EmpId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_emp_id_fkey");

            entity.HasOne(d => d.Job).WithMany(p => p.HrApplicants)
                .HasForeignKey(d => d.JobId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_job_id_fkey");

            entity.HasOne(d => d.LastStage).WithMany(p => p.HrApplicantLastStages)
                .HasForeignKey(d => d.LastStageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_last_stage_id_fkey");

            entity.HasOne(d => d.Medium).WithMany(p => p.HrApplicants)
                .HasForeignKey(d => d.MediumId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_medium_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.HrApplicants)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_message_main_attachment_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_partner_id_fkey");

            entity.HasOne(d => d.RefuseReason).WithMany(p => p.HrApplicants)
                .HasForeignKey(d => d.RefuseReasonId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_refuse_reason_id_fkey");

            entity.HasOne(d => d.Source).WithMany(p => p.HrApplicants)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_source_id_fkey");

            entity.HasOne(d => d.Stage).WithMany(p => p.HrApplicantStages)
                .HasForeignKey(d => d.StageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_applicant_stage_id_fkey");

            entity.HasOne(d => d.Type).WithMany(p => p.HrApplicants)
                .HasForeignKey(d => d.TypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_type_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_write_uid_fkey");

            //entity.HasMany(d => d.HrApplicantCategories).WithMany(p => p.HrApplicants)
            entity.HasMany<HrApplicantCategory>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "HrApplicantHrApplicantCategoryRel",
                    r => r.HasOne<HrApplicantCategory>().WithMany()
                        .HasForeignKey("HrApplicantCategoryId")
                        .HasConstraintName("hr_applicant_hr_applicant_categor_hr_applicant_category_id_fkey"),
                    l => l.HasOne<HrApplicant>().WithMany()
                        .HasForeignKey("HrApplicantId")
                        .HasConstraintName("hr_applicant_hr_applicant_category_rel_hr_applicant_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrApplicantId", "HrApplicantCategoryId").HasName("hr_applicant_hr_applicant_category_rel_pkey");
                        j.ToTable("hr_applicant_hr_applicant_category_rel");
                        j.HasIndex(new[] { "HrApplicantCategoryId", "HrApplicantId" }, "hr_applicant_hr_applicant_cat_hr_applicant_category_id_hr_a_idx");
                    });

            //entity.HasMany(d => d.HrSkills).WithMany(p => p.HrApplicants)
            entity.HasMany<HrSkill>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "HrApplicantHrSkillRel",
                    r => r.HasOne<HrSkill>().WithMany()
                        .HasForeignKey("HrSkillId")
                        .HasConstraintName("hr_applicant_hr_skill_rel_hr_skill_id_fkey"),
                    l => l.HasOne<HrApplicant>().WithMany()
                        .HasForeignKey("HrApplicantId")
                        .HasConstraintName("hr_applicant_hr_skill_rel_hr_applicant_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrApplicantId", "HrSkillId").HasName("hr_applicant_hr_skill_rel_pkey");
                        j.ToTable("hr_applicant_hr_skill_rel");
                        j.HasIndex(new[] { "HrSkillId", "HrApplicantId" }, "hr_applicant_hr_skill_rel_hr_skill_id_hr_applicant_id_idx");
                    });

            //entity.HasMany(d => d.ResUsers).WithMany(p => p.HrApplicants)
            entity.HasMany<ResUser>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "HrApplicantResUsersInterviewersRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("ResUsersId")
                        .HasConstraintName("hr_applicant_res_users_interviewers_rel_res_users_id_fkey"),
                    l => l.HasOne<HrApplicant>().WithMany()
                        .HasForeignKey("HrApplicantId")
                        .HasConstraintName("hr_applicant_res_users_interviewers_rel_hr_applicant_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrApplicantId", "ResUsersId").HasName("hr_applicant_res_users_interviewers_rel_pkey");
                        j.ToTable("hr_applicant_res_users_interviewers_rel");
                        j.HasIndex(new[] { "ResUsersId", "HrApplicantId" }, "hr_applicant_res_users_intervi_res_users_id_hr_applicant_id_idx");
                    });
        });

        modelBuilder.Entity<HrApplicantCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_applicant_category_pkey");

            entity.ToTable("hr_applicant_category");

            entity.HasIndex(e => e.Name, "hr_applicant_category_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_category_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_category_write_uid_fkey");
        });

        modelBuilder.Entity<HrApplicantRefuseReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_applicant_refuse_reason_pkey");

            entity.ToTable("hr_applicant_refuse_reason");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.TemplateId).HasColumnName("template_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_refuse_reason_create_uid_fkey");

            entity.HasOne(d => d.Template).WithMany(p => p.HrApplicantRefuseReasons)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_refuse_reason_template_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_refuse_reason_write_uid_fkey");
        });

        modelBuilder.Entity<HrApplicantSkill>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_applicant_skill_pkey");

            entity.ToTable("hr_applicant_skill");

            entity.HasIndex(e => new { e.ApplicantId, e.SkillId }, "hr_applicant_skill__unique_skill").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.ApplicantId).HasColumnName("applicant_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.SkillId).HasColumnName("skill_id");
            entity.Property(e => e.SkillLevelId).HasColumnName("skill_level_id");
            entity.Property(e => e.SkillTypeId).HasColumnName("skill_type_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Applicant).WithMany(p => p.HrApplicantSkills)
                .HasForeignKey(d => d.ApplicantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("hr_applicant_skill_applicant_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_skill_create_uid_fkey");

            entity.HasOne(d => d.Skill).WithMany(p => p.HrApplicantSkills)
                .HasForeignKey(d => d.SkillId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_applicant_skill_skill_id_fkey");

            entity.HasOne(d => d.SkillLevel).WithMany(p => p.HrApplicantSkills)
                .HasForeignKey(d => d.SkillLevelId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_applicant_skill_skill_level_id_fkey");

            entity.HasOne(d => d.SkillType).WithMany(p => p.HrApplicantSkills)
                .HasForeignKey(d => d.SkillTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_applicant_skill_skill_type_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_applicant_skill_write_uid_fkey");
        });

        modelBuilder.Entity<HrAttendance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_attendance_pkey");

            entity.ToTable("hr_attendance");

            entity.HasIndex(e => e.EmployeeId, "hr_attendance_employee_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CheckIn)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("check_in");
            entity.Property(e => e.CheckOut)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("check_out");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.WorkedHours).HasColumnName("worked_hours");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_attendance_create_uid_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrAttendances)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("hr_attendance_employee_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_attendance_write_uid_fkey");
        });

        modelBuilder.Entity<HrAttendanceOvertime>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_attendance_overtime_pkey");

            entity.ToTable("hr_attendance_overtime");

            entity.HasIndex(e => e.EmployeeId, "hr_attendance_overtime_employee_id_index");

            entity.HasIndex(e => new { e.EmployeeId, e.Date }, "hr_attendance_overtime_unique_employee_per_day")
                .IsUnique()
                .HasFilter("(adjustment IS FALSE)");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Adjustment).HasColumnName("adjustment");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.DurationReal).HasColumnName("duration_real");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_attendance_overtime_create_uid_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrAttendanceOvertimes)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("hr_attendance_overtime_employee_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_attendance_overtime_write_uid_fkey");
        });

        modelBuilder.Entity<HrContract>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_contract_pkey");

            entity.ToTable("hr_contract");

            entity.HasIndex(e => e.DateStart, "hr_contract_date_start_index");

            entity.HasIndex(e => e.ResourceCalendarId, "hr_contract_resource_calendar_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.ContractTypeId).HasColumnName("contract_type_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateEnd).HasColumnName("date_end");
            entity.Property(e => e.DateStart).HasColumnName("date_start");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.HrResponsibleId).HasColumnName("hr_responsible_id");
            entity.Property(e => e.JobId).HasColumnName("job_id");
            entity.Property(e => e.KanbanState).HasColumnName("kanban_state");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Notes).HasColumnName("notes");
            entity.Property(e => e.ResourceCalendarId).HasColumnName("resource_calendar_id");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.StructureTypeId).HasColumnName("structure_type_id");
            entity.Property(e => e.TrialDateEnd).HasColumnName("trial_date_end");
            entity.Property(e => e.Wage).HasColumnName("wage");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_contract_company_id_fkey");

            entity.HasOne(d => d.ContractType).WithMany(p => p.HrContracts)
                .HasForeignKey(d => d.ContractTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_contract_type_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_create_uid_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.HrContracts)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_department_id_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrContracts)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_employee_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.HrResponsibleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_hr_responsible_id_fkey");

            entity.HasOne(d => d.Job).WithMany(p => p.HrContracts)
                .HasForeignKey(d => d.JobId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_job_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.HrContracts)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_message_main_attachment_id_fkey");

            entity.HasOne(d => d.ResourceCalendar).WithMany(p => p.HrContracts)
                .HasForeignKey(d => d.ResourceCalendarId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_resource_calendar_id_fkey");

            entity.HasOne(d => d.StructureType).WithMany(p => p.HrContracts)
                .HasForeignKey(d => d.StructureTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_structure_type_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_write_uid_fkey");
        });

        modelBuilder.Entity<HrContractType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_contract_type_pkey");

            entity.ToTable("hr_contract_type");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                //.ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_type_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_contract_type_write_uid_fkey");
        });

        modelBuilder.Entity<HrDepartment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_department_pkey");

            entity.ToTable("hr_department");

            entity.HasIndex(e => e.TenantId, "hr_department_company_id_index");

            entity.HasIndex(e => e.ParentId, "hr_department_parent_id_index");

            entity.HasIndex(e => e.ParentPath, "hr_department_parent_path_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CompleteName).HasColumnName("complete_name");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ManagerId).HasColumnName("manager_id");
            entity.Property(e => e.MasterDepartmentId).HasColumnName("master_department_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.ParentPath).HasColumnName("parent_path");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_department_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_department_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.ManagerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_department_manager_id_fkey");

            entity.HasOne(d => d.MasterDepartment).WithMany(p => p.InverseMasterDepartment)
                .HasForeignKey(d => d.MasterDepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_department_master_department_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.HrDepartments)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_department_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_department_parent_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_department_write_uid_fkey");
        });

        modelBuilder.Entity<HrDepartureReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_departure_reason_pkey");

            entity.ToTable("hr_departure_reason");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                //.ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_departure_reason_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_departure_reason_write_uid_fkey");
        });

        modelBuilder.Entity<HrDepartureWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_departure_wizard_pkey");

            entity.ToTable("hr_departure_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.ArchiveAllocation).HasColumnName("archive_allocation");
            entity.Property(e => e.ArchivePrivateAddress).HasColumnName("archive_private_address");
            entity.Property(e => e.CancelLeaves).HasColumnName("cancel_leaves");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DepartureDate).HasColumnName("departure_date");
            entity.Property(e => e.DepartureDescription).HasColumnName("departure_description");
            entity.Property(e => e.DepartureReasonId).HasColumnName("departure_reason_id");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.ReleaseCampanyCar).HasColumnName("release_campany_car");
            entity.Property(e => e.SetDateEnd).HasColumnName("set_date_end");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_departure_wizard_create_uid_fkey");

            entity.HasOne(d => d.DepartureReason).WithMany(p => p.HrDepartureWizards)
                .HasForeignKey(d => d.DepartureReasonId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("hr_departure_wizard_departure_reason_id_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrDepartureWizards)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("hr_departure_wizard_employee_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_departure_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<HrEmployee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_employee_pkey");

            entity.ToTable("hr_employee");

            entity.HasIndex(e => e.Barcode, "hr_employee_barcode_uniq").IsUnique();

            entity.HasIndex(e => e.TenantId, "hr_employee_company_id_index");

            entity.HasIndex(e => e.ResourceCalendarId, "hr_employee_resource_calendar_id_index");

            entity.HasIndex(e => e.ResourceId, "hr_employee_resource_id_index");

            entity.HasIndex(e => new { e.UserId, e.TenantId }, "hr_employee_user_uniq").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AdditionalNote).HasColumnName("additional_note");
            entity.Property(e => e.AddressHomeId).HasColumnName("address_home_id");
            entity.Property(e => e.AddressId).HasColumnName("address_id");
            entity.Property(e => e.BankAccountId).HasColumnName("bank_account_id");
            entity.Property(e => e.Barcode).HasColumnName("barcode");
            entity.Property(e => e.Birthday).HasColumnName("birthday");
            entity.Property(e => e.Certificate).HasColumnName("certificate");
            entity.Property(e => e.Children).HasColumnName("children");
            entity.Property(e => e.CoachId).HasColumnName("coach_id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.ContractId).HasColumnName("contract_id");
            entity.Property(e => e.ContractWarning).HasColumnName("contract_warning");
            entity.Property(e => e.CountryId).HasColumnName("country_id");
            entity.Property(e => e.CountryOfBirth).HasColumnName("country_of_birth");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.DepartureDate).HasColumnName("departure_date");
            entity.Property(e => e.DepartureDescription).HasColumnName("departure_description");
            entity.Property(e => e.DepartureReasonId).HasColumnName("departure_reason_id");
            entity.Property(e => e.EmergencyContact).HasColumnName("emergency_contact");
            entity.Property(e => e.EmergencyPhone).HasColumnName("emergency_phone");
            entity.Property(e => e.EmployeeType).HasColumnName("employee_type");
            entity.Property(e => e.ExpenseManagerId).HasColumnName("expense_manager_id");
            entity.Property(e => e.FirstContractDate).HasColumnName("first_contract_date");
            entity.Property(e => e.Gender).HasColumnName("gender");
            entity.Property(e => e.IdentificationId).HasColumnName("identification_id");
            entity.Property(e => e.JobId).HasColumnName("job_id");
            entity.Property(e => e.JobTitle).HasColumnName("job_title");
            entity.Property(e => e.KmHomeWork).HasColumnName("km_home_work");
            entity.Property(e => e.LastAttendanceId).HasColumnName("last_attendance_id");
            entity.Property(e => e.LastCheckIn)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_check_in");
            entity.Property(e => e.LastCheckOut)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_check_out");
            entity.Property(e => e.LeaveManagerId).HasColumnName("leave_manager_id");
            entity.Property(e => e.Marital).HasColumnName("marital");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.MobilePhone).HasColumnName("mobile_phone");
            entity.Property(e => e.MobilityCard).HasColumnName("mobility_card");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Notes).HasColumnName("notes");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PassportId).HasColumnName("passport_id");
            entity.Property(e => e.PermitNo).HasColumnName("permit_no");
            entity.Property(e => e.Pin).HasColumnName("pin");
            entity.Property(e => e.PlaceOfBirth).HasColumnName("place_of_birth");
            entity.Property(e => e.ResourceCalendarId).HasColumnName("resource_calendar_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.Sinid).HasColumnName("sinid");
            entity.Property(e => e.SpouseBirthdate).HasColumnName("spouse_birthdate");
            entity.Property(e => e.SpouseCompleteName).HasColumnName("spouse_complete_name");
            entity.Property(e => e.Ssnid).HasColumnName("ssnid");
            entity.Property(e => e.StudyField).HasColumnName("study_field");
            entity.Property(e => e.StudySchool).HasColumnName("study_school");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Vehicle).HasColumnName("vehicle");
            entity.Property(e => e.VisaExpire).HasColumnName("visa_expire");
            entity.Property(e => e.VisaNo).HasColumnName("visa_no");
            entity.Property(e => e.WorkContactId).HasColumnName("work_contact_id");
            entity.Property(e => e.WorkEmail).HasColumnName("work_email");
            entity.Property(e => e.WorkLocationId).HasColumnName("work_location_id");
            entity.Property(e => e.WorkPermitExpirationDate).HasColumnName("work_permit_expiration_date");
            entity.Property(e => e.WorkPermitScheduledActivity).HasColumnName("work_permit_scheduled_activity");
            entity.Property(e => e.WorkPhone).HasColumnName("work_phone");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AddressHome).WithMany(p => p.HrEmployeeAddressHomes)
                .HasForeignKey(d => d.AddressHomeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_address_home_id_fkey");

            entity.HasOne(d => d.Address).WithMany(p => p.HrEmployeeAddresses)
                .HasForeignKey(d => d.AddressId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_address_id_fkey");

            entity.HasOne(d => d.BankAccount).WithMany(p => p.HrEmployees)
                .HasForeignKey(d => d.BankAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_bank_account_id_fkey");

            entity.HasOne(d => d.Coach).WithMany(p => p.InverseCoach)
                .HasForeignKey(d => d.CoachId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_coach_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_company_id_fkey");

            entity.HasOne(d => d.Contract).WithMany(p => p.HrEmployees)
                .HasForeignKey(d => d.ContractId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_contract_id_fkey");

            entity.HasOne<ResCountry>().WithMany()
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_country_id_fkey");

            entity.HasOne(d => d.CountryOfBirthNavigation).WithMany(p => p.HrEmployeeCountryOfBirthNavigations)
                .HasForeignKey(d => d.CountryOfBirth)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_country_of_birth_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_create_uid_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.HrEmployees)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_department_id_fkey");

            entity.HasOne(d => d.DepartureReason).WithMany(p => p.HrEmployees)
                .HasForeignKey(d => d.DepartureReasonId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_employee_departure_reason_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.ExpenseManagerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_expense_manager_id_fkey");

            entity.HasOne(d => d.Job).WithMany(p => p.HrEmployees)
                .HasForeignKey(d => d.JobId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_job_id_fkey");

            entity.HasOne(d => d.LastAttendance).WithMany(p => p.HrEmployees)
                .HasForeignKey(d => d.LastAttendanceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_last_attendance_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LeaveManagerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_leave_manager_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.HrEmployees)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_parent_id_fkey");

            entity.HasOne(d => d.ResourceCalendar).WithMany(p => p.HrEmployees)
                .HasForeignKey(d => d.ResourceCalendarId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_resource_calendar_id_fkey");

            entity.HasOne(d => d.Resource).WithMany(p => p.HrEmployees)
                .HasForeignKey(d => d.ResourceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_employee_resource_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_user_id_fkey");

            entity.HasOne(d => d.WorkContact).WithMany(p => p.HrEmployeeWorkContacts)
                .HasForeignKey(d => d.WorkContactId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_work_contact_id_fkey");

            entity.HasOne(d => d.WorkLocation).WithMany(p => p.HrEmployees)
                .HasForeignKey(d => d.WorkLocationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_work_location_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_write_uid_fkey");

            //entity.HasMany(d => d.Categories).WithMany(p => p.Emps)
            entity.HasMany<HrEmployeeCategory>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "EmployeeCategoryRel",
                    r => r.HasOne<HrEmployeeCategory>().WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("employee_category_rel_category_id_fkey"),
                    l => l.HasOne<HrEmployee>().WithMany()
                        .HasForeignKey("EmpId")
                        .HasConstraintName("employee_category_rel_emp_id_fkey"),
                    j =>
                    {
                        j.HasKey("EmpId", "CategoryId").HasName("employee_category_rel_pkey");
                        j.ToTable("employee_category_rel");
                        j.HasIndex(new[] { "CategoryId", "EmpId" }, "employee_category_rel_category_id_emp_id_idx");
                    });

            //entity.HasMany(d => d.HrSkills).WithMany(p => p.HrEmployees)
            entity.HasMany<HrSkill>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "HrEmployeeHrSkillRel",
                    r => r.HasOne<HrSkill>().WithMany()
                        .HasForeignKey("HrSkillId")
                        .HasConstraintName("hr_employee_hr_skill_rel_hr_skill_id_fkey"),
                    l => l.HasOne<HrEmployee>().WithMany()
                        .HasForeignKey("HrEmployeeId")
                        .HasConstraintName("hr_employee_hr_skill_rel_hr_employee_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrEmployeeId", "HrSkillId").HasName("hr_employee_hr_skill_rel_pkey");
                        j.ToTable("hr_employee_hr_skill_rel");
                        j.HasIndex(new[] { "HrSkillId", "HrEmployeeId" }, "hr_employee_hr_skill_rel_hr_skill_id_hr_employee_id_idx");
                    });
        });

        modelBuilder.Entity<HrEmployeeCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_employee_category_pkey");

            entity.ToTable("hr_employee_category");

            entity.HasIndex(e => e.Name, "hr_employee_category_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_category_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_category_write_uid_fkey");
        });

        modelBuilder.Entity<HrEmployeeSkill>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_employee_skill_pkey");

            entity.ToTable("hr_employee_skill");

            entity.HasIndex(e => new { e.EmployeeId, e.SkillId }, "hr_employee_skill__unique_skill").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.SkillId).HasColumnName("skill_id");
            entity.Property(e => e.SkillLevelId).HasColumnName("skill_level_id");
            entity.Property(e => e.SkillTypeId).HasColumnName("skill_type_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_skill_create_uid_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrEmployeeSkills)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("hr_employee_skill_employee_id_fkey");

            entity.HasOne(d => d.Skill).WithMany(p => p.HrEmployeeSkills)
                .HasForeignKey(d => d.SkillId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_employee_skill_skill_id_fkey");

            entity.HasOne(d => d.SkillLevel).WithMany(p => p.HrEmployeeSkills)
                .HasForeignKey(d => d.SkillLevelId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_employee_skill_skill_level_id_fkey");

            entity.HasOne(d => d.SkillType).WithMany(p => p.HrEmployeeSkills)
                .HasForeignKey(d => d.SkillTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_employee_skill_skill_type_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_skill_write_uid_fkey");
        });

        modelBuilder.Entity<HrEmployeeSkillLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_employee_skill_log_pkey");

            entity.ToTable("hr_employee_skill_log");

            entity.HasIndex(e => new { e.EmployeeId, e.DepartmentId, e.SkillId, e.Date }, "hr_employee_skill_log__unique_skill_log").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.LevelProgress).HasColumnName("level_progress");
            entity.Property(e => e.SkillId).HasColumnName("skill_id");
            entity.Property(e => e.SkillLevelId).HasColumnName("skill_level_id");
            entity.Property(e => e.SkillTypeId).HasColumnName("skill_type_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_skill_log_create_uid_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.HrEmployeeSkillLogs)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_skill_log_department_id_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrEmployeeSkillLogs)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("hr_employee_skill_log_employee_id_fkey");

            entity.HasOne(d => d.Skill).WithMany(p => p.HrEmployeeSkillLogs)
                .HasForeignKey(d => d.SkillId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_employee_skill_log_skill_id_fkey");

            entity.HasOne(d => d.SkillLevel).WithMany(p => p.HrEmployeeSkillLogs)
                .HasForeignKey(d => d.SkillLevelId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_employee_skill_log_skill_level_id_fkey");

            entity.HasOne(d => d.SkillType).WithMany(p => p.HrEmployeeSkillLogs)
                .HasForeignKey(d => d.SkillTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_employee_skill_log_skill_type_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_employee_skill_log_write_uid_fkey");
        });

        modelBuilder.Entity<HrExpense>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_expense_pkey");

            entity.ToTable("hr_expense");

            entity.HasIndex(e => e.AnalyticDistribution, "hr_expense_analytic_distribution_gin_index").HasMethod("gin");

            entity.HasIndex(e => e.State, "hr_expense_state_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.AccountingDate).HasColumnName("accounting_date");
            entity.Property(e => e.AmountTax).HasColumnName("amount_tax");
            entity.Property(e => e.AmountTaxCompany).HasColumnName("amount_tax_company");
            entity.Property(e => e.AnalyticDistribution)
                .HasColumnType("jsonb")
                .HasColumnName("analytic_distribution");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.IsRefused).HasColumnName("is_refused");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PaymentMode).HasColumnName("payment_mode");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductUomId).HasColumnName("product_uom_id");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.Reference).HasColumnName("reference");
            entity.Property(e => e.SaleOrderId).HasColumnName("sale_order_id");
            entity.Property(e => e.Sample).HasColumnName("sample");
            entity.Property(e => e.SheetId).HasColumnName("sheet_id");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.TotalAmount).HasColumnName("total_amount");
            entity.Property(e => e.TotalAmountCompany).HasColumnName("total_amount_company");
            entity.Property(e => e.UnitAmount).HasColumnName("unit_amount");
            entity.Property(e => e.UntaxedAmount).HasColumnName("untaxed_amount");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Account).WithMany(p => p.HrExpenses)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_account_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_expense_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_expense_currency_id_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrExpenses)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_expense_employee_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.HrExpenses)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.HrExpenses)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_expense_product_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.HrExpenses)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_product_uom_id_fkey");

            entity.HasOne(d => d.SaleOrder).WithMany(p => p.HrExpenses)
                .HasForeignKey(d => d.SaleOrderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_sale_order_id_fkey");

            entity.HasOne(d => d.Sheet).WithMany(p => p.HrExpenses)
                .HasForeignKey(d => d.SheetId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_sheet_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_write_uid_fkey");

            //entity.HasMany(d => d.Taxes).WithMany(p => p.Expenses)
            entity.HasMany<AccountTax>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ExpenseTax",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("TaxId")
                        .HasConstraintName("expense_tax_tax_id_fkey"),
                    l => l.HasOne<HrExpense>().WithMany()
                        .HasForeignKey("ExpenseId")
                        .HasConstraintName("expense_tax_expense_id_fkey"),
                    j =>
                    {
                        j.HasKey("ExpenseId", "TaxId").HasName("expense_tax_pkey");
                        j.ToTable("expense_tax");
                        j.HasIndex(new[] { "TaxId", "ExpenseId" }, "expense_tax_tax_id_expense_id_idx");
                    });
        });

        modelBuilder.Entity<HrExpenseApproveDuplicate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_expense_approve_duplicate_pkey");

            entity.ToTable("hr_expense_approve_duplicate");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_approve_duplicate_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_approve_duplicate_write_uid_fkey");

            //entity.HasMany(d => d.HrExpenseSheets).WithMany(p => p.HrExpenseApproveDuplicates)
            entity.HasMany<HrExpenseSheet>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "HrExpenseApproveDuplicateHrExpenseSheetRel",
                    r => r.HasOne<HrExpenseSheet>().WithMany()
                        .HasForeignKey("HrExpenseSheetId")
                        .HasConstraintName("hr_expense_approve_duplicate_hr_expens_hr_expense_sheet_id_fkey"),
                    l => l.HasOne<HrExpenseApproveDuplicate>().WithMany()
                        .HasForeignKey("HrExpenseApproveDuplicateId")
                        .HasConstraintName("hr_expense_approve_duplicate__hr_expense_approve_duplicate_fkey"),
                    j =>
                    {
                        j.HasKey("HrExpenseApproveDuplicateId", "HrExpenseSheetId").HasName("hr_expense_approve_duplicate_hr_expense_sheet_rel_pkey");
                        j.ToTable("hr_expense_approve_duplicate_hr_expense_sheet_rel");
                        j.HasIndex(new[] { "HrExpenseSheetId", "HrExpenseApproveDuplicateId" }, "hr_expense_approve_duplicate__hr_expense_sheet_id_hr_expens_idx");
                    });

            //entity.HasMany(d => d.HrExpenses).WithMany(p => p.HrExpenseApproveDuplicates)
            entity.HasMany<HrExpense>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "HrExpenseHrExpenseApproveDuplicateRel",
                    r => r.HasOne<HrExpense>().WithMany()
                        .HasForeignKey("HrExpenseId")
                        .HasConstraintName("hr_expense_hr_expense_approve_duplicate_rel_hr_expense_id_fkey"),
                    l => l.HasOne<HrExpenseApproveDuplicate>().WithMany()
                        .HasForeignKey("HrExpenseApproveDuplicateId")
                        .HasConstraintName("hr_expense_hr_expense_approve_hr_expense_approve_duplicate_fkey"),
                    j =>
                    {
                        j.HasKey("HrExpenseApproveDuplicateId", "HrExpenseId").HasName("hr_expense_hr_expense_approve_duplicate_rel_pkey");
                        j.ToTable("hr_expense_hr_expense_approve_duplicate_rel");
                        j.HasIndex(new[] { "HrExpenseId", "HrExpenseApproveDuplicateId" }, "hr_expense_hr_expense_approve_hr_expense_id_hr_expense_appr_idx");
                    });
        });

        modelBuilder.Entity<HrExpenseRefuseWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_expense_refuse_wizard_pkey");

            entity.ToTable("hr_expense_refuse_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.HrExpenseSheetId).HasColumnName("hr_expense_sheet_id");
            entity.Property(e => e.Reason).HasColumnName("reason");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_refuse_wizard_create_uid_fkey");

            entity.HasOne(d => d.HrExpenseSheet).WithMany(p => p.HrExpenseRefuseWizards)
                .HasForeignKey(d => d.HrExpenseSheetId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_refuse_wizard_hr_expense_sheet_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_refuse_wizard_write_uid_fkey");

            //entity.HasMany(d => d.HrExpenses).WithMany(p => p.HrExpenseRefuseWizards)
            entity.HasMany<HrExpense>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "HrExpenseHrExpenseRefuseWizardRel",
                    r => r.HasOne<HrExpense>().WithMany()
                        .HasForeignKey("HrExpenseId")
                        .HasConstraintName("hr_expense_hr_expense_refuse_wizard_rel_hr_expense_id_fkey"),
                    l => l.HasOne<HrExpenseRefuseWizard>().WithMany()
                        .HasForeignKey("HrExpenseRefuseWizardId")
                        .HasConstraintName("hr_expense_hr_expense_refuse_w_hr_expense_refuse_wizard_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrExpenseRefuseWizardId", "HrExpenseId").HasName("hr_expense_hr_expense_refuse_wizard_rel_pkey");
                        j.ToTable("hr_expense_hr_expense_refuse_wizard_rel");
                        j.HasIndex(new[] { "HrExpenseId", "HrExpenseRefuseWizardId" }, "hr_expense_hr_expense_refuse__hr_expense_id_hr_expense_refu_idx");
                    });
        });

        modelBuilder.Entity<HrExpenseSheet>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_expense_sheet_pkey");

            entity.ToTable("hr_expense_sheet");

            entity.HasIndex(e => e.State, "hr_expense_sheet_state_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountMoveId).HasColumnName("account_move_id");
            entity.Property(e => e.AccountingDate).HasColumnName("accounting_date");
            entity.Property(e => e.AddressId).HasColumnName("address_id");
            entity.Property(e => e.AmountResidual).HasColumnName("amount_residual");
            entity.Property(e => e.ApprovalDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("approval_date");
            entity.Property(e => e.BankJournalId).HasColumnName("bank_journal_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.JournalId).HasColumnName("journal_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PaymentState).HasColumnName("payment_state");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.TotalAmount).HasColumnName("total_amount");
            entity.Property(e => e.TotalAmountTaxes).HasColumnName("total_amount_taxes");
            entity.Property(e => e.UntaxedAmount).HasColumnName("untaxed_amount");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AccountMove).WithMany(p => p.HrExpenseSheets)
                .HasForeignKey(d => d.AccountMoveId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_expense_sheet_account_move_id_fkey");

            entity.HasOne(d => d.Address).WithMany(p => p.HrExpenseSheets)
                .HasForeignKey(d => d.AddressId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_sheet_address_id_fkey");

            entity.HasOne(d => d.BankJournal).WithMany(p => p.HrExpenseSheetBankJournals)
                .HasForeignKey(d => d.BankJournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_sheet_bank_journal_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_expense_sheet_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_sheet_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_sheet_currency_id_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.HrExpenseSheets)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_sheet_department_id_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrExpenseSheets)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_expense_sheet_employee_id_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.HrExpenseSheetJournals)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_sheet_journal_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.HrExpenseSheets)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_sheet_message_main_attachment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_sheet_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_sheet_write_uid_fkey");
        });

        modelBuilder.Entity<HrExpenseSplit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_expense_split_pkey");

            entity.ToTable("hr_expense_split");

            entity.HasIndex(e => e.AnalyticDistribution, "hr_expense_split_analytic_distribution_gin_index").HasMethod("gin");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AnalyticDistribution)
                .HasColumnType("jsonb")
                .HasColumnName("analytic_distribution");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.ExpenseId).HasColumnName("expense_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.ProductHasCost).HasColumnName("product_has_cost");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.SaleOrderId).HasColumnName("sale_order_id");
            entity.Property(e => e.TotalAmount).HasColumnName("total_amount");
            entity.Property(e => e.WizardId).HasColumnName("wizard_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_split_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_split_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_split_currency_id_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrExpenseSplits)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("hr_expense_split_employee_id_fkey");

            entity.HasOne(d => d.Expense).WithMany(p => p.HrExpenseSplits)
                .HasForeignKey(d => d.ExpenseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_split_expense_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.HrExpenseSplits)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("hr_expense_split_product_id_fkey");

            entity.HasOne(d => d.SaleOrder).WithMany(p => p.HrExpenseSplits)
                .HasForeignKey(d => d.SaleOrderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_split_sale_order_id_fkey");

            entity.HasOne(d => d.Wizard).WithMany(p => p.HrExpenseSplits)
                .HasForeignKey(d => d.WizardId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_split_wizard_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_split_write_uid_fkey");

            //entity.HasMany(d => d.AccountTaxes).WithMany(p => p.HrExpenseSplits)
            entity.HasMany<AccountTax>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxHrExpenseSplitRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("AccountTaxId")
                        .HasConstraintName("account_tax_hr_expense_split_rel_account_tax_id_fkey"),
                    l => l.HasOne<HrExpenseSplit>().WithMany()
                        .HasForeignKey("HrExpenseSplitId")
                        .HasConstraintName("account_tax_hr_expense_split_rel_hr_expense_split_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrExpenseSplitId", "AccountTaxId").HasName("account_tax_hr_expense_split_rel_pkey");
                        j.ToTable("account_tax_hr_expense_split_rel");
                        j.HasIndex(new[] { "AccountTaxId", "HrExpenseSplitId" }, "account_tax_hr_expense_split__account_tax_id_hr_expense_spl_idx");
                    });
        });

        modelBuilder.Entity<HrExpenseSplitWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_expense_split_wizard_pkey");

            entity.ToTable("hr_expense_split_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ExpenseId).HasColumnName("expense_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_split_wizard_create_uid_fkey");

            entity.HasOne(d => d.Expense).WithMany(p => p.HrExpenseSplitWizards)
                .HasForeignKey(d => d.ExpenseId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("hr_expense_split_wizard_expense_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_expense_split_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<HrHolidaysCancelLeave>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_holidays_cancel_leave_pkey");

            entity.ToTable("hr_holidays_cancel_leave");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LeaveId).HasColumnName("leave_id");
            entity.Property(e => e.Reason).HasColumnName("reason");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_holidays_cancel_leave_create_uid_fkey");

            entity.HasOne(d => d.Leave).WithMany(p => p.HrHolidaysCancelLeaves)
                .HasForeignKey(d => d.LeaveId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("hr_holidays_cancel_leave_leave_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_holidays_cancel_leave_write_uid_fkey");
        });

        modelBuilder.Entity<HrHolidaysSummaryEmployee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_holidays_summary_employee_pkey");

            entity.ToTable("hr_holidays_summary_employee");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.HolidayType).HasColumnName("holiday_type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_holidays_summary_employee_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_holidays_summary_employee_write_uid_fkey");

            //entity.HasMany(d => d.Emps).WithMany(p => p.Sums)
            entity.HasMany<HrEmployee>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "SummaryEmpRel",
                    r => r.HasOne<HrEmployee>().WithMany()
                        .HasForeignKey("EmpId")
                        .HasConstraintName("summary_emp_rel_emp_id_fkey"),
                    l => l.HasOne<HrHolidaysSummaryEmployee>().WithMany()
                        .HasForeignKey("SumId")
                        .HasConstraintName("summary_emp_rel_sum_id_fkey"),
                    j =>
                    {
                        j.HasKey("SumId", "EmpId").HasName("summary_emp_rel_pkey");
                        j.ToTable("summary_emp_rel");
                        j.HasIndex(new[] { "EmpId", "SumId" }, "summary_emp_rel_emp_id_sum_id_idx");
                    });
        });

        modelBuilder.Entity<HrJob>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_job_pkey");

            entity.ToTable("hr_job");

            entity.HasIndex(e => e.IsPublished, "hr_job_is_published_index");

            entity.HasIndex(e => new { e.Name, e.TenantId, e.DepartmentId }, "hr_job_name_company_uniq").IsUnique();

            entity.HasIndex(e => e.WebsiteId, "hr_job_website_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AddressId).HasColumnName("address_id");
            entity.Property(e => e.AliasId).HasColumnName("alias_id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.ContractTypeId).HasColumnName("contract_type_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ExpectedEmployees).HasColumnName("expected_employees");
            entity.Property(e => e.HrResponsibleId).HasColumnName("hr_responsible_id");
            entity.Property(e => e.IsPublished).HasColumnName("is_published");
            entity.Property(e => e.JobDetails)
                .HasColumnType("jsonb")
                .HasColumnName("job_details");
            entity.Property(e => e.ManagerId).HasColumnName("manager_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.NoOfEmployee).HasColumnName("no_of_employee");
            entity.Property(e => e.NoOfHiredEmployee).HasColumnName("no_of_hired_employee");
            entity.Property(e => e.NoOfRecruitment).HasColumnName("no_of_recruitment");
            entity.Property(e => e.Requirements).HasColumnName("requirements");
            entity.Property(e => e.SeoName)
                .HasColumnType("jsonb")
                .HasColumnName("seo_name");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.WebsiteDescription)
                .HasColumnType("jsonb")
                .HasColumnName("website_description");
            entity.Property(e => e.WebsiteId).HasColumnName("website_id");
            entity.Property(e => e.WebsiteMetaDescription)
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_description");
            entity.Property(e => e.WebsiteMetaKeywords)
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_keywords");
            entity.Property(e => e.WebsiteMetaOgImg).HasColumnName("website_meta_og_img");
            entity.Property(e => e.WebsiteMetaTitle)
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_title");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Address).WithMany(p => p.HrJobs)
                .HasForeignKey(d => d.AddressId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_job_address_id_fkey");

            entity.HasOne(d => d.Alias).WithMany(p => p.HrJobs)
                .HasForeignKey(d => d.AliasId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_job_alias_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_job_company_id_fkey");

            entity.HasOne(d => d.ContractType).WithMany(p => p.HrJobs)
                .HasForeignKey(d => d.ContractTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_job_contract_type_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_job_create_uid_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.HrJobs)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_job_department_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.HrResponsibleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_job_hr_responsible_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.ManagerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_job_manager_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.HrJobs)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_job_message_main_attachment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_job_user_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.HrJobs)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_job_website_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_job_write_uid_fkey");

            //entity.HasMany(d => d.ResUsers).WithMany(p => p.HrJobs)
            entity.HasMany<ResUser>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "HrJobExtendedInterviewerResUser",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("ResUsersId")
                        .HasConstraintName("hr_job_extended_interviewer_res_users_res_users_id_fkey"),
                    l => l.HasOne<HrJob>().WithMany()
                        .HasForeignKey("HrJobId")
                        .HasConstraintName("hr_job_extended_interviewer_res_users_hr_job_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrJobId", "ResUsersId").HasName("hr_job_extended_interviewer_res_users_pkey");
                        j.ToTable("hr_job_extended_interviewer_res_users");
                        j.HasIndex(new[] { "ResUsersId", "HrJobId" }, "hr_job_extended_interviewer_res_user_res_users_id_hr_job_id_idx");
                    });

            /// TODO:
            //entity.HasMany(d => d.ResUsersNavigation).WithMany(p => p.HrJobsNavigation)
            entity.HasMany<ResUser>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "HrJobResUsersRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("ResUsersId")
                        .HasConstraintName("hr_job_res_users_rel_res_users_id_fkey"),
                    l => l.HasOne<HrJob>().WithMany()
                        .HasForeignKey("HrJobId")
                        .HasConstraintName("hr_job_res_users_rel_hr_job_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrJobId", "ResUsersId").HasName("hr_job_res_users_rel_pkey");
                        j.ToTable("hr_job_res_users_rel");
                        j.HasIndex(new[] { "ResUsersId", "HrJobId" }, "hr_job_res_users_rel_res_users_id_hr_job_id_idx");
                    });
            /// TODO:
            //entity.HasMany(d => d.Users).WithMany(p => p.Jobs)
            entity.HasMany<ResUser>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "JobFavoriteUserRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("job_favorite_user_rel_user_id_fkey"),
                    l => l.HasOne<HrJob>().WithMany()
                        .HasForeignKey("JobId")
                        .HasConstraintName("job_favorite_user_rel_job_id_fkey"),
                    j =>
                    {
                        j.HasKey("JobId", "UserId").HasName("job_favorite_user_rel_pkey");
                        j.ToTable("job_favorite_user_rel");
                        j.HasIndex(new[] { "UserId", "JobId" }, "job_favorite_user_rel_user_id_job_id_idx");
                    });
        });

        modelBuilder.Entity<HrLeave>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_leave_pkey");

            entity.ToTable("hr_leave");

            entity.HasIndex(e => e.DateFrom, "hr_leave_date_from_index");

            entity.HasIndex(e => new { e.DateTo, e.DateFrom }, "hr_leave_date_to_date_from_index");

            entity.HasIndex(e => e.EmployeeId, "hr_leave_employee_id_index");

            entity.HasIndex(e => e.UserId, "hr_leave_user_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFrom)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_from");
            entity.Property(e => e.DateTo)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_to");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.DurationDisplay).HasColumnName("duration_display");
            entity.Property(e => e.EmployeeCompanyId).HasColumnName("employee_company_id");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.FirstApproverId).HasColumnName("first_approver_id");
            entity.Property(e => e.HolidayAllocationId).HasColumnName("holiday_allocation_id");
            entity.Property(e => e.HolidayStatusId).HasColumnName("holiday_status_id");
            entity.Property(e => e.HolidayType).HasColumnName("holiday_type");
            entity.Property(e => e.ManagerId).HasColumnName("manager_id");
            entity.Property(e => e.MeetingId).HasColumnName("meeting_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.ModeCompanyId).HasColumnName("mode_company_id");
            entity.Property(e => e.MultiEmployee).HasColumnName("multi_employee");
            entity.Property(e => e.Notes).HasColumnName("notes");
            entity.Property(e => e.NumberOfDays).HasColumnName("number_of_days");
            entity.Property(e => e.OvertimeId).HasColumnName("overtime_id");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PrivateName).HasColumnName("private_name");
            entity.Property(e => e.ReportNote).HasColumnName("report_note");
            entity.Property(e => e.RequestDateFrom).HasColumnName("request_date_from");
            entity.Property(e => e.RequestDateFromPeriod).HasColumnName("request_date_from_period");
            entity.Property(e => e.RequestDateTo).HasColumnName("request_date_to");
            entity.Property(e => e.RequestHourFrom).HasColumnName("request_hour_from");
            entity.Property(e => e.RequestHourTo).HasColumnName("request_hour_to");
            entity.Property(e => e.RequestUnitHalf).HasColumnName("request_unit_half");
            entity.Property(e => e.RequestUnitHours).HasColumnName("request_unit_hours");
            entity.Property(e => e.SecondApproverId).HasColumnName("second_approver_id");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Category).WithMany(p => p.HrLeaves)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_category_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_create_uid_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.HrLeaves)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_department_id_fkey");

            entity.HasOne(d => d.EmployeeCompany).WithMany(p => p.HrLeaveEmployeeCompanies)
                .HasForeignKey(d => d.EmployeeCompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_employee_company_id_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrLeaveEmployees)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_leave_employee_id_fkey");

            entity.HasOne(d => d.FirstApprover).WithMany(p => p.HrLeaveFirstApprovers)
                .HasForeignKey(d => d.FirstApproverId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_first_approver_id_fkey");

            entity.HasOne(d => d.HolidayAllocation).WithMany(p => p.HrLeaves)
                .HasForeignKey(d => d.HolidayAllocationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_holiday_allocation_id_fkey");

            entity.HasOne(d => d.HolidayStatus).WithMany(p => p.HrLeaves)
                .HasForeignKey(d => d.HolidayStatusId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_leave_holiday_status_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.ManagerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_manager_id_fkey");

            entity.HasOne(d => d.Meeting).WithMany(p => p.HrLeaves)
                .HasForeignKey(d => d.MeetingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_meeting_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.HrLeaves)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_message_main_attachment_id_fkey");

            entity.HasOne(d => d.ModeCompany).WithMany(p => p.HrLeaveModeCompanies)
                .HasForeignKey(d => d.ModeCompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_mode_company_id_fkey");

            entity.HasOne(d => d.Overtime).WithMany(p => p.HrLeaves)
                .HasForeignKey(d => d.OvertimeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_overtime_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_parent_id_fkey");

            entity.HasOne(d => d.SecondApprover).WithMany(p => p.HrLeaveSecondApprovers)
                .HasForeignKey(d => d.SecondApproverId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_second_approver_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_write_uid_fkey");

            //entity.HasMany(d => d.HrEmployees).WithMany(p => p.HrLeaves)
            entity.HasMany<HrEmployee>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "HrEmployeeHrLeaveRel",
                    r => r.HasOne<HrEmployee>().WithMany()
                        .HasForeignKey("HrEmployeeId")
                        .HasConstraintName("hr_employee_hr_leave_rel_hr_employee_id_fkey"),
                    l => l.HasOne<HrLeave>().WithMany()
                        .HasForeignKey("HrLeaveId")
                        .HasConstraintName("hr_employee_hr_leave_rel_hr_leave_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrLeaveId", "HrEmployeeId").HasName("hr_employee_hr_leave_rel_pkey");
                        j.ToTable("hr_employee_hr_leave_rel");
                        j.HasIndex(new[] { "HrEmployeeId", "HrLeaveId" }, "hr_employee_hr_leave_rel_hr_employee_id_hr_leave_id_idx");
                    });
        });

        modelBuilder.Entity<HrLeaveAccrualLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_leave_accrual_level_pkey");

            entity.ToTable("hr_leave_accrual_level");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccrualPlanId).HasColumnName("accrual_plan_id");
            entity.Property(e => e.ActionWithUnusedAccruals).HasColumnName("action_with_unused_accruals");
            entity.Property(e => e.AddedValue).HasColumnName("added_value");
            entity.Property(e => e.AddedValueType).HasColumnName("added_value_type");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.FirstDay).HasColumnName("first_day");
            entity.Property(e => e.FirstMonth).HasColumnName("first_month");
            entity.Property(e => e.FirstMonthDay).HasColumnName("first_month_day");
            entity.Property(e => e.Frequency).HasColumnName("frequency");
            entity.Property(e => e.IsBasedOnWorkedTime).HasColumnName("is_based_on_worked_time");
            entity.Property(e => e.MaximumLeave).HasColumnName("maximum_leave");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PostponeMaxDays).HasColumnName("postpone_max_days");
            entity.Property(e => e.SecondDay).HasColumnName("second_day");
            entity.Property(e => e.SecondMonth).HasColumnName("second_month");
            entity.Property(e => e.SecondMonthDay).HasColumnName("second_month_day");
            entity.Property(e => e.Sequence).HasColumnName("sequence");
            entity.Property(e => e.StartCount).HasColumnName("start_count");
            entity.Property(e => e.StartType).HasColumnName("start_type");
            entity.Property(e => e.WeekDay).HasColumnName("week_day");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");
            entity.Property(e => e.YearlyDay).HasColumnName("yearly_day");
            entity.Property(e => e.YearlyMonth).HasColumnName("yearly_month");

            entity.HasOne(d => d.AccrualPlan).WithMany(p => p.HrLeaveAccrualLevels)
                .HasForeignKey(d => d.AccrualPlanId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_leave_accrual_level_accrual_plan_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_accrual_level_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_accrual_level_parent_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_accrual_level_write_uid_fkey");
        });

        modelBuilder.Entity<HrLeaveAccrualPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_leave_accrual_plan_pkey");

            entity.ToTable("hr_leave_accrual_plan");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.TimeOffTypeId).HasColumnName("time_off_type_id");
            entity.Property(e => e.TransitionMode).HasColumnName("transition_mode");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_accrual_plan_create_uid_fkey");

            entity.HasOne(d => d.TimeOffType).WithMany(p => p.HrLeaveAccrualPlans)
                .HasForeignKey(d => d.TimeOffTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_accrual_plan_time_off_type_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_accrual_plan_write_uid_fkey");
        });

        modelBuilder.Entity<HrLeaveAllocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_leave_allocation_pkey");

            entity.ToTable("hr_leave_allocation");

            entity.HasIndex(e => e.DateFrom, "hr_leave_allocation_date_from_index");

            entity.HasIndex(e => e.EmployeeId, "hr_leave_allocation_employee_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccrualPlanId).HasColumnName("accrual_plan_id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AllocationType).HasColumnName("allocation_type");
            entity.Property(e => e.ApproverId).HasColumnName("approver_id");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.EmployeeCompanyId).HasColumnName("employee_company_id");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.HolidayStatusId).HasColumnName("holiday_status_id");
            entity.Property(e => e.HolidayType).HasColumnName("holiday_type");
            entity.Property(e => e.Lastcall).HasColumnName("lastcall");
            entity.Property(e => e.ManagerId).HasColumnName("manager_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.ModeCompanyId).HasColumnName("mode_company_id");
            entity.Property(e => e.MultiEmployee).HasColumnName("multi_employee");
            entity.Property(e => e.Nextcall).HasColumnName("nextcall");
            entity.Property(e => e.Notes).HasColumnName("notes");
            entity.Property(e => e.NumberOfDays).HasColumnName("number_of_days");
            entity.Property(e => e.OvertimeId).HasColumnName("overtime_id");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PrivateName).HasColumnName("private_name");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AccrualPlan).WithMany(p => p.HrLeaveAllocations)
                .HasForeignKey(d => d.AccrualPlanId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_accrual_plan_id_fkey");

            entity.HasOne(d => d.Approver).WithMany(p => p.HrLeaveAllocationApprovers)
                .HasForeignKey(d => d.ApproverId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_approver_id_fkey");

            entity.HasOne(d => d.Category).WithMany(p => p.HrLeaveAllocations)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_category_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_create_uid_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.HrLeaveAllocations)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_department_id_fkey");

            entity.HasOne(d => d.EmployeeCompany).WithMany(p => p.HrLeaveAllocationEmployeeCompanies)
                .HasForeignKey(d => d.EmployeeCompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_employee_company_id_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrLeaveAllocationEmployees)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_leave_allocation_employee_id_fkey");

            entity.HasOne(d => d.HolidayStatus).WithMany(p => p.HrLeaveAllocations)
                .HasForeignKey(d => d.HolidayStatusId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_leave_allocation_holiday_status_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.ManagerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_manager_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.HrLeaveAllocations)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_message_main_attachment_id_fkey");

            entity.HasOne(d => d.ModeCompany).WithMany(p => p.HrLeaveAllocationModeCompanies)
                .HasForeignKey(d => d.ModeCompanyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_mode_company_id_fkey");

            entity.HasOne(d => d.Overtime).WithMany(p => p.HrLeaveAllocations)
                .HasForeignKey(d => d.OvertimeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_overtime_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_parent_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_allocation_write_uid_fkey");

            //entity.HasMany(d => d.HrEmployees).WithMany(p => p.HrLeaveAllocations)
            entity.HasMany<HrEmployee>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "HrEmployeeHrLeaveAllocationRel",
                    r => r.HasOne<HrEmployee>().WithMany()
                        .HasForeignKey("HrEmployeeId")
                        .HasConstraintName("hr_employee_hr_leave_allocation_rel_hr_employee_id_fkey"),
                    l => l.HasOne<HrLeaveAllocation>().WithMany()
                        .HasForeignKey("HrLeaveAllocationId")
                        .HasConstraintName("hr_employee_hr_leave_allocation_rel_hr_leave_allocation_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrLeaveAllocationId", "HrEmployeeId").HasName("hr_employee_hr_leave_allocation_rel_pkey");
                        j.ToTable("hr_employee_hr_leave_allocation_rel");
                        j.HasIndex(new[] { "HrEmployeeId", "HrLeaveAllocationId" }, "hr_employee_hr_leave_allocati_hr_employee_id_hr_leave_alloc_idx");
                    });
        });

        modelBuilder.Entity<HrLeaveStressDay>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_leave_stress_day_pkey");

            entity.ToTable("hr_leave_stress_day");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.ResourceCalendarId).HasColumnName("resource_calendar_id");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_leave_stress_day_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_stress_day_create_uid_fkey");

            entity.HasOne(d => d.ResourceCalendar).WithMany(p => p.HrLeaveStressDays)
                .HasForeignKey(d => d.ResourceCalendarId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_stress_day_resource_calendar_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_stress_day_write_uid_fkey");

            //entity.HasMany(d => d.HrDepartments).WithMany(p => p.HrLeaveStressDays)
            entity.HasMany<HrDepartment>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "HrDepartmentHrLeaveStressDayRel",
                    r => r.HasOne<HrDepartment>().WithMany()
                        .HasForeignKey("HrDepartmentId")
                        .HasConstraintName("hr_department_hr_leave_stress_day_rel_hr_department_id_fkey"),
                    l => l.HasOne<HrLeaveStressDay>().WithMany()
                        .HasForeignKey("HrLeaveStressDayId")
                        .HasConstraintName("hr_department_hr_leave_stress_day_r_hr_leave_stress_day_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrLeaveStressDayId", "HrDepartmentId").HasName("hr_department_hr_leave_stress_day_rel_pkey");
                        j.ToTable("hr_department_hr_leave_stress_day_rel");
                        j.HasIndex(new[] { "HrDepartmentId", "HrLeaveStressDayId" }, "hr_department_hr_leave_stress_hr_department_id_hr_leave_str_idx");
                    });
        });

        modelBuilder.Entity<HrLeaveType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_leave_type_pkey");

            entity.ToTable("hr_leave_type");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AllocationNotifSubtypeId).HasColumnName("allocation_notif_subtype_id");
            entity.Property(e => e.AllocationValidationType).HasColumnName("allocation_validation_type");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.ColorName).HasColumnName("color_name");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreateCalendarMeeting).HasColumnName("create_calendar_meeting");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.EmployeeRequests).HasColumnName("employee_requests");
            entity.Property(e => e.IconId).HasColumnName("icon_id");
            entity.Property(e => e.LeaveNotifSubtypeId).HasColumnName("leave_notif_subtype_id");
            entity.Property(e => e.LeaveValidationType).HasColumnName("leave_validation_type");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.OvertimeDeductible).HasColumnName("overtime_deductible");
            entity.Property(e => e.RequestUnit).HasColumnName("request_unit");
            entity.Property(e => e.RequiresAllocation).HasColumnName("requires_allocation");
            entity.Property(e => e.ResponsibleId).HasColumnName("responsible_id");
            entity.Property(e => e.Sequence)
                //.ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.SupportDocument).HasColumnName("support_document");
            entity.Property(e => e.TimeType).HasColumnName("time_type");
            entity.Property(e => e.Unpaid).HasColumnName("unpaid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AllocationNotifSubtype).WithMany(p => p.HrLeaveTypeAllocationNotifSubtypes)
                .HasForeignKey(d => d.AllocationNotifSubtypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_type_allocation_notif_subtype_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_type_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_type_create_uid_fkey");

            entity.HasOne(d => d.Icon).WithMany(p => p.HrLeaveTypes)
                .HasForeignKey(d => d.IconId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_type_icon_id_fkey");

            entity.HasOne(d => d.LeaveNotifSubtype).WithMany(p => p.HrLeaveTypeLeaveNotifSubtypes)
                .HasForeignKey(d => d.LeaveNotifSubtypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_type_leave_notif_subtype_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.ResponsibleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_type_responsible_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_leave_type_write_uid_fkey");
        });

        modelBuilder.Entity<HrPayrollStructureType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_payroll_structure_type_pkey");

            entity.ToTable("hr_payroll_structure_type");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CountryId).HasColumnName("country_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DefaultResourceCalendarId).HasColumnName("default_resource_calendar_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCountry>().WithMany()
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_payroll_structure_type_country_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_payroll_structure_type_create_uid_fkey");

            entity.HasOne(d => d.DefaultResourceCalendar).WithMany(p => p.HrPayrollStructureTypes)
                .HasForeignKey(d => d.DefaultResourceCalendarId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_payroll_structure_type_default_resource_calendar_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_payroll_structure_type_write_uid_fkey");
        });

        modelBuilder.Entity<HrPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_plan_pkey");

            entity.ToTable("hr_plan");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_create_uid_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.HrPlans)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_department_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_write_uid_fkey");
        });

        modelBuilder.Entity<HrPlanActivityType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_plan_activity_type_pkey");

            entity.ToTable("hr_plan_activity_type");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.ActivityTypeId).HasColumnName("activity_type_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.PlanId).HasColumnName("plan_id");
            entity.Property(e => e.Responsible).HasColumnName("responsible");
            entity.Property(e => e.ResponsibleId).HasColumnName("responsible_id");
            entity.Property(e => e.Summary).HasColumnName("summary");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.ActivityType).WithMany(p => p.HrPlanActivityTypes)
                .HasForeignKey(d => d.ActivityTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_plan_activity_type_activity_type_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_activity_type_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_activity_type_create_uid_fkey");

            entity.HasOne(d => d.Plan).WithMany(p => p.HrPlanActivityTypes)
                .HasForeignKey(d => d.PlanId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_activity_type_plan_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.ResponsibleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_activity_type_responsible_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_activity_type_write_uid_fkey");
        });

        modelBuilder.Entity<HrPlanWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_plan_wizard_pkey");

            entity.ToTable("hr_plan_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.PlanId).HasColumnName("plan_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_wizard_create_uid_fkey");

            entity.HasOne(d => d.Plan).WithMany(p => p.HrPlanWizards)
                .HasForeignKey(d => d.PlanId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_wizard_plan_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_plan_wizard_write_uid_fkey");

            //entity.HasMany(d => d.PlanWizards).WithMany(p => p.Employees)
            entity.HasMany<HrEmployee>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "HrEmployeeHrPlanWizardRel",
                    r => r.HasOne<HrEmployee>().WithMany()
                        .HasForeignKey("PlanWizardId")
                        .HasConstraintName("hr_employee_hr_plan_wizard_rel_plan_wizard_id_fkey"),
                    l => l.HasOne<HrPlanWizard>().WithMany()
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("hr_employee_hr_plan_wizard_rel_employee_id_fkey"),
                    j =>
                    {
                        j.HasKey("EmployeeId", "PlanWizardId").HasName("hr_employee_hr_plan_wizard_rel_pkey");
                        j.ToTable("hr_employee_hr_plan_wizard_rel");
                        j.HasIndex(new[] { "PlanWizardId", "EmployeeId" }, "hr_employee_hr_plan_wizard_rel_plan_wizard_id_employee_id_idx");
                    });
        });

        modelBuilder.Entity<HrRecruitmentDegree>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_recruitment_degree_pkey");

            entity.ToTable("hr_recruitment_degree");

            entity.HasIndex(e => e.Name, "hr_recruitment_degree_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                //.ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_recruitment_degree_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_recruitment_degree_write_uid_fkey");
        });

        modelBuilder.Entity<HrRecruitmentSource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_recruitment_source_pkey");

            entity.ToTable("hr_recruitment_source");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AliasId).HasColumnName("alias_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.JobId).HasColumnName("job_id");
            entity.Property(e => e.MediumId).HasColumnName("medium_id");
            entity.Property(e => e.SourceId).HasColumnName("source_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Alias).WithMany(p => p.HrRecruitmentSources)
                .HasForeignKey(d => d.AliasId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_recruitment_source_alias_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_recruitment_source_create_uid_fkey");

            entity.HasOne(d => d.Job).WithMany(p => p.HrRecruitmentSources)
                .HasForeignKey(d => d.JobId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("hr_recruitment_source_job_id_fkey");

            entity.HasOne(d => d.Medium).WithMany(p => p.HrRecruitmentSources)
                .HasForeignKey(d => d.MediumId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_recruitment_source_medium_id_fkey");

            entity.HasOne(d => d.Source).WithMany(p => p.HrRecruitmentSources)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_recruitment_source_source_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_recruitment_source_write_uid_fkey");
        });

        modelBuilder.Entity<HrRecruitmentStage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_recruitment_stage_pkey");

            entity.ToTable("hr_recruitment_stage");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Fold).HasColumnName("fold");
            entity.Property(e => e.HiredStage).HasColumnName("hired_stage");
            entity.Property(e => e.LegendBlocked)
                .HasColumnType("jsonb")
                .HasColumnName("legend_blocked");
            entity.Property(e => e.LegendDone)
                .HasColumnType("jsonb")
                .HasColumnName("legend_done");
            entity.Property(e => e.LegendNormal)
                .HasColumnType("jsonb")
                .HasColumnName("legend_normal");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Requirements).HasColumnName("requirements");
            entity.Property(e => e.Sequence)
                //.ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.TemplateId).HasColumnName("template_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_recruitment_stage_create_uid_fkey");

            entity.HasOne(d => d.Template).WithMany(p => p.HrRecruitmentStages)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_recruitment_stage_template_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_recruitment_stage_write_uid_fkey");

            //entity.HasMany(d => d.HrJobs).WithMany(p => p.HrRecruitmentStages)
            entity.HasMany<HrJob>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "HrJobHrRecruitmentStageRel",
                    r => r.HasOne<HrJob>().WithMany()
                        .HasForeignKey("HrJobId")
                        .HasConstraintName("hr_job_hr_recruitment_stage_rel_hr_job_id_fkey"),
                    l => l.HasOne<HrRecruitmentStage>().WithMany()
                        .HasForeignKey("HrRecruitmentStageId")
                        .HasConstraintName("hr_job_hr_recruitment_stage_rel_hr_recruitment_stage_id_fkey"),
                    j =>
                    {
                        j.HasKey("HrRecruitmentStageId", "HrJobId").HasName("hr_job_hr_recruitment_stage_rel_pkey");
                        j.ToTable("hr_job_hr_recruitment_stage_rel");
                        j.HasIndex(new[] { "HrJobId", "HrRecruitmentStageId" }, "hr_job_hr_recruitment_stage_r_hr_job_id_hr_recruitment_stag_idx");
                    });
        });

        modelBuilder.Entity<HrResumeLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_resume_line_pkey");

            entity.ToTable("hr_resume_line");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateEnd).HasColumnName("date_end");
            entity.Property(e => e.DateStart).HasColumnName("date_start");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.DisplayType).HasColumnName("display_type");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.LineTypeId).HasColumnName("line_type_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_resume_line_create_uid_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.HrResumeLines)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("hr_resume_line_employee_id_fkey");

            entity.HasOne(d => d.LineType).WithMany(p => p.HrResumeLines)
                .HasForeignKey(d => d.LineTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_resume_line_line_type_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_resume_line_write_uid_fkey");
        });

        modelBuilder.Entity<HrResumeLineType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_resume_line_type_pkey");

            entity.ToTable("hr_resume_line_type");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Sequence).HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_resume_line_type_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_resume_line_type_write_uid_fkey");
        });

        modelBuilder.Entity<HrSkill>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_skill_pkey");

            entity.ToTable("hr_skill");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Sequence).HasColumnName("sequence");
            entity.Property(e => e.SkillTypeId).HasColumnName("skill_type_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_skill_create_uid_fkey");

            entity.HasOne(d => d.SkillType).WithMany(p => p.HrSkills)
                .HasForeignKey(d => d.SkillTypeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("hr_skill_skill_type_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_skill_write_uid_fkey");
        });

        modelBuilder.Entity<HrSkillLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_skill_level_pkey");

            entity.ToTable("hr_skill_level");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DefaultLevel).HasColumnName("default_level");
            entity.Property(e => e.LevelProgress).HasColumnName("level_progress");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.SkillTypeId).HasColumnName("skill_type_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_skill_level_create_uid_fkey");

            entity.HasOne(d => d.SkillType).WithMany(p => p.HrSkillLevels)
                .HasForeignKey(d => d.SkillTypeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("hr_skill_level_skill_type_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_skill_level_write_uid_fkey");
        });

        modelBuilder.Entity<HrSkillType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_skill_type_pkey");

            entity.ToTable("hr_skill_type");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_skill_type_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_skill_type_write_uid_fkey");
        });

        modelBuilder.Entity<HrWorkLocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("hr_work_location_pkey");

            entity.ToTable("hr_work_location");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AddressId).HasColumnName("address_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LocationNumber).HasColumnName("location_number");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Address).WithMany(p => p.HrWorkLocations)
                .HasForeignKey(d => d.AddressId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_work_location_address_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("hr_work_location_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_work_location_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("hr_work_location_write_uid_fkey");
        });

        modelBuilder.Entity<IapAccount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("iap_account_pkey");

            entity.ToTable("iap_account");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountToken).HasColumnName("account_token");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ServiceName).HasColumnName("service_name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("iap_account_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("iap_account_write_uid_fkey");

            //entity.HasMany(d => d.ResCompanies).WithMany(p => p.IapAccounts)
            entity.HasMany<ResCompany>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "IapAccountResCompanyRel",
                    r => r.HasOne<ResCompany>().WithMany()
                        .HasForeignKey("ResCompanyId")
                        .HasConstraintName("iap_account_res_company_rel_res_company_id_fkey"),
                    l => l.HasOne<IapAccount>().WithMany()
                        .HasForeignKey("IapAccountId")
                        .HasConstraintName("iap_account_res_company_rel_iap_account_id_fkey"),
                    j =>
                    {
                        j.HasKey("IapAccountId", "ResCompanyId").HasName("iap_account_res_company_rel_pkey");
                        j.ToTable("iap_account_res_company_rel");
                        j.HasIndex(new[] { "ResCompanyId", "IapAccountId" }, "iap_account_res_company_rel_res_company_id_iap_account_id_idx");
                    });
        });

        modelBuilder.Entity<IrActClient>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_act_client_pkey");

            entity.ToTable("ir_act_client");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.BindingModelId).HasColumnName("binding_model_id");
            entity.Property(e => e.BindingType).HasColumnName("binding_type");
            entity.Property(e => e.BindingViewTypes).HasColumnName("binding_view_types");
            entity.Property(e => e.Context).HasColumnName("context");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Help)
                .HasColumnType("jsonb")
                .HasColumnName("help");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ParamsStore).HasColumnName("params_store");
            entity.Property(e => e.ResModel).HasColumnName("res_model");
            entity.Property(e => e.Tag).HasColumnName("tag");
            entity.Property(e => e.Target).HasColumnName("target");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.BindingModel).WithMany(p => p.IrActClients)
                .HasForeignKey(d => d.BindingModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_act_client_binding_model_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_client_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_client_write_uid_fkey");
        });

        modelBuilder.Entity<IrActReportXml>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_act_report_xml_pkey");

            entity.ToTable("ir_act_report_xml");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Attachment).HasColumnName("attachment");
            entity.Property(e => e.AttachmentUse).HasColumnName("attachment_use");
            entity.Property(e => e.BindingModelId).HasColumnName("binding_model_id");
            entity.Property(e => e.BindingType).HasColumnName("binding_type");
            entity.Property(e => e.BindingViewTypes).HasColumnName("binding_view_types");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Help)
                .HasColumnType("jsonb")
                .HasColumnName("help");
            entity.Property(e => e.Model).HasColumnName("model");
            entity.Property(e => e.Multi).HasColumnName("multi");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PaperformatId).HasColumnName("paperformat_id");
            entity.Property(e => e.PrintReportName)
                .HasColumnType("jsonb")
                .HasColumnName("print_report_name");
            entity.Property(e => e.ReportFile).HasColumnName("report_file");
            entity.Property(e => e.ReportName).HasColumnName("report_name");
            entity.Property(e => e.ReportType).HasColumnName("report_type");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.BindingModel).WithMany(p => p.IrActReportXmls)
                .HasForeignKey(d => d.BindingModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_act_report_xml_binding_model_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_report_xml_create_uid_fkey");

            entity.HasOne(d => d.Paperformat).WithMany(p => p.IrActReportXmls)
                .HasForeignKey(d => d.PaperformatId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_report_xml_paperformat_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_report_xml_write_uid_fkey");

            //entity.HasMany(d => d.Gids).WithMany(p => p.Uids)
            entity.HasMany<ResGroup>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ResGroupsReportRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("Gid")
                        .HasConstraintName("res_groups_report_rel_gid_fkey"),
                    l => l.HasOne<IrActReportXml>().WithMany()
                        .HasForeignKey("Uid")
                        .HasConstraintName("res_groups_report_rel_uid_fkey"),
                    j =>
                    {
                        j.HasKey("Uid", "Gid").HasName("res_groups_report_rel_pkey");
                        j.ToTable("res_groups_report_rel");
                        j.HasIndex(new[] { "Gid", "Uid" }, "res_groups_report_rel_gid_uid_idx");
                    });
        });

        modelBuilder.Entity<IrActServer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_act_server_pkey");

            entity.ToTable("ir_act_server");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.ActivityDateDeadlineRange).HasColumnName("activity_date_deadline_range");
            entity.Property(e => e.ActivityDateDeadlineRangeType).HasColumnName("activity_date_deadline_range_type");
            entity.Property(e => e.ActivityNote).HasColumnName("activity_note");
            entity.Property(e => e.ActivitySummary).HasColumnName("activity_summary");
            entity.Property(e => e.ActivityTypeId).HasColumnName("activity_type_id");
            entity.Property(e => e.ActivityUserFieldName).HasColumnName("activity_user_field_name");
            entity.Property(e => e.ActivityUserId).HasColumnName("activity_user_id");
            entity.Property(e => e.ActivityUserType).HasColumnName("activity_user_type");
            entity.Property(e => e.BindingModelId).HasColumnName("binding_model_id");
            entity.Property(e => e.BindingType).HasColumnName("binding_type");
            entity.Property(e => e.BindingViewTypes).HasColumnName("binding_view_types");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CrudModelId).HasColumnName("crud_model_id");
            entity.Property(e => e.Help)
                .HasColumnType("jsonb")
                .HasColumnName("help");
            entity.Property(e => e.LinkFieldId).HasColumnName("link_field_id");
            entity.Property(e => e.MailPostAutofollow).HasColumnName("mail_post_autofollow");
            entity.Property(e => e.MailPostMethod).HasColumnName("mail_post_method");
            entity.Property(e => e.ModelId).HasColumnName("model_id");
            entity.Property(e => e.ModelName).HasColumnName("model_name");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.SmsMethod).HasColumnName("sms_method");
            entity.Property(e => e.SmsTemplateId).HasColumnName("sms_template_id");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.TemplateId).HasColumnName("template_id");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.Usage).HasColumnName("usage");
            entity.Property(e => e.WebsitePath).HasColumnName("website_path");
            entity.Property(e => e.WebsitePublished).HasColumnName("website_published");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.ActivityType).WithMany(p => p.IrActServers)
                .HasForeignKey(d => d.ActivityTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ir_act_server_activity_type_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.ActivityUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_server_activity_user_id_fkey");

            entity.HasOne(d => d.BindingModel).WithMany(p => p.IrActServerBindingModels)
                .HasForeignKey(d => d.BindingModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_act_server_binding_model_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_server_create_uid_fkey");

            entity.HasOne(d => d.CrudModel).WithMany(p => p.IrActServerCrudModels)
                .HasForeignKey(d => d.CrudModelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_server_crud_model_id_fkey");

            entity.HasOne(d => d.LinkField).WithMany(p => p.IrActServers)
                .HasForeignKey(d => d.LinkFieldId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_server_link_field_id_fkey");

            entity.HasOne(d => d.Model).WithMany(p => p.IrActServerModels)
                .HasForeignKey(d => d.ModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_act_server_model_id_fkey");

            entity.HasOne(d => d.SmsTemplate).WithMany(p => p.IrActServers)
                .HasForeignKey(d => d.SmsTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_server_sms_template_id_fkey");

            entity.HasOne(d => d.Template).WithMany(p => p.IrActServers)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_server_template_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_server_write_uid_fkey");

            //entity.HasMany(d => d.Actions).WithMany(p => p.Servers)
            entity.HasMany<IrActServer>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "RelServerAction",
                    r => r.HasOne<IrActServer>().WithMany()
                        .HasForeignKey("ActionId")
                        .HasConstraintName("rel_server_actions_action_id_fkey"),
                    l => l.HasOne<IrActServer>().WithMany()
                        .HasForeignKey("ServerId")
                        .HasConstraintName("rel_server_actions_server_id_fkey"),
                    j =>
                    {
                        j.HasKey("ServerId", "ActionId").HasName("rel_server_actions_pkey");
                        j.ToTable("rel_server_actions");
                        j.HasIndex(new[] { "ActionId", "ServerId" }, "rel_server_actions_action_id_server_id_idx");
                    });

            //entity.HasMany(d => d.Gids).WithMany(p => p.Acts)
            entity.HasMany<ResGroup>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "IrActServerGroupRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("Gid")
                        .HasConstraintName("ir_act_server_group_rel_gid_fkey"),
                    l => l.HasOne<IrActServer>().WithMany()
                        .HasForeignKey("ActId")
                        .HasConstraintName("ir_act_server_group_rel_act_id_fkey"),
                    j =>
                    {
                        j.HasKey("ActId", "Gid").HasName("ir_act_server_group_rel_pkey");
                        j.ToTable("ir_act_server_group_rel");
                        j.HasIndex(new[] { "Gid", "ActId" }, "ir_act_server_group_rel_gid_act_id_idx");
                    });

            //entity.HasMany(d => d.ResPartners).WithMany(p => p.IrActServers)
            entity.HasMany<ResPartner>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "IrActServerResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("ir_act_server_res_partner_rel_res_partner_id_fkey"),
                    l => l.HasOne<IrActServer>().WithMany()
                        .HasForeignKey("IrActServerId")
                        .HasConstraintName("ir_act_server_res_partner_rel_ir_act_server_id_fkey"),
                    j =>
                    {
                        j.HasKey("IrActServerId", "ResPartnerId").HasName("ir_act_server_res_partner_rel_pkey");
                        j.ToTable("ir_act_server_res_partner_rel");
                        j.HasIndex(new[] { "ResPartnerId", "IrActServerId" }, "ir_act_server_res_partner_rel_res_partner_id_ir_act_server__idx");
                    });

            //entity.HasMany(d => d.Servers).WithMany(p => p.Actions)
            entity.HasMany<IrActServer>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "RelServerAction",
                    r => r.HasOne<IrActServer>().WithMany()
                        .HasForeignKey("ServerId")
                        .HasConstraintName("rel_server_actions_server_id_fkey"),
                    l => l.HasOne<IrActServer>().WithMany()
                        .HasForeignKey("ActionId")
                        .HasConstraintName("rel_server_actions_action_id_fkey"),
                    j =>
                    {
                        j.HasKey("ServerId", "ActionId").HasName("rel_server_actions_pkey");
                        j.ToTable("rel_server_actions");
                        j.HasIndex(new[] { "ActionId", "ServerId" }, "rel_server_actions_action_id_server_id_idx");
                    });
        });

        modelBuilder.Entity<IrActUrl>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_act_url_pkey");

            entity.ToTable("ir_act_url");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.BindingModelId).HasColumnName("binding_model_id");
            entity.Property(e => e.BindingType).HasColumnName("binding_type");
            entity.Property(e => e.BindingViewTypes).HasColumnName("binding_view_types");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Help)
                .HasColumnType("jsonb")
                .HasColumnName("help");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Target).HasColumnName("target");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.Url).HasColumnName("url");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.BindingModel).WithMany(p => p.IrActUrls)
                .HasForeignKey(d => d.BindingModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_act_url_binding_model_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_url_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_url_write_uid_fkey");
        });

        modelBuilder.Entity<IrActWindow>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_act_window_pkey");

            entity.ToTable("ir_act_window");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.BindingModelId).HasColumnName("binding_model_id");
            entity.Property(e => e.BindingType).HasColumnName("binding_type");
            entity.Property(e => e.BindingViewTypes).HasColumnName("binding_view_types");
            entity.Property(e => e.Context).HasColumnName("context");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Domain).HasColumnName("domain");
            entity.Property(e => e.Filter).HasColumnName("filter");
            entity.Property(e => e.Help)
                .HasColumnType("jsonb")
                .HasColumnName("help");
            entity.Property(e => e.Limit).HasColumnName("limit");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ResId).HasColumnName("res_id");
            entity.Property(e => e.ResModel).HasColumnName("res_model");
            entity.Property(e => e.SearchViewId).HasColumnName("search_view_id");
            entity.Property(e => e.Target).HasColumnName("target");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.Usage).HasColumnName("usage");
            entity.Property(e => e.ViewId).HasColumnName("view_id");
            entity.Property(e => e.ViewMode).HasColumnName("view_mode");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.BindingModel).WithMany(p => p.IrActWindows)
                .HasForeignKey(d => d.BindingModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_act_window_binding_model_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_window_create_uid_fkey");

            entity.HasOne(d => d.SearchView).WithMany(p => p.IrActWindowSearchViews)
                .HasForeignKey(d => d.SearchViewId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_window_search_view_id_fkey");

            entity.HasOne(d => d.View).WithMany(p => p.IrActWindowViews)
                .HasForeignKey(d => d.ViewId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_window_view_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_window_write_uid_fkey");

            //entity.HasMany(d => d.Gids).WithMany(p => p.ActsNavigation)
            entity.HasMany<ResGroup>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "IrActWindowGroupRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("Gid")
                        .HasConstraintName("ir_act_window_group_rel_gid_fkey"),
                    l => l.HasOne<IrActWindow>().WithMany()
                        .HasForeignKey("ActId")
                        .HasConstraintName("ir_act_window_group_rel_act_id_fkey"),
                    j =>
                    {
                        j.HasKey("ActId", "Gid").HasName("ir_act_window_group_rel_pkey");
                        j.ToTable("ir_act_window_group_rel");
                        j.HasIndex(new[] { "Gid", "ActId" }, "ir_act_window_group_rel_gid_act_id_idx");
                    });
        });

        modelBuilder.Entity<IrActWindowView>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_act_window_view_pkey");

            entity.ToTable("ir_act_window_view");

            entity.HasIndex(e => new { e.ActWindowId, e.ViewMode }, "act_window_view_unique_mode_per_action").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.ActWindowId).HasColumnName("act_window_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Multi).HasColumnName("multi");
            entity.Property(e => e.Sequence).HasColumnName("sequence");
            entity.Property(e => e.ViewId).HasColumnName("view_id");
            entity.Property(e => e.ViewMode).HasColumnName("view_mode");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.ActWindow).WithMany(p => p.IrActWindowViews)
                .HasForeignKey(d => d.ActWindowId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_act_window_view_act_window_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_window_view_create_uid_fkey");

            entity.HasOne(d => d.View).WithMany(p => p.IrActWindowViewsNavigation)
                .HasForeignKey(d => d.ViewId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_window_view_view_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_act_window_view_write_uid_fkey");
        });

        modelBuilder.Entity<IrAction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_actions_pkey");

            entity.ToTable("ir_actions");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.BindingModelId).HasColumnName("binding_model_id");
            entity.Property(e => e.BindingType).HasColumnName("binding_type");
            entity.Property(e => e.BindingViewTypes).HasColumnName("binding_view_types");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Help)
                .HasColumnType("jsonb")
                .HasColumnName("help");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.BindingModel).WithMany(p => p.IrActions)
                .HasForeignKey(d => d.BindingModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_actions_binding_model_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_actions_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_actions_write_uid_fkey");
        });

        modelBuilder.Entity<IrActionsTodo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_actions_todo_pkey");

            entity.ToTable("ir_actions_todo");

            entity.HasIndex(e => e.ActionId, "ir_actions_todo_action_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.ActionId).HasColumnName("action_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_actions_todo_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_actions_todo_write_uid_fkey");
        });

        modelBuilder.Entity<IrAsset>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_asset_pkey");

            entity.ToTable("ir_asset");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Bundle).HasColumnName("bundle");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Directive).HasColumnName("directive");
            entity.Property(e => e.Key).HasColumnName("key");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Path).HasColumnName("path");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.Target).HasColumnName("target");
            entity.Property(e => e.ThemeTemplateId).HasColumnName("theme_template_id");
            entity.Property(e => e.WebsiteId).HasColumnName("website_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_asset_create_uid_fkey");

            entity.HasOne(d => d.ThemeTemplate).WithMany(p => p.IrAssets)
                .HasForeignKey(d => d.ThemeTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_asset_theme_template_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.IrAssets)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_asset_website_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_asset_write_uid_fkey");
        });

        modelBuilder.Entity<IrAttachment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_attachment_pkey");

            entity.ToTable("ir_attachment");

            entity.HasIndex(e => e.Checksum, "ir_attachment_checksum_index");

            entity.HasIndex(e => new { e.ResModel, e.ResId }, "ir_attachment_res_idx");

            entity.HasIndex(e => e.StoreFname, "ir_attachment_store_fname_index");

            entity.HasIndex(e => e.Url, "ir_attachment_url_index").HasFilter("(url IS NOT NULL)");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccessToken).HasColumnName("access_token");
            entity.Property(e => e.Checksum).HasColumnName("checksum");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DbDatas).HasColumnName("db_datas");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.FileSize).HasColumnName("file_size");
            entity.Property(e => e.IndexContent).HasColumnName("index_content");
            entity.Property(e => e.Key).HasColumnName("key");
            entity.Property(e => e.Mimetype).HasColumnName("mimetype");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OriginalId).HasColumnName("original_id");
            entity.Property(e => e.Public).HasColumnName("public");
            entity.Property(e => e.ResField).HasColumnName("res_field");
            entity.Property(e => e.ResId).HasColumnName("res_id");
            entity.Property(e => e.ResModel).HasColumnName("res_model");
            entity.Property(e => e.StoreFname).HasColumnName("store_fname");
            entity.Property(e => e.ThemeTemplateId).HasColumnName("theme_template_id");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.Url).HasColumnName("url");
            entity.Property(e => e.WebsiteId).HasColumnName("website_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_attachment_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_attachment_create_uid_fkey");

            entity.HasOne(d => d.Original).WithMany(p => p.InverseOriginal)
                .HasForeignKey(d => d.OriginalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_attachment_original_id_fkey");

            entity.HasOne(d => d.ThemeTemplate).WithMany(p => p.IrAttachments)
                .HasForeignKey(d => d.ThemeTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_attachment_theme_template_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.IrAttachments)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_attachment_website_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_attachment_write_uid_fkey");
        });

        modelBuilder.Entity<IrConfigParameter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_config_parameter_pkey");

            entity.ToTable("ir_config_parameter");

            entity.HasIndex(e => e.Key, "ir_config_parameter_key_uniq").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Key).HasColumnName("key");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_config_parameter_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_config_parameter_write_uid_fkey");
        });

        modelBuilder.Entity<IrCron>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_cron_pkey");

            entity.ToTable("ir_cron");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CronName)
                .HasColumnType("jsonb")
                .HasColumnName("cron_name");
            entity.Property(e => e.Doall).HasColumnName("doall");
            entity.Property(e => e.IntervalNumber).HasColumnName("interval_number");
            entity.Property(e => e.IntervalType).HasColumnName("interval_type");
            entity.Property(e => e.IrActionsServerId).HasColumnName("ir_actions_server_id");
            entity.Property(e => e.Lastcall)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("lastcall");
            entity.Property(e => e.Nextcall)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("nextcall");
            entity.Property(e => e.Numbercall).HasColumnName("numbercall");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_cron_create_uid_fkey");

            entity.HasOne(d => d.IrActionsServer).WithMany(p => p.IrCrons)
                .HasForeignKey(d => d.IrActionsServerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ir_cron_ir_actions_server_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ir_cron_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_cron_write_uid_fkey");
        });

        modelBuilder.Entity<IrCronTrigger>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_cron_trigger_pkey");

            entity.ToTable("ir_cron_trigger");

            entity.HasIndex(e => e.CronId, "ir_cron_trigger_cron_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CallAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("call_at");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CronId).HasColumnName("cron_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_cron_trigger_create_uid_fkey");

            entity.HasOne(d => d.Cron).WithMany(p => p.IrCronTriggers)
                .HasForeignKey(d => d.CronId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_cron_trigger_cron_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_cron_trigger_write_uid_fkey");
        });

        modelBuilder.Entity<IrDefault>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_default_pkey");

            entity.ToTable("ir_default");

            entity.HasIndex(e => e.TenantId, "ir_default_company_id_index");

            entity.HasIndex(e => e.FieldId, "ir_default_field_id_index");

            entity.HasIndex(e => e.UserId, "ir_default_user_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.Condition).HasColumnName("condition");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.FieldId).HasColumnName("field_id");
            entity.Property(e => e.JsonValue).HasColumnName("json_value");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_default_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_default_create_uid_fkey");

            entity.HasOne(d => d.Field).WithMany(p => p.IrDefaults)
                .HasForeignKey(d => d.FieldId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_default_field_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_default_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_default_write_uid_fkey");
        });

        modelBuilder.Entity<IrDemo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_demo_pkey");

            entity.ToTable("ir_demo");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_demo_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_demo_write_uid_fkey");
        });

        modelBuilder.Entity<IrDemoFailure>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_demo_failure_pkey");

            entity.ToTable("ir_demo_failure");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Error).HasColumnName("error");
            entity.Property(e => e.ModuleId).HasColumnName("module_id");
            entity.Property(e => e.WizardId).HasColumnName("wizard_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_demo_failure_create_uid_fkey");

            entity.HasOne(d => d.Module).WithMany(p => p.IrDemoFailures)
                .HasForeignKey(d => d.ModuleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_demo_failure_module_id_fkey");

            entity.HasOne(d => d.Wizard).WithMany(p => p.IrDemoFailures)
                .HasForeignKey(d => d.WizardId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_demo_failure_wizard_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_demo_failure_write_uid_fkey");
        });

        modelBuilder.Entity<IrDemoFailureWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_demo_failure_wizard_pkey");

            entity.ToTable("ir_demo_failure_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_demo_failure_wizard_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_demo_failure_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<IrExport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_exports_pkey");

            entity.ToTable("ir_exports");

            entity.HasIndex(e => e.Resource, "ir_exports_resource_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Resource).HasColumnName("resource");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_exports_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_exports_write_uid_fkey");
        });

        modelBuilder.Entity<IrExportsLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_exports_line_pkey");

            entity.ToTable("ir_exports_line");

            entity.HasIndex(e => e.ExportId, "ir_exports_line_export_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ExportId).HasColumnName("export_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_exports_line_create_uid_fkey");

            entity.HasOne(d => d.Export).WithMany(p => p.IrExportsLines)
                .HasForeignKey(d => d.ExportId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_exports_line_export_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_exports_line_write_uid_fkey");
        });

        modelBuilder.Entity<IrFilter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_filters_pkey");

            entity.ToTable("ir_filters");

            entity.HasIndex(e => new { e.ModelId, e.UserId, e.ActionId, e.Name }, "ir_filters_name_model_uid_unique").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.ActionId).HasColumnName("action_id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Context).HasColumnName("context");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Domain).HasColumnName("domain");
            entity.Property(e => e.IsDefault).HasColumnName("is_default");
            entity.Property(e => e.ModelId).HasColumnName("model_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Sort).HasColumnName("sort");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_filters_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_filters_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_filters_write_uid_fkey");
        });

        modelBuilder.Entity<IrLogging>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_logging_pkey");

            entity.ToTable("ir_logging");

            entity.HasIndex(e => e.Dbname, "ir_logging_dbname_index");

            entity.HasIndex(e => e.Level, "ir_logging_level_index");

            entity.HasIndex(e => e.Type, "ir_logging_type_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Dbname).HasColumnName("dbname");
            entity.Property(e => e.Func).HasColumnName("func");
            entity.Property(e => e.Level).HasColumnName("level");
            entity.Property(e => e.Line).HasColumnName("line");
            entity.Property(e => e.Message).HasColumnName("message");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Path).HasColumnName("path");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");
        });

        modelBuilder.Entity<IrMailServer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_mail_server_pkey");

            entity.ToTable("ir_mail_server");

            entity.HasIndex(e => e.Name, "ir_mail_server_name_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.FromFilter).HasColumnName("from_filter");
            entity.Property(e => e.GoogleGmailAccessToken).HasColumnName("google_gmail_access_token");
            entity.Property(e => e.GoogleGmailAccessTokenExpiration).HasColumnName("google_gmail_access_token_expiration");
            entity.Property(e => e.GoogleGmailAuthorizationCode).HasColumnName("google_gmail_authorization_code");
            entity.Property(e => e.GoogleGmailRefreshToken).HasColumnName("google_gmail_refresh_token");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.SmtpAuthentication).HasColumnName("smtp_authentication");
            entity.Property(e => e.SmtpDebug).HasColumnName("smtp_debug");
            entity.Property(e => e.SmtpEncryption).HasColumnName("smtp_encryption");
            entity.Property(e => e.SmtpHost).HasColumnName("smtp_host");
            entity.Property(e => e.SmtpPass).HasColumnName("smtp_pass");
            entity.Property(e => e.SmtpPort).HasColumnName("smtp_port");
            entity.Property(e => e.SmtpSslCertificate).HasColumnName("smtp_ssl_certificate");
            entity.Property(e => e.SmtpSslPrivateKey).HasColumnName("smtp_ssl_private_key");
            entity.Property(e => e.SmtpUser).HasColumnName("smtp_user");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_mail_server_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_mail_server_write_uid_fkey");
        });

        modelBuilder.Entity<IrModel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_model_pkey");

            entity.ToTable("ir_model");

            entity.HasIndex(e => e.Model, "ir_model_obj_name_uniq").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Info).HasColumnName("info");
            entity.Property(e => e.IsMailActivity).HasColumnName("is_mail_activity");
            entity.Property(e => e.IsMailBlacklist).HasColumnName("is_mail_blacklist");
            entity.Property(e => e.IsMailThread).HasColumnName("is_mail_thread");
            entity.Property(e => e.Model).HasColumnName("model");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Order).HasColumnName("order");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.Transient).HasColumnName("transient");
            entity.Property(e => e.WebsiteFormAccess).HasColumnName("website_form_access");
            entity.Property(e => e.WebsiteFormDefaultFieldId).HasColumnName("website_form_default_field_id");
            entity.Property(e => e.WebsiteFormKey).HasColumnName("website_form_key");
            entity.Property(e => e.WebsiteFormLabel).HasColumnName("website_form_label");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_create_uid_fkey");

            entity.HasOne(d => d.WebsiteFormDefaultField).WithMany(p => p.IrModels)
                .HasForeignKey(d => d.WebsiteFormDefaultFieldId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_website_form_default_field_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_write_uid_fkey");
        });

        modelBuilder.Entity<IrModelAccess>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_model_access_pkey");

            entity.ToTable("ir_model_access");

            entity.HasIndex(e => e.GroupId, "ir_model_access_group_id_index");

            entity.HasIndex(e => e.ModelId, "ir_model_access_model_id_index");

            entity.HasIndex(e => e.Name, "ir_model_access_name_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.ModelId).HasColumnName("model_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PermCreate).HasColumnName("perm_create");
            entity.Property(e => e.PermRead).HasColumnName("perm_read");
            entity.Property(e => e.PermUnlink).HasColumnName("perm_unlink");
            entity.Property(e => e.PermWrite).HasColumnName("perm_write");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_access_create_uid_fkey");

            entity.HasOne(d => d.Group).WithMany(p => p.IrModelAccesses)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ir_model_access_group_id_fkey");

            entity.HasOne(d => d.Model).WithMany(p => p.IrModelAccesses)
                .HasForeignKey(d => d.ModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_model_access_model_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_access_write_uid_fkey");
        });

        modelBuilder.Entity<IrModelConstraint>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_model_constraint_pkey");

            entity.ToTable("ir_model_constraint");

            entity.HasIndex(e => e.Model, "ir_model_constraint_model_index");

            entity.HasIndex(e => e.Module, "ir_model_constraint_module_index");

            entity.HasIndex(e => new { e.Name, e.Module }, "ir_model_constraint_module_name_uniq").IsUnique();

            entity.HasIndex(e => e.Name, "ir_model_constraint_name_index");

            entity.HasIndex(e => e.Type, "ir_model_constraint_type_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Definition).HasColumnName("definition");
            entity.Property(e => e.Message)
                .HasColumnType("jsonb")
                .HasColumnName("message");
            entity.Property(e => e.Model).HasColumnName("model");
            entity.Property(e => e.Module).HasColumnName("module");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_constraint_create_uid_fkey");

            entity.HasOne(d => d.ModelNavigation).WithMany(p => p.IrModelConstraints)
                .HasForeignKey(d => d.Model)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_model_constraint_model_fkey");

            entity.HasOne(d => d.ModuleNavigation).WithMany(p => p.IrModelConstraints)
                .HasForeignKey(d => d.Module)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_model_constraint_module_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_constraint_write_uid_fkey");
        });

        modelBuilder.Entity<IrModelDatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_model_data_pkey");

            entity.ToTable("ir_model_data");

            entity.HasIndex(e => new { e.Model, e.ResId }, "ir_model_data_model_res_id_index");

            entity.HasIndex(e => new { e.Module, e.Name }, "ir_model_data_module_name_uniq_index").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasDefaultValueSql("(now() AT TIME ZONE 'UTC'::text)")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Model).HasColumnName("model");
            entity.Property(e => e.Module).HasColumnName("module");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Noupdate)
                .HasDefaultValueSql("false")
                .HasColumnName("noupdate");
            entity.Property(e => e.ResId).HasColumnName("res_id");
            entity.Property(e => e.LastModificationTime)
                .HasDefaultValueSql("(now() AT TIME ZONE 'UTC'::text)")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_data_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_data_write_uid_fkey");
        });

        modelBuilder.Entity<IrModelField>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_model_fields_pkey");

            entity.ToTable("ir_model_fields");

            entity.HasIndex(e => e.CompleteName, "ir_model_fields_complete_name_index");

            entity.HasIndex(e => e.ModelId, "ir_model_fields_model_id_index");

            entity.HasIndex(e => e.Model, "ir_model_fields_model_index");

            entity.HasIndex(e => e.Name, "ir_model_fields_name_index");

            entity.HasIndex(e => new { e.Model, e.Name }, "ir_model_fields_name_unique").IsUnique();

            entity.HasIndex(e => e.State, "ir_model_fields_state_index");

            entity.HasIndex(e => e.WebsiteFormBlacklisted, "ir_model_fields_website_form_blacklisted_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Column1).HasColumnName("column1");
            entity.Property(e => e.Column2).HasColumnName("column2");
            entity.Property(e => e.CompleteName).HasColumnName("complete_name");
            entity.Property(e => e.Compute).HasColumnName("compute");
            entity.Property(e => e.Copied).HasColumnName("copied");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Depends).HasColumnName("depends");
            entity.Property(e => e.Domain).HasColumnName("domain");
            entity.Property(e => e.FieldDescription)
                .HasColumnType("jsonb")
                .HasColumnName("field_description");
            entity.Property(e => e.GroupExpand).HasColumnName("group_expand");
            entity.Property(e => e.Help)
                .HasColumnType("jsonb")
                .HasColumnName("help");
            entity.Property(e => e.Index).HasColumnName("index");
            entity.Property(e => e.Model).HasColumnName("model");
            entity.Property(e => e.ModelId).HasColumnName("model_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OnDelete).HasColumnName("on_delete");
            entity.Property(e => e.Readonly).HasColumnName("readonly");
            entity.Property(e => e.Related).HasColumnName("related");
            entity.Property(e => e.RelatedFieldId).HasColumnName("related_field_id");
            entity.Property(e => e.Relation).HasColumnName("relation");
            entity.Property(e => e.RelationField).HasColumnName("relation_field");
            entity.Property(e => e.RelationFieldId).HasColumnName("relation_field_id");
            entity.Property(e => e.RelationTable).HasColumnName("relation_table");
            entity.Property(e => e.Required).HasColumnName("required");
            entity.Property(e => e.Selectable).HasColumnName("selectable");
            entity.Property(e => e.Size).HasColumnName("size");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.Store).HasColumnName("store");
            entity.Property(e => e.Tracking).HasColumnName("tracking");
            entity.Property(e => e.Translate).HasColumnName("translate");
            entity.Property(e => e.Ttype).HasColumnName("ttype");
            entity.Property(e => e.WebsiteFormBlacklisted)
                .HasDefaultValueSql("true")
                .HasColumnName("website_form_blacklisted");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_fields_create_uid_fkey");

            entity.HasOne(d => d.ModelNavigation).WithMany(p => p.IrModelFields)
                .HasForeignKey(d => d.ModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_model_fields_model_id_fkey");

            entity.HasOne(d => d.RelatedField).WithMany(p => p.InverseRelatedField)
                .HasForeignKey(d => d.RelatedFieldId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_model_fields_related_field_id_fkey");

            entity.HasOne(d => d.RelationFieldNavigation).WithMany(p => p.InverseRelationFieldNavigation)
                .HasForeignKey(d => d.RelationFieldId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_model_fields_relation_field_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_fields_write_uid_fkey");

            //entity.HasMany(d => d.Groups).WithMany(p => p.Fields)
            entity.HasMany<ResGroup>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "IrModelFieldsGroupRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("ir_model_fields_group_rel_group_id_fkey"),
                    l => l.HasOne<IrModelField>().WithMany()
                        .HasForeignKey("FieldId")
                        .HasConstraintName("ir_model_fields_group_rel_field_id_fkey"),
                    j =>
                    {
                        j.HasKey("FieldId", "GroupId").HasName("ir_model_fields_group_rel_pkey");
                        j.ToTable("ir_model_fields_group_rel");
                        j.HasIndex(new[] { "GroupId", "FieldId" }, "ir_model_fields_group_rel_group_id_field_id_idx");
                    });
        });

        modelBuilder.Entity<IrModelFieldsSelection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_model_fields_selection_pkey");

            entity.ToTable("ir_model_fields_selection");

            entity.HasIndex(e => e.FieldId, "ir_model_fields_selection_field_id_index");

            entity.HasIndex(e => new { e.FieldId, e.Value }, "ir_model_fields_selection_selection_field_uniq").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.FieldId).HasColumnName("field_id");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_fields_selection_create_uid_fkey");

            entity.HasOne(d => d.Field).WithMany(p => p.IrModelFieldsSelections)
                .HasForeignKey(d => d.FieldId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_model_fields_selection_field_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_fields_selection_write_uid_fkey");
        });

        modelBuilder.Entity<IrModelRelation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_model_relation_pkey");

            entity.ToTable("ir_model_relation");

            entity.HasIndex(e => e.Model, "ir_model_relation_model_index");

            entity.HasIndex(e => e.Module, "ir_model_relation_module_index");

            entity.HasIndex(e => e.Name, "ir_model_relation_name_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Model).HasColumnName("model");
            entity.Property(e => e.Module).HasColumnName("module");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_relation_create_uid_fkey");

            entity.HasOne(d => d.ModelNavigation).WithMany(p => p.IrModelRelations)
                .HasForeignKey(d => d.Model)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_model_relation_model_fkey");

            entity.HasOne(d => d.ModuleNavigation).WithMany(p => p.IrModelRelations)
                .HasForeignKey(d => d.Module)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_model_relation_module_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_model_relation_write_uid_fkey");
        });

        modelBuilder.Entity<IrModuleCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_module_category_pkey");

            entity.ToTable("ir_module_category");

            entity.HasIndex(e => e.ParentId, "ir_module_category_parent_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.Exclusive).HasColumnName("exclusive");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Sequence).HasColumnName("sequence");
            entity.Property(e => e.Visible).HasColumnName("visible");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_module_category_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_module_category_parent_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_module_category_write_uid_fkey");
        });

        modelBuilder.Entity<IrModuleModule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_module_module_pkey");

            entity.ToTable("ir_module_module");

            entity.HasIndex(e => e.CategoryId, "ir_module_module_category_id_index");

            entity.HasIndex(e => e.Name, "ir_module_module_name_uniq").IsUnique();

            entity.HasIndex(e => e.State, "ir_module_module_state_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Application)
                .HasDefaultValueSql("false")
                .HasColumnName("application");
            entity.Property(e => e.Author).HasColumnName("author");
            entity.Property(e => e.AutoInstall)
                .HasDefaultValueSql("false")
                .HasColumnName("auto_install");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.Contributors).HasColumnName("contributors");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Demo)
                .HasDefaultValueSql("false")
                .HasColumnName("demo");
            entity.Property(e => e.Description)
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.Icon).HasColumnName("icon");
            entity.Property(e => e.LatestVersion).HasColumnName("latest_version");
            entity.Property(e => e.License).HasColumnName("license");
            entity.Property(e => e.Maintainer).HasColumnName("maintainer");
            entity.Property(e => e.MenusByModule).HasColumnName("menus_by_module");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PublishedVersion).HasColumnName("published_version");
            entity.Property(e => e.ReportsByModule).HasColumnName("reports_by_module");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.Shortdesc)
                .HasColumnType("jsonb")
                .HasColumnName("shortdesc");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.Summary)
                .HasColumnType("jsonb")
                .HasColumnName("summary");
            entity.Property(e => e.ToBuy)
                .HasDefaultValueSql("false")
                .HasColumnName("to_buy");
            entity.Property(e => e.Url).HasColumnName("url");
            entity.Property(e => e.ViewsByModule).HasColumnName("views_by_module");
            entity.Property(e => e.Web)
                .HasDefaultValueSql("false")
                .HasColumnName("web");
            entity.Property(e => e.Website).HasColumnName("website");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Category).WithMany(p => p.IrModuleModules)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_module_module_category_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_module_module_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_module_module_write_uid_fkey");
        });

        modelBuilder.Entity<IrModuleModuleDependency>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_module_module_dependency_pkey");

            entity.ToTable("ir_module_module_dependency");

            entity.HasIndex(e => e.Name, "ir_module_module_dependency_name_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AutoInstallRequired)
                .HasDefaultValueSql("true")
                .HasColumnName("auto_install_required");
            entity.Property(e => e.ModuleId).HasColumnName("module_id");
            entity.Property(e => e.Name).HasColumnName("name");

            entity.HasOne(d => d.Module).WithMany(p => p.IrModuleModuleDependencies)
                .HasForeignKey(d => d.ModuleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_module_module_dependency_module_id_fkey");
        });

        modelBuilder.Entity<IrModuleModuleExclusion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_module_module_exclusion_pkey");

            entity.ToTable("ir_module_module_exclusion");

            entity.HasIndex(e => e.Name, "ir_module_module_exclusion_name_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ModuleId).HasColumnName("module_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_module_module_exclusion_create_uid_fkey");

            entity.HasOne(d => d.Module).WithMany(p => p.IrModuleModuleExclusions)
                .HasForeignKey(d => d.ModuleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_module_module_exclusion_module_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_module_module_exclusion_write_uid_fkey");
        });

        modelBuilder.Entity<IrProfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_profile_pkey");

            entity.ToTable("ir_profile");

            entity.HasIndex(e => e.Session, "ir_profile_session_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.EntryCount).HasColumnName("entry_count");
            entity.Property(e => e.InitStackTrace).HasColumnName("init_stack_trace");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Qweb).HasColumnName("qweb");
            entity.Property(e => e.Session).HasColumnName("session");
            entity.Property(e => e.Sql).HasColumnName("sql");
            entity.Property(e => e.SqlCount).HasColumnName("sql_count");
            entity.Property(e => e.TracesAsync).HasColumnName("traces_async");
            entity.Property(e => e.TracesSync).HasColumnName("traces_sync");
        });

        modelBuilder.Entity<IrProperty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_property_pkey");

            entity.ToTable("ir_property");

            entity.HasIndex(e => e.TenantId, "ir_property_company_id_index");

            entity.HasIndex(e => e.Name, "ir_property_name_index");

            entity.HasIndex(e => e.ResId, "ir_property_res_id_index");

            entity.HasIndex(e => e.Type, "ir_property_type_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.FieldsId).HasColumnName("fields_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.ResId).HasColumnName("res_id");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.ValueBinary).HasColumnName("value_binary");
            entity.Property(e => e.ValueDatetime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("value_datetime");
            entity.Property(e => e.ValueFloat).HasColumnName("value_float");
            entity.Property(e => e.ValueInteger).HasColumnName("value_integer");
            entity.Property(e => e.ValueReference).HasColumnName("value_reference");
            entity.Property(e => e.ValueText).HasColumnName("value_text");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_property_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_property_create_uid_fkey");

            entity.HasOne(d => d.Fields).WithMany(p => p.IrProperties)
                .HasForeignKey(d => d.FieldsId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_property_fields_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_property_write_uid_fkey");
        });

        modelBuilder.Entity<IrRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_rule_pkey");

            entity.ToTable("ir_rule");

            entity.HasIndex(e => e.ModelId, "ir_rule_model_id_index");

            entity.HasIndex(e => e.Name, "ir_rule_name_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DomainForce).HasColumnName("domain_force");
            entity.Property(e => e.Global).HasColumnName("global");
            entity.Property(e => e.ModelId).HasColumnName("model_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PermCreate).HasColumnName("perm_create");
            entity.Property(e => e.PermRead).HasColumnName("perm_read");
            entity.Property(e => e.PermUnlink).HasColumnName("perm_unlink");
            entity.Property(e => e.PermWrite).HasColumnName("perm_write");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_rule_create_uid_fkey");

            entity.HasOne(d => d.Model).WithMany(p => p.IrRules)
                .HasForeignKey(d => d.ModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_rule_model_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_rule_write_uid_fkey");

            //entity.HasMany(d => d.Groups).WithMany(p => p.RuleGroups)
            entity.HasMany<ResGroup>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "RuleGroupRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("rule_group_rel_group_id_fkey"),
                    l => l.HasOne<IrRule>().WithMany()
                        .HasForeignKey("RuleGroupId")
                        .HasConstraintName("rule_group_rel_rule_group_id_fkey"),
                    j =>
                    {
                        j.HasKey("RuleGroupId", "GroupId").HasName("rule_group_rel_pkey");
                        j.ToTable("rule_group_rel");
                        j.HasIndex(new[] { "GroupId", "RuleGroupId" }, "rule_group_rel_group_id_rule_group_id_idx");
                    });
        });

        modelBuilder.Entity<IrSequence>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_sequence_pkey");

            entity.ToTable("ir_sequence");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Implementation).HasColumnName("implementation");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.NumberIncrement).HasColumnName("number_increment");
            entity.Property(e => e.NumberNext).HasColumnName("number_next");
            entity.Property(e => e.Padding).HasColumnName("padding");
            entity.Property(e => e.Prefix).HasColumnName("prefix");
            entity.Property(e => e.Suffix).HasColumnName("suffix");
            entity.Property(e => e.UseDateRange).HasColumnName("use_date_range");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_sequence_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_sequence_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_sequence_write_uid_fkey");
        });

        modelBuilder.Entity<IrSequenceDateRange>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_sequence_date_range_pkey");

            entity.ToTable("ir_sequence_date_range");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.NumberNext).HasColumnName("number_next");
            entity.Property(e => e.SequenceId).HasColumnName("sequence_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_sequence_date_range_create_uid_fkey");

            entity.HasOne(d => d.Sequence).WithMany(p => p.IrSequenceDateRanges)
                .HasForeignKey(d => d.SequenceId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_sequence_date_range_sequence_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_sequence_date_range_write_uid_fkey");
        });

        modelBuilder.Entity<IrServerObjectLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_server_object_lines_pkey");

            entity.ToTable("ir_server_object_lines");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Col1).HasColumnName("col1");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.EvaluationType).HasColumnName("evaluation_type");
            entity.Property(e => e.ServerId).HasColumnName("server_id");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Col1Navigation).WithMany(p => p.IrServerObjectLines)
                .HasForeignKey(d => d.Col1)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_server_object_lines_col1_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_server_object_lines_create_uid_fkey");

            entity.HasOne(d => d.Server).WithMany(p => p.IrServerObjectLines)
                .HasForeignKey(d => d.ServerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_server_object_lines_server_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_server_object_lines_write_uid_fkey");
        });

        modelBuilder.Entity<IrUiMenu>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_ui_menu_pkey");

            entity.ToTable("ir_ui_menu");

            entity.HasIndex(e => e.ParentId, "ir_ui_menu_parent_id_index");

            entity.HasIndex(e => e.ParentPath, "ir_ui_menu_parent_path_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Action).HasColumnName("action");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.ParentPath).HasColumnName("parent_path");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.WebIcon).HasColumnName("web_icon");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_ui_menu_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ir_ui_menu_parent_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_ui_menu_write_uid_fkey");

            //entity.HasMany(d => d.Gids).WithMany(p => p.Menus)
            entity.HasMany<ResGroup>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "IrUiMenuGroupRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("Gid")
                        .HasConstraintName("ir_ui_menu_group_rel_gid_fkey"),
                    l => l.HasOne<IrUiMenu>().WithMany()
                        .HasForeignKey("MenuId")
                        .HasConstraintName("ir_ui_menu_group_rel_menu_id_fkey"),
                    j =>
                    {
                        j.HasKey("MenuId", "Gid").HasName("ir_ui_menu_group_rel_pkey");
                        j.ToTable("ir_ui_menu_group_rel");
                        j.HasIndex(new[] { "Gid", "MenuId" }, "ir_ui_menu_group_rel_gid_menu_id_idx");
                    });
        });

        modelBuilder.Entity<IrUiView>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_ui_view_pkey");

            entity.ToTable("ir_ui_view");

            entity.HasIndex(e => e.InheritId, "ir_ui_view_inherit_id_index");

            entity.HasIndex(e => e.Key, "ir_ui_view_key_index").HasFilter("(key IS NOT NULL)");

            entity.HasIndex(e => e.Model, "ir_ui_view_model_index");

            entity.HasIndex(e => new { e.Model, e.InheritId }, "ir_ui_view_model_type_inherit_id");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.ArchDb)
                .HasColumnType("jsonb")
                .HasColumnName("arch_db");
            entity.Property(e => e.ArchFs).HasColumnName("arch_fs");
            entity.Property(e => e.ArchPrev).HasColumnName("arch_prev");
            entity.Property(e => e.ArchUpdated).HasColumnName("arch_updated");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CustomizeShow).HasColumnName("customize_show");
            entity.Property(e => e.FieldParent).HasColumnName("field_parent");
            entity.Property(e => e.InheritId).HasColumnName("inherit_id");
            entity.Property(e => e.Key).HasColumnName("key");
            entity.Property(e => e.Mode).HasColumnName("mode");
            entity.Property(e => e.Model).HasColumnName("model");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.SeoName)
                .HasColumnType("jsonb")
                .HasColumnName("seo_name");
            entity.Property(e => e.ThemeTemplateId).HasColumnName("theme_template_id");
            entity.Property(e => e.Track).HasColumnName("track");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.Visibility).HasColumnName("visibility");
            entity.Property(e => e.VisibilityPassword).HasColumnName("visibility_password");
            entity.Property(e => e.WebsiteId).HasColumnName("website_id");
            entity.Property(e => e.WebsiteMetaDescription)
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_description");
            entity.Property(e => e.WebsiteMetaKeywords)
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_keywords");
            entity.Property(e => e.WebsiteMetaOgImg).HasColumnName("website_meta_og_img");
            entity.Property(e => e.WebsiteMetaTitle)
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_title");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_ui_view_create_uid_fkey");

            entity.HasOne(d => d.Inherit).WithMany(p => p.InverseInherit)
                .HasForeignKey(d => d.InheritId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("ir_ui_view_inherit_id_fkey");

            entity.HasOne(d => d.ThemeTemplate).WithMany(p => p.IrUiViews)
                .HasForeignKey(d => d.ThemeTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_ui_view_theme_template_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.IrUiViews)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_ui_view_website_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_ui_view_write_uid_fkey");

            //entity.HasMany(d => d.Groups).WithMany(p => p.Views)
            entity.HasMany<ResGroup>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "IrUiViewGroupRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("ir_ui_view_group_rel_group_id_fkey"),
                    l => l.HasOne<IrUiView>().WithMany()
                        .HasForeignKey("ViewId")
                        .HasConstraintName("ir_ui_view_group_rel_view_id_fkey"),
                    j =>
                    {
                        j.HasKey("ViewId", "GroupId").HasName("ir_ui_view_group_rel_pkey");
                        j.ToTable("ir_ui_view_group_rel");
                        j.HasIndex(new[] { "GroupId", "ViewId" }, "ir_ui_view_group_rel_group_id_view_id_idx");
                    });
        });

        modelBuilder.Entity<IrUiViewCustom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ir_ui_view_custom_pkey");

            entity.ToTable("ir_ui_view_custom");

            entity.HasIndex(e => e.RefId, "ir_ui_view_custom_ref_id_index");

            entity.HasIndex(e => e.UserId, "ir_ui_view_custom_user_id_index");

            entity.HasIndex(e => new { e.UserId, e.RefId }, "ir_ui_view_custom_user_id_ref_id");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Arch).HasColumnName("arch");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.RefId).HasColumnName("ref_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_ui_view_custom_create_uid_fkey");

            entity.HasOne(d => d.Ref).WithMany(p => p.IrUiViewCustoms)
                .HasForeignKey(d => d.RefId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_ui_view_custom_ref_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("ir_ui_view_custom_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("ir_ui_view_custom_write_uid_fkey");
        });

        modelBuilder.Entity<LotLabelLayout>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("lot_label_layout_pkey");

            entity.ToTable("lot_label_layout");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LabelQuantity).HasColumnName("label_quantity");
            entity.Property(e => e.PrintFormat).HasColumnName("print_format");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lot_label_layout_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lot_label_layout_write_uid_fkey");

            //entity.HasMany(d => d.StockPickings).WithMany(p => p.LotLabelLayouts)
            entity.HasMany<StockPicking>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "LotLabelLayoutStockPickingRel",
                    r => r.HasOne<StockPicking>().WithMany()
                        .HasForeignKey("StockPickingId")
                        .HasConstraintName("lot_label_layout_stock_picking_rel_stock_picking_id_fkey"),
                    l => l.HasOne<LotLabelLayout>().WithMany()
                        .HasForeignKey("LotLabelLayoutId")
                        .HasConstraintName("lot_label_layout_stock_picking_rel_lot_label_layout_id_fkey"),
                    j =>
                    {
                        j.HasKey("LotLabelLayoutId", "StockPickingId").HasName("lot_label_layout_stock_picking_rel_pkey");
                        j.ToTable("lot_label_layout_stock_picking_rel");
                        j.HasIndex(new[] { "StockPickingId", "LotLabelLayoutId" }, "lot_label_layout_stock_pickin_stock_picking_id_lot_label_la_idx");
                    });
        });

        modelBuilder.Entity<LunchAlert>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("lunch_alert_pkey");

            entity.ToTable("lunch_alert");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CronId).HasColumnName("cron_id");
            entity.Property(e => e.Fri).HasColumnName("fri");
            entity.Property(e => e.Message)
                .HasColumnType("jsonb")
                .HasColumnName("message");
            entity.Property(e => e.Mode).HasColumnName("mode");
            entity.Property(e => e.Mon).HasColumnName("mon");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.NotificationMoment).HasColumnName("notification_moment");
            entity.Property(e => e.NotificationTime).HasColumnName("notification_time");
            entity.Property(e => e.Recipients).HasColumnName("recipients");
            entity.Property(e => e.Sat).HasColumnName("sat");
            entity.Property(e => e.Sun).HasColumnName("sun");
            entity.Property(e => e.Thu).HasColumnName("thu");
            entity.Property(e => e.Tue).HasColumnName("tue");
            entity.Property(e => e.Tz).HasColumnName("tz");
            entity.Property(e => e.Until).HasColumnName("until");
            entity.Property(e => e.Wed).HasColumnName("wed");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_alert_create_uid_fkey");

            entity.HasOne(d => d.Cron).WithMany(p => p.LunchAlerts)
                .HasForeignKey(d => d.CronId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("lunch_alert_cron_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_alert_write_uid_fkey");

            //entity.HasMany(d => d.LunchLocations).WithMany(p => p.LunchAlerts)
            entity.HasMany<LunchLocation>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "LunchAlertLunchLocationRel",
                    r => r.HasOne<LunchLocation>().WithMany()
                        .HasForeignKey("LunchLocationId")
                        .HasConstraintName("lunch_alert_lunch_location_rel_lunch_location_id_fkey"),
                    l => l.HasOne<LunchAlert>().WithMany()
                        .HasForeignKey("LunchAlertId")
                        .HasConstraintName("lunch_alert_lunch_location_rel_lunch_alert_id_fkey"),
                    j =>
                    {
                        j.HasKey("LunchAlertId", "LunchLocationId").HasName("lunch_alert_lunch_location_rel_pkey");
                        j.ToTable("lunch_alert_lunch_location_rel");
                        j.HasIndex(new[] { "LunchLocationId", "LunchAlertId" }, "lunch_alert_lunch_location_re_lunch_location_id_lunch_alert_idx");
                    });
        });

        modelBuilder.Entity<LunchCashmove>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("lunch_cashmove_pkey");

            entity.ToTable("lunch_cashmove");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_cashmove_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("lunch_cashmove_currency_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_cashmove_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_cashmove_write_uid_fkey");
        });

        modelBuilder.Entity<LunchLocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("lunch_location_pkey");

            entity.ToTable("lunch_location");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_location_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_location_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_location_write_uid_fkey");
        });

        modelBuilder.Entity<LunchOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("lunch_order_pkey");

            entity.ToTable("lunch_order");

            entity.HasIndex(e => e.State, "lunch_order_state_index");

            entity.HasIndex(e => e.SupplierId, "lunch_order_supplier_id_index");

            entity.HasIndex(e => new { e.UserId, e.ProductId, e.Date }, "lunch_order_user_product_date");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.DisplayToppings).HasColumnName("display_toppings");
            entity.Property(e => e.LunchLocationId).HasColumnName("lunch_location_id");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.Notified).HasColumnName("notified");
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.SupplierId).HasColumnName("supplier_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Category).WithMany(p => p.LunchOrders)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_order_category_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_order_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_order_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_order_currency_id_fkey");

            entity.HasOne(d => d.LunchLocation).WithMany(p => p.LunchOrders)
                .HasForeignKey(d => d.LunchLocationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_order_lunch_location_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.LunchOrders)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("lunch_order_product_id_fkey");

            entity.HasOne(d => d.Supplier).WithMany(p => p.LunchOrders)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_order_supplier_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_order_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_order_write_uid_fkey");

            //entity.HasMany(d => d.Toppings).WithMany(p => p.Orders)
            entity.HasMany<LunchTopping>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "LunchOrderTopping",
                    r => r.HasOne<LunchTopping>().WithMany()
                        .HasForeignKey("ToppingId")
                        .HasConstraintName("lunch_order_topping_topping_id_fkey"),
                    l => l.HasOne<LunchOrder>().WithMany()
                        .HasForeignKey("OrderId")
                        .HasConstraintName("lunch_order_topping_order_id_fkey"),
                    j =>
                    {
                        j.HasKey("OrderId", "ToppingId").HasName("lunch_order_topping_pkey");
                        j.ToTable("lunch_order_topping");
                        j.HasIndex(new[] { "ToppingId", "OrderId" }, "lunch_order_topping_topping_id_order_id_idx");
                    });
        });

        modelBuilder.Entity<LunchProduct>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("lunch_product_pkey");

            entity.ToTable("lunch_product");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.NewUntil).HasColumnName("new_until");
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.SupplierId).HasColumnName("supplier_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Category).WithMany(p => p.LunchProducts)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("lunch_product_category_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_product_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_product_create_uid_fkey");

            entity.HasOne(d => d.Supplier).WithMany(p => p.LunchProducts)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("lunch_product_supplier_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_product_write_uid_fkey");

            //entity.HasMany(d => d.Users).WithMany(p => p.Products)
            entity.HasMany<ResUser>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "LunchProductFavoriteUserRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("lunch_product_favorite_user_rel_user_id_fkey"),
                    l => l.HasOne<LunchProduct>().WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("lunch_product_favorite_user_rel_product_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductId", "UserId").HasName("lunch_product_favorite_user_rel_pkey");
                        j.ToTable("lunch_product_favorite_user_rel");
                        j.HasIndex(new[] { "UserId", "ProductId" }, "lunch_product_favorite_user_rel_user_id_product_id_idx");
                    });
        });

        modelBuilder.Entity<LunchProductCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("lunch_product_category_pkey");

            entity.ToTable("lunch_product_category");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_product_category_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_product_category_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_product_category_write_uid_fkey");
        });

        modelBuilder.Entity<LunchSupplier>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("lunch_supplier_pkey");

            entity.ToTable("lunch_supplier");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AutomaticEmailTime).HasColumnName("automatic_email_time");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CronId).HasColumnName("cron_id");
            entity.Property(e => e.Delivery).HasColumnName("delivery");
            entity.Property(e => e.Fri).HasColumnName("fri");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Moment).HasColumnName("moment");
            entity.Property(e => e.Mon).HasColumnName("mon");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.RecurrencyEndDate).HasColumnName("recurrency_end_date");
            entity.Property(e => e.ResponsibleId).HasColumnName("responsible_id");
            entity.Property(e => e.Sat).HasColumnName("sat");
            entity.Property(e => e.SendBy).HasColumnName("send_by");
            entity.Property(e => e.Sun).HasColumnName("sun");
            entity.Property(e => e.Thu).HasColumnName("thu");
            entity.Property(e => e.ToppingLabel1).HasColumnName("topping_label_1");
            entity.Property(e => e.ToppingLabel2).HasColumnName("topping_label_2");
            entity.Property(e => e.ToppingLabel3).HasColumnName("topping_label_3");
            entity.Property(e => e.ToppingQuantity1).HasColumnName("topping_quantity_1");
            entity.Property(e => e.ToppingQuantity2).HasColumnName("topping_quantity_2");
            entity.Property(e => e.ToppingQuantity3).HasColumnName("topping_quantity_3");
            entity.Property(e => e.Tue).HasColumnName("tue");
            entity.Property(e => e.Tz).HasColumnName("tz");
            entity.Property(e => e.Wed).HasColumnName("wed");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_supplier_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_supplier_create_uid_fkey");

            entity.HasOne(d => d.Cron).WithMany(p => p.LunchSuppliers)
                .HasForeignKey(d => d.CronId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("lunch_supplier_cron_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.LunchSuppliers)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_supplier_message_main_attachment_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("lunch_supplier_partner_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.ResponsibleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_supplier_responsible_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_supplier_write_uid_fkey");

            //entity.HasMany(d => d.LunchLocations).WithMany(p => p.LunchSuppliers)
            entity.HasMany<LunchLocation>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "LunchLocationLunchSupplierRel",
                    r => r.HasOne<LunchLocation>().WithMany()
                        .HasForeignKey("LunchLocationId")
                        .HasConstraintName("lunch_location_lunch_supplier_rel_lunch_location_id_fkey"),
                    l => l.HasOne<LunchSupplier>().WithMany()
                        .HasForeignKey("LunchSupplierId")
                        .HasConstraintName("lunch_location_lunch_supplier_rel_lunch_supplier_id_fkey"),
                    j =>
                    {
                        j.HasKey("LunchSupplierId", "LunchLocationId").HasName("lunch_location_lunch_supplier_rel_pkey");
                        j.ToTable("lunch_location_lunch_supplier_rel");
                        j.HasIndex(new[] { "LunchLocationId", "LunchSupplierId" }, "lunch_location_lunch_supplier_lunch_location_id_lunch_suppl_idx");
                    });
        });

        modelBuilder.Entity<LunchTopping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("lunch_topping_pkey");

            entity.ToTable("lunch_topping");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.SupplierId).HasColumnName("supplier_id");
            entity.Property(e => e.ToppingCategory).HasColumnName("topping_category");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_topping_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_topping_create_uid_fkey");

            entity.HasOne(d => d.Supplier).WithMany(p => p.LunchToppings)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("lunch_topping_supplier_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("lunch_topping_write_uid_fkey");
        });

        modelBuilder.Entity<MailActivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_activity_pkey");

            entity.ToTable("mail_activity");

            entity.HasIndex(e => e.DateDeadline, "mail_activity_date_deadline_index");

            entity.HasIndex(e => e.ResId, "mail_activity_res_id_index");

            entity.HasIndex(e => e.ResModelId, "mail_activity_res_model_id_index");

            entity.HasIndex(e => e.ResModel, "mail_activity_res_model_index");

            entity.HasIndex(e => e.UserId, "mail_activity_user_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.ActivityTypeId).HasColumnName("activity_type_id");
            entity.Property(e => e.Automated).HasColumnName("automated");
            entity.Property(e => e.CalendarEventId).HasColumnName("calendar_event_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateDeadline).HasColumnName("date_deadline");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.NoteId).HasColumnName("note_id");
            entity.Property(e => e.PreviousActivityTypeId).HasColumnName("previous_activity_type_id");
            entity.Property(e => e.RecommendedActivityTypeId).HasColumnName("recommended_activity_type_id");
            entity.Property(e => e.RequestPartnerId).HasColumnName("request_partner_id");
            entity.Property(e => e.ResId).HasColumnName("res_id");
            entity.Property(e => e.ResModel).HasColumnName("res_model");
            entity.Property(e => e.ResModelId).HasColumnName("res_model_id");
            entity.Property(e => e.ResName).HasColumnName("res_name");
            entity.Property(e => e.Summary).HasColumnName("summary");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.ActivityType).WithMany(p => p.MailActivityActivityTypes)
                .HasForeignKey(d => d.ActivityTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mail_activity_activity_type_id_fkey");

            entity.HasOne(d => d.CalendarEvent).WithMany(p => p.MailActivities)
                .HasForeignKey(d => d.CalendarEventId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_activity_calendar_event_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_activity_create_uid_fkey");

            entity.HasOne(d => d.NoteNavigation).WithMany(p => p.MailActivities)
                .HasForeignKey(d => d.NoteId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_activity_note_id_fkey");

            entity.HasOne(d => d.PreviousActivityType).WithMany(p => p.MailActivityPreviousActivityTypes)
                .HasForeignKey(d => d.PreviousActivityTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_activity_previous_activity_type_id_fkey");

            entity.HasOne(d => d.RecommendedActivityType).WithMany(p => p.MailActivityRecommendedActivityTypes)
                .HasForeignKey(d => d.RecommendedActivityTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_activity_recommended_activity_type_id_fkey");

            entity.HasOne(d => d.RequestPartner).WithMany(p => p.MailActivities)
                .HasForeignKey(d => d.RequestPartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_activity_request_partner_id_fkey");

            entity.HasOne(d => d.ResModelNavigation).WithMany(p => p.MailActivities)
                .HasForeignKey(d => d.ResModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_activity_res_model_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mail_activity_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_activity_write_uid_fkey");
        });

        modelBuilder.Entity<MailActivityType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_activity_type_pkey");

            entity.ToTable("mail_activity_type");

            entity.HasIndex(e => e.CreatorId, "mail_activity_type_create_uid_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Category).HasColumnName("category");
            entity.Property(e => e.ChainingType).HasColumnName("chaining_type");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DecorationType).HasColumnName("decoration_type");
            entity.Property(e => e.DefaultNote)
                .HasColumnType("jsonb")
                .HasColumnName("default_note");
            entity.Property(e => e.DefaultUserId).HasColumnName("default_user_id");
            entity.Property(e => e.DelayCount).HasColumnName("delay_count");
            entity.Property(e => e.DelayFrom).HasColumnName("delay_from");
            entity.Property(e => e.DelayUnit).HasColumnName("delay_unit");
            entity.Property(e => e.Icon).HasColumnName("icon");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ResModel).HasColumnName("res_model");
            entity.Property(e => e.Sequence)
                //.ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.Summary)
                .HasColumnType("jsonb")
                .HasColumnName("summary");
            entity.Property(e => e.TriggeredNextTypeId).HasColumnName("triggered_next_type_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_activity_type_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.DefaultUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_activity_type_default_user_id_fkey");

            entity.HasOne(d => d.TriggeredNextType).WithMany(p => p.InverseTriggeredNextType)
                .HasForeignKey(d => d.TriggeredNextTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mail_activity_type_triggered_next_type_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_activity_type_write_uid_fkey");

            //entity.HasMany(d => d.Activities).WithMany(p => p.Recommendeds)
            entity.HasMany<MailActivityType>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MailActivityRel",
                    r => r.HasOne<MailActivityType>().WithMany()
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("mail_activity_rel_activity_id_fkey"),
                    l => l.HasOne<MailActivityType>().WithMany()
                        .HasForeignKey("RecommendedId")
                        .HasConstraintName("mail_activity_rel_recommended_id_fkey"),
                    j =>
                    {
                        j.HasKey("ActivityId", "RecommendedId").HasName("mail_activity_rel_pkey");
                        j.ToTable("mail_activity_rel");
                        j.HasIndex(new[] { "RecommendedId", "ActivityId" }, "mail_activity_rel_recommended_id_activity_id_idx");
                    });

            //entity.HasMany(d => d.MailTemplates).WithMany(p => p.MailActivityTypes)
            entity.HasMany<MailTemplate>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MailActivityTypeMailTemplateRel",
                    r => r.HasOne<MailTemplate>().WithMany()
                        .HasForeignKey("MailTemplateId")
                        .HasConstraintName("mail_activity_type_mail_template_rel_mail_template_id_fkey"),
                    l => l.HasOne<MailActivityType>().WithMany()
                        .HasForeignKey("MailActivityTypeId")
                        .HasConstraintName("mail_activity_type_mail_template_rel_mail_activity_type_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailActivityTypeId", "MailTemplateId").HasName("mail_activity_type_mail_template_rel_pkey");
                        j.ToTable("mail_activity_type_mail_template_rel");
                        j.HasIndex(new[] { "MailTemplateId", "MailActivityTypeId" }, "mail_activity_type_mail_templ_mail_template_id_mail_activit_idx");
                    });

            //entity.HasMany(d => d.Recommendeds).WithMany(p => p.Activities)
            entity.HasMany<MailActivityType>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MailActivityRel",
                    r => r.HasOne<MailActivityType>().WithMany()
                        .HasForeignKey("RecommendedId")
                        .HasConstraintName("mail_activity_rel_recommended_id_fkey"),
                    l => l.HasOne<MailActivityType>().WithMany()
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("mail_activity_rel_activity_id_fkey"),
                    j =>
                    {
                        j.HasKey("ActivityId", "RecommendedId").HasName("mail_activity_rel_pkey");
                        j.ToTable("mail_activity_rel");
                        j.HasIndex(new[] { "RecommendedId", "ActivityId" }, "mail_activity_rel_recommended_id_activity_id_idx");
                    });
        });

        modelBuilder.Entity<MailAlias>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_alias_pkey");

            entity.ToTable("mail_alias");

            entity.HasIndex(e => e.AliasName, "mail_alias_alias_unique").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AliasBouncedContent)
                .HasColumnType("jsonb")
                .HasColumnName("alias_bounced_content");
            entity.Property(e => e.AliasContact).HasColumnName("alias_contact");
            entity.Property(e => e.AliasDefaults).HasColumnName("alias_defaults");
            entity.Property(e => e.AliasForceThreadId).HasColumnName("alias_force_thread_id");
            entity.Property(e => e.AliasModelId).HasColumnName("alias_model_id");
            entity.Property(e => e.AliasName).HasColumnName("alias_name");
            entity.Property(e => e.AliasParentModelId).HasColumnName("alias_parent_model_id");
            entity.Property(e => e.AliasParentThreadId).HasColumnName("alias_parent_thread_id");
            entity.Property(e => e.AliasUserId).HasColumnName("alias_user_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AliasModel).WithMany(p => p.MailAliasAliasModels)
                .HasForeignKey(d => d.AliasModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_alias_alias_model_id_fkey");

            entity.HasOne(d => d.AliasParentModel).WithMany(p => p.MailAliasAliasParentModels)
                .HasForeignKey(d => d.AliasParentModelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_alias_alias_parent_model_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.AliasUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_alias_alias_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_alias_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_alias_write_uid_fkey");
        });

        modelBuilder.Entity<MailBlacklist>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_blacklist_pkey");

            entity.ToTable("mail_blacklist");

            entity.HasIndex(e => e.Email, "mail_blacklist_email_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.Email, "mail_blacklist_unique_email").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Email).HasColumnName("email");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_blacklist_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.MailBlacklists)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_blacklist_message_main_attachment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_blacklist_write_uid_fkey");
        });

        modelBuilder.Entity<MailBlacklistRemove>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_blacklist_remove_pkey");

            entity.ToTable("mail_blacklist_remove");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Email).HasColumnName("email");
            entity.Property(e => e.Reason).HasColumnName("reason");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_blacklist_remove_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_blacklist_remove_write_uid_fkey");
        });

        modelBuilder.Entity<MailChannel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_channel_pkey");

            entity.ToTable("mail_channel");

            entity.HasIndex(e => e.Uuid, "mail_channel_uuid_unique").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.ChannelType).HasColumnName("channel_type");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DefaultDisplayMode).HasColumnName("default_display_mode");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.GroupPublicId).HasColumnName("group_public_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Uuid).HasColumnName("uuid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_create_uid_fkey");

            entity.HasOne(d => d.GroupPublic).WithMany(p => p.MailChannels)
                .HasForeignKey(d => d.GroupPublicId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_group_public_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.MailChannels)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_message_main_attachment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_write_uid_fkey");

            //entity.HasMany(d => d.HrDepartments).WithMany(p => p.MailChannels)
            entity.HasMany<HrDepartment>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "HrDepartmentMailChannelRel",
                    r => r.HasOne<HrDepartment>().WithMany()
                        .HasForeignKey("HrDepartmentId")
                        .HasConstraintName("hr_department_mail_channel_rel_hr_department_id_fkey"),
                    l => l.HasOne<MailChannel>().WithMany()
                        .HasForeignKey("MailChannelId")
                        .HasConstraintName("hr_department_mail_channel_rel_mail_channel_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailChannelId", "HrDepartmentId").HasName("hr_department_mail_channel_rel_pkey");
                        j.ToTable("hr_department_mail_channel_rel");
                        j.HasIndex(new[] { "HrDepartmentId", "MailChannelId" }, "hr_department_mail_channel_re_hr_department_id_mail_channel_idx");
                    });

            //entity.HasMany(d => d.ResGroups).WithMany(p => p.MailChannelsNavigation)
            entity.HasMany<ResGroup>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MailChannelResGroupsRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("ResGroupsId")
                        .HasConstraintName("mail_channel_res_groups_rel_res_groups_id_fkey"),
                    l => l.HasOne<MailChannel>().WithMany()
                        .HasForeignKey("MailChannelId")
                        .HasConstraintName("mail_channel_res_groups_rel_mail_channel_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailChannelId", "ResGroupsId").HasName("mail_channel_res_groups_rel_pkey");
                        j.ToTable("mail_channel_res_groups_rel");
                        j.HasIndex(new[] { "ResGroupsId", "MailChannelId" }, "mail_channel_res_groups_rel_res_groups_id_mail_channel_id_idx");
                    });
        });

        modelBuilder.Entity<MailChannelMember>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_channel_member_pkey");

            entity.ToTable("mail_channel_member");

            entity.HasIndex(e => e.GuestId, "mail_channel_member_guest_id_index");

            entity.HasIndex(e => new { e.ChannelId, e.GuestId }, "mail_channel_member_guest_unique")
                .IsUnique()
                .HasFilter("(guest_id IS NOT NULL)");

            entity.HasIndex(e => e.PartnerId, "mail_channel_member_partner_id_index");

            entity.HasIndex(e => new { e.ChannelId, e.PartnerId }, "mail_channel_member_partner_unique")
                .IsUnique()
                .HasFilter("(partner_id IS NOT NULL)");

            entity.HasIndex(e => new { e.ChannelId, e.PartnerId, e.SeenMessageId }, "mail_channel_member_seen_message_id_idx");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.ChannelId).HasColumnName("channel_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CustomChannelName).HasColumnName("custom_channel_name");
            entity.Property(e => e.FetchedMessageId).HasColumnName("fetched_message_id");
            entity.Property(e => e.FoldState).HasColumnName("fold_state");
            entity.Property(e => e.GuestId).HasColumnName("guest_id");
            entity.Property(e => e.IsMinimized).HasColumnName("is_minimized");
            entity.Property(e => e.IsPinned).HasColumnName("is_pinned");
            entity.Property(e => e.LastInterestDt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_interest_dt");
            entity.Property(e => e.LastSeenDt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_seen_dt");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.RtcInvitingSessionId).HasColumnName("rtc_inviting_session_id");
            entity.Property(e => e.SeenMessageId).HasColumnName("seen_message_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Channel).WithMany(p => p.MailChannelMembers)
                .HasForeignKey(d => d.ChannelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_channel_member_channel_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_member_create_uid_fkey");

            entity.HasOne(d => d.FetchedMessage).WithMany(p => p.MailChannelMemberFetchedMessages)
                .HasForeignKey(d => d.FetchedMessageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_member_fetched_message_id_fkey");

            entity.HasOne(d => d.Guest).WithMany(p => p.MailChannelMembers)
                .HasForeignKey(d => d.GuestId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_channel_member_guest_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_channel_member_partner_id_fkey");

            entity.HasOne(d => d.RtcInvitingSession).WithMany(p => p.MailChannelMembers)
                .HasForeignKey(d => d.RtcInvitingSessionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_member_rtc_inviting_session_id_fkey");

            entity.HasOne(d => d.SeenMessage).WithMany(p => p.MailChannelMemberSeenMessages)
                .HasForeignKey(d => d.SeenMessageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_member_seen_message_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_member_write_uid_fkey");
        });

        modelBuilder.Entity<MailChannelRtcSession>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_channel_rtc_session_pkey");

            entity.ToTable("mail_channel_rtc_session");

            entity.HasIndex(e => e.ChannelMemberId, "mail_channel_rtc_session_channel_member_unique").IsUnique();

            entity.HasIndex(e => e.LastModificationTime, "mail_channel_rtc_session_write_date_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.ChannelId).HasColumnName("channel_id");
            entity.Property(e => e.ChannelMemberId).HasColumnName("channel_member_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.IsCameraOn).HasColumnName("is_camera_on");
            entity.Property(e => e.IsDeaf).HasColumnName("is_deaf");
            entity.Property(e => e.IsMuted).HasColumnName("is_muted");
            entity.Property(e => e.IsScreenSharingOn).HasColumnName("is_screen_sharing_on");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Channel).WithMany(p => p.MailChannelRtcSessions)
                .HasForeignKey(d => d.ChannelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_rtc_session_channel_id_fkey");

            entity.HasOne(d => d.ChannelMember).WithOne(p => p.MailChannelRtcSession)
                .HasForeignKey<MailChannelRtcSession>(d => d.ChannelMemberId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_channel_rtc_session_channel_member_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_rtc_session_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_channel_rtc_session_write_uid_fkey");
        });

        modelBuilder.Entity<MailComposeMessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_compose_message_pkey");

            entity.ToTable("mail_compose_message");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.ActiveDomain).HasColumnName("active_domain");
            entity.Property(e => e.AuthorId).HasColumnName("author_id");
            entity.Property(e => e.AutoDelete).HasColumnName("auto_delete");
            entity.Property(e => e.AutoDeleteMessage).HasColumnName("auto_delete_message");
            entity.Property(e => e.Body).HasColumnName("body");
            entity.Property(e => e.CompositionMode).HasColumnName("composition_mode");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.EmailAddSignature).HasColumnName("email_add_signature");
            entity.Property(e => e.EmailFrom).HasColumnName("email_from");
            entity.Property(e => e.EmailLayoutXmlid).HasColumnName("email_layout_xmlid");
            entity.Property(e => e.IsLog).HasColumnName("is_log");
            entity.Property(e => e.Lang).HasColumnName("lang");
            entity.Property(e => e.MailActivityTypeId).HasColumnName("mail_activity_type_id");
            entity.Property(e => e.MailServerId).HasColumnName("mail_server_id");
            entity.Property(e => e.MessageType).HasColumnName("message_type");
            entity.Property(e => e.Model).HasColumnName("model");
            entity.Property(e => e.Notify).HasColumnName("notify");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.RecordName).HasColumnName("record_name");
            entity.Property(e => e.ReplyTo).HasColumnName("reply_to");
            entity.Property(e => e.ReplyToForceNew).HasColumnName("reply_to_force_new");
            entity.Property(e => e.ResId).HasColumnName("res_id");
            entity.Property(e => e.Subject).HasColumnName("subject");
            entity.Property(e => e.SubtypeId).HasColumnName("subtype_id");
            entity.Property(e => e.TemplateId).HasColumnName("template_id");
            entity.Property(e => e.UseActiveDomain).HasColumnName("use_active_domain");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Author).WithMany(p => p.MailComposeMessages)
                .HasForeignKey(d => d.AuthorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_compose_message_author_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_compose_message_create_uid_fkey");

            entity.HasOne(d => d.MailActivityType).WithMany(p => p.MailComposeMessages)
                .HasForeignKey(d => d.MailActivityTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_compose_message_mail_activity_type_id_fkey");

            entity.HasOne(d => d.MailServer).WithMany(p => p.MailComposeMessages)
                .HasForeignKey(d => d.MailServerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_compose_message_mail_server_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.MailComposeMessages)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_compose_message_parent_id_fkey");

            entity.HasOne(d => d.Subtype).WithMany(p => p.MailComposeMessages)
                .HasForeignKey(d => d.SubtypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_compose_message_subtype_id_fkey");

            entity.HasOne(d => d.Template).WithMany(p => p.MailComposeMessages)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_compose_message_template_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_compose_message_write_uid_fkey");

            //entity.HasMany(d => d.Attachments).WithMany(p => p.Wizards)
            entity.HasMany<IrAttachment>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MailComposeMessageIrAttachmentsRel",
                    r => r.HasOne<IrAttachment>().WithMany()
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("mail_compose_message_ir_attachments_rel_attachment_id_fkey"),
                    l => l.HasOne<MailComposeMessage>().WithMany()
                        .HasForeignKey("WizardId")
                        .HasConstraintName("mail_compose_message_ir_attachments_rel_wizard_id_fkey"),
                    j =>
                    {
                        j.HasKey("WizardId", "AttachmentId").HasName("mail_compose_message_ir_attachments_rel_pkey");
                        j.ToTable("mail_compose_message_ir_attachments_rel");
                        j.HasIndex(new[] { "AttachmentId", "WizardId" }, "mail_compose_message_ir_attachments_attachment_id_wizard_id_idx");
                    });

            //entity.HasMany(d => d.Partners).WithMany(p => p.Wizards)
            entity.HasMany<ResPartner>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MailComposeMessageResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("PartnerId")
                        .HasConstraintName("mail_compose_message_res_partner_rel_partner_id_fkey"),
                    l => l.HasOne<MailComposeMessage>().WithMany()
                        .HasForeignKey("WizardId")
                        .HasConstraintName("mail_compose_message_res_partner_rel_wizard_id_fkey"),
                    j =>
                    {
                        j.HasKey("WizardId", "PartnerId").HasName("mail_compose_message_res_partner_rel_pkey");
                        j.ToTable("mail_compose_message_res_partner_rel");
                        j.HasIndex(new[] { "PartnerId", "WizardId" }, "mail_compose_message_res_partner_rel_partner_id_wizard_id_idx");
                    });
        });

        modelBuilder.Entity<MailFollower>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_followers_pkey");

            entity.ToTable("mail_followers");

            entity.HasIndex(e => new { e.ResModel, e.ResId, e.PartnerId }, "mail_followers_mail_followers_res_partner_res_model_id_uniq").IsUnique();

            entity.HasIndex(e => e.PartnerId, "mail_followers_partner_id_index");

            entity.HasIndex(e => e.ResId, "mail_followers_res_id_index");

            entity.HasIndex(e => e.ResModel, "mail_followers_res_model_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.ResId).HasColumnName("res_id");
            entity.Property(e => e.ResModel).HasColumnName("res_model");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_followers_partner_id_fkey");

            //entity.HasMany(d => d.MailMessageSubtypes).WithMany(p => p.MailFollowers)
            entity.HasMany<MailMessageSubtype>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MailFollowersMailMessageSubtypeRel",
                    r => r.HasOne<MailMessageSubtype>().WithMany()
                        .HasForeignKey("MailMessageSubtypeId")
                        .HasConstraintName("mail_followers_mail_message_subtyp_mail_message_subtype_id_fkey"),
                    l => l.HasOne<MailFollower>().WithMany()
                        .HasForeignKey("MailFollowersId")
                        .HasConstraintName("mail_followers_mail_message_subtype_rel_mail_followers_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailFollowersId", "MailMessageSubtypeId").HasName("mail_followers_mail_message_subtype_rel_pkey");
                        j.ToTable("mail_followers_mail_message_subtype_rel");
                        j.HasIndex(new[] { "MailMessageSubtypeId", "MailFollowersId" }, "mail_followers_mail_message_s_mail_message_subtype_id_mail__idx");
                    });
        });

        modelBuilder.Entity<MailGatewayAllowed>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_gateway_allowed_pkey");

            entity.ToTable("mail_gateway_allowed");

            entity.HasIndex(e => e.EmailNormalized, "mail_gateway_allowed_email_normalized_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Email).HasColumnName("email");
            entity.Property(e => e.EmailNormalized).HasColumnName("email_normalized");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_gateway_allowed_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_gateway_allowed_write_uid_fkey");
        });

        modelBuilder.Entity<MailGuest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_guest_pkey");

            entity.ToTable("mail_guest");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccessToken).HasColumnName("access_token");
            entity.Property(e => e.CountryId).HasColumnName("country_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Lang).HasColumnName("lang");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Timezone).HasColumnName("timezone");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCountry>().WithMany()
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_guest_country_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_guest_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_guest_write_uid_fkey");
        });

        modelBuilder.Entity<MailIceServer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_ice_server_pkey");

            entity.ToTable("mail_ice_server");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Credential).HasColumnName("credential");
            entity.Property(e => e.ServerType).HasColumnName("server_type");
            entity.Property(e => e.Uri).HasColumnName("uri");
            entity.Property(e => e.Username).HasColumnName("username");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_ice_server_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_ice_server_write_uid_fkey");
        });

        modelBuilder.Entity<MailLinkPreview>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_link_preview_pkey");

            entity.ToTable("mail_link_preview");

            entity.HasIndex(e => e.CreationTime, "mail_link_preview_create_date_index");

            entity.HasIndex(e => e.MessageId, "mail_link_preview_message_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ImageMimetype).HasColumnName("image_mimetype");
            entity.Property(e => e.MessageId).HasColumnName("message_id");
            entity.Property(e => e.OgDescription).HasColumnName("og_description");
            entity.Property(e => e.OgImage).HasColumnName("og_image");
            entity.Property(e => e.OgMimetype).HasColumnName("og_mimetype");
            entity.Property(e => e.OgTitle).HasColumnName("og_title");
            entity.Property(e => e.OgType).HasColumnName("og_type");
            entity.Property(e => e.SourceUrl).HasColumnName("source_url");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_link_preview_create_uid_fkey");

            entity.HasOne(d => d.Message).WithMany(p => p.MailLinkPreviews)
                .HasForeignKey(d => d.MessageId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_link_preview_message_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_link_preview_write_uid_fkey");
        });

        modelBuilder.Entity<MailMail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_mail_pkey");

            entity.ToTable("mail_mail");

            entity.HasIndex(e => e.MailMessageId, "mail_mail_mail_message_id_index");

            entity.HasIndex(e => e.Id, "mail_mail_to_delete_idx").HasFilter("(to_delete = true)");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AutoDelete).HasColumnName("auto_delete");
            entity.Property(e => e.BodyHtml).HasColumnName("body_html");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.EmailCc).HasColumnName("email_cc");
            entity.Property(e => e.EmailTo).HasColumnName("email_to");
            entity.Property(e => e.FailureReason).HasColumnName("failure_reason");
            entity.Property(e => e.FailureType).HasColumnName("failure_type");
            entity.Property(e => e.FetchmailServerId).HasColumnName("fetchmail_server_id");
            entity.Property(e => e.Headers).HasColumnName("headers");
            entity.Property(e => e.IsNotification).HasColumnName("is_notification");
            entity.Property(e => e.MailMessageId).HasColumnName("mail_message_id");
            entity.Property(e => e.References).HasColumnName("references");
            entity.Property(e => e.ScheduledDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("scheduled_date");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.ToDelete).HasColumnName("to_delete");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_mail_create_uid_fkey");

            entity.HasOne(d => d.FetchmailServer).WithMany(p => p.MailMails)
                .HasForeignKey(d => d.FetchmailServerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_mail_fetchmail_server_id_fkey");

            entity.HasOne(d => d.MailMessage).WithMany(p => p.MailMails)
                .HasForeignKey(d => d.MailMessageId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_mail_mail_message_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_mail_write_uid_fkey");

            //entity.HasMany(d => d.ResPartners).WithMany(p => p.MailMails)
            entity.HasMany<ResPartner>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MailMailResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("mail_mail_res_partner_rel_res_partner_id_fkey"),
                    l => l.HasOne<MailMail>().WithMany()
                        .HasForeignKey("MailMailId")
                        .HasConstraintName("mail_mail_res_partner_rel_mail_mail_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailMailId", "ResPartnerId").HasName("mail_mail_res_partner_rel_pkey");
                        j.ToTable("mail_mail_res_partner_rel");
                        j.HasIndex(new[] { "ResPartnerId", "MailMailId" }, "mail_mail_res_partner_rel_res_partner_id_mail_mail_id_idx");
                    });
        });

        modelBuilder.Entity<MailMessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_message_pkey");

            entity.ToTable("mail_message");

            entity.HasIndex(e => e.AuthorId, "mail_message_author_id_index");

            entity.HasIndex(e => e.MailActivityTypeId, "mail_message_mail_activity_type_id_index");

            entity.HasIndex(e => e.MessageId, "mail_message_message_id_index");

            entity.HasIndex(e => new { e.Model, e.ResId, e.Id }, "mail_message_model_res_id_id_idx");

            entity.HasIndex(e => new { e.Model, e.ResId }, "mail_message_model_res_id_idx");

            entity.HasIndex(e => e.ParentId, "mail_message_parent_id_index").HasFilter("(parent_id IS NOT NULL)");

            entity.HasIndex(e => e.SubtypeId, "mail_message_subtype_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AuthorGuestId).HasColumnName("author_guest_id");
            entity.Property(e => e.AuthorId).HasColumnName("author_id");
            entity.Property(e => e.Body).HasColumnName("body");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.EmailAddSignature).HasColumnName("email_add_signature");
            entity.Property(e => e.EmailFrom).HasColumnName("email_from");
            entity.Property(e => e.EmailLayoutXmlid).HasColumnName("email_layout_xmlid");
            entity.Property(e => e.IsInternal).HasColumnName("is_internal");
            entity.Property(e => e.MailActivityTypeId).HasColumnName("mail_activity_type_id");
            entity.Property(e => e.MailServerId).HasColumnName("mail_server_id");
            entity.Property(e => e.MessageId).HasColumnName("message_id");
            entity.Property(e => e.MessageType).HasColumnName("message_type");
            entity.Property(e => e.Model).HasColumnName("model");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.RecordName).HasColumnName("record_name");
            entity.Property(e => e.ReplyTo).HasColumnName("reply_to");
            entity.Property(e => e.ReplyToForceNew).HasColumnName("reply_to_force_new");
            entity.Property(e => e.ResId).HasColumnName("res_id");
            entity.Property(e => e.Subject).HasColumnName("subject");
            entity.Property(e => e.SubtypeId).HasColumnName("subtype_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AuthorGuest).WithMany(p => p.MailMessages)
                .HasForeignKey(d => d.AuthorGuestId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_author_guest_id_fkey");

            entity.HasOne(d => d.Author).WithMany(p => p.MailMessages)
                .HasForeignKey(d => d.AuthorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_author_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_create_uid_fkey");

            entity.HasOne(d => d.MailActivityType).WithMany(p => p.MailMessages)
                .HasForeignKey(d => d.MailActivityTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_mail_activity_type_id_fkey");

            entity.HasOne(d => d.MailServer).WithMany(p => p.MailMessages)
                .HasForeignKey(d => d.MailServerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_mail_server_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_parent_id_fkey");

            entity.HasOne(d => d.Subtype).WithMany(p => p.MailMessages)
                .HasForeignKey(d => d.SubtypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_subtype_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_write_uid_fkey");

            //entity.HasMany(d => d.Attachments).WithMany(p => p.Messages)
            entity.HasMany<IrAttachment>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MessageAttachmentRel",
                    r => r.HasOne<IrAttachment>().WithMany()
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("message_attachment_rel_attachment_id_fkey"),
                    l => l.HasOne<MailMessage>().WithMany()
                        .HasForeignKey("MessageId")
                        .HasConstraintName("message_attachment_rel_message_id_fkey"),
                    j =>
                    {
                        j.HasKey("MessageId", "AttachmentId").HasName("message_attachment_rel_pkey");
                        j.ToTable("message_attachment_rel");
                        j.HasIndex(new[] { "AttachmentId", "MessageId" }, "message_attachment_rel_attachment_id_message_id_idx");
                    });

            /// TODO: 
            //entity.HasMany(d => d.ResPartners).WithMany(p => p.MailMessagesNavigation)
            entity.HasMany<ResPartner>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MailMessageResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("mail_message_res_partner_rel_res_partner_id_fkey"),
                    l => l.HasOne<MailMessage>().WithMany()
                        .HasForeignKey("MailMessageId")
                        .HasConstraintName("mail_message_res_partner_rel_mail_message_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailMessageId", "ResPartnerId").HasName("mail_message_res_partner_rel_pkey");
                        j.ToTable("mail_message_res_partner_rel");
                        j.HasIndex(new[] { "ResPartnerId", "MailMessageId" }, "mail_message_res_partner_rel_res_partner_id_mail_message_id_idx");
                    });

            /// TODO: 
            //entity.HasMany(d => d.ResPartnersNavigation).WithMany(p => p.MailMessages1)
            entity.HasMany<ResPartner>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MailMessageResPartnerStarredRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("mail_message_res_partner_starred_rel_res_partner_id_fkey"),
                    l => l.HasOne<MailMessage>().WithMany()
                        .HasForeignKey("MailMessageId")
                        .HasConstraintName("mail_message_res_partner_starred_rel_mail_message_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailMessageId", "ResPartnerId").HasName("mail_message_res_partner_starred_rel_pkey");
                        j.ToTable("mail_message_res_partner_starred_rel");
                        j.HasIndex(new[] { "ResPartnerId", "MailMessageId" }, "mail_message_res_partner_star_res_partner_id_mail_message_i_idx");
                    });
        });

        modelBuilder.Entity<MailMessageReaction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_message_reaction_pkey");

            entity.ToTable("mail_message_reaction");

            entity.HasIndex(e => new { e.MessageId, e.Content, e.GuestId }, "mail_message_reaction_guest_unique")
                .IsUnique()
                .HasFilter("(guest_id IS NOT NULL)");

            entity.HasIndex(e => new { e.MessageId, e.Content, e.PartnerId }, "mail_message_reaction_partner_unique")
                .IsUnique()
                .HasFilter("(partner_id IS NOT NULL)");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Content).HasColumnName("content");
            entity.Property(e => e.GuestId).HasColumnName("guest_id");
            entity.Property(e => e.MessageId).HasColumnName("message_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");

            entity.HasOne(d => d.Guest).WithMany(p => p.MailMessageReactions)
                .HasForeignKey(d => d.GuestId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_message_reaction_guest_id_fkey");

            entity.HasOne(d => d.Message).WithMany(p => p.MailMessageReactions)
                .HasForeignKey(d => d.MessageId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_message_reaction_message_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_message_reaction_partner_id_fkey");
        });

        modelBuilder.Entity<MailMessageSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_message_schedule_pkey");

            entity.ToTable("mail_message_schedule");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.MailMessageId).HasColumnName("mail_message_id");
            entity.Property(e => e.NotificationParameters).HasColumnName("notification_parameters");
            entity.Property(e => e.ScheduledDatetime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("scheduled_datetime");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_schedule_create_uid_fkey");

            entity.HasOne(d => d.MailMessage).WithMany(p => p.MailMessageSchedules)
                .HasForeignKey(d => d.MailMessageId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_message_schedule_mail_message_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_schedule_write_uid_fkey");
        });

        modelBuilder.Entity<MailMessageSubtype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_message_subtype_pkey");

            entity.ToTable("mail_message_subtype");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Default).HasColumnName("default");
            entity.Property(e => e.Description)
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.Hidden).HasColumnName("hidden");
            entity.Property(e => e.Internal).HasColumnName("internal");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.RelationField).HasColumnName("relation_field");
            entity.Property(e => e.ResModel).HasColumnName("res_model");
            entity.Property(e => e.Sequence)
                //.ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.TrackRecipients).HasColumnName("track_recipients");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_subtype_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_subtype_parent_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_message_subtype_write_uid_fkey");
        });

        modelBuilder.Entity<MailNotification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_notification_pkey");

            entity.ToTable("mail_notification");

            entity.HasIndex(e => new { e.AuthorId, e.NotificationStatus }, "mail_notification_author_id_notification_status_failure").HasFilter("(notification_status = ANY (ARRAY[('bounce'::character varying)::text, ('exception'::character varying)::text]))");

            entity.HasIndex(e => e.IsRead, "mail_notification_is_read_index");

            entity.HasIndex(e => e.LetterId, "mail_notification_letter_id_index").HasFilter("(letter_id IS NOT NULL)");

            entity.HasIndex(e => e.MailMailId, "mail_notification_mail_mail_id_index");

            entity.HasIndex(e => e.MailMessageId, "mail_notification_mail_message_id_index");

            entity.HasIndex(e => e.NotificationStatus, "mail_notification_notification_status_index");

            entity.HasIndex(e => e.NotificationType, "mail_notification_notification_type_index");

            entity.HasIndex(e => e.ResPartnerId, "mail_notification_res_partner_id_index");

            entity.HasIndex(e => new { e.ResPartnerId, e.IsRead, e.NotificationStatus, e.MailMessageId }, "mail_notification_res_partner_id_is_read_notification_status_ma");

            entity.HasIndex(e => e.SmsId, "mail_notification_sms_id_index").HasFilter("(sms_id IS NOT NULL)");

            entity.HasIndex(e => new { e.MailMessageId, e.ResPartnerId }, "unique_mail_message_id_res_partner_id_if_set")
                .IsUnique()
                .HasFilter("(res_partner_id IS NOT NULL)");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AuthorId).HasColumnName("author_id");
            entity.Property(e => e.FailureReason).HasColumnName("failure_reason");
            entity.Property(e => e.FailureType).HasColumnName("failure_type");
            entity.Property(e => e.IsRead).HasColumnName("is_read");
            entity.Property(e => e.LetterId).HasColumnName("letter_id");
            entity.Property(e => e.MailMailId).HasColumnName("mail_mail_id");
            entity.Property(e => e.MailMessageId).HasColumnName("mail_message_id");
            entity.Property(e => e.NotificationStatus).HasColumnName("notification_status");
            entity.Property(e => e.NotificationType).HasColumnName("notification_type");
            entity.Property(e => e.ReadDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("read_date");
            entity.Property(e => e.ResPartnerId).HasColumnName("res_partner_id");
            entity.Property(e => e.SmsId).HasColumnName("sms_id");
            entity.Property(e => e.SmsNumber).HasColumnName("sms_number");

            entity.HasOne(d => d.Author).WithMany(p => p.MailNotificationAuthors)
                .HasForeignKey(d => d.AuthorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_notification_author_id_fkey");

            entity.HasOne(d => d.Letter).WithMany(p => p.MailNotifications)
                .HasForeignKey(d => d.LetterId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_notification_letter_id_fkey");

            entity.HasOne(d => d.MailMail).WithMany(p => p.MailNotifications)
                .HasForeignKey(d => d.MailMailId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_notification_mail_mail_id_fkey");

            entity.HasOne(d => d.MailMessage).WithMany(p => p.MailNotifications)
                .HasForeignKey(d => d.MailMessageId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_notification_mail_message_id_fkey");

            entity.HasOne(d => d.ResPartner).WithMany(p => p.MailNotificationResPartners)
                .HasForeignKey(d => d.ResPartnerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_notification_res_partner_id_fkey");

            entity.HasOne(d => d.Sms).WithMany(p => p.MailNotifications)
                .HasForeignKey(d => d.SmsId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_notification_sms_id_fkey");
        });

        modelBuilder.Entity<MailResendMessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_resend_message_pkey");

            entity.ToTable("mail_resend_message");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.MailMessageId).HasColumnName("mail_message_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_resend_message_create_uid_fkey");

            entity.HasOne(d => d.MailMessage).WithMany(p => p.MailResendMessages)
                .HasForeignKey(d => d.MailMessageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_resend_message_mail_message_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_resend_message_write_uid_fkey");

            //entity.HasMany(d => d.MailNotifications).WithMany(p => p.MailResendMessages)
            entity.HasMany<MailNotification>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MailNotificationMailResendMessageRel",
                    r => r.HasOne<MailNotification>().WithMany()
                        .HasForeignKey("MailNotificationId")
                        .HasConstraintName("mail_notification_mail_resend_message_mail_notification_id_fkey"),
                    l => l.HasOne<MailResendMessage>().WithMany()
                        .HasForeignKey("MailResendMessageId")
                        .HasConstraintName("mail_notification_mail_resend_messa_mail_resend_message_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailResendMessageId", "MailNotificationId").HasName("mail_notification_mail_resend_message_rel_pkey");
                        j.ToTable("mail_notification_mail_resend_message_rel");
                        j.HasIndex(new[] { "MailNotificationId", "MailResendMessageId" }, "mail_notification_mail_resend_mail_notification_id_mail_res_idx");
                    });
        });

        modelBuilder.Entity<MailResendPartner>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_resend_partner_pkey");

            entity.ToTable("mail_resend_partner");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Message).HasColumnName("message");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.Resend).HasColumnName("resend");
            entity.Property(e => e.ResendWizardId).HasColumnName("resend_wizard_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_resend_partner_create_uid_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_resend_partner_partner_id_fkey");

            entity.HasOne(d => d.ResendWizard).WithMany(p => p.MailResendPartners)
                .HasForeignKey(d => d.ResendWizardId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_resend_partner_resend_wizard_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_resend_partner_write_uid_fkey");
        });

        modelBuilder.Entity<MailShortcode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_shortcode_pkey");

            entity.ToTable("mail_shortcode");

            entity.HasIndex(e => e.Source, "mail_shortcode_source_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Source).HasColumnName("source");
            entity.Property(e => e.Substitution).HasColumnName("substitution");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_shortcode_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_shortcode_write_uid_fkey");
        });

        modelBuilder.Entity<MailTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_template_pkey");

            entity.ToTable("mail_template");

            entity.HasIndex(e => e.Model, "mail_template_model_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AutoDelete).HasColumnName("auto_delete");
            entity.Property(e => e.BodyHtml)
                .HasColumnType("jsonb")
                .HasColumnName("body_html");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.EmailCc).HasColumnName("email_cc");
            entity.Property(e => e.EmailFrom).HasColumnName("email_from");
            entity.Property(e => e.EmailTo).HasColumnName("email_to");
            entity.Property(e => e.Lang).HasColumnName("lang");
            entity.Property(e => e.MailServerId).HasColumnName("mail_server_id");
            entity.Property(e => e.Model).HasColumnName("model");
            entity.Property(e => e.ModelId).HasColumnName("model_id");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PartnerTo).HasColumnName("partner_to");
            entity.Property(e => e.RefIrActWindow).HasColumnName("ref_ir_act_window");
            entity.Property(e => e.ReplyTo).HasColumnName("reply_to");
            entity.Property(e => e.ReportName)
                .HasColumnType("jsonb")
                .HasColumnName("report_name");
            entity.Property(e => e.ReportTemplate).HasColumnName("report_template");
            entity.Property(e => e.ScheduledDate).HasColumnName("scheduled_date");
            entity.Property(e => e.Subject)
                .HasColumnType("jsonb")
                .HasColumnName("subject");
            entity.Property(e => e.TemplateFs).HasColumnName("template_fs");
            entity.Property(e => e.UseDefaultTo).HasColumnName("use_default_to");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_template_create_uid_fkey");

            entity.HasOne(d => d.MailServer).WithMany(p => p.MailTemplates)
                .HasForeignKey(d => d.MailServerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_template_mail_server_id_fkey");

            entity.HasOne(d => d.ModelNavigation).WithMany(p => p.MailTemplates)
                .HasForeignKey(d => d.ModelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_template_model_id_fkey");

            entity.HasOne(d => d.RefIrActWindowNavigation).WithMany(p => p.MailTemplates)
                .HasForeignKey(d => d.RefIrActWindow)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_template_ref_ir_act_window_fkey");

            entity.HasOne(d => d.ReportTemplateNavigation).WithMany(p => p.MailTemplates)
                .HasForeignKey(d => d.ReportTemplate)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_template_report_template_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_template_write_uid_fkey");

            //entity.HasMany(d => d.Attachments).WithMany(p => p.EmailTemplates)
            entity.HasMany<IrAttachment>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "EmailTemplateAttachmentRel",
                    r => r.HasOne<IrAttachment>().WithMany()
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("email_template_attachment_rel_attachment_id_fkey"),
                    l => l.HasOne<MailTemplate>().WithMany()
                        .HasForeignKey("EmailTemplateId")
                        .HasConstraintName("email_template_attachment_rel_email_template_id_fkey"),
                    j =>
                    {
                        j.HasKey("EmailTemplateId", "AttachmentId").HasName("email_template_attachment_rel_pkey");
                        j.ToTable("email_template_attachment_rel");
                        j.HasIndex(new[] { "AttachmentId", "EmailTemplateId" }, "email_template_attachment_rel_attachment_id_email_template__idx");
                    });
        });

        modelBuilder.Entity<MailTemplatePreview>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_template_preview_pkey");

            entity.ToTable("mail_template_preview");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ErrorMsg).HasColumnName("error_msg");
            entity.Property(e => e.Lang).HasColumnName("lang");
            entity.Property(e => e.MailTemplateId).HasColumnName("mail_template_id");
            entity.Property(e => e.ResourceRef).HasColumnName("resource_ref");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_template_preview_create_uid_fkey");

            entity.HasOne(d => d.MailTemplate).WithMany(p => p.MailTemplatePreviews)
                .HasForeignKey(d => d.MailTemplateId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_template_preview_mail_template_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_template_preview_write_uid_fkey");
        });

        modelBuilder.Entity<MailTemplateReset>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_template_reset_pkey");

            entity.ToTable("mail_template_reset");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_template_reset_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_template_reset_write_uid_fkey");

            //entity.HasMany(d => d.MailTemplates).WithMany(p => p.MailTemplateResets)
            entity.HasMany<MailTemplate>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MailTemplateMailTemplateResetRel",
                    r => r.HasOne<MailTemplate>().WithMany()
                        .HasForeignKey("MailTemplateId")
                        .HasConstraintName("mail_template_mail_template_reset_rel_mail_template_id_fkey"),
                    l => l.HasOne<MailTemplateReset>().WithMany()
                        .HasForeignKey("MailTemplateResetId")
                        .HasConstraintName("mail_template_mail_template_reset_r_mail_template_reset_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailTemplateResetId", "MailTemplateId").HasName("mail_template_mail_template_reset_rel_pkey");
                        j.ToTable("mail_template_mail_template_reset_rel");
                        j.HasIndex(new[] { "MailTemplateId", "MailTemplateResetId" }, "mail_template_mail_template_r_mail_template_id_mail_templat_idx");
                    });
        });

        modelBuilder.Entity<MailTrackingValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_tracking_value_pkey");

            entity.ToTable("mail_tracking_value");

            entity.HasIndex(e => e.Field, "mail_tracking_value_field_index");

            entity.HasIndex(e => e.MailMessageId, "mail_tracking_value_mail_message_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.Field).HasColumnName("field");
            entity.Property(e => e.FieldDesc).HasColumnName("field_desc");
            entity.Property(e => e.FieldType).HasColumnName("field_type");
            entity.Property(e => e.MailMessageId).HasColumnName("mail_message_id");
            entity.Property(e => e.NewValueChar).HasColumnName("new_value_char");
            entity.Property(e => e.NewValueDatetime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("new_value_datetime");
            entity.Property(e => e.NewValueFloat).HasColumnName("new_value_float");
            entity.Property(e => e.NewValueInteger).HasColumnName("new_value_integer");
            entity.Property(e => e.NewValueMonetary).HasColumnName("new_value_monetary");
            entity.Property(e => e.NewValueText).HasColumnName("new_value_text");
            entity.Property(e => e.OldValueChar).HasColumnName("old_value_char");
            entity.Property(e => e.OldValueDatetime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("old_value_datetime");
            entity.Property(e => e.OldValueFloat).HasColumnName("old_value_float");
            entity.Property(e => e.OldValueInteger).HasColumnName("old_value_integer");
            entity.Property(e => e.OldValueMonetary).HasColumnName("old_value_monetary");
            entity.Property(e => e.OldValueText).HasColumnName("old_value_text");
            entity.Property(e => e.TrackingSequence).HasColumnName("tracking_sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_tracking_value_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_tracking_value_currency_id_fkey");

            entity.HasOne(d => d.FieldNavigation).WithMany(p => p.MailTrackingValues)
                .HasForeignKey(d => d.Field)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_tracking_value_field_fkey");

            entity.HasOne(d => d.MailMessage).WithMany(p => p.MailTrackingValues)
                .HasForeignKey(d => d.MailMessageId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mail_tracking_value_mail_message_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_tracking_value_write_uid_fkey");
        });

        modelBuilder.Entity<MailWizardInvite>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mail_wizard_invite_pkey");

            entity.ToTable("mail_wizard_invite");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Message).HasColumnName("message");
            entity.Property(e => e.ResId).HasColumnName("res_id");
            entity.Property(e => e.ResModel).HasColumnName("res_model");
            entity.Property(e => e.SendMail).HasColumnName("send_mail");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_wizard_invite_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mail_wizard_invite_write_uid_fkey");

            //entity.HasMany(d => d.ResPartners).WithMany(p => p.MailWizardInvites)
            entity.HasMany<ResPartner>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MailWizardInviteResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("mail_wizard_invite_res_partner_rel_res_partner_id_fkey"),
                    l => l.HasOne<MailWizardInvite>().WithMany()
                        .HasForeignKey("MailWizardInviteId")
                        .HasConstraintName("mail_wizard_invite_res_partner_rel_mail_wizard_invite_id_fkey"),
                    j =>
                    {
                        j.HasKey("MailWizardInviteId", "ResPartnerId").HasName("mail_wizard_invite_res_partner_rel_pkey");
                        j.ToTable("mail_wizard_invite_res_partner_rel");
                        j.HasIndex(new[] { "ResPartnerId", "MailWizardInviteId" }, "mail_wizard_invite_res_partne_res_partner_id_mail_wizard_in_idx");
                    });
        });

        modelBuilder.Entity<MaintenanceEquipment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("maintenance_equipment_pkey");

            entity.ToTable("maintenance_equipment");

            entity.HasIndex(e => e.SerialNo, "maintenance_equipment_serial_no").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AssignDate).HasColumnName("assign_date");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DepartmentId).HasColumnName("department_id");
            entity.Property(e => e.EffectiveDate).HasColumnName("effective_date");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.EquipmentAssignTo).HasColumnName("equipment_assign_to");
            entity.Property(e => e.Location).HasColumnName("location");
            entity.Property(e => e.MaintenanceCount).HasColumnName("maintenance_count");
            entity.Property(e => e.MaintenanceDuration).HasColumnName("maintenance_duration");
            entity.Property(e => e.MaintenanceOpenCount).HasColumnName("maintenance_open_count");
            entity.Property(e => e.MaintenanceTeamId).HasColumnName("maintenance_team_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Model).HasColumnName("model");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.NextActionDate).HasColumnName("next_action_date");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OwnerUserId).HasColumnName("owner_user_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PartnerRef).HasColumnName("partner_ref");
            entity.Property(e => e.Period).HasColumnName("period");
            entity.Property(e => e.ScrapDate).HasColumnName("scrap_date");
            entity.Property(e => e.SerialNo).HasColumnName("serial_no");
            entity.Property(e => e.TechnicianUserId).HasColumnName("technician_user_id");
            entity.Property(e => e.WarrantyDate).HasColumnName("warranty_date");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Category).WithMany(p => p.MaintenanceEquipments)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_category_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_create_uid_fkey");

            entity.HasOne(d => d.Department).WithMany(p => p.MaintenanceEquipments)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_department_id_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.MaintenanceEquipments)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_employee_id_fkey");

            entity.HasOne(d => d.MaintenanceTeam).WithMany(p => p.MaintenanceEquipments)
                .HasForeignKey(d => d.MaintenanceTeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_maintenance_team_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.MaintenanceEquipments)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_message_main_attachment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.OwnerUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_owner_user_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_partner_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.TechnicianUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_technician_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_write_uid_fkey");
        });

        modelBuilder.Entity<MaintenanceEquipmentCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("maintenance_equipment_category_pkey");

            entity.ToTable("maintenance_equipment_category");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AliasId).HasColumnName("alias_id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Fold).HasColumnName("fold");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Note)
                .HasColumnType("jsonb")
                .HasColumnName("note");
            entity.Property(e => e.TechnicianUserId).HasColumnName("technician_user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Alias).WithMany(p => p.MaintenanceEquipmentCategories)
                .HasForeignKey(d => d.AliasId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("maintenance_equipment_category_alias_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_category_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_category_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.MaintenanceEquipmentCategories)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_category_message_main_attachment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.TechnicianUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_category_technician_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_equipment_category_write_uid_fkey");
        });

        modelBuilder.Entity<MaintenanceRequest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("maintenance_request_pkey");

            entity.ToTable("maintenance_request");

            entity.HasIndex(e => e.EquipmentId, "maintenance_request_equipment_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Archive).HasColumnName("archive");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.CloseDate).HasColumnName("close_date");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.EmailCc).HasColumnName("email_cc");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.EquipmentId).HasColumnName("equipment_id");
            entity.Property(e => e.KanbanState).HasColumnName("kanban_state");
            entity.Property(e => e.MaintenanceTeamId).HasColumnName("maintenance_team_id");
            entity.Property(e => e.MaintenanceType).HasColumnName("maintenance_type");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OwnerUserId).HasColumnName("owner_user_id");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.RequestDate).HasColumnName("request_date");
            entity.Property(e => e.ScheduleDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("schedule_date");
            entity.Property(e => e.StageId).HasColumnName("stage_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Category).WithMany(p => p.MaintenanceRequests)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_request_category_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_request_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_request_create_uid_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.MaintenanceRequests)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_request_employee_id_fkey");

            entity.HasOne(d => d.Equipment).WithMany(p => p.MaintenanceRequests)
                .HasForeignKey(d => d.EquipmentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("maintenance_request_equipment_id_fkey");

            entity.HasOne(d => d.MaintenanceTeam).WithMany(p => p.MaintenanceRequests)
                .HasForeignKey(d => d.MaintenanceTeamId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("maintenance_request_maintenance_team_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.MaintenanceRequests)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_request_message_main_attachment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.OwnerUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_request_owner_user_id_fkey");

            entity.HasOne(d => d.Stage).WithMany(p => p.MaintenanceRequests)
                .HasForeignKey(d => d.StageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("maintenance_request_stage_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_request_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_request_write_uid_fkey");
        });

        modelBuilder.Entity<MaintenanceStage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("maintenance_stage_pkey");

            entity.ToTable("maintenance_stage");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Done).HasColumnName("done");
            entity.Property(e => e.Fold).HasColumnName("fold");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                //.ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_stage_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_stage_write_uid_fkey");
        });

        modelBuilder.Entity<MaintenanceTeam>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("maintenance_team_pkey");

            entity.ToTable("maintenance_team");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_team_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_team_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("maintenance_team_write_uid_fkey");

            //entity.HasMany(d => d.ResUsers).WithMany(p => p.MaintenanceTeams)
            entity.HasMany<ResUser>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MaintenanceTeamUsersRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("ResUsersId")
                        .HasConstraintName("maintenance_team_users_rel_res_users_id_fkey"),
                    l => l.HasOne<MaintenanceTeam>().WithMany()
                        .HasForeignKey("MaintenanceTeamId")
                        .HasConstraintName("maintenance_team_users_rel_maintenance_team_id_fkey"),
                    j =>
                    {
                        j.HasKey("MaintenanceTeamId", "ResUsersId").HasName("maintenance_team_users_rel_pkey");
                        j.ToTable("maintenance_team_users_rel");
                        j.HasIndex(new[] { "ResUsersId", "MaintenanceTeamId" }, "maintenance_team_users_rel_res_users_id_maintenance_team_id_idx");
                    });
        });

        modelBuilder.Entity<MrpBom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_bom_pkey");

            entity.ToTable("mrp_bom");

            entity.HasIndex(e => e.TenantId, "mrp_bom_company_id_index");

            entity.HasIndex(e => e.ProductId, "mrp_bom_product_id_index");

            entity.HasIndex(e => e.ProductTmplId, "mrp_bom_product_tmpl_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AllowOperationDependencies).HasColumnName("allow_operation_dependencies");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.Consumption).HasColumnName("consumption");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.PickingTypeId).HasColumnName("picking_type_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductQty).HasColumnName("product_qty");
            entity.Property(e => e.ProductTmplId).HasColumnName("product_tmpl_id");
            entity.Property(e => e.ProductUomId).HasColumnName("product_uom_id");
            entity.Property(e => e.ReadyToProduce).HasColumnName("ready_to_produce");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.MrpBoms)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_message_main_attachment_id_fkey");

            entity.HasOne(d => d.PickingType).WithMany(p => p.MrpBoms)
                .HasForeignKey(d => d.PickingTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_picking_type_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.MrpBoms)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_product_id_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.MrpBoms)
                .HasForeignKey(d => d.ProductTmplId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_bom_product_tmpl_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.MrpBoms)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_bom_product_uom_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_write_uid_fkey");
        });

        modelBuilder.Entity<MrpBomByproduct>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_bom_byproduct_pkey");

            entity.ToTable("mrp_bom_byproduct");

            entity.HasIndex(e => e.BomId, "mrp_bom_byproduct_bom_id_index");

            entity.HasIndex(e => e.TenantId, "mrp_bom_byproduct_company_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.BomId).HasColumnName("bom_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CostShare).HasColumnName("cost_share");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.OperationId).HasColumnName("operation_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductQty).HasColumnName("product_qty");
            entity.Property(e => e.ProductUomId).HasColumnName("product_uom_id");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Bom).WithMany(p => p.MrpBomByproducts)
                .HasForeignKey(d => d.BomId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mrp_bom_byproduct_bom_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_byproduct_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_byproduct_create_uid_fkey");

            entity.HasOne(d => d.Operation).WithMany(p => p.MrpBomByproducts)
                .HasForeignKey(d => d.OperationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_byproduct_operation_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.MrpBomByproducts)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_bom_byproduct_product_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.MrpBomByproducts)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_bom_byproduct_product_uom_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_byproduct_write_uid_fkey");

            //entity.HasMany(d => d.ProductTemplateAttributeValues).WithMany(p => p.MrpBomByproducts)
            entity.HasMany<ProductTemplateAttributeValue>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MrpBomByproductProductTemplateAttributeValueRel",
                    r => r.HasOne<ProductTemplateAttributeValue>().WithMany()
                        .HasForeignKey("ProductTemplateAttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_bom_byproduct_product_tem_product_template_attribute_v_fkey"),
                    l => l.HasOne<MrpBomByproduct>().WithMany()
                        .HasForeignKey("MrpBomByproductId")
                        .HasConstraintName("mrp_bom_byproduct_product_template_at_mrp_bom_byproduct_id_fkey"),
                    j =>
                    {
                        j.HasKey("MrpBomByproductId", "ProductTemplateAttributeValueId").HasName("mrp_bom_byproduct_product_template_attribute_value_rel_pkey");
                        j.ToTable("mrp_bom_byproduct_product_template_attribute_value_rel");
                        j.HasIndex(new[] { "ProductTemplateAttributeValueId", "MrpBomByproductId" }, "mrp_bom_byproduct_product_tem_product_template_attribute_va_idx");
                    });
        });

        modelBuilder.Entity<MrpBomLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_bom_line_pkey");

            entity.ToTable("mrp_bom_line");

            entity.HasIndex(e => e.BomId, "mrp_bom_line_bom_id_index");

            entity.HasIndex(e => e.TenantId, "mrp_bom_line_company_id_index");

            entity.HasIndex(e => e.ProductTmplId, "mrp_bom_line_product_tmpl_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.BomId).HasColumnName("bom_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CostShare).HasColumnName("cost_share");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ManualConsumption).HasColumnName("manual_consumption");
            entity.Property(e => e.OperationId).HasColumnName("operation_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductQty).HasColumnName("product_qty");
            entity.Property(e => e.ProductTmplId).HasColumnName("product_tmpl_id");
            entity.Property(e => e.ProductUomId).HasColumnName("product_uom_id");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Bom).WithMany(p => p.MrpBomLines)
                .HasForeignKey(d => d.BomId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mrp_bom_line_bom_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_line_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_line_create_uid_fkey");

            entity.HasOne(d => d.Operation).WithMany(p => p.MrpBomLines)
                .HasForeignKey(d => d.OperationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_line_operation_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.MrpBomLines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_bom_line_product_id_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.MrpBomLines)
                .HasForeignKey(d => d.ProductTmplId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_line_product_tmpl_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.MrpBomLines)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_bom_line_product_uom_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_bom_line_write_uid_fkey");

            //entity.HasMany(d => d.ProductTemplateAttributeValues).WithMany(p => p.MrpBomLines)
            entity.HasMany<ProductTemplateAttributeValue>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MrpBomLineProductTemplateAttributeValueRel",
                    r => r.HasOne<ProductTemplateAttributeValue>().WithMany()
                        .HasForeignKey("ProductTemplateAttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_bom_line_product_template_product_template_attribute_v_fkey"),
                    l => l.HasOne<MrpBomLine>().WithMany()
                        .HasForeignKey("MrpBomLineId")
                        .HasConstraintName("mrp_bom_line_product_template_attribute_va_mrp_bom_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("MrpBomLineId", "ProductTemplateAttributeValueId").HasName("mrp_bom_line_product_template_attribute_value_rel_pkey");
                        j.ToTable("mrp_bom_line_product_template_attribute_value_rel");
                        j.HasIndex(new[] { "ProductTemplateAttributeValueId", "MrpBomLineId" }, "mrp_bom_line_product_template_product_template_attribute_va_idx");
                    });
        });

        modelBuilder.Entity<MrpConsumptionWarning>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_consumption_warning_pkey");

            entity.ToTable("mrp_consumption_warning");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_consumption_warning_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_consumption_warning_write_uid_fkey");

            //entity.HasMany(d => d.MrpProductions).WithMany(p => p.MrpConsumptionWarnings)
            entity.HasMany<MrpProduction>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MrpConsumptionWarningMrpProductionRel",
                    r => r.HasOne<MrpProduction>().WithMany()
                        .HasForeignKey("MrpProductionId")
                        .HasConstraintName("mrp_consumption_warning_mrp_production_r_mrp_production_id_fkey"),
                    l => l.HasOne<MrpConsumptionWarning>().WithMany()
                        .HasForeignKey("MrpConsumptionWarningId")
                        .HasConstraintName("mrp_consumption_warning_mrp_pro_mrp_consumption_warning_id_fkey"),
                    j =>
                    {
                        j.HasKey("MrpConsumptionWarningId", "MrpProductionId").HasName("mrp_consumption_warning_mrp_production_rel_pkey");
                        j.ToTable("mrp_consumption_warning_mrp_production_rel");
                        j.HasIndex(new[] { "MrpProductionId", "MrpConsumptionWarningId" }, "mrp_consumption_warning_mrp_p_mrp_production_id_mrp_consump_idx");
                    });
        });

        modelBuilder.Entity<MrpConsumptionWarningLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_consumption_warning_line_pkey");

            entity.ToTable("mrp_consumption_warning_line");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.MrpConsumptionWarningId).HasColumnName("mrp_consumption_warning_id");
            entity.Property(e => e.MrpProductionId).HasColumnName("mrp_production_id");
            entity.Property(e => e.ProductConsumedQtyUom).HasColumnName("product_consumed_qty_uom");
            entity.Property(e => e.ProductExpectedQtyUom).HasColumnName("product_expected_qty_uom");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_consumption_warning_line_create_uid_fkey");

            entity.HasOne(d => d.MrpConsumptionWarning).WithMany(p => p.MrpConsumptionWarningLines)
                .HasForeignKey(d => d.MrpConsumptionWarningId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mrp_consumption_warning_line_mrp_consumption_warning_id_fkey");

            entity.HasOne(d => d.MrpProduction).WithMany(p => p.MrpConsumptionWarningLines)
                .HasForeignKey(d => d.MrpProductionId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mrp_consumption_warning_line_mrp_production_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.MrpConsumptionWarningLines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mrp_consumption_warning_line_product_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_consumption_warning_line_write_uid_fkey");
        });

        modelBuilder.Entity<MrpDocument>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_document_pkey");

            entity.ToTable("mrp_document");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.IrAttachmentId).HasColumnName("ir_attachment_id");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_document_create_uid_fkey");

            entity.HasOne(d => d.IrAttachment).WithMany(p => p.MrpDocuments)
                .HasForeignKey(d => d.IrAttachmentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mrp_document_ir_attachment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_document_write_uid_fkey");
        });

        modelBuilder.Entity<MrpImmediateProduction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_immediate_production_pkey");

            entity.ToTable("mrp_immediate_production");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_immediate_production_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_immediate_production_write_uid_fkey");

            //entity.HasMany(d => d.MrpProductions).WithMany(p => p.MrpImmediateProductions)
            entity.HasMany<MrpProduction>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MrpProductionProductionRel",
                    r => r.HasOne<MrpProduction>().WithMany()
                        .HasForeignKey("MrpProductionId")
                        .HasConstraintName("mrp_production_production_rel_mrp_production_id_fkey"),
                    l => l.HasOne<MrpImmediateProduction>().WithMany()
                        .HasForeignKey("MrpImmediateProductionId")
                        .HasConstraintName("mrp_production_production_rel_mrp_immediate_production_id_fkey"),
                    j =>
                    {
                        j.HasKey("MrpImmediateProductionId", "MrpProductionId").HasName("mrp_production_production_rel_pkey");
                        j.ToTable("mrp_production_production_rel");
                        j.HasIndex(new[] { "MrpProductionId", "MrpImmediateProductionId" }, "mrp_production_production_rel_mrp_production_id_mrp_immedia_idx");
                    });
        });

        modelBuilder.Entity<MrpImmediateProductionLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_immediate_production_line_pkey");

            entity.ToTable("mrp_immediate_production_line");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ImmediateProductionId).HasColumnName("immediate_production_id");
            entity.Property(e => e.ProductionId).HasColumnName("production_id");
            entity.Property(e => e.ToImmediate).HasColumnName("to_immediate");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_immediate_production_line_create_uid_fkey");

            entity.HasOne(d => d.ImmediateProduction).WithMany(p => p.MrpImmediateProductionLines)
                .HasForeignKey(d => d.ImmediateProductionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_immediate_production_line_immediate_production_id_fkey");

            entity.HasOne(d => d.Production).WithMany(p => p.MrpImmediateProductionLines)
                .HasForeignKey(d => d.ProductionId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mrp_immediate_production_line_production_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_immediate_production_line_write_uid_fkey");
        });

        modelBuilder.Entity<MrpProduction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_production_pkey");

            entity.ToTable("mrp_production");

            entity.HasIndex(e => e.TenantId, "mrp_production_company_id_index");

            entity.HasIndex(e => e.DatePlannedStart, "mrp_production_date_planned_start_index");

            entity.HasIndex(e => new { e.Name, e.TenantId }, "mrp_production_name_uniq").IsUnique();

            entity.HasIndex(e => e.OrderpointId, "mrp_production_orderpoint_id_index").HasFilter("(orderpoint_id IS NOT NULL)");

            entity.HasIndex(e => e.PickingTypeId, "mrp_production_picking_type_id_index");

            entity.HasIndex(e => e.ReservationState, "mrp_production_reservation_state_index");

            entity.HasIndex(e => e.State, "mrp_production_state_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AllowWorkorderDependencies).HasColumnName("allow_workorder_dependencies");
            entity.Property(e => e.AnalyticAccountId).HasColumnName("analytic_account_id");
            entity.Property(e => e.BackorderSequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("backorder_sequence");
            entity.Property(e => e.BomId).HasColumnName("bom_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.Consumption).HasColumnName("consumption");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateDeadline)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_deadline");
            entity.Property(e => e.DateFinished)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_finished");
            entity.Property(e => e.DatePlannedFinished)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_planned_finished");
            entity.Property(e => e.DatePlannedStart)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_planned_start");
            entity.Property(e => e.DateStart)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_start");
            entity.Property(e => e.ExtraCost).HasColumnName("extra_cost");
            entity.Property(e => e.IsLocked).HasColumnName("is_locked");
            entity.Property(e => e.IsPlanned).HasColumnName("is_planned");
            entity.Property(e => e.LocationDestId).HasColumnName("location_dest_id");
            entity.Property(e => e.LocationSrcId).HasColumnName("location_src_id");
            entity.Property(e => e.LotProducingId).HasColumnName("lot_producing_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OrderpointId).HasColumnName("orderpoint_id");
            entity.Property(e => e.Origin).HasColumnName("origin");
            entity.Property(e => e.PickingTypeId).HasColumnName("picking_type_id");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.ProcurementGroupId).HasColumnName("procurement_group_id");
            entity.Property(e => e.ProductDescriptionVariants).HasColumnName("product_description_variants");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductQty).HasColumnName("product_qty");
            entity.Property(e => e.ProductUomId).HasColumnName("product_uom_id");
            entity.Property(e => e.ProductUomQty).HasColumnName("product_uom_qty");
            entity.Property(e => e.ProductionLocationId).HasColumnName("production_location_id");
            entity.Property(e => e.PropagateCancel).HasColumnName("propagate_cancel");
            entity.Property(e => e.QtyProducing).HasColumnName("qty_producing");
            entity.Property(e => e.ReservationState).HasColumnName("reservation_state");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AnalyticAccount).WithMany(p => p.MrpProductions)
                .HasForeignKey(d => d.AnalyticAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_analytic_account_id_fkey");

            entity.HasOne(d => d.Bom).WithMany(p => p.MrpProductions)
                .HasForeignKey(d => d.BomId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_bom_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_production_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_create_uid_fkey");

            entity.HasOne(d => d.LocationDest).WithMany(p => p.MrpProductionLocationDests)
                .HasForeignKey(d => d.LocationDestId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_production_location_dest_id_fkey");

            entity.HasOne(d => d.LocationSrc).WithMany(p => p.MrpProductionLocationSrcs)
                .HasForeignKey(d => d.LocationSrcId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_production_location_src_id_fkey");

            entity.HasOne(d => d.LotProducing).WithMany(p => p.MrpProductions)
                .HasForeignKey(d => d.LotProducingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_lot_producing_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.MrpProductions)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Orderpoint).WithMany(p => p.MrpProductions)
                .HasForeignKey(d => d.OrderpointId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_orderpoint_id_fkey");

            entity.HasOne(d => d.PickingType).WithMany(p => p.MrpProductions)
                .HasForeignKey(d => d.PickingTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_production_picking_type_id_fkey");

            entity.HasOne(d => d.ProcurementGroup).WithMany(p => p.MrpProductions)
                .HasForeignKey(d => d.ProcurementGroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_procurement_group_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.MrpProductions)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_production_product_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.MrpProductions)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_production_product_uom_id_fkey");

            entity.HasOne(d => d.ProductionLocation).WithMany(p => p.MrpProductionProductionLocations)
                .HasForeignKey(d => d.ProductionLocationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_production_location_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_write_uid_fkey");
        });

        modelBuilder.Entity<MrpProductionBackorder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_production_backorder_pkey");

            entity.ToTable("mrp_production_backorder");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_backorder_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_backorder_write_uid_fkey");

            //entity.HasMany(d => d.MrpProductions).WithMany(p => p.MrpProductionBackorders)
            entity.HasMany<MrpProduction>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MrpProductionMrpProductionBackorderRel",
                    r => r.HasOne<MrpProduction>().WithMany()
                        .HasForeignKey("MrpProductionId")
                        .HasConstraintName("mrp_production_mrp_production_backorder__mrp_production_id_fkey"),
                    l => l.HasOne<MrpProductionBackorder>().WithMany()
                        .HasForeignKey("MrpProductionBackorderId")
                        .HasConstraintName("mrp_production_mrp_production__mrp_production_backorder_id_fkey"),
                    j =>
                    {
                        j.HasKey("MrpProductionBackorderId", "MrpProductionId").HasName("mrp_production_mrp_production_backorder_rel_pkey");
                        j.ToTable("mrp_production_mrp_production_backorder_rel");
                        j.HasIndex(new[] { "MrpProductionId", "MrpProductionBackorderId" }, "mrp_production_mrp_production_mrp_production_id_mrp_product_idx");
                    });
        });

        modelBuilder.Entity<MrpProductionBackorderLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_production_backorder_line_pkey");

            entity.ToTable("mrp_production_backorder_line");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.MrpProductionBackorderId).HasColumnName("mrp_production_backorder_id");
            entity.Property(e => e.MrpProductionId).HasColumnName("mrp_production_id");
            entity.Property(e => e.ToBackorder).HasColumnName("to_backorder");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_backorder_line_create_uid_fkey");

            entity.HasOne(d => d.MrpProductionBackorder).WithMany(p => p.MrpProductionBackorderLines)
                .HasForeignKey(d => d.MrpProductionBackorderId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mrp_production_backorder_line_mrp_production_backorder_id_fkey");

            entity.HasOne(d => d.MrpProduction).WithMany(p => p.MrpProductionBackorderLines)
                .HasForeignKey(d => d.MrpProductionId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mrp_production_backorder_line_mrp_production_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_backorder_line_write_uid_fkey");
        });

        modelBuilder.Entity<MrpProductionSplit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_production_split_pkey");

            entity.ToTable("mrp_production_split");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Counter).HasColumnName("counter");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ProductionId).HasColumnName("production_id");
            entity.Property(e => e.ProductionSplitMultiId).HasColumnName("production_split_multi_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_split_create_uid_fkey");

            entity.HasOne(d => d.Production).WithMany(p => p.MrpProductionSplits)
                .HasForeignKey(d => d.ProductionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_split_production_id_fkey");

            entity.HasOne(d => d.ProductionSplitMulti).WithMany(p => p.MrpProductionSplits)
                .HasForeignKey(d => d.ProductionSplitMultiId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_split_production_split_multi_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_split_write_uid_fkey");
        });

        modelBuilder.Entity<MrpProductionSplitLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_production_split_line_pkey");

            entity.ToTable("mrp_production_split_line");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.MrpProductionSplitId).HasColumnName("mrp_production_split_id");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_split_line_create_uid_fkey");

            entity.HasOne(d => d.MrpProductionSplit).WithMany(p => p.MrpProductionSplitLines)
                .HasForeignKey(d => d.MrpProductionSplitId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mrp_production_split_line_mrp_production_split_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_split_line_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_split_line_write_uid_fkey");
        });

        modelBuilder.Entity<MrpProductionSplitMulti>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_production_split_multi_pkey");

            entity.ToTable("mrp_production_split_multi");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_split_multi_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_production_split_multi_write_uid_fkey");
        });

        modelBuilder.Entity<MrpRoutingWorkcenter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_routing_workcenter_pkey");

            entity.ToTable("mrp_routing_workcenter");

            entity.HasIndex(e => e.BomId, "mrp_routing_workcenter_bom_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.BomId).HasColumnName("bom_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.TimeCycleManual).HasColumnName("time_cycle_manual");
            entity.Property(e => e.TimeMode).HasColumnName("time_mode");
            entity.Property(e => e.TimeModeBatch).HasColumnName("time_mode_batch");
            entity.Property(e => e.WorkcenterId).HasColumnName("workcenter_id");
            entity.Property(e => e.WorksheetGoogleSlide).HasColumnName("worksheet_google_slide");
            entity.Property(e => e.WorksheetType).HasColumnName("worksheet_type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Bom).WithMany(p => p.MrpRoutingWorkcenters)
                .HasForeignKey(d => d.BomId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("mrp_routing_workcenter_bom_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_routing_workcenter_create_uid_fkey");

            entity.HasOne(d => d.Workcenter).WithMany(p => p.MrpRoutingWorkcenters)
                .HasForeignKey(d => d.WorkcenterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_routing_workcenter_workcenter_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_routing_workcenter_write_uid_fkey");

            //entity.HasMany(d => d.BlockedBies).WithMany(p => p.Operations)
            entity.HasMany<MrpRoutingWorkcenter>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MrpRoutingWorkcenterDependenciesRel",
                    r => r.HasOne<MrpRoutingWorkcenter>().WithMany()
                        .HasForeignKey("BlockedById")
                        .HasConstraintName("mrp_routing_workcenter_dependencies_rel_blocked_by_id_fkey"),
                    l => l.HasOne<MrpRoutingWorkcenter>().WithMany()
                        .HasForeignKey("OperationId")
                        .HasConstraintName("mrp_routing_workcenter_dependencies_rel_operation_id_fkey"),
                    j =>
                    {
                        j.HasKey("OperationId", "BlockedById").HasName("mrp_routing_workcenter_dependencies_rel_pkey");
                        j.ToTable("mrp_routing_workcenter_dependencies_rel");
                        j.HasIndex(new[] { "BlockedById", "OperationId" }, "mrp_routing_workcenter_dependenc_blocked_by_id_operation_id_idx");
                    });

            //entity.HasMany(d => d.Operations).WithMany(p => p.BlockedBies)
            entity.HasMany<MrpRoutingWorkcenter>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MrpRoutingWorkcenterDependenciesRel",
                    r => r.HasOne<MrpRoutingWorkcenter>().WithMany()
                        .HasForeignKey("OperationId")
                        .HasConstraintName("mrp_routing_workcenter_dependencies_rel_operation_id_fkey"),
                    l => l.HasOne<MrpRoutingWorkcenter>().WithMany()
                        .HasForeignKey("BlockedById")
                        .HasConstraintName("mrp_routing_workcenter_dependencies_rel_blocked_by_id_fkey"),
                    j =>
                    {
                        j.HasKey("OperationId", "BlockedById").HasName("mrp_routing_workcenter_dependencies_rel_pkey");
                        j.ToTable("mrp_routing_workcenter_dependencies_rel");
                        j.HasIndex(new[] { "BlockedById", "OperationId" }, "mrp_routing_workcenter_dependenc_blocked_by_id_operation_id_idx");
                    });

            //entity.HasMany(d => d.ProductTemplateAttributeValues).WithMany(p => p.MrpRoutingWorkcenters)
            entity.HasMany<ProductTemplateAttributeValue>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MrpRoutingWorkcenterProductTemplateAttributeValueRel",
                    r => r.HasOne<ProductTemplateAttributeValue>().WithMany()
                        .HasForeignKey("ProductTemplateAttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("mrp_routing_workcenter_produc_product_template_attribute_v_fkey"),
                    l => l.HasOne<MrpRoutingWorkcenter>().WithMany()
                        .HasForeignKey("MrpRoutingWorkcenterId")
                        .HasConstraintName("mrp_routing_workcenter_product_t_mrp_routing_workcenter_id_fkey"),
                    j =>
                    {
                        j.HasKey("MrpRoutingWorkcenterId", "ProductTemplateAttributeValueId").HasName("mrp_routing_workcenter_product_template_attribute_value_re_pkey");
                        j.ToTable("mrp_routing_workcenter_product_template_attribute_value_rel");
                        j.HasIndex(new[] { "ProductTemplateAttributeValueId", "MrpRoutingWorkcenterId" }, "mrp_routing_workcenter_produc_product_template_attribute_va_idx");
                    });
        });

        modelBuilder.Entity<MrpUnbuild>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_unbuild_pkey");

            entity.ToTable("mrp_unbuild");

            entity.HasIndex(e => e.TenantId, "mrp_unbuild_company_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.BomId).HasColumnName("bom_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LocationDestId).HasColumnName("location_dest_id");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.LotId).HasColumnName("lot_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.MoId).HasColumnName("mo_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductQty).HasColumnName("product_qty");
            entity.Property(e => e.ProductUomId).HasColumnName("product_uom_id");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Bom).WithMany(p => p.MrpUnbuilds)
                .HasForeignKey(d => d.BomId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_unbuild_bom_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_unbuild_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_unbuild_create_uid_fkey");

            entity.HasOne(d => d.LocationDest).WithMany(p => p.MrpUnbuildLocationDests)
                .HasForeignKey(d => d.LocationDestId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_unbuild_location_dest_id_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.MrpUnbuildLocations)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_unbuild_location_id_fkey");

            entity.HasOne(d => d.Lot).WithMany(p => p.MrpUnbuilds)
                .HasForeignKey(d => d.LotId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_unbuild_lot_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.MrpUnbuilds)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_unbuild_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Mo).WithMany(p => p.MrpUnbuilds)
                .HasForeignKey(d => d.MoId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_unbuild_mo_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.MrpUnbuilds)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_unbuild_product_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.MrpUnbuilds)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_unbuild_product_uom_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_unbuild_write_uid_fkey");
        });

        modelBuilder.Entity<MrpWorkcenter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_workcenter_pkey");

            entity.ToTable("mrp_workcenter");

            entity.HasIndex(e => e.TenantId, "mrp_workcenter_company_id_index");

            entity.HasIndex(e => e.ResourceCalendarId, "mrp_workcenter_resource_calendar_id_index");

            entity.HasIndex(e => e.ResourceId, "mrp_workcenter_resource_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CostsHour).HasColumnName("costs_hour");
            entity.Property(e => e.CostsHourAccountId).HasColumnName("costs_hour_account_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DefaultCapacity).HasColumnName("default_capacity");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OeeTarget).HasColumnName("oee_target");
            entity.Property(e => e.ResourceCalendarId).HasColumnName("resource_calendar_id");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.TimeEfficiency).HasColumnName("time_efficiency");
            entity.Property(e => e.TimeStart).HasColumnName("time_start");
            entity.Property(e => e.TimeStop).HasColumnName("time_stop");
            entity.Property(e => e.WorkingState).HasColumnName("working_state");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_company_id_fkey");

            entity.HasOne(d => d.CostsHourAccount).WithMany(p => p.MrpWorkcenters)
                .HasForeignKey(d => d.CostsHourAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_costs_hour_account_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_create_uid_fkey");

            entity.HasOne(d => d.ResourceCalendar).WithMany(p => p.MrpWorkcenters)
                .HasForeignKey(d => d.ResourceCalendarId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_resource_calendar_id_fkey");

            entity.HasOne(d => d.Resource).WithMany(p => p.MrpWorkcenters)
                .HasForeignKey(d => d.ResourceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_workcenter_resource_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_write_uid_fkey");

            //entity.HasMany(d => d.AlternativeWorkcenters).WithMany(p => p.Workcenters)
            entity.HasMany<MrpWorkcenter>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MrpWorkcenterAlternativeRel",
                    r => r.HasOne<MrpWorkcenter>().WithMany()
                        .HasForeignKey("AlternativeWorkcenterId")
                        .HasConstraintName("mrp_workcenter_alternative_rel_alternative_workcenter_id_fkey"),
                    l => l.HasOne<MrpWorkcenter>().WithMany()
                        .HasForeignKey("WorkcenterId")
                        .HasConstraintName("mrp_workcenter_alternative_rel_workcenter_id_fkey"),
                    j =>
                    {
                        j.HasKey("WorkcenterId", "AlternativeWorkcenterId").HasName("mrp_workcenter_alternative_rel_pkey");
                        j.ToTable("mrp_workcenter_alternative_rel");
                        j.HasIndex(new[] { "AlternativeWorkcenterId", "WorkcenterId" }, "mrp_workcenter_alternative_re_alternative_workcenter_id_wor_idx");
                    });

            //entity.HasMany(d => d.MrpWorkcenterTags).WithMany(p => p.MrpWorkcenters)
            entity.HasMany<MrpWorkcenterTag>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MrpWorkcenterMrpWorkcenterTagRel",
                    r => r.HasOne<MrpWorkcenterTag>().WithMany()
                        .HasForeignKey("MrpWorkcenterTagId")
                        .HasConstraintName("mrp_workcenter_mrp_workcenter_tag_re_mrp_workcenter_tag_id_fkey"),
                    l => l.HasOne<MrpWorkcenter>().WithMany()
                        .HasForeignKey("MrpWorkcenterId")
                        .HasConstraintName("mrp_workcenter_mrp_workcenter_tag_rel_mrp_workcenter_id_fkey"),
                    j =>
                    {
                        j.HasKey("MrpWorkcenterId", "MrpWorkcenterTagId").HasName("mrp_workcenter_mrp_workcenter_tag_rel_pkey");
                        j.ToTable("mrp_workcenter_mrp_workcenter_tag_rel");
                        j.HasIndex(new[] { "MrpWorkcenterTagId", "MrpWorkcenterId" }, "mrp_workcenter_mrp_workcenter_mrp_workcenter_tag_id_mrp_wor_idx");
                    });

            //entity.HasMany(d => d.Workcenters).WithMany(p => p.AlternativeWorkcenters)
            entity.HasMany<MrpWorkcenter>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MrpWorkcenterAlternativeRel",
                    r => r.HasOne<MrpWorkcenter>().WithMany()
                        .HasForeignKey("WorkcenterId")
                        .HasConstraintName("mrp_workcenter_alternative_rel_workcenter_id_fkey"),
                    l => l.HasOne<MrpWorkcenter>().WithMany()
                        .HasForeignKey("AlternativeWorkcenterId")
                        .HasConstraintName("mrp_workcenter_alternative_rel_alternative_workcenter_id_fkey"),
                    j =>
                    {
                        j.HasKey("WorkcenterId", "AlternativeWorkcenterId").HasName("mrp_workcenter_alternative_rel_pkey");
                        j.ToTable("mrp_workcenter_alternative_rel");
                        j.HasIndex(new[] { "AlternativeWorkcenterId", "WorkcenterId" }, "mrp_workcenter_alternative_re_alternative_workcenter_id_wor_idx");
                    });
        });

        modelBuilder.Entity<MrpWorkcenterCapacity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_workcenter_capacity_pkey");

            entity.ToTable("mrp_workcenter_capacity");

            entity.HasIndex(e => new { e.WorkcenterId, e.ProductId }, "mrp_workcenter_capacity_unique_product").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Capacity).HasColumnName("capacity");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.TimeStart).HasColumnName("time_start");
            entity.Property(e => e.TimeStop).HasColumnName("time_stop");
            entity.Property(e => e.WorkcenterId).HasColumnName("workcenter_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_capacity_create_uid_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.MrpWorkcenterCapacities)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_workcenter_capacity_product_id_fkey");

            entity.HasOne(d => d.Workcenter).WithMany(p => p.MrpWorkcenterCapacities)
                .HasForeignKey(d => d.WorkcenterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_workcenter_capacity_workcenter_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_capacity_write_uid_fkey");
        });

        modelBuilder.Entity<MrpWorkcenterProductivity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_workcenter_productivity_pkey");

            entity.ToTable("mrp_workcenter_productivity");

            entity.HasIndex(e => e.TenantId, "mrp_workcenter_productivity_company_id_index");

            entity.HasIndex(e => e.WorkcenterId, "mrp_workcenter_productivity_workcenter_id_index");

            entity.HasIndex(e => e.WorkorderId, "mrp_workcenter_productivity_workorder_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CostAlreadyRecorded).HasColumnName("cost_already_recorded");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateEnd)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_end");
            entity.Property(e => e.DateStart)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_start");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.LossId).HasColumnName("loss_id");
            entity.Property(e => e.LossType).HasColumnName("loss_type");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.WorkcenterId).HasColumnName("workcenter_id");
            entity.Property(e => e.WorkorderId).HasColumnName("workorder_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_workcenter_productivity_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_productivity_create_uid_fkey");

            entity.HasOne(d => d.Loss).WithMany(p => p.MrpWorkcenterProductivities)
                .HasForeignKey(d => d.LossId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_workcenter_productivity_loss_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_productivity_user_id_fkey");

            entity.HasOne(d => d.Workcenter).WithMany(p => p.MrpWorkcenterProductivities)
                .HasForeignKey(d => d.WorkcenterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_workcenter_productivity_workcenter_id_fkey");

            entity.HasOne(d => d.Workorder).WithMany(p => p.MrpWorkcenterProductivities)
                .HasForeignKey(d => d.WorkorderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_productivity_workorder_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_productivity_write_uid_fkey");
        });

        modelBuilder.Entity<MrpWorkcenterProductivityLoss>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_workcenter_productivity_loss_pkey");

            entity.ToTable("mrp_workcenter_productivity_loss");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LossId).HasColumnName("loss_id");
            entity.Property(e => e.LossType).HasColumnName("loss_type");
            entity.Property(e => e.Manual).HasColumnName("manual");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_productivity_loss_create_uid_fkey");

            entity.HasOne(d => d.Loss).WithMany(p => p.MrpWorkcenterProductivityLosses)
                .HasForeignKey(d => d.LossId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_productivity_loss_loss_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_productivity_loss_write_uid_fkey");
        });

        modelBuilder.Entity<MrpWorkcenterProductivityLossType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_workcenter_productivity_loss_type_pkey");

            entity.ToTable("mrp_workcenter_productivity_loss_type");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LossType).HasColumnName("loss_type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_productivity_loss_type_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_productivity_loss_type_write_uid_fkey");
        });

        modelBuilder.Entity<MrpWorkcenterTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_workcenter_tag_pkey");

            entity.ToTable("mrp_workcenter_tag");

            entity.HasIndex(e => e.Name, "mrp_workcenter_tag_tag_name_unique").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_tag_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workcenter_tag_write_uid_fkey");
        });

        modelBuilder.Entity<MrpWorkorder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("mrp_workorder_pkey");

            entity.ToTable("mrp_workorder");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CostsHour).HasColumnName("costs_hour");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFinished)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_finished");
            entity.Property(e => e.DatePlannedFinished)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_planned_finished");
            entity.Property(e => e.DatePlannedStart)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_planned_start");
            entity.Property(e => e.DateStart)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_start");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.DurationExpected).HasColumnName("duration_expected");
            entity.Property(e => e.DurationPercent).HasColumnName("duration_percent");
            entity.Property(e => e.DurationUnit).HasColumnName("duration_unit");
            entity.Property(e => e.LeaveId).HasColumnName("leave_id");
            entity.Property(e => e.MoAnalyticAccountLineId).HasColumnName("mo_analytic_account_line_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OperationId).HasColumnName("operation_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductUomId).HasColumnName("product_uom_id");
            entity.Property(e => e.ProductionAvailability).HasColumnName("production_availability");
            entity.Property(e => e.ProductionDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("production_date");
            entity.Property(e => e.ProductionId).HasColumnName("production_id");
            entity.Property(e => e.QtyProduced).HasColumnName("qty_produced");
            entity.Property(e => e.QtyReportedFromPreviousWo).HasColumnName("qty_reported_from_previous_wo");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.WcAnalyticAccountLineId).HasColumnName("wc_analytic_account_line_id");
            entity.Property(e => e.WorkcenterId).HasColumnName("workcenter_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workorder_create_uid_fkey");

            entity.HasOne(d => d.Leave).WithMany(p => p.MrpWorkorders)
                .HasForeignKey(d => d.LeaveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workorder_leave_id_fkey");

            entity.HasOne(d => d.MoAnalyticAccountLine).WithMany(p => p.MrpWorkorderMoAnalyticAccountLines)
                .HasForeignKey(d => d.MoAnalyticAccountLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workorder_mo_analytic_account_line_id_fkey");

            entity.HasOne(d => d.Operation).WithMany(p => p.MrpWorkorders)
                .HasForeignKey(d => d.OperationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workorder_operation_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.MrpWorkorders)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workorder_product_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.MrpWorkorders)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_workorder_product_uom_id_fkey");

            entity.HasOne(d => d.Production).WithMany(p => p.MrpWorkorders)
                .HasForeignKey(d => d.ProductionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_workorder_production_id_fkey");

            entity.HasOne(d => d.WcAnalyticAccountLine).WithMany(p => p.MrpWorkorderWcAnalyticAccountLines)
                .HasForeignKey(d => d.WcAnalyticAccountLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workorder_wc_analytic_account_line_id_fkey");

            entity.HasOne(d => d.Workcenter).WithMany(p => p.MrpWorkorders)
                .HasForeignKey(d => d.WorkcenterId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("mrp_workorder_workcenter_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("mrp_workorder_write_uid_fkey");

            //entity.HasMany(d => d.BlockedBies).WithMany(p => p.Workorders)
            entity.HasMany<MrpWorkorder>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MrpWorkorderDependenciesRel",
                    r => r.HasOne<MrpWorkorder>().WithMany()
                        .HasForeignKey("BlockedById")
                        .HasConstraintName("mrp_workorder_dependencies_rel_blocked_by_id_fkey"),
                    l => l.HasOne<MrpWorkorder>().WithMany()
                        .HasForeignKey("WorkorderId")
                        .HasConstraintName("mrp_workorder_dependencies_rel_workorder_id_fkey"),
                    j =>
                    {
                        j.HasKey("WorkorderId", "BlockedById").HasName("mrp_workorder_dependencies_rel_pkey");
                        j.ToTable("mrp_workorder_dependencies_rel");
                        j.HasIndex(new[] { "BlockedById", "WorkorderId" }, "mrp_workorder_dependencies_rel_blocked_by_id_workorder_id_idx");
                    });

            //entity.HasMany(d => d.Workorders).WithMany(p => p.BlockedBies)
            entity.HasMany<MrpWorkorder>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "MrpWorkorderDependenciesRel",
                    r => r.HasOne<MrpWorkorder>().WithMany()
                        .HasForeignKey("WorkorderId")
                        .HasConstraintName("mrp_workorder_dependencies_rel_workorder_id_fkey"),
                    l => l.HasOne<MrpWorkorder>().WithMany()
                        .HasForeignKey("BlockedById")
                        .HasConstraintName("mrp_workorder_dependencies_rel_blocked_by_id_fkey"),
                    j =>
                    {
                        j.HasKey("WorkorderId", "BlockedById").HasName("mrp_workorder_dependencies_rel_pkey");
                        j.ToTable("mrp_workorder_dependencies_rel");
                        j.HasIndex(new[] { "BlockedById", "WorkorderId" }, "mrp_workorder_dependencies_rel_blocked_by_id_workorder_id_idx");
                    });
        });

        modelBuilder.Entity<NoteNote>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("note_note_pkey");

            entity.ToTable("note_note");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateDone).HasColumnName("date_done");
            entity.Property(e => e.Memo).HasColumnName("memo");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Open).HasColumnName("open");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("note_note_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("note_note_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.NoteNotes)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("note_note_message_main_attachment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("note_note_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("note_note_write_uid_fkey");

            //entity.HasMany(d => d.Stages).WithMany(p => p.Notes)
            entity.HasMany<NoteStage>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "NoteStageRel",
                    r => r.HasOne<NoteStage>().WithMany()
                        .HasForeignKey("StageId")
                        .HasConstraintName("note_stage_rel_stage_id_fkey"),
                    l => l.HasOne<NoteNote>().WithMany()
                        .HasForeignKey("NoteId")
                        .HasConstraintName("note_stage_rel_note_id_fkey"),
                    j =>
                    {
                        j.HasKey("NoteId", "StageId").HasName("note_stage_rel_pkey");
                        j.ToTable("note_stage_rel");
                        j.HasIndex(new[] { "StageId", "NoteId" }, "note_stage_rel_stage_id_note_id_idx");
                    });

            //entity.HasMany(d => d.Tags).WithMany(p => p.Notes)
            entity.HasMany<NoteTag>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "NoteTagsRel",
                    r => r.HasOne<NoteTag>().WithMany()
                        .HasForeignKey("TagId")
                        .HasConstraintName("note_tags_rel_tag_id_fkey"),
                    l => l.HasOne<NoteNote>().WithMany()
                        .HasForeignKey("NoteId")
                        .HasConstraintName("note_tags_rel_note_id_fkey"),
                    j =>
                    {
                        j.HasKey("NoteId", "TagId").HasName("note_tags_rel_pkey");
                        j.ToTable("note_tags_rel");
                        j.HasIndex(new[] { "TagId", "NoteId" }, "note_tags_rel_tag_id_note_id_idx");
                    });
        });

        modelBuilder.Entity<NoteStage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("note_stage_pkey");

            entity.ToTable("note_stage");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Fold).HasColumnName("fold");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                //.ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("note_stage_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("note_stage_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("note_stage_write_uid_fkey");
        });

        modelBuilder.Entity<NoteTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("note_tag_pkey");

            entity.ToTable("note_tag");

            entity.HasIndex(e => e.Name, "note_tag_name_uniq").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("note_tag_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("note_tag_write_uid_fkey");
        });

        modelBuilder.Entity<PartnerStatRel>(entity =>
        {
            entity.HasKey(e => new { e.OsvMemoryId, e.PartnerId }).HasName("partner_stat_rel_pkey");

            entity.ToTable("partner_stat_rel");

            entity.HasIndex(e => new { e.PartnerId, e.OsvMemoryId }, "partner_stat_rel_partner_id_osv_memory_id_idx");

            entity.Property(e => e.OsvMemoryId).HasColumnName("osv_memory_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");

            entity.HasOne(d => d.OsvMemory).WithMany(p => p.PartnerStatRels)
                .HasForeignKey(d => d.OsvMemoryId)
                .HasConstraintName("partner_stat_rel_osv_memory_id_fkey");
        });

        modelBuilder.Entity<PaymentIcon>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("payment_icon_pkey");

            entity.ToTable("payment_icon");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_icon_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_icon_write_uid_fkey");
        });

        modelBuilder.Entity<PaymentLinkWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("payment_link_wizard_pkey");

            entity.ToTable("payment_link_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.AmountMax).HasColumnName("amount_max");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PaymentProviderSelection).HasColumnName("payment_provider_selection");
            entity.Property(e => e.ResId).HasColumnName("res_id");
            entity.Property(e => e.ResModel).HasColumnName("res_model");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_link_wizard_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_link_wizard_currency_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_link_wizard_partner_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_link_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<PaymentProvider>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("payment_provider_pkey");

            entity.ToTable("payment_provider");

            entity.HasIndex(e => e.TenantId, "payment_provider_company_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AllowExpressCheckout).HasColumnName("allow_express_checkout");
            entity.Property(e => e.AllowTokenization).HasColumnName("allow_tokenization");
            entity.Property(e => e.AuthMsg)
                .HasColumnType("jsonb")
                .HasColumnName("auth_msg");
            entity.Property(e => e.CancelMsg)
                .HasColumnType("jsonb")
                .HasColumnName("cancel_msg");
            entity.Property(e => e.CaptureManually).HasColumnName("capture_manually");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DisplayAs)
                .HasColumnType("jsonb")
                .HasColumnName("display_as");
            entity.Property(e => e.DoneMsg)
                .HasColumnType("jsonb")
                .HasColumnName("done_msg");
            entity.Property(e => e.ExpressCheckoutFormViewId).HasColumnName("express_checkout_form_view_id");
            entity.Property(e => e.FeesActive).HasColumnName("fees_active");
            entity.Property(e => e.FeesDomFixed).HasColumnName("fees_dom_fixed");
            entity.Property(e => e.FeesDomVar).HasColumnName("fees_dom_var");
            entity.Property(e => e.FeesIntFixed).HasColumnName("fees_int_fixed");
            entity.Property(e => e.FeesIntVar).HasColumnName("fees_int_var");
            entity.Property(e => e.InlineFormViewId).HasColumnName("inline_form_view_id");
            entity.Property(e => e.IsPublished).HasColumnName("is_published");
            entity.Property(e => e.MaximumAmount).HasColumnName("maximum_amount");
            entity.Property(e => e.ModuleId).HasColumnName("module_id");
            entity.Property(e => e.ModuleState).HasColumnName("module_state");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PendingMsg)
                .HasColumnType("jsonb")
                .HasColumnName("pending_msg");
            entity.Property(e => e.PreMsg)
                .HasColumnType("jsonb")
                .HasColumnName("pre_msg");
            entity.Property(e => e.RedirectFormViewId).HasColumnName("redirect_form_view_id");
            entity.Property(e => e.Sequence).HasColumnName("sequence");
            entity.Property(e => e.SoReferenceType).HasColumnName("so_reference_type");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.TokenInlineFormViewId).HasColumnName("token_inline_form_view_id");
            entity.Property(e => e.WebsiteId).HasColumnName("website_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_provider_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_provider_create_uid_fkey");

            entity.HasOne(d => d.ExpressCheckoutFormView).WithMany(p => p.PaymentProviderExpressCheckoutFormViews)
                .HasForeignKey(d => d.ExpressCheckoutFormViewId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_provider_express_checkout_form_view_id_fkey");

            entity.HasOne(d => d.InlineFormView).WithMany(p => p.PaymentProviderInlineFormViews)
                .HasForeignKey(d => d.InlineFormViewId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_provider_inline_form_view_id_fkey");

            entity.HasOne(d => d.Module).WithMany(p => p.PaymentProviders)
                .HasForeignKey(d => d.ModuleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_provider_module_id_fkey");

            entity.HasOne(d => d.RedirectFormView).WithMany(p => p.PaymentProviderRedirectFormViews)
                .HasForeignKey(d => d.RedirectFormViewId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_provider_redirect_form_view_id_fkey");

            entity.HasOne(d => d.TokenInlineFormView).WithMany(p => p.PaymentProviderTokenInlineFormViews)
                .HasForeignKey(d => d.TokenInlineFormViewId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_provider_token_inline_form_view_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.PaymentProviders)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_provider_website_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_provider_write_uid_fkey");

            //entity.HasMany(d => d.Countries).WithMany(p => p.Payments)
            entity.HasMany<ResCountry>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "PaymentCountryRel",
                    r => r.HasOne<ResCountry>().WithMany()
                        .HasForeignKey("CountryId")
                        .HasConstraintName("payment_country_rel_country_id_fkey"),
                    l => l.HasOne<PaymentProvider>().WithMany()
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("payment_country_rel_payment_id_fkey"),
                    j =>
                    {
                        j.HasKey("PaymentId", "CountryId").HasName("payment_country_rel_pkey");
                        j.ToTable("payment_country_rel");
                        j.HasIndex(new[] { "CountryId", "PaymentId" }, "payment_country_rel_country_id_payment_id_idx");
                    });

            //entity.HasMany(d => d.PaymentIcons).WithMany(p => p.PaymentProviders)
            entity.HasMany<PaymentIcon>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "PaymentIconPaymentProviderRel",
                    r => r.HasOne<PaymentIcon>().WithMany()
                        .HasForeignKey("PaymentIconId")
                        .HasConstraintName("payment_icon_payment_provider_rel_payment_icon_id_fkey"),
                    l => l.HasOne<PaymentProvider>().WithMany()
                        .HasForeignKey("PaymentProviderId")
                        .HasConstraintName("payment_icon_payment_provider_rel_payment_provider_id_fkey"),
                    j =>
                    {
                        j.HasKey("PaymentProviderId", "PaymentIconId").HasName("payment_icon_payment_provider_rel_pkey");
                        j.ToTable("payment_icon_payment_provider_rel");
                        j.HasIndex(new[] { "PaymentIconId", "PaymentProviderId" }, "payment_icon_payment_provider_payment_icon_id_payment_provi_idx");
                    });
        });

        modelBuilder.Entity<PaymentProviderOnboardingWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("payment_provider_onboarding_wizard_pkey");

            entity.ToTable("payment_provider_onboarding_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccNumber).HasColumnName("acc_number");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.JournalName).HasColumnName("journal_name");
            entity.Property(e => e.ManualName).HasColumnName("manual_name");
            entity.Property(e => e.ManualPostMsg).HasColumnName("manual_post_msg");
            entity.Property(e => e.PaymentMethod).HasColumnName("payment_method");
            entity.Property(e => e.PaypalEmailAccount).HasColumnName("paypal_email_account");
            entity.Property(e => e.PaypalPdtToken).HasColumnName("paypal_pdt_token");
            entity.Property(e => e.PaypalSellerAccount).HasColumnName("paypal_seller_account");
            entity.Property(e => e.PaypalUserType).HasColumnName("paypal_user_type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_provider_onboarding_wizard_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_provider_onboarding_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<PaymentRefundWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("payment_refund_wizard_pkey");

            entity.ToTable("payment_refund_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AmountToRefund).HasColumnName("amount_to_refund");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.PaymentId).HasColumnName("payment_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_refund_wizard_create_uid_fkey");

            entity.HasOne(d => d.Payment).WithMany(p => p.PaymentRefundWizards)
                .HasForeignKey(d => d.PaymentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_refund_wizard_payment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_refund_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<PaymentToken>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("payment_token_pkey");

            entity.ToTable("payment_token");

            entity.HasIndex(e => e.TenantId, "payment_token_company_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PaymentDetails).HasColumnName("payment_details");
            entity.Property(e => e.ProviderId).HasColumnName("provider_id");
            entity.Property(e => e.ProviderRef).HasColumnName("provider_ref");
            entity.Property(e => e.Verified).HasColumnName("verified");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_token_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_token_create_uid_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_token_partner_id_fkey");

            entity.HasOne(d => d.Provider).WithMany(p => p.PaymentTokens)
                .HasForeignKey(d => d.ProviderId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_token_provider_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_token_write_uid_fkey");
        });

        modelBuilder.Entity<PaymentTransaction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("payment_transaction_pkey");

            entity.ToTable("payment_transaction");

            entity.HasIndex(e => e.TenantId, "payment_transaction_company_id_index");

            entity.HasIndex(e => e.Operation, "payment_transaction_operation_index");

            entity.HasIndex(e => e.Reference, "payment_transaction_reference_uniq").IsUnique();

            entity.HasIndex(e => e.State, "payment_transaction_state_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.CallbackHash).HasColumnName("callback_hash");
            entity.Property(e => e.CallbackIsDone).HasColumnName("callback_is_done");
            entity.Property(e => e.CallbackMethod).HasColumnName("callback_method");
            entity.Property(e => e.CallbackModelId).HasColumnName("callback_model_id");
            entity.Property(e => e.CallbackResId).HasColumnName("callback_res_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.Fees).HasColumnName("fees");
            entity.Property(e => e.IsDonation).HasColumnName("is_donation");
            entity.Property(e => e.IsPostProcessed).HasColumnName("is_post_processed");
            entity.Property(e => e.LandingRoute).HasColumnName("landing_route");
            entity.Property(e => e.LastStateChange)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_state_change");
            entity.Property(e => e.Operation).HasColumnName("operation");
            entity.Property(e => e.PartnerAddress).HasColumnName("partner_address");
            entity.Property(e => e.PartnerCity).HasColumnName("partner_city");
            entity.Property(e => e.PartnerCountryId).HasColumnName("partner_country_id");
            entity.Property(e => e.PartnerEmail).HasColumnName("partner_email");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PartnerLang).HasColumnName("partner_lang");
            entity.Property(e => e.PartnerName).HasColumnName("partner_name");
            entity.Property(e => e.PartnerPhone).HasColumnName("partner_phone");
            entity.Property(e => e.PartnerStateId).HasColumnName("partner_state_id");
            entity.Property(e => e.PartnerZip).HasColumnName("partner_zip");
            entity.Property(e => e.PaymentId).HasColumnName("payment_id");
            entity.Property(e => e.ProviderId).HasColumnName("provider_id");
            entity.Property(e => e.ProviderReference).HasColumnName("provider_reference");
            entity.Property(e => e.Reference).HasColumnName("reference");
            entity.Property(e => e.SourceTransactionId).HasColumnName("source_transaction_id");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.StateMessage).HasColumnName("state_message");
            entity.Property(e => e.TokenId).HasColumnName("token_id");
            entity.Property(e => e.Tokenize).HasColumnName("tokenize");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.CallbackModel).WithMany(p => p.PaymentTransactions)
                .HasForeignKey(d => d.CallbackModelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_transaction_callback_model_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_transaction_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_transaction_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_transaction_currency_id_fkey");

            entity.HasOne(d => d.PartnerCountry).WithMany(p => p.PaymentTransactions)
                .HasForeignKey(d => d.PartnerCountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_transaction_partner_country_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_transaction_partner_id_fkey");

            entity.HasOne(d => d.PartnerState).WithMany(p => p.PaymentTransactions)
                .HasForeignKey(d => d.PartnerStateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_transaction_partner_state_id_fkey");

            entity.HasOne(d => d.Payment).WithMany(p => p.PaymentTransactions)
                .HasForeignKey(d => d.PaymentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_transaction_payment_id_fkey");

            entity.HasOne(d => d.Provider).WithMany(p => p.PaymentTransactions)
                .HasForeignKey(d => d.ProviderId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_transaction_provider_id_fkey");

            entity.HasOne(d => d.SourceTransaction).WithMany(p => p.InverseSourceTransaction)
                .HasForeignKey(d => d.SourceTransactionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_transaction_source_transaction_id_fkey");

            entity.HasOne(d => d.Token).WithMany(p => p.PaymentTransactions)
                .HasForeignKey(d => d.TokenId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("payment_transaction_token_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("payment_transaction_write_uid_fkey");

            //entity.HasMany(d => d.SaleOrders).WithMany(p => p.Transactions)
            entity.HasMany<SaleOrder>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "SaleOrderTransactionRel",
                    r => r.HasOne<SaleOrder>().WithMany()
                        .HasForeignKey("SaleOrderId")
                        .HasConstraintName("sale_order_transaction_rel_sale_order_id_fkey"),
                    l => l.HasOne<PaymentTransaction>().WithMany()
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("sale_order_transaction_rel_transaction_id_fkey"),
                    j =>
                    {
                        j.HasKey("TransactionId", "SaleOrderId").HasName("sale_order_transaction_rel_pkey");
                        j.ToTable("sale_order_transaction_rel");
                        j.HasIndex(new[] { "SaleOrderId", "TransactionId" }, "sale_order_transaction_rel_sale_order_id_transaction_id_idx");
                    });
        });

        modelBuilder.Entity<PhoneBlacklist>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("phone_blacklist_pkey");

            entity.ToTable("phone_blacklist");

            entity.HasIndex(e => e.Number, "phone_blacklist_unique_number").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Number).HasColumnName("number");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("phone_blacklist_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.PhoneBlacklists)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("phone_blacklist_message_main_attachment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("phone_blacklist_write_uid_fkey");
        });

        modelBuilder.Entity<PhoneBlacklistRemove>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("phone_blacklist_remove_pkey");

            entity.ToTable("phone_blacklist_remove");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Phone).HasColumnName("phone");
            entity.Property(e => e.Reason).HasColumnName("reason");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("phone_blacklist_remove_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("phone_blacklist_remove_write_uid_fkey");
        });

        modelBuilder.Entity<PickingLabelType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("picking_label_type_pkey");

            entity.ToTable("picking_label_type");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LabelType).HasColumnName("label_type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("picking_label_type_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("picking_label_type_write_uid_fkey");

            //entity.HasMany(d => d.StockPickings).WithMany(p => p.PickingLabelTypes)
            entity.HasMany<StockPicking>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "PickingLabelTypeStockPickingRel",
                    r => r.HasOne<StockPicking>().WithMany()
                        .HasForeignKey("StockPickingId")
                        .HasConstraintName("picking_label_type_stock_picking_rel_stock_picking_id_fkey"),
                    l => l.HasOne<PickingLabelType>().WithMany()
                        .HasForeignKey("PickingLabelTypeId")
                        .HasConstraintName("picking_label_type_stock_picking_rel_picking_label_type_id_fkey"),
                    j =>
                    {
                        j.HasKey("PickingLabelTypeId", "StockPickingId").HasName("picking_label_type_stock_picking_rel_pkey");
                        j.ToTable("picking_label_type_stock_picking_rel");
                        j.HasIndex(new[] { "StockPickingId", "PickingLabelTypeId" }, "picking_label_type_stock_pick_stock_picking_id_picking_labe_idx");
                    });
        });

        modelBuilder.Entity<PortalShare>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("portal_share_pkey");

            entity.ToTable("portal_share");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.ResId).HasColumnName("res_id");
            entity.Property(e => e.ResModel).HasColumnName("res_model");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("portal_share_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("portal_share_write_uid_fkey");

            //entity.HasMany(d => d.ResPartners).WithMany(p => p.PortalShares)
            entity.HasMany<ResPartner>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "PortalShareResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("portal_share_res_partner_rel_res_partner_id_fkey"),
                    l => l.HasOne<PortalShare>().WithMany()
                        .HasForeignKey("PortalShareId")
                        .HasConstraintName("portal_share_res_partner_rel_portal_share_id_fkey"),
                    j =>
                    {
                        j.HasKey("PortalShareId", "ResPartnerId").HasName("portal_share_res_partner_rel_pkey");
                        j.ToTable("portal_share_res_partner_rel");
                        j.HasIndex(new[] { "ResPartnerId", "PortalShareId" }, "portal_share_res_partner_rel_res_partner_id_portal_share_id_idx");
                    });
        });

        modelBuilder.Entity<PortalWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("portal_wizard_pkey");

            entity.ToTable("portal_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.WelcomeMessage).HasColumnName("welcome_message");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("portal_wizard_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("portal_wizard_write_uid_fkey");

            //entity.HasMany(d => d.ResPartners).WithMany(p => p.PortalWizards)
            entity.HasMany<ResPartner>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "PortalWizardResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("portal_wizard_res_partner_rel_res_partner_id_fkey"),
                    l => l.HasOne<PortalWizard>().WithMany()
                        .HasForeignKey("PortalWizardId")
                        .HasConstraintName("portal_wizard_res_partner_rel_portal_wizard_id_fkey"),
                    j =>
                    {
                        j.HasKey("PortalWizardId", "ResPartnerId").HasName("portal_wizard_res_partner_rel_pkey");
                        j.ToTable("portal_wizard_res_partner_rel");
                        j.HasIndex(new[] { "ResPartnerId", "PortalWizardId" }, "portal_wizard_res_partner_rel_res_partner_id_portal_wizard__idx");
                    });
        });

        modelBuilder.Entity<PortalWizardUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("portal_wizard_user_pkey");

            entity.ToTable("portal_wizard_user");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Email).HasColumnName("email");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.WizardId).HasColumnName("wizard_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("portal_wizard_user_create_uid_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("portal_wizard_user_partner_id_fkey");

            entity.HasOne(d => d.Wizard).WithMany(p => p.PortalWizardUsers)
                .HasForeignKey(d => d.WizardId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("portal_wizard_user_wizard_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("portal_wizard_user_write_uid_fkey");
        });

        modelBuilder.Entity<PosBill>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_bill_pkey");

            entity.ToTable("pos_bill");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_bill_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_bill_write_uid_fkey");
        });

        modelBuilder.Entity<PosCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_category_pkey");

            entity.ToTable("pos_category");

            entity.HasIndex(e => e.ParentId, "pos_category_parent_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Sequence).HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_category_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_category_parent_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_category_write_uid_fkey");
        });

        modelBuilder.Entity<PosCloseSessionWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_close_session_wizard_pkey");

            entity.ToTable("pos_close_session_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.AccountReadonly).HasColumnName("account_readonly");
            entity.Property(e => e.AmountToBalance).HasColumnName("amount_to_balance");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Message).HasColumnName("message");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Account).WithMany(p => p.PosCloseSessionWizards)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_close_session_wizard_account_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_close_session_wizard_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_close_session_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<PosConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_config_pkey");

            entity.ToTable("pos_config");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AmountAuthorizedDiff).HasColumnName("amount_authorized_diff");
            entity.Property(e => e.CashRounding).HasColumnName("cash_rounding");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CrmTeamId).HasColumnName("crm_team_id");
            entity.Property(e => e.DefaultFiscalPositionId).HasColumnName("default_fiscal_position_id");
            entity.Property(e => e.DownPaymentProductId).HasColumnName("down_payment_product_id");
            entity.Property(e => e.EpsonPrinterIp).HasColumnName("epson_printer_ip");
            entity.Property(e => e.GroupPosManagerId).HasColumnName("group_pos_manager_id");
            entity.Property(e => e.GroupPosUserId).HasColumnName("group_pos_user_id");
            entity.Property(e => e.IfaceBigScrollbars).HasColumnName("iface_big_scrollbars");
            entity.Property(e => e.IfaceCashdrawer).HasColumnName("iface_cashdrawer");
            entity.Property(e => e.IfaceCustomerFacingDisplayLocal).HasColumnName("iface_customer_facing_display_local");
            entity.Property(e => e.IfaceCustomerFacingDisplayViaProxy).HasColumnName("iface_customer_facing_display_via_proxy");
            entity.Property(e => e.IfaceElectronicScale).HasColumnName("iface_electronic_scale");
            entity.Property(e => e.IfacePrintAuto).HasColumnName("iface_print_auto");
            entity.Property(e => e.IfacePrintSkipScreen).HasColumnName("iface_print_skip_screen");
            entity.Property(e => e.IfacePrintViaProxy).HasColumnName("iface_print_via_proxy");
            entity.Property(e => e.IfaceScanViaProxy).HasColumnName("iface_scan_via_proxy");
            entity.Property(e => e.IfaceStartCategId).HasColumnName("iface_start_categ_id");
            entity.Property(e => e.IfaceTaxIncluded).HasColumnName("iface_tax_included");
            entity.Property(e => e.IfaceTipproduct).HasColumnName("iface_tipproduct");
            entity.Property(e => e.InvoiceJournalId).HasColumnName("invoice_journal_id");
            entity.Property(e => e.IsHeaderOrFooter).HasColumnName("is_header_or_footer");
            entity.Property(e => e.IsMarginsCostsAccessibleToEveryUser).HasColumnName("is_margins_costs_accessible_to_every_user");
            entity.Property(e => e.IsPosbox).HasColumnName("is_posbox");
            entity.Property(e => e.JournalId).HasColumnName("journal_id");
            entity.Property(e => e.LimitCategories).HasColumnName("limit_categories");
            entity.Property(e => e.LimitedPartnersAmount).HasColumnName("limited_partners_amount");
            entity.Property(e => e.LimitedPartnersLoading).HasColumnName("limited_partners_loading");
            entity.Property(e => e.LimitedProductsAmount).HasColumnName("limited_products_amount");
            entity.Property(e => e.LimitedProductsLoading).HasColumnName("limited_products_loading");
            entity.Property(e => e.ManualDiscount).HasColumnName("manual_discount");
            entity.Property(e => e.ModulePosDiscount).HasColumnName("module_pos_discount");
            entity.Property(e => e.ModulePosHr).HasColumnName("module_pos_hr");
            entity.Property(e => e.ModulePosMercury).HasColumnName("module_pos_mercury");
            entity.Property(e => e.ModulePosRestaurant).HasColumnName("module_pos_restaurant");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OnlyRoundCashMethod).HasColumnName("only_round_cash_method");
            entity.Property(e => e.OtherDevices).HasColumnName("other_devices");
            entity.Property(e => e.PartnerLoadBackground).HasColumnName("partner_load_background");
            entity.Property(e => e.PickingPolicy).HasColumnName("picking_policy");
            entity.Property(e => e.PickingTypeId).HasColumnName("picking_type_id");
            entity.Property(e => e.PricelistId).HasColumnName("pricelist_id");
            entity.Property(e => e.ProductLoadBackground).HasColumnName("product_load_background");
            entity.Property(e => e.ProxyIp).HasColumnName("proxy_ip");
            entity.Property(e => e.ReceiptFooter).HasColumnName("receipt_footer");
            entity.Property(e => e.ReceiptHeader).HasColumnName("receipt_header");
            entity.Property(e => e.RestrictPriceControl).HasColumnName("restrict_price_control");
            entity.Property(e => e.RoundingMethod).HasColumnName("rounding_method");
            entity.Property(e => e.RouteId).HasColumnName("route_id");
            entity.Property(e => e.SequenceId).HasColumnName("sequence_id");
            entity.Property(e => e.SequenceLineId).HasColumnName("sequence_line_id");
            entity.Property(e => e.SetMaximumDifference).HasColumnName("set_maximum_difference");
            entity.Property(e => e.ShipLater).HasColumnName("ship_later");
            entity.Property(e => e.StartCategory).HasColumnName("start_category");
            entity.Property(e => e.TaxRegimeSelection).HasColumnName("tax_regime_selection");
            entity.Property(e => e.TipProductId).HasColumnName("tip_product_id");
            entity.Property(e => e.UsePricelist).HasColumnName("use_pricelist");
            entity.Property(e => e.Uuid).HasColumnName("uuid");
            entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_config_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_create_uid_fkey");

            entity.HasOne(d => d.CrmTeam).WithMany(p => p.PosConfigs)
                .HasForeignKey(d => d.CrmTeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_crm_team_id_fkey");

            entity.HasOne(d => d.DefaultFiscalPosition).WithMany(p => p.PosConfigsNavigation)
                .HasForeignKey(d => d.DefaultFiscalPositionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_default_fiscal_position_id_fkey");

            entity.HasOne(d => d.DownPaymentProduct).WithMany(p => p.PosConfigDownPaymentProducts)
                .HasForeignKey(d => d.DownPaymentProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_down_payment_product_id_fkey");

            entity.HasOne(d => d.GroupPosManager).WithMany(p => p.PosConfigGroupPosManagers)
                .HasForeignKey(d => d.GroupPosManagerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_group_pos_manager_id_fkey");

            entity.HasOne(d => d.GroupPosUser).WithMany(p => p.PosConfigGroupPosUsers)
                .HasForeignKey(d => d.GroupPosUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_group_pos_user_id_fkey");

            entity.HasOne(d => d.IfaceStartCateg).WithMany(p => p.PosConfigsNavigation)
                .HasForeignKey(d => d.IfaceStartCategId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_iface_start_categ_id_fkey");

            entity.HasOne(d => d.InvoiceJournal).WithMany(p => p.PosConfigInvoiceJournals)
                .HasForeignKey(d => d.InvoiceJournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_invoice_journal_id_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.PosConfigJournals)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_config_journal_id_fkey");

            entity.HasOne(d => d.PickingType).WithMany(p => p.PosConfigs)
                .HasForeignKey(d => d.PickingTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_config_picking_type_id_fkey");

            entity.HasOne(d => d.Pricelist).WithMany(p => p.PosConfigs)
                .HasForeignKey(d => d.PricelistId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_config_pricelist_id_fkey");

            entity.HasOne(d => d.RoundingMethodNavigation).WithMany(p => p.PosConfigs)
                .HasForeignKey(d => d.RoundingMethod)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_rounding_method_fkey");

            entity.HasOne(d => d.Route).WithMany(p => p.PosConfigs)
                .HasForeignKey(d => d.RouteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_route_id_fkey");

            entity.HasOne(d => d.Sequence).WithMany(p => p.PosConfigSequences)
                .HasForeignKey(d => d.SequenceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_config_sequence_id_fkey");

            entity.HasOne(d => d.SequenceLine).WithMany(p => p.PosConfigSequenceLines)
                .HasForeignKey(d => d.SequenceLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_sequence_line_id_fkey");

            entity.HasOne(d => d.TipProduct).WithMany(p => p.PosConfigTipProducts)
                .HasForeignKey(d => d.TipProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_tip_product_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.PosConfigs)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_config_warehouse_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_config_write_uid_fkey");

            //entity.HasMany(d => d.AccountFiscalPositions).WithMany(p => p.PosConfigs)
            entity.HasMany<AccountFiscalPosition>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountFiscalPositionPosConfigRel",
                    r => r.HasOne<AccountFiscalPosition>().WithMany()
                        .HasForeignKey("AccountFiscalPositionId")
                        .HasConstraintName("account_fiscal_position_pos_con_account_fiscal_position_id_fkey"),
                    l => l.HasOne<PosConfig>().WithMany()
                        .HasForeignKey("PosConfigId")
                        .HasConstraintName("account_fiscal_position_pos_config_rel_pos_config_id_fkey"),
                    j =>
                    {
                        j.HasKey("PosConfigId", "AccountFiscalPositionId").HasName("account_fiscal_position_pos_config_rel_pkey");
                        j.ToTable("account_fiscal_position_pos_config_rel");
                        j.HasIndex(new[] { "AccountFiscalPositionId", "PosConfigId" }, "account_fiscal_position_pos_c_account_fiscal_position_id_po_idx");
                    });

            //entity.HasMany(d => d.HrEmployees).WithMany(p => p.PosConfigs)
            entity.HasMany<HrEmployee>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "HrEmployeePosConfigRel",
                    r => r.HasOne<HrEmployee>().WithMany()
                        .HasForeignKey("HrEmployeeId")
                        .HasConstraintName("hr_employee_pos_config_rel_hr_employee_id_fkey"),
                    l => l.HasOne<PosConfig>().WithMany()
                        .HasForeignKey("PosConfigId")
                        .HasConstraintName("hr_employee_pos_config_rel_pos_config_id_fkey"),
                    j =>
                    {
                        j.HasKey("PosConfigId", "HrEmployeeId").HasName("hr_employee_pos_config_rel_pkey");
                        j.ToTable("hr_employee_pos_config_rel");
                        j.HasIndex(new[] { "HrEmployeeId", "PosConfigId" }, "hr_employee_pos_config_rel_hr_employee_id_pos_config_id_idx");
                    });

            //entity.HasMany(d => d.PosBills).WithMany(p => p.PosConfigs)
            entity.HasMany<PosBill>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "PosBillPosConfigRel",
                    r => r.HasOne<PosBill>().WithMany()
                        .HasForeignKey("PosBillId")
                        .HasConstraintName("pos_bill_pos_config_rel_pos_bill_id_fkey"),
                    l => l.HasOne<PosConfig>().WithMany()
                        .HasForeignKey("PosConfigId")
                        .HasConstraintName("pos_bill_pos_config_rel_pos_config_id_fkey"),
                    j =>
                    {
                        j.HasKey("PosConfigId", "PosBillId").HasName("pos_bill_pos_config_rel_pkey");
                        j.ToTable("pos_bill_pos_config_rel");
                        j.HasIndex(new[] { "PosBillId", "PosConfigId" }, "pos_bill_pos_config_rel_pos_bill_id_pos_config_id_idx");
                    });

            //entity.HasMany(d => d.PosCategories).WithMany(p => p.PosConfigs)
            entity.HasMany<PosCategory>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "PosCategoryPosConfigRel",
                    r => r.HasOne<PosCategory>().WithMany()
                        .HasForeignKey("PosCategoryId")
                        .HasConstraintName("pos_category_pos_config_rel_pos_category_id_fkey"),
                    l => l.HasOne<PosConfig>().WithMany()
                        .HasForeignKey("PosConfigId")
                        .HasConstraintName("pos_category_pos_config_rel_pos_config_id_fkey"),
                    j =>
                    {
                        j.HasKey("PosConfigId", "PosCategoryId").HasName("pos_category_pos_config_rel_pkey");
                        j.ToTable("pos_category_pos_config_rel");
                        j.HasIndex(new[] { "PosCategoryId", "PosConfigId" }, "pos_category_pos_config_rel_pos_category_id_pos_config_id_idx");
                    });

            //entity.HasMany(d => d.PosPaymentMethods).WithMany(p => p.PosConfigs)
            entity.HasMany<PosPaymentMethod>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "PosConfigPosPaymentMethodRel",
                    r => r.HasOne<PosPaymentMethod>().WithMany()
                        .HasForeignKey("PosPaymentMethodId")
                        .HasConstraintName("pos_config_pos_payment_method_rel_pos_payment_method_id_fkey"),
                    l => l.HasOne<PosConfig>().WithMany()
                        .HasForeignKey("PosConfigId")
                        .HasConstraintName("pos_config_pos_payment_method_rel_pos_config_id_fkey"),
                    j =>
                    {
                        j.HasKey("PosConfigId", "PosPaymentMethodId").HasName("pos_config_pos_payment_method_rel_pkey");
                        j.ToTable("pos_config_pos_payment_method_rel");
                        j.HasIndex(new[] { "PosPaymentMethodId", "PosConfigId" }, "pos_config_pos_payment_method_pos_payment_method_id_pos_con_idx");
                    });

            //entity.HasMany(d => d.ProductPricelists).WithMany(p => p.PosConfigsNavigation)
            entity.HasMany<ProductPricelist>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "PosConfigProductPricelistRel",
                    r => r.HasOne<ProductPricelist>().WithMany()
                        .HasForeignKey("ProductPricelistId")
                        .HasConstraintName("pos_config_product_pricelist_rel_product_pricelist_id_fkey"),
                    l => l.HasOne<PosConfig>().WithMany()
                        .HasForeignKey("PosConfigId")
                        .HasConstraintName("pos_config_product_pricelist_rel_pos_config_id_fkey"),
                    j =>
                    {
                        j.HasKey("PosConfigId", "ProductPricelistId").HasName("pos_config_product_pricelist_rel_pkey");
                        j.ToTable("pos_config_product_pricelist_rel");
                        j.HasIndex(new[] { "ProductPricelistId", "PosConfigId" }, "pos_config_product_pricelist__product_pricelist_id_pos_conf_idx");
                    });
        });

        modelBuilder.Entity<PosDetailsWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_details_wizard_pkey");

            entity.ToTable("pos_details_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.EndDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_date");
            entity.Property(e => e.StartDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_date");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_details_wizard_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_details_wizard_write_uid_fkey");

            //entity.HasMany(d => d.PosConfigs).WithMany(p => p.PosDetailsWizards)
            entity.HasMany<PosConfig>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "PosDetailConfig",
                    r => r.HasOne<PosConfig>().WithMany()
                        .HasForeignKey("PosConfigId")
                        .HasConstraintName("pos_detail_configs_pos_config_id_fkey"),
                    l => l.HasOne<PosDetailsWizard>().WithMany()
                        .HasForeignKey("PosDetailsWizardId")
                        .HasConstraintName("pos_detail_configs_pos_details_wizard_id_fkey"),
                    j =>
                    {
                        j.HasKey("PosDetailsWizardId", "PosConfigId").HasName("pos_detail_configs_pkey");
                        j.ToTable("pos_detail_configs");
                        j.HasIndex(new[] { "PosConfigId", "PosDetailsWizardId" }, "pos_detail_configs_pos_config_id_pos_details_wizard_id_idx");
                    });
        });

        modelBuilder.Entity<PosMakePayment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_make_payment_pkey");

            entity.ToTable("pos_make_payment");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.ConfigId).HasColumnName("config_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.PaymentDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("payment_date");
            entity.Property(e => e.PaymentMethodId).HasColumnName("payment_method_id");
            entity.Property(e => e.PaymentName).HasColumnName("payment_name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Config).WithMany(p => p.PosMakePayments)
                .HasForeignKey(d => d.ConfigId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("pos_make_payment_config_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_make_payment_create_uid_fkey");

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.PosMakePayments)
                .HasForeignKey(d => d.PaymentMethodId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("pos_make_payment_payment_method_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_make_payment_write_uid_fkey");
        });

        modelBuilder.Entity<PosOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_order_pkey");

            entity.ToTable("pos_order");

            entity.HasIndex(e => e.AccountMove, "pos_order_account_move_index");

            entity.HasIndex(e => e.DateOrder, "pos_order_date_order_index");

            entity.HasIndex(e => e.PartnerId, "pos_order_partner_id_index").HasFilter("(partner_id IS NOT NULL)");

            entity.HasIndex(e => e.SessionId, "pos_order_session_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccessToken).HasColumnName("access_token");
            entity.Property(e => e.AccountMove).HasColumnName("account_move");
            entity.Property(e => e.AmountPaid).HasColumnName("amount_paid");
            entity.Property(e => e.AmountReturn).HasColumnName("amount_return");
            entity.Property(e => e.AmountTax).HasColumnName("amount_tax");
            entity.Property(e => e.AmountTotal).HasColumnName("amount_total");
            entity.Property(e => e.Cashier).HasColumnName("cashier");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CrmTeamId).HasColumnName("crm_team_id");
            entity.Property(e => e.CurrencyRate).HasColumnName("currency_rate");
            entity.Property(e => e.DateOrder)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_order");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.FiscalPositionId).HasColumnName("fiscal_position_id");
            entity.Property(e => e.IsTipped).HasColumnName("is_tipped");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.NbPrint).HasColumnName("nb_print");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PosReference).HasColumnName("pos_reference");
            entity.Property(e => e.PricelistId).HasColumnName("pricelist_id");
            entity.Property(e => e.ProcurementGroupId).HasColumnName("procurement_group_id");
            entity.Property(e => e.SaleJournal).HasColumnName("sale_journal");
            entity.Property(e => e.SequenceNumber)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence_number");
            entity.Property(e => e.SessionId).HasColumnName("session_id");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.TipAmount).HasColumnName("tip_amount");
            entity.Property(e => e.ToInvoice).HasColumnName("to_invoice");
            entity.Property(e => e.ToShip).HasColumnName("to_ship");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AccountMoveNavigation).WithMany(p => p.PosOrders)
                .HasForeignKey(d => d.AccountMove)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_account_move_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_order_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_create_uid_fkey");

            entity.HasOne(d => d.CrmTeam).WithMany(p => p.PosOrders)
                .HasForeignKey(d => d.CrmTeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_crm_team_id_fkey");

            entity.HasOne(d => d.Employee).WithMany(p => p.PosOrders)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_employee_id_fkey");

            entity.HasOne(d => d.FiscalPosition).WithMany(p => p.PosOrders)
                .HasForeignKey(d => d.FiscalPositionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_fiscal_position_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_partner_id_fkey");

            entity.HasOne(d => d.Pricelist).WithMany(p => p.PosOrders)
                .HasForeignKey(d => d.PricelistId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_order_pricelist_id_fkey");

            entity.HasOne(d => d.ProcurementGroup).WithMany(p => p.PosOrders)
                .HasForeignKey(d => d.ProcurementGroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_procurement_group_id_fkey");

            entity.HasOne(d => d.SaleJournalNavigation).WithMany(p => p.PosOrders)
                .HasForeignKey(d => d.SaleJournal)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_order_sale_journal_fkey");

            entity.HasOne(d => d.Session).WithMany(p => p.PosOrders)
                .HasForeignKey(d => d.SessionId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_order_session_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_write_uid_fkey");
        });

        modelBuilder.Entity<PosOrderLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_order_line_pkey");

            entity.ToTable("pos_order_line");

            entity.HasIndex(e => e.OrderId, "pos_order_line_order_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CustomerNote).HasColumnName("customer_note");
            entity.Property(e => e.Discount).HasColumnName("discount");
            entity.Property(e => e.DownPaymentDetails).HasColumnName("down_payment_details");
            entity.Property(e => e.FullProductName).HasColumnName("full_product_name");
            entity.Property(e => e.IsTotalCostComputed).HasColumnName("is_total_cost_computed");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Notice).HasColumnName("notice");
            entity.Property(e => e.OrderId).HasColumnName("order_id");
            entity.Property(e => e.PriceExtra).HasColumnName("price_extra");
            entity.Property(e => e.PriceSubtotal).HasColumnName("price_subtotal");
            entity.Property(e => e.PriceSubtotalIncl).HasColumnName("price_subtotal_incl");
            entity.Property(e => e.PriceUnit).HasColumnName("price_unit");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.RefundedOrderlineId).HasColumnName("refunded_orderline_id");
            entity.Property(e => e.SaleOrderLineId).HasColumnName("sale_order_line_id");
            entity.Property(e => e.SaleOrderOriginId).HasColumnName("sale_order_origin_id");
            entity.Property(e => e.TotalCost).HasColumnName("total_cost");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_line_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_line_create_uid_fkey");

            entity.HasOne(d => d.Order).WithMany(p => p.PosOrderLines)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("pos_order_line_order_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.PosOrderLines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_order_line_product_id_fkey");

            entity.HasOne(d => d.RefundedOrderline).WithMany(p => p.InverseRefundedOrderline)
                .HasForeignKey(d => d.RefundedOrderlineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_line_refunded_orderline_id_fkey");

            entity.HasOne(d => d.SaleOrderLine).WithMany(p => p.PosOrderLines)
                .HasForeignKey(d => d.SaleOrderLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_line_sale_order_line_id_fkey");

            entity.HasOne(d => d.SaleOrderOrigin).WithMany(p => p.PosOrderLines)
                .HasForeignKey(d => d.SaleOrderOriginId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_line_sale_order_origin_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_order_line_write_uid_fkey");

            //entity.HasMany(d => d.AccountTaxes).WithMany(p => p.PosOrderLines)
            entity.HasMany<AccountTax>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxPosOrderLineRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("AccountTaxId")
                        .HasConstraintName("account_tax_pos_order_line_rel_account_tax_id_fkey"),
                    l => l.HasOne<PosOrderLine>().WithMany()
                        .HasForeignKey("PosOrderLineId")
                        .HasConstraintName("account_tax_pos_order_line_rel_pos_order_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("PosOrderLineId", "AccountTaxId").HasName("account_tax_pos_order_line_rel_pkey");
                        j.ToTable("account_tax_pos_order_line_rel");
                        j.HasIndex(new[] { "AccountTaxId", "PosOrderLineId" }, "account_tax_pos_order_line_re_account_tax_id_pos_order_line_idx");
                    });
        });

        modelBuilder.Entity<PosPackOperationLot>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_pack_operation_lot_pkey");

            entity.ToTable("pos_pack_operation_lot");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LotName).HasColumnName("lot_name");
            entity.Property(e => e.PosOrderLineId).HasColumnName("pos_order_line_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_pack_operation_lot_create_uid_fkey");

            entity.HasOne(d => d.PosOrderLine).WithMany(p => p.PosPackOperationLots)
                .HasForeignKey(d => d.PosOrderLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_pack_operation_lot_pos_order_line_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_pack_operation_lot_write_uid_fkey");
        });

        modelBuilder.Entity<PosPayment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_payment_pkey");

            entity.ToTable("pos_payment");

            entity.HasIndex(e => e.SessionId, "pos_payment_session_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountMoveId).HasColumnName("account_move_id");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.CardType).HasColumnName("card_type");
            entity.Property(e => e.CardholderName).HasColumnName("cardholder_name");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.IsChange).HasColumnName("is_change");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PaymentDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("payment_date");
            entity.Property(e => e.PaymentMethodId).HasColumnName("payment_method_id");
            entity.Property(e => e.PaymentStatus).HasColumnName("payment_status");
            entity.Property(e => e.PosOrderId).HasColumnName("pos_order_id");
            entity.Property(e => e.SessionId).HasColumnName("session_id");
            entity.Property(e => e.Ticket).HasColumnName("ticket");
            entity.Property(e => e.TransactionId).HasColumnName("transaction_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AccountMove).WithMany(p => p.PosPayments)
                .HasForeignKey(d => d.AccountMoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_payment_account_move_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_payment_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_payment_create_uid_fkey");

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.PosPayments)
                .HasForeignKey(d => d.PaymentMethodId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_payment_payment_method_id_fkey");

            entity.HasOne(d => d.PosOrder).WithMany(p => p.PosPayments)
                .HasForeignKey(d => d.PosOrderId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_payment_pos_order_id_fkey");

            entity.HasOne(d => d.Session).WithMany(p => p.PosPayments)
                .HasForeignKey(d => d.SessionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_payment_session_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_payment_write_uid_fkey");
        });

        modelBuilder.Entity<PosPaymentMethod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_payment_method_pkey");

            entity.ToTable("pos_payment_method");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.IsCashCount).HasColumnName("is_cash_count");
            entity.Property(e => e.JournalId).HasColumnName("journal_id");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.OutstandingAccountId).HasColumnName("outstanding_account_id");
            entity.Property(e => e.ReceivableAccountId).HasColumnName("receivable_account_id");
            entity.Property(e => e.SplitTransactions).HasColumnName("split_transactions");
            entity.Property(e => e.UsePaymentTerminal).HasColumnName("use_payment_terminal");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_payment_method_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_payment_method_create_uid_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.PosPaymentMethods)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_payment_method_journal_id_fkey");

            entity.HasOne(d => d.OutstandingAccount).WithMany(p => p.PosPaymentMethodOutstandingAccounts)
                .HasForeignKey(d => d.OutstandingAccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_payment_method_outstanding_account_id_fkey");

            entity.HasOne(d => d.ReceivableAccount).WithMany(p => p.PosPaymentMethodReceivableAccounts)
                .HasForeignKey(d => d.ReceivableAccountId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_payment_method_receivable_account_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_payment_method_write_uid_fkey");
        });

        modelBuilder.Entity<PosSession>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_session_pkey");

            entity.ToTable("pos_session");

            entity.HasIndex(e => e.ConfigId, "pos_session_config_id_index");

            entity.HasIndex(e => e.MoveId, "pos_session_move_id_index");

            entity.HasIndex(e => e.State, "pos_session_state_index");

            entity.HasIndex(e => e.Name, "pos_session_uniq_name").IsUnique();

            entity.HasIndex(e => e.UserId, "pos_session_user_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CashJournalId).HasColumnName("cash_journal_id");
            entity.Property(e => e.CashRealTransaction).HasColumnName("cash_real_transaction");
            entity.Property(e => e.CashRegisterBalanceEndReal).HasColumnName("cash_register_balance_end_real");
            entity.Property(e => e.CashRegisterBalanceStart).HasColumnName("cash_register_balance_start");
            entity.Property(e => e.ConfigId).HasColumnName("config_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LoginNumber).HasColumnName("login_number");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.MoveId).HasColumnName("move_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OpeningNotes).HasColumnName("opening_notes");
            entity.Property(e => e.Rescue).HasColumnName("rescue");
            entity.Property(e => e.SequenceNumber).HasColumnName("sequence_number");
            entity.Property(e => e.StartAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_at");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.StopAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("stop_at");
            entity.Property(e => e.UpdateStockAtClosing).HasColumnName("update_stock_at_closing");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.CashJournal).WithMany(p => p.PosSessions)
                .HasForeignKey(d => d.CashJournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_session_cash_journal_id_fkey");

            entity.HasOne(d => d.Config).WithMany(p => p.PosSessions)
                .HasForeignKey(d => d.ConfigId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_session_config_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_session_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.PosSessions)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_session_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.PosSessions)
                .HasForeignKey(d => d.MoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_session_move_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("pos_session_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_session_write_uid_fkey");
        });

        modelBuilder.Entity<PosSessionCheckProductWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pos_session_check_product_wizard_pkey");

            entity.ToTable("pos_session_check_product_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_session_check_product_wizard_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_session_check_product_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<PrivacyLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("privacy_log_pkey");

            entity.ToTable("privacy_log");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AdditionalNote).HasColumnName("additional_note");
            entity.Property(e => e.AnonymizedEmail).HasColumnName("anonymized_email");
            entity.Property(e => e.AnonymizedName).HasColumnName("anonymized_name");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.ExecutionDetails).HasColumnName("execution_details");
            entity.Property(e => e.RecordsDescription).HasColumnName("records_description");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("privacy_log_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("privacy_log_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("privacy_log_write_uid_fkey");
        });

        modelBuilder.Entity<PrivacyLookupWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("privacy_lookup_wizard_pkey");

            entity.ToTable("privacy_lookup_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Email).HasColumnName("email");
            entity.Property(e => e.ExecutionDetails).HasColumnName("execution_details");
            entity.Property(e => e.LogId).HasColumnName("log_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("privacy_lookup_wizard_create_uid_fkey");

            entity.HasOne(d => d.Log).WithMany(p => p.PrivacyLookupWizards)
                .HasForeignKey(d => d.LogId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("privacy_lookup_wizard_log_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("privacy_lookup_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<PrivacyLookupWizardLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("privacy_lookup_wizard_line_pkey");

            entity.ToTable("privacy_lookup_wizard_line");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ExecutionDetails).HasColumnName("execution_details");
            entity.Property(e => e.HasActive).HasColumnName("has_active");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.IsUnlinked).HasColumnName("is_unlinked");
            entity.Property(e => e.ResId).HasColumnName("res_id");
            entity.Property(e => e.ResModel).HasColumnName("res_model");
            entity.Property(e => e.ResModelId).HasColumnName("res_model_id");
            entity.Property(e => e.ResName).HasColumnName("res_name");
            entity.Property(e => e.WizardId).HasColumnName("wizard_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("privacy_lookup_wizard_line_create_uid_fkey");

            entity.HasOne(d => d.ResModelNavigation).WithMany(p => p.PrivacyLookupWizardLines)
                .HasForeignKey(d => d.ResModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("privacy_lookup_wizard_line_res_model_id_fkey");

            entity.HasOne(d => d.Wizard).WithMany(p => p.PrivacyLookupWizardLines)
                .HasForeignKey(d => d.WizardId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("privacy_lookup_wizard_line_wizard_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("privacy_lookup_wizard_line_write_uid_fkey");
        });

        modelBuilder.Entity<ProcurementGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("procurement_group_pkey");

            entity.ToTable("procurement_group");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.MoveType).HasColumnName("move_type");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PosOrderId).HasColumnName("pos_order_id");
            entity.Property(e => e.SaleId).HasColumnName("sale_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("procurement_group_create_uid_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("procurement_group_partner_id_fkey");

            entity.HasOne(d => d.PosOrder).WithMany(p => p.ProcurementGroups)
                .HasForeignKey(d => d.PosOrderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("procurement_group_pos_order_id_fkey");

            entity.HasOne(d => d.Sale).WithMany(p => p.ProcurementGroups)
                .HasForeignKey(d => d.SaleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("procurement_group_sale_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("procurement_group_write_uid_fkey");
        });

        modelBuilder.Entity<ProductAttribute>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_attribute_pkey");

            entity.ToTable("product_attribute");

            entity.HasIndex(e => e.Sequence, "product_attribute_sequence_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CreateVariant).HasColumnName("create_variant");
            entity.Property(e => e.DisplayType).HasColumnName("display_type");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                //.ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.Visibility).HasColumnName("visibility");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_attribute_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_attribute_write_uid_fkey");

            //entity.HasMany(d => d.ProductTemplates).WithMany(p => p.ProductAttributes)
            entity.HasMany<ProductTemplate>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProductAttributeProductTemplateRel",
                    r => r.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("ProductTemplateId")
                        .HasConstraintName("product_attribute_product_template_rel_product_template_id_fkey"),
                    l => l.HasOne<ProductAttribute>().WithMany()
                        .HasForeignKey("ProductAttributeId")
                        .HasConstraintName("product_attribute_product_template_re_product_attribute_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductAttributeId", "ProductTemplateId").HasName("product_attribute_product_template_rel_pkey");
                        j.ToTable("product_attribute_product_template_rel");
                        j.HasIndex(new[] { "ProductTemplateId", "ProductAttributeId" }, "product_attribute_product_tem_product_template_id_product_a_idx");
                    });
        });

        modelBuilder.Entity<ProductAttributeCustomValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_attribute_custom_value_pkey");

            entity.ToTable("product_attribute_custom_value");

            entity.HasIndex(e => new { e.CustomProductTemplateAttributeValueId, e.SaleOrderLineId }, "product_attribute_custom_value_sol_custom_value_unique").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CustomProductTemplateAttributeValueId).HasColumnName("custom_product_template_attribute_value_id");
            entity.Property(e => e.CustomValue).HasColumnName("custom_value");
            entity.Property(e => e.SaleOrderLineId).HasColumnName("sale_order_line_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_attribute_custom_value_create_uid_fkey");

            entity.HasOne(d => d.CustomProductTemplateAttributeValue).WithMany(p => p.ProductAttributeCustomValues)
                .HasForeignKey(d => d.CustomProductTemplateAttributeValueId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("product_attribute_custom_valu_custom_product_template_attr_fkey");

            entity.HasOne(d => d.SaleOrderLine).WithMany(p => p.ProductAttributeCustomValues)
                .HasForeignKey(d => d.SaleOrderLineId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_attribute_custom_value_sale_order_line_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_attribute_custom_value_write_uid_fkey");
        });

        modelBuilder.Entity<ProductAttributeValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_attribute_value_pkey");

            entity.ToTable("product_attribute_value");

            entity.HasIndex(e => e.AttributeId, "product_attribute_value_attribute_id_index");

            entity.HasIndex(e => e.Sequence, "product_attribute_value_sequence_index");

            entity.HasIndex(e => new { e.Name, e.AttributeId }, "product_attribute_value_value_company_uniq").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AttributeId).HasColumnName("attribute_id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.HtmlColor).HasColumnName("html_color");
            entity.Property(e => e.IsCustom).HasColumnName("is_custom");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence).HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Attribute).WithMany(p => p.ProductAttributeValues)
                .HasForeignKey(d => d.AttributeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_attribute_value_attribute_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_attribute_value_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_attribute_value_write_uid_fkey");

            //entity.HasMany(d => d.ProductTemplateAttributeLines).WithMany(p => p.ProductAttributeValues)
            entity.HasMany<ProductTemplateAttributeLine>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProductAttributeValueProductTemplateAttributeLineRel",
                    r => r.HasOne<ProductTemplateAttributeLine>().WithMany()
                        .HasForeignKey("ProductTemplateAttributeLineId")
                        .HasConstraintName("product_attribute_value_produ_product_template_attribute_l_fkey"),
                    l => l.HasOne<ProductAttributeValue>().WithMany()
                        .HasForeignKey("ProductAttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("product_attribute_value_product_product_attribute_value_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductAttributeValueId", "ProductTemplateAttributeLineId").HasName("product_attribute_value_product_template_attribute_line_re_pkey");
                        j.ToTable("product_attribute_value_product_template_attribute_line_rel");
                        j.HasIndex(new[] { "ProductTemplateAttributeLineId", "ProductAttributeValueId" }, "product_attribute_value_produ_product_template_attribute_li_idx");
                    });
        });

        modelBuilder.Entity<ProductCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_category_pkey");

            entity.ToTable("product_category");

            entity.HasIndex(e => e.Name, "product_category_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.ParentId, "product_category_parent_id_index");

            entity.HasIndex(e => e.ParentPath, "product_category_parent_path_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CompleteName).HasColumnName("complete_name");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PackagingReserveMethod).HasColumnName("packaging_reserve_method");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.ParentPath).HasColumnName("parent_path");
            entity.Property(e => e.RemovalStrategyId).HasColumnName("removal_strategy_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_category_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_category_parent_id_fkey");

            entity.HasOne(d => d.RemovalStrategy).WithMany(p => p.ProductCategories)
                .HasForeignKey(d => d.RemovalStrategyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_category_removal_strategy_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_category_write_uid_fkey");
        });

        modelBuilder.Entity<ProductImage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_image_pkey");

            entity.ToTable("product_image");

            entity.HasIndex(e => e.ProductTmplId, "product_image_product_tmpl_id_index");

            entity.HasIndex(e => e.ProductVariantId, "product_image_product_variant_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CanImage1024BeZoomed).HasColumnName("can_image_1024_be_zoomed");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.ProductTmplId).HasColumnName("product_tmpl_id");
            entity.Property(e => e.ProductVariantId).HasColumnName("product_variant_id");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.VideoUrl).HasColumnName("video_url");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_image_create_uid_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.ProductImages)
                .HasForeignKey(d => d.ProductTmplId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_image_product_tmpl_id_fkey");

            entity.HasOne(d => d.ProductVariant).WithMany(p => p.ProductImages)
                .HasForeignKey(d => d.ProductVariantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_image_product_variant_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_image_write_uid_fkey");
        });

        modelBuilder.Entity<ProductLabelLayout>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_label_layout_pkey");

            entity.ToTable("product_label_layout");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CustomQuantity).HasColumnName("custom_quantity");
            entity.Property(e => e.ExtraHtml).HasColumnName("extra_html");
            entity.Property(e => e.PickingQuantity).HasColumnName("picking_quantity");
            entity.Property(e => e.PrintFormat).HasColumnName("print_format");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_label_layout_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_label_layout_write_uid_fkey");

            //entity.HasMany(d => d.ProductProducts).WithMany(p => p.ProductLabelLayouts)
            entity.HasMany<ProductProduct>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProductLabelLayoutProductProductRel",
                    r => r.HasOne<ProductProduct>().WithMany()
                        .HasForeignKey("ProductProductId")
                        .HasConstraintName("product_label_layout_product_product_re_product_product_id_fkey"),
                    l => l.HasOne<ProductLabelLayout>().WithMany()
                        .HasForeignKey("ProductLabelLayoutId")
                        .HasConstraintName("product_label_layout_product_produ_product_label_layout_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductLabelLayoutId", "ProductProductId").HasName("product_label_layout_product_product_rel_pkey");
                        j.ToTable("product_label_layout_product_product_rel");
                        j.HasIndex(new[] { "ProductProductId", "ProductLabelLayoutId" }, "product_label_layout_product__product_product_id_product_la_idx");
                    });

            //entity.HasMany(d => d.ProductTemplates).WithMany(p => p.ProductLabelLayouts)
            entity.HasMany<ProductTemplate>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProductLabelLayoutProductTemplateRel",
                    r => r.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("ProductTemplateId")
                        .HasConstraintName("product_label_layout_product_template__product_template_id_fkey"),
                    l => l.HasOne<ProductLabelLayout>().WithMany()
                        .HasForeignKey("ProductLabelLayoutId")
                        .HasConstraintName("product_label_layout_product_templ_product_label_layout_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductLabelLayoutId", "ProductTemplateId").HasName("product_label_layout_product_template_rel_pkey");
                        j.ToTable("product_label_layout_product_template_rel");
                        j.HasIndex(new[] { "ProductTemplateId", "ProductLabelLayoutId" }, "product_label_layout_product__product_template_id_product_l_idx");
                    });

            //entity.HasMany(d => d.StockMoveLines).WithMany(p => p.ProductLabelLayouts)
            entity.HasMany<StockMoveLine>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProductLabelLayoutStockMoveLineRel",
                    r => r.HasOne<StockMoveLine>().WithMany()
                        .HasForeignKey("StockMoveLineId")
                        .HasConstraintName("product_label_layout_stock_move_line_re_stock_move_line_id_fkey"),
                    l => l.HasOne<ProductLabelLayout>().WithMany()
                        .HasForeignKey("ProductLabelLayoutId")
                        .HasConstraintName("product_label_layout_stock_move_li_product_label_layout_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductLabelLayoutId", "StockMoveLineId").HasName("product_label_layout_stock_move_line_rel_pkey");
                        j.ToTable("product_label_layout_stock_move_line_rel");
                        j.HasIndex(new[] { "StockMoveLineId", "ProductLabelLayoutId" }, "product_label_layout_stock_mo_stock_move_line_id_product_la_idx");
                    });
        });

        modelBuilder.Entity<ProductPackaging>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_packaging_pkey");

            entity.ToTable("product_packaging");

            entity.HasIndex(e => e.Barcode, "product_packaging_barcode_uniq").IsUnique();

            entity.HasIndex(e => e.TenantId, "product_packaging_company_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Barcode).HasColumnName("barcode");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PackageTypeId).HasColumnName("package_type_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Purchase).HasColumnName("purchase");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Sales).HasColumnName("sales");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_packaging_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_packaging_create_uid_fkey");

            entity.HasOne(d => d.PackageType).WithMany(p => p.ProductPackagings)
                .HasForeignKey(d => d.PackageTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_packaging_package_type_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductPackagings)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_packaging_product_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_packaging_write_uid_fkey");
        });

        modelBuilder.Entity<ProductPricelist>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_pricelist_pkey");

            entity.ToTable("product_pricelist");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.DiscountPolicy).HasColumnName("discount_policy");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Selectable).HasColumnName("selectable");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.WebsiteId).HasColumnName("website_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_pricelist_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_pricelist_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("product_pricelist_currency_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.ProductPricelists)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("product_pricelist_website_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_pricelist_write_uid_fkey");

            //entity.HasMany(d => d.ResCountryGroups).WithMany(p => p.Pricelists)
            entity.HasMany<ResCountryGroup>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ResCountryGroupPricelistRel",
                    r => r.HasOne<ResCountryGroup>().WithMany()
                        .HasForeignKey("ResCountryGroupId")
                        .HasConstraintName("res_country_group_pricelist_rel_res_country_group_id_fkey"),
                    l => l.HasOne<ProductPricelist>().WithMany()
                        .HasForeignKey("PricelistId")
                        .HasConstraintName("res_country_group_pricelist_rel_pricelist_id_fkey"),
                    j =>
                    {
                        j.HasKey("PricelistId", "ResCountryGroupId").HasName("res_country_group_pricelist_rel_pkey");
                        j.ToTable("res_country_group_pricelist_rel");
                        j.HasIndex(new[] { "ResCountryGroupId", "PricelistId" }, "res_country_group_pricelist_r_res_country_group_id_pricelis_idx");
                    });
        });

        modelBuilder.Entity<ProductPricelistItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_pricelist_item_pkey");

            entity.ToTable("product_pricelist_item");

            entity.HasIndex(e => e.ComputePrice, "product_pricelist_item_compute_price_index");

            entity.HasIndex(e => e.PricelistId, "product_pricelist_item_pricelist_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AppliedOn).HasColumnName("applied_on");
            entity.Property(e => e.Base).HasColumnName("base");
            entity.Property(e => e.BasePricelistId).HasColumnName("base_pricelist_id");
            entity.Property(e => e.CategId).HasColumnName("categ_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.ComputePrice).HasColumnName("compute_price");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.DateEnd)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_end");
            entity.Property(e => e.DateStart)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_start");
            entity.Property(e => e.FixedPrice).HasColumnName("fixed_price");
            entity.Property(e => e.MinQuantity).HasColumnName("min_quantity");
            entity.Property(e => e.PercentPrice).HasColumnName("percent_price");
            entity.Property(e => e.PriceDiscount).HasColumnName("price_discount");
            entity.Property(e => e.PriceMaxMargin).HasColumnName("price_max_margin");
            entity.Property(e => e.PriceMinMargin).HasColumnName("price_min_margin");
            entity.Property(e => e.PriceRound).HasColumnName("price_round");
            entity.Property(e => e.PriceSurcharge).HasColumnName("price_surcharge");
            entity.Property(e => e.PricelistId).HasColumnName("pricelist_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductTmplId).HasColumnName("product_tmpl_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.BasePricelist).WithMany(p => p.ProductPricelistItemBasePricelists)
                .HasForeignKey(d => d.BasePricelistId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_pricelist_item_base_pricelist_id_fkey");

            entity.HasOne(d => d.Categ).WithMany(p => p.ProductPricelistItems)
                .HasForeignKey(d => d.CategId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_pricelist_item_categ_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_pricelist_item_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_pricelist_item_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_pricelist_item_currency_id_fkey");

            entity.HasOne(d => d.Pricelist).WithMany(p => p.ProductPricelistItemPricelists)
                .HasForeignKey(d => d.PricelistId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_pricelist_item_pricelist_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductPricelistItems)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_pricelist_item_product_id_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.ProductPricelistItems)
                .HasForeignKey(d => d.ProductTmplId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_pricelist_item_product_tmpl_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_pricelist_item_write_uid_fkey");
        });

        modelBuilder.Entity<ProductProduct>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_product_pkey");

            entity.ToTable("product_product");

            entity.HasIndex(e => e.Barcode, "product_product_barcode_index").HasFilter("(barcode IS NOT NULL)");

            entity.HasIndex(e => e.CombinationIndices, "product_product_combination_indices_index");

            entity.HasIndex(e => new { e.ProductTmplId, e.CombinationIndices }, "product_product_combination_unique")
                .IsUnique()
                .HasFilter("(active IS TRUE)");

            entity.HasIndex(e => e.DefaultCode, "product_product_default_code_index");

            entity.HasIndex(e => e.ProductTmplId, "product_product_product_tmpl_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Barcode).HasColumnName("barcode");
            entity.Property(e => e.BaseUnitCount).HasColumnName("base_unit_count");
            entity.Property(e => e.BaseUnitId).HasColumnName("base_unit_id");
            entity.Property(e => e.CanImageVariant1024BeZoomed).HasColumnName("can_image_variant_1024_be_zoomed");
            entity.Property(e => e.CombinationIndices).HasColumnName("combination_indices");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DefaultCode).HasColumnName("default_code");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.ProductTmplId).HasColumnName("product_tmpl_id");
            entity.Property(e => e.Volume).HasColumnName("volume");
            entity.Property(e => e.Weight).HasColumnName("weight");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.BaseUnit).WithMany(p => p.ProductProducts)
                .HasForeignKey(d => d.BaseUnitId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_product_base_unit_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_product_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.ProductProducts)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_product_message_main_attachment_id_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.ProductProducts)
                .HasForeignKey(d => d.ProductTmplId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_product_product_tmpl_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_product_write_uid_fkey");

            //entity.HasMany(d => d.ProductTags).WithMany(p => p.ProductProducts)
            entity.HasMany<ProductTag>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProductTagProductProductRel",
                    r => r.HasOne<ProductTag>().WithMany()
                        .HasForeignKey("ProductTagId")
                        .HasConstraintName("product_tag_product_product_rel_product_tag_id_fkey"),
                    l => l.HasOne<ProductProduct>().WithMany()
                        .HasForeignKey("ProductProductId")
                        .HasConstraintName("product_tag_product_product_rel_product_product_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductProductId", "ProductTagId").HasName("product_tag_product_product_rel_pkey");
                        j.ToTable("product_tag_product_product_rel");
                        j.HasIndex(new[] { "ProductTagId", "ProductProductId" }, "product_tag_product_product_r_product_tag_id_product_produc_idx");
                    });

            //entity.HasMany(d => d.ProductTemplateAttributeValues).WithMany(p => p.ProductProducts)
            entity.HasMany<ProductTemplateAttributeValue>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProductVariantCombination",
                    r => r.HasOne<ProductTemplateAttributeValue>().WithMany()
                        .HasForeignKey("ProductTemplateAttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("product_variant_combination_product_template_attribute_val_fkey"),
                    l => l.HasOne<ProductProduct>().WithMany()
                        .HasForeignKey("ProductProductId")
                        .HasConstraintName("product_variant_combination_product_product_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductProductId", "ProductTemplateAttributeValueId").HasName("product_variant_combination_pkey");
                        j.ToTable("product_variant_combination");
                        j.HasIndex(new[] { "ProductTemplateAttributeValueId", "ProductProductId" }, "product_variant_combination_product_template_attribute_valu_idx");
                    });

            //entity.HasMany(d => d.ResPartners).WithMany(p => p.ProductProducts)
            entity.HasMany<ResPartner>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockNotificationProductPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("stock_notification_product_partner_rel_res_partner_id_fkey"),
                    l => l.HasOne<ProductProduct>().WithMany()
                        .HasForeignKey("ProductProductId")
                        .HasConstraintName("stock_notification_product_partner_rel_product_product_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductProductId", "ResPartnerId").HasName("stock_notification_product_partner_rel_pkey");
                        j.ToTable("stock_notification_product_partner_rel");
                        j.HasIndex(new[] { "ResPartnerId", "ProductProductId" }, "stock_notification_product_pa_res_partner_id_product_produc_idx");
                    });
        });

        modelBuilder.Entity<ProductPublicCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_public_category_pkey");

            entity.ToTable("product_public_category");

            entity.HasIndex(e => e.ParentId, "product_public_category_parent_id_index");

            entity.HasIndex(e => e.ParentPath, "product_public_category_parent_path_index");

            entity.HasIndex(e => e.Sequence, "product_public_category_sequence_index");

            entity.HasIndex(e => e.WebsiteId, "product_public_category_website_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.ParentPath).HasColumnName("parent_path");
            entity.Property(e => e.SeoName)
                .HasColumnType("jsonb")
                .HasColumnName("seo_name");
            entity.Property(e => e.Sequence)
                //.ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.WebsiteDescription)
                .HasColumnType("jsonb")
                .HasColumnName("website_description");
            entity.Property(e => e.WebsiteId).HasColumnName("website_id");
            entity.Property(e => e.WebsiteMetaDescription)
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_description");
            entity.Property(e => e.WebsiteMetaKeywords)
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_keywords");
            entity.Property(e => e.WebsiteMetaOgImg).HasColumnName("website_meta_og_img");
            entity.Property(e => e.WebsiteMetaTitle)
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_title");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_public_category_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_public_category_parent_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.ProductPublicCategories)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("product_public_category_website_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_public_category_write_uid_fkey");

            //entity.HasMany(d => d.ProductTemplates).WithMany(p => p.ProductPublicCategories)
            entity.HasMany<ProductTemplate>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProductPublicCategoryProductTemplateRel",
                    r => r.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("ProductTemplateId")
                        .HasConstraintName("product_public_category_product_templa_product_template_id_fkey"),
                    l => l.HasOne<ProductPublicCategory>().WithMany()
                        .HasForeignKey("ProductPublicCategoryId")
                        .HasConstraintName("product_public_category_product_product_public_category_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductPublicCategoryId", "ProductTemplateId").HasName("product_public_category_product_template_rel_pkey");
                        j.ToTable("product_public_category_product_template_rel");
                        j.HasIndex(new[] { "ProductTemplateId", "ProductPublicCategoryId" }, "product_public_category_produ_product_template_id_product_p_idx");
                    });
        });

        modelBuilder.Entity<ProductRemoval>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_removal_pkey");

            entity.ToTable("product_removal");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Method).HasColumnName("method");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_removal_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_removal_write_uid_fkey");
        });

        modelBuilder.Entity<ProductReplenish>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_replenish_pkey");

            entity.ToTable("product_replenish");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DatePlanned)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_planned");
            entity.Property(e => e.ProductHasVariants).HasColumnName("product_has_variants");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductTmplId).HasColumnName("product_tmpl_id");
            entity.Property(e => e.ProductUomId).HasColumnName("product_uom_id");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_replenish_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_replenish_create_uid_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductReplenishes)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_replenish_product_id_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.ProductReplenishes)
                .HasForeignKey(d => d.ProductTmplId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_replenish_product_tmpl_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.ProductReplenishes)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_replenish_product_uom_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.ProductReplenishes)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_replenish_warehouse_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_replenish_write_uid_fkey");

            //entity.HasMany(d => d.StockRoutes).WithMany(p => p.ProductReplenishes)
            entity.HasMany<StockRoute>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProductReplenishStockRouteRel",
                    r => r.HasOne<StockRoute>().WithMany()
                        .HasForeignKey("StockRouteId")
                        .HasConstraintName("product_replenish_stock_route_rel_stock_route_id_fkey"),
                    l => l.HasOne<ProductReplenish>().WithMany()
                        .HasForeignKey("ProductReplenishId")
                        .HasConstraintName("product_replenish_stock_route_rel_product_replenish_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductReplenishId", "StockRouteId").HasName("product_replenish_stock_route_rel_pkey");
                        j.ToTable("product_replenish_stock_route_rel");
                        j.HasIndex(new[] { "StockRouteId", "ProductReplenishId" }, "product_replenish_stock_route_stock_route_id_product_replen_idx");
                    });
        });

        modelBuilder.Entity<ProductRibbon>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_ribbon_pkey");

            entity.ToTable("product_ribbon");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.BgColor).HasColumnName("bg_color");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Html)
                .HasColumnType("jsonb")
                .HasColumnName("html");
            entity.Property(e => e.HtmlClass).HasColumnName("html_class");
            entity.Property(e => e.TextColor).HasColumnName("text_color");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_ribbon_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_ribbon_write_uid_fkey");
        });

        modelBuilder.Entity<ProductSupplierinfo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_supplierinfo_pkey");

            entity.ToTable("product_supplierinfo");

            entity.HasIndex(e => e.TenantId, "product_supplierinfo_company_id_index");

            entity.HasIndex(e => e.ProductTmplId, "product_supplierinfo_product_tmpl_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.DateEnd).HasColumnName("date_end");
            entity.Property(e => e.DateStart).HasColumnName("date_start");
            entity.Property(e => e.Delay).HasColumnName("delay");
            entity.Property(e => e.MinQty).HasColumnName("min_qty");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.ProductCode).HasColumnName("product_code");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductName).HasColumnName("product_name");
            entity.Property(e => e.ProductTmplId).HasColumnName("product_tmpl_id");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_supplierinfo_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_supplierinfo_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("product_supplierinfo_currency_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_supplierinfo_partner_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductSupplierinfos)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_supplierinfo_product_id_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.ProductSupplierinfos)
                .HasForeignKey(d => d.ProductTmplId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_supplierinfo_product_tmpl_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_supplierinfo_write_uid_fkey");
        });

        modelBuilder.Entity<ProductTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_tag_pkey");

            entity.ToTable("product_tag");

            entity.HasIndex(e => e.Name, "product_tag_name_uniq").IsUnique();

            entity.HasIndex(e => e.WebsiteId, "product_tag_website_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.RibbonId).HasColumnName("ribbon_id");
            entity.Property(e => e.WebsiteId).HasColumnName("website_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_tag_create_uid_fkey");

            entity.HasOne(d => d.Ribbon).WithMany(p => p.ProductTags)
                .HasForeignKey(d => d.RibbonId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_tag_ribbon_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.ProductTags)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("product_tag_website_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_tag_write_uid_fkey");
        });

        modelBuilder.Entity<ProductTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_template_pkey");

            entity.ToTable("product_template");

            entity.HasIndex(e => e.TenantId, "product_template_company_id_index");

            entity.HasIndex(e => e.IsPublished, "product_template_is_published_index");

            entity.HasIndex(e => e.WebsiteId, "product_template_website_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AllowOutOfStockOrder).HasColumnName("allow_out_of_stock_order");
            entity.Property(e => e.AvailableInPos).HasColumnName("available_in_pos");
            entity.Property(e => e.AvailableThreshold).HasColumnName("available_threshold");
            entity.Property(e => e.BaseUnitCount).HasColumnName("base_unit_count");
            entity.Property(e => e.BaseUnitId).HasColumnName("base_unit_id");
            entity.Property(e => e.CanBeExpensed).HasColumnName("can_be_expensed");
            entity.Property(e => e.CanImage1024BeZoomed).HasColumnName("can_image_1024_be_zoomed");
            entity.Property(e => e.CategId).HasColumnName("categ_id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CompareListPrice).HasColumnName("compare_list_price");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DaysToPrepareMo).HasColumnName("days_to_prepare_mo");
            entity.Property(e => e.DefaultCode).HasColumnName("default_code");
            entity.Property(e => e.Description)
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.DescriptionPicking)
                .HasColumnType("jsonb")
                .HasColumnName("description_picking");
            entity.Property(e => e.DescriptionPickingin)
                .HasColumnType("jsonb")
                .HasColumnName("description_pickingin");
            entity.Property(e => e.DescriptionPickingout)
                .HasColumnType("jsonb")
                .HasColumnName("description_pickingout");
            entity.Property(e => e.DescriptionPurchase)
                .HasColumnType("jsonb")
                .HasColumnName("description_purchase");
            entity.Property(e => e.DescriptionSale)
                .HasColumnType("jsonb")
                .HasColumnName("description_sale");
            entity.Property(e => e.DetailedType).HasColumnName("detailed_type");
            entity.Property(e => e.ExpensePolicy).HasColumnName("expense_policy");
            entity.Property(e => e.HasConfigurableAttributes).HasColumnName("has_configurable_attributes");
            entity.Property(e => e.InvoicePolicy).HasColumnName("invoice_policy");
            entity.Property(e => e.IsPublished).HasColumnName("is_published");
            entity.Property(e => e.ListPrice).HasColumnName("list_price");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.OutOfStockMessage)
                .HasColumnType("jsonb")
                .HasColumnName("out_of_stock_message");
            entity.Property(e => e.PosCategId).HasColumnName("pos_categ_id");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.ProduceDelay).HasColumnName("produce_delay");
            entity.Property(e => e.PurchaseLineWarn).HasColumnName("purchase_line_warn");
            entity.Property(e => e.PurchaseLineWarnMsg).HasColumnName("purchase_line_warn_msg");
            entity.Property(e => e.PurchaseMethod).HasColumnName("purchase_method");
            entity.Property(e => e.PurchaseOk).HasColumnName("purchase_ok");
            entity.Property(e => e.RatingLastValue).HasColumnName("rating_last_value");
            entity.Property(e => e.SaleDelay).HasColumnName("sale_delay");
            entity.Property(e => e.SaleLineWarn).HasColumnName("sale_line_warn");
            entity.Property(e => e.SaleLineWarnMsg).HasColumnName("sale_line_warn_msg");
            entity.Property(e => e.SaleOk).HasColumnName("sale_ok");
            entity.Property(e => e.SeoName)
                .HasColumnType("jsonb")
                .HasColumnName("seo_name");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.ServiceTracking).HasColumnName("service_tracking");
            entity.Property(e => e.ServiceType).HasColumnName("service_type");
            entity.Property(e => e.ShowAvailability).HasColumnName("show_availability");
            entity.Property(e => e.ToWeight).HasColumnName("to_weight");
            entity.Property(e => e.Tracking).HasColumnName("tracking");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.UomId).HasColumnName("uom_id");
            entity.Property(e => e.UomPoId).HasColumnName("uom_po_id");
            entity.Property(e => e.Volume).HasColumnName("volume");
            entity.Property(e => e.WebsiteDescription)
                .HasColumnType("jsonb")
                .HasColumnName("website_description");
            entity.Property(e => e.WebsiteId).HasColumnName("website_id");
            entity.Property(e => e.WebsiteMetaDescription)
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_description");
            entity.Property(e => e.WebsiteMetaKeywords)
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_keywords");
            entity.Property(e => e.WebsiteMetaOgImg).HasColumnName("website_meta_og_img");
            entity.Property(e => e.WebsiteMetaTitle)
                .HasColumnType("jsonb")
                .HasColumnName("website_meta_title");
            entity.Property(e => e.WebsiteRibbonId).HasColumnName("website_ribbon_id");
            entity.Property(e => e.WebsiteSequence).HasColumnName("website_sequence");
            entity.Property(e => e.WebsiteSizeX).HasColumnName("website_size_x");
            entity.Property(e => e.WebsiteSizeY).HasColumnName("website_size_y");
            entity.Property(e => e.Weight).HasColumnName("weight");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.BaseUnit).WithMany(p => p.ProductTemplates)
                .HasForeignKey(d => d.BaseUnitId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_base_unit_id_fkey");

            entity.HasOne(d => d.Categ).WithMany(p => p.ProductTemplates)
                .HasForeignKey(d => d.CategId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("product_template_categ_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.ProductTemplates)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_message_main_attachment_id_fkey");

            entity.HasOne(d => d.PosCateg).WithMany(p => p.ProductTemplates)
                .HasForeignKey(d => d.PosCategId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_pos_categ_id_fkey");

            entity.HasOne(d => d.Uom).WithMany(p => p.ProductTemplateUoms)
                .HasForeignKey(d => d.UomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("product_template_uom_id_fkey");

            entity.HasOne(d => d.UomPo).WithMany(p => p.ProductTemplateUomPos)
                .HasForeignKey(d => d.UomPoId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("product_template_uom_po_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.ProductTemplates)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("product_template_website_id_fkey");

            entity.HasOne(d => d.WebsiteRibbon).WithMany(p => p.ProductTemplates)
                .HasForeignKey(d => d.WebsiteRibbonId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_website_ribbon_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_write_uid_fkey");

            //entity.HasMany(d => d.AccountAccountTags).WithMany(p => p.ProductTemplates)
            entity.HasMany<AccountAccountTag>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountAccountTagProductTemplateRel",
                    r => r.HasOne<AccountAccountTag>().WithMany()
                        .HasForeignKey("AccountAccountTagId")
                        .HasConstraintName("account_account_tag_product_templat_account_account_tag_id_fkey"),
                    l => l.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("ProductTemplateId")
                        .HasConstraintName("account_account_tag_product_template_r_product_template_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductTemplateId", "AccountAccountTagId").HasName("account_account_tag_product_template_rel_pkey");
                        j.ToTable("account_account_tag_product_template_rel");
                        j.HasIndex(new[] { "AccountAccountTagId", "ProductTemplateId" }, "account_account_tag_product_t_account_account_tag_id_produc_idx");
                    });

            /// TODO:
            //entity.HasMany(d => d.Dests).WithMany(p => p.Srcs)
            entity.HasMany<ProductProduct>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProductAccessoryRel",
                    r => r.HasOne<ProductProduct>().WithMany()
                        .HasForeignKey("DestId")
                        .HasConstraintName("product_accessory_rel_dest_id_fkey"),
                    l => l.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("SrcId")
                        .HasConstraintName("product_accessory_rel_src_id_fkey"),
                    j =>
                    {
                        j.HasKey("SrcId", "DestId").HasName("product_accessory_rel_pkey");
                        j.ToTable("product_accessory_rel");
                        j.HasIndex(new[] { "DestId", "SrcId" }, "product_accessory_rel_dest_id_src_id_idx");
                    });

            /// TODO:
            //entity.HasMany(d => d.Dests1).WithMany(p => p.SrcsNavigation)
            entity.HasMany<ProductTemplate>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProductOptionalRel",
                    r => r.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("DestId")
                        .HasConstraintName("product_optional_rel_dest_id_fkey"),
                    l => l.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("SrcId")
                        .HasConstraintName("product_optional_rel_src_id_fkey"),
                    j =>
                    {
                        j.HasKey("SrcId", "DestId").HasName("product_optional_rel_pkey");
                        j.ToTable("product_optional_rel");
                        j.HasIndex(new[] { "DestId", "SrcId" }, "product_optional_rel_dest_id_src_id_idx");
                    });

            /// TODO:
            //entity.HasMany(d => d.DestsNavigation).WithMany(p => p.Srcs)
            entity.HasMany<ProductTemplate>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProductAlternativeRel",
                    r => r.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("DestId")
                        .HasConstraintName("product_alternative_rel_dest_id_fkey"),
                    l => l.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("SrcId")
                        .HasConstraintName("product_alternative_rel_src_id_fkey"),
                    j =>
                    {
                        j.HasKey("SrcId", "DestId").HasName("product_alternative_rel_pkey");
                        j.ToTable("product_alternative_rel");
                        j.HasIndex(new[] { "DestId", "SrcId" }, "product_alternative_rel_dest_id_src_id_idx");
                    });

            //entity.HasMany(d => d.ProductTags).WithMany(p => p.ProductTemplates)
            entity.HasMany<ProductTag>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProductTagProductTemplateRel",
                    r => r.HasOne<ProductTag>().WithMany()
                        .HasForeignKey("ProductTagId")
                        .HasConstraintName("product_tag_product_template_rel_product_tag_id_fkey"),
                    l => l.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("ProductTemplateId")
                        .HasConstraintName("product_tag_product_template_rel_product_template_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProductTemplateId", "ProductTagId").HasName("product_tag_product_template_rel_pkey");
                        j.ToTable("product_tag_product_template_rel");
                        j.HasIndex(new[] { "ProductTagId", "ProductTemplateId" }, "product_tag_product_template__product_tag_id_product_templa_idx");
                    });

            /// TODO:
            //entity.HasMany(d => d.Srcs).WithMany(p => p.DestsNavigation)
            entity.HasMany<ProductTemplate>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProductAlternativeRel",
                    r => r.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("SrcId")
                        .HasConstraintName("product_alternative_rel_src_id_fkey"),
                    l => l.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("DestId")
                        .HasConstraintName("product_alternative_rel_dest_id_fkey"),
                    j =>
                    {
                        j.HasKey("SrcId", "DestId").HasName("product_alternative_rel_pkey");
                        j.ToTable("product_alternative_rel");
                        j.HasIndex(new[] { "DestId", "SrcId" }, "product_alternative_rel_dest_id_src_id_idx");
                    });

            /// TODO:
            //entity.HasMany(d => d.SrcsNavigation).WithMany(p => p.Dests1)
            entity.HasMany<ProductTemplate>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProductOptionalRel",
                    r => r.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("SrcId")
                        .HasConstraintName("product_optional_rel_src_id_fkey"),
                    l => l.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("DestId")
                        .HasConstraintName("product_optional_rel_dest_id_fkey"),
                    j =>
                    {
                        j.HasKey("SrcId", "DestId").HasName("product_optional_rel_pkey");
                        j.ToTable("product_optional_rel");
                        j.HasIndex(new[] { "DestId", "SrcId" }, "product_optional_rel_dest_id_src_id_idx");
                    });

            /// TODO:
            //entity.HasMany(d => d.Taxes).WithMany(p => p.Prods)
            entity.HasMany<AccountTax>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProductSupplierTaxesRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("TaxId")
                        .HasConstraintName("product_supplier_taxes_rel_tax_id_fkey"),
                    l => l.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("ProdId")
                        .HasConstraintName("product_supplier_taxes_rel_prod_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProdId", "TaxId").HasName("product_supplier_taxes_rel_pkey");
                        j.ToTable("product_supplier_taxes_rel");
                        j.HasIndex(new[] { "TaxId", "ProdId" }, "product_supplier_taxes_rel_tax_id_prod_id_idx");
                    });

            /// TODO:
            //entity.HasMany(d => d.TaxesNavigation).WithMany(p => p.ProdsNavigation)
            entity.HasMany<AccountTax>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProductTaxesRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("TaxId")
                        .HasConstraintName("product_taxes_rel_tax_id_fkey"),
                    l => l.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("ProdId")
                        .HasConstraintName("product_taxes_rel_prod_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProdId", "TaxId").HasName("product_taxes_rel_pkey");
                        j.ToTable("product_taxes_rel");
                        j.HasIndex(new[] { "TaxId", "ProdId" }, "product_taxes_rel_tax_id_prod_id_idx");
                    });
        });

        modelBuilder.Entity<ProductTemplateAttributeExclusion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_template_attribute_exclusion_pkey");

            entity.ToTable("product_template_attribute_exclusion");

            entity.HasIndex(e => e.ProductTemplateAttributeValueId, "product_template_attribute_exclusion_product_template_attribute");

            entity.HasIndex(e => e.ProductTmplId, "product_template_attribute_exclusion_product_tmpl_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ProductTemplateAttributeValueId).HasColumnName("product_template_attribute_value_id");
            entity.Property(e => e.ProductTmplId).HasColumnName("product_tmpl_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_attribute_exclusion_create_uid_fkey");

            entity.HasOne(d => d.ProductTemplateAttributeValue).WithMany(p => p.ProductTemplateAttributeExclusionsNavigation)
                .HasForeignKey(d => d.ProductTemplateAttributeValueId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_template_attribute_ex_product_template_attribute_v_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.ProductTemplateAttributeExclusions)
                .HasForeignKey(d => d.ProductTmplId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_template_attribute_exclusion_product_tmpl_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_attribute_exclusion_write_uid_fkey");

            //entity.HasMany(d => d.ProductTemplateAttributeValues).WithMany(p => p.ProductTemplateAttributeExclusions)
            entity.HasMany<ProductTemplateAttributeValue>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProductAttrExclusionValueIdsRel",
                    r => r.HasOne<ProductTemplateAttributeValue>().WithMany()
                        .HasForeignKey("ProductTemplateAttributeValueId")
                        .HasConstraintName("product_attr_exclusion_value__product_template_attribute_v_fkey"),
                    l => l.HasOne<ProductTemplateAttributeExclusion>().WithMany()
                        .HasForeignKey("ProductTemplateAttributeExclusionId")
                        .HasConstraintName("product_attr_exclusion_value__product_template_attribute_e_fkey"),
                    j =>
                    {
                        j.HasKey("ProductTemplateAttributeExclusionId", "ProductTemplateAttributeValueId").HasName("product_attr_exclusion_value_ids_rel_pkey");
                        j.ToTable("product_attr_exclusion_value_ids_rel");
                        j.HasIndex(new[] { "ProductTemplateAttributeValueId", "ProductTemplateAttributeExclusionId" }, "product_attr_exclusion_value__product_template_attribute_va_idx");
                    });
        });

        modelBuilder.Entity<ProductTemplateAttributeLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_template_attribute_line_pkey");

            entity.ToTable("product_template_attribute_line");

            entity.HasIndex(e => e.AttributeId, "product_template_attribute_line_attribute_id_index");

            entity.HasIndex(e => e.ProductTmplId, "product_template_attribute_line_product_tmpl_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AttributeId).HasColumnName("attribute_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ProductTmplId).HasColumnName("product_tmpl_id");
            entity.Property(e => e.ValueCount).HasColumnName("value_count");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Attribute).WithMany(p => p.ProductTemplateAttributeLines)
                .HasForeignKey(d => d.AttributeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("product_template_attribute_line_attribute_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_attribute_line_create_uid_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.ProductTemplateAttributeLines)
                .HasForeignKey(d => d.ProductTmplId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_template_attribute_line_product_tmpl_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_attribute_line_write_uid_fkey");
        });

        modelBuilder.Entity<ProductTemplateAttributeValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_template_attribute_value_pkey");

            entity.ToTable("product_template_attribute_value");

            entity.HasIndex(e => e.AttributeId, "product_template_attribute_value_attribute_id_index");

            entity.HasIndex(e => e.AttributeLineId, "product_template_attribute_value_attribute_line_id_index");

            entity.HasIndex(e => new { e.AttributeLineId, e.ProductAttributeValueId }, "product_template_attribute_value_attribute_value_unique").IsUnique();

            entity.HasIndex(e => e.ProductAttributeValueId, "product_template_attribute_value_product_attribute_value_id_ind");

            entity.HasIndex(e => e.ProductTmplId, "product_template_attribute_value_product_tmpl_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AttributeId).HasColumnName("attribute_id");
            entity.Property(e => e.AttributeLineId).HasColumnName("attribute_line_id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.PriceExtra).HasColumnName("price_extra");
            entity.Property(e => e.ProductAttributeValueId).HasColumnName("product_attribute_value_id");
            entity.Property(e => e.ProductTmplId).HasColumnName("product_tmpl_id");
            entity.Property(e => e.PtavActive).HasColumnName("ptav_active");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Attribute).WithMany(p => p.ProductTemplateAttributeValues)
                .HasForeignKey(d => d.AttributeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_attribute_value_attribute_id_fkey");

            entity.HasOne(d => d.AttributeLine).WithMany(p => p.ProductTemplateAttributeValues)
                .HasForeignKey(d => d.AttributeLineId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_template_attribute_value_attribute_line_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_attribute_value_create_uid_fkey");

            entity.HasOne(d => d.ProductAttributeValue).WithMany(p => p.ProductTemplateAttributeValues)
                .HasForeignKey(d => d.ProductAttributeValueId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("product_template_attribute_valu_product_attribute_value_id_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.ProductTemplateAttributeValues)
                .HasForeignKey(d => d.ProductTmplId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_attribute_value_product_tmpl_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("product_template_attribute_value_write_uid_fkey");
        });

        modelBuilder.Entity<ProjectCollaborator>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_collaborator_pkey");

            entity.ToTable("project_collaborator");

            entity.HasIndex(e => new { e.ProjectId, e.PartnerId }, "project_collaborator_unique_collaborator").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.ProjectId).HasColumnName("project_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_collaborator_create_uid_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("project_collaborator_partner_id_fkey");

            entity.HasOne(d => d.Project).WithMany(p => p.ProjectCollaborators)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("project_collaborator_project_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_collaborator_write_uid_fkey");
        });

        modelBuilder.Entity<ProjectMilestone>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_milestone_pkey");

            entity.ToTable("project_milestone");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Deadline).HasColumnName("deadline");
            entity.Property(e => e.IsReached).HasColumnName("is_reached");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.ProjectId).HasColumnName("project_id");
            entity.Property(e => e.QuantityPercentage).HasColumnName("quantity_percentage");
            entity.Property(e => e.ReachedDate).HasColumnName("reached_date");
            entity.Property(e => e.SaleLineId).HasColumnName("sale_line_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_milestone_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.ProjectMilestones)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_milestone_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Project).WithMany(p => p.ProjectMilestones)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("project_milestone_project_id_fkey");

            entity.HasOne(d => d.SaleLine).WithMany(p => p.ProjectMilestones)
                .HasForeignKey(d => d.SaleLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_milestone_sale_line_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_milestone_write_uid_fkey");
        });

        modelBuilder.Entity<ProjectProject>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_project_pkey");

            entity.ToTable("project_project");

            entity.HasIndex(e => e.Date, "project_project_date_index");

            entity.HasIndex(e => e.SaleLineId, "project_project_sale_line_id_index").HasFilter("(sale_line_id IS NOT NULL)");

            entity.HasIndex(e => e.StageId, "project_project_stage_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccessToken).HasColumnName("access_token");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AliasId).HasColumnName("alias_id");
            entity.Property(e => e.AllowBillable).HasColumnName("allow_billable");
            entity.Property(e => e.AllowMilestones).HasColumnName("allow_milestones");
            entity.Property(e => e.AllowRecurringTasks).HasColumnName("allow_recurring_tasks");
            entity.Property(e => e.AllowSubtasks).HasColumnName("allow_subtasks");
            entity.Property(e => e.AllowTaskDependencies).HasColumnName("allow_task_dependencies");
            entity.Property(e => e.AnalyticAccountId).HasColumnName("analytic_account_id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.DateStart).HasColumnName("date_start");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.LabelTasks)
                .HasColumnType("jsonb")
                .HasColumnName("label_tasks");
            entity.Property(e => e.LastUpdateId).HasColumnName("last_update_id");
            entity.Property(e => e.LastUpdateStatus).HasColumnName("last_update_status");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PartnerEmail).HasColumnName("partner_email");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PartnerPhone).HasColumnName("partner_phone");
            entity.Property(e => e.PrivacyVisibility).HasColumnName("privacy_visibility");
            entity.Property(e => e.RatingActive).HasColumnName("rating_active");
            entity.Property(e => e.RatingRequestDeadline)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("rating_request_deadline");
            entity.Property(e => e.RatingStatus).HasColumnName("rating_status");
            entity.Property(e => e.RatingStatusPeriod).HasColumnName("rating_status_period");
            entity.Property(e => e.SaleLineId).HasColumnName("sale_line_id");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.StageId).HasColumnName("stage_id");
            entity.Property(e => e.TaskPropertiesDefinition)
                .HasColumnType("jsonb")
                .HasColumnName("task_properties_definition");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Alias).WithMany(p => p.ProjectProjects)
                .HasForeignKey(d => d.AliasId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("project_project_alias_id_fkey");

            entity.HasOne(d => d.AnalyticAccount).WithMany(p => p.ProjectProjects)
                .HasForeignKey(d => d.AnalyticAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_analytic_account_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("project_project_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_create_uid_fkey");

            entity.HasOne(d => d.LastUpdate).WithMany(p => p.ProjectProjects)
                .HasForeignKey(d => d.LastUpdateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_last_update_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.ProjectProjects)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_message_main_attachment_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_partner_id_fkey");

            entity.HasOne(d => d.SaleLine).WithMany(p => p.ProjectProjects)
                .HasForeignKey(d => d.SaleLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_sale_line_id_fkey");

            entity.HasOne(d => d.Stage).WithMany(p => p.ProjectProjects)
                .HasForeignKey(d => d.StageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("project_project_stage_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_write_uid_fkey");

            //entity.HasMany(d => d.ProjectTags).WithMany(p => p.ProjectProjects)
            entity.HasMany<ProjectTag>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProjectProjectProjectTagsRel",
                    r => r.HasOne<ProjectTag>().WithMany()
                        .HasForeignKey("ProjectTagsId")
                        .HasConstraintName("project_project_project_tags_rel_project_tags_id_fkey"),
                    l => l.HasOne<ProjectProject>().WithMany()
                        .HasForeignKey("ProjectProjectId")
                        .HasConstraintName("project_project_project_tags_rel_project_project_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProjectProjectId", "ProjectTagsId").HasName("project_project_project_tags_rel_pkey");
                        j.ToTable("project_project_project_tags_rel");
                        j.HasIndex(new[] { "ProjectTagsId", "ProjectProjectId" }, "project_project_project_tags__project_tags_id_project_proje_idx");
                    });

            //entity.HasMany(d => d.Users).WithMany(p => p.Projects)
            entity.HasMany<ResUser>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProjectFavoriteUserRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("project_favorite_user_rel_user_id_fkey"),
                    l => l.HasOne<ProjectProject>().WithMany()
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("project_favorite_user_rel_project_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProjectId", "UserId").HasName("project_favorite_user_rel_pkey");
                        j.ToTable("project_favorite_user_rel");
                        j.HasIndex(new[] { "UserId", "ProjectId" }, "project_favorite_user_rel_user_id_project_id_idx");
                    });
        });

        modelBuilder.Entity<ProjectProjectStage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_project_stage_pkey");

            entity.ToTable("project_project_stage");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Fold).HasColumnName("fold");
            entity.Property(e => e.MailTemplateId).HasColumnName("mail_template_id");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                //.ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.SmsTemplateId).HasColumnName("sms_template_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_stage_create_uid_fkey");

            entity.HasOne(d => d.MailTemplate).WithMany(p => p.ProjectProjectStages)
                .HasForeignKey(d => d.MailTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_stage_mail_template_id_fkey");

            entity.HasOne(d => d.SmsTemplate).WithMany(p => p.ProjectProjectStages)
                .HasForeignKey(d => d.SmsTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_stage_sms_template_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_project_stage_write_uid_fkey");
        });

        modelBuilder.Entity<ProjectShareWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_share_wizard_pkey");

            entity.ToTable("project_share_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccessMode).HasColumnName("access_mode");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DisplayAccessMode).HasColumnName("display_access_mode");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.ResId).HasColumnName("res_id");
            entity.Property(e => e.ResModel).HasColumnName("res_model");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_share_wizard_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_share_wizard_write_uid_fkey");

            //entity.HasMany(d => d.ResPartners).WithMany(p => p.ProjectShareWizards)
            entity.HasMany<ResPartner>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProjectShareWizardResPartnerRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("project_share_wizard_res_partner_rel_res_partner_id_fkey"),
                    l => l.HasOne<ProjectShareWizard>().WithMany()
                        .HasForeignKey("ProjectShareWizardId")
                        .HasConstraintName("project_share_wizard_res_partner_r_project_share_wizard_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProjectShareWizardId", "ResPartnerId").HasName("project_share_wizard_res_partner_rel_pkey");
                        j.ToTable("project_share_wizard_res_partner_rel");
                        j.HasIndex(new[] { "ResPartnerId", "ProjectShareWizardId" }, "project_share_wizard_res_part_res_partner_id_project_share__idx");
                    });
        });

        modelBuilder.Entity<ProjectTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_tags_pkey");

            entity.ToTable("project_tags");

            entity.HasIndex(e => e.Name, "project_tags_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_tags_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_tags_write_uid_fkey");
        });

        modelBuilder.Entity<ProjectTask>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_task_pkey");

            entity.ToTable("project_task");

            entity.HasIndex(e => e.AncestorId, "project_task_ancestor_id_index").HasFilter("(ancestor_id IS NOT NULL)");

            entity.HasIndex(e => e.DateDeadline, "project_task_date_deadline_index");

            entity.HasIndex(e => e.DateEnd, "project_task_date_end_index");

            entity.HasIndex(e => e.DateLastStageUpdate, "project_task_date_last_stage_update_index");

            entity.HasIndex(e => e.DisplayProjectId, "project_task_display_project_id_index");

            entity.HasIndex(e => e.EmailFrom, "project_task_email_from_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.IsClosed, "project_task_is_closed_index");

            entity.HasIndex(e => e.Name, "project_task_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.ParentId, "project_task_parent_id_index");

            entity.HasIndex(e => e.Priority, "project_task_priority_index");

            entity.HasIndex(e => e.ProjectId, "project_task_project_id_index");

            entity.HasIndex(e => e.SaleLineId, "project_task_sale_line_id_index").HasFilter("(sale_line_id IS NOT NULL)");

            entity.HasIndex(e => e.StageId, "project_task_stage_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccessToken).HasColumnName("access_token");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AnalyticAccountId).HasColumnName("analytic_account_id");
            entity.Property(e => e.AncestorId).HasColumnName("ancestor_id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateAssign)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_assign");
            entity.Property(e => e.DateDeadline).HasColumnName("date_deadline");
            entity.Property(e => e.DateEnd)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_end");
            entity.Property(e => e.DateLastStageUpdate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_last_stage_update");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.DisplayProjectId).HasColumnName("display_project_id");
            entity.Property(e => e.DisplayedImageId).HasColumnName("displayed_image_id");
            entity.Property(e => e.EmailCc).HasColumnName("email_cc");
            entity.Property(e => e.EmailFrom).HasColumnName("email_from");
            entity.Property(e => e.IsAnalyticAccountIdChanged).HasColumnName("is_analytic_account_id_changed");
            entity.Property(e => e.IsBlocked).HasColumnName("is_blocked");
            entity.Property(e => e.IsClosed).HasColumnName("is_closed");
            entity.Property(e => e.KanbanState).HasColumnName("kanban_state");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.MilestoneId).HasColumnName("milestone_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PartnerEmail).HasColumnName("partner_email");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PartnerPhone).HasColumnName("partner_phone");
            entity.Property(e => e.PlannedHours).HasColumnName("planned_hours");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.ProjectId).HasColumnName("project_id");
            entity.Property(e => e.RatingLastValue).HasColumnName("rating_last_value");
            entity.Property(e => e.RecurrenceId).HasColumnName("recurrence_id");
            entity.Property(e => e.RecurringTask).HasColumnName("recurring_task");
            entity.Property(e => e.SaleLineId).HasColumnName("sale_line_id");
            entity.Property(e => e.SaleOrderId).HasColumnName("sale_order_id");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.StageId).HasColumnName("stage_id");
            entity.Property(e => e.TaskProperties)
                .HasColumnType("jsonb")
                .HasColumnName("task_properties");
            entity.Property(e => e.WorkingDaysClose).HasColumnName("working_days_close");
            entity.Property(e => e.WorkingDaysOpen).HasColumnName("working_days_open");
            entity.Property(e => e.WorkingHoursClose).HasColumnName("working_hours_close");
            entity.Property(e => e.WorkingHoursOpen).HasColumnName("working_hours_open");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AnalyticAccount).WithMany(p => p.ProjectTasks)
                .HasForeignKey(d => d.AnalyticAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_analytic_account_id_fkey");

            entity.HasOne(d => d.Ancestor).WithMany(p => p.InverseAncestor)
                .HasForeignKey(d => d.AncestorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_ancestor_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("project_task_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_create_uid_fkey");

            entity.HasOne(d => d.DisplayProject).WithMany(p => p.ProjectTaskDisplayProjects)
                .HasForeignKey(d => d.DisplayProjectId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_display_project_id_fkey");

            entity.HasOne(d => d.DisplayedImage).WithMany(p => p.ProjectTaskDisplayedImages)
                .HasForeignKey(d => d.DisplayedImageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_displayed_image_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.ProjectTaskMessageMainAttachments)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Milestone).WithMany(p => p.ProjectTasks)
                .HasForeignKey(d => d.MilestoneId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_milestone_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_parent_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_partner_id_fkey");

            entity.HasOne(d => d.Project).WithMany(p => p.ProjectTaskProjects)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_project_id_fkey");

            entity.HasOne(d => d.Recurrence).WithMany(p => p.ProjectTasks)
                .HasForeignKey(d => d.RecurrenceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_recurrence_id_fkey");

            entity.HasOne(d => d.SaleLine).WithMany(p => p.ProjectTasks)
                .HasForeignKey(d => d.SaleLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_sale_line_id_fkey");

            entity.HasOne(d => d.SaleOrder).WithMany(p => p.ProjectTasks)
                .HasForeignKey(d => d.SaleOrderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_sale_order_id_fkey");

            entity.HasOne(d => d.Stage).WithMany(p => p.ProjectTasks)
                .HasForeignKey(d => d.StageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("project_task_stage_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_write_uid_fkey");

            //entity.HasMany(d => d.DependsOns).WithMany(p => p.Tasks)
            entity.HasMany<ProjectTask>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "TaskDependenciesRel",
                    r => r.HasOne<ProjectTask>().WithMany()
                        .HasForeignKey("DependsOnId")
                        .HasConstraintName("task_dependencies_rel_depends_on_id_fkey"),
                    l => l.HasOne<ProjectTask>().WithMany()
                        .HasForeignKey("TaskId")
                        .HasConstraintName("task_dependencies_rel_task_id_fkey"),
                    j =>
                    {
                        j.HasKey("TaskId", "DependsOnId").HasName("task_dependencies_rel_pkey");
                        j.ToTable("task_dependencies_rel");
                        j.HasIndex(new[] { "DependsOnId", "TaskId" }, "task_dependencies_rel_depends_on_id_task_id_idx");
                    });

            //entity.HasMany(d => d.ProjectTags).WithMany(p => p.ProjectTasks)
            entity.HasMany<ProjectTag>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProjectTagsProjectTaskRel",
                    r => r.HasOne<ProjectTag>().WithMany()
                        .HasForeignKey("ProjectTagsId")
                        .HasConstraintName("project_tags_project_task_rel_project_tags_id_fkey"),
                    l => l.HasOne<ProjectTask>().WithMany()
                        .HasForeignKey("ProjectTaskId")
                        .HasConstraintName("project_tags_project_task_rel_project_task_id_fkey"),
                    j =>
                    {
                        j.HasKey("ProjectTaskId", "ProjectTagsId").HasName("project_tags_project_task_rel_pkey");
                        j.ToTable("project_tags_project_task_rel");
                        j.HasIndex(new[] { "ProjectTagsId", "ProjectTaskId" }, "project_tags_project_task_rel_project_tags_id_project_task__idx");
                    });

            //entity.HasMany(d => d.Tasks).WithMany(p => p.DependsOns)
            entity.HasMany<ProjectTask>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "TaskDependenciesRel",
                    r => r.HasOne<ProjectTask>().WithMany()
                        .HasForeignKey("TaskId")
                        .HasConstraintName("task_dependencies_rel_task_id_fkey"),
                    l => l.HasOne<ProjectTask>().WithMany()
                        .HasForeignKey("DependsOnId")
                        .HasConstraintName("task_dependencies_rel_depends_on_id_fkey"),
                    j =>
                    {
                        j.HasKey("TaskId", "DependsOnId").HasName("task_dependencies_rel_pkey");
                        j.ToTable("task_dependencies_rel");
                        j.HasIndex(new[] { "DependsOnId", "TaskId" }, "task_dependencies_rel_depends_on_id_task_id_idx");
                    });
        });

        modelBuilder.Entity<ProjectTaskRecurrence>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_task_recurrence_pkey");

            entity.ToTable("project_task_recurrence");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Fri).HasColumnName("fri");
            entity.Property(e => e.Mon).HasColumnName("mon");
            entity.Property(e => e.NextRecurrenceDate).HasColumnName("next_recurrence_date");
            entity.Property(e => e.RecurrenceLeft).HasColumnName("recurrence_left");
            entity.Property(e => e.RepeatDay).HasColumnName("repeat_day");
            entity.Property(e => e.RepeatInterval).HasColumnName("repeat_interval");
            entity.Property(e => e.RepeatMonth).HasColumnName("repeat_month");
            entity.Property(e => e.RepeatNumber).HasColumnName("repeat_number");
            entity.Property(e => e.RepeatOnMonth).HasColumnName("repeat_on_month");
            entity.Property(e => e.RepeatOnYear).HasColumnName("repeat_on_year");
            entity.Property(e => e.RepeatType).HasColumnName("repeat_type");
            entity.Property(e => e.RepeatUnit).HasColumnName("repeat_unit");
            entity.Property(e => e.RepeatUntil).HasColumnName("repeat_until");
            entity.Property(e => e.RepeatWeek).HasColumnName("repeat_week");
            entity.Property(e => e.RepeatWeekday).HasColumnName("repeat_weekday");
            entity.Property(e => e.Sat).HasColumnName("sat");
            entity.Property(e => e.Sun).HasColumnName("sun");
            entity.Property(e => e.Thu).HasColumnName("thu");
            entity.Property(e => e.Tue).HasColumnName("tue");
            entity.Property(e => e.Wed).HasColumnName("wed");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_recurrence_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_recurrence_write_uid_fkey");
        });

        modelBuilder.Entity<ProjectTaskType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_task_type_pkey");

            entity.ToTable("project_task_type");

            entity.HasIndex(e => e.UserId, "project_task_type_user_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AutoValidationKanbanState).HasColumnName("auto_validation_kanban_state");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.Fold).HasColumnName("fold");
            entity.Property(e => e.LegendBlocked)
                .HasColumnType("jsonb")
                .HasColumnName("legend_blocked");
            entity.Property(e => e.LegendDone)
                .HasColumnType("jsonb")
                .HasColumnName("legend_done");
            entity.Property(e => e.LegendNormal)
                .HasColumnType("jsonb")
                .HasColumnName("legend_normal");
            entity.Property(e => e.MailTemplateId).HasColumnName("mail_template_id");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.RatingTemplateId).HasColumnName("rating_template_id");
            entity.Property(e => e.Sequence)
                //.ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.SmsTemplateId).HasColumnName("sms_template_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_type_create_uid_fkey");

            entity.HasOne(d => d.MailTemplate).WithMany(p => p.ProjectTaskTypeMailTemplates)
                .HasForeignKey(d => d.MailTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_type_mail_template_id_fkey");

            entity.HasOne(d => d.RatingTemplate).WithMany(p => p.ProjectTaskTypeRatingTemplates)
                .HasForeignKey(d => d.RatingTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_type_rating_template_id_fkey");

            entity.HasOne(d => d.SmsTemplate).WithMany(p => p.ProjectTaskTypes)
                .HasForeignKey(d => d.SmsTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_type_sms_template_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_type_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_type_write_uid_fkey");

            //entity.HasMany(d => d.Projects).WithMany(p => p.Types)
            entity.HasMany<ProjectProject>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProjectTaskTypeRel",
                    r => r.HasOne<ProjectProject>().WithMany()
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("project_task_type_rel_project_id_fkey"),
                    l => l.HasOne<ProjectTaskType>().WithMany()
                        .HasForeignKey("TypeId")
                        .HasConstraintName("project_task_type_rel_type_id_fkey"),
                    j =>
                    {
                        j.HasKey("TypeId", "ProjectId").HasName("project_task_type_rel_pkey");
                        j.ToTable("project_task_type_rel");
                        j.HasIndex(new[] { "ProjectId", "TypeId" }, "project_task_type_rel_project_id_type_id_idx");
                    });
        });

        modelBuilder.Entity<ProjectTaskTypeDeleteWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_task_type_delete_wizard_pkey");

            entity.ToTable("project_task_type_delete_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_type_delete_wizard_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_type_delete_wizard_write_uid_fkey");

            //entity.HasMany(d => d.ProjectProjects).WithMany(p => p.ProjectTaskTypeDeleteWizards)
            entity.HasMany<ProjectProject>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProjectProjectProjectTaskTypeDeleteWizardRel",
                    r => r.HasOne<ProjectProject>().WithMany()
                        .HasForeignKey("ProjectProjectId")
                        .HasConstraintName("project_project_project_task_type_delet_project_project_id_fkey"),
                    l => l.HasOne<ProjectTaskTypeDeleteWizard>().WithMany()
                        .HasForeignKey("ProjectTaskTypeDeleteWizardId")
                        .HasConstraintName("project_project_project_task__project_task_type_delete_wiz_fkey"),
                    j =>
                    {
                        j.HasKey("ProjectTaskTypeDeleteWizardId", "ProjectProjectId").HasName("project_project_project_task_type_delete_wizard_rel_pkey");
                        j.ToTable("project_project_project_task_type_delete_wizard_rel");
                        j.HasIndex(new[] { "ProjectProjectId", "ProjectTaskTypeDeleteWizardId" }, "project_project_project_task__project_project_id_project_ta_idx");
                    });

            //entity.HasMany(d => d.ProjectTaskTypes).WithMany(p => p.ProjectTaskTypeDeleteWizards)
            entity.HasMany<ProjectTaskType>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProjectTaskTypeProjectTaskTypeDeleteWizardRel",
                    r => r.HasOne<ProjectTaskType>().WithMany()
                        .HasForeignKey("ProjectTaskTypeId")
                        .HasConstraintName("project_task_type_project_task_type_d_project_task_type_id_fkey"),
                    l => l.HasOne<ProjectTaskTypeDeleteWizard>().WithMany()
                        .HasForeignKey("ProjectTaskTypeDeleteWizardId")
                        .HasConstraintName("project_task_type_project_tas_project_task_type_delete_wiz_fkey"),
                    j =>
                    {
                        j.HasKey("ProjectTaskTypeDeleteWizardId", "ProjectTaskTypeId").HasName("project_task_type_project_task_type_delete_wizard_rel_pkey");
                        j.ToTable("project_task_type_project_task_type_delete_wizard_rel");
                        j.HasIndex(new[] { "ProjectTaskTypeId", "ProjectTaskTypeDeleteWizardId" }, "project_task_type_project_tas_project_task_type_id_project__idx");
                    });
        });

        modelBuilder.Entity<ProjectTaskUserRel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_task_user_rel_pkey");

            entity.ToTable("project_task_user_rel");

            entity.HasIndex(e => new { e.TaskId, e.UserId }, "project_task_user_rel_project_personal_stage_unique").IsUnique();

            entity.HasIndex(e => e.TaskId, "project_task_user_rel_task_id_index");

            entity.HasIndex(e => e.UserId, "project_task_user_rel_user_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.StageId).HasColumnName("stage_id");
            entity.Property(e => e.TaskId).HasColumnName("task_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_user_rel_create_uid_fkey");

            entity.HasOne(d => d.Stage).WithMany(p => p.ProjectTaskUserRels)
                .HasForeignKey(d => d.StageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("project_task_user_rel_stage_id_fkey");

            entity.HasOne(d => d.Task).WithMany(p => p.ProjectTaskUserRels)
                .HasForeignKey(d => d.TaskId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("project_task_user_rel_task_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("project_task_user_rel_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_task_user_rel_write_uid_fkey");
        });

        modelBuilder.Entity<ProjectUpdate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("project_update_pkey");

            entity.ToTable("project_update");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.EmailCc).HasColumnName("email_cc");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Progress).HasColumnName("progress");
            entity.Property(e => e.ProjectId).HasColumnName("project_id");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_update_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.ProjectUpdates)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_update_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Project).WithMany(p => p.ProjectUpdates)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("project_update_project_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("project_update_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("project_update_write_uid_fkey");
        });

        modelBuilder.Entity<PurchaseOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("purchase_order_pkey");

            entity.ToTable("purchase_order");

            entity.HasIndex(e => e.TenantId, "purchase_order_company_id_index");

            entity.HasIndex(e => e.DateApprove, "purchase_order_date_approve_index");

            entity.HasIndex(e => e.DateOrder, "purchase_order_date_order_index");

            entity.HasIndex(e => e.DatePlanned, "purchase_order_date_planned_index");

            entity.HasIndex(e => e.Name, "purchase_order_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.Priority, "purchase_order_priority_index");

            entity.HasIndex(e => e.State, "purchase_order_state_index");

            entity.HasIndex(e => e.UserId, "purchase_order_user_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccessToken).HasColumnName("access_token");
            entity.Property(e => e.AmountTax).HasColumnName("amount_tax");
            entity.Property(e => e.AmountTotal).HasColumnName("amount_total");
            entity.Property(e => e.AmountUntaxed).HasColumnName("amount_untaxed");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.CurrencyRate).HasColumnName("currency_rate");
            entity.Property(e => e.DateApprove)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_approve");
            entity.Property(e => e.DateCalendarStart)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_calendar_start");
            entity.Property(e => e.DateOrder)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_order");
            entity.Property(e => e.DatePlanned)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_planned");
            entity.Property(e => e.DestAddressId).HasColumnName("dest_address_id");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("effective_date");
            entity.Property(e => e.FiscalPositionId).HasColumnName("fiscal_position_id");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.IncotermId).HasColumnName("incoterm_id");
            entity.Property(e => e.IncotermLocation).HasColumnName("incoterm_location");
            entity.Property(e => e.InvoiceCount).HasColumnName("invoice_count");
            entity.Property(e => e.InvoiceStatus).HasColumnName("invoice_status");
            entity.Property(e => e.MailReceptionConfirmed).HasColumnName("mail_reception_confirmed");
            entity.Property(e => e.MailReminderConfirmed).HasColumnName("mail_reminder_confirmed");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Notes).HasColumnName("notes");
            entity.Property(e => e.Origin).HasColumnName("origin");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PartnerRef).HasColumnName("partner_ref");
            entity.Property(e => e.PaymentTermId).HasColumnName("payment_term_id");
            entity.Property(e => e.PickingTypeId).HasColumnName("picking_type_id");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.ReceiptStatus).HasColumnName("receipt_status");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("purchase_order_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("purchase_order_currency_id_fkey");

            entity.HasOne(d => d.DestAddress).WithMany(p => p.PurchaseOrderDestAddresses)
                .HasForeignKey(d => d.DestAddressId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_dest_address_id_fkey");

            entity.HasOne(d => d.FiscalPosition).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.FiscalPositionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_fiscal_position_id_fkey");

            entity.HasOne(d => d.Group).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_group_id_fkey");

            entity.HasOne(d => d.Incoterm).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.IncotermId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_incoterm_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_message_main_attachment_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("purchase_order_partner_id_fkey");

            entity.HasOne(d => d.PaymentTerm).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.PaymentTermId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_payment_term_id_fkey");

            entity.HasOne(d => d.PickingType).WithMany(p => p.PurchaseOrders)
                .HasForeignKey(d => d.PickingTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("purchase_order_picking_type_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_write_uid_fkey");

            //entity.HasMany(d => d.AccountMoves).WithMany(p => p.PurchaseOrders)
            entity.HasMany<AccountMove>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountMovePurchaseOrderRel",
                    r => r.HasOne<AccountMove>().WithMany()
                        .HasForeignKey("AccountMoveId")
                        .HasConstraintName("account_move_purchase_order_rel_account_move_id_fkey"),
                    l => l.HasOne<PurchaseOrder>().WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("account_move_purchase_order_rel_purchase_order_id_fkey"),
                    j =>
                    {
                        j.HasKey("PurchaseOrderId", "AccountMoveId").HasName("account_move_purchase_order_rel_pkey");
                        j.ToTable("account_move_purchase_order_rel");
                        j.HasIndex(new[] { "AccountMoveId", "PurchaseOrderId" }, "account_move_purchase_order_r_account_move_id_purchase_orde_idx");
                    });

            //entity.HasMany(d => d.StockPickings).WithMany(p => p.PurchaseOrders)
            entity.HasMany<StockPicking>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "PurchaseOrderStockPickingRel",
                    r => r.HasOne<StockPicking>().WithMany()
                        .HasForeignKey("StockPickingId")
                        .HasConstraintName("purchase_order_stock_picking_rel_stock_picking_id_fkey"),
                    l => l.HasOne<PurchaseOrder>().WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("purchase_order_stock_picking_rel_purchase_order_id_fkey"),
                    j =>
                    {
                        j.HasKey("PurchaseOrderId", "StockPickingId").HasName("purchase_order_stock_picking_rel_pkey");
                        j.ToTable("purchase_order_stock_picking_rel");
                        j.HasIndex(new[] { "StockPickingId", "PurchaseOrderId" }, "purchase_order_stock_picking__stock_picking_id_purchase_ord_idx");
                    });
        });

        modelBuilder.Entity<PurchaseOrderLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("purchase_order_line_pkey");

            entity.ToTable("purchase_order_line");

            entity.HasIndex(e => e.AnalyticDistribution, "purchase_order_line_analytic_distribution_gin_index").HasMethod("gin");

            entity.HasIndex(e => e.DatePlanned, "purchase_order_line_date_planned_index");

            entity.HasIndex(e => e.OrderId, "purchase_order_line_order_id_index");

            entity.HasIndex(e => e.OrderpointId, "purchase_order_line_orderpoint_id_index").HasFilter("(orderpoint_id IS NOT NULL)");

            entity.HasIndex(e => e.ProductId, "purchase_order_line_product_id_index").HasFilter("(product_id IS NOT NULL)");

            entity.HasIndex(e => e.SaleLineId, "purchase_order_line_sale_line_id_index").HasFilter("(sale_line_id IS NOT NULL)");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AnalyticDistribution)
                .HasColumnType("jsonb")
                .HasColumnName("analytic_distribution");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.DatePlanned)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_planned");
            entity.Property(e => e.DisplayType).HasColumnName("display_type");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OrderId).HasColumnName("order_id");
            entity.Property(e => e.OrderpointId).HasColumnName("orderpoint_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PriceSubtotal).HasColumnName("price_subtotal");
            entity.Property(e => e.PriceTax).HasColumnName("price_tax");
            entity.Property(e => e.PriceTotal).HasColumnName("price_total");
            entity.Property(e => e.PriceUnit).HasColumnName("price_unit");
            entity.Property(e => e.ProductDescriptionVariants).HasColumnName("product_description_variants");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductPackagingId).HasColumnName("product_packaging_id");
            entity.Property(e => e.ProductPackagingQty).HasColumnName("product_packaging_qty");
            entity.Property(e => e.ProductQty).HasColumnName("product_qty");
            entity.Property(e => e.ProductUom).HasColumnName("product_uom");
            entity.Property(e => e.ProductUomQty).HasColumnName("product_uom_qty");
            entity.Property(e => e.PropagateCancel).HasColumnName("propagate_cancel");
            entity.Property(e => e.QtyInvoiced).HasColumnName("qty_invoiced");
            entity.Property(e => e.QtyReceived).HasColumnName("qty_received");
            entity.Property(e => e.QtyReceivedManual).HasColumnName("qty_received_manual");
            entity.Property(e => e.QtyReceivedMethod).HasColumnName("qty_received_method");
            entity.Property(e => e.QtyToInvoice).HasColumnName("qty_to_invoice");
            entity.Property(e => e.SaleLineId).HasColumnName("sale_line_id");
            entity.Property(e => e.SaleOrderId).HasColumnName("sale_order_id");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_line_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_line_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_line_currency_id_fkey");

            entity.HasOne(d => d.Order).WithMany(p => p.PurchaseOrderLines)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("purchase_order_line_order_id_fkey");

            entity.HasOne(d => d.Orderpoint).WithMany(p => p.PurchaseOrderLines)
                .HasForeignKey(d => d.OrderpointId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_line_orderpoint_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_line_partner_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.PurchaseOrderLines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_line_product_id_fkey");

            entity.HasOne(d => d.ProductPackaging).WithMany(p => p.PurchaseOrderLines)
                .HasForeignKey(d => d.ProductPackagingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_line_product_packaging_id_fkey");

            entity.HasOne(d => d.ProductUomNavigation).WithMany(p => p.PurchaseOrderLines)
                .HasForeignKey(d => d.ProductUom)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_line_product_uom_fkey");

            entity.HasOne(d => d.SaleLine).WithMany(p => p.PurchaseOrderLines)
                .HasForeignKey(d => d.SaleLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_line_sale_line_id_fkey");

            entity.HasOne(d => d.SaleOrder).WithMany(p => p.PurchaseOrderLines)
                .HasForeignKey(d => d.SaleOrderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_line_sale_order_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchase_order_line_write_uid_fkey");

            //entity.HasMany(d => d.AccountTaxes).WithMany(p => p.PurchaseOrderLines)
            entity.HasMany<AccountTax>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxPurchaseOrderLineRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("AccountTaxId")
                        .HasConstraintName("account_tax_purchase_order_line_rel_account_tax_id_fkey"),
                    l => l.HasOne<PurchaseOrderLine>().WithMany()
                        .HasForeignKey("PurchaseOrderLineId")
                        .HasConstraintName("account_tax_purchase_order_line_rel_purchase_order_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("PurchaseOrderLineId", "AccountTaxId").HasName("account_tax_purchase_order_line_rel_pkey");
                        j.ToTable("account_tax_purchase_order_line_rel");
                        j.HasIndex(new[] { "AccountTaxId", "PurchaseOrderLineId" }, "account_tax_purchase_order_li_account_tax_id_purchase_order_idx");
                    });
        });

        modelBuilder.Entity<RatingRating>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("rating_rating_pkey");

            entity.ToTable("rating_rating");

            entity.HasIndex(e => e.MessageId, "rating_rating_message_id_index");

            entity.HasIndex(e => e.ParentResId, "rating_rating_parent_res_id_index");

            entity.HasIndex(e => e.ParentResModelId, "rating_rating_parent_res_model_id_index");

            entity.HasIndex(e => e.ParentResModel, "rating_rating_parent_res_model_index");

            entity.HasIndex(e => e.ResId, "rating_rating_res_id_index");

            entity.HasIndex(e => e.ResModelId, "rating_rating_res_model_id_index");

            entity.HasIndex(e => e.ResModel, "rating_rating_res_model_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccessToken).HasColumnName("access_token");
            entity.Property(e => e.Consumed).HasColumnName("consumed");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Feedback).HasColumnName("feedback");
            entity.Property(e => e.IsInternal).HasColumnName("is_internal");
            entity.Property(e => e.MessageId).HasColumnName("message_id");
            entity.Property(e => e.ParentResId).HasColumnName("parent_res_id");
            entity.Property(e => e.ParentResModel).HasColumnName("parent_res_model");
            entity.Property(e => e.ParentResModelId).HasColumnName("parent_res_model_id");
            entity.Property(e => e.ParentResName).HasColumnName("parent_res_name");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PublisherComment).HasColumnName("publisher_comment");
            entity.Property(e => e.PublisherDatetime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("publisher_datetime");
            entity.Property(e => e.PublisherId).HasColumnName("publisher_id");
            entity.Property(e => e.RatedPartnerId).HasColumnName("rated_partner_id");
            entity.Property(e => e.Rating).HasColumnName("rating");
            entity.Property(e => e.RatingText).HasColumnName("rating_text");
            entity.Property(e => e.ResId).HasColumnName("res_id");
            entity.Property(e => e.ResModel).HasColumnName("res_model");
            entity.Property(e => e.ResModelId).HasColumnName("res_model_id");
            entity.Property(e => e.ResName).HasColumnName("res_name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("rating_rating_create_uid_fkey");

            entity.HasOne(d => d.Message).WithMany(p => p.RatingRatings)
                .HasForeignKey(d => d.MessageId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("rating_rating_message_id_fkey");

            entity.HasOne(d => d.ParentResModelNavigation).WithMany(p => p.RatingRatingParentResModelNavigations)
                .HasForeignKey(d => d.ParentResModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("rating_rating_parent_res_model_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("rating_rating_partner_id_fkey");

            entity.HasOne(d => d.Publisher).WithMany(p => p.RatingRatingPublishers)
                .HasForeignKey(d => d.PublisherId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("rating_rating_publisher_id_fkey");

            entity.HasOne(d => d.RatedPartner).WithMany(p => p.RatingRatingRatedPartners)
                .HasForeignKey(d => d.RatedPartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("rating_rating_rated_partner_id_fkey");

            entity.HasOne(d => d.ResModelNavigation).WithMany(p => p.RatingRatingResModelNavigations)
                .HasForeignKey(d => d.ResModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("rating_rating_res_model_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("rating_rating_write_uid_fkey");
        });

        modelBuilder.Entity<RecurringPayment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("recurring_payment_pkey");

            entity.ToTable("recurring_payment");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateBegin).HasColumnName("date_begin");
            entity.Property(e => e.DateEnd).HasColumnName("date_end");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PaymentType).HasColumnName("payment_type");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.TemplateId).HasColumnName("template_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("recurring_payment_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("recurring_payment_create_uid_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("recurring_payment_partner_id_fkey");

            entity.HasOne(d => d.Template).WithMany(p => p.RecurringPayments)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("recurring_payment_template_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("recurring_payment_write_uid_fkey");
        });

        modelBuilder.Entity<RecurringPaymentLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("recurring_payment_line_pkey");

            entity.ToTable("recurring_payment_line");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.JournalId).HasColumnName("journal_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PaymentId).HasColumnName("payment_id");
            entity.Property(e => e.RecurringPaymentId).HasColumnName("recurring_payment_id");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("recurring_payment_line_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("recurring_payment_line_create_uid_fkey");

            entity.HasOne(d => d.Journal).WithMany(p => p.RecurringPaymentLines)
                .HasForeignKey(d => d.JournalId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("recurring_payment_line_journal_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("recurring_payment_line_partner_id_fkey");

            entity.HasOne(d => d.Payment).WithMany(p => p.RecurringPaymentLines)
                .HasForeignKey(d => d.PaymentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("recurring_payment_line_payment_id_fkey");

            entity.HasOne(d => d.RecurringPayment).WithMany(p => p.RecurringPaymentLines)
                .HasForeignKey(d => d.RecurringPaymentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("recurring_payment_line_recurring_payment_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("recurring_payment_line_write_uid_fkey");
        });

        modelBuilder.Entity<RepairFee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("repair_fee_pkey");

            entity.ToTable("repair_fee");

            entity.HasIndex(e => e.TenantId, "repair_fee_company_id_index");

            entity.HasIndex(e => e.Name, "repair_fee_name_index");

            entity.HasIndex(e => e.RepairId, "repair_fee_repair_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.InvoiceLineId).HasColumnName("invoice_line_id");
            entity.Property(e => e.Invoiced).HasColumnName("invoiced");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PriceSubtotal).HasColumnName("price_subtotal");
            entity.Property(e => e.PriceTotal).HasColumnName("price_total");
            entity.Property(e => e.PriceUnit).HasColumnName("price_unit");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductUom).HasColumnName("product_uom");
            entity.Property(e => e.ProductUomQty).HasColumnName("product_uom_qty");
            entity.Property(e => e.RepairId).HasColumnName("repair_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_fee_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_fee_create_uid_fkey");

            entity.HasOne(d => d.InvoiceLine).WithMany(p => p.RepairFees)
                .HasForeignKey(d => d.InvoiceLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_fee_invoice_line_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.RepairFees)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_fee_product_id_fkey");

            entity.HasOne(d => d.ProductUomNavigation).WithMany(p => p.RepairFees)
                .HasForeignKey(d => d.ProductUom)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("repair_fee_product_uom_fkey");

            entity.HasOne(d => d.Repair).WithMany(p => p.RepairFees)
                .HasForeignKey(d => d.RepairId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("repair_fee_repair_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_fee_write_uid_fkey");

            //entity.HasMany(d => d.Taxes).WithMany(p => p.RepairFeeLines)
            entity.HasMany<AccountTax>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "RepairFeeLineTax",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("TaxId")
                        .HasConstraintName("repair_fee_line_tax_tax_id_fkey"),
                    l => l.HasOne<RepairFee>().WithMany()
                        .HasForeignKey("RepairFeeLineId")
                        .HasConstraintName("repair_fee_line_tax_repair_fee_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("RepairFeeLineId", "TaxId").HasName("repair_fee_line_tax_pkey");
                        j.ToTable("repair_fee_line_tax");
                        j.HasIndex(new[] { "TaxId", "RepairFeeLineId" }, "repair_fee_line_tax_tax_id_repair_fee_line_id_idx");
                    });
        });

        modelBuilder.Entity<RepairLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("repair_line_pkey");

            entity.ToTable("repair_line");

            entity.HasIndex(e => e.TenantId, "repair_line_company_id_index");

            entity.HasIndex(e => e.LocationDestId, "repair_line_location_dest_id_index");

            entity.HasIndex(e => e.LocationId, "repair_line_location_id_index");

            entity.HasIndex(e => e.RepairId, "repair_line_repair_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.InvoiceLineId).HasColumnName("invoice_line_id");
            entity.Property(e => e.Invoiced).HasColumnName("invoiced");
            entity.Property(e => e.LocationDestId).HasColumnName("location_dest_id");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.LotId).HasColumnName("lot_id");
            entity.Property(e => e.MoveId).HasColumnName("move_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PriceSubtotal).HasColumnName("price_subtotal");
            entity.Property(e => e.PriceTotal).HasColumnName("price_total");
            entity.Property(e => e.PriceUnit).HasColumnName("price_unit");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductUom).HasColumnName("product_uom");
            entity.Property(e => e.ProductUomQty).HasColumnName("product_uom_qty");
            entity.Property(e => e.RepairId).HasColumnName("repair_id");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_line_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_line_create_uid_fkey");

            entity.HasOne(d => d.InvoiceLine).WithMany(p => p.RepairLines)
                .HasForeignKey(d => d.InvoiceLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_line_invoice_line_id_fkey");

            entity.HasOne(d => d.LocationDest).WithMany(p => p.RepairLineLocationDests)
                .HasForeignKey(d => d.LocationDestId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("repair_line_location_dest_id_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.RepairLineLocations)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("repair_line_location_id_fkey");

            entity.HasOne(d => d.Lot).WithMany(p => p.RepairLines)
                .HasForeignKey(d => d.LotId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_line_lot_id_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.RepairLines)
                .HasForeignKey(d => d.MoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_line_move_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.RepairLines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("repair_line_product_id_fkey");

            entity.HasOne(d => d.ProductUomNavigation).WithMany(p => p.RepairLines)
                .HasForeignKey(d => d.ProductUom)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("repair_line_product_uom_fkey");

            entity.HasOne(d => d.Repair).WithMany(p => p.RepairLines)
                .HasForeignKey(d => d.RepairId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("repair_line_repair_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_line_write_uid_fkey");

            //entity.HasMany(d => d.Taxes).WithMany(p => p.RepairOperationLines)
            entity.HasMany<AccountTax>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "RepairOperationLineTax",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("TaxId")
                        .HasConstraintName("repair_operation_line_tax_tax_id_fkey"),
                    l => l.HasOne<RepairLine>().WithMany()
                        .HasForeignKey("RepairOperationLineId")
                        .HasConstraintName("repair_operation_line_tax_repair_operation_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("RepairOperationLineId", "TaxId").HasName("repair_operation_line_tax_pkey");
                        j.ToTable("repair_operation_line_tax");
                        j.HasIndex(new[] { "TaxId", "RepairOperationLineId" }, "repair_operation_line_tax_tax_id_repair_operation_line_id_idx");
                    });
        });

        modelBuilder.Entity<RepairOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("repair_order_pkey");

            entity.ToTable("repair_order");

            entity.HasIndex(e => e.TenantId, "repair_order_company_id_index");

            entity.HasIndex(e => e.InvoiceMethod, "repair_order_invoice_method_index");

            entity.HasIndex(e => e.LocationId, "repair_order_location_id_index");

            entity.HasIndex(e => e.Name, "repair_order_name").IsUnique();

            entity.HasIndex(e => e.Name, "repair_order_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.PartnerId, "repair_order_partner_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AddressId).HasColumnName("address_id");
            entity.Property(e => e.AmountTax).HasColumnName("amount_tax");
            entity.Property(e => e.AmountTotal).HasColumnName("amount_total");
            entity.Property(e => e.AmountUntaxed).HasColumnName("amount_untaxed");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.GuaranteeLimit).HasColumnName("guarantee_limit");
            entity.Property(e => e.InternalNotes).HasColumnName("internal_notes");
            entity.Property(e => e.InvoiceId).HasColumnName("invoice_id");
            entity.Property(e => e.InvoiceMethod).HasColumnName("invoice_method");
            entity.Property(e => e.Invoiced).HasColumnName("invoiced");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.LotId).HasColumnName("lot_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.MoveId).HasColumnName("move_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PartnerInvoiceId).HasColumnName("partner_invoice_id");
            entity.Property(e => e.PickingId).HasColumnName("picking_id");
            entity.Property(e => e.PricelistId).HasColumnName("pricelist_id");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductQty).HasColumnName("product_qty");
            entity.Property(e => e.ProductUom).HasColumnName("product_uom");
            entity.Property(e => e.QuotationNotes).HasColumnName("quotation_notes");
            entity.Property(e => e.Repaired).HasColumnName("repaired");
            entity.Property(e => e.SaleOrderId).HasColumnName("sale_order_id");
            entity.Property(e => e.ScheduleDate).HasColumnName("schedule_date");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Address).WithMany(p => p.RepairOrderAddresses)
                .HasForeignKey(d => d.AddressId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_address_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("repair_order_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_create_uid_fkey");

            entity.HasOne(d => d.Invoice).WithMany(p => p.RepairOrders)
                .HasForeignKey(d => d.InvoiceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_invoice_id_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.RepairOrders)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("repair_order_location_id_fkey");

            entity.HasOne(d => d.Lot).WithMany(p => p.RepairOrders)
                .HasForeignKey(d => d.LotId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_lot_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.RepairOrders)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.RepairOrders)
                .HasForeignKey(d => d.MoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_move_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_partner_id_fkey");

            entity.HasOne(d => d.PartnerInvoice).WithMany(p => p.RepairOrderPartnerInvoices)
                .HasForeignKey(d => d.PartnerInvoiceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_partner_invoice_id_fkey");

            entity.HasOne(d => d.Picking).WithMany(p => p.RepairOrders)
                .HasForeignKey(d => d.PickingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_picking_id_fkey");

            entity.HasOne(d => d.Pricelist).WithMany(p => p.RepairOrders)
                .HasForeignKey(d => d.PricelistId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_pricelist_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.RepairOrders)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("repair_order_product_id_fkey");

            entity.HasOne(d => d.ProductUomNavigation).WithMany(p => p.RepairOrders)
                .HasForeignKey(d => d.ProductUom)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("repair_order_product_uom_fkey");

            entity.HasOne(d => d.SaleOrder).WithMany(p => p.RepairOrders)
                .HasForeignKey(d => d.SaleOrderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_sale_order_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_write_uid_fkey");

            //entity.HasMany(d => d.RepairTags).WithMany(p => p.RepairOrders)
            entity.HasMany<RepairTag>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "RepairOrderRepairTagsRel",
                    r => r.HasOne<RepairTag>().WithMany()
                        .HasForeignKey("RepairTagsId")
                        .HasConstraintName("repair_order_repair_tags_rel_repair_tags_id_fkey"),
                    l => l.HasOne<RepairOrder>().WithMany()
                        .HasForeignKey("RepairOrderId")
                        .HasConstraintName("repair_order_repair_tags_rel_repair_order_id_fkey"),
                    j =>
                    {
                        j.HasKey("RepairOrderId", "RepairTagsId").HasName("repair_order_repair_tags_rel_pkey");
                        j.ToTable("repair_order_repair_tags_rel");
                        j.HasIndex(new[] { "RepairTagsId", "RepairOrderId" }, "repair_order_repair_tags_rel_repair_tags_id_repair_order_id_idx");
                    });
        });

        modelBuilder.Entity<RepairOrderMakeInvoice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("repair_order_make_invoice_pkey");

            entity.ToTable("repair_order_make_invoice");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Group).HasColumnName("group");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_make_invoice_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_order_make_invoice_write_uid_fkey");
        });

        modelBuilder.Entity<RepairTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("repair_tags_pkey");

            entity.ToTable("repair_tags");

            entity.HasIndex(e => e.Name, "repair_tags_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_tags_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("repair_tags_write_uid_fkey");
        });

        modelBuilder.Entity<ReportLayout>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("report_layout_pkey");

            entity.ToTable("report_layout");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Image).HasColumnName("image");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Pdf).HasColumnName("pdf");
            entity.Property(e => e.Sequence)
                //.ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.ViewId).HasColumnName("view_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("report_layout_create_uid_fkey");

            entity.HasOne(d => d.View).WithMany(p => p.ReportLayouts)
                .HasForeignKey(d => d.ViewId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("report_layout_view_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("report_layout_write_uid_fkey");
        });

        modelBuilder.Entity<ReportPaperformat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("report_paperformat_pkey");

            entity.ToTable("report_paperformat");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Default).HasColumnName("default");
            entity.Property(e => e.DisableShrinking).HasColumnName("disable_shrinking");
            entity.Property(e => e.Dpi).HasColumnName("dpi");
            entity.Property(e => e.Format).HasColumnName("format");
            entity.Property(e => e.HeaderLine).HasColumnName("header_line");
            entity.Property(e => e.HeaderSpacing).HasColumnName("header_spacing");
            entity.Property(e => e.MarginBottom).HasColumnName("margin_bottom");
            entity.Property(e => e.MarginLeft).HasColumnName("margin_left");
            entity.Property(e => e.MarginRight).HasColumnName("margin_right");
            entity.Property(e => e.MarginTop).HasColumnName("margin_top");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Orientation).HasColumnName("orientation");
            entity.Property(e => e.PageHeight).HasColumnName("page_height");
            entity.Property(e => e.PageWidth).HasColumnName("page_width");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("report_paperformat_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("report_paperformat_write_uid_fkey");
        });

        modelBuilder.Entity<ResBank>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_bank_pkey");

            entity.ToTable("res_bank");

            entity.HasIndex(e => e.Bic, "res_bank_bic_index");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Bic).HasColumnName("bic");
            entity.Property(e => e.City).HasColumnName("city");
            entity.Property(e => e.Country).HasColumnName("country");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Email).HasColumnName("email");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Phone).HasColumnName("phone");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.Street).HasColumnName("street");
            entity.Property(e => e.Street2).HasColumnName("street2");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");
            entity.Property(e => e.Zip).HasColumnName("zip");

            entity.HasOne(d => d.CountryNavigation).WithMany(p => p.ResBanks)
                .HasForeignKey(d => d.Country)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_bank_country_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_bank_create_uid_fkey");

            entity.HasOne(d => d.StateNavigation).WithMany(p => p.ResBanks)
                .HasForeignKey(d => d.State)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_bank_state_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_bank_write_uid_fkey");
        });

        modelBuilder.Entity<ResCompany>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_company_pkey");

            entity.ToTable("res_company");

            entity.HasIndex(e => e.Name, "res_company_name_uniq").IsUnique();

            entity.HasIndex(e => e.ParentId, "res_company_parent_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountCashBasisBaseAccountId).HasColumnName("account_cash_basis_base_account_id");
            entity.Property(e => e.AccountDashboardOnboardingState).HasColumnName("account_dashboard_onboarding_state");
            entity.Property(e => e.AccountDefaultPosReceivableAccountId).HasColumnName("account_default_pos_receivable_account_id");
            entity.Property(e => e.AccountFiscalCountryId).HasColumnName("account_fiscal_country_id");
            entity.Property(e => e.AccountInvoiceOnboardingState).HasColumnName("account_invoice_onboarding_state");
            entity.Property(e => e.AccountJournalEarlyPayDiscountGainAccountId).HasColumnName("account_journal_early_pay_discount_gain_account_id");
            entity.Property(e => e.AccountJournalEarlyPayDiscountLossAccountId).HasColumnName("account_journal_early_pay_discount_loss_account_id");
            entity.Property(e => e.AccountJournalPaymentCreditAccountId).HasColumnName("account_journal_payment_credit_account_id");
            entity.Property(e => e.AccountJournalPaymentDebitAccountId).HasColumnName("account_journal_payment_debit_account_id");
            entity.Property(e => e.AccountJournalSuspenseAccountId).HasColumnName("account_journal_suspense_account_id");
            entity.Property(e => e.AccountOnboardingCreateInvoiceStateFlag).HasColumnName("account_onboarding_create_invoice_state_flag");
            entity.Property(e => e.AccountOnboardingInvoiceLayoutState).HasColumnName("account_onboarding_invoice_layout_state");
            entity.Property(e => e.AccountOnboardingSaleTaxState).HasColumnName("account_onboarding_sale_tax_state");
            entity.Property(e => e.AccountOpeningDate).HasColumnName("account_opening_date");
            entity.Property(e => e.AccountOpeningMoveId).HasColumnName("account_opening_move_id");
            entity.Property(e => e.AccountPurchaseTaxId).HasColumnName("account_purchase_tax_id");
            entity.Property(e => e.AccountSaleTaxId).HasColumnName("account_sale_tax_id");
            entity.Property(e => e.AccountSetupBankDataState).HasColumnName("account_setup_bank_data_state");
            entity.Property(e => e.AccountSetupBillState).HasColumnName("account_setup_bill_state");
            entity.Property(e => e.AccountSetupCoaState).HasColumnName("account_setup_coa_state");
            entity.Property(e => e.AccountSetupFyDataState).HasColumnName("account_setup_fy_data_state");
            entity.Property(e => e.AccountSetupTaxesState).HasColumnName("account_setup_taxes_state");
            entity.Property(e => e.AccountStorno).HasColumnName("account_storno");
            entity.Property(e => e.AccountUseCreditLimit).HasColumnName("account_use_credit_limit");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AngloSaxonAccounting).HasColumnName("anglo_saxon_accounting");
            entity.Property(e => e.AnnualInventoryDay).HasColumnName("annual_inventory_day");
            entity.Property(e => e.AnnualInventoryMonth).HasColumnName("annual_inventory_month");
            entity.Property(e => e.AttendanceBarcodeSource).HasColumnName("attendance_barcode_source");
            entity.Property(e => e.AttendanceKioskDelay).HasColumnName("attendance_kiosk_delay");
            entity.Property(e => e.AttendanceKioskMode).HasColumnName("attendance_kiosk_mode");
            entity.Property(e => e.AutomaticEntryDefaultJournalId).HasColumnName("automatic_entry_default_journal_id");
            entity.Property(e => e.BankAccountCodePrefix).HasColumnName("bank_account_code_prefix");
            entity.Property(e => e.BaseOnboardingCompanyState).HasColumnName("base_onboarding_company_state");
            entity.Property(e => e.CashAccountCodePrefix).HasColumnName("cash_account_code_prefix");
            entity.Property(e => e.ChartTemplateId).HasColumnName("chart_template_id");
            entity.Property(e => e.CompanyDetails).HasColumnName("company_details");
            entity.Property(e => e.CompanyExpenseJournalId).HasColumnName("company_expense_journal_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyExchangeJournalId).HasColumnName("currency_exchange_journal_id");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.DaysToPurchase).HasColumnName("days_to_purchase");
            entity.Property(e => e.DefaultCashDifferenceExpenseAccountId).HasColumnName("default_cash_difference_expense_account_id");
            entity.Property(e => e.DefaultCashDifferenceIncomeAccountId).HasColumnName("default_cash_difference_income_account_id");
            entity.Property(e => e.EarlyPayDiscountComputation).HasColumnName("early_pay_discount_computation");
            entity.Property(e => e.Email).HasColumnName("email");
            entity.Property(e => e.ExpectsChartOfAccounts).HasColumnName("expects_chart_of_accounts");
            entity.Property(e => e.ExpenseAccrualAccountId).HasColumnName("expense_accrual_account_id");
            entity.Property(e => e.ExpenseCurrencyExchangeAccountId).HasColumnName("expense_currency_exchange_account_id");
            entity.Property(e => e.ExpenseJournalId).HasColumnName("expense_journal_id");
            entity.Property(e => e.ExternalReportLayoutId).HasColumnName("external_report_layout_id");
            entity.Property(e => e.FiscalyearLastDay).HasColumnName("fiscalyear_last_day");
            entity.Property(e => e.FiscalyearLastMonth).HasColumnName("fiscalyear_last_month");
            entity.Property(e => e.FiscalyearLockDate).HasColumnName("fiscalyear_lock_date");
            entity.Property(e => e.Font).HasColumnName("font");
            entity.Property(e => e.HasReceivedWarningStockSms).HasColumnName("has_received_warning_stock_sms");
            entity.Property(e => e.HrAttendanceOvertime).HasColumnName("hr_attendance_overtime");
            entity.Property(e => e.HrPresenceControlEmailAmount).HasColumnName("hr_presence_control_email_amount");
            entity.Property(e => e.HrPresenceControlIpList).HasColumnName("hr_presence_control_ip_list");
            entity.Property(e => e.IapEnrichAutoDone).HasColumnName("iap_enrich_auto_done");
            entity.Property(e => e.IncomeCurrencyExchangeAccountId).HasColumnName("income_currency_exchange_account_id");
            entity.Property(e => e.IncotermId).HasColumnName("incoterm_id");
            entity.Property(e => e.InternalTransitLocationId).HasColumnName("internal_transit_location_id");
            entity.Property(e => e.InvoiceIsEmail).HasColumnName("invoice_is_email");
            entity.Property(e => e.InvoiceIsPrint).HasColumnName("invoice_is_print");
            entity.Property(e => e.InvoiceIsSnailmail).HasColumnName("invoice_is_snailmail");
            entity.Property(e => e.InvoiceTerms)
                .HasColumnType("jsonb")
                .HasColumnName("invoice_terms");
            entity.Property(e => e.InvoiceTermsHtml)
                .HasColumnType("jsonb")
                .HasColumnName("invoice_terms_html");
            entity.Property(e => e.LayoutBackground).HasColumnName("layout_background");
            entity.Property(e => e.LogoWeb).HasColumnName("logo_web");
            entity.Property(e => e.LunchMinimumThreshold).HasColumnName("lunch_minimum_threshold");
            entity.Property(e => e.LunchNotifyMessage)
                .HasColumnType("jsonb")
                .HasColumnName("lunch_notify_message");
            entity.Property(e => e.ManufacturingLead).HasColumnName("manufacturing_lead");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Mobile).HasColumnName("mobile");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.NomenclatureId).HasColumnName("nomenclature_id");
            entity.Property(e => e.OvertimeCompanyThreshold).HasColumnName("overtime_company_threshold");
            entity.Property(e => e.OvertimeEmployeeThreshold).HasColumnName("overtime_employee_threshold");
            entity.Property(e => e.OvertimeStartDate).HasColumnName("overtime_start_date");
            entity.Property(e => e.PaperformatId).HasColumnName("paperformat_id");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PartnerGid).HasColumnName("partner_gid");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PaymentOnboardingPaymentMethod).HasColumnName("payment_onboarding_payment_method");
            entity.Property(e => e.PaymentProviderOnboardingState).HasColumnName("payment_provider_onboarding_state");
            entity.Property(e => e.PeriodLockDate).HasColumnName("period_lock_date");
            entity.Property(e => e.Phone).HasColumnName("phone");
            entity.Property(e => e.PoDoubleValidation).HasColumnName("po_double_validation");
            entity.Property(e => e.PoDoubleValidationAmount).HasColumnName("po_double_validation_amount");
            entity.Property(e => e.PoLead).HasColumnName("po_lead");
            entity.Property(e => e.PoLock).HasColumnName("po_lock");
            entity.Property(e => e.PointOfSaleUpdateStockQuantities).HasColumnName("point_of_sale_update_stock_quantities");
            entity.Property(e => e.PointOfSaleUseTicketQrCode).HasColumnName("point_of_sale_use_ticket_qr_code");
            entity.Property(e => e.PortalConfirmationPay).HasColumnName("portal_confirmation_pay");
            entity.Property(e => e.PortalConfirmationSign).HasColumnName("portal_confirmation_sign");
            entity.Property(e => e.PrimaryColor).HasColumnName("primary_color");
            entity.Property(e => e.PropertyStockAccountInputCategId).HasColumnName("property_stock_account_input_categ_id");
            entity.Property(e => e.PropertyStockAccountOutputCategId).HasColumnName("property_stock_account_output_categ_id");
            entity.Property(e => e.PropertyStockValuationAccountId).HasColumnName("property_stock_valuation_account_id");
            entity.Property(e => e.QrCode).HasColumnName("qr_code");
            entity.Property(e => e.QuickEditMode).HasColumnName("quick_edit_mode");
            entity.Property(e => e.QuotationValidityDays).HasColumnName("quotation_validity_days");
            entity.Property(e => e.ReportFooter)
                .HasColumnType("jsonb")
                .HasColumnName("report_footer");
            entity.Property(e => e.ReportHeader).HasColumnName("report_header");
            entity.Property(e => e.ResourceCalendarId).HasColumnName("resource_calendar_id");
            entity.Property(e => e.RevenueAccrualAccountId).HasColumnName("revenue_accrual_account_id");
            entity.Property(e => e.SaleOnboardingOrderConfirmationState).HasColumnName("sale_onboarding_order_confirmation_state");
            entity.Property(e => e.SaleOnboardingPaymentMethod).HasColumnName("sale_onboarding_payment_method");
            entity.Property(e => e.SaleOnboardingSampleQuotationState).HasColumnName("sale_onboarding_sample_quotation_state");
            entity.Property(e => e.SaleOrderTemplateId).HasColumnName("sale_order_template_id");
            entity.Property(e => e.SaleQuotationOnboardingState).HasColumnName("sale_quotation_onboarding_state");
            entity.Property(e => e.SecondaryColor).HasColumnName("secondary_color");
            entity.Property(e => e.SecurityLead).HasColumnName("security_lead");
            entity.Property(e => e.Sequence).HasColumnName("sequence");
            entity.Property(e => e.SnailmailColor).HasColumnName("snailmail_color");
            entity.Property(e => e.SnailmailCover).HasColumnName("snailmail_cover");
            entity.Property(e => e.SnailmailDuplex).HasColumnName("snailmail_duplex");
            entity.Property(e => e.SocialFacebook).HasColumnName("social_facebook");
            entity.Property(e => e.SocialGithub).HasColumnName("social_github");
            entity.Property(e => e.SocialInstagram).HasColumnName("social_instagram");
            entity.Property(e => e.SocialLinkedin).HasColumnName("social_linkedin");
            entity.Property(e => e.SocialTwitter).HasColumnName("social_twitter");
            entity.Property(e => e.SocialYoutube).HasColumnName("social_youtube");
            entity.Property(e => e.StockMailConfirmationTemplateId).HasColumnName("stock_mail_confirmation_template_id");
            entity.Property(e => e.StockMoveEmailValidation).HasColumnName("stock_move_email_validation");
            entity.Property(e => e.StockMoveSmsValidation).HasColumnName("stock_move_sms_validation");
            entity.Property(e => e.StockSmsConfirmationTemplateId).HasColumnName("stock_sms_confirmation_template_id");
            entity.Property(e => e.TaxCalculationRoundingMethod).HasColumnName("tax_calculation_rounding_method");
            entity.Property(e => e.TaxCashBasisJournalId).HasColumnName("tax_cash_basis_journal_id");
            entity.Property(e => e.TaxExigibility).HasColumnName("tax_exigibility");
            entity.Property(e => e.TaxLockDate).HasColumnName("tax_lock_date");
            entity.Property(e => e.TermsType).HasColumnName("terms_type");
            entity.Property(e => e.TransferAccountCodePrefix).HasColumnName("transfer_account_code_prefix");
            entity.Property(e => e.TransferAccountId).HasColumnName("transfer_account_id");
            entity.Property(e => e.VatCheckVies).HasColumnName("vat_check_vies");
            entity.Property(e => e.WebsiteId).HasColumnName("website_id");
            entity.Property(e => e.WebsiteSaleOnboardingPaymentProviderState).HasColumnName("website_sale_onboarding_payment_provider_state");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AccountCashBasisBaseAccount).WithMany(p => p.ResCompanyAccountCashBasisBaseAccounts)
                .HasForeignKey(d => d.AccountCashBasisBaseAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_account_cash_basis_base_account_id_fkey");

            entity.HasOne(d => d.AccountDefaultPosReceivableAccount).WithMany(p => p.ResCompanyAccountDefaultPosReceivableAccounts)
                .HasForeignKey(d => d.AccountDefaultPosReceivableAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_account_default_pos_receivable_account_id_fkey");

            entity.HasOne(d => d.AccountFiscalCountry).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.AccountFiscalCountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_account_fiscal_country_id_fkey");

            entity.HasOne(d => d.AccountJournalEarlyPayDiscountGainAccount).WithMany(p => p.ResCompanyAccountJournalEarlyPayDiscountGainAccounts)
                .HasForeignKey(d => d.AccountJournalEarlyPayDiscountGainAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_account_journal_early_pay_discount_gain_accoun_fkey");

            entity.HasOne(d => d.AccountJournalEarlyPayDiscountLossAccount).WithMany(p => p.ResCompanyAccountJournalEarlyPayDiscountLossAccounts)
                .HasForeignKey(d => d.AccountJournalEarlyPayDiscountLossAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_account_journal_early_pay_discount_loss_accoun_fkey");

            entity.HasOne(d => d.AccountJournalPaymentCreditAccount).WithMany(p => p.ResCompanyAccountJournalPaymentCreditAccounts)
                .HasForeignKey(d => d.AccountJournalPaymentCreditAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_account_journal_payment_credit_account_id_fkey");

            entity.HasOne(d => d.AccountJournalPaymentDebitAccount).WithMany(p => p.ResCompanyAccountJournalPaymentDebitAccounts)
                .HasForeignKey(d => d.AccountJournalPaymentDebitAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_account_journal_payment_debit_account_id_fkey");

            entity.HasOne(d => d.AccountJournalSuspenseAccount).WithMany(p => p.ResCompanyAccountJournalSuspenseAccounts)
                .HasForeignKey(d => d.AccountJournalSuspenseAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_account_journal_suspense_account_id_fkey");

            entity.HasOne(d => d.AccountOpeningMove).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.AccountOpeningMoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_account_opening_move_id_fkey");

            entity.HasOne(d => d.AccountPurchaseTax).WithMany(p => p.ResCompanyAccountPurchaseTaxes)
                .HasForeignKey(d => d.AccountPurchaseTaxId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_account_purchase_tax_id_fkey");

            entity.HasOne(d => d.AccountSaleTax).WithMany(p => p.ResCompanyAccountSaleTaxes)
                .HasForeignKey(d => d.AccountSaleTaxId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_account_sale_tax_id_fkey");

            entity.HasOne(d => d.AutomaticEntryDefaultJournal).WithMany(p => p.ResCompanyAutomaticEntryDefaultJournals)
                .HasForeignKey(d => d.AutomaticEntryDefaultJournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_automatic_entry_default_journal_id_fkey");

            entity.HasOne(d => d.ChartTemplate).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.ChartTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_chart_template_id_fkey");

            entity.HasOne(d => d.CompanyExpenseJournal).WithMany(p => p.ResCompanyCompanyExpenseJournals)
                .HasForeignKey(d => d.CompanyExpenseJournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_company_expense_journal_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_create_uid_fkey");

            entity.HasOne(d => d.CurrencyExchangeJournal).WithMany(p => p.ResCompanyCurrencyExchangeJournals)
                .HasForeignKey(d => d.CurrencyExchangeJournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_currency_exchange_journal_id_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("res_company_currency_id_fkey");

            entity.HasOne(d => d.DefaultCashDifferenceExpenseAccount).WithMany(p => p.ResCompanyDefaultCashDifferenceExpenseAccounts)
                .HasForeignKey(d => d.DefaultCashDifferenceExpenseAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_default_cash_difference_expense_account_id_fkey");

            entity.HasOne(d => d.DefaultCashDifferenceIncomeAccount).WithMany(p => p.ResCompanyDefaultCashDifferenceIncomeAccounts)
                .HasForeignKey(d => d.DefaultCashDifferenceIncomeAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_default_cash_difference_income_account_id_fkey");

            entity.HasOne(d => d.ExpenseAccrualAccount).WithMany(p => p.ResCompanyExpenseAccrualAccounts)
                .HasForeignKey(d => d.ExpenseAccrualAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_expense_accrual_account_id_fkey");

            entity.HasOne(d => d.ExpenseCurrencyExchangeAccount).WithMany(p => p.ResCompanyExpenseCurrencyExchangeAccounts)
                .HasForeignKey(d => d.ExpenseCurrencyExchangeAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_expense_currency_exchange_account_id_fkey");

            entity.HasOne(d => d.ExpenseJournal).WithMany(p => p.ResCompanyExpenseJournals)
                .HasForeignKey(d => d.ExpenseJournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_expense_journal_id_fkey");

            entity.HasOne(d => d.ExternalReportLayout).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.ExternalReportLayoutId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_external_report_layout_id_fkey");

            entity.HasOne(d => d.IncomeCurrencyExchangeAccount).WithMany(p => p.ResCompanyIncomeCurrencyExchangeAccounts)
                .HasForeignKey(d => d.IncomeCurrencyExchangeAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_income_currency_exchange_account_id_fkey");

            entity.HasOne(d => d.Incoterm).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.IncotermId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_incoterm_id_fkey");

            entity.HasOne(d => d.InternalTransitLocation).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.InternalTransitLocationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("res_company_internal_transit_location_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Nomenclature).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.NomenclatureId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_nomenclature_id_fkey");

            entity.HasOne(d => d.Paperformat).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.PaperformatId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_paperformat_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_parent_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("res_company_partner_id_fkey");

            entity.HasOne(d => d.PropertyStockAccountInputCateg).WithMany(p => p.ResCompanyPropertyStockAccountInputCategs)
                .HasForeignKey(d => d.PropertyStockAccountInputCategId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_property_stock_account_input_categ_id_fkey");

            entity.HasOne(d => d.PropertyStockAccountOutputCateg).WithMany(p => p.ResCompanyPropertyStockAccountOutputCategs)
                .HasForeignKey(d => d.PropertyStockAccountOutputCategId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_property_stock_account_output_categ_id_fkey");

            entity.HasOne(d => d.PropertyStockValuationAccount).WithMany(p => p.ResCompanyPropertyStockValuationAccounts)
                .HasForeignKey(d => d.PropertyStockValuationAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_property_stock_valuation_account_id_fkey");

            entity.HasOne(d => d.ResourceCalendar).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.ResourceCalendarId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("res_company_resource_calendar_id_fkey");

            entity.HasOne(d => d.RevenueAccrualAccount).WithMany(p => p.ResCompanyRevenueAccrualAccounts)
                .HasForeignKey(d => d.RevenueAccrualAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_revenue_accrual_account_id_fkey");

            entity.HasOne(d => d.SaleOrderTemplate).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.SaleOrderTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_sale_order_template_id_fkey");

            entity.HasOne(d => d.StockMailConfirmationTemplate).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.StockMailConfirmationTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_stock_mail_confirmation_template_id_fkey");

            entity.HasOne(d => d.StockSmsConfirmationTemplate).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.StockSmsConfirmationTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_stock_sms_confirmation_template_id_fkey");

            entity.HasOne(d => d.TaxCashBasisJournal).WithMany(p => p.ResCompanyTaxCashBasisJournals)
                .HasForeignKey(d => d.TaxCashBasisJournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_tax_cash_basis_journal_id_fkey");

            entity.HasOne(d => d.TransferAccount).WithMany(p => p.ResCompanyTransferAccounts)
                .HasForeignKey(d => d.TransferAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_transfer_account_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.ResCompanies)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_website_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_company_write_uid_fkey");

            /// TODO: SharedTypeEntity    
            //entity.HasMany(d => d.Users).WithMany(p => p.Cids)
            entity.HasMany<ResUser>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ResCompanyUsersRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("res_company_users_rel_user_id_fkey"),
                    l => l.HasOne<ResCompany>().WithMany()
                        .HasForeignKey("Cid")
                        .HasConstraintName("res_company_users_rel_cid_fkey"),
                    j =>
                    {
                        j.HasKey("Cid", "UserId").HasName("res_company_users_rel_pkey");
                        j.ToTable("res_company_users_rel");
                        j.HasIndex(new[] { "UserId", "Cid" }, "res_company_users_rel_user_id_cid_idx");
                    });
        });

        modelBuilder.Entity<ResConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_config_pkey");

            entity.ToTable("res_config");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_write_uid_fkey");
        });

        modelBuilder.Entity<ResConfigInstaller>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_config_installer_pkey");

            entity.ToTable("res_config_installer");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_installer_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_installer_write_uid_fkey");
        });

        modelBuilder.Entity<ResConfigSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_config_settings_pkey");

            entity.ToTable("res_config_settings");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AliasDomain).HasColumnName("alias_domain");
            entity.Property(e => e.AllowOutOfStockOrder).HasColumnName("allow_out_of_stock_order");
            entity.Property(e => e.AuthSignupResetPassword).HasColumnName("auth_signup_reset_password");
            entity.Property(e => e.AuthSignupTemplateUserId).HasColumnName("auth_signup_template_user_id");
            entity.Property(e => e.AuthSignupUninvited).HasColumnName("auth_signup_uninvited");
            entity.Property(e => e.AutomaticInvoice).HasColumnName("automatic_invoice");
            entity.Property(e => e.AvailableThreshold).HasColumnName("available_threshold");
            entity.Property(e => e.ChartTemplateId).HasColumnName("chart_template_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CrmAutoAssignmentAction).HasColumnName("crm_auto_assignment_action");
            entity.Property(e => e.CrmAutoAssignmentIntervalNumber).HasColumnName("crm_auto_assignment_interval_number");
            entity.Property(e => e.CrmAutoAssignmentIntervalType).HasColumnName("crm_auto_assignment_interval_type");
            entity.Property(e => e.CrmAutoAssignmentRunDatetime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("crm_auto_assignment_run_datetime");
            entity.Property(e => e.CrmUseAutoAssignment).HasColumnName("crm_use_auto_assignment");
            entity.Property(e => e.DefaultInvoicePolicy).HasColumnName("default_invoice_policy");
            entity.Property(e => e.DefaultPickingPolicy).HasColumnName("default_picking_policy");
            entity.Property(e => e.DefaultPurchaseMethod).HasColumnName("default_purchase_method");
            entity.Property(e => e.DelayAlertContract).HasColumnName("delay_alert_contract");
            entity.Property(e => e.DepositDefaultProductId).HasColumnName("deposit_default_product_id");
            entity.Property(e => e.DigestEmails).HasColumnName("digest_emails");
            entity.Property(e => e.DigestId).HasColumnName("digest_id");
            entity.Property(e => e.EnabledBuyNowButton).HasColumnName("enabled_buy_now_button");
            entity.Property(e => e.EnabledExtraCheckoutStep).HasColumnName("enabled_extra_checkout_step");
            entity.Property(e => e.ExpenseAliasPrefix).HasColumnName("expense_alias_prefix");
            entity.Property(e => e.ExternalEmailServerDefault).HasColumnName("external_email_server_default");
            entity.Property(e => e.GoogleGmailClientIdentifier).HasColumnName("google_gmail_client_identifier");
            entity.Property(e => e.GoogleGmailClientSecret).HasColumnName("google_gmail_client_secret");
            entity.Property(e => e.GroupAnalyticAccounting).HasColumnName("group_analytic_accounting");
            entity.Property(e => e.GroupApplicantCvDisplay).HasColumnName("group_applicant_cv_display");
            entity.Property(e => e.GroupAttendanceUsePin).HasColumnName("group_attendance_use_pin");
            entity.Property(e => e.GroupAutoDoneSetting).HasColumnName("group_auto_done_setting");
            entity.Property(e => e.GroupCashRounding).HasColumnName("group_cash_rounding");
            entity.Property(e => e.GroupDeliveryInvoiceAddress).HasColumnName("group_delivery_invoice_address");
            entity.Property(e => e.GroupDiscountPerSoLine).HasColumnName("group_discount_per_so_line");
            entity.Property(e => e.GroupDisplayIncoterm).HasColumnName("group_display_incoterm");
            entity.Property(e => e.GroupFiscalYear).HasColumnName("group_fiscal_year");
            entity.Property(e => e.GroupLotOnDeliverySlip).HasColumnName("group_lot_on_delivery_slip");
            entity.Property(e => e.GroupLotOnInvoice).HasColumnName("group_lot_on_invoice");
            entity.Property(e => e.GroupMrpByproducts).HasColumnName("group_mrp_byproducts");
            entity.Property(e => e.GroupMrpReceptionReport).HasColumnName("group_mrp_reception_report");
            entity.Property(e => e.GroupMrpRoutings).HasColumnName("group_mrp_routings");
            entity.Property(e => e.GroupMrpWorkorderDependencies).HasColumnName("group_mrp_workorder_dependencies");
            entity.Property(e => e.GroupMultiCurrency).HasColumnName("group_multi_currency");
            entity.Property(e => e.GroupMultiWebsite).HasColumnName("group_multi_website");
            entity.Property(e => e.GroupProductPriceComparison).HasColumnName("group_product_price_comparison");
            entity.Property(e => e.GroupProductPricelist).HasColumnName("group_product_pricelist");
            entity.Property(e => e.GroupProductVariant).HasColumnName("group_product_variant");
            entity.Property(e => e.GroupProformaSales).HasColumnName("group_proforma_sales");
            entity.Property(e => e.GroupProjectMilestone).HasColumnName("group_project_milestone");
            entity.Property(e => e.GroupProjectRating).HasColumnName("group_project_rating");
            entity.Property(e => e.GroupProjectRecurringTasks).HasColumnName("group_project_recurring_tasks");
            entity.Property(e => e.GroupProjectStages).HasColumnName("group_project_stages");
            entity.Property(e => e.GroupProjectTaskDependencies).HasColumnName("group_project_task_dependencies");
            entity.Property(e => e.GroupSaleDeliveryAddress).HasColumnName("group_sale_delivery_address");
            entity.Property(e => e.GroupSaleOrderTemplate).HasColumnName("group_sale_order_template");
            entity.Property(e => e.GroupSalePricelist).HasColumnName("group_sale_pricelist");
            entity.Property(e => e.GroupSendReminder).HasColumnName("group_send_reminder");
            entity.Property(e => e.GroupShowLineSubtotalsTaxExcluded).HasColumnName("group_show_line_subtotals_tax_excluded");
            entity.Property(e => e.GroupShowLineSubtotalsTaxIncluded).HasColumnName("group_show_line_subtotals_tax_included");
            entity.Property(e => e.GroupShowPurchaseReceipts).HasColumnName("group_show_purchase_receipts");
            entity.Property(e => e.GroupShowSaleReceipts).HasColumnName("group_show_sale_receipts");
            entity.Property(e => e.GroupShowUomPrice).HasColumnName("group_show_uom_price");
            entity.Property(e => e.GroupStockAdvLocation).HasColumnName("group_stock_adv_location");
            entity.Property(e => e.GroupStockLotPrintGs1).HasColumnName("group_stock_lot_print_gs1");
            entity.Property(e => e.GroupStockMultiLocations).HasColumnName("group_stock_multi_locations");
            entity.Property(e => e.GroupStockPackaging).HasColumnName("group_stock_packaging");
            entity.Property(e => e.GroupStockPickingWave).HasColumnName("group_stock_picking_wave");
            entity.Property(e => e.GroupStockProductionLot).HasColumnName("group_stock_production_lot");
            entity.Property(e => e.GroupStockReceptionReport).HasColumnName("group_stock_reception_report");
            entity.Property(e => e.GroupStockSignDelivery).HasColumnName("group_stock_sign_delivery");
            entity.Property(e => e.GroupStockStorageCategories).HasColumnName("group_stock_storage_categories");
            entity.Property(e => e.GroupStockTrackingLot).HasColumnName("group_stock_tracking_lot");
            entity.Property(e => e.GroupStockTrackingOwner).HasColumnName("group_stock_tracking_owner");
            entity.Property(e => e.GroupSubtaskProject).HasColumnName("group_subtask_project");
            entity.Property(e => e.GroupUnlockedByDefault).HasColumnName("group_unlocked_by_default");
            entity.Property(e => e.GroupUom).HasColumnName("group_uom");
            entity.Property(e => e.GroupUseLead).HasColumnName("group_use_lead");
            entity.Property(e => e.GroupUseRecurringRevenues).HasColumnName("group_use_recurring_revenues");
            entity.Property(e => e.GroupWarningAccount).HasColumnName("group_warning_account");
            entity.Property(e => e.GroupWarningPurchase).HasColumnName("group_warning_purchase");
            entity.Property(e => e.GroupWarningSale).HasColumnName("group_warning_sale");
            entity.Property(e => e.GroupWarningStock).HasColumnName("group_warning_stock");
            entity.Property(e => e.HrAttendanceOvertime).HasColumnName("hr_attendance_overtime");
            entity.Property(e => e.HrEmployeeSelfEdit).HasColumnName("hr_employee_self_edit");
            entity.Property(e => e.HrPresenceControlEmail).HasColumnName("hr_presence_control_email");
            entity.Property(e => e.HrPresenceControlIp).HasColumnName("hr_presence_control_ip");
            entity.Property(e => e.HrPresenceControlLogin).HasColumnName("hr_presence_control_login");
            entity.Property(e => e.InvoiceMailTemplateId).HasColumnName("invoice_mail_template_id");
            entity.Property(e => e.IsInstalledSale).HasColumnName("is_installed_sale");
            entity.Property(e => e.IsMembershipMulti).HasColumnName("is_membership_multi");
            entity.Property(e => e.LeadEnrichAuto).HasColumnName("lead_enrich_auto");
            entity.Property(e => e.LeadMiningInPipeline).HasColumnName("lead_mining_in_pipeline");
            entity.Property(e => e.LockConfirmedPo).HasColumnName("lock_confirmed_po");
            entity.Property(e => e.ModuleAccount).HasColumnName("module_account");
            entity.Property(e => e.ModuleAccount3wayMatch).HasColumnName("module_account_3way_match");
            entity.Property(e => e.ModuleAccountAccountant).HasColumnName("module_account_accountant");
            entity.Property(e => e.ModuleAccountBankStatementImportCamt).HasColumnName("module_account_bank_statement_import_camt");
            entity.Property(e => e.ModuleAccountBankStatementImportCsv).HasColumnName("module_account_bank_statement_import_csv");
            entity.Property(e => e.ModuleAccountBankStatementImportOfx).HasColumnName("module_account_bank_statement_import_ofx");
            entity.Property(e => e.ModuleAccountBankStatementImportQif).HasColumnName("module_account_bank_statement_import_qif");
            entity.Property(e => e.ModuleAccountBatchPayment).HasColumnName("module_account_batch_payment");
            entity.Property(e => e.ModuleAccountBudget).HasColumnName("module_account_budget");
            entity.Property(e => e.ModuleAccountCheckPrinting).HasColumnName("module_account_check_printing");
            entity.Property(e => e.ModuleAccountInterCompanyRules).HasColumnName("module_account_inter_company_rules");
            entity.Property(e => e.ModuleAccountIntrastat).HasColumnName("module_account_intrastat");
            entity.Property(e => e.ModuleAccountInvoiceExtract).HasColumnName("module_account_invoice_extract");
            entity.Property(e => e.ModuleAccountPayment).HasColumnName("module_account_payment");
            entity.Property(e => e.ModuleAccountReports).HasColumnName("module_account_reports");
            entity.Property(e => e.ModuleAccountSepa).HasColumnName("module_account_sepa");
            entity.Property(e => e.ModuleAccountSepaDirectDebit).HasColumnName("module_account_sepa_direct_debit");
            entity.Property(e => e.ModuleAccountTaxcloud).HasColumnName("module_account_taxcloud");
            entity.Property(e => e.ModuleAuthLdap).HasColumnName("module_auth_ldap");
            entity.Property(e => e.ModuleAuthOauth).HasColumnName("module_auth_oauth");
            entity.Property(e => e.ModuleBaseGengo).HasColumnName("module_base_gengo");
            entity.Property(e => e.ModuleBaseGeolocalize).HasColumnName("module_base_geolocalize");
            entity.Property(e => e.ModuleBaseImport).HasColumnName("module_base_import");
            entity.Property(e => e.ModuleCrmIapEnrich).HasColumnName("module_crm_iap_enrich");
            entity.Property(e => e.ModuleCrmIapMine).HasColumnName("module_crm_iap_mine");
            entity.Property(e => e.ModuleCurrencyRateLive).HasColumnName("module_currency_rate_live");
            entity.Property(e => e.ModuleDelivery).HasColumnName("module_delivery");
            entity.Property(e => e.ModuleDeliveryBpost).HasColumnName("module_delivery_bpost");
            entity.Property(e => e.ModuleDeliveryDhl).HasColumnName("module_delivery_dhl");
            entity.Property(e => e.ModuleDeliveryEasypost).HasColumnName("module_delivery_easypost");
            entity.Property(e => e.ModuleDeliveryFedex).HasColumnName("module_delivery_fedex");
            entity.Property(e => e.ModuleDeliveryMondialrelay).HasColumnName("module_delivery_mondialrelay");
            entity.Property(e => e.ModuleDeliverySendcloud).HasColumnName("module_delivery_sendcloud");
            entity.Property(e => e.ModuleDeliveryUps).HasColumnName("module_delivery_ups");
            entity.Property(e => e.ModuleDeliveryUsps).HasColumnName("module_delivery_usps");
            entity.Property(e => e.ModuleGoogleCalendar).HasColumnName("module_google_calendar");
            entity.Property(e => e.ModuleGoogleGmail).HasColumnName("module_google_gmail");
            entity.Property(e => e.ModuleGoogleRecaptcha).HasColumnName("module_google_recaptcha");
            entity.Property(e => e.ModuleHrAttendance).HasColumnName("module_hr_attendance");
            entity.Property(e => e.ModuleHrExpenseExtract).HasColumnName("module_hr_expense_extract");
            entity.Property(e => e.ModuleHrHomeworking).HasColumnName("module_hr_homeworking");
            entity.Property(e => e.ModuleHrPayrollExpense).HasColumnName("module_hr_payroll_expense");
            entity.Property(e => e.ModuleHrPresence).HasColumnName("module_hr_presence");
            entity.Property(e => e.ModuleHrRecruitmentExtract).HasColumnName("module_hr_recruitment_extract");
            entity.Property(e => e.ModuleHrRecruitmentSurvey).HasColumnName("module_hr_recruitment_survey");
            entity.Property(e => e.ModuleHrSkills).HasColumnName("module_hr_skills");
            entity.Property(e => e.ModuleHrTimesheet).HasColumnName("module_hr_timesheet");
            entity.Property(e => e.ModuleL10nEuOss).HasColumnName("module_l10n_eu_oss");
            entity.Property(e => e.ModuleLoyalty).HasColumnName("module_loyalty");
            entity.Property(e => e.ModuleMailPlugin).HasColumnName("module_mail_plugin");
            entity.Property(e => e.ModuleMarketingAutomation).HasColumnName("module_marketing_automation");
            entity.Property(e => e.ModuleMicrosoftCalendar).HasColumnName("module_microsoft_calendar");
            entity.Property(e => e.ModuleMicrosoftOutlook).HasColumnName("module_microsoft_outlook");
            entity.Property(e => e.ModuleMrpMps).HasColumnName("module_mrp_mps");
            entity.Property(e => e.ModuleMrpPlm).HasColumnName("module_mrp_plm");
            entity.Property(e => e.ModuleMrpSubcontracting).HasColumnName("module_mrp_subcontracting");
            entity.Property(e => e.ModuleMrpWorkorder).HasColumnName("module_mrp_workorder");
            entity.Property(e => e.ModulePartnerAutocomplete).HasColumnName("module_partner_autocomplete");
            entity.Property(e => e.ModulePaymentPaypal).HasColumnName("module_payment_paypal");
            entity.Property(e => e.ModulePosAdyen).HasColumnName("module_pos_adyen");
            entity.Property(e => e.ModulePosMercury).HasColumnName("module_pos_mercury");
            entity.Property(e => e.ModulePosSix).HasColumnName("module_pos_six");
            entity.Property(e => e.ModulePosStripe).HasColumnName("module_pos_stripe");
            entity.Property(e => e.ModuleProductEmailTemplate).HasColumnName("module_product_email_template");
            entity.Property(e => e.ModuleProductExpiry).HasColumnName("module_product_expiry");
            entity.Property(e => e.ModuleProductImages).HasColumnName("module_product_images");
            entity.Property(e => e.ModuleProductMargin).HasColumnName("module_product_margin");
            entity.Property(e => e.ModuleProjectForecast).HasColumnName("module_project_forecast");
            entity.Property(e => e.ModulePurchaseProductMatrix).HasColumnName("module_purchase_product_matrix");
            entity.Property(e => e.ModulePurchaseRequisition).HasColumnName("module_purchase_requisition");
            entity.Property(e => e.ModuleQualityControl).HasColumnName("module_quality_control");
            entity.Property(e => e.ModuleQualityControlWorksheet).HasColumnName("module_quality_control_worksheet");
            entity.Property(e => e.ModuleSaleAmazon).HasColumnName("module_sale_amazon");
            entity.Property(e => e.ModuleSaleLoyalty).HasColumnName("module_sale_loyalty");
            entity.Property(e => e.ModuleSaleMargin).HasColumnName("module_sale_margin");
            entity.Property(e => e.ModuleSaleProductMatrix).HasColumnName("module_sale_product_matrix");
            entity.Property(e => e.ModuleSaleQuotationBuilder).HasColumnName("module_sale_quotation_builder");
            entity.Property(e => e.ModuleSnailmailAccount).HasColumnName("module_snailmail_account");
            entity.Property(e => e.ModuleStockBarcode).HasColumnName("module_stock_barcode");
            entity.Property(e => e.ModuleStockDropshipping).HasColumnName("module_stock_dropshipping");
            entity.Property(e => e.ModuleStockLandedCosts).HasColumnName("module_stock_landed_costs");
            entity.Property(e => e.ModuleStockPickingBatch).HasColumnName("module_stock_picking_batch");
            entity.Property(e => e.ModuleStockSms).HasColumnName("module_stock_sms");
            entity.Property(e => e.ModuleVoip).HasColumnName("module_voip");
            entity.Property(e => e.ModuleWebUnsplash).HasColumnName("module_web_unsplash");
            entity.Property(e => e.ModuleWebsiteCrmIapReveal).HasColumnName("module_website_crm_iap_reveal");
            entity.Property(e => e.ModuleWebsiteHrRecruitment).HasColumnName("module_website_hr_recruitment");
            entity.Property(e => e.ModuleWebsiteLivechat).HasColumnName("module_website_livechat");
            entity.Property(e => e.ModuleWebsiteSaleAutocomplete).HasColumnName("module_website_sale_autocomplete");
            entity.Property(e => e.ModuleWebsiteSaleComparison).HasColumnName("module_website_sale_comparison");
            entity.Property(e => e.ModuleWebsiteSaleDelivery).HasColumnName("module_website_sale_delivery");
            entity.Property(e => e.ModuleWebsiteSaleDigital).HasColumnName("module_website_sale_digital");
            entity.Property(e => e.ModuleWebsiteSalePicking).HasColumnName("module_website_sale_picking");
            entity.Property(e => e.ModuleWebsiteSaleWishlist).HasColumnName("module_website_sale_wishlist");
            entity.Property(e => e.OvertimeCompanyThreshold).HasColumnName("overtime_company_threshold");
            entity.Property(e => e.OvertimeEmployeeThreshold).HasColumnName("overtime_employee_threshold");
            entity.Property(e => e.OvertimeStartDate).HasColumnName("overtime_start_date");
            entity.Property(e => e.PoOrderApproval).HasColumnName("po_order_approval");
            entity.Property(e => e.PosConfigId).HasColumnName("pos_config_id");
            entity.Property(e => e.PosDefaultFiscalPositionId).HasColumnName("pos_default_fiscal_position_id");
            entity.Property(e => e.PosEpsonPrinterIp).HasColumnName("pos_epson_printer_ip");
            entity.Property(e => e.PosIfaceCashdrawer).HasColumnName("pos_iface_cashdrawer");
            entity.Property(e => e.PosIfaceCustomerFacingDisplayViaProxy).HasColumnName("pos_iface_customer_facing_display_via_proxy");
            entity.Property(e => e.PosIfaceElectronicScale).HasColumnName("pos_iface_electronic_scale");
            entity.Property(e => e.PosIfacePrintViaProxy).HasColumnName("pos_iface_print_via_proxy");
            entity.Property(e => e.PosIfaceScanViaProxy).HasColumnName("pos_iface_scan_via_proxy");
            entity.Property(e => e.PosIfaceStartCategId).HasColumnName("pos_iface_start_categ_id");
            entity.Property(e => e.PosPricelistId).HasColumnName("pos_pricelist_id");
            entity.Property(e => e.PosProxyIp).HasColumnName("pos_proxy_ip");
            entity.Property(e => e.PosReceiptFooter).HasColumnName("pos_receipt_footer");
            entity.Property(e => e.PosReceiptHeader).HasColumnName("pos_receipt_header");
            entity.Property(e => e.PosTipProductId).HasColumnName("pos_tip_product_id");
            entity.Property(e => e.PredictiveLeadScoringFieldsStr).HasColumnName("predictive_lead_scoring_fields_str");
            entity.Property(e => e.PredictiveLeadScoringStartDateStr).HasColumnName("predictive_lead_scoring_start_date_str");
            entity.Property(e => e.ProductPricelistSetting).HasColumnName("product_pricelist_setting");
            entity.Property(e => e.ProductVolumeVolumeInCubicFeet).HasColumnName("product_volume_volume_in_cubic_feet");
            entity.Property(e => e.ProductWeightInLbs).HasColumnName("product_weight_in_lbs");
            entity.Property(e => e.ProfilingEnabledUntil)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("profiling_enabled_until");
            entity.Property(e => e.RecaptchaMinScore).HasColumnName("recaptcha_min_score");
            entity.Property(e => e.RecaptchaPrivateKey).HasColumnName("recaptcha_private_key");
            entity.Property(e => e.RecaptchaPublicKey).HasColumnName("recaptcha_public_key");
            entity.Property(e => e.RestrictTemplateRendering).HasColumnName("restrict_template_rendering");
            entity.Property(e => e.SaleDeliverySettings).HasColumnName("sale_delivery_settings");
            entity.Property(e => e.ShowAvailability).HasColumnName("show_availability");
            entity.Property(e => e.ShowEffect).HasColumnName("show_effect");
            entity.Property(e => e.ShowLineSubtotalsTaxSelection).HasColumnName("show_line_subtotals_tax_selection");
            entity.Property(e => e.TwilioAccountSid).HasColumnName("twilio_account_sid");
            entity.Property(e => e.TwilioAccountToken).HasColumnName("twilio_account_token");
            entity.Property(e => e.UnsplashAccessKey).HasColumnName("unsplash_access_key");
            entity.Property(e => e.UnsplashAppId).HasColumnName("unsplash_app_id");
            entity.Property(e => e.UseInvoiceTerms).HasColumnName("use_invoice_terms");
            entity.Property(e => e.UseMailgateway).HasColumnName("use_mailgateway");
            entity.Property(e => e.UseManufacturingLead).HasColumnName("use_manufacturing_lead");
            entity.Property(e => e.UsePoLead).HasColumnName("use_po_lead");
            entity.Property(e => e.UseQuotationValidityDays).HasColumnName("use_quotation_validity_days");
            entity.Property(e => e.UseSecurityLead).HasColumnName("use_security_lead");
            entity.Property(e => e.UseTwilioRtcServers).HasColumnName("use_twilio_rtc_servers");
            entity.Property(e => e.UserDefaultRights).HasColumnName("user_default_rights");
            entity.Property(e => e.WebsiteId).HasColumnName("website_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.AuthSignupTemplateUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_auth_signup_template_user_id_fkey");

            entity.HasOne(d => d.ChartTemplate).WithMany(p => p.ResConfigSettings)
                .HasForeignKey(d => d.ChartTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_chart_template_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("res_config_settings_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_create_uid_fkey");

            entity.HasOne(d => d.DepositDefaultProduct).WithMany(p => p.ResConfigSettingDepositDefaultProducts)
                .HasForeignKey(d => d.DepositDefaultProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_deposit_default_product_id_fkey");

            entity.HasOne(d => d.Digest).WithMany(p => p.ResConfigSettings)
                .HasForeignKey(d => d.DigestId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_digest_id_fkey");

            entity.HasOne(d => d.InvoiceMailTemplate).WithMany(p => p.ResConfigSettings)
                .HasForeignKey(d => d.InvoiceMailTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_invoice_mail_template_id_fkey");

            entity.HasOne(d => d.PosConfig).WithMany(p => p.ResConfigSettings)
                .HasForeignKey(d => d.PosConfigId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_pos_config_id_fkey");

            entity.HasOne(d => d.PosDefaultFiscalPosition).WithMany(p => p.ResConfigSettingsNavigation)
                .HasForeignKey(d => d.PosDefaultFiscalPositionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_pos_default_fiscal_position_id_fkey");

            entity.HasOne(d => d.PosIfaceStartCateg).WithMany(p => p.ResConfigSettingsNavigation)
                .HasForeignKey(d => d.PosIfaceStartCategId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_pos_iface_start_categ_id_fkey");

            entity.HasOne(d => d.PosPricelist).WithMany(p => p.ResConfigSettingsNavigation)
                .HasForeignKey(d => d.PosPricelistId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_pos_pricelist_id_fkey");

            entity.HasOne(d => d.PosTipProduct).WithMany(p => p.ResConfigSettingPosTipProducts)
                .HasForeignKey(d => d.PosTipProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_pos_tip_product_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.ResConfigSettings)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("res_config_settings_website_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_config_settings_write_uid_fkey");

            //entity.HasMany(d => d.AccountFiscalPositions).WithMany(p => p.ResConfigSettings)
            entity.HasMany<AccountFiscalPosition>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountFiscalPositionResConfigSettingsRel",
                    r => r.HasOne<AccountFiscalPosition>().WithMany()
                        .HasForeignKey("AccountFiscalPositionId")
                        .HasConstraintName("account_fiscal_position_res_con_account_fiscal_position_id_fkey"),
                    l => l.HasOne<ResConfigSetting>().WithMany()
                        .HasForeignKey("ResConfigSettingsId")
                        .HasConstraintName("account_fiscal_position_res_config__res_config_settings_id_fkey"),
                    j =>
                    {
                        j.HasKey("ResConfigSettingsId", "AccountFiscalPositionId").HasName("account_fiscal_position_res_config_settings_rel_pkey");
                        j.ToTable("account_fiscal_position_res_config_settings_rel");
                        j.HasIndex(new[] { "AccountFiscalPositionId", "ResConfigSettingsId" }, "account_fiscal_position_res_c_account_fiscal_position_id_re_idx");
                    });

            //entity.HasMany(d => d.PosCategories).WithMany(p => p.ResConfigSettings)
            entity.HasMany<PosCategory>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "PosCategoryResConfigSettingsRel",
                    r => r.HasOne<PosCategory>().WithMany()
                        .HasForeignKey("PosCategoryId")
                        .HasConstraintName("pos_category_res_config_settings_rel_pos_category_id_fkey"),
                    l => l.HasOne<ResConfigSetting>().WithMany()
                        .HasForeignKey("ResConfigSettingsId")
                        .HasConstraintName("pos_category_res_config_settings_re_res_config_settings_id_fkey"),
                    j =>
                    {
                        j.HasKey("ResConfigSettingsId", "PosCategoryId").HasName("pos_category_res_config_settings_rel_pkey");
                        j.ToTable("pos_category_res_config_settings_rel");
                        j.HasIndex(new[] { "PosCategoryId", "ResConfigSettingsId" }, "pos_category_res_config_setti_pos_category_id_res_config_se_idx");
                    });

            //entity.HasMany(d => d.ProductPricelists).WithMany(p => p.ResConfigSettings)
            entity.HasMany<ProductPricelist>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProductPricelistResConfigSettingsRel",
                    r => r.HasOne<ProductPricelist>().WithMany()
                        .HasForeignKey("ProductPricelistId")
                        .HasConstraintName("product_pricelist_res_config_settings_product_pricelist_id_fkey"),
                    l => l.HasOne<ResConfigSetting>().WithMany()
                        .HasForeignKey("ResConfigSettingsId")
                        .HasConstraintName("product_pricelist_res_config_settin_res_config_settings_id_fkey"),
                    j =>
                    {
                        j.HasKey("ResConfigSettingsId", "ProductPricelistId").HasName("product_pricelist_res_config_settings_rel_pkey");
                        j.ToTable("product_pricelist_res_config_settings_rel");
                        j.HasIndex(new[] { "ProductPricelistId", "ResConfigSettingsId" }, "product_pricelist_res_config__product_pricelist_id_res_conf_idx");
                    });
        });

        modelBuilder.Entity<ResCountry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_country_pkey");

            entity.ToTable("res_country");

            entity.HasIndex(e => e.Code, "res_country_code_uniq").IsUnique();

            entity.HasIndex(e => e.Name, "res_country_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AddressFormat).HasColumnName("address_format");
            entity.Property(e => e.AddressViewId).HasColumnName("address_view_id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.NamePosition).HasColumnName("name_position");
            entity.Property(e => e.PhoneCode).HasColumnName("phone_code");
            entity.Property(e => e.StateRequired).HasColumnName("state_required");
            entity.Property(e => e.VatLabel)
                .HasColumnType("jsonb")
                .HasColumnName("vat_label");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");
            entity.Property(e => e.ZipRequired).HasColumnName("zip_required");

            entity.HasOne(d => d.AddressView).WithMany(p => p.ResCountries)
                .HasForeignKey(d => d.AddressViewId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_country_address_view_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_country_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_country_currency_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_country_write_uid_fkey");

            //entity.HasMany(d => d.ResCountryGroups).WithMany(p => p.ResCountries)
            entity.HasMany<ResCountryGroup>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ResCountryResCountryGroupRel",
                    r => r.HasOne<ResCountryGroup>().WithMany()
                        .HasForeignKey("ResCountryGroupId")
                        .HasConstraintName("res_country_res_country_group_rel_res_country_group_id_fkey"),
                    l => l.HasOne<ResCountry>().WithMany()
                        .HasForeignKey("ResCountryId")
                        .HasConstraintName("res_country_res_country_group_rel_res_country_id_fkey"),
                    j =>
                    {
                        j.HasKey("ResCountryId", "ResCountryGroupId").HasName("res_country_res_country_group_rel_pkey");
                        j.ToTable("res_country_res_country_group_rel");
                        j.HasIndex(new[] { "ResCountryGroupId", "ResCountryId" }, "res_country_res_country_group_res_country_group_id_res_coun_idx");
                    });
        });

        modelBuilder.Entity<ResCountryGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_country_group_pkey");

            entity.ToTable("res_country_group");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_country_group_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_country_group_write_uid_fkey");
        });

        modelBuilder.Entity<ResCountryState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_country_state_pkey");

            entity.ToTable("res_country_state");

            entity.HasIndex(e => new { e.CountryId, e.Code }, "res_country_state_name_code_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CountryId).HasColumnName("country_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCountry>().WithMany()
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("res_country_state_country_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_country_state_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_country_state_write_uid_fkey");
        });

        modelBuilder.Entity<ResCurrency>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_currency_pkey");

            entity.ToTable("res_currency");

            entity.HasIndex(e => e.Name, "res_currency_unique_name").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencySubunitLabel).HasColumnName("currency_subunit_label");
            entity.Property(e => e.CurrencyUnitLabel).HasColumnName("currency_unit_label");
            entity.Property(e => e.DecimalPlaces).HasColumnName("decimal_places");
            entity.Property(e => e.FullName).HasColumnName("full_name");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.Rounding).HasColumnName("rounding");
            entity.Property(e => e.Symbol).HasColumnName("symbol");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_currency_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_currency_write_uid_fkey");
        });

        modelBuilder.Entity<ResCurrencyRate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_currency_rate_pkey");

            entity.ToTable("res_currency_rate");

            entity.HasIndex(e => e.Name, "res_currency_rate_name_index");

            entity.HasIndex(e => new { e.Name, e.CurrencyId, e.TenantId }, "res_currency_rate_unique_name_per_day").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Rate).HasColumnName("rate");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_currency_rate_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_currency_rate_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("res_currency_rate_currency_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_currency_rate_write_uid_fkey");
        });

        modelBuilder.Entity<ResGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_groups_pkey");

            entity.ToTable("res_groups");

            entity.HasIndex(e => e.CategoryId, "res_groups_category_id_index");

            entity.HasIndex(e => new { e.CategoryId, e.Name }, "res_groups_name_uniq").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.Comment)
                .HasColumnType("jsonb")
                .HasColumnName("comment");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Share).HasColumnName("share");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Category).WithMany(p => p.ResGroups)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_groups_category_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_groups_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_groups_write_uid_fkey");

            //entity.HasMany(d => d.Gids).WithMany(p => p.Hids)
            entity.HasMany<ResGroup>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ResGroupsImpliedRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("Gid")
                        .HasConstraintName("res_groups_implied_rel_gid_fkey"),
                    l => l.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("Hid")
                        .HasConstraintName("res_groups_implied_rel_hid_fkey"),
                    j =>
                    {
                        j.HasKey("Gid", "Hid").HasName("res_groups_implied_rel_pkey");
                        j.ToTable("res_groups_implied_rel");
                        j.HasIndex(new[] { "Hid", "Gid" }, "res_groups_implied_rel_hid_gid_idx");
                    });

            //entity.HasMany(d => d.Hids).WithMany(p => p.Gids)
            entity.HasMany<ResGroup>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ResGroupsImpliedRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("Hid")
                        .HasConstraintName("res_groups_implied_rel_hid_fkey"),
                    l => l.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("Gid")
                        .HasConstraintName("res_groups_implied_rel_gid_fkey"),
                    j =>
                    {
                        j.HasKey("Gid", "Hid").HasName("res_groups_implied_rel_pkey");
                        j.ToTable("res_groups_implied_rel");
                        j.HasIndex(new[] { "Hid", "Gid" }, "res_groups_implied_rel_hid_gid_idx");
                    });

            //entity.HasMany(d => d.UidsNavigation).WithMany(p => p.Gids)
            entity.HasMany<ResUser>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ResGroupsUsersRel",
                    r => r.HasOne<ResUser>().WithMany()
                        .HasForeignKey("Uid")
                        .HasConstraintName("res_groups_users_rel_uid_fkey"),
                    l => l.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("Gid")
                        .HasConstraintName("res_groups_users_rel_gid_fkey"),
                    j =>
                    {
                        j.HasKey("Gid", "Uid").HasName("res_groups_users_rel_pkey");
                        j.ToTable("res_groups_users_rel");
                        j.HasIndex(new[] { "Uid", "Gid" }, "res_groups_users_rel_uid_gid_idx");
                    });
        });

        modelBuilder.Entity<ResLang>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_lang_pkey");

            entity.ToTable("res_lang");

            entity.HasIndex(e => e.Code, "res_lang_code_uniq").IsUnique();

            entity.HasIndex(e => e.Name, "res_lang_name_uniq").IsUnique();

            entity.HasIndex(e => e.UrlCode, "res_lang_url_code_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFormat).HasColumnName("date_format");
            entity.Property(e => e.DecimalPoint).HasColumnName("decimal_point");
            entity.Property(e => e.Direction).HasColumnName("direction");
            entity.Property(e => e.Grouping).HasColumnName("grouping");
            entity.Property(e => e.IsoCode).HasColumnName("iso_code");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.ThousandsSep).HasColumnName("thousands_sep");
            entity.Property(e => e.TimeFormat).HasColumnName("time_format");
            entity.Property(e => e.UrlCode).HasColumnName("url_code");
            entity.Property(e => e.WeekStart).HasColumnName("week_start");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_lang_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_lang_write_uid_fkey");
        });

        modelBuilder.Entity<ResPartner>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_partner_pkey");

            entity.ToTable("res_partner");

            entity.HasIndex(e => e.CommercialPartnerId, "res_partner_commercial_partner_id_index");

            entity.HasIndex(e => e.TenantId, "res_partner_company_id_index");

            entity.HasIndex(e => e.Date, "res_partner_date_index");

            entity.HasIndex(e => e.DisplayName, "res_partner_display_name_index");

            entity.HasIndex(e => e.IsPublished, "res_partner_is_published_index");

            entity.HasIndex(e => e.Name, "res_partner_name_index");

            entity.HasIndex(e => e.ParentId, "res_partner_parent_id_index");

            entity.HasIndex(e => e.Ref, "res_partner_ref_index");

            entity.HasIndex(e => e.Vat, "res_partner_vat_index");

            entity.HasIndex(e => e.WebsiteId, "res_partner_website_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AdditionalInfo).HasColumnName("additional_info");
            entity.Property(e => e.CalendarLastNotifAck)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("calendar_last_notif_ack");
            entity.Property(e => e.City).HasColumnName("city");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.Comment).HasColumnName("comment");
            entity.Property(e => e.CommercialCompanyName).HasColumnName("commercial_company_name");
            entity.Property(e => e.CommercialPartnerId).HasColumnName("commercial_partner_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CompanyName).HasColumnName("company_name");
            entity.Property(e => e.CompanyRegistry).HasColumnName("company_registry");
            entity.Property(e => e.CountryId).HasColumnName("country_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CustomerRank).HasColumnName("customer_rank");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.DebitLimit).HasColumnName("debit_limit");
            entity.Property(e => e.DisplayName).HasColumnName("display_name");
            entity.Property(e => e.Email).HasColumnName("email");
            entity.Property(e => e.EmailNormalized).HasColumnName("email_normalized");
            entity.Property(e => e.Employee).HasColumnName("employee");
            entity.Property(e => e.Function).HasColumnName("function");
            entity.Property(e => e.IndustryId).HasColumnName("industry_id");
            entity.Property(e => e.InvoiceWarn).HasColumnName("invoice_warn");
            entity.Property(e => e.InvoiceWarnMsg).HasColumnName("invoice_warn_msg");
            entity.Property(e => e.IsCompany).HasColumnName("is_company");
            entity.Property(e => e.IsPublished).HasColumnName("is_published");
            entity.Property(e => e.Lang).HasColumnName("lang");
            entity.Property(e => e.LastTimeEntriesChecked)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_time_entries_checked");
            entity.Property(e => e.LatestFollowupLevelIdWithoutLit).HasColumnName("latest_followup_level_id_without_lit");
            entity.Property(e => e.LatestFollowupSequence).HasColumnName("latest_followup_sequence");
            entity.Property(e => e.MessageBounce).HasColumnName("message_bounce");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Mobile).HasColumnName("mobile");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.PartnerGid).HasColumnName("partner_gid");
            entity.Property(e => e.PartnerLatitude).HasColumnName("partner_latitude");
            entity.Property(e => e.PartnerLongitude).HasColumnName("partner_longitude");
            entity.Property(e => e.PartnerShare).HasColumnName("partner_share");
            entity.Property(e => e.PaymentNextAction).HasColumnName("payment_next_action");
            entity.Property(e => e.PaymentNextActionDate).HasColumnName("payment_next_action_date");
            entity.Property(e => e.PaymentNote).HasColumnName("payment_note");
            entity.Property(e => e.PaymentResponsibleId).HasColumnName("payment_responsible_id");
            entity.Property(e => e.Phone).HasColumnName("phone");
            entity.Property(e => e.PhoneSanitized).HasColumnName("phone_sanitized");
            entity.Property(e => e.PickingWarn).HasColumnName("picking_warn");
            entity.Property(e => e.PickingWarnMsg).HasColumnName("picking_warn_msg");
            entity.Property(e => e.PlanToChangeBike).HasColumnName("plan_to_change_bike");
            entity.Property(e => e.PlanToChangeCar).HasColumnName("plan_to_change_car");
            entity.Property(e => e.PurchaseWarn).HasColumnName("purchase_warn");
            entity.Property(e => e.PurchaseWarnMsg).HasColumnName("purchase_warn_msg");
            entity.Property(e => e.Ref).HasColumnName("ref");
            entity.Property(e => e.SaleWarn).HasColumnName("sale_warn");
            entity.Property(e => e.SaleWarnMsg).HasColumnName("sale_warn_msg");
            entity.Property(e => e.SignupExpiration)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("signup_expiration");
            entity.Property(e => e.SignupToken).HasColumnName("signup_token");
            entity.Property(e => e.SignupType).HasColumnName("signup_type");
            entity.Property(e => e.StateId).HasColumnName("state_id");
            entity.Property(e => e.Street).HasColumnName("street");
            entity.Property(e => e.Street2).HasColumnName("street2");
            entity.Property(e => e.SupplierRank).HasColumnName("supplier_rank");
            entity.Property(e => e.TeamId).HasColumnName("team_id");
            entity.Property(e => e.Title).HasColumnName("title");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.Tz).HasColumnName("tz");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Vat).HasColumnName("vat");
            entity.Property(e => e.Website).HasColumnName("website");
            entity.Property(e => e.WebsiteId).HasColumnName("website_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");
            entity.Property(e => e.Zip).HasColumnName("zip");

            entity.HasOne(d => d.CommercialPartner).WithMany(p => p.InverseCommercialPartner)
                .HasForeignKey(d => d.CommercialPartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_commercial_partner_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_company_id_fkey");

            entity.HasOne<ResCountry>().WithMany()
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("res_partner_country_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_create_uid_fkey");

            entity.HasOne(d => d.Industry).WithMany(p => p.ResPartners)
                .HasForeignKey(d => d.IndustryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_industry_id_fkey");

            entity.HasOne(d => d.LatestFollowupLevelIdWithoutLitNavigation).WithMany(p => p.ResPartners)
                .HasForeignKey(d => d.LatestFollowupLevelIdWithoutLit)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_latest_followup_level_id_without_lit_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.ResPartners)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_parent_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.PaymentResponsibleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_payment_responsible_id_fkey");

            entity.HasOne(d => d.State).WithMany(p => p.ResPartners)
                .HasForeignKey(d => d.StateId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("res_partner_state_id_fkey");

            entity.HasOne(d => d.Team).WithMany(p => p.ResPartners)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_team_id_fkey");

            entity.HasOne(d => d.TitleNavigation).WithMany(p => p.ResPartners)
                .HasForeignKey(d => d.Title)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_title_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_user_id_fkey");

            entity.HasOne(d => d.WebsiteNavigation).WithMany(p => p.ResPartners)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("res_partner_website_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_write_uid_fkey");

            //entity.HasMany(d => d.CalendarEvents).WithMany(p => p.ResPartners)
            entity.HasMany<CalendarEvent>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "CalendarEventResPartnerRel",
                    r => r.HasOne<CalendarEvent>().WithMany()
                        .HasForeignKey("CalendarEventId")
                        .HasConstraintName("calendar_event_res_partner_rel_calendar_event_id_fkey"),
                    l => l.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("ResPartnerId")
                        .HasConstraintName("calendar_event_res_partner_rel_res_partner_id_fkey"),
                    j =>
                    {
                        j.HasKey("ResPartnerId", "CalendarEventId").HasName("calendar_event_res_partner_rel_pkey");
                        j.ToTable("calendar_event_res_partner_rel");
                        j.HasIndex(new[] { "CalendarEventId", "ResPartnerId" }, "calendar_event_res_partner_re_calendar_event_id_res_partner_idx");
                    });
        });

        modelBuilder.Entity<ResPartnerAutocompleteSync>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_partner_autocomplete_sync_pkey");

            entity.ToTable("res_partner_autocomplete_sync");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.Synched).HasColumnName("synched");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_autocomplete_sync_create_uid_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("res_partner_autocomplete_sync_partner_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_autocomplete_sync_write_uid_fkey");
        });

        modelBuilder.Entity<ResPartnerBank>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_partner_bank_pkey");

            entity.ToTable("res_partner_bank");

            entity.HasIndex(e => e.PartnerId, "res_partner_bank_partner_id_index");

            entity.HasIndex(e => new { e.SanitizedAccNumber, e.PartnerId }, "res_partner_bank_unique_number").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccHolderName).HasColumnName("acc_holder_name");
            entity.Property(e => e.AccNumber).HasColumnName("acc_number");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AllowOutPayment).HasColumnName("allow_out_payment");
            entity.Property(e => e.BankId).HasColumnName("bank_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.SanitizedAccNumber).HasColumnName("sanitized_acc_number");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Bank).WithMany(p => p.ResPartnerBanks)
                .HasForeignKey(d => d.BankId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_bank_bank_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_bank_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_bank_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_bank_currency_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.ResPartnerBanks)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_bank_message_main_attachment_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("res_partner_bank_partner_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_bank_write_uid_fkey");
        });

        modelBuilder.Entity<ResPartnerCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_partner_category_pkey");

            entity.ToTable("res_partner_category");

            entity.HasIndex(e => e.ParentId, "res_partner_category_parent_id_index");

            entity.HasIndex(e => e.ParentPath, "res_partner_category_parent_path_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.ParentPath).HasColumnName("parent_path");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_category_create_uid_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("res_partner_category_parent_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_category_write_uid_fkey");

            //entity.HasMany(d => d.Partners).WithMany(p => p.Categories)
            entity.HasMany<ResPartner>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ResPartnerResPartnerCategoryRel",
                    r => r.HasOne<ResPartner>().WithMany()
                        .HasForeignKey("PartnerId")
                        .HasConstraintName("res_partner_res_partner_category_rel_partner_id_fkey"),
                    l => l.HasOne<ResPartnerCategory>().WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("res_partner_res_partner_category_rel_category_id_fkey"),
                    j =>
                    {
                        j.HasKey("CategoryId", "PartnerId").HasName("res_partner_res_partner_category_rel_pkey");
                        j.ToTable("res_partner_res_partner_category_rel");
                        j.HasIndex(new[] { "PartnerId", "CategoryId" }, "res_partner_res_partner_category_rel_partner_id_category_id_idx");
                    });
        });

        modelBuilder.Entity<ResPartnerIndustry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_partner_industry_pkey");

            entity.ToTable("res_partner_industry");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.FullName)
                .HasColumnType("jsonb")
                .HasColumnName("full_name");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_industry_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_industry_write_uid_fkey");
        });

        modelBuilder.Entity<ResPartnerTitle>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_partner_title_pkey");

            entity.ToTable("res_partner_title");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Shortcut)
                .HasColumnType("jsonb")
                .HasColumnName("shortcut");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_title_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_partner_title_write_uid_fkey");
        });

        modelBuilder.Entity<ResUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_users_pkey");

            entity.ToTable("res_users");

            entity.HasIndex(e => new { e.Login, e.WebsiteId }, "res_users_login_key").IsUnique();

            entity.HasIndex(e => e.PartnerId, "res_users_partner_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.ActionId).HasColumnName("action_id");
            entity.Property(e => e.Active)
                .HasDefaultValueSql("true")
                .HasColumnName("active");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastLunchLocationId).HasColumnName("last_lunch_location_id");
            entity.Property(e => e.Login).HasColumnName("login");
            entity.Property(e => e.NotificationType).HasColumnName("notification_type");
            entity.Property(e => e.OdoobotFailed).HasColumnName("odoobot_failed");
            entity.Property(e => e.OdoobotState).HasColumnName("odoobot_state");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.Password).HasColumnName("password");
            entity.Property(e => e.SaleTeamId).HasColumnName("sale_team_id");
            entity.Property(e => e.Share).HasColumnName("share");
            entity.Property(e => e.Signature).HasColumnName("signature");
            entity.Property(e => e.TargetSalesDone).HasColumnName("target_sales_done");
            entity.Property(e => e.TargetSalesInvoiced).HasColumnName("target_sales_invoiced");
            entity.Property(e => e.TargetSalesWon).HasColumnName("target_sales_won");
            entity.Property(e => e.TotpSecret).HasColumnName("totp_secret");
            entity.Property(e => e.WebsiteId).HasColumnName("website_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("res_users_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_create_uid_fkey");

            entity.HasOne(d => d.LastLunchLocation).WithMany(p => p.ResUsers)
                .HasForeignKey(d => d.LastLunchLocationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_last_lunch_location_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("res_users_partner_id_fkey");

            entity.HasOne(d => d.SaleTeam).WithMany(p => p.ResUsers)
                .HasForeignKey(d => d.SaleTeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_sale_team_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.ResUsers)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_website_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_write_uid_fkey");
        });

        modelBuilder.Entity<ResUsersApikey>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_users_apikeys_pkey");

            entity.ToTable("res_users_apikeys");

            entity.HasIndex(e => new { e.UserId, e.Index }, "res_users_apikeys_user_id_index_idx");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasDefaultValueSql("(now() AT TIME ZONE 'utc'::text)")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.Index).HasColumnName("index");
            entity.Property(e => e.Key).HasColumnName("key");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Scope).HasColumnName("scope");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("res_users_apikeys_user_id_fkey");
        });

        modelBuilder.Entity<ResUsersApikeysDescription>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_users_apikeys_description_pkey");

            entity.ToTable("res_users_apikeys_description");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_apikeys_description_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_apikeys_description_write_uid_fkey");
        });

        modelBuilder.Entity<ResUsersDeletion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_users_deletion_pkey");

            entity.ToTable("res_users_deletion");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UserIdInt).HasColumnName("user_id_int");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_deletion_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_deletion_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_deletion_write_uid_fkey");
        });

        modelBuilder.Entity<ResUsersIdentitycheck>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_users_identitycheck_pkey");

            entity.ToTable("res_users_identitycheck");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Password).HasColumnName("password");
            entity.Property(e => e.Request).HasColumnName("request");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_identitycheck_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_identitycheck_write_uid_fkey");
        });

        modelBuilder.Entity<ResUsersLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_users_log_pkey");

            entity.ToTable("res_users_log");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_log_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_log_write_uid_fkey");
        });

        modelBuilder.Entity<ResUsersSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_users_settings_pkey");

            entity.ToTable("res_users_settings");

            entity.HasIndex(e => e.UserId, "res_users_settings_unique_user_id").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.IsDiscussSidebarCategoryChannelOpen).HasColumnName("is_discuss_sidebar_category_channel_open");
            entity.Property(e => e.IsDiscussSidebarCategoryChatOpen).HasColumnName("is_discuss_sidebar_category_chat_open");
            entity.Property(e => e.PushToTalkKey).HasColumnName("push_to_talk_key");
            entity.Property(e => e.UsePushToTalk).HasColumnName("use_push_to_talk");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.VoiceActiveDuration).HasColumnName("voice_active_duration");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_settings_create_uid_fkey");

            entity.HasOne(d => d.User).WithOne(p => p.ResUsersSettingUser)
                .HasForeignKey<ResUsersSetting>(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("res_users_settings_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_settings_write_uid_fkey");
        });

        modelBuilder.Entity<ResUsersSettingsVolume>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("res_users_settings_volumes_pkey");

            entity.ToTable("res_users_settings_volumes");

            entity.HasIndex(e => e.GuestId, "res_users_settings_volumes_guest_id_index");

            entity.HasIndex(e => new { e.UserSettingId, e.GuestId }, "res_users_settings_volumes_guest_unique")
                .IsUnique()
                .HasFilter("(guest_id IS NOT NULL)");

            entity.HasIndex(e => e.PartnerId, "res_users_settings_volumes_partner_id_index");

            entity.HasIndex(e => new { e.UserSettingId, e.PartnerId }, "res_users_settings_volumes_partner_unique")
                .IsUnique()
                .HasFilter("(partner_id IS NOT NULL)");

            entity.HasIndex(e => e.UserSettingId, "res_users_settings_volumes_user_setting_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.GuestId).HasColumnName("guest_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.UserSettingId).HasColumnName("user_setting_id");
            entity.Property(e => e.Volume).HasColumnName("volume");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_settings_volumes_create_uid_fkey");

            entity.HasOne(d => d.Guest).WithMany(p => p.ResUsersSettingsVolumeGuests)
                .HasForeignKey(d => d.GuestId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("res_users_settings_volumes_guest_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("res_users_settings_volumes_partner_id_fkey");

            entity.HasOne(d => d.UserSetting).WithMany(p => p.ResUsersSettingsVolumes)
                .HasForeignKey(d => d.UserSettingId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("res_users_settings_volumes_user_setting_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("res_users_settings_volumes_write_uid_fkey");
        });

        modelBuilder.Entity<ResetViewArchWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("reset_view_arch_wizard_pkey");

            entity.ToTable("reset_view_arch_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CompareViewId).HasColumnName("compare_view_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ResetMode).HasColumnName("reset_mode");
            entity.Property(e => e.ViewId).HasColumnName("view_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.CompareView).WithMany(p => p.ResetViewArchWizardCompareViews)
                .HasForeignKey(d => d.CompareViewId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("reset_view_arch_wizard_compare_view_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("reset_view_arch_wizard_create_uid_fkey");

            entity.HasOne(d => d.View).WithMany(p => p.ResetViewArchWizardViews)
                .HasForeignKey(d => d.ViewId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("reset_view_arch_wizard_view_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("reset_view_arch_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<ResourceCalendar>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("resource_calendar_pkey");

            entity.ToTable("resource_calendar");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.HoursPerDay).HasColumnName("hours_per_day");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.TwoWeeksCalendar).HasColumnName("two_weeks_calendar");
            entity.Property(e => e.Tz).HasColumnName("tz");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_write_uid_fkey");
        });

        modelBuilder.Entity<ResourceCalendarAttendance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("resource_calendar_attendance_pkey");

            entity.ToTable("resource_calendar_attendance");

            entity.HasIndex(e => e.Dayofweek, "resource_calendar_attendance_dayofweek_index");

            entity.HasIndex(e => e.HourFrom, "resource_calendar_attendance_hour_from_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CalendarId).HasColumnName("calendar_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFrom).HasColumnName("date_from");
            entity.Property(e => e.DateTo).HasColumnName("date_to");
            entity.Property(e => e.DayPeriod).HasColumnName("day_period");
            entity.Property(e => e.Dayofweek).HasColumnName("dayofweek");
            entity.Property(e => e.DisplayType).HasColumnName("display_type");
            entity.Property(e => e.HourFrom).HasColumnName("hour_from");
            entity.Property(e => e.HourTo).HasColumnName("hour_to");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.WeekType).HasColumnName("week_type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Calendar).WithMany(p => p.ResourceCalendarAttendances)
                .HasForeignKey(d => d.CalendarId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("resource_calendar_attendance_calendar_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_attendance_create_uid_fkey");

            entity.HasOne(d => d.Resource).WithMany(p => p.ResourceCalendarAttendances)
                .HasForeignKey(d => d.ResourceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_attendance_resource_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_attendance_write_uid_fkey");
        });

        modelBuilder.Entity<ResourceCalendarLeaf>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("resource_calendar_leaves_pkey");

            entity.ToTable("resource_calendar_leaves");

            entity.HasIndex(e => e.CalendarId, "resource_calendar_leaves_calendar_id_index");

            entity.HasIndex(e => e.ResourceId, "resource_calendar_leaves_resource_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CalendarId).HasColumnName("calendar_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateFrom)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_from");
            entity.Property(e => e.DateTo)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_to");
            entity.Property(e => e.HolidayId).HasColumnName("holiday_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.ResourceId).HasColumnName("resource_id");
            entity.Property(e => e.TimeType).HasColumnName("time_type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Calendar).WithMany(p => p.ResourceCalendarLeaves)
                .HasForeignKey(d => d.CalendarId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_leaves_calendar_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_leaves_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_leaves_create_uid_fkey");

            entity.HasOne(d => d.Holiday).WithMany(p => p.ResourceCalendarLeaves)
                .HasForeignKey(d => d.HolidayId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_leaves_holiday_id_fkey");

            entity.HasOne(d => d.Resource).WithMany(p => p.ResourceCalendarLeaves)
                .HasForeignKey(d => d.ResourceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_leaves_resource_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_calendar_leaves_write_uid_fkey");
        });

        modelBuilder.Entity<ResourceResource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("resource_resource_pkey");

            entity.ToTable("resource_resource");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CalendarId).HasColumnName("calendar_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.ResourceType).HasColumnName("resource_type");
            entity.Property(e => e.TimeEfficiency).HasColumnName("time_efficiency");
            entity.Property(e => e.Tz).HasColumnName("tz");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Calendar).WithMany(p => p.ResourceResources)
                .HasForeignKey(d => d.CalendarId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("resource_resource_calendar_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_resource_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_resource_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_resource_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("resource_resource_write_uid_fkey");
        });

        modelBuilder.Entity<SaleAdvancePaymentInv>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sale_advance_payment_inv_pkey");

            entity.ToTable("sale_advance_payment_inv");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AdvancePaymentMethod).HasColumnName("advance_payment_method");
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.DeductDownPayments).HasColumnName("deduct_down_payments");
            entity.Property(e => e.DepositAccountId).HasColumnName("deposit_account_id");
            entity.Property(e => e.FixedAmount).HasColumnName("fixed_amount");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_advance_payment_inv_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_advance_payment_inv_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_advance_payment_inv_currency_id_fkey");

            entity.HasOne(d => d.DepositAccount).WithMany(p => p.SaleAdvancePaymentInvs)
                .HasForeignKey(d => d.DepositAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_advance_payment_inv_deposit_account_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.SaleAdvancePaymentInvs)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_advance_payment_inv_product_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_advance_payment_inv_write_uid_fkey");

            //entity.HasMany(d => d.AccountTaxes).WithMany(p => p.SaleAdvancePaymentInvs)
            entity.HasMany<AccountTax>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxSaleAdvancePaymentInvRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("AccountTaxId")
                        .HasConstraintName("account_tax_sale_advance_payment_inv_rel_account_tax_id_fkey"),
                    l => l.HasOne<SaleAdvancePaymentInv>().WithMany()
                        .HasForeignKey("SaleAdvancePaymentInvId")
                        .HasConstraintName("account_tax_sale_advance_payme_sale_advance_payment_inv_id_fkey"),
                    j =>
                    {
                        j.HasKey("SaleAdvancePaymentInvId", "AccountTaxId").HasName("account_tax_sale_advance_payment_inv_rel_pkey");
                        j.ToTable("account_tax_sale_advance_payment_inv_rel");
                        j.HasIndex(new[] { "AccountTaxId", "SaleAdvancePaymentInvId" }, "account_tax_sale_advance_paym_account_tax_id_sale_advance_p_idx");
                    });

            //entity.HasMany(d => d.SaleOrders).WithMany(p => p.SaleAdvancePaymentInvs)
            entity.HasMany<SaleOrder>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "SaleAdvancePaymentInvSaleOrderRel",
                    r => r.HasOne<SaleOrder>().WithMany()
                        .HasForeignKey("SaleOrderId")
                        .HasConstraintName("sale_advance_payment_inv_sale_order_rel_sale_order_id_fkey"),
                    l => l.HasOne<SaleAdvancePaymentInv>().WithMany()
                        .HasForeignKey("SaleAdvancePaymentInvId")
                        .HasConstraintName("sale_advance_payment_inv_sale__sale_advance_payment_inv_id_fkey"),
                    j =>
                    {
                        j.HasKey("SaleAdvancePaymentInvId", "SaleOrderId").HasName("sale_advance_payment_inv_sale_order_rel_pkey");
                        j.ToTable("sale_advance_payment_inv_sale_order_rel");
                        j.HasIndex(new[] { "SaleOrderId", "SaleAdvancePaymentInvId" }, "sale_advance_payment_inv_sale_sale_order_id_sale_advance_pa_idx");
                    });
        });

        modelBuilder.Entity<SaleOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sale_order_pkey");

            entity.ToTable("sale_order");

            entity.HasIndex(e => e.TenantId, "sale_order_company_id_index");

            entity.HasIndex(e => e.CreationTime, "sale_order_create_date_index");

            entity.HasIndex(e => new { e.DateOrder, e.Id }, "sale_order_date_order_id_idx").IsDescending();

            entity.HasIndex(e => e.Name, "sale_order_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.PartnerId, "sale_order_partner_id_index");

            entity.HasIndex(e => e.State, "sale_order_state_index");

            entity.HasIndex(e => e.UserId, "sale_order_user_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccessToken).HasColumnName("access_token");
            entity.Property(e => e.AmountTax).HasColumnName("amount_tax");
            entity.Property(e => e.AmountTotal).HasColumnName("amount_total");
            entity.Property(e => e.AmountUnpaid).HasColumnName("amount_unpaid");
            entity.Property(e => e.AmountUntaxed).HasColumnName("amount_untaxed");
            entity.Property(e => e.AnalyticAccountId).HasColumnName("analytic_account_id");
            entity.Property(e => e.CampaignId).HasColumnName("campaign_id");
            entity.Property(e => e.CartRecoveryEmailSent).HasColumnName("cart_recovery_email_sent");
            entity.Property(e => e.ClientOrderRef).HasColumnName("client_order_ref");
            entity.Property(e => e.CommitmentDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("commitment_date");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.CurrencyRate).HasColumnName("currency_rate");
            entity.Property(e => e.DateOrder)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_order");
            entity.Property(e => e.DeliveryStatus).HasColumnName("delivery_status");
            entity.Property(e => e.EffectiveDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("effective_date");
            entity.Property(e => e.FiscalPositionId).HasColumnName("fiscal_position_id");
            entity.Property(e => e.Incoterm).HasColumnName("incoterm");
            entity.Property(e => e.IncotermLocation).HasColumnName("incoterm_location");
            entity.Property(e => e.InvoiceStatus).HasColumnName("invoice_status");
            entity.Property(e => e.MediumId).HasColumnName("medium_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OpportunityId).HasColumnName("opportunity_id");
            entity.Property(e => e.Origin).HasColumnName("origin");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PartnerInvoiceId).HasColumnName("partner_invoice_id");
            entity.Property(e => e.PartnerShippingId).HasColumnName("partner_shipping_id");
            entity.Property(e => e.PaymentTermId).HasColumnName("payment_term_id");
            entity.Property(e => e.PickingPolicy).HasColumnName("picking_policy");
            entity.Property(e => e.PricelistId).HasColumnName("pricelist_id");
            entity.Property(e => e.ProcurementGroupId).HasColumnName("procurement_group_id");
            entity.Property(e => e.ProjectId).HasColumnName("project_id");
            entity.Property(e => e.Reference).HasColumnName("reference");
            entity.Property(e => e.RequirePayment).HasColumnName("require_payment");
            entity.Property(e => e.RequireSignature).HasColumnName("require_signature");
            entity.Property(e => e.SaleOrderTemplateId).HasColumnName("sale_order_template_id");
            entity.Property(e => e.ShopWarning).HasColumnName("shop_warning");
            entity.Property(e => e.SignedBy).HasColumnName("signed_by");
            entity.Property(e => e.SignedOn)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("signed_on");
            entity.Property(e => e.SourceId).HasColumnName("source_id");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.TeamId).HasColumnName("team_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.ValidityDate).HasColumnName("validity_date");
            entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");
            entity.Property(e => e.WebsiteId).HasColumnName("website_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AnalyticAccount).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.AnalyticAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_analytic_account_id_fkey");

            entity.HasOne(d => d.Campaign).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.CampaignId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_campaign_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_currency_id_fkey");

            entity.HasOne(d => d.FiscalPosition).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.FiscalPositionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_fiscal_position_id_fkey");

            entity.HasOne(d => d.IncotermNavigation).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.Incoterm)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_incoterm_fkey");

            entity.HasOne(d => d.Medium).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.MediumId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_medium_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Opportunity).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.OpportunityId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_opportunity_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_partner_id_fkey");

            entity.HasOne(d => d.PartnerInvoice).WithMany(p => p.SaleOrderPartnerInvoices)
                .HasForeignKey(d => d.PartnerInvoiceId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_partner_invoice_id_fkey");

            entity.HasOne(d => d.PartnerShipping).WithMany(p => p.SaleOrderPartnerShippings)
                .HasForeignKey(d => d.PartnerShippingId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_partner_shipping_id_fkey");

            entity.HasOne(d => d.PaymentTerm).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.PaymentTermId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_payment_term_id_fkey");

            entity.HasOne(d => d.Pricelist).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.PricelistId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_pricelist_id_fkey");

            entity.HasOne(d => d.ProcurementGroup).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.ProcurementGroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_procurement_group_id_fkey");

            entity.HasOne(d => d.Project).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_project_id_fkey");

            entity.HasOne(d => d.SaleOrderTemplate).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.SaleOrderTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_sale_order_template_id_fkey");

            entity.HasOne(d => d.Source).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.SourceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_source_id_fkey");

            entity.HasOne(d => d.Team).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_team_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_user_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_warehouse_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.SaleOrders)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_website_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_write_uid_fkey");

            //entity.HasMany(d => d.Tags).WithMany(p => p.Orders)
            entity.HasMany<CrmTag>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "SaleOrderTagRel",
                    r => r.HasOne<CrmTag>().WithMany()
                        .HasForeignKey("TagId")
                        .HasConstraintName("sale_order_tag_rel_tag_id_fkey"),
                    l => l.HasOne<SaleOrder>().WithMany()
                        .HasForeignKey("OrderId")
                        .HasConstraintName("sale_order_tag_rel_order_id_fkey"),
                    j =>
                    {
                        j.HasKey("OrderId", "TagId").HasName("sale_order_tag_rel_pkey");
                        j.ToTable("sale_order_tag_rel");
                        j.HasIndex(new[] { "TagId", "OrderId" }, "sale_order_tag_rel_tag_id_order_id_idx");
                    });
        });

        modelBuilder.Entity<SaleOrderCancel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sale_order_cancel_pkey");

            entity.ToTable("sale_order_cancel");

            entity.HasIndex(e => e.AuthorId, "sale_order_cancel_author_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AuthorId).HasColumnName("author_id");
            entity.Property(e => e.Body).HasColumnName("body");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.EmailFrom).HasColumnName("email_from");
            entity.Property(e => e.Lang).HasColumnName("lang");
            entity.Property(e => e.OrderId).HasColumnName("order_id");
            entity.Property(e => e.Subject).HasColumnName("subject");
            entity.Property(e => e.TemplateId).HasColumnName("template_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Author).WithMany(p => p.SaleOrderCancels)
                .HasForeignKey(d => d.AuthorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_cancel_author_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_cancel_create_uid_fkey");

            entity.HasOne(d => d.Order).WithMany(p => p.SaleOrderCancels)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("sale_order_cancel_order_id_fkey");

            entity.HasOne(d => d.Template).WithMany(p => p.SaleOrderCancels)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_cancel_template_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_cancel_write_uid_fkey");
        });

        modelBuilder.Entity<SaleOrderLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sale_order_line_pkey");

            entity.ToTable("sale_order_line");

            entity.HasIndex(e => e.AnalyticDistribution, "sale_order_line_analytic_distribution_gin_index").HasMethod("gin");

            entity.HasIndex(e => e.TenantId, "sale_order_line_company_id_index");

            entity.HasIndex(e => e.LinkedLineId, "sale_order_line_linked_line_id_index");

            entity.HasIndex(e => e.OrderId, "sale_order_line_order_id_index");

            entity.HasIndex(e => e.OrderPartnerId, "sale_order_line_order_partner_id_index");

            entity.HasIndex(e => e.ProductId, "sale_order_line_product_id_index").HasFilter("(product_id IS NOT NULL)");

            entity.HasIndex(e => e.ProjectId, "sale_order_line_project_id_index");

            entity.HasIndex(e => e.TaskId, "sale_order_line_task_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AnalyticDistribution)
                .HasColumnType("jsonb")
                .HasColumnName("analytic_distribution");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CurrencyId).HasColumnName("currency_id");
            entity.Property(e => e.CustomerLead).HasColumnName("customer_lead");
            entity.Property(e => e.Discount).HasColumnName("discount");
            entity.Property(e => e.DisplayType).HasColumnName("display_type");
            entity.Property(e => e.InvoiceStatus).HasColumnName("invoice_status");
            entity.Property(e => e.IsDownpayment).HasColumnName("is_downpayment");
            entity.Property(e => e.IsExpense).HasColumnName("is_expense");
            entity.Property(e => e.IsService).HasColumnName("is_service");
            entity.Property(e => e.LinkedLineId).HasColumnName("linked_line_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OrderId).HasColumnName("order_id");
            entity.Property(e => e.OrderPartnerId).HasColumnName("order_partner_id");
            entity.Property(e => e.PriceReduce).HasColumnName("price_reduce");
            entity.Property(e => e.PriceReduceTaxexcl).HasColumnName("price_reduce_taxexcl");
            entity.Property(e => e.PriceReduceTaxinc).HasColumnName("price_reduce_taxinc");
            entity.Property(e => e.PriceSubtotal).HasColumnName("price_subtotal");
            entity.Property(e => e.PriceTax).HasColumnName("price_tax");
            entity.Property(e => e.PriceTotal).HasColumnName("price_total");
            entity.Property(e => e.PriceUnit).HasColumnName("price_unit");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductPackagingId).HasColumnName("product_packaging_id");
            entity.Property(e => e.ProductPackagingQty).HasColumnName("product_packaging_qty");
            entity.Property(e => e.ProductUom).HasColumnName("product_uom");
            entity.Property(e => e.ProductUomQty).HasColumnName("product_uom_qty");
            entity.Property(e => e.ProjectId).HasColumnName("project_id");
            entity.Property(e => e.QtyDelivered).HasColumnName("qty_delivered");
            entity.Property(e => e.QtyDeliveredMethod).HasColumnName("qty_delivered_method");
            entity.Property(e => e.QtyInvoiced).HasColumnName("qty_invoiced");
            entity.Property(e => e.QtyToInvoice).HasColumnName("qty_to_invoice");
            entity.Property(e => e.RouteId).HasColumnName("route_id");
            entity.Property(e => e.SalesmanId).HasColumnName("salesman_id");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.ShopWarning).HasColumnName("shop_warning");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.TaskId).HasColumnName("task_id");
            entity.Property(e => e.UntaxedAmountInvoiced).HasColumnName("untaxed_amount_invoiced");
            entity.Property(e => e.UntaxedAmountToInvoice).HasColumnName("untaxed_amount_to_invoice");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_line_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_line_create_uid_fkey");

            entity.HasOne<ResCurrency>().WithMany()
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_line_currency_id_fkey");

            entity.HasOne(d => d.LinkedLine).WithMany(p => p.InverseLinkedLine)
                .HasForeignKey(d => d.LinkedLineId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("sale_order_line_linked_line_id_fkey");

            entity.HasOne(d => d.Order).WithMany(p => p.SaleOrderLines)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("sale_order_line_order_id_fkey");

            entity.HasOne(d => d.OrderPartner).WithMany(p => p.SaleOrderLines)
                .HasForeignKey(d => d.OrderPartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_line_order_partner_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.SaleOrderLines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_line_product_id_fkey");

            entity.HasOne(d => d.ProductPackaging).WithMany(p => p.SaleOrderLines)
                .HasForeignKey(d => d.ProductPackagingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_line_product_packaging_id_fkey");

            entity.HasOne(d => d.ProductUomNavigation).WithMany(p => p.SaleOrderLines)
                .HasForeignKey(d => d.ProductUom)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_line_product_uom_fkey");

            entity.HasOne(d => d.Project).WithMany(p => p.SaleOrderLines)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_line_project_id_fkey");

            entity.HasOne(d => d.Route).WithMany(p => p.SaleOrderLines)
                .HasForeignKey(d => d.RouteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_line_route_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.SalesmanId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_line_salesman_id_fkey");

            entity.HasOne(d => d.Task).WithMany(p => p.SaleOrderLines)
                .HasForeignKey(d => d.TaskId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_line_task_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_line_write_uid_fkey");

            //entity.HasMany(d => d.AccountTaxes).WithMany(p => p.SaleOrderLines)
            entity.HasMany<AccountTax>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "AccountTaxSaleOrderLineRel",
                    r => r.HasOne<AccountTax>().WithMany()
                        .HasForeignKey("AccountTaxId")
                        .HasConstraintName("account_tax_sale_order_line_rel_account_tax_id_fkey"),
                    l => l.HasOne<SaleOrderLine>().WithMany()
                        .HasForeignKey("SaleOrderLineId")
                        .HasConstraintName("account_tax_sale_order_line_rel_sale_order_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("SaleOrderLineId", "AccountTaxId").HasName("account_tax_sale_order_line_rel_pkey");
                        j.ToTable("account_tax_sale_order_line_rel");
                        j.HasIndex(new[] { "AccountTaxId", "SaleOrderLineId" }, "account_tax_sale_order_line_r_account_tax_id_sale_order_lin_idx");
                    });

            //entity.HasMany(d => d.ProductTemplateAttributeValues).WithMany(p => p.SaleOrderLines)
            entity.HasMany<ProductTemplateAttributeValue>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProductTemplateAttributeValueSaleOrderLineRel",
                    r => r.HasOne<ProductTemplateAttributeValue>().WithMany()
                        .HasForeignKey("ProductTemplateAttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("product_template_attribute_va_product_template_attribute_v_fkey"),
                    l => l.HasOne<SaleOrderLine>().WithMany()
                        .HasForeignKey("SaleOrderLineId")
                        .HasConstraintName("product_template_attribute_value_sale_o_sale_order_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("SaleOrderLineId", "ProductTemplateAttributeValueId").HasName("product_template_attribute_value_sale_order_line_rel_pkey");
                        j.ToTable("product_template_attribute_value_sale_order_line_rel");
                        j.HasIndex(new[] { "ProductTemplateAttributeValueId", "SaleOrderLineId" }, "product_template_attribute_va_product_template_attribute_va_idx");
                    });
        });

        modelBuilder.Entity<SaleOrderOption>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sale_order_option_pkey");

            entity.ToTable("sale_order_option");

            entity.HasIndex(e => e.OrderId, "sale_order_option_order_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Discount).HasColumnName("discount");
            entity.Property(e => e.LineId).HasColumnName("line_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OrderId).HasColumnName("order_id");
            entity.Property(e => e.PriceUnit).HasColumnName("price_unit");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.UomId).HasColumnName("uom_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_option_create_uid_fkey");

            entity.HasOne(d => d.Line).WithMany(p => p.SaleOrderOptions)
                .HasForeignKey(d => d.LineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_option_line_id_fkey");

            entity.HasOne(d => d.Order).WithMany(p => p.SaleOrderOptions)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("sale_order_option_order_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.SaleOrderOptions)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_option_product_id_fkey");

            entity.HasOne(d => d.Uom).WithMany(p => p.SaleOrderOptions)
                .HasForeignKey(d => d.UomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_option_uom_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_option_write_uid_fkey");
        });

        modelBuilder.Entity<SaleOrderTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sale_order_template_pkey");

            entity.ToTable("sale_order_template");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.MailTemplateId).HasColumnName("mail_template_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Note)
                .HasColumnType("jsonb")
                .HasColumnName("note");
            entity.Property(e => e.NumberOfDays).HasColumnName("number_of_days");
            entity.Property(e => e.RequirePayment).HasColumnName("require_payment");
            entity.Property(e => e.RequireSignature).HasColumnName("require_signature");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_create_uid_fkey");

            entity.HasOne(d => d.MailTemplate).WithMany(p => p.SaleOrderTemplates)
                .HasForeignKey(d => d.MailTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_mail_template_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_write_uid_fkey");
        });

        modelBuilder.Entity<SaleOrderTemplateLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sale_order_template_line_pkey");

            entity.ToTable("sale_order_template_line");

            entity.HasIndex(e => e.TenantId, "sale_order_template_line_company_id_index");

            entity.HasIndex(e => e.SaleOrderTemplateId, "sale_order_template_line_sale_order_template_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DisplayType).HasColumnName("display_type");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductUomId).HasColumnName("product_uom_id");
            entity.Property(e => e.ProductUomQty).HasColumnName("product_uom_qty");
            entity.Property(e => e.SaleOrderTemplateId).HasColumnName("sale_order_template_id");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_line_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_line_create_uid_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.SaleOrderTemplateLines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_line_product_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.SaleOrderTemplateLines)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_line_product_uom_id_fkey");

            entity.HasOne(d => d.SaleOrderTemplate).WithMany(p => p.SaleOrderTemplateLines)
                .HasForeignKey(d => d.SaleOrderTemplateId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("sale_order_template_line_sale_order_template_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_line_write_uid_fkey");
        });

        modelBuilder.Entity<SaleOrderTemplateOption>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sale_order_template_option_pkey");

            entity.ToTable("sale_order_template_option");

            entity.HasIndex(e => e.TenantId, "sale_order_template_option_company_id_index");

            entity.HasIndex(e => e.SaleOrderTemplateId, "sale_order_template_option_sale_order_template_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.SaleOrderTemplateId).HasColumnName("sale_order_template_id");
            entity.Property(e => e.UomId).HasColumnName("uom_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_option_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_option_create_uid_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.SaleOrderTemplateOptions)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_template_option_product_id_fkey");

            entity.HasOne(d => d.SaleOrderTemplate).WithMany(p => p.SaleOrderTemplateOptions)
                .HasForeignKey(d => d.SaleOrderTemplateId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("sale_order_template_option_sale_order_template_id_fkey");

            entity.HasOne(d => d.Uom).WithMany(p => p.SaleOrderTemplateOptions)
                .HasForeignKey(d => d.UomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sale_order_template_option_uom_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_order_template_option_write_uid_fkey");
        });

        modelBuilder.Entity<SalePaymentProviderOnboardingWizard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sale_payment_provider_onboarding_wizard_pkey");

            entity.ToTable("sale_payment_provider_onboarding_wizard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccNumber).HasColumnName("acc_number");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.JournalName).HasColumnName("journal_name");
            entity.Property(e => e.ManualName).HasColumnName("manual_name");
            entity.Property(e => e.ManualPostMsg).HasColumnName("manual_post_msg");
            entity.Property(e => e.PaymentMethod).HasColumnName("payment_method");
            entity.Property(e => e.PaypalEmailAccount).HasColumnName("paypal_email_account");
            entity.Property(e => e.PaypalPdtToken).HasColumnName("paypal_pdt_token");
            entity.Property(e => e.PaypalSellerAccount).HasColumnName("paypal_seller_account");
            entity.Property(e => e.PaypalUserType).HasColumnName("paypal_user_type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_payment_provider_onboarding_wizard_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sale_payment_provider_onboarding_wizard_write_uid_fkey");
        });

        modelBuilder.Entity<SmsComposer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sms_composer_pkey");

            entity.ToTable("sms_composer");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Body).HasColumnName("body");
            entity.Property(e => e.CompositionMode).HasColumnName("composition_mode");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.MassForceSend).HasColumnName("mass_force_send");
            entity.Property(e => e.MassKeepLog).HasColumnName("mass_keep_log");
            entity.Property(e => e.MassUseBlacklist).HasColumnName("mass_use_blacklist");
            entity.Property(e => e.NumberFieldName).HasColumnName("number_field_name");
            entity.Property(e => e.Numbers).HasColumnName("numbers");
            entity.Property(e => e.RecipientSingleNumberItf).HasColumnName("recipient_single_number_itf");
            entity.Property(e => e.ResId).HasColumnName("res_id");
            entity.Property(e => e.ResIds).HasColumnName("res_ids");
            entity.Property(e => e.ResModel).HasColumnName("res_model");
            entity.Property(e => e.TemplateId).HasColumnName("template_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_composer_create_uid_fkey");

            entity.HasOne(d => d.Template).WithMany(p => p.SmsComposers)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_composer_template_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_composer_write_uid_fkey");
        });

        modelBuilder.Entity<SmsResend>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sms_resend_pkey");

            entity.ToTable("sms_resend");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.MailMessageId).HasColumnName("mail_message_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_resend_create_uid_fkey");

            entity.HasOne(d => d.MailMessage).WithMany(p => p.SmsResends)
                .HasForeignKey(d => d.MailMessageId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("sms_resend_mail_message_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_resend_write_uid_fkey");
        });

        modelBuilder.Entity<SmsResendRecipient>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sms_resend_recipient_pkey");

            entity.ToTable("sms_resend_recipient");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.NotificationId).HasColumnName("notification_id");
            entity.Property(e => e.PartnerName).HasColumnName("partner_name");
            entity.Property(e => e.Resend).HasColumnName("resend");
            entity.Property(e => e.SmsNumber).HasColumnName("sms_number");
            entity.Property(e => e.SmsResendId).HasColumnName("sms_resend_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_resend_recipient_create_uid_fkey");

            entity.HasOne(d => d.Notification).WithMany(p => p.SmsResendRecipients)
                .HasForeignKey(d => d.NotificationId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("sms_resend_recipient_notification_id_fkey");

            entity.HasOne(d => d.SmsResend).WithMany(p => p.SmsResendRecipients)
                .HasForeignKey(d => d.SmsResendId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("sms_resend_recipient_sms_resend_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_resend_recipient_write_uid_fkey");
        });

        modelBuilder.Entity<SmsSm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sms_sms_pkey");

            entity.ToTable("sms_sms");

            entity.HasIndex(e => e.MailMessageId, "sms_sms_mail_message_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Body).HasColumnName("body");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.FailureType).HasColumnName("failure_type");
            entity.Property(e => e.MailMessageId).HasColumnName("mail_message_id");
            entity.Property(e => e.Number).HasColumnName("number");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_sms_create_uid_fkey");

            entity.HasOne(d => d.MailMessage).WithMany(p => p.SmsSms)
                .HasForeignKey(d => d.MailMessageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_sms_mail_message_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_sms_partner_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_sms_write_uid_fkey");
        });

        modelBuilder.Entity<SmsTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sms_template_pkey");

            entity.ToTable("sms_template");

            entity.HasIndex(e => e.Model, "sms_template_model_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Body)
                .HasColumnType("jsonb")
                .HasColumnName("body");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Lang).HasColumnName("lang");
            entity.Property(e => e.Model).HasColumnName("model");
            entity.Property(e => e.ModelId).HasColumnName("model_id");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.SidebarActionId).HasColumnName("sidebar_action_id");
            entity.Property(e => e.TemplateFs).HasColumnName("template_fs");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_template_create_uid_fkey");

            entity.HasOne(d => d.ModelNavigation).WithMany(p => p.SmsTemplates)
                .HasForeignKey(d => d.ModelId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("sms_template_model_id_fkey");

            entity.HasOne(d => d.SidebarAction).WithMany(p => p.SmsTemplates)
                .HasForeignKey(d => d.SidebarActionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_template_sidebar_action_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_template_write_uid_fkey");
        });

        modelBuilder.Entity<SmsTemplatePreview>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sms_template_preview_pkey");

            entity.ToTable("sms_template_preview");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Lang).HasColumnName("lang");
            entity.Property(e => e.ResourceRef).HasColumnName("resource_ref");
            entity.Property(e => e.SmsTemplateId).HasColumnName("sms_template_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_template_preview_create_uid_fkey");

            entity.HasOne(d => d.SmsTemplate).WithMany(p => p.SmsTemplatePreviews)
                .HasForeignKey(d => d.SmsTemplateId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("sms_template_preview_sms_template_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_template_preview_write_uid_fkey");
        });

        modelBuilder.Entity<SmsTemplateReset>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("sms_template_reset_pkey");

            entity.ToTable("sms_template_reset");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_template_reset_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("sms_template_reset_write_uid_fkey");

            //entity.HasMany(d => d.SmsTemplates).WithMany(p => p.SmsTemplateResets)
            entity.HasMany<SmsTemplate>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "SmsTemplateSmsTemplateResetRel",
                    r => r.HasOne<SmsTemplate>().WithMany()
                        .HasForeignKey("SmsTemplateId")
                        .HasConstraintName("sms_template_sms_template_reset_rel_sms_template_id_fkey"),
                    l => l.HasOne<SmsTemplateReset>().WithMany()
                        .HasForeignKey("SmsTemplateResetId")
                        .HasConstraintName("sms_template_sms_template_reset_rel_sms_template_reset_id_fkey"),
                    j =>
                    {
                        j.HasKey("SmsTemplateResetId", "SmsTemplateId").HasName("sms_template_sms_template_reset_rel_pkey");
                        j.ToTable("sms_template_sms_template_reset_rel");
                        j.HasIndex(new[] { "SmsTemplateId", "SmsTemplateResetId" }, "sms_template_sms_template_res_sms_template_id_sms_template__idx");
                    });
        });

        modelBuilder.Entity<SnailmailConfirmInvoice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("snailmail_confirm_invoice_pkey");

            entity.ToTable("snailmail_confirm_invoice");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.InvoiceSendId).HasColumnName("invoice_send_id");
            entity.Property(e => e.ModelName).HasColumnName("model_name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_confirm_invoice_create_uid_fkey");

            entity.HasOne(d => d.InvoiceSend).WithMany(p => p.SnailmailConfirmInvoices)
                .HasForeignKey(d => d.InvoiceSendId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_confirm_invoice_invoice_send_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_confirm_invoice_write_uid_fkey");
        });

        modelBuilder.Entity<SnailmailLetter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("snailmail_letter_pkey");

            entity.ToTable("snailmail_letter");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AttachmentId).HasColumnName("attachment_id");
            entity.Property(e => e.City).HasColumnName("city");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CountryId).HasColumnName("country_id");
            entity.Property(e => e.Cover).HasColumnName("cover");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Duplex).HasColumnName("duplex");
            entity.Property(e => e.ErrorCode).HasColumnName("error_code");
            entity.Property(e => e.InfoMsg).HasColumnName("info_msg");
            entity.Property(e => e.MessageId).HasColumnName("message_id");
            entity.Property(e => e.Model).HasColumnName("model");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.ReportTemplate).HasColumnName("report_template");
            entity.Property(e => e.ResId).HasColumnName("res_id");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.StateId).HasColumnName("state_id");
            entity.Property(e => e.Street).HasColumnName("street");
            entity.Property(e => e.Street2).HasColumnName("street2");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");
            entity.Property(e => e.Zip).HasColumnName("zip");

            entity.HasOne(d => d.Attachment).WithMany(p => p.SnailmailLetters)
                .HasForeignKey(d => d.AttachmentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("snailmail_letter_attachment_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("snailmail_letter_company_id_fkey");

            entity.HasOne<ResCountry>().WithMany()
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_country_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_create_uid_fkey");

            entity.HasOne(d => d.Message).WithMany(p => p.SnailmailLetters)
                .HasForeignKey(d => d.MessageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_message_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("snailmail_letter_partner_id_fkey");

            entity.HasOne(d => d.ReportTemplateNavigation).WithMany(p => p.SnailmailLetters)
                .HasForeignKey(d => d.ReportTemplate)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_report_template_fkey");

            entity.HasOne(d => d.StateNavigation).WithMany(p => p.SnailmailLetters)
                .HasForeignKey(d => d.StateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_state_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_write_uid_fkey");
        });

        modelBuilder.Entity<SnailmailLetterFormatError>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("snailmail_letter_format_error_pkey");

            entity.ToTable("snailmail_letter_format_error");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.MessageId).HasColumnName("message_id");
            entity.Property(e => e.SnailmailCover).HasColumnName("snailmail_cover");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_format_error_create_uid_fkey");

            entity.HasOne(d => d.Message).WithMany(p => p.SnailmailLetterFormatErrors)
                .HasForeignKey(d => d.MessageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_format_error_message_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_format_error_write_uid_fkey");
        });

        modelBuilder.Entity<SnailmailLetterMissingRequiredField>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("snailmail_letter_missing_required_fields_pkey");

            entity.ToTable("snailmail_letter_missing_required_fields");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.City).HasColumnName("city");
            entity.Property(e => e.CountryId).HasColumnName("country_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LetterId).HasColumnName("letter_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.StateId).HasColumnName("state_id");
            entity.Property(e => e.Street).HasColumnName("street");
            entity.Property(e => e.Street2).HasColumnName("street2");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");
            entity.Property(e => e.Zip).HasColumnName("zip");

            entity.HasOne<ResCountry>().WithMany()
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_missing_required_fields_country_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_missing_required_fields_create_uid_fkey");

            entity.HasOne(d => d.Letter).WithMany(p => p.SnailmailLetterMissingRequiredFields)
                .HasForeignKey(d => d.LetterId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_missing_required_fields_letter_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_missing_required_fields_partner_id_fkey");

            entity.HasOne(d => d.State).WithMany(p => p.SnailmailLetterMissingRequiredFields)
                .HasForeignKey(d => d.StateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_missing_required_fields_state_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("snailmail_letter_missing_required_fields_write_uid_fkey");
        });

        modelBuilder.Entity<SpreadsheetDashboard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("spreadsheet_dashboard_pkey");

            entity.ToTable("spreadsheet_dashboard");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DashboardGroupId).HasColumnName("dashboard_group_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("spreadsheet_dashboard_create_uid_fkey");

            entity.HasOne(d => d.DashboardGroup).WithMany(p => p.SpreadsheetDashboards)
                .HasForeignKey(d => d.DashboardGroupId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("spreadsheet_dashboard_dashboard_group_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("spreadsheet_dashboard_write_uid_fkey");

            //entity.HasMany(d => d.ResGroups).WithMany(p => p.SpreadsheetDashboards)
            entity.HasMany<ResGroup>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ResGroupsSpreadsheetDashboardRel",
                    r => r.HasOne<ResGroup>().WithMany()
                        .HasForeignKey("ResGroupsId")
                        .HasConstraintName("res_groups_spreadsheet_dashboard_rel_res_groups_id_fkey"),
                    l => l.HasOne<SpreadsheetDashboard>().WithMany()
                        .HasForeignKey("SpreadsheetDashboardId")
                        .HasConstraintName("res_groups_spreadsheet_dashboard__spreadsheet_dashboard_id_fkey"),
                    j =>
                    {
                        j.HasKey("SpreadsheetDashboardId", "ResGroupsId").HasName("res_groups_spreadsheet_dashboard_rel_pkey");
                        j.ToTable("res_groups_spreadsheet_dashboard_rel");
                        j.HasIndex(new[] { "ResGroupsId", "SpreadsheetDashboardId" }, "res_groups_spreadsheet_dashbo_res_groups_id_spreadsheet_das_idx");
                    });
        });

        modelBuilder.Entity<SpreadsheetDashboardGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("spreadsheet_dashboard_group_pkey");

            entity.ToTable("spreadsheet_dashboard_group");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Sequence)
                //.ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("spreadsheet_dashboard_group_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("spreadsheet_dashboard_group_write_uid_fkey");
        });

        modelBuilder.Entity<StockAssignSerial>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_assign_serial_pkey");

            entity.ToTable("stock_assign_serial");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ExpectedQty).HasColumnName("expected_qty");
            entity.Property(e => e.MoveId).HasColumnName("move_id");
            entity.Property(e => e.MultipleLotComponentsNames).HasColumnName("multiple_lot_components_names");
            entity.Property(e => e.NextSerialCount).HasColumnName("next_serial_count");
            entity.Property(e => e.NextSerialNumber).HasColumnName("next_serial_number");
            entity.Property(e => e.ProducedQty).HasColumnName("produced_qty");
            entity.Property(e => e.ProductionId).HasColumnName("production_id");
            entity.Property(e => e.SerialNumbers).HasColumnName("serial_numbers");
            entity.Property(e => e.ShowApply).HasColumnName("show_apply");
            entity.Property(e => e.ShowBackorders).HasColumnName("show_backorders");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_assign_serial_create_uid_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.StockAssignSerials)
                .HasForeignKey(d => d.MoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_assign_serial_move_id_fkey");

            entity.HasOne(d => d.Production).WithMany(p => p.StockAssignSerials)
                .HasForeignKey(d => d.ProductionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_assign_serial_production_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_assign_serial_write_uid_fkey");
        });

        modelBuilder.Entity<StockBackorderConfirmation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_backorder_confirmation_pkey");

            entity.ToTable("stock_backorder_confirmation");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ShowTransfers).HasColumnName("show_transfers");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_backorder_confirmation_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_backorder_confirmation_write_uid_fkey");

            //entity.HasMany(d => d.StockPickings).WithMany(p => p.StockBackorderConfirmations)
            entity.HasMany<StockPicking>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockPickingBackorderRel",
                    r => r.HasOne<StockPicking>().WithMany()
                        .HasForeignKey("StockPickingId")
                        .HasConstraintName("stock_picking_backorder_rel_stock_picking_id_fkey"),
                    l => l.HasOne<StockBackorderConfirmation>().WithMany()
                        .HasForeignKey("StockBackorderConfirmationId")
                        .HasConstraintName("stock_picking_backorder_rel_stock_backorder_confirmation_i_fkey"),
                    j =>
                    {
                        j.HasKey("StockBackorderConfirmationId", "StockPickingId").HasName("stock_picking_backorder_rel_pkey");
                        j.ToTable("stock_picking_backorder_rel");
                        j.HasIndex(new[] { "StockPickingId", "StockBackorderConfirmationId" }, "stock_picking_backorder_rel_stock_picking_id_stock_backorde_idx");
                    });
        });

        modelBuilder.Entity<StockBackorderConfirmationLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_backorder_confirmation_line_pkey");

            entity.ToTable("stock_backorder_confirmation_line");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.BackorderConfirmationId).HasColumnName("backorder_confirmation_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.PickingId).HasColumnName("picking_id");
            entity.Property(e => e.ToBackorder).HasColumnName("to_backorder");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.BackorderConfirmation).WithMany(p => p.StockBackorderConfirmationLines)
                .HasForeignKey(d => d.BackorderConfirmationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_backorder_confirmation_lin_backorder_confirmation_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_backorder_confirmation_line_create_uid_fkey");

            entity.HasOne(d => d.Picking).WithMany(p => p.StockBackorderConfirmationLines)
                .HasForeignKey(d => d.PickingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_backorder_confirmation_line_picking_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_backorder_confirmation_line_write_uid_fkey");
        });

        modelBuilder.Entity<StockChangeProductQty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_change_product_qty_pkey");

            entity.ToTable("stock_change_product_qty");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.NewQuantity).HasColumnName("new_quantity");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductTmplId).HasColumnName("product_tmpl_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_change_product_qty_create_uid_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockChangeProductQties)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_change_product_qty_product_id_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.StockChangeProductQties)
                .HasForeignKey(d => d.ProductTmplId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_change_product_qty_product_tmpl_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_change_product_qty_write_uid_fkey");
        });

        modelBuilder.Entity<StockImmediateTransfer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_immediate_transfer_pkey");

            entity.ToTable("stock_immediate_transfer");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ShowTransfers).HasColumnName("show_transfers");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_immediate_transfer_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_immediate_transfer_write_uid_fkey");

            //entity.HasMany(d => d.StockPickings).WithMany(p => p.StockImmediateTransfers)
            entity.HasMany<StockPicking>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockPickingTransferRel",
                    r => r.HasOne<StockPicking>().WithMany()
                        .HasForeignKey("StockPickingId")
                        .HasConstraintName("stock_picking_transfer_rel_stock_picking_id_fkey"),
                    l => l.HasOne<StockImmediateTransfer>().WithMany()
                        .HasForeignKey("StockImmediateTransferId")
                        .HasConstraintName("stock_picking_transfer_rel_stock_immediate_transfer_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockImmediateTransferId", "StockPickingId").HasName("stock_picking_transfer_rel_pkey");
                        j.ToTable("stock_picking_transfer_rel");
                        j.HasIndex(new[] { "StockPickingId", "StockImmediateTransferId" }, "stock_picking_transfer_rel_stock_picking_id_stock_immediate_idx");
                    });
        });

        modelBuilder.Entity<StockImmediateTransferLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_immediate_transfer_line_pkey");

            entity.ToTable("stock_immediate_transfer_line");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ImmediateTransferId).HasColumnName("immediate_transfer_id");
            entity.Property(e => e.PickingId).HasColumnName("picking_id");
            entity.Property(e => e.ToImmediate).HasColumnName("to_immediate");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_immediate_transfer_line_create_uid_fkey");

            entity.HasOne(d => d.ImmediateTransfer).WithMany(p => p.StockImmediateTransferLines)
                .HasForeignKey(d => d.ImmediateTransferId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_immediate_transfer_line_immediate_transfer_id_fkey");

            entity.HasOne(d => d.Picking).WithMany(p => p.StockImmediateTransferLines)
                .HasForeignKey(d => d.PickingId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_immediate_transfer_line_picking_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_immediate_transfer_line_write_uid_fkey");
        });

        modelBuilder.Entity<StockInventoryAdjustmentName>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_inventory_adjustment_name_pkey");

            entity.ToTable("stock_inventory_adjustment_name");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.InventoryAdjustmentName).HasColumnName("inventory_adjustment_name");
            entity.Property(e => e.ShowInfo).HasColumnName("show_info");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_inventory_adjustment_name_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_inventory_adjustment_name_write_uid_fkey");

            //entity.HasMany(d => d.StockQuants).WithMany(p => p.StockInventoryAdjustmentNames)
            entity.HasMany<StockQuant>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockInventoryAdjustmentNameStockQuantRel",
                    r => r.HasOne<StockQuant>().WithMany()
                        .HasForeignKey("StockQuantId")
                        .HasConstraintName("stock_inventory_adjustment_name_stock_quant_stock_quant_id_fkey"),
                    l => l.HasOne<StockInventoryAdjustmentName>().WithMany()
                        .HasForeignKey("StockInventoryAdjustmentNameId")
                        .HasConstraintName("stock_inventory_adjustment_na_stock_inventory_adjustment_n_fkey"),
                    j =>
                    {
                        j.HasKey("StockInventoryAdjustmentNameId", "StockQuantId").HasName("stock_inventory_adjustment_name_stock_quant_rel_pkey");
                        j.ToTable("stock_inventory_adjustment_name_stock_quant_rel");
                        j.HasIndex(new[] { "StockQuantId", "StockInventoryAdjustmentNameId" }, "stock_inventory_adjustment_na_stock_quant_id_stock_inventor_idx");
                    });
        });

        modelBuilder.Entity<StockInventoryConflict>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_inventory_conflict_pkey");

            entity.ToTable("stock_inventory_conflict");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_inventory_conflict_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_inventory_conflict_write_uid_fkey");

            /// TODO:
            //entity.HasMany(d => d.StockQuants).WithMany(p => p.StockInventoryConflicts)
            entity.HasMany<StockQuant>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockConflictQuantRel",
                    r => r.HasOne<StockQuant>().WithMany()
                        .HasForeignKey("StockQuantId")
                        .HasConstraintName("stock_conflict_quant_rel_stock_quant_id_fkey"),
                    l => l.HasOne<StockInventoryConflict>().WithMany()
                        .HasForeignKey("StockInventoryConflictId")
                        .HasConstraintName("stock_conflict_quant_rel_stock_inventory_conflict_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockInventoryConflictId", "StockQuantId").HasName("stock_conflict_quant_rel_pkey");
                        j.ToTable("stock_conflict_quant_rel");
                        j.HasIndex(new[] { "StockQuantId", "StockInventoryConflictId" }, "stock_conflict_quant_rel_stock_quant_id_stock_inventory_con_idx");
                    });

            /// TODO:
            //entity.HasMany(d => d.StockQuantsNavigation).WithMany(p => p.StockInventoryConflictsNavigation)
            entity.HasMany<StockQuant>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockInventoryConflictStockQuantRel",
                    r => r.HasOne<StockQuant>().WithMany()
                        .HasForeignKey("StockQuantId")
                        .HasConstraintName("stock_inventory_conflict_stock_quant_rel_stock_quant_id_fkey"),
                    l => l.HasOne<StockInventoryConflict>().WithMany()
                        .HasForeignKey("StockInventoryConflictId")
                        .HasConstraintName("stock_inventory_conflict_stock_stock_inventory_conflict_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockInventoryConflictId", "StockQuantId").HasName("stock_inventory_conflict_stock_quant_rel_pkey");
                        j.ToTable("stock_inventory_conflict_stock_quant_rel");
                        j.HasIndex(new[] { "StockQuantId", "StockInventoryConflictId" }, "stock_inventory_conflict_stoc_stock_quant_id_stock_inventor_idx");
                    });
        });

        modelBuilder.Entity<StockInventoryWarning>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_inventory_warning_pkey");

            entity.ToTable("stock_inventory_warning");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_inventory_warning_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_inventory_warning_write_uid_fkey");

            //entity.HasMany(d => d.StockQuants).WithMany(p => p.StockInventoryWarnings)
            entity.HasMany<StockQuant>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockInventoryWarningStockQuantRel",
                    r => r.HasOne<StockQuant>().WithMany()
                        .HasForeignKey("StockQuantId")
                        .HasConstraintName("stock_inventory_warning_stock_quant_rel_stock_quant_id_fkey"),
                    l => l.HasOne<StockInventoryWarning>().WithMany()
                        .HasForeignKey("StockInventoryWarningId")
                        .HasConstraintName("stock_inventory_warning_stock_q_stock_inventory_warning_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockInventoryWarningId", "StockQuantId").HasName("stock_inventory_warning_stock_quant_rel_pkey");
                        j.ToTable("stock_inventory_warning_stock_quant_rel");
                        j.HasIndex(new[] { "StockQuantId", "StockInventoryWarningId" }, "stock_inventory_warning_stock_stock_quant_id_stock_inventor_idx");
                    });
        });

        modelBuilder.Entity<StockLocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_location_pkey");

            entity.ToTable("stock_location");

            entity.HasIndex(e => new { e.Barcode, e.TenantId }, "stock_location_barcode_company_uniq").IsUnique();

            entity.HasIndex(e => e.TenantId, "stock_location_company_id_index");

            entity.HasIndex(e => e.LocationId, "stock_location_location_id_index");

            entity.HasIndex(e => e.ParentPath, "stock_location_parent_path_index");

            entity.HasIndex(e => e.Usage, "stock_location_usage_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Barcode).HasColumnName("barcode");
            entity.Property(e => e.Comment).HasColumnName("comment");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CompleteName).HasColumnName("complete_name");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CyclicInventoryFrequency).HasColumnName("cyclic_inventory_frequency");
            entity.Property(e => e.LastInventoryDate).HasColumnName("last_inventory_date");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.NextInventoryDate).HasColumnName("next_inventory_date");
            entity.Property(e => e.ParentPath).HasColumnName("parent_path");
            entity.Property(e => e.Posx).HasColumnName("posx");
            entity.Property(e => e.Posy).HasColumnName("posy");
            entity.Property(e => e.Posz).HasColumnName("posz");
            entity.Property(e => e.RemovalStrategyId).HasColumnName("removal_strategy_id");
            entity.Property(e => e.ReplenishLocation).HasColumnName("replenish_location");
            entity.Property(e => e.ReturnLocation).HasColumnName("return_location");
            entity.Property(e => e.ScrapLocation).HasColumnName("scrap_location");
            entity.Property(e => e.StorageCategoryId).HasColumnName("storage_category_id");
            entity.Property(e => e.Usage).HasColumnName("usage");
            entity.Property(e => e.ValuationInAccountId).HasColumnName("valuation_in_account_id");
            entity.Property(e => e.ValuationOutAccountId).HasColumnName("valuation_out_account_id");
            entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_location_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_location_create_uid_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.InverseLocation)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_location_location_id_fkey");

            entity.HasOne(d => d.RemovalStrategy).WithMany(p => p.StockLocations)
                .HasForeignKey(d => d.RemovalStrategyId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_location_removal_strategy_id_fkey");

            entity.HasOne(d => d.StorageCategory).WithMany(p => p.StockLocations)
                .HasForeignKey(d => d.StorageCategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_location_storage_category_id_fkey");

            entity.HasOne(d => d.ValuationInAccount).WithMany(p => p.StockLocationValuationInAccounts)
                .HasForeignKey(d => d.ValuationInAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_location_valuation_in_account_id_fkey");

            entity.HasOne(d => d.ValuationOutAccount).WithMany(p => p.StockLocationValuationOutAccounts)
                .HasForeignKey(d => d.ValuationOutAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_location_valuation_out_account_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.StockLocations)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_location_warehouse_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_location_write_uid_fkey");
        });

        modelBuilder.Entity<StockLot>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_lot_pkey");

            entity.ToTable("stock_lot");

            entity.HasIndex(e => e.TenantId, "stock_lot_company_id_index");

            entity.HasIndex(e => e.Name, "stock_lot_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.ProductId, "stock_lot_product_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductUomId).HasColumnName("product_uom_id");
            entity.Property(e => e.Ref).HasColumnName("ref");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_lot_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_lot_create_uid_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.StockLots)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_lot_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockLots)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_lot_product_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.StockLots)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_lot_product_uom_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_lot_write_uid_fkey");
        });

        modelBuilder.Entity<StockMove>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_move_pkey");

            entity.ToTable("stock_move");

            entity.HasIndex(e => e.TenantId, "stock_move_company_id_index");

            entity.HasIndex(e => e.CreatedPurchaseLineId, "stock_move_created_purchase_line_id_index").HasFilter("(created_purchase_line_id IS NOT NULL)");

            entity.HasIndex(e => e.Date, "stock_move_date_index");

            entity.HasIndex(e => e.LocationDestId, "stock_move_location_dest_id_index");

            entity.HasIndex(e => e.LocationId, "stock_move_location_id_index");

            entity.HasIndex(e => e.OrderpointId, "stock_move_orderpoint_id_index");

            entity.HasIndex(e => e.OriginReturnedMoveId, "stock_move_origin_returned_move_id_index");

            entity.HasIndex(e => e.PickingId, "stock_move_picking_id_index");

            entity.HasIndex(e => e.ProductId, "stock_move_product_id_index");

            entity.HasIndex(e => new { e.ProductId, e.LocationId, e.LocationDestId, e.TenantId, e.State }, "stock_move_product_location_index");

            entity.HasIndex(e => e.ProductionId, "stock_move_production_id_index").HasFilter("(production_id IS NOT NULL)");

            entity.HasIndex(e => e.PurchaseLineId, "stock_move_purchase_line_id_index").HasFilter("(purchase_line_id IS NOT NULL)");

            entity.HasIndex(e => e.RawMaterialProductionId, "stock_move_raw_material_production_id_index").HasFilter("(raw_material_production_id IS NOT NULL)");

            entity.HasIndex(e => e.SaleLineId, "stock_move_sale_line_id_index").HasFilter("(sale_line_id IS NOT NULL)");

            entity.HasIndex(e => e.State, "stock_move_state_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Additional).HasColumnName("additional");
            entity.Property(e => e.AnalyticAccountLineId).HasColumnName("analytic_account_line_id");
            entity.Property(e => e.BomLineId).HasColumnName("bom_line_id");
            entity.Property(e => e.ByproductId).HasColumnName("byproduct_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.ConsumeUnbuildId).HasColumnName("consume_unbuild_id");
            entity.Property(e => e.CostShare).HasColumnName("cost_share");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CreatedProductionId).HasColumnName("created_production_id");
            entity.Property(e => e.CreatedPurchaseLineId).HasColumnName("created_purchase_line_id");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.DateDeadline)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_deadline");
            entity.Property(e => e.DelayAlertDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("delay_alert_date");
            entity.Property(e => e.DescriptionPicking).HasColumnName("description_picking");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.IsDone).HasColumnName("is_done");
            entity.Property(e => e.IsInventory).HasColumnName("is_inventory");
            entity.Property(e => e.LocationDestId).HasColumnName("location_dest_id");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.ManualConsumption).HasColumnName("manual_consumption");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.NextSerial).HasColumnName("next_serial");
            entity.Property(e => e.NextSerialCount).HasColumnName("next_serial_count");
            entity.Property(e => e.OperationId).HasColumnName("operation_id");
            entity.Property(e => e.OrderFinishedLotId).HasColumnName("order_finished_lot_id");
            entity.Property(e => e.OrderpointId).HasColumnName("orderpoint_id");
            entity.Property(e => e.Origin).HasColumnName("origin");
            entity.Property(e => e.OriginReturnedMoveId).HasColumnName("origin_returned_move_id");
            entity.Property(e => e.PackageLevelId).HasColumnName("package_level_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PickingId).HasColumnName("picking_id");
            entity.Property(e => e.PickingTypeId).HasColumnName("picking_type_id");
            entity.Property(e => e.PriceUnit).HasColumnName("price_unit");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.ProcureMethod).HasColumnName("procure_method");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductPackagingId).HasColumnName("product_packaging_id");
            entity.Property(e => e.ProductQty).HasColumnName("product_qty");
            entity.Property(e => e.ProductUom).HasColumnName("product_uom");
            entity.Property(e => e.ProductUomQty).HasColumnName("product_uom_qty");
            entity.Property(e => e.ProductionId).HasColumnName("production_id");
            entity.Property(e => e.PropagateCancel).HasColumnName("propagate_cancel");
            entity.Property(e => e.PurchaseLineId).HasColumnName("purchase_line_id");
            entity.Property(e => e.QuantityDone).HasColumnName("quantity_done");
            entity.Property(e => e.RawMaterialProductionId).HasColumnName("raw_material_production_id");
            entity.Property(e => e.Reference).HasColumnName("reference");
            entity.Property(e => e.RepairId).HasColumnName("repair_id");
            entity.Property(e => e.ReservationDate).HasColumnName("reservation_date");
            entity.Property(e => e.RestrictPartnerId).HasColumnName("restrict_partner_id");
            entity.Property(e => e.RuleId).HasColumnName("rule_id");
            entity.Property(e => e.SaleLineId).HasColumnName("sale_line_id");
            entity.Property(e => e.Scrapped).HasColumnName("scrapped");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.ToRefund).HasColumnName("to_refund");
            entity.Property(e => e.UnbuildId).HasColumnName("unbuild_id");
            entity.Property(e => e.UnitFactor).HasColumnName("unit_factor");
            entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");
            entity.Property(e => e.WorkorderId).HasColumnName("workorder_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AnalyticAccountLine).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.AnalyticAccountLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_analytic_account_line_id_fkey");

            entity.HasOne(d => d.BomLine).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.BomLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_bom_line_id_fkey");

            entity.HasOne(d => d.Byproduct).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.ByproductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_byproduct_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_company_id_fkey");

            entity.HasOne(d => d.ConsumeUnbuild).WithMany(p => p.StockMoveConsumeUnbuilds)
                .HasForeignKey(d => d.ConsumeUnbuildId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_consume_unbuild_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_create_uid_fkey");

            entity.HasOne(d => d.CreatedProduction).WithMany(p => p.StockMoveCreatedProductions)
                .HasForeignKey(d => d.CreatedProductionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_created_production_id_fkey");

            entity.HasOne(d => d.CreatedPurchaseLine).WithMany(p => p.StockMoveCreatedPurchaseLines)
                .HasForeignKey(d => d.CreatedPurchaseLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_created_purchase_line_id_fkey");

            entity.HasOne(d => d.Group).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_group_id_fkey");

            entity.HasOne(d => d.LocationDest).WithMany(p => p.StockMoveLocationDests)
                .HasForeignKey(d => d.LocationDestId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_location_dest_id_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.StockMoveLocations)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_location_id_fkey");

            entity.HasOne(d => d.Operation).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.OperationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_operation_id_fkey");

            entity.HasOne(d => d.OrderFinishedLot).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.OrderFinishedLotId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_order_finished_lot_id_fkey");

            entity.HasOne(d => d.Orderpoint).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.OrderpointId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_orderpoint_id_fkey");

            entity.HasOne(d => d.OriginReturnedMove).WithMany(p => p.InverseOriginReturnedMove)
                .HasForeignKey(d => d.OriginReturnedMoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_origin_returned_move_id_fkey");

            entity.HasOne(d => d.PackageLevel).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.PackageLevelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_package_level_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_partner_id_fkey");

            entity.HasOne(d => d.Picking).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.PickingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_picking_id_fkey");

            entity.HasOne(d => d.PickingType).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.PickingTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_picking_type_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_product_id_fkey");

            entity.HasOne(d => d.ProductPackaging).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.ProductPackagingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_product_packaging_id_fkey");

            entity.HasOne(d => d.ProductUomNavigation).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.ProductUom)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_product_uom_fkey");

            entity.HasOne(d => d.Production).WithMany(p => p.StockMoveProductions)
                .HasForeignKey(d => d.ProductionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_production_id_fkey");

            entity.HasOne(d => d.PurchaseLine).WithMany(p => p.StockMovePurchaseLines)
                .HasForeignKey(d => d.PurchaseLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_purchase_line_id_fkey");

            entity.HasOne(d => d.RawMaterialProduction).WithMany(p => p.StockMoveRawMaterialProductions)
                .HasForeignKey(d => d.RawMaterialProductionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_raw_material_production_id_fkey");

            entity.HasOne(d => d.Repair).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.RepairId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_repair_id_fkey");

            entity.HasOne(d => d.RestrictPartner).WithMany(p => p.StockMoveRestrictPartners)
                .HasForeignKey(d => d.RestrictPartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_restrict_partner_id_fkey");

            entity.HasOne(d => d.Rule).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.RuleId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_rule_id_fkey");

            entity.HasOne(d => d.SaleLine).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.SaleLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_sale_line_id_fkey");

            entity.HasOne(d => d.Unbuild).WithMany(p => p.StockMoveUnbuilds)
                .HasForeignKey(d => d.UnbuildId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_unbuild_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_warehouse_id_fkey");

            entity.HasOne(d => d.Workorder).WithMany(p => p.StockMoves)
                .HasForeignKey(d => d.WorkorderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_workorder_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_write_uid_fkey");

            //entity.HasMany(d => d.MoveDests).WithMany(p => p.MoveOrigs)
            entity.HasMany<StockMove>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockMoveMoveRel",
                    r => r.HasOne<StockMove>().WithMany()
                        .HasForeignKey("MoveDestId")
                        .HasConstraintName("stock_move_move_rel_move_dest_id_fkey"),
                    l => l.HasOne<StockMove>().WithMany()
                        .HasForeignKey("MoveOrigId")
                        .HasConstraintName("stock_move_move_rel_move_orig_id_fkey"),
                    j =>
                    {
                        j.HasKey("MoveOrigId", "MoveDestId").HasName("stock_move_move_rel_pkey");
                        j.ToTable("stock_move_move_rel");
                        j.HasIndex(new[] { "MoveDestId", "MoveOrigId" }, "stock_move_move_rel_move_dest_id_move_orig_id_idx");
                    });

            //entity.HasMany(d => d.MoveOrigs).WithMany(p => p.MoveDests)
            entity.HasMany<StockMove>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockMoveMoveRel",
                    r => r.HasOne<StockMove>().WithMany()
                        .HasForeignKey("MoveOrigId")
                        .HasConstraintName("stock_move_move_rel_move_orig_id_fkey"),
                    l => l.HasOne<StockMove>().WithMany()
                        .HasForeignKey("MoveDestId")
                        .HasConstraintName("stock_move_move_rel_move_dest_id_fkey"),
                    j =>
                    {
                        j.HasKey("MoveOrigId", "MoveDestId").HasName("stock_move_move_rel_pkey");
                        j.ToTable("stock_move_move_rel");
                        j.HasIndex(new[] { "MoveDestId", "MoveOrigId" }, "stock_move_move_rel_move_dest_id_move_orig_id_idx");
                    });

            //entity.HasMany(d => d.Routes).WithMany(p => p.Moves)
            entity.HasMany<StockRoute>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockRouteMove",
                    r => r.HasOne<StockRoute>().WithMany()
                        .HasForeignKey("RouteId")
                        .HasConstraintName("stock_route_move_route_id_fkey"),
                    l => l.HasOne<StockMove>().WithMany()
                        .HasForeignKey("MoveId")
                        .HasConstraintName("stock_route_move_move_id_fkey"),
                    j =>
                    {
                        j.HasKey("MoveId", "RouteId").HasName("stock_route_move_pkey");
                        j.ToTable("stock_route_move");
                        j.HasIndex(new[] { "RouteId", "MoveId" }, "stock_route_move_route_id_move_id_idx");
                    });
        });

        modelBuilder.Entity<StockMoveLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_move_line_pkey");

            entity.ToTable("stock_move_line");

            entity.HasIndex(e => e.TenantId, "stock_move_line_company_id_index");

            entity.HasIndex(e => new { e.Id, e.TenantId, e.ProductId, e.LotId, e.LocationId, e.OwnerId, e.PackageId }, "stock_move_line_free_reservation_index").HasFilter("(((state IS NULL) OR (state <> ALL (ARRAY[('cancel'::character varying)::text, ('done'::character varying)::text]))) AND (reserved_qty > (0)::numeric))");

            entity.HasIndex(e => e.MoveId, "stock_move_line_move_id_index");

            entity.HasIndex(e => e.PickingId, "stock_move_line_picking_id_index");

            entity.HasIndex(e => e.ProductId, "stock_move_line_product_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.DescriptionPicking).HasColumnName("description_picking");
            entity.Property(e => e.LocationDestId).HasColumnName("location_dest_id");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.LotId).HasColumnName("lot_id");
            entity.Property(e => e.LotName).HasColumnName("lot_name");
            entity.Property(e => e.MoveId).HasColumnName("move_id");
            entity.Property(e => e.OwnerId).HasColumnName("owner_id");
            entity.Property(e => e.PackageId).HasColumnName("package_id");
            entity.Property(e => e.PackageLevelId).HasColumnName("package_level_id");
            entity.Property(e => e.PickingId).HasColumnName("picking_id");
            entity.Property(e => e.ProductCategoryName).HasColumnName("product_category_name");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductUomId).HasColumnName("product_uom_id");
            entity.Property(e => e.ProductionId).HasColumnName("production_id");
            entity.Property(e => e.QtyDone).HasColumnName("qty_done");
            entity.Property(e => e.Reference).HasColumnName("reference");
            entity.Property(e => e.ReservedQty).HasColumnName("reserved_qty");
            entity.Property(e => e.ReservedUomQty).HasColumnName("reserved_uom_qty");
            entity.Property(e => e.ResultPackageId).HasColumnName("result_package_id");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.WorkorderId).HasColumnName("workorder_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_line_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_line_create_uid_fkey");

            entity.HasOne(d => d.LocationDest).WithMany(p => p.StockMoveLineLocationDests)
                .HasForeignKey(d => d.LocationDestId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_line_location_dest_id_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.StockMoveLineLocations)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_line_location_id_fkey");

            entity.HasOne(d => d.Lot).WithMany(p => p.StockMoveLines)
                .HasForeignKey(d => d.LotId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_line_lot_id_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.StockMoveLines)
                .HasForeignKey(d => d.MoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_line_move_id_fkey");

            entity.HasOne(d => d.Owner).WithMany(p => p.StockMoveLines)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_line_owner_id_fkey");

            entity.HasOne(d => d.Package).WithMany(p => p.StockMoveLinePackages)
                .HasForeignKey(d => d.PackageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_line_package_id_fkey");

            entity.HasOne(d => d.PackageLevel).WithMany(p => p.StockMoveLines)
                .HasForeignKey(d => d.PackageLevelId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_line_package_level_id_fkey");

            entity.HasOne(d => d.Picking).WithMany(p => p.StockMoveLines)
                .HasForeignKey(d => d.PickingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_line_picking_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockMoveLines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_move_line_product_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.StockMoveLines)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_line_product_uom_id_fkey");

            entity.HasOne(d => d.Production).WithMany(p => p.StockMoveLines)
                .HasForeignKey(d => d.ProductionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_line_production_id_fkey");

            entity.HasOne(d => d.ResultPackage).WithMany(p => p.StockMoveLineResultPackages)
                .HasForeignKey(d => d.ResultPackageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_move_line_result_package_id_fkey");

            entity.HasOne(d => d.Workorder).WithMany(p => p.StockMoveLines)
                .HasForeignKey(d => d.WorkorderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_line_workorder_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_move_line_write_uid_fkey");

            //entity.HasMany(d => d.ConsumeLines).WithMany(p => p.ProduceLines)
            entity.HasMany<StockMoveLine>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockMoveLineConsumeRel",
                    r => r.HasOne<StockMoveLine>().WithMany()
                        .HasForeignKey("ConsumeLineId")
                        .HasConstraintName("stock_move_line_consume_rel_consume_line_id_fkey"),
                    l => l.HasOne<StockMoveLine>().WithMany()
                        .HasForeignKey("ProduceLineId")
                        .HasConstraintName("stock_move_line_consume_rel_produce_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("ConsumeLineId", "ProduceLineId").HasName("stock_move_line_consume_rel_pkey");
                        j.ToTable("stock_move_line_consume_rel");
                        j.HasIndex(new[] { "ProduceLineId", "ConsumeLineId" }, "stock_move_line_consume_rel_produce_line_id_consume_line_id_idx");
                    });

            //entity.HasMany(d => d.ProduceLines).WithMany(p => p.ConsumeLines)
            entity.HasMany<StockMoveLine>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockMoveLineConsumeRel",
                    r => r.HasOne<StockMoveLine>().WithMany()
                        .HasForeignKey("ProduceLineId")
                        .HasConstraintName("stock_move_line_consume_rel_produce_line_id_fkey"),
                    l => l.HasOne<StockMoveLine>().WithMany()
                        .HasForeignKey("ConsumeLineId")
                        .HasConstraintName("stock_move_line_consume_rel_consume_line_id_fkey"),
                    j =>
                    {
                        j.HasKey("ConsumeLineId", "ProduceLineId").HasName("stock_move_line_consume_rel_pkey");
                        j.ToTable("stock_move_line_consume_rel");
                        j.HasIndex(new[] { "ProduceLineId", "ConsumeLineId" }, "stock_move_line_consume_rel_produce_line_id_consume_line_id_idx");
                    });
        });

        modelBuilder.Entity<StockOrderpointSnooze>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_orderpoint_snooze_pkey");

            entity.ToTable("stock_orderpoint_snooze");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.PredefinedDate).HasColumnName("predefined_date");
            entity.Property(e => e.SnoozedUntil).HasColumnName("snoozed_until");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_orderpoint_snooze_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_orderpoint_snooze_write_uid_fkey");

            //entity.HasMany(d => d.StockWarehouseOrderpoints).WithMany(p => p.StockOrderpointSnoozes)
            entity.HasMany<StockWarehouseOrderpoint>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockOrderpointSnoozeStockWarehouseOrderpointRel",
                    r => r.HasOne<StockWarehouseOrderpoint>().WithMany()
                        .HasForeignKey("StockWarehouseOrderpointId")
                        .HasConstraintName("stock_orderpoint_snooze_stock_stock_warehouse_orderpoint_i_fkey"),
                    l => l.HasOne<StockOrderpointSnooze>().WithMany()
                        .HasForeignKey("StockOrderpointSnoozeId")
                        .HasConstraintName("stock_orderpoint_snooze_stock_w_stock_orderpoint_snooze_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockOrderpointSnoozeId", "StockWarehouseOrderpointId").HasName("stock_orderpoint_snooze_stock_warehouse_orderpoint_rel_pkey");
                        j.ToTable("stock_orderpoint_snooze_stock_warehouse_orderpoint_rel");
                        j.HasIndex(new[] { "StockWarehouseOrderpointId", "StockOrderpointSnoozeId" }, "stock_orderpoint_snooze_stock_stock_warehouse_orderpoint_id_idx");
                    });
        });

        modelBuilder.Entity<StockPackageDestination>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_package_destination_pkey");

            entity.ToTable("stock_package_destination");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LocationDestId).HasColumnName("location_dest_id");
            entity.Property(e => e.PickingId).HasColumnName("picking_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_package_destination_create_uid_fkey");

            entity.HasOne(d => d.LocationDest).WithMany(p => p.StockPackageDestinations)
                .HasForeignKey(d => d.LocationDestId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_package_destination_location_dest_id_fkey");

            entity.HasOne(d => d.Picking).WithMany(p => p.StockPackageDestinations)
                .HasForeignKey(d => d.PickingId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_package_destination_picking_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_package_destination_write_uid_fkey");
        });

        modelBuilder.Entity<StockPackageLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_package_level_pkey");

            entity.ToTable("stock_package_level");

            entity.HasIndex(e => e.TenantId, "stock_package_level_company_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LocationDestId).HasColumnName("location_dest_id");
            entity.Property(e => e.PackageId).HasColumnName("package_id");
            entity.Property(e => e.PickingId).HasColumnName("picking_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_package_level_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_package_level_create_uid_fkey");

            entity.HasOne(d => d.LocationDest).WithMany(p => p.StockPackageLevels)
                .HasForeignKey(d => d.LocationDestId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_package_level_location_dest_id_fkey");

            entity.HasOne(d => d.Package).WithMany(p => p.StockPackageLevels)
                .HasForeignKey(d => d.PackageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_package_level_package_id_fkey");

            entity.HasOne(d => d.Picking).WithMany(p => p.StockPackageLevels)
                .HasForeignKey(d => d.PickingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_package_level_picking_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_package_level_write_uid_fkey");
        });

        modelBuilder.Entity<StockPackageType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_package_type_pkey");

            entity.ToTable("stock_package_type");

            entity.HasIndex(e => e.Barcode, "stock_package_type_barcode_uniq").IsUnique();

            entity.HasIndex(e => e.TenantId, "stock_package_type_company_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Barcode).HasColumnName("barcode");
            entity.Property(e => e.BaseWeight).HasColumnName("base_weight");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Height).HasColumnName("height");
            entity.Property(e => e.MaxWeight).HasColumnName("max_weight");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PackagingLength).HasColumnName("packaging_length");
            entity.Property(e => e.Sequence)
                //.ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.Width).HasColumnName("width");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_package_type_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_package_type_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_package_type_write_uid_fkey");
        });

        modelBuilder.Entity<StockPicking>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_picking_pkey");

            entity.ToTable("stock_picking");

            entity.HasIndex(e => e.BackorderId, "stock_picking_backorder_id_index").HasFilter("(backorder_id IS NOT NULL)");

            entity.HasIndex(e => e.TenantId, "stock_picking_company_id_index");

            entity.HasIndex(e => e.Name, "stock_picking_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => new { e.Name, e.TenantId }, "stock_picking_name_uniq").IsUnique();

            entity.HasIndex(e => e.Origin, "stock_picking_origin_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.PickingTypeId, "stock_picking_picking_type_id_index");

            entity.HasIndex(e => e.SaleId, "stock_picking_sale_id_index").HasFilter("(sale_id IS NOT NULL)");

            entity.HasIndex(e => e.ScheduledDate, "stock_picking_scheduled_date_index");

            entity.HasIndex(e => e.State, "stock_picking_state_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.BackorderId).HasColumnName("backorder_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.DateDeadline)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_deadline");
            entity.Property(e => e.DateDone)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_done");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.HasDeadlineIssue).HasColumnName("has_deadline_issue");
            entity.Property(e => e.ImmediateTransfer).HasColumnName("immediate_transfer");
            entity.Property(e => e.IsLocked).HasColumnName("is_locked");
            entity.Property(e => e.LocationDestId).HasColumnName("location_dest_id");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.MoveType).HasColumnName("move_type");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.Origin).HasColumnName("origin");
            entity.Property(e => e.OwnerId).HasColumnName("owner_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PickingTypeId).HasColumnName("picking_type_id");
            entity.Property(e => e.PosOrderId).HasColumnName("pos_order_id");
            entity.Property(e => e.PosSessionId).HasColumnName("pos_session_id");
            entity.Property(e => e.Printed).HasColumnName("printed");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.SaleId).HasColumnName("sale_id");
            entity.Property(e => e.ScheduledDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("scheduled_date");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.WebsiteId).HasColumnName("website_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Backorder).WithMany(p => p.InverseBackorder)
                .HasForeignKey(d => d.BackorderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_backorder_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_create_uid_fkey");

            entity.HasOne(d => d.Group).WithMany(p => p.StockPickings)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_group_id_fkey");

            entity.HasOne(d => d.LocationDest).WithMany(p => p.StockPickingLocationDests)
                .HasForeignKey(d => d.LocationDestId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_picking_location_dest_id_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.StockPickingLocations)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_picking_location_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.StockPickings)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Owner).WithMany(p => p.StockPickingOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_owner_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_partner_id_fkey");

            entity.HasOne(d => d.PickingType).WithMany(p => p.StockPickings)
                .HasForeignKey(d => d.PickingTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_picking_picking_type_id_fkey");

            entity.HasOne(d => d.PosOrder).WithMany(p => p.StockPickings)
                .HasForeignKey(d => d.PosOrderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_pos_order_id_fkey");

            entity.HasOne(d => d.PosSession).WithMany(p => p.StockPickings)
                .HasForeignKey(d => d.PosSessionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_pos_session_id_fkey");

            entity.HasOne(d => d.Sale).WithMany(p => p.StockPickings)
                .HasForeignKey(d => d.SaleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_sale_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_user_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.StockPickings)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_website_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_write_uid_fkey");
        });

        modelBuilder.Entity<StockPickingType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_picking_type_pkey");

            entity.ToTable("stock_picking_type");

            entity.HasIndex(e => e.TenantId, "stock_picking_type_company_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.AutoShowReceptionReport).HasColumnName("auto_show_reception_report");
            entity.Property(e => e.Barcode).HasColumnName("barcode");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreateBackorder).HasColumnName("create_backorder");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DefaultLocationDestId).HasColumnName("default_location_dest_id");
            entity.Property(e => e.DefaultLocationSrcId).HasColumnName("default_location_src_id");
            entity.Property(e => e.IsRepairable).HasColumnName("is_repairable");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PrintLabel).HasColumnName("print_label");
            entity.Property(e => e.ReservationDaysBefore).HasColumnName("reservation_days_before");
            entity.Property(e => e.ReservationDaysBeforePriority).HasColumnName("reservation_days_before_priority");
            entity.Property(e => e.ReservationMethod).HasColumnName("reservation_method");
            entity.Property(e => e.ReturnPickingTypeId).HasColumnName("return_picking_type_id");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.SequenceCode).HasColumnName("sequence_code");
            entity.Property(e => e.SequenceId).HasColumnName("sequence_id");
            entity.Property(e => e.ShowEntirePacks).HasColumnName("show_entire_packs");
            entity.Property(e => e.ShowOperations).HasColumnName("show_operations");
            entity.Property(e => e.ShowReserved).HasColumnName("show_reserved");
            entity.Property(e => e.UseAutoConsumeComponentsLots).HasColumnName("use_auto_consume_components_lots");
            entity.Property(e => e.UseCreateComponentsLots).HasColumnName("use_create_components_lots");
            entity.Property(e => e.UseCreateLots).HasColumnName("use_create_lots");
            entity.Property(e => e.UseExistingLots).HasColumnName("use_existing_lots");
            entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_picking_type_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_type_create_uid_fkey");

            entity.HasOne(d => d.DefaultLocationDest).WithMany(p => p.StockPickingTypeDefaultLocationDests)
                .HasForeignKey(d => d.DefaultLocationDestId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_type_default_location_dest_id_fkey");

            entity.HasOne(d => d.DefaultLocationSrc).WithMany(p => p.StockPickingTypeDefaultLocationSrcs)
                .HasForeignKey(d => d.DefaultLocationSrcId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_type_default_location_src_id_fkey");

            entity.HasOne(d => d.ReturnPickingType).WithMany(p => p.InverseReturnPickingType)
                .HasForeignKey(d => d.ReturnPickingTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_type_return_picking_type_id_fkey");

            entity.HasOne(d => d.SequenceNavigation).WithMany(p => p.StockPickingTypes)
                .HasForeignKey(d => d.SequenceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_type_sequence_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.StockPickingTypes)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_picking_type_warehouse_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_picking_type_write_uid_fkey");
        });

        modelBuilder.Entity<StockPutawayRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_putaway_rule_pkey");

            entity.ToTable("stock_putaway_rule");

            entity.HasIndex(e => e.TenantId, "stock_putaway_rule_company_id_index");

            entity.HasIndex(e => e.LocationInId, "stock_putaway_rule_location_in_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LocationInId).HasColumnName("location_in_id");
            entity.Property(e => e.LocationOutId).HasColumnName("location_out_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.StorageCategoryId).HasColumnName("storage_category_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Category).WithMany(p => p.StockPutawayRules)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_putaway_rule_category_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_putaway_rule_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_putaway_rule_create_uid_fkey");

            entity.HasOne(d => d.LocationIn).WithMany(p => p.StockPutawayRuleLocationIns)
                .HasForeignKey(d => d.LocationInId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_putaway_rule_location_in_id_fkey");

            entity.HasOne(d => d.LocationOut).WithMany(p => p.StockPutawayRuleLocationOuts)
                .HasForeignKey(d => d.LocationOutId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_putaway_rule_location_out_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockPutawayRules)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_putaway_rule_product_id_fkey");

            entity.HasOne(d => d.StorageCategory).WithMany(p => p.StockPutawayRules)
                .HasForeignKey(d => d.StorageCategoryId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_putaway_rule_storage_category_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_putaway_rule_write_uid_fkey");

            //entity.HasMany(d => d.StockPackageTypes).WithMany(p => p.StockPutawayRules)
            entity.HasMany<StockPackageType>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockPackageTypeStockPutawayRuleRel",
                    r => r.HasOne<StockPackageType>().WithMany()
                        .HasForeignKey("StockPackageTypeId")
                        .HasConstraintName("stock_package_type_stock_putaway_rul_stock_package_type_id_fkey"),
                    l => l.HasOne<StockPutawayRule>().WithMany()
                        .HasForeignKey("StockPutawayRuleId")
                        .HasConstraintName("stock_package_type_stock_putaway_rul_stock_putaway_rule_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockPutawayRuleId", "StockPackageTypeId").HasName("stock_package_type_stock_putaway_rule_rel_pkey");
                        j.ToTable("stock_package_type_stock_putaway_rule_rel");
                        j.HasIndex(new[] { "StockPackageTypeId", "StockPutawayRuleId" }, "stock_package_type_stock_puta_stock_package_type_id_stock_p_idx");
                    });
        });

        modelBuilder.Entity<StockQuant>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_quant_pkey");

            entity.ToTable("stock_quant");

            entity.HasIndex(e => e.LocationId, "stock_quant_location_id_index");

            entity.HasIndex(e => e.LotId, "stock_quant_lot_id_index");

            entity.HasIndex(e => e.PackageId, "stock_quant_package_id_index");

            entity.HasIndex(e => e.ProductId, "stock_quant_product_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountingDate).HasColumnName("accounting_date");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.InDate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("in_date");
            entity.Property(e => e.InventoryDate).HasColumnName("inventory_date");
            entity.Property(e => e.InventoryDiffQuantity).HasColumnName("inventory_diff_quantity");
            entity.Property(e => e.InventoryQuantity).HasColumnName("inventory_quantity");
            entity.Property(e => e.InventoryQuantitySet).HasColumnName("inventory_quantity_set");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.LotId).HasColumnName("lot_id");
            entity.Property(e => e.OwnerId).HasColumnName("owner_id");
            entity.Property(e => e.PackageId).HasColumnName("package_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.ReservedQuantity).HasColumnName("reserved_quantity");
            entity.Property(e => e.StorageCategoryId).HasColumnName("storage_category_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quant_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quant_create_uid_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.StockQuants)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_quant_location_id_fkey");

            entity.HasOne(d => d.Lot).WithMany(p => p.StockQuants)
                .HasForeignKey(d => d.LotId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_quant_lot_id_fkey");

            entity.HasOne(d => d.Owner).WithMany(p => p.StockQuants)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quant_owner_id_fkey");

            entity.HasOne(d => d.Package).WithMany(p => p.StockQuants)
                .HasForeignKey(d => d.PackageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_quant_package_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockQuants)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_quant_product_id_fkey");

            entity.HasOne(d => d.StorageCategory).WithMany(p => p.StockQuants)
                .HasForeignKey(d => d.StorageCategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quant_storage_category_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quant_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quant_write_uid_fkey");
        });

        modelBuilder.Entity<StockQuantPackage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_quant_package_pkey");

            entity.ToTable("stock_quant_package");

            entity.HasIndex(e => e.TenantId, "stock_quant_package_company_id_index");

            entity.HasIndex(e => e.LocationId, "stock_quant_package_location_id_index");

            entity.HasIndex(e => e.Name, "stock_quant_package_name_index")
                .HasMethod("gin")
                .HasOperators(new[] { "gin_trgm_ops" });

            entity.HasIndex(e => e.PackageTypeId, "stock_quant_package_package_type_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PackDate).HasColumnName("pack_date");
            entity.Property(e => e.PackageTypeId).HasColumnName("package_type_id");
            entity.Property(e => e.PackageUse).HasColumnName("package_use");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quant_package_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quant_package_create_uid_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.StockQuantPackages)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quant_package_location_id_fkey");

            entity.HasOne(d => d.PackageType).WithMany(p => p.StockQuantPackages)
                .HasForeignKey(d => d.PackageTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quant_package_package_type_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quant_package_write_uid_fkey");
        });

        modelBuilder.Entity<StockQuantityHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_quantity_history_pkey");

            entity.ToTable("stock_quantity_history");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.InventoryDatetime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("inventory_datetime");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quantity_history_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_quantity_history_write_uid_fkey");
        });

        modelBuilder.Entity<StockReplenishmentInfo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_replenishment_info_pkey");

            entity.ToTable("stock_replenishment_info");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.OrderpointId).HasColumnName("orderpoint_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_replenishment_info_create_uid_fkey");

            entity.HasOne(d => d.Orderpoint).WithMany(p => p.StockReplenishmentInfos)
                .HasForeignKey(d => d.OrderpointId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_replenishment_info_orderpoint_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_replenishment_info_write_uid_fkey");

            //entity.HasMany(d => d.ProductSupplierinfos).WithMany(p => p.StockReplenishmentInfos)
            entity.HasMany<ProductSupplierinfo>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProductSupplierinfoStockReplenishmentInfoRel",
                    r => r.HasOne<ProductSupplierinfo>().WithMany()
                        .HasForeignKey("ProductSupplierinfoId")
                        .HasConstraintName("product_supplierinfo_stock_repleni_product_supplierinfo_id_fkey"),
                    l => l.HasOne<StockReplenishmentInfo>().WithMany()
                        .HasForeignKey("StockReplenishmentInfoId")
                        .HasConstraintName("product_supplierinfo_stock_rep_stock_replenishment_info_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockReplenishmentInfoId", "ProductSupplierinfoId").HasName("product_supplierinfo_stock_replenishment_info_rel_pkey");
                        j.ToTable("product_supplierinfo_stock_replenishment_info_rel");
                        j.HasIndex(new[] { "ProductSupplierinfoId", "StockReplenishmentInfoId" }, "product_supplierinfo_stock_re_product_supplierinfo_id_stock_idx");
                    });
        });

        modelBuilder.Entity<StockReplenishmentOption>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_replenishment_option_pkey");

            entity.ToTable("stock_replenishment_option");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ReplenishmentInfoId).HasColumnName("replenishment_info_id");
            entity.Property(e => e.RouteId).HasColumnName("route_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_replenishment_option_create_uid_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockReplenishmentOptions)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_replenishment_option_product_id_fkey");

            entity.HasOne(d => d.ReplenishmentInfo).WithMany(p => p.StockReplenishmentOptions)
                .HasForeignKey(d => d.ReplenishmentInfoId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_replenishment_option_replenishment_info_id_fkey");

            entity.HasOne(d => d.Route).WithMany(p => p.StockReplenishmentOptions)
                .HasForeignKey(d => d.RouteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_replenishment_option_route_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_replenishment_option_write_uid_fkey");
        });

        modelBuilder.Entity<StockRequestCount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_request_count_pkey");

            entity.ToTable("stock_request_count");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountingDate).HasColumnName("accounting_date");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.InventoryDate).HasColumnName("inventory_date");
            entity.Property(e => e.SetCount).HasColumnName("set_count");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_request_count_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_request_count_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_request_count_write_uid_fkey");

            //entity.HasMany(d => d.StockQuants).WithMany(p => p.StockRequestCounts)
            entity.HasMany<StockQuant>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockQuantStockRequestCountRel",
                    r => r.HasOne<StockQuant>().WithMany()
                        .HasForeignKey("StockQuantId")
                        .HasConstraintName("stock_quant_stock_request_count_rel_stock_quant_id_fkey"),
                    l => l.HasOne<StockRequestCount>().WithMany()
                        .HasForeignKey("StockRequestCountId")
                        .HasConstraintName("stock_quant_stock_request_count_rel_stock_request_count_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockRequestCountId", "StockQuantId").HasName("stock_quant_stock_request_count_rel_pkey");
                        j.ToTable("stock_quant_stock_request_count_rel");
                        j.HasIndex(new[] { "StockQuantId", "StockRequestCountId" }, "stock_quant_stock_request_cou_stock_quant_id_stock_request__idx");
                    });
        });

        modelBuilder.Entity<StockReturnPicking>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_return_picking_pkey");

            entity.ToTable("stock_return_picking");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.MoveDestExists).HasColumnName("move_dest_exists");
            entity.Property(e => e.OriginalLocationId).HasColumnName("original_location_id");
            entity.Property(e => e.ParentLocationId).HasColumnName("parent_location_id");
            entity.Property(e => e.PickingId).HasColumnName("picking_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_return_picking_create_uid_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.StockReturnPickingLocations)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_return_picking_location_id_fkey");

            entity.HasOne(d => d.OriginalLocation).WithMany(p => p.StockReturnPickingOriginalLocations)
                .HasForeignKey(d => d.OriginalLocationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_return_picking_original_location_id_fkey");

            entity.HasOne(d => d.ParentLocation).WithMany(p => p.StockReturnPickingParentLocations)
                .HasForeignKey(d => d.ParentLocationId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_return_picking_parent_location_id_fkey");

            entity.HasOne(d => d.Picking).WithMany(p => p.StockReturnPickings)
                .HasForeignKey(d => d.PickingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_return_picking_picking_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_return_picking_write_uid_fkey");
        });

        modelBuilder.Entity<StockReturnPickingLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_return_picking_line_pkey");

            entity.ToTable("stock_return_picking_line");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.MoveId).HasColumnName("move_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.ToRefund).HasColumnName("to_refund");
            entity.Property(e => e.WizardId).HasColumnName("wizard_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_return_picking_line_create_uid_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.StockReturnPickingLines)
                .HasForeignKey(d => d.MoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_return_picking_line_move_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockReturnPickingLines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_return_picking_line_product_id_fkey");

            entity.HasOne(d => d.Wizard).WithMany(p => p.StockReturnPickingLines)
                .HasForeignKey(d => d.WizardId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_return_picking_line_wizard_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_return_picking_line_write_uid_fkey");
        });

        modelBuilder.Entity<StockRoute>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_route_pkey");

            entity.ToTable("stock_route");

            entity.HasIndex(e => e.TenantId, "stock_route_company_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PackagingSelectable).HasColumnName("packaging_selectable");
            entity.Property(e => e.ProductCategSelectable).HasColumnName("product_categ_selectable");
            entity.Property(e => e.ProductSelectable).HasColumnName("product_selectable");
            entity.Property(e => e.SaleSelectable).HasColumnName("sale_selectable");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.SuppliedWhId).HasColumnName("supplied_wh_id");
            entity.Property(e => e.SupplierWhId).HasColumnName("supplier_wh_id");
            entity.Property(e => e.WarehouseSelectable).HasColumnName("warehouse_selectable");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_route_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_route_create_uid_fkey");

            entity.HasOne(d => d.SuppliedWh).WithMany(p => p.StockRouteSuppliedWhs)
                .HasForeignKey(d => d.SuppliedWhId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_route_supplied_wh_id_fkey");

            entity.HasOne(d => d.SupplierWh).WithMany(p => p.StockRouteSupplierWhs)
                .HasForeignKey(d => d.SupplierWhId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_route_supplier_wh_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_route_write_uid_fkey");

            //entity.HasMany(d => d.Categs).WithMany(p => p.Routes)
            entity.HasMany<ProductCategory>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockRouteCateg",
                    r => r.HasOne<ProductCategory>().WithMany()
                        .HasForeignKey("CategId")
                        .HasConstraintName("stock_route_categ_categ_id_fkey"),
                    l => l.HasOne<StockRoute>().WithMany()
                        .HasForeignKey("RouteId")
                        .HasConstraintName("stock_route_categ_route_id_fkey"),
                    j =>
                    {
                        j.HasKey("RouteId", "CategId").HasName("stock_route_categ_pkey");
                        j.ToTable("stock_route_categ");
                        j.HasIndex(new[] { "CategId", "RouteId" }, "stock_route_categ_categ_id_route_id_idx");
                    });

            //entity.HasMany(d => d.Packagings).WithMany(p => p.Routes)
            entity.HasMany<ProductPackaging>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockRoutePackaging",
                    r => r.HasOne<ProductPackaging>().WithMany()
                        .HasForeignKey("PackagingId")
                        .HasConstraintName("stock_route_packaging_packaging_id_fkey"),
                    l => l.HasOne<StockRoute>().WithMany()
                        .HasForeignKey("RouteId")
                        .HasConstraintName("stock_route_packaging_route_id_fkey"),
                    j =>
                    {
                        j.HasKey("RouteId", "PackagingId").HasName("stock_route_packaging_pkey");
                        j.ToTable("stock_route_packaging");
                        j.HasIndex(new[] { "PackagingId", "RouteId" }, "stock_route_packaging_packaging_id_route_id_idx");
                    });

            //entity.HasMany(d => d.Products).WithMany(p => p.Routes)
            entity.HasMany<ProductTemplate>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockRouteProduct",
                    r => r.HasOne<ProductTemplate>().WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("stock_route_product_product_id_fkey"),
                    l => l.HasOne<StockRoute>().WithMany()
                        .HasForeignKey("RouteId")
                        .HasConstraintName("stock_route_product_route_id_fkey"),
                    j =>
                    {
                        j.HasKey("RouteId", "ProductId").HasName("stock_route_product_pkey");
                        j.ToTable("stock_route_product");
                        j.HasIndex(new[] { "ProductId", "RouteId" }, "stock_route_product_product_id_route_id_idx");
                    });

            //entity.HasMany(d => d.Warehouses).WithMany(p => p.Routes)
            entity.HasMany<StockWarehouse>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockRouteWarehouse",
                    r => r.HasOne<StockWarehouse>().WithMany()
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("stock_route_warehouse_warehouse_id_fkey"),
                    l => l.HasOne<StockRoute>().WithMany()
                        .HasForeignKey("RouteId")
                        .HasConstraintName("stock_route_warehouse_route_id_fkey"),
                    j =>
                    {
                        j.HasKey("RouteId", "WarehouseId").HasName("stock_route_warehouse_pkey");
                        j.ToTable("stock_route_warehouse");
                        j.HasIndex(new[] { "WarehouseId", "RouteId" }, "stock_route_warehouse_warehouse_id_route_id_idx");
                    });
        });

        modelBuilder.Entity<StockRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_rule_pkey");

            entity.ToTable("stock_rule");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Action).HasColumnName("action");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Auto).HasColumnName("auto");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Delay).HasColumnName("delay");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.GroupPropagationOption).HasColumnName("group_propagation_option");
            entity.Property(e => e.LocationDestId).HasColumnName("location_dest_id");
            entity.Property(e => e.LocationSrcId).HasColumnName("location_src_id");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PartnerAddressId).HasColumnName("partner_address_id");
            entity.Property(e => e.PickingTypeId).HasColumnName("picking_type_id");
            entity.Property(e => e.ProcureMethod).HasColumnName("procure_method");
            entity.Property(e => e.PropagateCancel).HasColumnName("propagate_cancel");
            entity.Property(e => e.PropagateCarrier).HasColumnName("propagate_carrier");
            entity.Property(e => e.PropagateWarehouseId).HasColumnName("propagate_warehouse_id");
            entity.Property(e => e.RouteId).HasColumnName("route_id");
            entity.Property(e => e.RouteSequence).HasColumnName("route_sequence");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_rule_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_rule_create_uid_fkey");

            entity.HasOne(d => d.Group).WithMany(p => p.StockRules)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_rule_group_id_fkey");

            entity.HasOne(d => d.LocationDest).WithMany(p => p.StockRuleLocationDests)
                .HasForeignKey(d => d.LocationDestId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_rule_location_dest_id_fkey");

            entity.HasOne(d => d.LocationSrc).WithMany(p => p.StockRuleLocationSrcs)
                .HasForeignKey(d => d.LocationSrcId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_rule_location_src_id_fkey");

            entity.HasOne(d => d.PartnerAddress).WithMany(p => p.StockRules)
                .HasForeignKey(d => d.PartnerAddressId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_rule_partner_address_id_fkey");

            entity.HasOne(d => d.PickingType).WithMany(p => p.StockRules)
                .HasForeignKey(d => d.PickingTypeId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_rule_picking_type_id_fkey");

            entity.HasOne(d => d.PropagateWarehouse).WithMany(p => p.StockRulePropagateWarehouses)
                .HasForeignKey(d => d.PropagateWarehouseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_rule_propagate_warehouse_id_fkey");

            entity.HasOne(d => d.Route).WithMany(p => p.StockRules)
                .HasForeignKey(d => d.RouteId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_rule_route_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.StockRuleWarehouses)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_rule_warehouse_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_rule_write_uid_fkey");
        });

        modelBuilder.Entity<StockRulesReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_rules_report_pkey");

            entity.ToTable("stock_rules_report");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ProductHasVariants).HasColumnName("product_has_variants");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductTmplId).HasColumnName("product_tmpl_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_rules_report_create_uid_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockRulesReports)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_rules_report_product_id_fkey");

            entity.HasOne(d => d.ProductTmpl).WithMany(p => p.StockRulesReports)
                .HasForeignKey(d => d.ProductTmplId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_rules_report_product_tmpl_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_rules_report_write_uid_fkey");

            //entity.HasMany(d => d.StockRoutes).WithMany(p => p.StockRulesReports)
            entity.HasMany<StockRoute>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockRouteStockRulesReportRel",
                    r => r.HasOne<StockRoute>().WithMany()
                        .HasForeignKey("StockRouteId")
                        .HasConstraintName("stock_route_stock_rules_report_rel_stock_route_id_fkey"),
                    l => l.HasOne<StockRulesReport>().WithMany()
                        .HasForeignKey("StockRulesReportId")
                        .HasConstraintName("stock_route_stock_rules_report_rel_stock_rules_report_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockRulesReportId", "StockRouteId").HasName("stock_route_stock_rules_report_rel_pkey");
                        j.ToTable("stock_route_stock_rules_report_rel");
                        j.HasIndex(new[] { "StockRouteId", "StockRulesReportId" }, "stock_route_stock_rules_repor_stock_route_id_stock_rules_re_idx");
                    });

            //entity.HasMany(d => d.StockWarehouses).WithMany(p => p.StockRulesReports)
            entity.HasMany<StockWarehouse>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockRulesReportStockWarehouseRel",
                    r => r.HasOne<StockWarehouse>().WithMany()
                        .HasForeignKey("StockWarehouseId")
                        .HasConstraintName("stock_rules_report_stock_warehouse_rel_stock_warehouse_id_fkey"),
                    l => l.HasOne<StockRulesReport>().WithMany()
                        .HasForeignKey("StockRulesReportId")
                        .HasConstraintName("stock_rules_report_stock_warehouse_r_stock_rules_report_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockRulesReportId", "StockWarehouseId").HasName("stock_rules_report_stock_warehouse_rel_pkey");
                        j.ToTable("stock_rules_report_stock_warehouse_rel");
                        j.HasIndex(new[] { "StockWarehouseId", "StockRulesReportId" }, "stock_rules_report_stock_ware_stock_warehouse_id_stock_rule_idx");
                    });
        });

        modelBuilder.Entity<StockSchedulerCompute>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_scheduler_compute_pkey");

            entity.ToTable("stock_scheduler_compute");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scheduler_compute_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scheduler_compute_write_uid_fkey");
        });

        modelBuilder.Entity<StockScrap>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_scrap_pkey");

            entity.ToTable("stock_scrap");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DateDone)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_done");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.LotId).HasColumnName("lot_id");
            entity.Property(e => e.MessageMainAttachmentId).HasColumnName("message_main_attachment_id");
            entity.Property(e => e.MoveId).HasColumnName("move_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Origin).HasColumnName("origin");
            entity.Property(e => e.OwnerId).HasColumnName("owner_id");
            entity.Property(e => e.PackageId).HasColumnName("package_id");
            entity.Property(e => e.PickingId).HasColumnName("picking_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductUomId).HasColumnName("product_uom_id");
            entity.Property(e => e.ProductionId).HasColumnName("production_id");
            entity.Property(e => e.ScrapLocationId).HasColumnName("scrap_location_id");
            entity.Property(e => e.ScrapQty).HasColumnName("scrap_qty");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.WorkorderId).HasColumnName("workorder_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_scrap_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scrap_create_uid_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.StockScrapLocations)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_scrap_location_id_fkey");

            entity.HasOne(d => d.Lot).WithMany(p => p.StockScraps)
                .HasForeignKey(d => d.LotId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scrap_lot_id_fkey");

            entity.HasOne(d => d.MessageMainAttachment).WithMany(p => p.StockScraps)
                .HasForeignKey(d => d.MessageMainAttachmentId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scrap_message_main_attachment_id_fkey");

            entity.HasOne(d => d.Move).WithMany(p => p.StockScraps)
                .HasForeignKey(d => d.MoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scrap_move_id_fkey");

            entity.HasOne(d => d.Owner).WithMany(p => p.StockScraps)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scrap_owner_id_fkey");

            entity.HasOne(d => d.Package).WithMany(p => p.StockScraps)
                .HasForeignKey(d => d.PackageId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scrap_package_id_fkey");

            entity.HasOne(d => d.Picking).WithMany(p => p.StockScraps)
                .HasForeignKey(d => d.PickingId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scrap_picking_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockScraps)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_scrap_product_id_fkey");

            entity.HasOne(d => d.ProductUom).WithMany(p => p.StockScraps)
                .HasForeignKey(d => d.ProductUomId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_scrap_product_uom_id_fkey");

            entity.HasOne(d => d.Production).WithMany(p => p.StockScraps)
                .HasForeignKey(d => d.ProductionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scrap_production_id_fkey");

            entity.HasOne(d => d.ScrapLocation).WithMany(p => p.StockScrapScrapLocations)
                .HasForeignKey(d => d.ScrapLocationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_scrap_scrap_location_id_fkey");

            entity.HasOne(d => d.Workorder).WithMany(p => p.StockScraps)
                .HasForeignKey(d => d.WorkorderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scrap_workorder_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_scrap_write_uid_fkey");
        });

        modelBuilder.Entity<StockStorageCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_storage_category_pkey");

            entity.ToTable("stock_storage_category");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AllowNewProduct).HasColumnName("allow_new_product");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.MaxWeight).HasColumnName("max_weight");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_storage_category_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_storage_category_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_storage_category_write_uid_fkey");
        });

        modelBuilder.Entity<StockStorageCategoryCapacity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_storage_category_capacity_pkey");

            entity.ToTable("stock_storage_category_capacity");

            entity.HasIndex(e => e.StorageCategoryId, "stock_storage_category_capacity_storage_category_id_index");

            entity.HasIndex(e => new { e.PackageTypeId, e.StorageCategoryId }, "stock_storage_category_capacity_unique_package_type").IsUnique();

            entity.HasIndex(e => new { e.ProductId, e.StorageCategoryId }, "stock_storage_category_capacity_unique_product").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.PackageTypeId).HasColumnName("package_type_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.StorageCategoryId).HasColumnName("storage_category_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_storage_category_capacity_create_uid_fkey");

            entity.HasOne(d => d.PackageType).WithMany(p => p.StockStorageCategoryCapacities)
                .HasForeignKey(d => d.PackageTypeId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_storage_category_capacity_package_type_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockStorageCategoryCapacities)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_storage_category_capacity_product_id_fkey");

            entity.HasOne(d => d.StorageCategory).WithMany(p => p.StockStorageCategoryCapacities)
                .HasForeignKey(d => d.StorageCategoryId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_storage_category_capacity_storage_category_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_storage_category_capacity_write_uid_fkey");
        });

        modelBuilder.Entity<StockTraceabilityReport>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_traceability_report_pkey");

            entity.ToTable("stock_traceability_report");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_traceability_report_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_traceability_report_write_uid_fkey");
        });

        modelBuilder.Entity<StockTrackConfirmation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_track_confirmation_pkey");

            entity.ToTable("stock_track_confirmation");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_track_confirmation_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_track_confirmation_write_uid_fkey");

            //entity.HasMany(d => d.ProductProducts).WithMany(p => p.StockTrackConfirmations)
            entity.HasMany<ProductProduct>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "ProductProductStockTrackConfirmationRel",
                    r => r.HasOne<ProductProduct>().WithMany()
                        .HasForeignKey("ProductProductId")
                        .HasConstraintName("product_product_stock_track_confirmatio_product_product_id_fkey"),
                    l => l.HasOne<StockTrackConfirmation>().WithMany()
                        .HasForeignKey("StockTrackConfirmationId")
                        .HasConstraintName("product_product_stock_track_co_stock_track_confirmation_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockTrackConfirmationId", "ProductProductId").HasName("product_product_stock_track_confirmation_rel_pkey");
                        j.ToTable("product_product_stock_track_confirmation_rel");
                        j.HasIndex(new[] { "ProductProductId", "StockTrackConfirmationId" }, "product_product_stock_track_c_product_product_id_stock_trac_idx");
                    });

            //entity.HasMany(d => d.StockQuants).WithMany(p => p.StockTrackConfirmations)
            entity.HasMany<StockQuant>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockQuantStockTrackConfirmationRel",
                    r => r.HasOne<StockQuant>().WithMany()
                        .HasForeignKey("StockQuantId")
                        .HasConstraintName("stock_quant_stock_track_confirmation_rel_stock_quant_id_fkey"),
                    l => l.HasOne<StockTrackConfirmation>().WithMany()
                        .HasForeignKey("StockTrackConfirmationId")
                        .HasConstraintName("stock_quant_stock_track_confir_stock_track_confirmation_id_fkey"),
                    j =>
                    {
                        j.HasKey("StockTrackConfirmationId", "StockQuantId").HasName("stock_quant_stock_track_confirmation_rel_pkey");
                        j.ToTable("stock_quant_stock_track_confirmation_rel");
                        j.HasIndex(new[] { "StockQuantId", "StockTrackConfirmationId" }, "stock_quant_stock_track_confi_stock_quant_id_stock_track_co_idx");
                    });
        });

        modelBuilder.Entity<StockTrackLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_track_line_pkey");

            entity.ToTable("stock_track_line");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.WizardId).HasColumnName("wizard_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_track_line_create_uid_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockTrackLines)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_track_line_product_id_fkey");

            entity.HasOne(d => d.Wizard).WithMany(p => p.StockTrackLines)
                .HasForeignKey(d => d.WizardId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_track_line_wizard_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_track_line_write_uid_fkey");
        });

        modelBuilder.Entity<StockValuationLayer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_valuation_layer_pkey");

            entity.ToTable("stock_valuation_layer");

            entity.HasIndex(e => e.AccountMoveLineId, "stock_valuation_layer_account_move_line_id_index");

            entity.HasIndex(e => new { e.ProductId, e.RemainingQty, e.StockMoveId, e.TenantId, e.CreationTime }, "stock_valuation_layer_index");

            entity.HasIndex(e => e.StockMoveId, "stock_valuation_layer_stock_move_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountMoveId).HasColumnName("account_move_id");
            entity.Property(e => e.AccountMoveLineId).HasColumnName("account_move_line_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.PriceDiffValue).HasColumnName("price_diff_value");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.RemainingQty).HasColumnName("remaining_qty");
            entity.Property(e => e.RemainingValue).HasColumnName("remaining_value");
            entity.Property(e => e.StockMoveId).HasColumnName("stock_move_id");
            entity.Property(e => e.StockValuationLayerId).HasColumnName("stock_valuation_layer_id");
            entity.Property(e => e.UnitCost).HasColumnName("unit_cost");
            entity.Property(e => e.Value).HasColumnName("value");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.AccountMove).WithMany(p => p.StockValuationLayers)
                .HasForeignKey(d => d.AccountMoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_valuation_layer_account_move_id_fkey");

            entity.HasOne(d => d.AccountMoveLine).WithMany(p => p.StockValuationLayers)
                .HasForeignKey(d => d.AccountMoveLineId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_valuation_layer_account_move_line_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_valuation_layer_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_valuation_layer_create_uid_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockValuationLayers)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_valuation_layer_product_id_fkey");

            entity.HasOne(d => d.StockMove).WithMany(p => p.StockValuationLayers)
                .HasForeignKey(d => d.StockMoveId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_valuation_layer_stock_move_id_fkey");

            entity.HasOne(d => d.StockValuationLayerNavigation).WithMany(p => p.InverseStockValuationLayerNavigation)
                .HasForeignKey(d => d.StockValuationLayerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_valuation_layer_stock_valuation_layer_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_valuation_layer_write_uid_fkey");
        });

        modelBuilder.Entity<StockValuationLayerRevaluation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_valuation_layer_revaluation_pkey");

            entity.ToTable("stock_valuation_layer_revaluation");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountId).HasColumnName("account_id");
            entity.Property(e => e.AccountJournalId).HasColumnName("account_journal_id");
            entity.Property(e => e.AddedValue).HasColumnName("added_value");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Reason).HasColumnName("reason");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Account).WithMany(p => p.StockValuationLayerRevaluations)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_valuation_layer_revaluation_account_id_fkey");

            entity.HasOne(d => d.AccountJournal).WithMany(p => p.StockValuationLayerRevaluations)
                .HasForeignKey(d => d.AccountJournalId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_valuation_layer_revaluation_account_journal_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_valuation_layer_revaluation_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_valuation_layer_revaluation_create_uid_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockValuationLayerRevaluations)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_valuation_layer_revaluation_product_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_valuation_layer_revaluation_write_uid_fkey");
        });

        modelBuilder.Entity<StockWarehouse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_warehouse_pkey");

            entity.ToTable("stock_warehouse");

            entity.HasIndex(e => new { e.Code, e.TenantId }, "stock_warehouse_warehouse_code_uniq").IsUnique();

            entity.HasIndex(e => new { e.Name, e.TenantId }, "stock_warehouse_warehouse_name_uniq").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.BuyPullId).HasColumnName("buy_pull_id");
            entity.Property(e => e.BuyToResupply).HasColumnName("buy_to_resupply");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CrossdockRouteId).HasColumnName("crossdock_route_id");
            entity.Property(e => e.DeliveryRouteId).HasColumnName("delivery_route_id");
            entity.Property(e => e.DeliverySteps).HasColumnName("delivery_steps");
            entity.Property(e => e.InTypeId).HasColumnName("in_type_id");
            entity.Property(e => e.IntTypeId).HasColumnName("int_type_id");
            entity.Property(e => e.LotStockId).HasColumnName("lot_stock_id");
            entity.Property(e => e.ManuTypeId).HasColumnName("manu_type_id");
            entity.Property(e => e.ManufactureMtoPullId).HasColumnName("manufacture_mto_pull_id");
            entity.Property(e => e.ManufacturePullId).HasColumnName("manufacture_pull_id");
            entity.Property(e => e.ManufactureSteps).HasColumnName("manufacture_steps");
            entity.Property(e => e.ManufactureToResupply).HasColumnName("manufacture_to_resupply");
            entity.Property(e => e.MtoPullId).HasColumnName("mto_pull_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.OutTypeId).HasColumnName("out_type_id");
            entity.Property(e => e.PackTypeId).HasColumnName("pack_type_id");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.PbmLocId).HasColumnName("pbm_loc_id");
            entity.Property(e => e.PbmMtoPullId).HasColumnName("pbm_mto_pull_id");
            entity.Property(e => e.PbmRouteId).HasColumnName("pbm_route_id");
            entity.Property(e => e.PbmTypeId).HasColumnName("pbm_type_id");
            entity.Property(e => e.PickTypeId).HasColumnName("pick_type_id");
            entity.Property(e => e.PosTypeId).HasColumnName("pos_type_id");
            entity.Property(e => e.ReceptionRouteId).HasColumnName("reception_route_id");
            entity.Property(e => e.ReceptionSteps).HasColumnName("reception_steps");
            entity.Property(e => e.ReturnTypeId).HasColumnName("return_type_id");
            entity.Property(e => e.SamLocId).HasColumnName("sam_loc_id");
            entity.Property(e => e.SamRuleId).HasColumnName("sam_rule_id");
            entity.Property(e => e.SamTypeId).HasColumnName("sam_type_id");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.ViewLocationId).HasColumnName("view_location_id");
            entity.Property(e => e.WhInputStockLocId).HasColumnName("wh_input_stock_loc_id");
            entity.Property(e => e.WhOutputStockLocId).HasColumnName("wh_output_stock_loc_id");
            entity.Property(e => e.WhPackStockLocId).HasColumnName("wh_pack_stock_loc_id");
            entity.Property(e => e.WhQcStockLocId).HasColumnName("wh_qc_stock_loc_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.BuyPull).WithMany(p => p.StockWarehouseBuyPulls)
                .HasForeignKey(d => d.BuyPullId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_buy_pull_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_warehouse_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_create_uid_fkey");

            entity.HasOne(d => d.CrossdockRoute).WithMany(p => p.StockWarehouseCrossdockRoutes)
                .HasForeignKey(d => d.CrossdockRouteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_warehouse_crossdock_route_id_fkey");

            entity.HasOne(d => d.DeliveryRoute).WithMany(p => p.StockWarehouseDeliveryRoutes)
                .HasForeignKey(d => d.DeliveryRouteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_warehouse_delivery_route_id_fkey");

            entity.HasOne(d => d.InType).WithMany(p => p.StockWarehouseInTypes)
                .HasForeignKey(d => d.InTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_in_type_id_fkey");

            entity.HasOne(d => d.IntType).WithMany(p => p.StockWarehouseIntTypes)
                .HasForeignKey(d => d.IntTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_int_type_id_fkey");

            entity.HasOne(d => d.LotStock).WithMany(p => p.StockWarehouseLotStocks)
                .HasForeignKey(d => d.LotStockId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_warehouse_lot_stock_id_fkey");

            entity.HasOne(d => d.ManuType).WithMany(p => p.StockWarehouseManuTypes)
                .HasForeignKey(d => d.ManuTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_manu_type_id_fkey");

            entity.HasOne(d => d.ManufactureMtoPull).WithMany(p => p.StockWarehouseManufactureMtoPulls)
                .HasForeignKey(d => d.ManufactureMtoPullId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_manufacture_mto_pull_id_fkey");

            entity.HasOne(d => d.ManufacturePull).WithMany(p => p.StockWarehouseManufacturePulls)
                .HasForeignKey(d => d.ManufacturePullId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_manufacture_pull_id_fkey");

            entity.HasOne(d => d.MtoPull).WithMany(p => p.StockWarehouseMtoPulls)
                .HasForeignKey(d => d.MtoPullId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_mto_pull_id_fkey");

            entity.HasOne(d => d.OutType).WithMany(p => p.StockWarehouseOutTypes)
                .HasForeignKey(d => d.OutTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_out_type_id_fkey");

            entity.HasOne(d => d.PackType).WithMany(p => p.StockWarehousePackTypes)
                .HasForeignKey(d => d.PackTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_pack_type_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_partner_id_fkey");

            entity.HasOne(d => d.PbmLoc).WithMany(p => p.StockWarehousePbmLocs)
                .HasForeignKey(d => d.PbmLocId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_pbm_loc_id_fkey");

            entity.HasOne(d => d.PbmMtoPull).WithMany(p => p.StockWarehousePbmMtoPulls)
                .HasForeignKey(d => d.PbmMtoPullId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_pbm_mto_pull_id_fkey");

            entity.HasOne(d => d.PbmRoute).WithMany(p => p.StockWarehousePbmRoutes)
                .HasForeignKey(d => d.PbmRouteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_warehouse_pbm_route_id_fkey");

            entity.HasOne(d => d.PbmType).WithMany(p => p.StockWarehousePbmTypes)
                .HasForeignKey(d => d.PbmTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_pbm_type_id_fkey");

            entity.HasOne(d => d.PickType).WithMany(p => p.StockWarehousePickTypes)
                .HasForeignKey(d => d.PickTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_pick_type_id_fkey");

            entity.HasOne(d => d.PosType).WithMany(p => p.StockWarehousePosTypes)
                .HasForeignKey(d => d.PosTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_pos_type_id_fkey");

            entity.HasOne(d => d.ReceptionRoute).WithMany(p => p.StockWarehouseReceptionRoutes)
                .HasForeignKey(d => d.ReceptionRouteId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_warehouse_reception_route_id_fkey");

            entity.HasOne(d => d.ReturnType).WithMany(p => p.StockWarehouseReturnTypes)
                .HasForeignKey(d => d.ReturnTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_return_type_id_fkey");

            entity.HasOne(d => d.SamLoc).WithMany(p => p.StockWarehouseSamLocs)
                .HasForeignKey(d => d.SamLocId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_sam_loc_id_fkey");

            entity.HasOne(d => d.SamRule).WithMany(p => p.StockWarehouseSamRules)
                .HasForeignKey(d => d.SamRuleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_sam_rule_id_fkey");

            entity.HasOne(d => d.SamType).WithMany(p => p.StockWarehouseSamTypes)
                .HasForeignKey(d => d.SamTypeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_sam_type_id_fkey");

            entity.HasOne(d => d.ViewLocation).WithMany(p => p.StockWarehouseViewLocations)
                .HasForeignKey(d => d.ViewLocationId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_warehouse_view_location_id_fkey");

            entity.HasOne(d => d.WhInputStockLoc).WithMany(p => p.StockWarehouseWhInputStockLocs)
                .HasForeignKey(d => d.WhInputStockLocId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_wh_input_stock_loc_id_fkey");

            entity.HasOne(d => d.WhOutputStockLoc).WithMany(p => p.StockWarehouseWhOutputStockLocs)
                .HasForeignKey(d => d.WhOutputStockLocId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_wh_output_stock_loc_id_fkey");

            entity.HasOne(d => d.WhPackStockLoc).WithMany(p => p.StockWarehouseWhPackStockLocs)
                .HasForeignKey(d => d.WhPackStockLocId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_wh_pack_stock_loc_id_fkey");

            entity.HasOne(d => d.WhQcStockLoc).WithMany(p => p.StockWarehouseWhQcStockLocs)
                .HasForeignKey(d => d.WhQcStockLocId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_wh_qc_stock_loc_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_write_uid_fkey");

            //entity.HasMany(d => d.SuppliedWhs).WithMany(p => p.SupplierWhs)
            entity.HasMany<StockWarehouse>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockWhResupplyTable",
                    r => r.HasOne<StockWarehouse>().WithMany()
                        .HasForeignKey("SuppliedWhId")
                        .HasConstraintName("stock_wh_resupply_table_supplied_wh_id_fkey"),
                    l => l.HasOne<StockWarehouse>().WithMany()
                        .HasForeignKey("SupplierWhId")
                        .HasConstraintName("stock_wh_resupply_table_supplier_wh_id_fkey"),
                    j =>
                    {
                        j.HasKey("SuppliedWhId", "SupplierWhId").HasName("stock_wh_resupply_table_pkey");
                        j.ToTable("stock_wh_resupply_table");
                        j.HasIndex(new[] { "SupplierWhId", "SuppliedWhId" }, "stock_wh_resupply_table_supplier_wh_id_supplied_wh_id_idx");
                    });

            //entity.HasMany(d => d.SupplierWhs).WithMany(p => p.SuppliedWhs)
            entity.HasMany<StockWarehouse>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "StockWhResupplyTable",
                    r => r.HasOne<StockWarehouse>().WithMany()
                        .HasForeignKey("SupplierWhId")
                        .HasConstraintName("stock_wh_resupply_table_supplier_wh_id_fkey"),
                    l => l.HasOne<StockWarehouse>().WithMany()
                        .HasForeignKey("SuppliedWhId")
                        .HasConstraintName("stock_wh_resupply_table_supplied_wh_id_fkey"),
                    j =>
                    {
                        j.HasKey("SuppliedWhId", "SupplierWhId").HasName("stock_wh_resupply_table_pkey");
                        j.ToTable("stock_wh_resupply_table");
                        j.HasIndex(new[] { "SupplierWhId", "SuppliedWhId" }, "stock_wh_resupply_table_supplier_wh_id_supplied_wh_id_idx");
                    });
        });

        modelBuilder.Entity<StockWarehouseOrderpoint>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_warehouse_orderpoint_pkey");

            entity.ToTable("stock_warehouse_orderpoint");

            entity.HasIndex(e => e.TenantId, "stock_warehouse_orderpoint_company_id_index");

            entity.HasIndex(e => e.LocationId, "stock_warehouse_orderpoint_location_id_index");

            entity.HasIndex(e => new { e.ProductId, e.LocationId, e.TenantId }, "stock_warehouse_orderpoint_product_location_check").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.BomId).HasColumnName("bom_id");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.GroupId).HasColumnName("group_id");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.ManufacturingVisibilityDays).HasColumnName("manufacturing_visibility_days");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.ProductCategoryId).HasColumnName("product_category_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductMaxQty).HasColumnName("product_max_qty");
            entity.Property(e => e.ProductMinQty).HasColumnName("product_min_qty");
            entity.Property(e => e.PurchaseVisibilityDays).HasColumnName("purchase_visibility_days");
            entity.Property(e => e.QtyMultiple).HasColumnName("qty_multiple");
            entity.Property(e => e.QtyToOrder).HasColumnName("qty_to_order");
            entity.Property(e => e.RouteId).HasColumnName("route_id");
            entity.Property(e => e.SnoozedUntil).HasColumnName("snoozed_until");
            entity.Property(e => e.SupplierId).HasColumnName("supplier_id");
            entity.Property(e => e.Trigger).HasColumnName("trigger");
            entity.Property(e => e.VendorId).HasColumnName("vendor_id");
            entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Bom).WithMany(p => p.StockWarehouseOrderpoints)
                .HasForeignKey(d => d.BomId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_orderpoint_bom_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("stock_warehouse_orderpoint_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_orderpoint_create_uid_fkey");

            entity.HasOne(d => d.Group).WithMany(p => p.StockWarehouseOrderpoints)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_orderpoint_group_id_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.StockWarehouseOrderpoints)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_warehouse_orderpoint_location_id_fkey");

            entity.HasOne(d => d.ProductCategory).WithMany(p => p.StockWarehouseOrderpoints)
                .HasForeignKey(d => d.ProductCategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_orderpoint_product_category_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockWarehouseOrderpoints)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_warehouse_orderpoint_product_id_fkey");

            entity.HasOne(d => d.Route).WithMany(p => p.StockWarehouseOrderpoints)
                .HasForeignKey(d => d.RouteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_orderpoint_route_id_fkey");

            entity.HasOne(d => d.Supplier).WithMany(p => p.StockWarehouseOrderpoints)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_orderpoint_supplier_id_fkey");

            entity.HasOne(d => d.Vendor).WithMany(p => p.StockWarehouseOrderpoints)
                .HasForeignKey(d => d.VendorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_orderpoint_vendor_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.StockWarehouseOrderpoints)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_warehouse_orderpoint_warehouse_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warehouse_orderpoint_write_uid_fkey");
        });

        modelBuilder.Entity<StockWarnInsufficientQtyRepair>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_warn_insufficient_qty_repair_pkey");

            entity.ToTable("stock_warn_insufficient_qty_repair");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductUomName).HasColumnName("product_uom_name");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.RepairId).HasColumnName("repair_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warn_insufficient_qty_repair_create_uid_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.StockWarnInsufficientQtyRepairs)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_warn_insufficient_qty_repair_location_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockWarnInsufficientQtyRepairs)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_warn_insufficient_qty_repair_product_id_fkey");

            entity.HasOne(d => d.Repair).WithMany(p => p.StockWarnInsufficientQtyRepairs)
                .HasForeignKey(d => d.RepairId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warn_insufficient_qty_repair_repair_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warn_insufficient_qty_repair_write_uid_fkey");
        });

        modelBuilder.Entity<StockWarnInsufficientQtyScrap>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_warn_insufficient_qty_scrap_pkey");

            entity.ToTable("stock_warn_insufficient_qty_scrap");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductUomName).HasColumnName("product_uom_name");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.ScrapId).HasColumnName("scrap_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warn_insufficient_qty_scrap_create_uid_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.StockWarnInsufficientQtyScraps)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_warn_insufficient_qty_scrap_location_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockWarnInsufficientQtyScraps)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_warn_insufficient_qty_scrap_product_id_fkey");

            entity.HasOne(d => d.Scrap).WithMany(p => p.StockWarnInsufficientQtyScraps)
                .HasForeignKey(d => d.ScrapId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warn_insufficient_qty_scrap_scrap_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warn_insufficient_qty_scrap_write_uid_fkey");
        });

        modelBuilder.Entity<StockWarnInsufficientQtyUnbuild>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("stock_warn_insufficient_qty_unbuild_pkey");

            entity.ToTable("stock_warn_insufficient_qty_unbuild");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LocationId).HasColumnName("location_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ProductUomName).HasColumnName("product_uom_name");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.UnbuildId).HasColumnName("unbuild_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warn_insufficient_qty_unbuild_create_uid_fkey");

            entity.HasOne(d => d.Location).WithMany(p => p.StockWarnInsufficientQtyUnbuilds)
                .HasForeignKey(d => d.LocationId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_warn_insufficient_qty_unbuild_location_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.StockWarnInsufficientQtyUnbuilds)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("stock_warn_insufficient_qty_unbuild_product_id_fkey");

            entity.HasOne(d => d.Unbuild).WithMany(p => p.StockWarnInsufficientQtyUnbuilds)
                .HasForeignKey(d => d.UnbuildId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warn_insufficient_qty_unbuild_unbuild_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("stock_warn_insufficient_qty_unbuild_write_uid_fkey");
        });

        modelBuilder.Entity<ThemeIrAsset>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("theme_ir_asset_pkey");

            entity.ToTable("theme_ir_asset");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Bundle).HasColumnName("bundle");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Directive).HasColumnName("directive");
            entity.Property(e => e.Key).HasColumnName("key");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Path).HasColumnName("path");
            entity.Property(e => e.Sequence)
                //.ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.Target).HasColumnName("target");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("theme_ir_asset_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("theme_ir_asset_write_uid_fkey");
        });

        modelBuilder.Entity<ThemeIrAttachment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("theme_ir_attachment_pkey");

            entity.ToTable("theme_ir_attachment");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Key).HasColumnName("key");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Url).HasColumnName("url");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("theme_ir_attachment_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("theme_ir_attachment_write_uid_fkey");
        });

        modelBuilder.Entity<ThemeIrUiView>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("theme_ir_ui_view_pkey");

            entity.ToTable("theme_ir_ui_view");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.Arch)
                .HasColumnType("jsonb")
                .HasColumnName("arch");
            entity.Property(e => e.ArchFs).HasColumnName("arch_fs");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CustomizeShow).HasColumnName("customize_show");
            entity.Property(e => e.InheritId).HasColumnName("inherit_id");
            entity.Property(e => e.Key).HasColumnName("key");
            entity.Property(e => e.Mode).HasColumnName("mode");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("theme_ir_ui_view_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("theme_ir_ui_view_write_uid_fkey");
        });

        modelBuilder.Entity<ThemeWebsiteMenu>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("theme_website_menu_pkey");

            entity.ToTable("theme_website_menu");

            entity.HasIndex(e => e.ParentId, "theme_website_menu_parent_id_index");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.MegaMenuClasses).HasColumnName("mega_menu_classes");
            entity.Property(e => e.MegaMenuContent).HasColumnName("mega_menu_content");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.NewWindow).HasColumnName("new_window");
            entity.Property(e => e.PageId).HasColumnName("page_id");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.Sequence)
                //.ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.Url).HasColumnName("url");
            entity.Property(e => e.UseMainMenuAsParent).HasColumnName("use_main_menu_as_parent");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("theme_website_menu_create_uid_fkey");

            entity.HasOne(d => d.Page).WithMany(p => p.ThemeWebsiteMenus)
                .HasForeignKey(d => d.PageId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("theme_website_menu_page_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("theme_website_menu_parent_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("theme_website_menu_write_uid_fkey");
        });

        modelBuilder.Entity<ThemeWebsitePage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("theme_website_page_pkey");

            entity.ToTable("theme_website_page");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.FooterVisible).HasColumnName("footer_visible");
            entity.Property(e => e.HeaderColor).HasColumnName("header_color");
            entity.Property(e => e.HeaderOverlay).HasColumnName("header_overlay");
            entity.Property(e => e.HeaderVisible).HasColumnName("header_visible");
            entity.Property(e => e.IsPublished).HasColumnName("is_published");
            entity.Property(e => e.Url).HasColumnName("url");
            entity.Property(e => e.ViewId).HasColumnName("view_id");
            entity.Property(e => e.WebsiteIndexed).HasColumnName("website_indexed");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("theme_website_page_create_uid_fkey");

            entity.HasOne(d => d.View).WithMany(p => p.ThemeWebsitePages)
                .HasForeignKey(d => d.ViewId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("theme_website_page_view_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("theme_website_page_write_uid_fkey");
        });

        modelBuilder.Entity<UomCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("uom_category_pkey");

            entity.ToTable("uom_category");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.IsPosGroupable).HasColumnName("is_pos_groupable");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("uom_category_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("uom_category_write_uid_fkey");
        });

        modelBuilder.Entity<UomUom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("uom_uom_pkey");

            entity.ToTable("uom_uom");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Factor).HasColumnName("factor");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Rounding).HasColumnName("rounding");
            entity.Property(e => e.UomType).HasColumnName("uom_type");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.Category).WithMany(p => p.UomUoms)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("uom_uom_category_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("uom_uom_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("uom_uom_write_uid_fkey");
        });

        modelBuilder.Entity<UtmCampaign>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("utm_campaign_pkey");

            entity.ToTable("utm_campaign");

            entity.HasIndex(e => e.Name, "utm_campaign_unique_name").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.IsAutoCampaign).HasColumnName("is_auto_campaign");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.StageId).HasColumnName("stage_id");
            entity.Property(e => e.Title)
                .HasColumnType("jsonb")
                .HasColumnName("title");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("utm_campaign_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("utm_campaign_create_uid_fkey");

            entity.HasOne(d => d.Stage).WithMany(p => p.UtmCampaigns)
                .HasForeignKey(d => d.StageId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("utm_campaign_stage_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("utm_campaign_user_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("utm_campaign_write_uid_fkey");

            //entity.HasMany(d => d.Campaigns).WithMany(p => p.Tags)
            entity.HasMany<UtmTag>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "UtmTagRel",
                    r => r.HasOne<UtmTag>().WithMany()
                        .HasForeignKey("CampaignId")
                        .HasConstraintName("utm_tag_rel_campaign_id_fkey"),
                    l => l.HasOne<UtmCampaign>().WithMany()
                        .HasForeignKey("TagId")
                        .HasConstraintName("utm_tag_rel_tag_id_fkey"),
                    j =>
                    {
                        j.HasKey("TagId", "CampaignId").HasName("utm_tag_rel_pkey");
                        j.ToTable("utm_tag_rel");
                        j.HasIndex(new[] { "CampaignId", "TagId" }, "utm_tag_rel_campaign_id_tag_id_idx");
                    });
        });

        modelBuilder.Entity<UtmMedium>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("utm_medium_pkey");

            entity.ToTable("utm_medium");

            entity.HasIndex(e => e.Name, "utm_medium_unique_name").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("utm_medium_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("utm_medium_write_uid_fkey");
        });

        modelBuilder.Entity<UtmSource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("utm_source_pkey");

            entity.ToTable("utm_source");

            entity.HasIndex(e => e.Name, "utm_source_unique_name").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("utm_source_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("utm_source_write_uid_fkey");
        });

        modelBuilder.Entity<UtmStage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("utm_stage_pkey");

            entity.ToTable("utm_stage");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.Sequence)
                //.ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("utm_stage_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("utm_stage_write_uid_fkey");
        });

        modelBuilder.Entity<UtmTag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("utm_tag_pkey");

            entity.ToTable("utm_tag");

            entity.HasIndex(e => e.Name, "utm_tag_name_uniq").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Color).HasColumnName("color");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("utm_tag_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("utm_tag_write_uid_fkey");
        });

        modelBuilder.Entity<ValidateAccountMove>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("validate_account_move_pkey");

            entity.ToTable("validate_account_move");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.ForcePost).HasColumnName("force_post");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("validate_account_move_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("validate_account_move_write_uid_fkey");
        });

        modelBuilder.Entity<WebEditorConverterTest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("web_editor_converter_test_pkey");

            entity.ToTable("web_editor_converter_test");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Binary).HasColumnName("binary");
            entity.Property(e => e.Char).HasColumnName("char");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Datetime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("datetime");
            entity.Property(e => e.Float).HasColumnName("float");
            entity.Property(e => e.Html).HasColumnName("html");
            entity.Property(e => e.Integer).HasColumnName("integer");
            entity.Property(e => e.Many2one).HasColumnName("many2one");
            entity.Property(e => e.Numeric).HasColumnName("numeric");
            entity.Property(e => e.SelectionStr).HasColumnName("selection_str");
            entity.Property(e => e.Text).HasColumnName("text");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("web_editor_converter_test_create_uid_fkey");

            entity.HasOne(d => d.Many2oneNavigation).WithMany(p => p.WebEditorConverterTests)
                .HasForeignKey(d => d.Many2one)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("web_editor_converter_test_many2one_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("web_editor_converter_test_write_uid_fkey");
        });

        modelBuilder.Entity<WebEditorConverterTestSub>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("web_editor_converter_test_sub_pkey");

            entity.ToTable("web_editor_converter_test_sub");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("web_editor_converter_test_sub_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("web_editor_converter_test_sub_write_uid_fkey");
        });

        modelBuilder.Entity<WebTourTour>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("web_tour_tour_pkey");

            entity.ToTable("web_tour_tour");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("web_tour_tour_user_id_fkey");
        });

        modelBuilder.Entity<Website>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_pkey");

            entity.ToTable("website");

            entity.HasIndex(e => e.Domain, "website_domain_unique").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccountOnCheckout).HasColumnName("account_on_checkout");
            entity.Property(e => e.AddToCartAction).HasColumnName("add_to_cart_action");
            entity.Property(e => e.AuthSignupUninvited).HasColumnName("auth_signup_uninvited");
            entity.Property(e => e.AutoRedirectLang).HasColumnName("auto_redirect_lang");
            entity.Property(e => e.CartAbandonedDelay).HasColumnName("cart_abandoned_delay");
            entity.Property(e => e.CartRecoveryMailTemplateId).HasColumnName("cart_recovery_mail_template_id");
            entity.Property(e => e.CdnActivated).HasColumnName("cdn_activated");
            entity.Property(e => e.CdnFilters).HasColumnName("cdn_filters");
            entity.Property(e => e.CdnUrl).HasColumnName("cdn_url");
            entity.Property(e => e.TenantId).HasColumnName("company_id");
            entity.Property(e => e.ConfiguratorDone).HasColumnName("configurator_done");
            entity.Property(e => e.ContactUsButtonUrl)
                .HasColumnType("jsonb")
                .HasColumnName("contact_us_button_url");
            entity.Property(e => e.CookiesBar).HasColumnName("cookies_bar");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.CrmDefaultTeamId).HasColumnName("crm_default_team_id");
            entity.Property(e => e.CrmDefaultUserId).HasColumnName("crm_default_user_id");
            entity.Property(e => e.CustomCodeFooter).HasColumnName("custom_code_footer");
            entity.Property(e => e.CustomCodeHead).HasColumnName("custom_code_head");
            entity.Property(e => e.DefaultLangId).HasColumnName("default_lang_id");
            entity.Property(e => e.Domain).HasColumnName("domain");
            entity.Property(e => e.EnabledPortalReorderButton).HasColumnName("enabled_portal_reorder_button");
            entity.Property(e => e.GoogleAnalyticsKey).HasColumnName("google_analytics_key");
            entity.Property(e => e.GoogleMapsApiKey).HasColumnName("google_maps_api_key");
            entity.Property(e => e.GoogleSearchConsole).HasColumnName("google_search_console");
            entity.Property(e => e.HasSocialDefaultImage).HasColumnName("has_social_default_image");
            entity.Property(e => e.HomepageUrl).HasColumnName("homepage_url");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.PlausibleSharedKey).HasColumnName("plausible_shared_key");
            entity.Property(e => e.PlausibleSite).HasColumnName("plausible_site");
            entity.Property(e => e.PreventZeroPriceSale).HasColumnName("prevent_zero_price_sale");
            entity.Property(e => e.PreventZeroPriceSaleText)
                .HasColumnType("jsonb")
                .HasColumnName("prevent_zero_price_sale_text");
            entity.Property(e => e.ProductPageGridColumns).HasColumnName("product_page_grid_columns");
            entity.Property(e => e.ProductPageImageLayout).HasColumnName("product_page_image_layout");
            entity.Property(e => e.ProductPageImageSpacing).HasColumnName("product_page_image_spacing");
            entity.Property(e => e.ProductPageImageWidth).HasColumnName("product_page_image_width");
            entity.Property(e => e.RobotsTxt).HasColumnName("robots_txt");
            entity.Property(e => e.SalespersonId).HasColumnName("salesperson_id");
            entity.Property(e => e.SalesteamId).HasColumnName("salesteam_id");
            entity.Property(e => e.SendAbandonedCartEmail).HasColumnName("send_abandoned_cart_email");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.ShopDefaultSort).HasColumnName("shop_default_sort");
            entity.Property(e => e.ShopPpg).HasColumnName("shop_ppg");
            entity.Property(e => e.ShopPpr).HasColumnName("shop_ppr");
            entity.Property(e => e.SocialFacebook).HasColumnName("social_facebook");
            entity.Property(e => e.SocialGithub).HasColumnName("social_github");
            entity.Property(e => e.SocialInstagram).HasColumnName("social_instagram");
            entity.Property(e => e.SocialLinkedin).HasColumnName("social_linkedin");
            entity.Property(e => e.SocialTwitter).HasColumnName("social_twitter");
            entity.Property(e => e.SocialYoutube).HasColumnName("social_youtube");
            entity.Property(e => e.SpecificUserAccount).HasColumnName("specific_user_account");
            entity.Property(e => e.ThemeId).HasColumnName("theme_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.WarehouseId).HasColumnName("warehouse_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.CartRecoveryMailTemplate).WithMany(p => p.Websites)
                .HasForeignKey(d => d.CartRecoveryMailTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_cart_recovery_mail_template_id_fkey");

            entity.HasOne<ResCompany>().WithMany()
                .HasForeignKey(d => d.TenantId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("website_company_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_create_uid_fkey");

            entity.HasOne(d => d.CrmDefaultTeam).WithMany(p => p.WebsiteCrmDefaultTeams)
                .HasForeignKey(d => d.CrmDefaultTeamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_crm_default_team_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CrmDefaultUserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_crm_default_user_id_fkey");

            entity.HasOne(d => d.DefaultLang).WithMany(p => p.Websites)
                .HasForeignKey(d => d.DefaultLangId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("website_default_lang_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.SalespersonId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_salesperson_id_fkey");

            entity.HasOne(d => d.Salesteam).WithMany(p => p.WebsiteSalesteams)
                .HasForeignKey(d => d.SalesteamId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_salesteam_id_fkey");

            entity.HasOne(d => d.Theme).WithMany(p => p.Websites)
                .HasForeignKey(d => d.ThemeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_theme_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("website_user_id_fkey");

            entity.HasOne(d => d.Warehouse).WithMany(p => p.Websites)
                .HasForeignKey(d => d.WarehouseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_warehouse_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_write_uid_fkey");

            //entity.HasMany(d => d.Langs).WithMany(p => p.WebsitesNavigation)
            entity.HasMany<ResLang>().WithMany()
                .UsingEntity<Dictionary<string, object>>(
                    "WebsiteLangRel",
                    r => r.HasOne<ResLang>().WithMany()
                        .HasForeignKey("LangId")
                        .HasConstraintName("website_lang_rel_lang_id_fkey"),
                    l => l.HasOne<Website>().WithMany()
                        .HasForeignKey("WebsiteId")
                        .HasConstraintName("website_lang_rel_website_id_fkey"),
                    j =>
                    {
                        j.HasKey("WebsiteId", "LangId").HasName("website_lang_rel_pkey");
                        j.ToTable("website_lang_rel");
                        j.HasIndex(new[] { "LangId", "WebsiteId" }, "website_lang_rel_lang_id_website_id_idx");
                    });
        });

        modelBuilder.Entity<WebsiteBaseUnit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_base_unit_pkey");

            entity.ToTable("website_base_unit");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_base_unit_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_base_unit_write_uid_fkey");
        });

        modelBuilder.Entity<WebsiteConfiguratorFeature>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_configurator_feature_pkey");

            entity.ToTable("website_configurator_feature");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Description)
                .HasColumnType("jsonb")
                .HasColumnName("description");
            entity.Property(e => e.FeatureUrl).HasColumnName("feature_url");
            entity.Property(e => e.IapPageCode).HasColumnName("iap_page_code");
            entity.Property(e => e.Icon).HasColumnName("icon");
            entity.Property(e => e.MenuCompany).HasColumnName("menu_company");
            entity.Property(e => e.MenuSequence).HasColumnName("menu_sequence");
            entity.Property(e => e.ModuleId).HasColumnName("module_id");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.PageViewId).HasColumnName("page_view_id");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.WebsiteConfigPreselection).HasColumnName("website_config_preselection");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_configurator_feature_create_uid_fkey");

            entity.HasOne(d => d.Module).WithMany(p => p.WebsiteConfiguratorFeatures)
                .HasForeignKey(d => d.ModuleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_configurator_feature_module_id_fkey");

            entity.HasOne(d => d.PageView).WithMany(p => p.WebsiteConfiguratorFeatures)
                .HasForeignKey(d => d.PageViewId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_configurator_feature_page_view_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_configurator_feature_write_uid_fkey");
        });

        modelBuilder.Entity<WebsiteMenu>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_menu_pkey");

            entity.ToTable("website_menu");

            entity.HasIndex(e => e.ParentId, "website_menu_parent_id_index");

            entity.HasIndex(e => e.ParentPath, "website_menu_parent_path_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.MegaMenuClasses).HasColumnName("mega_menu_classes");
            entity.Property(e => e.MegaMenuContent)
                .HasColumnType("jsonb")
                .HasColumnName("mega_menu_content");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.NewWindow).HasColumnName("new_window");
            entity.Property(e => e.PageId).HasColumnName("page_id");
            entity.Property(e => e.ParentId).HasColumnName("parent_id");
            entity.Property(e => e.ParentPath).HasColumnName("parent_path");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.ThemeTemplateId).HasColumnName("theme_template_id");
            entity.Property(e => e.Url).HasColumnName("url");
            entity.Property(e => e.WebsiteId).HasColumnName("website_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_menu_create_uid_fkey");

            entity.HasOne(d => d.Page).WithMany(p => p.WebsiteMenus)
                .HasForeignKey(d => d.PageId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_menu_page_id_fkey");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_menu_parent_id_fkey");

            entity.HasOne(d => d.ThemeTemplate).WithMany(p => p.WebsiteMenus)
                .HasForeignKey(d => d.ThemeTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_menu_theme_template_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.WebsiteMenus)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_menu_website_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_menu_write_uid_fkey");
        });

        modelBuilder.Entity<WebsitePage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_page_pkey");

            entity.ToTable("website_page");

            entity.HasIndex(e => e.IsPublished, "website_page_is_published_index");

            entity.HasIndex(e => e.WebsiteId, "website_page_website_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.DatePublish)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date_publish");
            entity.Property(e => e.FooterVisible).HasColumnName("footer_visible");
            entity.Property(e => e.HeaderColor).HasColumnName("header_color");
            entity.Property(e => e.HeaderOverlay).HasColumnName("header_overlay");
            entity.Property(e => e.HeaderVisible).HasColumnName("header_visible");
            entity.Property(e => e.IsPublished).HasColumnName("is_published");
            entity.Property(e => e.ThemeTemplateId).HasColumnName("theme_template_id");
            entity.Property(e => e.Url).HasColumnName("url");
            entity.Property(e => e.ViewId).HasColumnName("view_id");
            entity.Property(e => e.WebsiteId).HasColumnName("website_id");
            entity.Property(e => e.WebsiteIndexed).HasColumnName("website_indexed");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_page_create_uid_fkey");

            entity.HasOne(d => d.ThemeTemplate).WithMany(p => p.WebsitePages)
                .HasForeignKey(d => d.ThemeTemplateId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_page_theme_template_id_fkey");

            entity.HasOne(d => d.View).WithMany(p => p.WebsitePages)
                .HasForeignKey(d => d.ViewId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_page_view_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.WebsitePages)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_page_website_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_page_write_uid_fkey");
        });

        modelBuilder.Entity<WebsiteRewrite>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_rewrite_pkey");

            entity.ToTable("website_rewrite");

            entity.HasIndex(e => e.UrlFrom, "website_rewrite_url_from_index");

            entity.HasIndex(e => e.WebsiteId, "website_rewrite_website_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Active).HasColumnName("active");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.RedirectType).HasColumnName("redirect_type");
            entity.Property(e => e.RouteId).HasColumnName("route_id");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.UrlFrom).HasColumnName("url_from");
            entity.Property(e => e.UrlTo).HasColumnName("url_to");
            entity.Property(e => e.WebsiteId).HasColumnName("website_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_rewrite_create_uid_fkey");

            entity.HasOne(d => d.Route).WithMany(p => p.WebsiteRewrites)
                .HasForeignKey(d => d.RouteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_rewrite_route_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.WebsiteRewrites)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_rewrite_website_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_rewrite_write_uid_fkey");
        });

        modelBuilder.Entity<WebsiteRobot>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_robots_pkey");

            entity.ToTable("website_robots");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Content).HasColumnName("content");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_robots_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_robots_write_uid_fkey");
        });

        modelBuilder.Entity<WebsiteRoute>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_route_pkey");

            entity.ToTable("website_route");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.Path).HasColumnName("path");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_route_create_uid_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_route_write_uid_fkey");
        });

        modelBuilder.Entity<WebsiteSaleExtraField>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_sale_extra_field_pkey");

            entity.ToTable("website_sale_extra_field");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.FieldId).HasColumnName("field_id");
            entity.Property(e => e.Sequence)
                .ValueGeneratedOnAdd()
                .HasColumnName("sequence");
            entity.Property(e => e.WebsiteId).HasColumnName("website_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_sale_extra_field_create_uid_fkey");

            entity.HasOne(d => d.Field).WithMany(p => p.WebsiteSaleExtraFields)
                .HasForeignKey(d => d.FieldId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_sale_extra_field_field_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.WebsiteSaleExtraFields)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_sale_extra_field_website_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_sale_extra_field_write_uid_fkey");
        });

        modelBuilder.Entity<WebsiteSnippetFilter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_snippet_filter_pkey");

            entity.ToTable("website_snippet_filter");

            entity.HasIndex(e => e.IsPublished, "website_snippet_filter_is_published_index");

            entity.HasIndex(e => e.WebsiteId, "website_snippet_filter_website_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.ActionServerId).HasColumnName("action_server_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.FieldNames).HasColumnName("field_names");
            entity.Property(e => e.FilterId).HasColumnName("filter_id");
            entity.Property(e => e.IsPublished).HasColumnName("is_published");
            entity.Property(e => e.Limit).HasColumnName("limit");
            entity.Property(e => e.Name)
                .HasColumnType("jsonb")
                .HasColumnName("name");
            entity.Property(e => e.ProductCrossSelling).HasColumnName("product_cross_selling");
            entity.Property(e => e.WebsiteId).HasColumnName("website_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne(d => d.ActionServer).WithMany(p => p.WebsiteSnippetFilters)
                .HasForeignKey(d => d.ActionServerId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_snippet_filter_action_server_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_snippet_filter_create_uid_fkey");

            entity.HasOne(d => d.Filter).WithMany(p => p.WebsiteSnippetFilters)
                .HasForeignKey(d => d.FilterId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_snippet_filter_filter_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.WebsiteSnippetFilters)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_snippet_filter_website_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_snippet_filter_write_uid_fkey");
        });

        modelBuilder.Entity<WebsiteTrack>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_track_pkey");

            entity.ToTable("website_track");

            entity.HasIndex(e => e.PageId, "website_track_page_id_index");

            entity.HasIndex(e => e.ProductId, "website_track_product_id_index").HasFilter("(product_id IS NOT NULL)");

            entity.HasIndex(e => e.Url, "website_track_url_index");

            entity.HasIndex(e => e.VisitorId, "website_track_visitor_id_index");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.PageId).HasColumnName("page_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Url).HasColumnName("url");
            entity.Property(e => e.VisitDatetime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("visit_datetime");
            entity.Property(e => e.VisitorId).HasColumnName("visitor_id");

            entity.HasOne(d => d.Page).WithMany(p => p.WebsiteTracks)
                .HasForeignKey(d => d.PageId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_track_page_id_fkey");

            entity.HasOne(d => d.Product).WithMany(p => p.WebsiteTracks)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_track_product_id_fkey");

            entity.HasOne(d => d.Visitor).WithMany(p => p.WebsiteTracks)
                .HasForeignKey(d => d.VisitorId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("website_track_visitor_id_fkey");
        });

        modelBuilder.Entity<WebsiteVisitor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("website_visitor_pkey");

            entity.ToTable("website_visitor");

            entity.HasIndex(e => e.AccessToken, "website_visitor_access_token_unique").IsUnique();

            entity.HasIndex(e => e.PartnerId, "website_visitor_partner_id_index").HasFilter("(partner_id IS NOT NULL)");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.AccessToken).HasColumnName("access_token");
            entity.Property(e => e.CountryId).HasColumnName("country_id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.LangId).HasColumnName("lang_id");
            entity.Property(e => e.LastConnectionDatetime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("last_connection_datetime");
            entity.Property(e => e.PartnerId).HasColumnName("partner_id");
            entity.Property(e => e.Timezone).HasColumnName("timezone");
            entity.Property(e => e.VisitCount).HasColumnName("visit_count");
            entity.Property(e => e.WebsiteId).HasColumnName("website_id");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResCountry>().WithMany()
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_visitor_country_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_visitor_create_uid_fkey");

            entity.HasOne(d => d.Lang).WithMany(p => p.WebsiteVisitors)
                .HasForeignKey(d => d.LangId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_visitor_lang_id_fkey");

            entity.HasOne<ResPartner>().WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_visitor_partner_id_fkey");

            entity.HasOne(d => d.Website).WithMany(p => p.WebsiteVisitors)
                .HasForeignKey(d => d.WebsiteId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_visitor_website_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("website_visitor_write_uid_fkey");
        });

        modelBuilder.Entity<WizardIrModelMenuCreate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("wizard_ir_model_menu_create_pkey");

            entity.ToTable("wizard_ir_model_menu_create");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("next_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.CreationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("create_date");
            entity.Property(e => e.CreatorId).HasColumnName("create_uid");
            entity.Property(e => e.MenuId).HasColumnName("menu_id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.LastModificationTime)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("write_date");
            entity.Property(e => e.LastModifierId).HasColumnName("write_uid");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.CreatorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("wizard_ir_model_menu_create_create_uid_fkey");

            entity.HasOne(d => d.Menu).WithMany(p => p.WizardIrModelMenuCreates)
                .HasForeignKey(d => d.MenuId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("wizard_ir_model_menu_create_menu_id_fkey");

            entity.HasOne<ResUser>().WithMany()
                .HasForeignKey(d => d.LastModifierId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("wizard_ir_model_menu_create_write_uid_fkey");
        });

        //OnModelCreatingPartial(modelBuilder);
    }

    //partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}

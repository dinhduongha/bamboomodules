
// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;

using Bamboo.Core.Models;
using Bamboo.Core.Services;

// ReSharper disable once CheckNamespace
namespace Bamboo.Core.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IBaseLanguageImportAppService), typeof(BaseLanguageImportClientProxy))]
public partial class BaseLanguageImportClientProxy : ClientProxyBase<IBaseLanguageImportAppService>, IBaseLanguageImportAppService
{
    //public virtual async Task<ListResultDto<BaseLanguageImport>> GetAllListAsync()
    //{
    //    return await RequestAsync<ListResultDto<BaseLanguageImport>>(nameof(GetAllListAsync));
    //}

    public virtual async Task<PagedResultDto<BaseLanguageImport>> GetListAsync(PagedAndSortedResultRequestDto input)
    {
        return await RequestAsync<PagedResultDto<BaseLanguageImport>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PagedAndSortedResultRequestDto), input }
        });
    }

    public virtual async Task<BaseLanguageImport> GetAsync(Guid id)
    {
        return await RequestAsync<BaseLanguageImport>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<BaseLanguageImport> CreateAsync(BaseLanguageImport input)
    {
        return await RequestAsync<BaseLanguageImport>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(BaseLanguageImport), input }
        });
    }

    public virtual async Task<BaseLanguageImport> UpdateAsync(Guid id, BaseLanguageImport input)
    {
        return await RequestAsync<BaseLanguageImport>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(BaseLanguageImport), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}

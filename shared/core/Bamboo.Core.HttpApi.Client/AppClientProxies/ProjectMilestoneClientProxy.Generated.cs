
// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;

using Bamboo.Core.Models;
using Bamboo.Core.Services;

// ReSharper disable once CheckNamespace
namespace Bamboo.Core.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IProjectMilestoneAppService), typeof(ProjectMilestoneClientProxy))]
public partial class ProjectMilestoneClientProxy : ClientProxyBase<IProjectMilestoneAppService>, IProjectMilestoneAppService
{
    //public virtual async Task<ListResultDto<ProjectMilestone>> GetAllListAsync()
    //{
    //    return await RequestAsync<ListResultDto<ProjectMilestone>>(nameof(GetAllListAsync));
    //}

    public virtual async Task<PagedResultDto<ProjectMilestone>> GetListAsync(PagedAndSortedResultRequestDto input)
    {
        return await RequestAsync<PagedResultDto<ProjectMilestone>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PagedAndSortedResultRequestDto), input }
        });
    }

    public virtual async Task<ProjectMilestone> GetAsync(Guid id)
    {
        return await RequestAsync<ProjectMilestone>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ProjectMilestone> CreateAsync(ProjectMilestone input)
    {
        return await RequestAsync<ProjectMilestone>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(ProjectMilestone), input }
        });
    }

    public virtual async Task<ProjectMilestone> UpdateAsync(Guid id, ProjectMilestone input)
    {
        return await RequestAsync<ProjectMilestone>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(ProjectMilestone), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}

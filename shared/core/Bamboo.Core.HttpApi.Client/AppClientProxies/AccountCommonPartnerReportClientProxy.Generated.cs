
// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;

using Bamboo.Core.Models;
using Bamboo.Core.Services;

// ReSharper disable once CheckNamespace
namespace Bamboo.Core.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IAccountCommonPartnerReportAppService), typeof(AccountCommonPartnerReportClientProxy))]
public partial class AccountCommonPartnerReportClientProxy : ClientProxyBase<IAccountCommonPartnerReportAppService>, IAccountCommonPartnerReportAppService
{
    //public virtual async Task<ListResultDto<AccountCommonPartnerReport>> GetAllListAsync()
    //{
    //    return await RequestAsync<ListResultDto<AccountCommonPartnerReport>>(nameof(GetAllListAsync));
    //}

    public virtual async Task<PagedResultDto<AccountCommonPartnerReport>> GetListAsync(PagedAndSortedResultRequestDto input)
    {
        return await RequestAsync<PagedResultDto<AccountCommonPartnerReport>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PagedAndSortedResultRequestDto), input }
        });
    }

    public virtual async Task<AccountCommonPartnerReport> GetAsync(Guid id)
    {
        return await RequestAsync<AccountCommonPartnerReport>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<AccountCommonPartnerReport> CreateAsync(AccountCommonPartnerReport input)
    {
        return await RequestAsync<AccountCommonPartnerReport>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(AccountCommonPartnerReport), input }
        });
    }

    public virtual async Task<AccountCommonPartnerReport> UpdateAsync(Guid id, AccountCommonPartnerReport input)
    {
        return await RequestAsync<AccountCommonPartnerReport>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(AccountCommonPartnerReport), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}

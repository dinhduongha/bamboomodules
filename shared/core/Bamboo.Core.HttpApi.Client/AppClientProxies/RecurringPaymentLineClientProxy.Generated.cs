
// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;

using Bamboo.Core.Models;
using Bamboo.Core.Services;

// ReSharper disable once CheckNamespace
namespace Bamboo.Core.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IRecurringPaymentLineAppService), typeof(RecurringPaymentLineClientProxy))]
public partial class RecurringPaymentLineClientProxy : ClientProxyBase<IRecurringPaymentLineAppService>, IRecurringPaymentLineAppService
{
    //public virtual async Task<ListResultDto<RecurringPaymentLine>> GetAllListAsync()
    //{
    //    return await RequestAsync<ListResultDto<RecurringPaymentLine>>(nameof(GetAllListAsync));
    //}

    public virtual async Task<PagedResultDto<RecurringPaymentLine>> GetListAsync(PagedAndSortedResultRequestDto input)
    {
        return await RequestAsync<PagedResultDto<RecurringPaymentLine>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PagedAndSortedResultRequestDto), input }
        });
    }

    public virtual async Task<RecurringPaymentLine> GetAsync(Guid id)
    {
        return await RequestAsync<RecurringPaymentLine>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<RecurringPaymentLine> CreateAsync(RecurringPaymentLine input)
    {
        return await RequestAsync<RecurringPaymentLine>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(RecurringPaymentLine), input }
        });
    }

    public virtual async Task<RecurringPaymentLine> UpdateAsync(Guid id, RecurringPaymentLine input)
    {
        return await RequestAsync<RecurringPaymentLine>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(RecurringPaymentLine), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}

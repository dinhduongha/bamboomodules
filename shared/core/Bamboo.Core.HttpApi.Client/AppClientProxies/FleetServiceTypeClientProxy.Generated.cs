
// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;

using Bamboo.Core.Models;
using Bamboo.Core.Services;

// ReSharper disable once CheckNamespace
namespace Bamboo.Core.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IFleetServiceTypeAppService), typeof(FleetServiceTypeClientProxy))]
public partial class FleetServiceTypeClientProxy : ClientProxyBase<IFleetServiceTypeAppService>, IFleetServiceTypeAppService
{
    //public virtual async Task<ListResultDto<FleetServiceType>> GetAllListAsync()
    //{
    //    return await RequestAsync<ListResultDto<FleetServiceType>>(nameof(GetAllListAsync));
    //}

    public virtual async Task<PagedResultDto<FleetServiceType>> GetListAsync(PagedAndSortedResultRequestDto input)
    {
        return await RequestAsync<PagedResultDto<FleetServiceType>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PagedAndSortedResultRequestDto), input }
        });
    }

    public virtual async Task<FleetServiceType> GetAsync(long id)
    {
        return await RequestAsync<FleetServiceType>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(long), id }
        });
    }

    public virtual async Task<FleetServiceType> CreateAsync(FleetServiceType input)
    {
        return await RequestAsync<FleetServiceType>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(FleetServiceType), input }
        });
    }

    public virtual async Task<FleetServiceType> UpdateAsync(long id, FleetServiceType input)
    {
        return await RequestAsync<FleetServiceType>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(long), id },
            { typeof(FleetServiceType), input }
        });
    }

    public virtual async Task DeleteAsync(long id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(long), id }
        });
    }
}

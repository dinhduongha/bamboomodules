
// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;

using Bamboo.Core.Models;
using Bamboo.Core.Services;

// ReSharper disable once CheckNamespace
namespace Bamboo.Core.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IProjectProjectStageAppService), typeof(ProjectProjectStageClientProxy))]
public partial class ProjectProjectStageClientProxy : ClientProxyBase<IProjectProjectStageAppService>, IProjectProjectStageAppService
{
    //public virtual async Task<ListResultDto<ProjectProjectStage>> GetAllListAsync()
    //{
    //    return await RequestAsync<ListResultDto<ProjectProjectStage>>(nameof(GetAllListAsync));
    //}

    public virtual async Task<PagedResultDto<ProjectProjectStage>> GetListAsync(PagedAndSortedResultRequestDto input)
    {
        return await RequestAsync<PagedResultDto<ProjectProjectStage>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PagedAndSortedResultRequestDto), input }
        });
    }

    public virtual async Task<ProjectProjectStage> GetAsync(long id)
    {
        return await RequestAsync<ProjectProjectStage>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(long), id }
        });
    }

    public virtual async Task<ProjectProjectStage> CreateAsync(ProjectProjectStage input)
    {
        return await RequestAsync<ProjectProjectStage>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(ProjectProjectStage), input }
        });
    }

    public virtual async Task<ProjectProjectStage> UpdateAsync(long id, ProjectProjectStage input)
    {
        return await RequestAsync<ProjectProjectStage>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(long), id },
            { typeof(ProjectProjectStage), input }
        });
    }

    public virtual async Task DeleteAsync(long id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(long), id }
        });
    }
}

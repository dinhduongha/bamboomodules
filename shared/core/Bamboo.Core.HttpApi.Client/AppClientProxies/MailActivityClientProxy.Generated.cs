
// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;

using Bamboo.Core.Models;
using Bamboo.Core.Services;

// ReSharper disable once CheckNamespace
namespace Bamboo.Core.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IMailActivityAppService), typeof(MailActivityClientProxy))]
public partial class MailActivityClientProxy : ClientProxyBase<IMailActivityAppService>, IMailActivityAppService
{
    //public virtual async Task<ListResultDto<MailActivity>> GetAllListAsync()
    //{
    //    return await RequestAsync<ListResultDto<MailActivity>>(nameof(GetAllListAsync));
    //}

    public virtual async Task<PagedResultDto<MailActivity>> GetListAsync(PagedAndSortedResultRequestDto input)
    {
        return await RequestAsync<PagedResultDto<MailActivity>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PagedAndSortedResultRequestDto), input }
        });
    }

    public virtual async Task<MailActivity> GetAsync(Guid id)
    {
        return await RequestAsync<MailActivity>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<MailActivity> CreateAsync(MailActivity input)
    {
        return await RequestAsync<MailActivity>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(MailActivity), input }
        });
    }

    public virtual async Task<MailActivity> UpdateAsync(Guid id, MailActivity input)
    {
        return await RequestAsync<MailActivity>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(MailActivity), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
